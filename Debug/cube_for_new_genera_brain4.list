
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f758  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc0  0800f9f0  0800f9f0  0001f9f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106b0  080106b0  00030088  2**0
                  CONTENTS
  4 .ARM          00000000  080106b0  080106b0  00030088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080106b0  080106b0  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106b0  080106b0  000206b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106b4  080106b4  000206b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080106b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019e48  20000088  08010740  00030088  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20019ed0  08010740  00039ed0  2**0
                  ALLOC
 11 .RAM_D1       0007ef40  24000000  24000000  00040000  2**5
                  ALLOC
 12 .RAM_D2       000041a0  30000000  30000000  00040000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 15 .debug_info   00066eaa  00000000  00000000  000300b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 000094ae  00000000  00000000  00096f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0003fe9b  00000000  00000000  000a040e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00002418  00000000  00000000  000e02b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00009f00  00000000  00000000  000e26c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  000401b7  00000000  00000000  000ec5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0002ea16  00000000  00000000  0012c77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0017a85f  00000000  00000000  0015b195  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  002d59f4  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00008664  00000000  00000000  002d5a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000088 	.word	0x20000088
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f9d8 	.word	0x0800f9d8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000008c 	.word	0x2000008c
 80002d4:	0800f9d8 	.word	0x0800f9d8

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_InitTick+0x40>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <HAL_InitTick+0x44>)
 80002e8:	fbb2 f3f3 	udiv	r3, r2, r3
{
 80002ec:	b510      	push	{r4, lr}
 80002ee:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002f0:	6808      	ldr	r0, [r1, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 fe51 	bl	8000f9c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fa:	2c0f      	cmp	r4, #15
 80002fc:	d800      	bhi.n	8000300 <HAL_InitTick+0x28>
 80002fe:	b108      	cbz	r0, 8000304 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
}
 8000302:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 fe02 	bl	8000f14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <HAL_InitTick+0x48>)
 8000312:	2000      	movs	r0, #0
 8000314:	601c      	str	r4, [r3, #0]
}
 8000316:	bd10      	pop	{r4, pc}
 8000318:	20000000 	.word	0x20000000
 800031c:	20000018 	.word	0x20000018
 8000320:	20000004 	.word	0x20000004

08000324 <HAL_Init>:
{
 8000324:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
{
 8000328:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800032a:	f000 fddf 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800032e:	4c12      	ldr	r4, [pc, #72]	; (8000378 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000330:	f002 fee8 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 8000334:	4a11      	ldr	r2, [pc, #68]	; (800037c <HAL_Init+0x58>)
 8000336:	4912      	ldr	r1, [pc, #72]	; (8000380 <HAL_Init+0x5c>)
 8000338:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800033a:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800033c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8000340:	4d10      	ldr	r5, [pc, #64]	; (8000384 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000342:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000346:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000348:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800034a:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800034e:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000352:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000356:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000358:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800035c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800035e:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000360:	f7ff ffba 	bl	80002d8 <HAL_InitTick>
 8000364:	b110      	cbz	r0, 800036c <HAL_Init+0x48>
    return HAL_ERROR;
 8000366:	2001      	movs	r0, #1
}
 8000368:	b003      	add	sp, #12
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 800036e:	f00c facf 	bl	800c910 <HAL_MspInit>
  return HAL_OK;
 8000372:	9801      	ldr	r0, [sp, #4]
}
 8000374:	b003      	add	sp, #12
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	2000001c 	.word	0x2000001c
 800037c:	58024400 	.word	0x58024400
 8000380:	0800fe60 	.word	0x0800fe60
 8000384:	20000018 	.word	0x20000018

08000388 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000388:	4a03      	ldr	r2, [pc, #12]	; (8000398 <HAL_IncTick+0x10>)
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <HAL_IncTick+0x14>)
 800038c:	6811      	ldr	r1, [r2, #0]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	440b      	add	r3, r1
 8000392:	6013      	str	r3, [r2, #0]
}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000338 	.word	0x20000338
 800039c:	20000000 	.word	0x20000000

080003a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003a0:	4b01      	ldr	r3, [pc, #4]	; (80003a8 <HAL_GetTick+0x8>)
 80003a2:	6818      	ldr	r0, [r3, #0]
}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20000338 	.word	0x20000338

080003ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003ac:	b538      	push	{r3, r4, r5, lr}
 80003ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003b0:	f7ff fff6 	bl	80003a0 <HAL_GetTick>
 80003b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b6:	1c63      	adds	r3, r4, #1
 80003b8:	d002      	beq.n	80003c0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <HAL_Delay+0x20>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003c0:	f7ff ffee 	bl	80003a0 <HAL_GetTick>
 80003c4:	1b40      	subs	r0, r0, r5
 80003c6:	42a0      	cmp	r0, r4
 80003c8:	d3fa      	bcc.n	80003c0 <HAL_Delay+0x14>
  {
  }
}
 80003ca:	bd38      	pop	{r3, r4, r5, pc}
 80003cc:	20000000 	.word	0x20000000

080003d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003d0:	4b01      	ldr	r3, [pc, #4]	; (80003d8 <HAL_GetREVID+0x8>)
 80003d2:	6818      	ldr	r0, [r3, #0]
}
 80003d4:	0c00      	lsrs	r0, r0, #16
 80003d6:	4770      	bx	lr
 80003d8:	5c001000 	.word	0x5c001000

080003dc <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <HAL_SetFMCMemorySwappingConfig+0x10>)
 80003de:	6813      	ldr	r3, [r2, #0]
 80003e0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80003e4:	4318      	orrs	r0, r3
 80003e6:	6010      	str	r0, [r2, #0]
}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	52004000 	.word	0x52004000

080003f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80003f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80003f4:	4c61      	ldr	r4, [pc, #388]	; (800057c <HAL_ADC_Start_DMA+0x18c>)
 80003f6:	6805      	ldr	r5, [r0, #0]
 80003f8:	42a5      	cmp	r5, r4
 80003fa:	d030      	beq.n	800045e <HAL_ADC_Start_DMA+0x6e>
 80003fc:	4b60      	ldr	r3, [pc, #384]	; (8000580 <HAL_ADC_Start_DMA+0x190>)
 80003fe:	429d      	cmp	r5, r3
 8000400:	d02d      	beq.n	800045e <HAL_ADC_Start_DMA+0x6e>
 8000402:	4c60      	ldr	r4, [pc, #384]	; (8000584 <HAL_ADC_Start_DMA+0x194>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000404:	68a6      	ldr	r6, [r4, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000406:	68ac      	ldr	r4, [r5, #8]
 8000408:	0764      	lsls	r4, r4, #29
 800040a:	d42d      	bmi.n	8000468 <HAL_ADC_Start_DMA+0x78>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800040c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000410:	2b01      	cmp	r3, #1
 8000412:	d029      	beq.n	8000468 <HAL_ADC_Start_DMA+0x78>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000414:	f006 061f 	and.w	r6, r6, #31
 8000418:	2301      	movs	r3, #1
 800041a:	4690      	mov	r8, r2
 800041c:	460f      	mov	r7, r1

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800041e:	2e09      	cmp	r6, #9
 8000420:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8000422:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000426:	d905      	bls.n	8000434 <HAL_ADC_Start_DMA+0x44>
        LL_ADC_REG_StartConversion(hadc->Instance);
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000428:	2300      	movs	r3, #0
 800042a:	2001      	movs	r0, #1
 800042c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = HAL_BUSY;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000434:	f240 2321 	movw	r3, #545	; 0x221
 8000438:	40f3      	lsrs	r3, r6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800043a:	07db      	lsls	r3, r3, #31
 800043c:	d5f4      	bpl.n	8000428 <HAL_ADC_Start_DMA+0x38>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800043e:	68ab      	ldr	r3, [r5, #8]
 8000440:	07d8      	lsls	r0, r3, #31
 8000442:	d414      	bmi.n	800046e <HAL_ADC_Start_DMA+0x7e>
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000444:	68aa      	ldr	r2, [r5, #8]
 8000446:	4b50      	ldr	r3, [pc, #320]	; (8000588 <HAL_ADC_Start_DMA+0x198>)
 8000448:	421a      	tst	r2, r3
 800044a:	d055      	beq.n	80004f8 <HAL_ADC_Start_DMA+0x108>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800044c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800044e:	f043 0310 	orr.w	r3, r3, #16
 8000452:	6563      	str	r3, [r4, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000454:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	65a3      	str	r3, [r4, #88]	; 0x58
 800045c:	e7e4      	b.n	8000428 <HAL_ADC_Start_DMA+0x38>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800045e:	4c4b      	ldr	r4, [pc, #300]	; (800058c <HAL_ADC_Start_DMA+0x19c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000460:	68a6      	ldr	r6, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000462:	68ac      	ldr	r4, [r5, #8]
 8000464:	0764      	lsls	r4, r4, #29
 8000466:	d5d1      	bpl.n	800040c <HAL_ADC_Start_DMA+0x1c>
    tmp_hal_status = HAL_BUSY;
 8000468:	2002      	movs	r0, #2
}
 800046a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800046e:	4b44      	ldr	r3, [pc, #272]	; (8000580 <HAL_ADC_Start_DMA+0x190>)
 8000470:	1aed      	subs	r5, r5, r3
 8000472:	bf18      	it	ne
 8000474:	2501      	movne	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000476:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000478:	4b45      	ldr	r3, [pc, #276]	; (8000590 <HAL_ADC_Start_DMA+0x1a0>)
 800047a:	4013      	ands	r3, r2
 800047c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000480:	6563      	str	r3, [r4, #84]	; 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000482:	b106      	cbz	r6, 8000486 <HAL_ADC_Start_DMA+0x96>
 8000484:	b11d      	cbz	r5, 800048e <HAL_ADC_Start_DMA+0x9e>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000486:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000488:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800048c:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800048e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000490:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8000494:	d02e      	beq.n	80004f4 <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000496:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000498:	f023 0306 	bic.w	r3, r3, #6
 800049c:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800049e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004a0:	251c      	movs	r5, #28
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80004a2:	483c      	ldr	r0, [pc, #240]	; (8000594 <HAL_ADC_Start_DMA+0x1a4>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80004a4:	4643      	mov	r3, r8
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80004a6:	4e3c      	ldr	r6, [pc, #240]	; (8000598 <HAL_ADC_Start_DMA+0x1a8>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80004a8:	463a      	mov	r2, r7
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80004aa:	63c8      	str	r0, [r1, #60]	; 0x3c
        __HAL_UNLOCK(hadc);
 80004ac:	2100      	movs	r1, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80004ae:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80004b0:	6406      	str	r6, [r0, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80004b2:	4e3a      	ldr	r6, [pc, #232]	; (800059c <HAL_ADC_Start_DMA+0x1ac>)
 80004b4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80004b6:	64c6      	str	r6, [r0, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004b8:	6820      	ldr	r0, [r4, #0]
 80004ba:	6005      	str	r5, [r0, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80004bc:	6820      	ldr	r0, [r4, #0]
        __HAL_UNLOCK(hadc);
 80004be:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80004c2:	6841      	ldr	r1, [r0, #4]
 80004c4:	f041 0110 	orr.w	r1, r1, #16
 80004c8:	6041      	str	r1, [r0, #4]
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80004ca:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80004cc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80004ce:	68c1      	ldr	r1, [r0, #12]
 80004d0:	f021 0103 	bic.w	r1, r1, #3
 80004d4:	4329      	orrs	r1, r5
 80004d6:	60c1      	str	r1, [r0, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80004d8:	6821      	ldr	r1, [r4, #0]
 80004da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80004dc:	3140      	adds	r1, #64	; 0x40
 80004de:	f001 f913 	bl	8001708 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80004e2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80004e4:	4b2e      	ldr	r3, [pc, #184]	; (80005a0 <HAL_ADC_Start_DMA+0x1b0>)
 80004e6:	6891      	ldr	r1, [r2, #8]
 80004e8:	400b      	ands	r3, r1
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6093      	str	r3, [r2, #8]
}
 80004f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          ADC_CLEAR_ERRORCODE(hadc);
 80004f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80004f6:	e7d2      	b.n	800049e <HAL_ADC_Start_DMA+0xae>
  MODIFY_REG(ADCx->CR,
 80004f8:	68aa      	ldr	r2, [r5, #8]
 80004fa:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <HAL_ADC_Start_DMA+0x1b0>)
 80004fc:	4013      	ands	r3, r2
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8000504:	f7ff ff4c 	bl	80003a0 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000508:	6823      	ldr	r3, [r4, #0]
 800050a:	4a1c      	ldr	r2, [pc, #112]	; (800057c <HAL_ADC_Start_DMA+0x18c>)
    tickstart = HAL_GetTick();
 800050c:	4681      	mov	r9, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800050e:	4293      	cmp	r3, r2
 8000510:	d020      	beq.n	8000554 <HAL_ADC_Start_DMA+0x164>
 8000512:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000516:	4293      	cmp	r3, r2
 8000518:	d01c      	beq.n	8000554 <HAL_ADC_Start_DMA+0x164>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800051a:	4a1a      	ldr	r2, [pc, #104]	; (8000584 <HAL_ADC_Start_DMA+0x194>)
 800051c:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(ADCx->CR,
 800051e:	4d20      	ldr	r5, [pc, #128]	; (80005a0 <HAL_ADC_Start_DMA+0x1b0>)
 8000520:	e00b      	b.n	800053a <HAL_ADC_Start_DMA+0x14a>
 8000522:	689a      	ldr	r2, [r3, #8]
 8000524:	402a      	ands	r2, r5
 8000526:	f042 0201 	orr.w	r2, r2, #1
 800052a:	609a      	str	r2, [r3, #8]
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800052c:	f7ff ff38 	bl	80003a0 <HAL_GetTick>
 8000530:	eba0 0009 	sub.w	r0, r0, r9
 8000534:	2802      	cmp	r0, #2
 8000536:	d889      	bhi.n	800044c <HAL_ADC_Start_DMA+0x5c>
 8000538:	6823      	ldr	r3, [r4, #0]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	07d2      	lsls	r2, r2, #31
 800053e:	d418      	bmi.n	8000572 <HAL_ADC_Start_DMA+0x182>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000540:	689a      	ldr	r2, [r3, #8]
 8000542:	07d1      	lsls	r1, r2, #31
 8000544:	d5ed      	bpl.n	8000522 <HAL_ADC_Start_DMA+0x132>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000546:	f7ff ff2b 	bl	80003a0 <HAL_GetTick>
 800054a:	eba0 0009 	sub.w	r0, r0, r9
 800054e:	2802      	cmp	r0, #2
 8000550:	d9f2      	bls.n	8000538 <HAL_ADC_Start_DMA+0x148>
 8000552:	e77b      	b.n	800044c <HAL_ADC_Start_DMA+0x5c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000554:	490d      	ldr	r1, [pc, #52]	; (800058c <HAL_ADC_Start_DMA+0x19c>)
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <HAL_ADC_Start_DMA+0x190>)
 8000558:	6889      	ldr	r1, [r1, #8]
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800055a:	f011 0f1f 	tst.w	r1, #31
 800055e:	bf0c      	ite	eq
 8000560:	2501      	moveq	r5, #1
 8000562:	2500      	movne	r5, #0
 8000564:	4293      	cmp	r3, r2
 8000566:	bf18      	it	ne
 8000568:	f045 0501 	orrne.w	r5, r5, #1
 800056c:	2d00      	cmp	r5, #0
 800056e:	d1d6      	bne.n	800051e <HAL_ADC_Start_DMA+0x12e>
 8000570:	e781      	b.n	8000476 <HAL_ADC_Start_DMA+0x86>
 8000572:	4d03      	ldr	r5, [pc, #12]	; (8000580 <HAL_ADC_Start_DMA+0x190>)
 8000574:	1b5d      	subs	r5, r3, r5
 8000576:	bf18      	it	ne
 8000578:	2501      	movne	r5, #1
 800057a:	e77c      	b.n	8000476 <HAL_ADC_Start_DMA+0x86>
 800057c:	40022000 	.word	0x40022000
 8000580:	40022100 	.word	0x40022100
 8000584:	58026300 	.word	0x58026300
 8000588:	8000003f 	.word	0x8000003f
 800058c:	40022300 	.word	0x40022300
 8000590:	fffff0fe 	.word	0xfffff0fe
 8000594:	080005b5 	.word	0x080005b5
 8000598:	080005a5 	.word	0x080005a5
 800059c:	0800061d 	.word	0x0800061d
 80005a0:	7fffffc0 	.word	0x7fffffc0

080005a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80005a4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80005a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80005a8:	f00b fd9e 	bl	800c0e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80005ac:	bd08      	pop	{r3, pc}
 80005ae:	bf00      	nop

080005b0 <HAL_ADC_ErrorCallback>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <ADC_DMAConvCplt>:
{
 80005b4:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80005b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80005b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005ba:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80005be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80005c0:	d11d      	bne.n	80005fe <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80005c2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80005c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005c8:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80005ca:	680a      	ldr	r2, [r1, #0]
 80005cc:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80005d0:	68ca      	ldr	r2, [r1, #12]
 80005d2:	d01b      	beq.n	800060c <ADC_DMAConvCplt+0x58>
 80005d4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80005d8:	d10d      	bne.n	80005f6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80005da:	68ca      	ldr	r2, [r1, #12]
 80005dc:	0494      	lsls	r4, r2, #18
 80005de:	d40a      	bmi.n	80005f6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80005e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005e6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80005e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005ea:	04d1      	lsls	r1, r2, #19
 80005ec:	d403      	bmi.n	80005f6 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80005ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005f0:	f042 0201 	orr.w	r2, r2, #1
 80005f4:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00b fd72 	bl	800c0e0 <HAL_ADC_ConvCpltCallback>
}
 80005fc:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80005fe:	06d2      	lsls	r2, r2, #27
 8000600:	d407      	bmi.n	8000612 <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800060c:	0790      	lsls	r0, r2, #30
 800060e:	d1f2      	bne.n	80005f6 <ADC_DMAConvCplt+0x42>
 8000610:	e7e6      	b.n	80005e0 <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ffcc 	bl	80005b0 <HAL_ADC_ErrorCallback>
}
 8000618:	bd10      	pop	{r4, pc}
 800061a:	bf00      	nop

0800061c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800061c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800061e:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000620:	6d5a      	ldr	r2, [r3, #84]	; 0x54

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000622:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000628:	655a      	str	r2, [r3, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800062a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800062c:	f042 0204 	orr.w	r2, r2, #4
 8000630:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 8000632:	f7ff ffbd 	bl	80005b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000636:	bd08      	pop	{r3, pc}

08000638 <HAL_ADC_ConfigChannel>:
{
 8000638:	4603      	mov	r3, r0
  __IO uint32_t wait_loop_index = 0;
 800063a:	2000      	movs	r0, #0
{
 800063c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800063e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
{
 8000642:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 8000644:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 8000646:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8000648:	f000 8130 	beq.w	80008ac <HAL_ADC_ConfigChannel+0x274>
 800064c:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800064e:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8000650:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000654:	68a2      	ldr	r2, [r4, #8]
 8000656:	0757      	lsls	r7, r2, #29
 8000658:	d443      	bmi.n	80006e2 <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800065a:	680a      	ldr	r2, [r1, #0]
 800065c:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8000660:	2d00      	cmp	r5, #0
 8000662:	f040 80a2 	bne.w	80007aa <HAL_ADC_ConfigChannel+0x172>
 8000666:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800066a:	4090      	lsls	r0, r2
 800066c:	69e2      	ldr	r2, [r4, #28]
  MODIFY_REG(*preg,
 800066e:	271f      	movs	r7, #31
 8000670:	4310      	orrs	r0, r2
 8000672:	61e0      	str	r0, [r4, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000674:	6848      	ldr	r0, [r1, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000676:	681c      	ldr	r4, [r3, #0]
 8000678:	0985      	lsrs	r5, r0, #6
  MODIFY_REG(*preg,
 800067a:	680a      	ldr	r2, [r1, #0]
 800067c:	4038      	ands	r0, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800067e:	3430      	adds	r4, #48	; 0x30
 8000680:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8000684:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000688:	4087      	lsls	r7, r0
 800068a:	592e      	ldr	r6, [r5, r4]
 800068c:	4082      	lsls	r2, r0
 800068e:	ea26 0007 	bic.w	r0, r6, r7
 8000692:	4302      	orrs	r2, r0
 8000694:	512a      	str	r2, [r5, r4]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000696:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000698:	6890      	ldr	r0, [r2, #8]
 800069a:	0746      	lsls	r6, r0, #29
 800069c:	f100 8083 	bmi.w	80007a6 <HAL_ADC_ConfigChannel+0x16e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006a0:	6895      	ldr	r5, [r2, #8]
 80006a2:	f015 0508 	ands.w	r5, r5, #8
 80006a6:	d026      	beq.n	80006f6 <HAL_ADC_ConfigChannel+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006a8:	6890      	ldr	r0, [r2, #8]
 80006aa:	07c5      	lsls	r5, r0, #31
 80006ac:	d417      	bmi.n	80006de <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCx->DIFSEL,
 80006ae:	68cc      	ldr	r4, [r1, #12]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80006b0:	680e      	ldr	r6, [r1, #0]
 80006b2:	f004 0518 	and.w	r5, r4, #24
 80006b6:	48bf      	ldr	r0, [pc, #764]	; (80009b4 <HAL_ADC_ConfigChannel+0x37c>)
 80006b8:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
 80006bc:	40e8      	lsrs	r0, r5
 80006be:	f3c6 0513 	ubfx	r5, r6, #0, #20
 80006c2:	4030      	ands	r0, r6
 80006c4:	ea24 0405 	bic.w	r4, r4, r5
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80006c8:	4dbb      	ldr	r5, [pc, #748]	; (80009b8 <HAL_ADC_ConfigChannel+0x380>)
 80006ca:	4320      	orrs	r0, r4
 80006cc:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
 80006d0:	68ca      	ldr	r2, [r1, #12]
 80006d2:	42aa      	cmp	r2, r5
 80006d4:	f000 80a3 	beq.w	800081e <HAL_ADC_ConfigChannel+0x1e6>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80006d8:	6809      	ldr	r1, [r1, #0]
 80006da:	2900      	cmp	r1, #0
 80006dc:	db6d      	blt.n	80007ba <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006de:	2000      	movs	r0, #0
 80006e0:	e003      	b.n	80006ea <HAL_ADC_ConfigChannel+0xb2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80006e4:	f042 0220 	orr.w	r2, r2, #32
 80006e8:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80006f0:	b002      	add	sp, #8
 80006f2:	bcf0      	pop	{r4, r5, r6, r7}
 80006f4:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80006f6:	680c      	ldr	r4, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80006f8:	3214      	adds	r2, #20
  MODIFY_REG(*preg,
 80006fa:	2007      	movs	r0, #7
 80006fc:	688f      	ldr	r7, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80006fe:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8000700:	f3c4 5404 	ubfx	r4, r4, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000704:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8000708:	fa00 fc04 	lsl.w	ip, r0, r4
 800070c:	fa07 f404 	lsl.w	r4, r7, r4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000710:	4faa      	ldr	r7, [pc, #680]	; (80009bc <HAL_ADC_ConfigChannel+0x384>)
 8000712:	58b0      	ldr	r0, [r6, r2]
 8000714:	ea20 000c 	bic.w	r0, r0, ip
 8000718:	4320      	orrs	r0, r4
 800071a:	50b0      	str	r0, [r6, r2]
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8000722:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8000726:	f000 80b8 	beq.w	800089a <HAL_ADC_ConfigChannel+0x262>
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	6948      	ldr	r0, [r1, #20]
 800072e:	68d4      	ldr	r4, [r2, #12]
 8000730:	f014 0f10 	tst.w	r4, #16
 8000734:	68d4      	ldr	r4, [r2, #12]
 8000736:	f040 80d9 	bne.w	80008ec <HAL_ADC_ConfigChannel+0x2b4>
 800073a:	f3c4 0482 	ubfx	r4, r4, #2, #3
 800073e:	0064      	lsls	r4, r4, #1
 8000740:	fa00 f404 	lsl.w	r4, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000744:	690e      	ldr	r6, [r1, #16]
 8000746:	6808      	ldr	r0, [r1, #0]
 8000748:	2e04      	cmp	r6, #4
 800074a:	f000 80b3 	beq.w	80008b4 <HAL_ADC_ConfigChannel+0x27c>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800074e:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8000750:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000754:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8000758:	4320      	orrs	r0, r4
 800075a:	f007 4400 	and.w	r4, r7, #2147483648	; 0x80000000
 800075e:	4320      	orrs	r0, r4
 8000760:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000764:	6818      	ldr	r0, [r3, #0]
 8000766:	7e4e      	ldrb	r6, [r1, #25]
 8000768:	690c      	ldr	r4, [r1, #16]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800076a:	3060      	adds	r0, #96	; 0x60
 800076c:	2e01      	cmp	r6, #1
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800076e:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 8000772:	bf14      	ite	ne
 8000774:	2600      	movne	r6, #0
 8000776:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800077a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800077e:	4332      	orrs	r2, r6
 8000780:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000784:	7e0c      	ldrb	r4, [r1, #24]
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	2c01      	cmp	r4, #1
 800078a:	690a      	ldr	r2, [r1, #16]
 800078c:	d104      	bne.n	8000798 <HAL_ADC_ConfigChannel+0x160>
 800078e:	f002 021f 	and.w	r2, r2, #31
 8000792:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8000796:	4095      	lsls	r5, r2
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000798:	6902      	ldr	r2, [r0, #16]
 800079a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800079e:	4315      	orrs	r5, r2
 80007a0:	6105      	str	r5, [r0, #16]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	e780      	b.n	80006a8 <HAL_ADC_ConfigChannel+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80007a6:	6890      	ldr	r0, [r2, #8]
 80007a8:	e77e      	b.n	80006a8 <HAL_ADC_ConfigChannel+0x70>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007aa:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80007ae:	fab2 f282 	clz	r2, r2
 80007b2:	f002 021f 	and.w	r2, r2, #31
 80007b6:	4090      	lsls	r0, r2
 80007b8:	e758      	b.n	800066c <HAL_ADC_ConfigChannel+0x34>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	4a80      	ldr	r2, [pc, #512]	; (80009c0 <HAL_ADC_ConfigChannel+0x388>)
 80007be:	4290      	cmp	r0, r2
 80007c0:	f000 80c6 	beq.w	8000950 <HAL_ADC_ConfigChannel+0x318>
 80007c4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80007c8:	4290      	cmp	r0, r2
 80007ca:	f000 80c1 	beq.w	8000950 <HAL_ADC_ConfigChannel+0x318>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80007ce:	4e7d      	ldr	r6, [pc, #500]	; (80009c4 <HAL_ADC_ConfigChannel+0x38c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007d0:	4d7d      	ldr	r5, [pc, #500]	; (80009c8 <HAL_ADC_ConfigChannel+0x390>)
 80007d2:	68ac      	ldr	r4, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80007d4:	68b2      	ldr	r2, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007d6:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
 80007da:	43d2      	mvns	r2, r2
 80007dc:	f002 0201 	and.w	r2, r2, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	f000 80c3 	beq.w	800096c <HAL_ADC_ConfigChannel+0x334>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80007e6:	4a79      	ldr	r2, [pc, #484]	; (80009cc <HAL_ADC_ConfigChannel+0x394>)
 80007e8:	4291      	cmp	r1, r2
 80007ea:	f000 80f9 	beq.w	80009e0 <HAL_ADC_ConfigChannel+0x3a8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80007ee:	4a78      	ldr	r2, [pc, #480]	; (80009d0 <HAL_ADC_ConfigChannel+0x398>)
 80007f0:	4291      	cmp	r1, r2
 80007f2:	f000 8117 	beq.w	8000a24 <HAL_ADC_ConfigChannel+0x3ec>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80007f6:	4a77      	ldr	r2, [pc, #476]	; (80009d4 <HAL_ADC_ConfigChannel+0x39c>)
 80007f8:	4291      	cmp	r1, r2
 80007fa:	f47f af70 	bne.w	80006de <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_VREFINT_INSTANCE(hadc))
 80007fe:	0262      	lsls	r2, r4, #9
 8000800:	f53f af6d 	bmi.w	80006de <HAL_ADC_ConfigChannel+0xa6>
 8000804:	4a6f      	ldr	r2, [pc, #444]	; (80009c4 <HAL_ADC_ConfigChannel+0x38c>)
 8000806:	4290      	cmp	r0, r2
 8000808:	f47f af69 	bne.w	80006de <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800080c:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800080e:	f446 0280 	orr.w	r2, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000812:	2000      	movs	r0, #0
 8000814:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000818:	430a      	orrs	r2, r1
 800081a:	60aa      	str	r2, [r5, #8]
 800081c:	e765      	b.n	80006ea <HAL_ADC_ConfigChannel+0xb2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800081e:	6808      	ldr	r0, [r1, #0]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000820:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000822:	f3c0 0213 	ubfx	r2, r0, #0, #20
 8000826:	2a00      	cmp	r2, #0
 8000828:	d066      	beq.n	80008f8 <HAL_ADC_ConfigChannel+0x2c0>
 800082a:	fa90 f2a0 	rbit	r2, r0
 800082e:	fab2 f282 	clz	r2, r2
 8000832:	3201      	adds	r2, #1
 8000834:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000838:	2a09      	cmp	r2, #9
 800083a:	f200 809d 	bhi.w	8000978 <HAL_ADC_ConfigChannel+0x340>
 800083e:	fa90 f2a0 	rbit	r2, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000842:	fab2 f282 	clz	r2, r2
 8000846:	fa90 f5a0 	rbit	r5, r0
 800084a:	2601      	movs	r6, #1
 800084c:	fab5 f585 	clz	r5, r5
 8000850:	3201      	adds	r2, #1
 8000852:	4435      	add	r5, r6
 8000854:	0692      	lsls	r2, r2, #26
 8000856:	f005 051f 	and.w	r5, r5, #31
 800085a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800085e:	fa06 f505 	lsl.w	r5, r6, r5
 8000862:	432a      	orrs	r2, r5
 8000864:	fa90 f0a0 	rbit	r0, r0
 8000868:	fab0 f080 	clz	r0, r0
 800086c:	4430      	add	r0, r6
 800086e:	f000 001f 	and.w	r0, r0, #31
 8000872:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000876:	0500      	lsls	r0, r0, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000878:	4310      	orrs	r0, r2
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800087a:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 800087c:	2707      	movs	r7, #7
 800087e:	688a      	ldr	r2, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000880:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8000882:	f3c0 5004 	ubfx	r0, r0, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000886:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 800088a:	4087      	lsls	r7, r0
 800088c:	4082      	lsls	r2, r0
 800088e:	5935      	ldr	r5, [r6, r4]
 8000890:	ea25 0007 	bic.w	r0, r5, r7
 8000894:	4310      	orrs	r0, r2
 8000896:	5130      	str	r0, [r6, r4]
 8000898:	e71e      	b.n	80006d8 <HAL_ADC_ConfigChannel+0xa0>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	6948      	ldr	r0, [r1, #20]
 800089e:	68d4      	ldr	r4, [r2, #12]
 80008a0:	f3c4 0482 	ubfx	r4, r4, #2, #3
 80008a4:	0064      	lsls	r4, r4, #1
 80008a6:	fa00 f404 	lsl.w	r4, r0, r4
 80008aa:	e74b      	b.n	8000744 <HAL_ADC_ConfigChannel+0x10c>
  __HAL_LOCK(hadc);
 80008ac:	2002      	movs	r0, #2
}
 80008ae:	b002      	add	sp, #8
 80008b0:	bcf0      	pop	{r4, r5, r6, r7}
 80008b2:	4770      	bx	lr
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008b4:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80008b6:	0680      	lsls	r0, r0, #26
 80008b8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008bc:	4284      	cmp	r4, r0
 80008be:	d03f      	beq.n	8000940 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008c0:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80008c2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008c6:	4284      	cmp	r4, r0
 80008c8:	d032      	beq.n	8000930 <HAL_ADC_ConfigChannel+0x2f8>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008ca:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80008cc:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008d0:	4284      	cmp	r4, r0
 80008d2:	d025      	beq.n	8000920 <HAL_ADC_ConfigChannel+0x2e8>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008d4:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 80008d6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008da:	42a0      	cmp	r0, r4
 80008dc:	f47f aee4 	bne.w	80006a8 <HAL_ADC_ConfigChannel+0x70>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80008e0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80008e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80008e6:	66d0      	str	r0, [r2, #108]	; 0x6c
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	e6dd      	b.n	80006a8 <HAL_ADC_ConfigChannel+0x70>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80008ec:	0864      	lsrs	r4, r4, #1
 80008ee:	f004 0408 	and.w	r4, r4, #8
 80008f2:	fa00 f404 	lsl.w	r4, r0, r4
 80008f6:	e725      	b.n	8000744 <HAL_ADC_ConfigChannel+0x10c>
 80008f8:	2601      	movs	r6, #1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80008fa:	0e80      	lsrs	r0, r0, #26
 80008fc:	4430      	add	r0, r6
 80008fe:	f000 051f 	and.w	r5, r0, #31
 8000902:	0682      	lsls	r2, r0, #26
 8000904:	40ae      	lsls	r6, r5
 8000906:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800090a:	2d09      	cmp	r5, #9
 800090c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8000910:	ea42 0206 	orr.w	r2, r2, r6
 8000914:	d9af      	bls.n	8000876 <HAL_ADC_ConfigChannel+0x23e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000916:	381e      	subs	r0, #30
 8000918:	0500      	lsls	r0, r0, #20
 800091a:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800091e:	e7ab      	b.n	8000878 <HAL_ADC_ConfigChannel+0x240>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000920:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8000922:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000926:	6690      	str	r0, [r2, #104]	; 0x68
 8000928:	6808      	ldr	r0, [r1, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	0680      	lsls	r0, r0, #26
 800092e:	e7d1      	b.n	80008d4 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000930:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8000932:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000936:	6650      	str	r0, [r2, #100]	; 0x64
 8000938:	6808      	ldr	r0, [r1, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	0680      	lsls	r0, r0, #26
 800093e:	e7c4      	b.n	80008ca <HAL_ADC_ConfigChannel+0x292>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000940:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8000942:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000946:	6610      	str	r0, [r2, #96]	; 0x60
 8000948:	6808      	ldr	r0, [r1, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	0680      	lsls	r0, r0, #26
 800094e:	e7b7      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x288>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000950:	4a21      	ldr	r2, [pc, #132]	; (80009d8 <HAL_ADC_ConfigChannel+0x3a0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000952:	4e22      	ldr	r6, [pc, #136]	; (80009dc <HAL_ADC_ConfigChannel+0x3a4>)
 8000954:	4f1a      	ldr	r7, [pc, #104]	; (80009c0 <HAL_ADC_ConfigChannel+0x388>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000956:	4615      	mov	r5, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000958:	6894      	ldr	r4, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800095a:	68bf      	ldr	r7, [r7, #8]
 800095c:	68b2      	ldr	r2, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800095e:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
 8000962:	433a      	orrs	r2, r7
 8000964:	43d2      	mvns	r2, r2
 8000966:	f002 0201 	and.w	r2, r2, #1
 800096a:	e739      	b.n	80007e0 <HAL_ADC_ConfigChannel+0x1a8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800096c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 800096e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000970:	f042 0220 	orr.w	r2, r2, #32
 8000974:	655a      	str	r2, [r3, #84]	; 0x54
 8000976:	e6b8      	b.n	80006ea <HAL_ADC_ConfigChannel+0xb2>
 8000978:	fa90 f2a0 	rbit	r2, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800097c:	fab2 f282 	clz	r2, r2
 8000980:	fa90 f5a0 	rbit	r5, r0
 8000984:	2601      	movs	r6, #1
 8000986:	fab5 f585 	clz	r5, r5
 800098a:	3201      	adds	r2, #1
 800098c:	4435      	add	r5, r6
 800098e:	0692      	lsls	r2, r2, #26
 8000990:	f005 051f 	and.w	r5, r5, #31
 8000994:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000998:	fa06 f505 	lsl.w	r5, r6, r5
 800099c:	432a      	orrs	r2, r5
 800099e:	fa90 f0a0 	rbit	r0, r0
 80009a2:	fab0 f080 	clz	r0, r0
 80009a6:	4430      	add	r0, r6
 80009a8:	f000 001f 	and.w	r0, r0, #31
 80009ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80009b0:	e7b1      	b.n	8000916 <HAL_ADC_ConfigChannel+0x2de>
 80009b2:	bf00      	nop
 80009b4:	000fffff 	.word	0x000fffff
 80009b8:	47ff0000 	.word	0x47ff0000
 80009bc:	5c001000 	.word	0x5c001000
 80009c0:	40022000 	.word	0x40022000
 80009c4:	58026000 	.word	0x58026000
 80009c8:	58026300 	.word	0x58026300
 80009cc:	cb840000 	.word	0xcb840000
 80009d0:	c7520000 	.word	0xc7520000
 80009d4:	cfb80000 	.word	0xcfb80000
 80009d8:	40022300 	.word	0x40022300
 80009dc:	40022100 	.word	0x40022100
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80009e0:	0224      	lsls	r4, r4, #8
 80009e2:	f53f ae7c 	bmi.w	80006de <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <HAL_ADC_ConfigChannel+0x40c>)
 80009e8:	4290      	cmp	r0, r2
 80009ea:	f47f ae78 	bne.w	80006de <HAL_ADC_ConfigChannel+0xa6>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <HAL_ADC_ConfigChannel+0x410>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80009f0:	f446 0100 	orr.w	r1, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009f4:	68a8      	ldr	r0, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 80009fc:	4c13      	ldr	r4, [pc, #76]	; (8000a4c <HAL_ADC_ConfigChannel+0x414>)
 80009fe:	0992      	lsrs	r2, r2, #6
 8000a00:	4301      	orrs	r1, r0
 8000a02:	fba4 0202 	umull	r0, r2, r4, r2
 8000a06:	60a9      	str	r1, [r5, #8]
 8000a08:	0992      	lsrs	r2, r2, #6
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8000a0e:	9a01      	ldr	r2, [sp, #4]
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	f43f ae64 	beq.w	80006de <HAL_ADC_ConfigChannel+0xa6>
                wait_loop_index--;
 8000a16:	9a01      	ldr	r2, [sp, #4]
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8000a1c:	9a01      	ldr	r2, [sp, #4]
 8000a1e:	2a00      	cmp	r2, #0
 8000a20:	d1f9      	bne.n	8000a16 <HAL_ADC_ConfigChannel+0x3de>
 8000a22:	e65c      	b.n	80006de <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000a24:	01e1      	lsls	r1, r4, #7
 8000a26:	f53f ae5a 	bmi.w	80006de <HAL_ADC_ConfigChannel+0xa6>
 8000a2a:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <HAL_ADC_ConfigChannel+0x40c>)
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	f47f ae56 	bne.w	80006de <HAL_ADC_ConfigChannel+0xa6>
 8000a32:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8000a34:	f046 7280 	orr.w	r2, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	60aa      	str	r2, [r5, #8]
 8000a42:	e652      	b.n	80006ea <HAL_ADC_ConfigChannel+0xb2>
 8000a44:	58026000 	.word	0x58026000
 8000a48:	20000018 	.word	0x20000018
 8000a4c:	053e2d63 	.word	0x053e2d63

08000a50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8000a50:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000a52:	4a52      	ldr	r2, [pc, #328]	; (8000b9c <ADC_ConfigureBoostMode+0x14c>)
{
 8000a54:	4605      	mov	r5, r0
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000a56:	6803      	ldr	r3, [r0, #0]
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d027      	beq.n	8000aac <ADC_ConfigureBoostMode+0x5c>
 8000a5c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d023      	beq.n	8000aac <ADC_ConfigureBoostMode+0x5c>
 8000a64:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <ADC_ConfigureBoostMode+0x150>)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000a6c:	bf14      	ite	ne
 8000a6e:	2301      	movne	r3, #1
 8000a70:	2300      	moveq	r3, #0
 8000a72:	b323      	cbz	r3, 8000abe <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8000a74:	f002 fd02 	bl	800347c <HAL_RCC_GetHCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 8000a78:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8000a7a:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a80:	d062      	beq.n	8000b48 <ADC_ConfigureBoostMode+0xf8>
 8000a82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000a86:	d072      	beq.n	8000b6e <ADC_ConfigureBoostMode+0x11e>
 8000a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a8c:	d05c      	beq.n	8000b48 <ADC_ConfigureBoostMode+0xf8>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000a8e:	f7ff fc9f 	bl	80003d0 <HAL_GetREVID>
 8000a92:	f241 0303 	movw	r3, #4099	; 0x1003
 8000a96:	4298      	cmp	r0, r3
 8000a98:	d832      	bhi.n	8000b00 <ADC_ConfigureBoostMode+0xb0>
  {
    if(freq > 20000000UL)
 8000a9a:	4a42      	ldr	r2, [pc, #264]	; (8000ba4 <ADC_ConfigureBoostMode+0x154>)
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	4294      	cmp	r4, r2
 8000aa0:	d928      	bls.n	8000af4 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000aa8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8000aaa:	bd38      	pop	{r3, r4, r5, pc}
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000aac:	4b3e      	ldr	r3, [pc, #248]	; (8000ba8 <ADC_ConfigureBoostMode+0x158>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000ab4:	bf14      	ite	ne
 8000ab6:	2301      	movne	r3, #1
 8000ab8:	2300      	moveq	r3, #0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1da      	bne.n	8000a74 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000abe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ac2:	f003 fdb1 	bl	8004628 <HAL_RCCEx_GetPeriphCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 8000ac6:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000ac8:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000aca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8000ace:	d049      	beq.n	8000b64 <ADC_ConfigureBoostMode+0x114>
 8000ad0:	d93e      	bls.n	8000b50 <ADC_ConfigureBoostMode+0x100>
 8000ad2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8000ad6:	d04e      	beq.n	8000b76 <ADC_ConfigureBoostMode+0x126>
 8000ad8:	d927      	bls.n	8000b2a <ADC_ConfigureBoostMode+0xda>
 8000ada:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8000ade:	d048      	beq.n	8000b72 <ADC_ConfigureBoostMode+0x122>
 8000ae0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8000ae4:	d1d3      	bne.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000ae6:	f7ff fc73 	bl	80003d0 <HAL_GetREVID>
 8000aea:	f241 0303 	movw	r3, #4099	; 0x1003
 8000aee:	4298      	cmp	r0, r3
 8000af0:	d805      	bhi.n	8000afe <ADC_ConfigureBoostMode+0xae>
 8000af2:	682b      	ldr	r3, [r5, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000afa:	609a      	str	r2, [r3, #8]
}
 8000afc:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 8000afe:	0a24      	lsrs	r4, r4, #8
    freq /= 2U; /* divider by 2 for Rev.V */
 8000b00:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8000b02:	4a2a      	ldr	r2, [pc, #168]	; (8000bac <ADC_ConfigureBoostMode+0x15c>)
 8000b04:	682b      	ldr	r3, [r5, #0]
 8000b06:	4294      	cmp	r4, r2
 8000b08:	d90a      	bls.n	8000b20 <ADC_ConfigureBoostMode+0xd0>
    else if(freq <= 12500000UL)
 8000b0a:	4a29      	ldr	r2, [pc, #164]	; (8000bb0 <ADC_ConfigureBoostMode+0x160>)
 8000b0c:	4294      	cmp	r4, r2
 8000b0e:	d914      	bls.n	8000b3a <ADC_ConfigureBoostMode+0xea>
    else if(freq <= 25000000UL)
 8000b10:	4a28      	ldr	r2, [pc, #160]	; (8000bb4 <ADC_ConfigureBoostMode+0x164>)
 8000b12:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000b14:	689a      	ldr	r2, [r3, #8]
    else if(freq <= 25000000UL)
 8000b16:	d932      	bls.n	8000b7e <ADC_ConfigureBoostMode+0x12e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8000b18:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000b1c:	609a      	str	r2, [r3, #8]
}
 8000b1e:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8000b20:	689a      	ldr	r2, [r3, #8]
 8000b22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b26:	609a      	str	r2, [r3, #8]
}
 8000b28:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 8000b2a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8000b2e:	d024      	beq.n	8000b7a <ADC_ConfigureBoostMode+0x12a>
 8000b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b34:	d1ab      	bne.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 8000b36:	0944      	lsrs	r4, r0, #5
        break;
 8000b38:	e7a9      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b44:	609a      	str	r2, [r3, #8]
}
 8000b46:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8000b48:	0c1b      	lsrs	r3, r3, #16
 8000b4a:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000b4e:	e79e      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
    switch(hadc->Init.ClockPrescaler)
 8000b50:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000b54:	d006      	beq.n	8000b64 <ADC_ConfigureBoostMode+0x114>
 8000b56:	d818      	bhi.n	8000b8a <ADC_ConfigureBoostMode+0x13a>
 8000b58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000b5c:	d002      	beq.n	8000b64 <ADC_ConfigureBoostMode+0x114>
 8000b5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000b62:	d194      	bne.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8000b64:	0c9b      	lsrs	r3, r3, #18
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000b6c:	e78f      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
        freq /= 4UL;
 8000b6e:	0884      	lsrs	r4, r0, #2
        break;
 8000b70:	e78d      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 8000b72:	09c4      	lsrs	r4, r0, #7
        break;
 8000b74:	e78b      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 8000b76:	0984      	lsrs	r4, r0, #6
        break;
 8000b78:	e789      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
        freq /= 16UL;
 8000b7a:	0904      	lsrs	r4, r0, #4
      break;
 8000b7c:	e787      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000b7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b86:	609a      	str	r2, [r3, #8]
}
 8000b88:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 8000b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b8e:	d0e9      	beq.n	8000b64 <ADC_ConfigureBoostMode+0x114>
 8000b90:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8000b94:	f47f af7b 	bne.w	8000a8e <ADC_ConfigureBoostMode+0x3e>
 8000b98:	e7e4      	b.n	8000b64 <ADC_ConfigureBoostMode+0x114>
 8000b9a:	bf00      	nop
 8000b9c:	40022000 	.word	0x40022000
 8000ba0:	58026300 	.word	0x58026300
 8000ba4:	01312d00 	.word	0x01312d00
 8000ba8:	40022300 	.word	0x40022300
 8000bac:	005f5e10 	.word	0x005f5e10
 8000bb0:	00bebc20 	.word	0x00bebc20
 8000bb4:	017d7840 	.word	0x017d7840

08000bb8 <HAL_ADC_Init>:
{
 8000bb8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8000bba:	2300      	movs	r3, #0
{
 8000bbc:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8000bbe:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	f000 80ab 	beq.w	8000d1c <HAL_ADC_Init+0x164>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc6:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000bc8:	4604      	mov	r4, r0
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 809b 	beq.w	8000d06 <HAL_ADC_Init+0x14e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000bd0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	0096      	lsls	r6, r2, #2
 8000bd6:	d504      	bpl.n	8000be2 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000bd8:	6899      	ldr	r1, [r3, #8]
 8000bda:	4a78      	ldr	r2, [pc, #480]	; (8000dbc <HAL_ADC_Init+0x204>)
 8000bdc:	400a      	ands	r2, r1
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	00d5      	lsls	r5, r2, #3
 8000be6:	d416      	bmi.n	8000c16 <HAL_ADC_Init+0x5e>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000be8:	4a75      	ldr	r2, [pc, #468]	; (8000dc0 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCx->CR,
 8000bea:	6898      	ldr	r0, [r3, #8]
 8000bec:	6812      	ldr	r2, [r2, #0]
 8000bee:	4d75      	ldr	r5, [pc, #468]	; (8000dc4 <HAL_ADC_Init+0x20c>)
 8000bf0:	0992      	lsrs	r2, r2, #6
 8000bf2:	4975      	ldr	r1, [pc, #468]	; (8000dc8 <HAL_ADC_Init+0x210>)
 8000bf4:	fba5 5202 	umull	r5, r2, r5, r2
 8000bf8:	4001      	ands	r1, r0
 8000bfa:	0992      	lsrs	r2, r2, #6
 8000bfc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000c00:	6099      	str	r1, [r3, #8]
 8000c02:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8000c04:	9b01      	ldr	r3, [sp, #4]
 8000c06:	b12b      	cbz	r3, 8000c14 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8000c08:	9b01      	ldr	r3, [sp, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000c0e:	9b01      	ldr	r3, [sp, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1f9      	bne.n	8000c08 <HAL_ADC_Init+0x50>
 8000c14:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	00d0      	lsls	r0, r2, #3
 8000c1a:	d413      	bmi.n	8000c44 <HAL_ADC_Init+0x8c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c1c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000c1e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c20:	f042 0210 	orr.w	r2, r2, #16
 8000c24:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c26:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000c28:	432a      	orrs	r2, r5
 8000c2a:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	0751      	lsls	r1, r2, #29
 8000c30:	d50c      	bpl.n	8000c4c <HAL_ADC_Init+0x94>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c32:	6d63      	ldr	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c34:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000c36:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c38:	f043 0310 	orr.w	r3, r3, #16
}
 8000c3c:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c3e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000c40:	b002      	add	sp, #8
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
 8000c44:	689a      	ldr	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c46:	2500      	movs	r5, #0
 8000c48:	0751      	lsls	r1, r2, #29
 8000c4a:	d4f2      	bmi.n	8000c32 <HAL_ADC_Init+0x7a>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c4c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c4e:	06d2      	lsls	r2, r2, #27
 8000c50:	d4f0      	bmi.n	8000c34 <HAL_ADC_Init+0x7c>
    ADC_STATE_CLR_SET(hadc->State,
 8000c52:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c54:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000c58:	f042 0202 	orr.w	r2, r2, #2
 8000c5c:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	07d6      	lsls	r6, r2, #31
 8000c62:	d413      	bmi.n	8000c8c <HAL_ADC_Init+0xd4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c64:	4a59      	ldr	r2, [pc, #356]	; (8000dcc <HAL_ADC_Init+0x214>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	f000 8087 	beq.w	8000d7a <HAL_ADC_Init+0x1c2>
 8000c6c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000c70:	4293      	cmp	r3, r2
 8000c72:	f000 8082 	beq.w	8000d7a <HAL_ADC_Init+0x1c2>
 8000c76:	4b56      	ldr	r3, [pc, #344]	; (8000dd0 <HAL_ADC_Init+0x218>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	07d9      	lsls	r1, r3, #31
 8000c7c:	d406      	bmi.n	8000c8c <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c7e:	4a55      	ldr	r2, [pc, #340]	; (8000dd4 <HAL_ADC_Init+0x21c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c80:	6893      	ldr	r3, [r2, #8]
 8000c82:	6861      	ldr	r1, [r4, #4]
 8000c84:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6093      	str	r3, [r2, #8]
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000c8c:	f7ff fba0 	bl	80003d0 <HAL_GetREVID>
 8000c90:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c94:	4298      	cmp	r0, r3
 8000c96:	7d63      	ldrb	r3, [r4, #21]
 8000c98:	7f20      	ldrb	r0, [r4, #28]
 8000c9a:	d961      	bls.n	8000d60 <HAL_ADC_Init+0x1a8>
 8000c9c:	68a6      	ldr	r6, [r4, #8]
 8000c9e:	0359      	lsls	r1, r3, #13
 8000ca0:	0402      	lsls	r2, r0, #16
 8000ca2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ca4:	2e10      	cmp	r6, #16
 8000ca6:	f000 8083 	beq.w	8000db0 <HAL_ADC_Init+0x1f8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000caa:	4313      	orrs	r3, r2
 8000cac:	430b      	orrs	r3, r1
 8000cae:	4333      	orrs	r3, r6
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cb0:	2801      	cmp	r0, #1
 8000cb2:	d103      	bne.n	8000cbc <HAL_ADC_Init+0x104>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000cb4:	6a22      	ldr	r2, [r4, #32]
 8000cb6:	3a01      	subs	r2, #1
 8000cb8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cbe:	b122      	cbz	r2, 8000cca <HAL_ADC_Init+0x112>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cc0:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000cc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000cc6:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cc8:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000cca:	6821      	ldr	r1, [r4, #0]
 8000ccc:	4a42      	ldr	r2, [pc, #264]	; (8000dd8 <HAL_ADC_Init+0x220>)
 8000cce:	68c8      	ldr	r0, [r1, #12]
 8000cd0:	4002      	ands	r2, r0
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cd6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000cde:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ce0:	d101      	bne.n	8000ce6 <HAL_ADC_Init+0x12e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ce2:	0712      	lsls	r2, r2, #28
 8000ce4:	d51e      	bpl.n	8000d24 <HAL_ADC_Init+0x16c>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ce6:	68e2      	ldr	r2, [r4, #12]
 8000ce8:	2a01      	cmp	r2, #1
 8000cea:	d03e      	beq.n	8000d6a <HAL_ADC_Init+0x1b2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cee:	f022 020f 	bic.w	r2, r2, #15
 8000cf2:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000cf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8000cf6:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000cf8:	f023 0303 	bic.w	r3, r3, #3
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000d02:	b002      	add	sp, #8
 8000d04:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8000d06:	f00a fa0f 	bl	800b128 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d0a:	6823      	ldr	r3, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8000d0c:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000d0e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	0096      	lsls	r6, r2, #2
 8000d16:	f57f af64 	bpl.w	8000be2 <HAL_ADC_Init+0x2a>
 8000d1a:	e75d      	b.n	8000bd8 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8000d1c:	2501      	movs	r5, #1
}
 8000d1e:	4628      	mov	r0, r5
 8000d20:	b002      	add	sp, #8
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d24:	68d9      	ldr	r1, [r3, #12]
 8000d26:	4a2d      	ldr	r2, [pc, #180]	; (8000ddc <HAL_ADC_Init+0x224>)
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d28:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d2e:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8000d32:	430a      	orrs	r2, r1
 8000d34:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000d36:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d026      	beq.n	8000d8c <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d3e:	6822      	ldr	r2, [r4, #0]
 8000d40:	6913      	ldr	r3, [r2, #16]
 8000d42:	f023 0301 	bic.w	r3, r3, #1
 8000d46:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000d48:	6822      	ldr	r2, [r4, #0]
      ADC_ConfigureBoostMode(hadc);
 8000d4a:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d4e:	6913      	ldr	r3, [r2, #16]
 8000d50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d54:	430b      	orrs	r3, r1
 8000d56:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8000d58:	f7ff fe7a 	bl	8000a50 <ADC_ConfigureBoostMode>
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	e7c2      	b.n	8000ce6 <HAL_ADC_Init+0x12e>
 8000d60:	0359      	lsls	r1, r3, #13
 8000d62:	68a6      	ldr	r6, [r4, #8]
 8000d64:	0402      	lsls	r2, r0, #16
 8000d66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d68:	e79f      	b.n	8000caa <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d6c:	69a2      	ldr	r2, [r4, #24]
 8000d6e:	f021 010f 	bic.w	r1, r1, #15
 8000d72:	3a01      	subs	r2, #1
 8000d74:	430a      	orrs	r2, r1
 8000d76:	631a      	str	r2, [r3, #48]	; 0x30
 8000d78:	e7bc      	b.n	8000cf4 <HAL_ADC_Init+0x13c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d7a:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <HAL_ADC_Init+0x214>)
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_ADC_Init+0x228>)
 8000d7e:	6892      	ldr	r2, [r2, #8]
 8000d80:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d82:	4313      	orrs	r3, r2
 8000d84:	07d8      	lsls	r0, r3, #31
 8000d86:	d481      	bmi.n	8000c8c <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d88:	4a16      	ldr	r2, [pc, #88]	; (8000de4 <HAL_ADC_Init+0x22c>)
 8000d8a:	e779      	b.n	8000c80 <HAL_ADC_Init+0xc8>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000d8c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 8000d90:	6820      	ldr	r0, [r4, #0]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8000d96:	6902      	ldr	r2, [r0, #16]
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	4912      	ldr	r1, [pc, #72]	; (8000de8 <HAL_ADC_Init+0x230>)
 8000d9e:	4333      	orrs	r3, r6
 8000da0:	4011      	ands	r1, r2
 8000da2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000da4:	430b      	orrs	r3, r1
 8000da6:	3a01      	subs	r2, #1
 8000da8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dac:	6103      	str	r3, [r0, #16]
 8000dae:	e7cb      	b.n	8000d48 <HAL_ADC_Init+0x190>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000db0:	f043 031c 	orr.w	r3, r3, #28
 8000db4:	430b      	orrs	r3, r1
 8000db6:	4313      	orrs	r3, r2
 8000db8:	e77a      	b.n	8000cb0 <HAL_ADC_Init+0xf8>
 8000dba:	bf00      	nop
 8000dbc:	5fffffc0 	.word	0x5fffffc0
 8000dc0:	20000018 	.word	0x20000018
 8000dc4:	053e2d63 	.word	0x053e2d63
 8000dc8:	6fffffc0 	.word	0x6fffffc0
 8000dcc:	40022000 	.word	0x40022000
 8000dd0:	58026000 	.word	0x58026000
 8000dd4:	58026300 	.word	0x58026300
 8000dd8:	fff0c003 	.word	0xfff0c003
 8000ddc:	ffffbffc 	.word	0xffffbffc
 8000de0:	40022100 	.word	0x40022100
 8000de4:	40022300 	.word	0x40022300
 8000de8:	fc00f81e 	.word	0xfc00f81e

08000dec <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000dec:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8000df0:	2a01      	cmp	r2, #1
 8000df2:	d043      	beq.n	8000e7c <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2001      	movs	r0, #1
{
 8000df8:	b470      	push	{r4, r5, r6}

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000dfa:	4c37      	ldr	r4, [pc, #220]	; (8000ed8 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8000dfe:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000e02:	42a2      	cmp	r2, r4
 8000e04:	d008      	beq.n	8000e18 <HAL_ADCEx_MultiModeConfigChannel+0x2c>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e06:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e08:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e0a:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 8000e0e:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e12:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8000e14:	bc70      	pop	{r4, r5, r6}
 8000e16:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e18:	4830      	ldr	r0, [pc, #192]	; (8000edc <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000e1a:	6884      	ldr	r4, [r0, #8]
 8000e1c:	0764      	lsls	r4, r4, #29
 8000e1e:	d50a      	bpl.n	8000e36 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8000e20:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000e24:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e26:	f042 0220 	orr.w	r2, r2, #32
 8000e2a:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000e32:	bc70      	pop	{r4, r5, r6}
 8000e34:	4770      	bx	lr
 8000e36:	6894      	ldr	r4, [r2, #8]
 8000e38:	0765      	lsls	r5, r4, #29
 8000e3a:	d4f2      	bmi.n	8000e22 <HAL_ADCEx_MultiModeConfigChannel+0x36>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8000e3c:	680c      	ldr	r4, [r1, #0]
 8000e3e:	b1fc      	cbz	r4, 8000e80 <HAL_ADCEx_MultiModeConfigChannel+0x94>
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8000e40:	4d27      	ldr	r5, [pc, #156]	; (8000ee0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8000e42:	684e      	ldr	r6, [r1, #4]
 8000e44:	68ac      	ldr	r4, [r5, #8]
 8000e46:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 8000e4a:	4334      	orrs	r4, r6
 8000e4c:	60ac      	str	r4, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e4e:	681c      	ldr	r4, [r3, #0]
 8000e50:	4294      	cmp	r4, r2
 8000e52:	d035      	beq.n	8000ec0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8000e54:	4284      	cmp	r4, r0
 8000e56:	d033      	beq.n	8000ec0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e58:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8000e5a:	6892      	ldr	r2, [r2, #8]
 8000e5c:	43d2      	mvns	r2, r2
 8000e5e:	f002 0201 	and.w	r2, r2, #1
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d035      	beq.n	8000ed2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
        MODIFY_REG(tmpADC_Common->CCR,
 8000e66:	4d1e      	ldr	r5, [pc, #120]	; (8000ee0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e68:	2000      	movs	r0, #0
        MODIFY_REG(tmpADC_Common->CCR,
 8000e6a:	680a      	ldr	r2, [r1, #0]
 8000e6c:	68ae      	ldr	r6, [r5, #8]
 8000e6e:	6889      	ldr	r1, [r1, #8]
 8000e70:	4c1d      	ldr	r4, [pc, #116]	; (8000ee8 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8000e72:	430a      	orrs	r2, r1
 8000e74:	4034      	ands	r4, r6
 8000e76:	4322      	orrs	r2, r4
 8000e78:	60aa      	str	r2, [r5, #8]
 8000e7a:	e7d7      	b.n	8000e2c <HAL_ADCEx_MultiModeConfigChannel+0x40>
  __HAL_LOCK(hadc);
 8000e7c:	2002      	movs	r0, #2
}
 8000e7e:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8000e80:	4c17      	ldr	r4, [pc, #92]	; (8000ee0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8000e82:	68a1      	ldr	r1, [r4, #8]
 8000e84:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8000e88:	60a1      	str	r1, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e8a:	6819      	ldr	r1, [r3, #0]
 8000e8c:	4291      	cmp	r1, r2
 8000e8e:	d00e      	beq.n	8000eae <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8000e90:	4281      	cmp	r1, r0
 8000e92:	d00c      	beq.n	8000eae <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8000e94:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8000e96:	6892      	ldr	r2, [r2, #8]
 8000e98:	43d2      	mvns	r2, r2
 8000e9a:	f002 0201 	and.w	r2, r2, #1
 8000e9e:	b1c2      	cbz	r2, 8000ed2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000ea0:	490f      	ldr	r1, [pc, #60]	; (8000ee0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea2:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000ea4:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8000ea6:	688c      	ldr	r4, [r1, #8]
 8000ea8:	4022      	ands	r2, r4
 8000eaa:	608a      	str	r2, [r1, #8]
 8000eac:	e7be      	b.n	8000e2c <HAL_ADCEx_MultiModeConfigChannel+0x40>
 8000eae:	490a      	ldr	r1, [pc, #40]	; (8000ed8 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000eb2:	6889      	ldr	r1, [r1, #8]
 8000eb4:	6892      	ldr	r2, [r2, #8]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	f002 0201 	and.w	r2, r2, #1
 8000ebe:	e7ee      	b.n	8000e9e <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000ec2:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000ec4:	6880      	ldr	r0, [r0, #8]
 8000ec6:	6892      	ldr	r2, [r2, #8]
 8000ec8:	4302      	orrs	r2, r0
 8000eca:	43d2      	mvns	r2, r2
 8000ecc:	f002 0201 	and.w	r2, r2, #1
 8000ed0:	e7c7      	b.n	8000e62 <HAL_ADCEx_MultiModeConfigChannel+0x76>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	e7aa      	b.n	8000e2c <HAL_ADCEx_MultiModeConfigChannel+0x40>
 8000ed6:	bf00      	nop
 8000ed8:	40022000 	.word	0x40022000
 8000edc:	40022100 	.word	0x40022100
 8000ee0:	40022300 	.word	0x40022300
 8000ee4:	58026000 	.word	0x58026000
 8000ee8:	fffff0e0 	.word	0xfffff0e0

08000eec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eee:	0200      	lsls	r0, r0, #8
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8000ef2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef6:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef8:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	4022      	ands	r2, r4
 8000f00:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f02:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8000f04:	60c8      	str	r0, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	05fa0000 	.word	0x05fa0000

08000f14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f16:	b430      	push	{r4, r5}
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	2d04      	cmp	r5, #4
 8000f26:	bf28      	it	cs
 8000f28:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	2c06      	cmp	r4, #6
 8000f2c:	d918      	bls.n	8000f60 <HAL_NVIC_SetPriority+0x4c>
 8000f2e:	3b03      	subs	r3, #3
 8000f30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000f34:	409c      	lsls	r4, r3
 8000f36:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	fa02 f205 	lsl.w	r2, r2, r5
 8000f44:	ea21 0102 	bic.w	r1, r1, r2
 8000f48:	fa01 f203 	lsl.w	r2, r1, r3
 8000f4c:	ea42 0204 	orr.w	r2, r2, r4
 8000f50:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000f54:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8000f56:	db06      	blt.n	8000f66 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_NVIC_SetPriority+0x64>)
 8000f5a:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f5c:	bc30      	pop	{r4, r5}
 8000f5e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f60:	2400      	movs	r4, #0
 8000f62:	4623      	mov	r3, r4
 8000f64:	e7e9      	b.n	8000f3a <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	f000 000f 	and.w	r0, r0, #15
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <HAL_NVIC_SetPriority+0x68>)
 8000f6c:	541a      	strb	r2, [r3, r0]
 8000f6e:	bc30      	pop	{r4, r5}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	e000e400 	.word	0xe000e400
 8000f7c:	e000ed14 	.word	0xe000ed14

08000f80 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f80:	2800      	cmp	r0, #0
 8000f82:	db07      	blt.n	8000f94 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f84:	f000 011f 	and.w	r1, r0, #31
 8000f88:	2301      	movs	r3, #1
 8000f8a:	0940      	lsrs	r0, r0, #5
 8000f8c:	4a02      	ldr	r2, [pc, #8]	; (8000f98 <HAL_NVIC_EnableIRQ+0x18>)
 8000f8e:	408b      	lsls	r3, r1
 8000f90:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	3801      	subs	r0, #1
 8000f9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fa2:	d20d      	bcs.n	8000fc0 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa8:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	25f0      	movs	r5, #240	; 0xf0
 8000fae:	4c06      	ldr	r4, [pc, #24]	; (8000fc8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb0:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb2:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000fbc:	bc30      	pop	{r4, r5}
 8000fbe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e010 	.word	0xe000e010
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8000fcc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	4904      	ldr	r1, [pc, #16]	; (8000fe8 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fd6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fdc:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8000fde:	6048      	str	r0, [r1, #4]
}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	e000ed90 	.word	0xe000ed90

08000fec <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000fee:	f040 0001 	orr.w	r0, r0, #1
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_MPU_Enable+0x20>)
 8000ff4:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000ff6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001002:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	e000ed90 	.word	0xe000ed90

08001010 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001010:	7843      	ldrb	r3, [r0, #1]
 8001012:	4a13      	ldr	r2, [pc, #76]	; (8001060 <HAL_MPU_ConfigRegion+0x50>)
 8001014:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001016:	7803      	ldrb	r3, [r0, #0]
 8001018:	b913      	cbnz	r3, 8001020 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 800101a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = 0x00;
 800101c:	6113      	str	r3, [r2, #16]
 800101e:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8001020:	6843      	ldr	r3, [r0, #4]
{
 8001022:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8001024:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001026:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001028:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800102a:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800102c:	7805      	ldrb	r5, [r0, #0]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800102e:	7a84      	ldrb	r4, [r0, #10]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001030:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001034:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001036:	7b86      	ldrb	r6, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001038:	432b      	orrs	r3, r5
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800103a:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800103c:	ea43 43c4 	orr.w	r3, r3, r4, lsl #19
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001040:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001042:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001046:	7a01      	ldrb	r1, [r0, #8]
 8001048:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800104c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001050:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001054:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001058:	6113      	str	r3, [r2, #16]
  }
}
 800105a:	bc70      	pop	{r4, r5, r6}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed90 	.word	0xe000ed90

08001064 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001064:	4b35      	ldr	r3, [pc, #212]	; (800113c <DMA_CalcBaseAndBitshift+0xd8>)
{
 8001066:	4601      	mov	r1, r0
 8001068:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800106a:	4c35      	ldr	r4, [pc, #212]	; (8001140 <DMA_CalcBaseAndBitshift+0xdc>)
 800106c:	6802      	ldr	r2, [r0, #0]
 800106e:	4835      	ldr	r0, [pc, #212]	; (8001144 <DMA_CalcBaseAndBitshift+0xe0>)
 8001070:	42a2      	cmp	r2, r4
 8001072:	bf18      	it	ne
 8001074:	429a      	cmpne	r2, r3
 8001076:	4d34      	ldr	r5, [pc, #208]	; (8001148 <DMA_CalcBaseAndBitshift+0xe4>)
 8001078:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800107c:	bf0c      	ite	eq
 800107e:	2301      	moveq	r3, #1
 8001080:	2300      	movne	r3, #0
 8001082:	4282      	cmp	r2, r0
 8001084:	bf08      	it	eq
 8001086:	f043 0301 	orreq.w	r3, r3, #1
 800108a:	3048      	adds	r0, #72	; 0x48
 800108c:	42aa      	cmp	r2, r5
 800108e:	bf08      	it	eq
 8001090:	f043 0301 	orreq.w	r3, r3, #1
 8001094:	3548      	adds	r5, #72	; 0x48
 8001096:	42a2      	cmp	r2, r4
 8001098:	bf08      	it	eq
 800109a:	f043 0301 	orreq.w	r3, r3, #1
 800109e:	3448      	adds	r4, #72	; 0x48
 80010a0:	4282      	cmp	r2, r0
 80010a2:	bf08      	it	eq
 80010a4:	f043 0301 	orreq.w	r3, r3, #1
 80010a8:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80010ac:	42aa      	cmp	r2, r5
 80010ae:	bf08      	it	eq
 80010b0:	f043 0301 	orreq.w	r3, r3, #1
 80010b4:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80010b8:	42a2      	cmp	r2, r4
 80010ba:	bf08      	it	eq
 80010bc:	f043 0301 	orreq.w	r3, r3, #1
 80010c0:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80010c4:	4282      	cmp	r2, r0
 80010c6:	bf08      	it	eq
 80010c8:	f043 0301 	orreq.w	r3, r3, #1
 80010cc:	3048      	adds	r0, #72	; 0x48
 80010ce:	42aa      	cmp	r2, r5
 80010d0:	bf08      	it	eq
 80010d2:	f043 0301 	orreq.w	r3, r3, #1
 80010d6:	3548      	adds	r5, #72	; 0x48
 80010d8:	42a2      	cmp	r2, r4
 80010da:	bf08      	it	eq
 80010dc:	f043 0301 	orreq.w	r3, r3, #1
 80010e0:	3448      	adds	r4, #72	; 0x48
 80010e2:	4282      	cmp	r2, r0
 80010e4:	bf08      	it	eq
 80010e6:	f043 0301 	orreq.w	r3, r3, #1
 80010ea:	3048      	adds	r0, #72	; 0x48
 80010ec:	42aa      	cmp	r2, r5
 80010ee:	bf08      	it	eq
 80010f0:	f043 0301 	orreq.w	r3, r3, #1
 80010f4:	42a2      	cmp	r2, r4
 80010f6:	bf08      	it	eq
 80010f8:	f043 0301 	orreq.w	r3, r3, #1
 80010fc:	4282      	cmp	r2, r0
 80010fe:	bf08      	it	eq
 8001100:	f043 0301 	orreq.w	r3, r3, #1
 8001104:	b913      	cbnz	r3, 800110c <DMA_CalcBaseAndBitshift+0xa8>
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <DMA_CalcBaseAndBitshift+0xe8>)
 8001108:	429a      	cmp	r2, r3
 800110a:	d112      	bne.n	8001132 <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800110c:	b2d3      	uxtb	r3, r2
 800110e:	4d10      	ldr	r5, [pc, #64]	; (8001150 <DMA_CalcBaseAndBitshift+0xec>)
 8001110:	4810      	ldr	r0, [pc, #64]	; (8001154 <DMA_CalcBaseAndBitshift+0xf0>)
 8001112:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001114:	4c10      	ldr	r4, [pc, #64]	; (8001158 <DMA_CalcBaseAndBitshift+0xf4>)
 8001116:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001118:	fba5 5303 	umull	r5, r3, r5, r3
 800111c:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800111e:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 8001122:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001124:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001126:	bf88      	it	hi
 8001128:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800112a:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800112c:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800112e:	bc30      	pop	{r4, r5}
 8001130:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001132:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8001136:	6588      	str	r0, [r1, #88]	; 0x58
 8001138:	e7f9      	b.n	800112e <DMA_CalcBaseAndBitshift+0xca>
 800113a:	bf00      	nop
 800113c:	40020010 	.word	0x40020010
 8001140:	40020028 	.word	0x40020028
 8001144:	40020040 	.word	0x40020040
 8001148:	40020058 	.word	0x40020058
 800114c:	400204b8 	.word	0x400204b8
 8001150:	aaaaaaab 	.word	0xaaaaaaab
 8001154:	fffffc00 	.word	0xfffffc00
 8001158:	0800f9f0 	.word	0x0800f9f0

0800115c <HAL_DMA_Init>:
{
 800115c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001160:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001162:	f7ff f91d 	bl	80003a0 <HAL_GetTick>
  if(hdma == NULL)
 8001166:	2c00      	cmp	r4, #0
 8001168:	f000 81ab 	beq.w	80014c2 <HAL_DMA_Init+0x366>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800116c:	6822      	ldr	r2, [r4, #0]
 800116e:	4605      	mov	r5, r0
 8001170:	4b56      	ldr	r3, [pc, #344]	; (80012cc <HAL_DMA_Init+0x170>)
 8001172:	429a      	cmp	r2, r3
 8001174:	d049      	beq.n	800120a <HAL_DMA_Init+0xae>
 8001176:	3318      	adds	r3, #24
 8001178:	429a      	cmp	r2, r3
 800117a:	d046      	beq.n	800120a <HAL_DMA_Init+0xae>
 800117c:	3330      	adds	r3, #48	; 0x30
 800117e:	4854      	ldr	r0, [pc, #336]	; (80012d0 <HAL_DMA_Init+0x174>)
 8001180:	4954      	ldr	r1, [pc, #336]	; (80012d4 <HAL_DMA_Init+0x178>)
 8001182:	4282      	cmp	r2, r0
 8001184:	bf18      	it	ne
 8001186:	429a      	cmpne	r2, r3
 8001188:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	428a      	cmp	r2, r1
 8001194:	bf08      	it	eq
 8001196:	f043 0301 	orreq.w	r3, r3, #1
 800119a:	3130      	adds	r1, #48	; 0x30
 800119c:	4282      	cmp	r2, r0
 800119e:	bf08      	it	eq
 80011a0:	f043 0301 	orreq.w	r3, r3, #1
 80011a4:	3030      	adds	r0, #48	; 0x30
 80011a6:	428a      	cmp	r2, r1
 80011a8:	bf08      	it	eq
 80011aa:	f043 0301 	orreq.w	r3, r3, #1
 80011ae:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80011b2:	4282      	cmp	r2, r0
 80011b4:	bf08      	it	eq
 80011b6:	f043 0301 	orreq.w	r3, r3, #1
 80011ba:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80011be:	428a      	cmp	r2, r1
 80011c0:	bf08      	it	eq
 80011c2:	f043 0301 	orreq.w	r3, r3, #1
 80011c6:	3130      	adds	r1, #48	; 0x30
 80011c8:	4282      	cmp	r2, r0
 80011ca:	bf08      	it	eq
 80011cc:	f043 0301 	orreq.w	r3, r3, #1
 80011d0:	3030      	adds	r0, #48	; 0x30
 80011d2:	428a      	cmp	r2, r1
 80011d4:	bf08      	it	eq
 80011d6:	f043 0301 	orreq.w	r3, r3, #1
 80011da:	3130      	adds	r1, #48	; 0x30
 80011dc:	4282      	cmp	r2, r0
 80011de:	bf08      	it	eq
 80011e0:	f043 0301 	orreq.w	r3, r3, #1
 80011e4:	3030      	adds	r0, #48	; 0x30
 80011e6:	428a      	cmp	r2, r1
 80011e8:	bf08      	it	eq
 80011ea:	f043 0301 	orreq.w	r3, r3, #1
 80011ee:	3130      	adds	r1, #48	; 0x30
 80011f0:	4282      	cmp	r2, r0
 80011f2:	bf08      	it	eq
 80011f4:	f043 0301 	orreq.w	r3, r3, #1
 80011f8:	428a      	cmp	r2, r1
 80011fa:	bf08      	it	eq
 80011fc:	f043 0301 	orreq.w	r3, r3, #1
 8001200:	b91b      	cbnz	r3, 800120a <HAL_DMA_Init+0xae>
 8001202:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <HAL_DMA_Init+0x17c>)
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 81eb 	bne.w	80015e0 <HAL_DMA_Init+0x484>
    hdma->State = HAL_DMA_STATE_BUSY;
 800120a:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 800120c:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800120e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001212:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e005      	b.n	800122c <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001220:	f7ff f8be 	bl	80003a0 <HAL_GetTick>
 8001224:	1b40      	subs	r0, r0, r5
 8001226:	2805      	cmp	r0, #5
 8001228:	f200 8143 	bhi.w	80014b2 <HAL_DMA_Init+0x356>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	07d0      	lsls	r0, r2, #31
 8001232:	d4f5      	bmi.n	8001220 <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 8001234:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001238:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800123a:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123c:	e9d4 5005 	ldrd	r5, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001240:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001242:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001244:	432a      	orrs	r2, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8001246:	6a25      	ldr	r5, [r4, #32]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001248:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800124a:	6818      	ldr	r0, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124c:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800124e:	4923      	ldr	r1, [pc, #140]	; (80012dc <HAL_DMA_Init+0x180>)
 8001250:	4001      	ands	r1, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001252:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8001254:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001256:	2804      	cmp	r0, #4
    registerValue |=  hdma->Init.Direction           |
 8001258:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800125c:	d103      	bne.n	8001266 <HAL_DMA_Init+0x10a>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800125e:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8001262:	4301      	orrs	r1, r0
 8001264:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001266:	481e      	ldr	r0, [pc, #120]	; (80012e0 <HAL_DMA_Init+0x184>)
 8001268:	491e      	ldr	r1, [pc, #120]	; (80012e4 <HAL_DMA_Init+0x188>)
 800126a:	6800      	ldr	r0, [r0, #0]
 800126c:	4001      	ands	r1, r0
 800126e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001272:	d30a      	bcc.n	800128a <HAL_DMA_Init+0x12e>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001274:	6860      	ldr	r0, [r4, #4]
 8001276:	f1a0 0529 	sub.w	r5, r0, #41	; 0x29
 800127a:	2d1f      	cmp	r5, #31
 800127c:	f240 8124 	bls.w	80014c8 <HAL_DMA_Init+0x36c>
 8001280:	384f      	subs	r0, #79	; 0x4f
 8001282:	2803      	cmp	r0, #3
 8001284:	d801      	bhi.n	800128a <HAL_DMA_Init+0x12e>
        registerValue |= DMA_SxCR_TRBUFF;
 8001286:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800128a:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800128c:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 800128e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001290:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001292:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001294:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001298:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800129c:	d12a      	bne.n	80012f4 <HAL_DMA_Init+0x198>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800129e:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 80012a2:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012a4:	b330      	cbz	r0, 80012f4 <HAL_DMA_Init+0x198>
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012a6:	69a5      	ldr	r5, [r4, #24]
 80012a8:	b1f5      	cbz	r5, 80012e8 <HAL_DMA_Init+0x18c>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012aa:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80012ae:	f000 81fb 	beq.w	80016a8 <HAL_DMA_Init+0x54c>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80012b2:	2a02      	cmp	r2, #2
 80012b4:	d903      	bls.n	80012be <HAL_DMA_Init+0x162>
 80012b6:	2a03      	cmp	r2, #3
 80012b8:	d11c      	bne.n	80012f4 <HAL_DMA_Init+0x198>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012ba:	01c2      	lsls	r2, r0, #7
 80012bc:	d51a      	bpl.n	80012f4 <HAL_DMA_Init+0x198>
          hdma->State = HAL_DMA_STATE_READY;
 80012be:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012c0:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80012c2:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012c4:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80012c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 80012ca:	e0f0      	b.n	80014ae <HAL_DMA_Init+0x352>
 80012cc:	40020010 	.word	0x40020010
 80012d0:	40020040 	.word	0x40020040
 80012d4:	40020070 	.word	0x40020070
 80012d8:	400204b8 	.word	0x400204b8
 80012dc:	fe10803f 	.word	0xfe10803f
 80012e0:	5c001000 	.word	0x5c001000
 80012e4:	ffff0000 	.word	0xffff0000
    switch (hdma->Init.FIFOThreshold)
 80012e8:	2a01      	cmp	r2, #1
 80012ea:	f000 81d8 	beq.w	800169e <HAL_DMA_Init+0x542>
 80012ee:	d3e4      	bcc.n	80012ba <HAL_DMA_Init+0x15e>
 80012f0:	2a02      	cmp	r2, #2
 80012f2:	d0e2      	beq.n	80012ba <HAL_DMA_Init+0x15e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80012f4:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012f6:	4620      	mov	r0, r4
 80012f8:	f7ff feb4 	bl	8001064 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80012fc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012fe:	233f      	movs	r3, #63	; 0x3f
 8001300:	f002 021f 	and.w	r2, r2, #31
 8001304:	4093      	lsls	r3, r2
 8001306:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001308:	6822      	ldr	r2, [r4, #0]
 800130a:	4b9d      	ldr	r3, [pc, #628]	; (8001580 <HAL_DMA_Init+0x424>)
 800130c:	489d      	ldr	r0, [pc, #628]	; (8001584 <HAL_DMA_Init+0x428>)
 800130e:	499e      	ldr	r1, [pc, #632]	; (8001588 <HAL_DMA_Init+0x42c>)
 8001310:	4282      	cmp	r2, r0
 8001312:	bf18      	it	ne
 8001314:	429a      	cmpne	r2, r3
 8001316:	4e9d      	ldr	r6, [pc, #628]	; (800158c <HAL_DMA_Init+0x430>)
 8001318:	4d9d      	ldr	r5, [pc, #628]	; (8001590 <HAL_DMA_Init+0x434>)
 800131a:	f100 0060 	add.w	r0, r0, #96	; 0x60
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	f8df e2a8 	ldr.w	lr, [pc, #680]	; 80015d0 <HAL_DMA_Init+0x474>
 8001328:	428a      	cmp	r2, r1
 800132a:	bf08      	it	eq
 800132c:	f043 0301 	orreq.w	r3, r3, #1
 8001330:	3160      	adds	r1, #96	; 0x60
 8001332:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 80015d4 <HAL_DMA_Init+0x478>
 8001336:	42b2      	cmp	r2, r6
 8001338:	bf08      	it	eq
 800133a:	f043 0301 	orreq.w	r3, r3, #1
 800133e:	4f95      	ldr	r7, [pc, #596]	; (8001594 <HAL_DMA_Init+0x438>)
 8001340:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8001344:	f8df 8290 	ldr.w	r8, [pc, #656]	; 80015d8 <HAL_DMA_Init+0x47c>
 8001348:	42aa      	cmp	r2, r5
 800134a:	bf08      	it	eq
 800134c:	f043 0301 	orreq.w	r3, r3, #1
 8001350:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
 8001354:	f8df a258 	ldr.w	sl, [pc, #600]	; 80015b0 <HAL_DMA_Init+0x454>
 8001358:	4282      	cmp	r2, r0
 800135a:	bf08      	it	eq
 800135c:	f043 0301 	orreq.w	r3, r3, #1
 8001360:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8001364:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80015dc <HAL_DMA_Init+0x480>
 8001368:	428a      	cmp	r2, r1
 800136a:	bf08      	it	eq
 800136c:	f043 0301 	orreq.w	r3, r3, #1
 8001370:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8001374:	4572      	cmp	r2, lr
 8001376:	bf08      	it	eq
 8001378:	f043 0301 	orreq.w	r3, r3, #1
 800137c:	f8df e228 	ldr.w	lr, [pc, #552]	; 80015a8 <HAL_DMA_Init+0x44c>
 8001380:	4562      	cmp	r2, ip
 8001382:	bf08      	it	eq
 8001384:	f043 0301 	orreq.w	r3, r3, #1
 8001388:	eba2 0e0e 	sub.w	lr, r2, lr
 800138c:	f8df c21c 	ldr.w	ip, [pc, #540]	; 80015ac <HAL_DMA_Init+0x450>
 8001390:	42ba      	cmp	r2, r7
 8001392:	bf08      	it	eq
 8001394:	f043 0301 	orreq.w	r3, r3, #1
 8001398:	fabe fe8e 	clz	lr, lr
 800139c:	eba2 070c 	sub.w	r7, r2, ip
 80013a0:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80013a4:	42b2      	cmp	r2, r6
 80013a6:	bf08      	it	eq
 80013a8:	f043 0301 	orreq.w	r3, r3, #1
 80013ac:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80013b0:	eba2 060a 	sub.w	r6, r2, sl
 80013b4:	fab7 f787 	clz	r7, r7
 80013b8:	42aa      	cmp	r2, r5
 80013ba:	bf08      	it	eq
 80013bc:	f043 0301 	orreq.w	r3, r3, #1
 80013c0:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 80013c4:	eba2 050c 	sub.w	r5, r2, ip
 80013c8:	097f      	lsrs	r7, r7, #5
 80013ca:	4282      	cmp	r2, r0
 80013cc:	bf08      	it	eq
 80013ce:	f043 0301 	orreq.w	r3, r3, #1
 80013d2:	fab6 f686 	clz	r6, r6
 80013d6:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80013da:	fab5 f585 	clz	r5, r5
 80013de:	428a      	cmp	r2, r1
 80013e0:	bf08      	it	eq
 80013e2:	f043 0301 	orreq.w	r3, r3, #1
 80013e6:	0976      	lsrs	r6, r6, #5
 80013e8:	eba2 000a 	sub.w	r0, r2, sl
 80013ec:	eba2 010c 	sub.w	r1, r2, ip
 80013f0:	4542      	cmp	r2, r8
 80013f2:	bf08      	it	eq
 80013f4:	f043 0301 	orreq.w	r3, r3, #1
 80013f8:	096d      	lsrs	r5, r5, #5
 80013fa:	fab0 f080 	clz	r0, r0
 80013fe:	f10c 0c14 	add.w	ip, ip, #20
 8001402:	454a      	cmp	r2, r9
 8001404:	bf08      	it	eq
 8001406:	f043 0301 	orreq.w	r3, r3, #1
 800140a:	fab1 f181 	clz	r1, r1
 800140e:	0940      	lsrs	r0, r0, #5
 8001410:	eba2 0c0c 	sub.w	ip, r2, ip
 8001414:	ea4e 0303 	orr.w	r3, lr, r3
 8001418:	0949      	lsrs	r1, r1, #5
 800141a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80015b4 <HAL_DMA_Init+0x458>
 800141e:	fabc fc8c 	clz	ip, ip
 8001422:	433b      	orrs	r3, r7
 8001424:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001428:	eba2 0808 	sub.w	r8, r2, r8
 800142c:	4333      	orrs	r3, r6
 800142e:	fab8 f888 	clz	r8, r8
 8001432:	432b      	orrs	r3, r5
 8001434:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8001438:	4303      	orrs	r3, r0
 800143a:	430b      	orrs	r3, r1
 800143c:	ea5c 0303 	orrs.w	r3, ip, r3
 8001440:	d102      	bne.n	8001448 <HAL_DMA_Init+0x2ec>
 8001442:	f1b8 0f00 	cmp.w	r8, #0
 8001446:	d02d      	beq.n	80014a4 <HAL_DMA_Init+0x348>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001448:	ea47 070e 	orr.w	r7, r7, lr
 800144c:	b2d3      	uxtb	r3, r2
 800144e:	433e      	orrs	r6, r7
 8001450:	4335      	orrs	r5, r6
 8001452:	4328      	orrs	r0, r5
 8001454:	4301      	orrs	r1, r0
 8001456:	ea5c 0101 	orrs.w	r1, ip, r1
 800145a:	d102      	bne.n	8001462 <HAL_DMA_Init+0x306>
 800145c:	f1b8 0f00 	cmp.w	r8, #0
 8001460:	d076      	beq.n	8001550 <HAL_DMA_Init+0x3f4>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001462:	484d      	ldr	r0, [pc, #308]	; (8001598 <HAL_DMA_Init+0x43c>)
 8001464:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001466:	4a4d      	ldr	r2, [pc, #308]	; (800159c <HAL_DMA_Init+0x440>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001468:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800146a:	fba0 0303 	umull	r0, r3, r0, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800146e:	484c      	ldr	r0, [pc, #304]	; (80015a0 <HAL_DMA_Init+0x444>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001470:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001472:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001474:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001476:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800147a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001480:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001482:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001484:	68a3      	ldr	r3, [r4, #8]
 8001486:	2b80      	cmp	r3, #128	; 0x80
 8001488:	d026      	beq.n	80014d8 <HAL_DMA_Init+0x37c>
 800148a:	7923      	ldrb	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800148c:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800148e:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8001492:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001494:	6860      	ldr	r0, [r4, #4]
 8001496:	1e41      	subs	r1, r0, #1
 8001498:	2907      	cmp	r1, #7
 800149a:	d921      	bls.n	80014e0 <HAL_DMA_Init+0x384>
      hdma->DMAmuxRequestGen = 0U;
 800149c:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800149e:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80014a2:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80014a6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80014aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80014ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b2:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80014b4:	2303      	movs	r3, #3
        return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b8:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80014ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80014be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
}
 80014c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80014c8:	4936      	ldr	r1, [pc, #216]	; (80015a4 <HAL_DMA_Init+0x448>)
 80014ca:	40e9      	lsrs	r1, r5
 80014cc:	07c9      	lsls	r1, r1, #31
 80014ce:	f57f aed7 	bpl.w	8001280 <HAL_DMA_Init+0x124>
        registerValue |= DMA_SxCR_TRBUFF;
 80014d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014d6:	e6d8      	b.n	800128a <HAL_DMA_Init+0x12e>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014d8:	2100      	movs	r1, #0
 80014da:	460b      	mov	r3, r1
 80014dc:	6061      	str	r1, [r4, #4]
 80014de:	e7d5      	b.n	800148c <HAL_DMA_Init+0x330>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80014e0:	6822      	ldr	r2, [r4, #0]
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <HAL_DMA_Init+0x44c>)
 80014e4:	4e31      	ldr	r6, [pc, #196]	; (80015ac <HAL_DMA_Init+0x450>)
 80014e6:	4d32      	ldr	r5, [pc, #200]	; (80015b0 <HAL_DMA_Init+0x454>)
 80014e8:	42b2      	cmp	r2, r6
 80014ea:	bf18      	it	ne
 80014ec:	429a      	cmpne	r2, r3
 80014ee:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80014f2:	bf0c      	ite	eq
 80014f4:	2301      	moveq	r3, #1
 80014f6:	2300      	movne	r3, #0
 80014f8:	42aa      	cmp	r2, r5
 80014fa:	bf08      	it	eq
 80014fc:	f043 0301 	orreq.w	r3, r3, #1
 8001500:	3528      	adds	r5, #40	; 0x28
 8001502:	42b2      	cmp	r2, r6
 8001504:	bf08      	it	eq
 8001506:	f043 0301 	orreq.w	r3, r3, #1
 800150a:	3628      	adds	r6, #40	; 0x28
 800150c:	42aa      	cmp	r2, r5
 800150e:	bf08      	it	eq
 8001510:	f043 0301 	orreq.w	r3, r3, #1
 8001514:	3528      	adds	r5, #40	; 0x28
 8001516:	42b2      	cmp	r2, r6
 8001518:	bf08      	it	eq
 800151a:	f043 0301 	orreq.w	r3, r3, #1
 800151e:	42aa      	cmp	r2, r5
 8001520:	bf08      	it	eq
 8001522:	f043 0301 	orreq.w	r3, r3, #1
 8001526:	b91b      	cbnz	r3, 8001530 <HAL_DMA_Init+0x3d4>
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <HAL_DMA_Init+0x458>)
 800152a:	429a      	cmp	r2, r3
 800152c:	f040 80ca 	bne.w	80016c4 <HAL_DMA_Init+0x568>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_DMA_Init+0x45c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001532:	4d22      	ldr	r5, [pc, #136]	; (80015bc <HAL_DMA_Init+0x460>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001534:	4403      	add	r3, r0
 8001536:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001538:	2201      	movs	r2, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800153a:	2000      	movs	r0, #0
 800153c:	6725      	str	r5, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800153e:	fa02 f101 	lsl.w	r1, r2, r1
 8001542:	66e3      	str	r3, [r4, #108]	; 0x6c
 8001544:	6761      	str	r1, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001546:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001548:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	e7a9      	b.n	80014a4 <HAL_DMA_Init+0x348>
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001550:	491b      	ldr	r1, [pc, #108]	; (80015c0 <HAL_DMA_Init+0x464>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001552:	3b10      	subs	r3, #16
 8001554:	481b      	ldr	r0, [pc, #108]	; (80015c4 <HAL_DMA_Init+0x468>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001556:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001558:	fba0 0303 	umull	r0, r3, r0, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800155c:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800155e:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001562:	d800      	bhi.n	8001566 <HAL_DMA_Init+0x40a>
      stream_number += 8U;
 8001564:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001566:	4a18      	ldr	r2, [pc, #96]	; (80015c8 <HAL_DMA_Init+0x46c>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001568:	f003 051f 	and.w	r5, r3, #31
 800156c:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800156e:	4817      	ldr	r0, [pc, #92]	; (80015cc <HAL_DMA_Init+0x470>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001570:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001572:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001574:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001576:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001578:	66a1      	str	r1, [r4, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800157a:	6622      	str	r2, [r4, #96]	; 0x60
 800157c:	e782      	b.n	8001484 <HAL_DMA_Init+0x328>
 800157e:	bf00      	nop
 8001580:	40020010 	.word	0x40020010
 8001584:	40020028 	.word	0x40020028
 8001588:	40020040 	.word	0x40020040
 800158c:	40020058 	.word	0x40020058
 8001590:	40020070 	.word	0x40020070
 8001594:	40020428 	.word	0x40020428
 8001598:	cccccccd 	.word	0xcccccccd
 800159c:	16009600 	.word	0x16009600
 80015a0:	58025880 	.word	0x58025880
 80015a4:	c3c0003f 	.word	0xc3c0003f
 80015a8:	58025408 	.word	0x58025408
 80015ac:	5802541c 	.word	0x5802541c
 80015b0:	58025430 	.word	0x58025430
 80015b4:	58025494 	.word	0x58025494
 80015b8:	1600963f 	.word	0x1600963f
 80015bc:	58025940 	.word	0x58025940
 80015c0:	bffdfbf0 	.word	0xbffdfbf0
 80015c4:	aaaaaaab 	.word	0xaaaaaaab
 80015c8:	10008200 	.word	0x10008200
 80015cc:	40020880 	.word	0x40020880
 80015d0:	400200b8 	.word	0x400200b8
 80015d4:	40020410 	.word	0x40020410
 80015d8:	400204a0 	.word	0x400204a0
 80015dc:	400204b8 	.word	0x400204b8
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80015e0:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <HAL_DMA_Init+0x584>)
 80015e2:	4940      	ldr	r1, [pc, #256]	; (80016e4 <HAL_DMA_Init+0x588>)
 80015e4:	4840      	ldr	r0, [pc, #256]	; (80016e8 <HAL_DMA_Init+0x58c>)
 80015e6:	428a      	cmp	r2, r1
 80015e8:	bf18      	it	ne
 80015ea:	429a      	cmpne	r2, r3
 80015ec:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80015f0:	4d3e      	ldr	r5, [pc, #248]	; (80016ec <HAL_DMA_Init+0x590>)
 80015f2:	bf0c      	ite	eq
 80015f4:	2301      	moveq	r3, #1
 80015f6:	2300      	movne	r3, #0
 80015f8:	4282      	cmp	r2, r0
 80015fa:	bf08      	it	eq
 80015fc:	f043 0301 	orreq.w	r3, r3, #1
 8001600:	303c      	adds	r0, #60	; 0x3c
 8001602:	428a      	cmp	r2, r1
 8001604:	bf08      	it	eq
 8001606:	f043 0301 	orreq.w	r3, r3, #1
 800160a:	313c      	adds	r1, #60	; 0x3c
 800160c:	42aa      	cmp	r2, r5
 800160e:	bf08      	it	eq
 8001610:	f043 0301 	orreq.w	r3, r3, #1
 8001614:	4282      	cmp	r2, r0
 8001616:	bf08      	it	eq
 8001618:	f043 0301 	orreq.w	r3, r3, #1
 800161c:	428a      	cmp	r2, r1
 800161e:	bf08      	it	eq
 8001620:	f043 0301 	orreq.w	r3, r3, #1
 8001624:	b913      	cbnz	r3, 800162c <HAL_DMA_Init+0x4d0>
 8001626:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <HAL_DMA_Init+0x594>)
 8001628:	429a      	cmp	r2, r3
 800162a:	d152      	bne.n	80016d2 <HAL_DMA_Init+0x576>
    hdma->State = HAL_DMA_STATE_BUSY;
 800162c:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 800162e:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001630:	4f30      	ldr	r7, [pc, #192]	; (80016f4 <HAL_DMA_Init+0x598>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8001632:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001636:	68a3      	ldr	r3, [r4, #8]
    __HAL_UNLOCK(hdma);
 8001638:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800163c:	2b40      	cmp	r3, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800163e:	6811      	ldr	r1, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001640:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001644:	d043      	beq.n	80016ce <HAL_DMA_Init+0x572>
 8001646:	2b80      	cmp	r3, #128	; 0x80
 8001648:	bf14      	ite	ne
 800164a:	2100      	movne	r1, #0
 800164c:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001650:	6923      	ldr	r3, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001652:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001654:	68e5      	ldr	r5, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001656:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001658:	6966      	ldr	r6, [r4, #20]
 800165a:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800165e:	69a5      	ldr	r5, [r4, #24]
 8001660:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001664:	69e6      	ldr	r6, [r4, #28]
 8001666:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800166a:	6a25      	ldr	r5, [r4, #32]
 800166c:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001670:	4e21      	ldr	r6, [pc, #132]	; (80016f8 <HAL_DMA_Init+0x59c>)
 8001672:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8001676:	4d21      	ldr	r5, [pc, #132]	; (80016fc <HAL_DMA_Init+0x5a0>)
 8001678:	433b      	orrs	r3, r7
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800167a:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800167c:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	441e      	add	r6, r3
 8001682:	fba5 2306 	umull	r2, r3, r5, r6
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800168c:	f7ff fcea 	bl	8001064 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001690:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001692:	2301      	movs	r3, #1
 8001694:	f002 021f 	and.w	r2, r2, #31
 8001698:	4093      	lsls	r3, r2
 800169a:	6043      	str	r3, [r0, #4]
 800169c:	e634      	b.n	8001308 <HAL_DMA_Init+0x1ac>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800169e:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80016a2:	f47f ae27 	bne.w	80012f4 <HAL_DMA_Init+0x198>
 80016a6:	e60a      	b.n	80012be <HAL_DMA_Init+0x162>
    switch (hdma->Init.FIFOThreshold)
 80016a8:	2a03      	cmp	r2, #3
 80016aa:	f63f ae23 	bhi.w	80012f4 <HAL_DMA_Init+0x198>
 80016ae:	a501      	add	r5, pc, #4	; (adr r5, 80016b4 <HAL_DMA_Init+0x558>)
 80016b0:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 80016b4:	080012bf 	.word	0x080012bf
 80016b8:	080012bb 	.word	0x080012bb
 80016bc:	080012bf 	.word	0x080012bf
 80016c0:	0800169f 	.word	0x0800169f
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_DMA_Init+0x5a4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016c6:	4d0f      	ldr	r5, [pc, #60]	; (8001704 <HAL_DMA_Init+0x5a8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016c8:	4403      	add	r3, r0
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	e734      	b.n	8001538 <HAL_DMA_Init+0x3dc>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016ce:	2110      	movs	r1, #16
 80016d0:	e7be      	b.n	8001650 <HAL_DMA_Init+0x4f4>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016d2:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016d4:	2303      	movs	r3, #3
    return HAL_ERROR;
 80016d6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016d8:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80016de:	e6e6      	b.n	80014ae <HAL_DMA_Init+0x352>
 80016e0:	58025408 	.word	0x58025408
 80016e4:	5802541c 	.word	0x5802541c
 80016e8:	58025430 	.word	0x58025430
 80016ec:	58025458 	.word	0x58025458
 80016f0:	58025494 	.word	0x58025494
 80016f4:	fffe000f 	.word	0xfffe000f
 80016f8:	a7fdabf8 	.word	0xa7fdabf8
 80016fc:	cccccccd 	.word	0xcccccccd
 8001700:	1000823f 	.word	0x1000823f
 8001704:	40020940 	.word	0x40020940

08001708 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8001708:	2800      	cmp	r0, #0
 800170a:	f000 8268 	beq.w	8001bde <HAL_DMA_Start_IT+0x4d6>
{
 800170e:	b4f0      	push	{r4, r5, r6, r7}
 8001710:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 8001712:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001716:	2801      	cmp	r0, #1
 8001718:	f000 8268 	beq.w	8001bec <HAL_DMA_Start_IT+0x4e4>
 800171c:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800171e:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 8001722:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8001724:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001728:	d007      	beq.n	800173a <HAL_DMA_Start_IT+0x32>
    __HAL_UNLOCK(hdma);
 800172a:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800172c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8001730:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001734:	656b      	str	r3, [r5, #84]	; 0x54
}
 8001736:	bcf0      	pop	{r4, r5, r6, r7}
 8001738:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800173a:	2702      	movs	r7, #2
    __HAL_DMA_DISABLE(hdma);
 800173c:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800173e:	4e9e      	ldr	r6, [pc, #632]	; (80019b8 <HAL_DMA_Start_IT+0x2b0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8001740:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001744:	2700      	movs	r7, #0
 8001746:	656f      	str	r7, [r5, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001748:	6820      	ldr	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800174a:	4f9c      	ldr	r7, [pc, #624]	; (80019bc <HAL_DMA_Start_IT+0x2b4>)
    __HAL_DMA_DISABLE(hdma);
 800174c:	f020 0001 	bic.w	r0, r0, #1
 8001750:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001752:	489b      	ldr	r0, [pc, #620]	; (80019c0 <HAL_DMA_Start_IT+0x2b8>)
 8001754:	682c      	ldr	r4, [r5, #0]
 8001756:	42b4      	cmp	r4, r6
 8001758:	bf18      	it	ne
 800175a:	4284      	cmpne	r4, r0
 800175c:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8001760:	bf0c      	ite	eq
 8001762:	2001      	moveq	r0, #1
 8001764:	2000      	movne	r0, #0
 8001766:	42bc      	cmp	r4, r7
 8001768:	bf08      	it	eq
 800176a:	f040 0001 	orreq.w	r0, r0, #1
 800176e:	3730      	adds	r7, #48	; 0x30
 8001770:	42b4      	cmp	r4, r6
 8001772:	bf08      	it	eq
 8001774:	f040 0001 	orreq.w	r0, r0, #1
 8001778:	3630      	adds	r6, #48	; 0x30
 800177a:	42bc      	cmp	r4, r7
 800177c:	bf08      	it	eq
 800177e:	f040 0001 	orreq.w	r0, r0, #1
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	42b4      	cmp	r4, r6
 8001786:	bf08      	it	eq
 8001788:	f040 0001 	orreq.w	r0, r0, #1
 800178c:	3630      	adds	r6, #48	; 0x30
 800178e:	42bc      	cmp	r4, r7
 8001790:	bf08      	it	eq
 8001792:	f040 0001 	orreq.w	r0, r0, #1
 8001796:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800179a:	42b4      	cmp	r4, r6
 800179c:	bf08      	it	eq
 800179e:	f040 0001 	orreq.w	r0, r0, #1
 80017a2:	f506 765c 	add.w	r6, r6, #880	; 0x370
 80017a6:	42bc      	cmp	r4, r7
 80017a8:	bf08      	it	eq
 80017aa:	f040 0001 	orreq.w	r0, r0, #1
 80017ae:	3730      	adds	r7, #48	; 0x30
 80017b0:	42b4      	cmp	r4, r6
 80017b2:	bf08      	it	eq
 80017b4:	f040 0001 	orreq.w	r0, r0, #1
 80017b8:	3630      	adds	r6, #48	; 0x30
 80017ba:	42bc      	cmp	r4, r7
 80017bc:	bf08      	it	eq
 80017be:	f040 0001 	orreq.w	r0, r0, #1
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	42b4      	cmp	r4, r6
 80017c6:	bf08      	it	eq
 80017c8:	f040 0001 	orreq.w	r0, r0, #1
 80017cc:	3630      	adds	r6, #48	; 0x30
 80017ce:	42bc      	cmp	r4, r7
 80017d0:	bf08      	it	eq
 80017d2:	f040 0001 	orreq.w	r0, r0, #1
 80017d6:	3730      	adds	r7, #48	; 0x30
 80017d8:	42b4      	cmp	r4, r6
 80017da:	bf08      	it	eq
 80017dc:	f040 0001 	orreq.w	r0, r0, #1
 80017e0:	3630      	adds	r6, #48	; 0x30
 80017e2:	42bc      	cmp	r4, r7
 80017e4:	bf08      	it	eq
 80017e6:	f040 0001 	orreq.w	r0, r0, #1
 80017ea:	4f76      	ldr	r7, [pc, #472]	; (80019c4 <HAL_DMA_Start_IT+0x2bc>)
 80017ec:	42b4      	cmp	r4, r6
 80017ee:	bf08      	it	eq
 80017f0:	f040 0001 	orreq.w	r0, r0, #1
 80017f4:	4e74      	ldr	r6, [pc, #464]	; (80019c8 <HAL_DMA_Start_IT+0x2c0>)
 80017f6:	42bc      	cmp	r4, r7
 80017f8:	bf08      	it	eq
 80017fa:	f040 0001 	orreq.w	r0, r0, #1
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	42b4      	cmp	r4, r6
 8001802:	bf08      	it	eq
 8001804:	f040 0001 	orreq.w	r0, r0, #1
 8001808:	3628      	adds	r6, #40	; 0x28
 800180a:	42bc      	cmp	r4, r7
 800180c:	bf08      	it	eq
 800180e:	f040 0001 	orreq.w	r0, r0, #1
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	42b4      	cmp	r4, r6
 8001816:	bf08      	it	eq
 8001818:	f040 0001 	orreq.w	r0, r0, #1
 800181c:	3628      	adds	r6, #40	; 0x28
 800181e:	42bc      	cmp	r4, r7
 8001820:	bf08      	it	eq
 8001822:	f040 0001 	orreq.w	r0, r0, #1
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	42b4      	cmp	r4, r6
 800182a:	bf08      	it	eq
 800182c:	f040 0001 	orreq.w	r0, r0, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001830:	6dae      	ldr	r6, [r5, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001832:	42bc      	cmp	r4, r7
 8001834:	bf08      	it	eq
 8001836:	f040 0001 	orreq.w	r0, r0, #1
 800183a:	b910      	cbnz	r0, 8001842 <HAL_DMA_Start_IT+0x13a>
 800183c:	4863      	ldr	r0, [pc, #396]	; (80019cc <HAL_DMA_Start_IT+0x2c4>)
 800183e:	4284      	cmp	r4, r0
 8001840:	d108      	bne.n	8001854 <HAL_DMA_Start_IT+0x14c>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001842:	e9d5 0419 	ldrd	r0, r4, [r5, #100]	; 0x64
 8001846:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001848:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800184a:	b110      	cbz	r0, 8001852 <HAL_DMA_Start_IT+0x14a>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800184c:	e9d5 041c 	ldrd	r0, r4, [r5, #112]	; 0x70
 8001850:	6044      	str	r4, [r0, #4]
 8001852:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001854:	485a      	ldr	r0, [pc, #360]	; (80019c0 <HAL_DMA_Start_IT+0x2b8>)
 8001856:	f8df c160 	ldr.w	ip, [pc, #352]	; 80019b8 <HAL_DMA_Start_IT+0x2b0>
 800185a:	4f58      	ldr	r7, [pc, #352]	; (80019bc <HAL_DMA_Start_IT+0x2b4>)
 800185c:	4564      	cmp	r4, ip
 800185e:	bf18      	it	ne
 8001860:	4284      	cmpne	r4, r0
 8001862:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001866:	bf0c      	ite	eq
 8001868:	2001      	moveq	r0, #1
 800186a:	2000      	movne	r0, #0
 800186c:	42bc      	cmp	r4, r7
 800186e:	bf08      	it	eq
 8001870:	f040 0001 	orreq.w	r0, r0, #1
 8001874:	3730      	adds	r7, #48	; 0x30
 8001876:	4564      	cmp	r4, ip
 8001878:	bf08      	it	eq
 800187a:	f040 0001 	orreq.w	r0, r0, #1
 800187e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001882:	42bc      	cmp	r4, r7
 8001884:	bf08      	it	eq
 8001886:	f040 0001 	orreq.w	r0, r0, #1
 800188a:	3730      	adds	r7, #48	; 0x30
 800188c:	4564      	cmp	r4, ip
 800188e:	bf08      	it	eq
 8001890:	f040 0001 	orreq.w	r0, r0, #1
 8001894:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001898:	42bc      	cmp	r4, r7
 800189a:	bf08      	it	eq
 800189c:	f040 0001 	orreq.w	r0, r0, #1
 80018a0:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80018a4:	4564      	cmp	r4, ip
 80018a6:	bf08      	it	eq
 80018a8:	f040 0001 	orreq.w	r0, r0, #1
 80018ac:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 80018b0:	42bc      	cmp	r4, r7
 80018b2:	bf08      	it	eq
 80018b4:	f040 0001 	orreq.w	r0, r0, #1
 80018b8:	3730      	adds	r7, #48	; 0x30
 80018ba:	4564      	cmp	r4, ip
 80018bc:	bf08      	it	eq
 80018be:	f040 0001 	orreq.w	r0, r0, #1
 80018c2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80018c6:	42bc      	cmp	r4, r7
 80018c8:	bf08      	it	eq
 80018ca:	f040 0001 	orreq.w	r0, r0, #1
 80018ce:	3730      	adds	r7, #48	; 0x30
 80018d0:	4564      	cmp	r4, ip
 80018d2:	bf08      	it	eq
 80018d4:	f040 0001 	orreq.w	r0, r0, #1
 80018d8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80018dc:	42bc      	cmp	r4, r7
 80018de:	bf08      	it	eq
 80018e0:	f040 0001 	orreq.w	r0, r0, #1
 80018e4:	3730      	adds	r7, #48	; 0x30
 80018e6:	4564      	cmp	r4, ip
 80018e8:	bf08      	it	eq
 80018ea:	f040 0001 	orreq.w	r0, r0, #1
 80018ee:	42bc      	cmp	r4, r7
 80018f0:	bf08      	it	eq
 80018f2:	f040 0001 	orreq.w	r0, r0, #1
 80018f6:	b918      	cbnz	r0, 8001900 <HAL_DMA_Start_IT+0x1f8>
 80018f8:	4835      	ldr	r0, [pc, #212]	; (80019d0 <HAL_DMA_Start_IT+0x2c8>)
 80018fa:	4284      	cmp	r4, r0
 80018fc:	f040 8179 	bne.w	8001bf2 <HAL_DMA_Start_IT+0x4ea>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001900:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8001902:	203f      	movs	r0, #63	; 0x3f
 8001904:	f004 041f 	and.w	r4, r4, #31
 8001908:	40a0      	lsls	r0, r4
 800190a:	60b0      	str	r0, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800190c:	682c      	ldr	r4, [r5, #0]
 800190e:	6820      	ldr	r0, [r4, #0]
 8001910:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8001914:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001916:	6828      	ldr	r0, [r5, #0]
 8001918:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800191a:	68ab      	ldr	r3, [r5, #8]
 800191c:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800191e:	682b      	ldr	r3, [r5, #0]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001920:	f000 815f 	beq.w	8001be2 <HAL_DMA_Start_IT+0x4da>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001924:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001926:	682b      	ldr	r3, [r5, #0]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	682c      	ldr	r4, [r5, #0]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_DMA_Start_IT+0x2b8>)
 800192e:	4922      	ldr	r1, [pc, #136]	; (80019b8 <HAL_DMA_Start_IT+0x2b0>)
 8001930:	4a22      	ldr	r2, [pc, #136]	; (80019bc <HAL_DMA_Start_IT+0x2b4>)
 8001932:	428c      	cmp	r4, r1
 8001934:	bf18      	it	ne
 8001936:	429c      	cmpne	r4, r3
 8001938:	4826      	ldr	r0, [pc, #152]	; (80019d4 <HAL_DMA_Start_IT+0x2cc>)
 800193a:	f101 0148 	add.w	r1, r1, #72	; 0x48
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	4294      	cmp	r4, r2
 8001946:	bf08      	it	eq
 8001948:	f043 0301 	orreq.w	r3, r3, #1
 800194c:	3248      	adds	r2, #72	; 0x48
 800194e:	4284      	cmp	r4, r0
 8001950:	bf08      	it	eq
 8001952:	f043 0301 	orreq.w	r3, r3, #1
 8001956:	3048      	adds	r0, #72	; 0x48
 8001958:	428c      	cmp	r4, r1
 800195a:	bf08      	it	eq
 800195c:	f043 0301 	orreq.w	r3, r3, #1
 8001960:	3148      	adds	r1, #72	; 0x48
 8001962:	4294      	cmp	r4, r2
 8001964:	bf08      	it	eq
 8001966:	f043 0301 	orreq.w	r3, r3, #1
 800196a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800196e:	4284      	cmp	r4, r0
 8001970:	bf08      	it	eq
 8001972:	f043 0301 	orreq.w	r3, r3, #1
 8001976:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800197a:	428c      	cmp	r4, r1
 800197c:	bf08      	it	eq
 800197e:	f043 0301 	orreq.w	r3, r3, #1
 8001982:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001986:	4294      	cmp	r4, r2
 8001988:	bf08      	it	eq
 800198a:	f043 0301 	orreq.w	r3, r3, #1
 800198e:	3248      	adds	r2, #72	; 0x48
 8001990:	4284      	cmp	r4, r0
 8001992:	bf08      	it	eq
 8001994:	f043 0301 	orreq.w	r3, r3, #1
 8001998:	3048      	adds	r0, #72	; 0x48
 800199a:	428c      	cmp	r4, r1
 800199c:	bf08      	it	eq
 800199e:	f043 0301 	orreq.w	r3, r3, #1
 80019a2:	3148      	adds	r1, #72	; 0x48
 80019a4:	4294      	cmp	r4, r2
 80019a6:	bf08      	it	eq
 80019a8:	f043 0301 	orreq.w	r3, r3, #1
 80019ac:	3248      	adds	r2, #72	; 0x48
 80019ae:	4284      	cmp	r4, r0
 80019b0:	bf08      	it	eq
 80019b2:	f043 0301 	orreq.w	r3, r3, #1
 80019b6:	e00f      	b.n	80019d8 <HAL_DMA_Start_IT+0x2d0>
 80019b8:	40020028 	.word	0x40020028
 80019bc:	40020040 	.word	0x40020040
 80019c0:	40020010 	.word	0x40020010
 80019c4:	58025408 	.word	0x58025408
 80019c8:	5802541c 	.word	0x5802541c
 80019cc:	58025494 	.word	0x58025494
 80019d0:	400204b8 	.word	0x400204b8
 80019d4:	40020058 	.word	0x40020058
 80019d8:	428c      	cmp	r4, r1
 80019da:	bf08      	it	eq
 80019dc:	f043 0301 	orreq.w	r3, r3, #1
 80019e0:	4294      	cmp	r4, r2
 80019e2:	bf08      	it	eq
 80019e4:	f043 0301 	orreq.w	r3, r3, #1
 80019e8:	b91b      	cbnz	r3, 80019f2 <HAL_DMA_Start_IT+0x2ea>
 80019ea:	4b9c      	ldr	r3, [pc, #624]	; (8001c5c <HAL_DMA_Start_IT+0x554>)
 80019ec:	429c      	cmp	r4, r3
 80019ee:	f040 8149 	bne.w	8001c84 <HAL_DMA_Start_IT+0x57c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	f023 031e 	bic.w	r3, r3, #30
 80019f8:	f043 0316 	orr.w	r3, r3, #22
 80019fc:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80019fe:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001a00:	b123      	cbz	r3, 8001a0c <HAL_DMA_Start_IT+0x304>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001a02:	682a      	ldr	r2, [r5, #0]
 8001a04:	6813      	ldr	r3, [r2, #0]
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a0c:	682c      	ldr	r4, [r5, #0]
 8001a0e:	4b94      	ldr	r3, [pc, #592]	; (8001c60 <HAL_DMA_Start_IT+0x558>)
 8001a10:	4a94      	ldr	r2, [pc, #592]	; (8001c64 <HAL_DMA_Start_IT+0x55c>)
 8001a12:	4895      	ldr	r0, [pc, #596]	; (8001c68 <HAL_DMA_Start_IT+0x560>)
 8001a14:	4294      	cmp	r4, r2
 8001a16:	bf18      	it	ne
 8001a18:	429c      	cmpne	r4, r3
 8001a1a:	4994      	ldr	r1, [pc, #592]	; (8001c6c <HAL_DMA_Start_IT+0x564>)
 8001a1c:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	4284      	cmp	r4, r0
 8001a28:	bf08      	it	eq
 8001a2a:	f043 0301 	orreq.w	r3, r3, #1
 8001a2e:	3048      	adds	r0, #72	; 0x48
 8001a30:	428c      	cmp	r4, r1
 8001a32:	bf08      	it	eq
 8001a34:	f043 0301 	orreq.w	r3, r3, #1
 8001a38:	3148      	adds	r1, #72	; 0x48
 8001a3a:	4294      	cmp	r4, r2
 8001a3c:	bf08      	it	eq
 8001a3e:	f043 0301 	orreq.w	r3, r3, #1
 8001a42:	3248      	adds	r2, #72	; 0x48
 8001a44:	4284      	cmp	r4, r0
 8001a46:	bf08      	it	eq
 8001a48:	f043 0301 	orreq.w	r3, r3, #1
 8001a4c:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001a50:	428c      	cmp	r4, r1
 8001a52:	bf08      	it	eq
 8001a54:	f043 0301 	orreq.w	r3, r3, #1
 8001a58:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001a5c:	4294      	cmp	r4, r2
 8001a5e:	bf08      	it	eq
 8001a60:	f043 0301 	orreq.w	r3, r3, #1
 8001a64:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001a68:	4284      	cmp	r4, r0
 8001a6a:	bf08      	it	eq
 8001a6c:	f043 0301 	orreq.w	r3, r3, #1
 8001a70:	3048      	adds	r0, #72	; 0x48
 8001a72:	428c      	cmp	r4, r1
 8001a74:	bf08      	it	eq
 8001a76:	f043 0301 	orreq.w	r3, r3, #1
 8001a7a:	3148      	adds	r1, #72	; 0x48
 8001a7c:	4294      	cmp	r4, r2
 8001a7e:	bf08      	it	eq
 8001a80:	f043 0301 	orreq.w	r3, r3, #1
 8001a84:	3248      	adds	r2, #72	; 0x48
 8001a86:	4284      	cmp	r4, r0
 8001a88:	bf08      	it	eq
 8001a8a:	f043 0301 	orreq.w	r3, r3, #1
 8001a8e:	3048      	adds	r0, #72	; 0x48
 8001a90:	428c      	cmp	r4, r1
 8001a92:	bf08      	it	eq
 8001a94:	f043 0301 	orreq.w	r3, r3, #1
 8001a98:	3148      	adds	r1, #72	; 0x48
 8001a9a:	4294      	cmp	r4, r2
 8001a9c:	bf08      	it	eq
 8001a9e:	f043 0301 	orreq.w	r3, r3, #1
 8001aa2:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8001aa6:	4284      	cmp	r4, r0
 8001aa8:	bf08      	it	eq
 8001aaa:	f043 0301 	orreq.w	r3, r3, #1
 8001aae:	f502 429f 	add.w	r2, r2, #20352	; 0x4f80
 8001ab2:	486f      	ldr	r0, [pc, #444]	; (8001c70 <HAL_DMA_Start_IT+0x568>)
 8001ab4:	428c      	cmp	r4, r1
 8001ab6:	bf08      	it	eq
 8001ab8:	f043 0301 	orreq.w	r3, r3, #1
 8001abc:	496d      	ldr	r1, [pc, #436]	; (8001c74 <HAL_DMA_Start_IT+0x56c>)
 8001abe:	4294      	cmp	r4, r2
 8001ac0:	bf08      	it	eq
 8001ac2:	f043 0301 	orreq.w	r3, r3, #1
 8001ac6:	323c      	adds	r2, #60	; 0x3c
 8001ac8:	4284      	cmp	r4, r0
 8001aca:	bf08      	it	eq
 8001acc:	f043 0301 	orreq.w	r3, r3, #1
 8001ad0:	303c      	adds	r0, #60	; 0x3c
 8001ad2:	428c      	cmp	r4, r1
 8001ad4:	bf08      	it	eq
 8001ad6:	f043 0301 	orreq.w	r3, r3, #1
 8001ada:	313c      	adds	r1, #60	; 0x3c
 8001adc:	4294      	cmp	r4, r2
 8001ade:	bf08      	it	eq
 8001ae0:	f043 0301 	orreq.w	r3, r3, #1
 8001ae4:	323c      	adds	r2, #60	; 0x3c
 8001ae6:	4284      	cmp	r4, r0
 8001ae8:	bf08      	it	eq
 8001aea:	f043 0301 	orreq.w	r3, r3, #1
 8001aee:	428c      	cmp	r4, r1
 8001af0:	bf08      	it	eq
 8001af2:	f043 0301 	orreq.w	r3, r3, #1
 8001af6:	4294      	cmp	r4, r2
 8001af8:	bf08      	it	eq
 8001afa:	f043 0301 	orreq.w	r3, r3, #1
 8001afe:	b913      	cbnz	r3, 8001b06 <HAL_DMA_Start_IT+0x3fe>
 8001b00:	4b5d      	ldr	r3, [pc, #372]	; (8001c78 <HAL_DMA_Start_IT+0x570>)
 8001b02:	429c      	cmp	r4, r3
 8001b04:	d10e      	bne.n	8001b24 <HAL_DMA_Start_IT+0x41c>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b06:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	03d2      	lsls	r2, r2, #15
 8001b0c:	d503      	bpl.n	8001b16 <HAL_DMA_Start_IT+0x40e>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b14:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8001b16:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8001b18:	b11b      	cbz	r3, 8001b22 <HAL_DMA_Start_IT+0x41a>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	682c      	ldr	r4, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b24:	4b4e      	ldr	r3, [pc, #312]	; (8001c60 <HAL_DMA_Start_IT+0x558>)
 8001b26:	494f      	ldr	r1, [pc, #316]	; (8001c64 <HAL_DMA_Start_IT+0x55c>)
 8001b28:	4a4f      	ldr	r2, [pc, #316]	; (8001c68 <HAL_DMA_Start_IT+0x560>)
 8001b2a:	428c      	cmp	r4, r1
 8001b2c:	bf18      	it	ne
 8001b2e:	429c      	cmpne	r4, r3
 8001b30:	4d4e      	ldr	r5, [pc, #312]	; (8001c6c <HAL_DMA_Start_IT+0x564>)
 8001b32:	4852      	ldr	r0, [pc, #328]	; (8001c7c <HAL_DMA_Start_IT+0x574>)
 8001b34:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8001b38:	bf0c      	ite	eq
 8001b3a:	2301      	moveq	r3, #1
 8001b3c:	2300      	movne	r3, #0
 8001b3e:	4294      	cmp	r4, r2
 8001b40:	bf08      	it	eq
 8001b42:	f043 0301 	orreq.w	r3, r3, #1
 8001b46:	3260      	adds	r2, #96	; 0x60
 8001b48:	42ac      	cmp	r4, r5
 8001b4a:	bf08      	it	eq
 8001b4c:	f043 0301 	orreq.w	r3, r3, #1
 8001b50:	3560      	adds	r5, #96	; 0x60
 8001b52:	4284      	cmp	r4, r0
 8001b54:	bf08      	it	eq
 8001b56:	f043 0301 	orreq.w	r3, r3, #1
 8001b5a:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8001b5e:	428c      	cmp	r4, r1
 8001b60:	bf08      	it	eq
 8001b62:	f043 0301 	orreq.w	r3, r3, #1
 8001b66:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 8001b6a:	4294      	cmp	r4, r2
 8001b6c:	bf08      	it	eq
 8001b6e:	f043 0301 	orreq.w	r3, r3, #1
 8001b72:	f502 7268 	add.w	r2, r2, #928	; 0x3a0
 8001b76:	42ac      	cmp	r4, r5
 8001b78:	bf08      	it	eq
 8001b7a:	f043 0301 	orreq.w	r3, r3, #1
 8001b7e:	f505 7568 	add.w	r5, r5, #928	; 0x3a0
 8001b82:	4284      	cmp	r4, r0
 8001b84:	bf08      	it	eq
 8001b86:	f043 0301 	orreq.w	r3, r3, #1
 8001b8a:	3060      	adds	r0, #96	; 0x60
 8001b8c:	428c      	cmp	r4, r1
 8001b8e:	bf08      	it	eq
 8001b90:	f043 0301 	orreq.w	r3, r3, #1
 8001b94:	3160      	adds	r1, #96	; 0x60
 8001b96:	4294      	cmp	r4, r2
 8001b98:	bf08      	it	eq
 8001b9a:	f043 0301 	orreq.w	r3, r3, #1
 8001b9e:	3260      	adds	r2, #96	; 0x60
 8001ba0:	42ac      	cmp	r4, r5
 8001ba2:	bf08      	it	eq
 8001ba4:	f043 0301 	orreq.w	r3, r3, #1
 8001ba8:	4284      	cmp	r4, r0
 8001baa:	bf08      	it	eq
 8001bac:	f043 0301 	orreq.w	r3, r3, #1
 8001bb0:	428c      	cmp	r4, r1
 8001bb2:	bf08      	it	eq
 8001bb4:	f043 0301 	orreq.w	r3, r3, #1
 8001bb8:	4294      	cmp	r4, r2
 8001bba:	bf08      	it	eq
 8001bbc:	f043 0301 	orreq.w	r3, r3, #1
 8001bc0:	b933      	cbnz	r3, 8001bd0 <HAL_DMA_Start_IT+0x4c8>
 8001bc2:	3048      	adds	r0, #72	; 0x48
 8001bc4:	1a20      	subs	r0, r4, r0
 8001bc6:	fab0 f080 	clz	r0, r0
 8001bca:	0940      	lsrs	r0, r0, #5
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d040      	beq.n	8001c52 <HAL_DMA_Start_IT+0x54a>
 8001bd0:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6023      	str	r3, [r4, #0]
}
 8001bda:	bcf0      	pop	{r4, r5, r6, r7}
 8001bdc:	4770      	bx	lr
    return HAL_ERROR;
 8001bde:	2001      	movs	r0, #1
}
 8001be0:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001be2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	60d9      	str	r1, [r3, #12]
 8001be8:	682c      	ldr	r4, [r5, #0]
 8001bea:	e69f      	b.n	800192c <HAL_DMA_Start_IT+0x224>
  __HAL_LOCK(hdma);
 8001bec:	2002      	movs	r0, #2
}
 8001bee:	bcf0      	pop	{r4, r5, r6, r7}
 8001bf0:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001bf2:	4823      	ldr	r0, [pc, #140]	; (8001c80 <HAL_DMA_Start_IT+0x578>)
 8001bf4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8001c70 <HAL_DMA_Start_IT+0x568>
 8001bf8:	4f1e      	ldr	r7, [pc, #120]	; (8001c74 <HAL_DMA_Start_IT+0x56c>)
 8001bfa:	4564      	cmp	r4, ip
 8001bfc:	bf18      	it	ne
 8001bfe:	4284      	cmpne	r4, r0
 8001c00:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001c04:	bf0c      	ite	eq
 8001c06:	2001      	moveq	r0, #1
 8001c08:	2000      	movne	r0, #0
 8001c0a:	42bc      	cmp	r4, r7
 8001c0c:	bf08      	it	eq
 8001c0e:	f040 0001 	orreq.w	r0, r0, #1
 8001c12:	3728      	adds	r7, #40	; 0x28
 8001c14:	4564      	cmp	r4, ip
 8001c16:	bf08      	it	eq
 8001c18:	f040 0001 	orreq.w	r0, r0, #1
 8001c1c:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001c20:	42bc      	cmp	r4, r7
 8001c22:	bf08      	it	eq
 8001c24:	f040 0001 	orreq.w	r0, r0, #1
 8001c28:	3728      	adds	r7, #40	; 0x28
 8001c2a:	4564      	cmp	r4, ip
 8001c2c:	bf08      	it	eq
 8001c2e:	f040 0001 	orreq.w	r0, r0, #1
 8001c32:	42bc      	cmp	r4, r7
 8001c34:	bf08      	it	eq
 8001c36:	f040 0001 	orreq.w	r0, r0, #1
 8001c3a:	b918      	cbnz	r0, 8001c44 <HAL_DMA_Start_IT+0x53c>
 8001c3c:	480e      	ldr	r0, [pc, #56]	; (8001c78 <HAL_DMA_Start_IT+0x570>)
 8001c3e:	4284      	cmp	r4, r0
 8001c40:	f47f ae74 	bne.w	800192c <HAL_DMA_Start_IT+0x224>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001c44:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8001c46:	2001      	movs	r0, #1
 8001c48:	f004 041f 	and.w	r4, r4, #31
 8001c4c:	40a0      	lsls	r0, r4
 8001c4e:	6070      	str	r0, [r6, #4]
 8001c50:	e661      	b.n	8001916 <HAL_DMA_Start_IT+0x20e>
    __HAL_DMA_ENABLE(hdma);
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6023      	str	r3, [r4, #0]
 8001c5a:	e56c      	b.n	8001736 <HAL_DMA_Start_IT+0x2e>
 8001c5c:	400204b8 	.word	0x400204b8
 8001c60:	40020010 	.word	0x40020010
 8001c64:	40020028 	.word	0x40020028
 8001c68:	40020040 	.word	0x40020040
 8001c6c:	40020058 	.word	0x40020058
 8001c70:	5802541c 	.word	0x5802541c
 8001c74:	58025430 	.word	0x58025430
 8001c78:	58025494 	.word	0x58025494
 8001c7c:	40020070 	.word	0x40020070
 8001c80:	58025408 	.word	0x58025408
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	f023 030e 	bic.w	r3, r3, #14
 8001c8a:	f043 030a 	orr.w	r3, r3, #10
 8001c8e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001c90:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f43f aeba 	beq.w	8001a0c <HAL_DMA_Start_IT+0x304>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001c98:	682a      	ldr	r2, [r5, #0]
 8001c9a:	6813      	ldr	r3, [r2, #0]
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e6b3      	b.n	8001a0c <HAL_DMA_Start_IT+0x304>

08001ca4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d06a      	beq.n	8001d7e <HAL_DMA_Abort_IT+0xda>
{
 8001ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cac:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2a02      	cmp	r2, #2
 8001cb4:	d004      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb6:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8001cb8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001cbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cc0:	6802      	ldr	r2, [r0, #0]
 8001cc2:	4986      	ldr	r1, [pc, #536]	; (8001edc <HAL_DMA_Abort_IT+0x238>)
 8001cc4:	428a      	cmp	r2, r1
 8001cc6:	d050      	beq.n	8001d6a <HAL_DMA_Abort_IT+0xc6>
 8001cc8:	4885      	ldr	r0, [pc, #532]	; (8001ee0 <HAL_DMA_Abort_IT+0x23c>)
 8001cca:	4282      	cmp	r2, r0
 8001ccc:	d04d      	beq.n	8001d6a <HAL_DMA_Abort_IT+0xc6>
 8001cce:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8001ef8 <HAL_DMA_Abort_IT+0x254>
 8001cd2:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8001ef4 <HAL_DMA_Abort_IT+0x250>
 8001cd6:	f8df e230 	ldr.w	lr, [pc, #560]	; 8001f08 <HAL_DMA_Abort_IT+0x264>
 8001cda:	454a      	cmp	r2, r9
 8001cdc:	bf18      	it	ne
 8001cde:	4542      	cmpne	r2, r8
 8001ce0:	f8df c228 	ldr.w	ip, [pc, #552]	; 8001f0c <HAL_DMA_Abort_IT+0x268>
 8001ce4:	4f7f      	ldr	r7, [pc, #508]	; (8001ee4 <HAL_DMA_Abort_IT+0x240>)
 8001ce6:	bf0c      	ite	eq
 8001ce8:	f04f 0a01 	moveq.w	sl, #1
 8001cec:	f04f 0a00 	movne.w	sl, #0
 8001cf0:	4c7d      	ldr	r4, [pc, #500]	; (8001ee8 <HAL_DMA_Abort_IT+0x244>)
 8001cf2:	4572      	cmp	r2, lr
 8001cf4:	bf08      	it	eq
 8001cf6:	f04a 0a01 	orreq.w	sl, sl, #1
 8001cfa:	f8df b214 	ldr.w	fp, [pc, #532]	; 8001f10 <HAL_DMA_Abort_IT+0x26c>
 8001cfe:	4e7b      	ldr	r6, [pc, #492]	; (8001eec <HAL_DMA_Abort_IT+0x248>)
 8001d00:	4562      	cmp	r2, ip
 8001d02:	bf08      	it	eq
 8001d04:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d08:	4d79      	ldr	r5, [pc, #484]	; (8001ef0 <HAL_DMA_Abort_IT+0x24c>)
 8001d0a:	42ba      	cmp	r2, r7
 8001d0c:	bf08      	it	eq
 8001d0e:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d12:	42a2      	cmp	r2, r4
 8001d14:	bf08      	it	eq
 8001d16:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d1a:	f504 7456 	add.w	r4, r4, #856	; 0x358
 8001d1e:	42a2      	cmp	r2, r4
 8001d20:	bf08      	it	eq
 8001d22:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d26:	3418      	adds	r4, #24
 8001d28:	42a2      	cmp	r2, r4
 8001d2a:	bf08      	it	eq
 8001d2c:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d30:	3418      	adds	r4, #24
 8001d32:	42a2      	cmp	r2, r4
 8001d34:	bf08      	it	eq
 8001d36:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d3a:	3460      	adds	r4, #96	; 0x60
 8001d3c:	455a      	cmp	r2, fp
 8001d3e:	bf08      	it	eq
 8001d40:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d44:	42b2      	cmp	r2, r6
 8001d46:	bf08      	it	eq
 8001d48:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d4c:	42aa      	cmp	r2, r5
 8001d4e:	bf08      	it	eq
 8001d50:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d54:	42a2      	cmp	r2, r4
 8001d56:	bf08      	it	eq
 8001d58:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d5c:	f1ba 0f00 	cmp.w	sl, #0
 8001d60:	d103      	bne.n	8001d6a <HAL_DMA_Abort_IT+0xc6>
 8001d62:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8001f14 <HAL_DMA_Abort_IT+0x270>
 8001d66:	4552      	cmp	r2, sl
 8001d68:	d10b      	bne.n	8001d82 <HAL_DMA_Abort_IT+0xde>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d6a:	2104      	movs	r1, #4
  return HAL_OK;
 8001d6c:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d6e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001d72:	6813      	ldr	r3, [r2, #0]
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6013      	str	r3, [r2, #0]
}
 8001d7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8001d7e:	2001      	movs	r0, #1
}
 8001d80:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d82:	6814      	ldr	r4, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d84:	4856      	ldr	r0, [pc, #344]	; (8001ee0 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d86:	f024 040e 	bic.w	r4, r4, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d8a:	4d5a      	ldr	r5, [pc, #360]	; (8001ef4 <HAL_DMA_Abort_IT+0x250>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d8c:	6014      	str	r4, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 8001d8e:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d90:	4c59      	ldr	r4, [pc, #356]	; (8001ef8 <HAL_DMA_Abort_IT+0x254>)
      __HAL_DMA_DISABLE(hdma);
 8001d92:	6811      	ldr	r1, [r2, #0]
 8001d94:	f021 0101 	bic.w	r1, r1, #1
 8001d98:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d9a:	4a50      	ldr	r2, [pc, #320]	; (8001edc <HAL_DMA_Abort_IT+0x238>)
 8001d9c:	6819      	ldr	r1, [r3, #0]
 8001d9e:	4281      	cmp	r1, r0
 8001da0:	bf18      	it	ne
 8001da2:	4291      	cmpne	r1, r2
 8001da4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001da8:	bf0c      	ite	eq
 8001daa:	2201      	moveq	r2, #1
 8001dac:	2200      	movne	r2, #0
 8001dae:	42a9      	cmp	r1, r5
 8001db0:	bf08      	it	eq
 8001db2:	f042 0201 	orreq.w	r2, r2, #1
 8001db6:	3548      	adds	r5, #72	; 0x48
 8001db8:	42a1      	cmp	r1, r4
 8001dba:	bf08      	it	eq
 8001dbc:	f042 0201 	orreq.w	r2, r2, #1
 8001dc0:	3448      	adds	r4, #72	; 0x48
 8001dc2:	4281      	cmp	r1, r0
 8001dc4:	bf08      	it	eq
 8001dc6:	f042 0201 	orreq.w	r2, r2, #1
 8001dca:	3048      	adds	r0, #72	; 0x48
 8001dcc:	42a9      	cmp	r1, r5
 8001dce:	bf08      	it	eq
 8001dd0:	f042 0201 	orreq.w	r2, r2, #1
 8001dd4:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8001dd8:	42a1      	cmp	r1, r4
 8001dda:	bf08      	it	eq
 8001ddc:	f042 0201 	orreq.w	r2, r2, #1
 8001de0:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8001de4:	4281      	cmp	r1, r0
 8001de6:	bf08      	it	eq
 8001de8:	f042 0201 	orreq.w	r2, r2, #1
 8001dec:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001df0:	42a9      	cmp	r1, r5
 8001df2:	bf08      	it	eq
 8001df4:	f042 0201 	orreq.w	r2, r2, #1
 8001df8:	3548      	adds	r5, #72	; 0x48
 8001dfa:	42a1      	cmp	r1, r4
 8001dfc:	bf08      	it	eq
 8001dfe:	f042 0201 	orreq.w	r2, r2, #1
 8001e02:	3448      	adds	r4, #72	; 0x48
 8001e04:	4281      	cmp	r1, r0
 8001e06:	bf08      	it	eq
 8001e08:	f042 0201 	orreq.w	r2, r2, #1
 8001e0c:	3048      	adds	r0, #72	; 0x48
 8001e0e:	42a9      	cmp	r1, r5
 8001e10:	bf08      	it	eq
 8001e12:	f042 0201 	orreq.w	r2, r2, #1
 8001e16:	3548      	adds	r5, #72	; 0x48
 8001e18:	42a1      	cmp	r1, r4
 8001e1a:	bf08      	it	eq
 8001e1c:	f042 0201 	orreq.w	r2, r2, #1
 8001e20:	3448      	adds	r4, #72	; 0x48
 8001e22:	4281      	cmp	r1, r0
 8001e24:	bf08      	it	eq
 8001e26:	f042 0201 	orreq.w	r2, r2, #1
 8001e2a:	f100 50c0 	add.w	r0, r0, #402653184	; 0x18000000
 8001e2e:	42a9      	cmp	r1, r5
 8001e30:	bf08      	it	eq
 8001e32:	f042 0201 	orreq.w	r2, r2, #1
 8001e36:	f500 409f 	add.w	r0, r0, #20352	; 0x4f80
 8001e3a:	4d30      	ldr	r5, [pc, #192]	; (8001efc <HAL_DMA_Abort_IT+0x258>)
 8001e3c:	42a1      	cmp	r1, r4
 8001e3e:	bf08      	it	eq
 8001e40:	f042 0201 	orreq.w	r2, r2, #1
 8001e44:	4c2e      	ldr	r4, [pc, #184]	; (8001f00 <HAL_DMA_Abort_IT+0x25c>)
 8001e46:	4281      	cmp	r1, r0
 8001e48:	bf08      	it	eq
 8001e4a:	f042 0201 	orreq.w	r2, r2, #1
 8001e4e:	303c      	adds	r0, #60	; 0x3c
 8001e50:	42a9      	cmp	r1, r5
 8001e52:	bf08      	it	eq
 8001e54:	f042 0201 	orreq.w	r2, r2, #1
 8001e58:	353c      	adds	r5, #60	; 0x3c
 8001e5a:	42a1      	cmp	r1, r4
 8001e5c:	bf08      	it	eq
 8001e5e:	f042 0201 	orreq.w	r2, r2, #1
 8001e62:	343c      	adds	r4, #60	; 0x3c
 8001e64:	4281      	cmp	r1, r0
 8001e66:	bf08      	it	eq
 8001e68:	f042 0201 	orreq.w	r2, r2, #1
 8001e6c:	303c      	adds	r0, #60	; 0x3c
 8001e6e:	42a9      	cmp	r1, r5
 8001e70:	bf08      	it	eq
 8001e72:	f042 0201 	orreq.w	r2, r2, #1
 8001e76:	42a1      	cmp	r1, r4
 8001e78:	bf08      	it	eq
 8001e7a:	f042 0201 	orreq.w	r2, r2, #1
 8001e7e:	4281      	cmp	r1, r0
 8001e80:	bf08      	it	eq
 8001e82:	f042 0201 	orreq.w	r2, r2, #1
 8001e86:	b912      	cbnz	r2, 8001e8e <HAL_DMA_Abort_IT+0x1ea>
 8001e88:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <HAL_DMA_Abort_IT+0x260>)
 8001e8a:	4291      	cmp	r1, r2
 8001e8c:	d117      	bne.n	8001ebe <HAL_DMA_Abort_IT+0x21a>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e8e:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e90:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e92:	6801      	ldr	r1, [r0, #0]
 8001e94:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001e98:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e9e:	f001 011f 	and.w	r1, r1, #31
 8001ea2:	408a      	lsls	r2, r1
 8001ea4:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ea6:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8001eaa:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8001eac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001eae:	b132      	cbz	r2, 8001ebe <HAL_DMA_Abort_IT+0x21a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eb0:	6811      	ldr	r1, [r2, #0]
 8001eb2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001eb6:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eb8:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8001ebc:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 8001ebe:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001ec0:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8001ec2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8001ec4:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001ec8:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8001ecc:	b11a      	cbz	r2, 8001ed6 <HAL_DMA_Abort_IT+0x232>
 8001ece:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8001ed0:	4790      	blx	r2
  return HAL_OK;
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	e6f2      	b.n	8001cbc <HAL_DMA_Abort_IT+0x18>
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	e6f0      	b.n	8001cbc <HAL_DMA_Abort_IT+0x18>
 8001eda:	bf00      	nop
 8001edc:	40020010 	.word	0x40020010
 8001ee0:	40020028 	.word	0x40020028
 8001ee4:	400200a0 	.word	0x400200a0
 8001ee8:	400200b8 	.word	0x400200b8
 8001eec:	40020470 	.word	0x40020470
 8001ef0:	40020488 	.word	0x40020488
 8001ef4:	40020040 	.word	0x40020040
 8001ef8:	40020058 	.word	0x40020058
 8001efc:	5802541c 	.word	0x5802541c
 8001f00:	58025430 	.word	0x58025430
 8001f04:	58025494 	.word	0x58025494
 8001f08:	40020070 	.word	0x40020070
 8001f0c:	40020088 	.word	0x40020088
 8001f10:	40020458 	.word	0x40020458
 8001f14:	400204b8 	.word	0x400204b8

08001f18 <HAL_DMA_IRQHandler>:
{
 8001f18:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f1a:	4ba5      	ldr	r3, [pc, #660]	; (80021b0 <HAL_DMA_IRQHandler+0x298>)
{
 8001f1c:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f1e:	6804      	ldr	r4, [r0, #0]
  __IO uint32_t count = 0U;
 8001f20:	2100      	movs	r1, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f22:	4aa4      	ldr	r2, [pc, #656]	; (80021b4 <HAL_DMA_IRQHandler+0x29c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f24:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f26:	429c      	cmp	r4, r3
  __IO uint32_t count = 0U;
 8001f28:	9101      	str	r1, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f2a:	6816      	ldr	r6, [r2, #0]
  tmpisr_dma  = regs_dma->ISR;
 8001f2c:	682f      	ldr	r7, [r5, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8001f2e:	682a      	ldr	r2, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f30:	d04d      	beq.n	8001fce <HAL_DMA_IRQHandler+0xb6>
 8001f32:	3318      	adds	r3, #24
 8001f34:	429c      	cmp	r4, r3
 8001f36:	d04a      	beq.n	8001fce <HAL_DMA_IRQHandler+0xb6>
 8001f38:	3330      	adds	r3, #48	; 0x30
 8001f3a:	f8df c284 	ldr.w	ip, [pc, #644]	; 80021c0 <HAL_DMA_IRQHandler+0x2a8>
 8001f3e:	499e      	ldr	r1, [pc, #632]	; (80021b8 <HAL_DMA_IRQHandler+0x2a0>)
 8001f40:	4564      	cmp	r4, ip
 8001f42:	bf18      	it	ne
 8001f44:	429c      	cmpne	r4, r3
 8001f46:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	428c      	cmp	r4, r1
 8001f52:	bf08      	it	eq
 8001f54:	f043 0301 	orreq.w	r3, r3, #1
 8001f58:	3130      	adds	r1, #48	; 0x30
 8001f5a:	4564      	cmp	r4, ip
 8001f5c:	bf08      	it	eq
 8001f5e:	f043 0301 	orreq.w	r3, r3, #1
 8001f62:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001f66:	428c      	cmp	r4, r1
 8001f68:	bf08      	it	eq
 8001f6a:	f043 0301 	orreq.w	r3, r3, #1
 8001f6e:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8001f72:	4564      	cmp	r4, ip
 8001f74:	bf08      	it	eq
 8001f76:	f043 0301 	orreq.w	r3, r3, #1
 8001f7a:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8001f7e:	428c      	cmp	r4, r1
 8001f80:	bf08      	it	eq
 8001f82:	f043 0301 	orreq.w	r3, r3, #1
 8001f86:	3130      	adds	r1, #48	; 0x30
 8001f88:	4564      	cmp	r4, ip
 8001f8a:	bf08      	it	eq
 8001f8c:	f043 0301 	orreq.w	r3, r3, #1
 8001f90:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001f94:	428c      	cmp	r4, r1
 8001f96:	bf08      	it	eq
 8001f98:	f043 0301 	orreq.w	r3, r3, #1
 8001f9c:	3130      	adds	r1, #48	; 0x30
 8001f9e:	4564      	cmp	r4, ip
 8001fa0:	bf08      	it	eq
 8001fa2:	f043 0301 	orreq.w	r3, r3, #1
 8001fa6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001faa:	428c      	cmp	r4, r1
 8001fac:	bf08      	it	eq
 8001fae:	f043 0301 	orreq.w	r3, r3, #1
 8001fb2:	3130      	adds	r1, #48	; 0x30
 8001fb4:	4564      	cmp	r4, ip
 8001fb6:	bf08      	it	eq
 8001fb8:	f043 0301 	orreq.w	r3, r3, #1
 8001fbc:	428c      	cmp	r4, r1
 8001fbe:	bf08      	it	eq
 8001fc0:	f043 0301 	orreq.w	r3, r3, #1
 8001fc4:	b91b      	cbnz	r3, 8001fce <HAL_DMA_IRQHandler+0xb6>
 8001fc6:	4b7d      	ldr	r3, [pc, #500]	; (80021bc <HAL_DMA_IRQHandler+0x2a4>)
 8001fc8:	429c      	cmp	r4, r3
 8001fca:	f040 821e 	bne.w	800240a <HAL_DMA_IRQHandler+0x4f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fce:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	f001 021f 	and.w	r2, r1, #31
 8001fd6:	4093      	lsls	r3, r2
 8001fd8:	423b      	tst	r3, r7
 8001fda:	f040 81fb 	bne.w	80023d4 <HAL_DMA_IRQHandler+0x4bc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fde:	fa27 f302 	lsr.w	r3, r7, r2
 8001fe2:	07dc      	lsls	r4, r3, #31
 8001fe4:	d563      	bpl.n	80020ae <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001fe6:	6801      	ldr	r1, [r0, #0]
 8001fe8:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <HAL_DMA_IRQHandler+0x298>)
 8001fea:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80021c4 <HAL_DMA_IRQHandler+0x2ac>
 8001fee:	4c74      	ldr	r4, [pc, #464]	; (80021c0 <HAL_DMA_IRQHandler+0x2a8>)
 8001ff0:	4561      	cmp	r1, ip
 8001ff2:	bf18      	it	ne
 8001ff4:	4299      	cmpne	r1, r3
 8001ff6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	42a1      	cmp	r1, r4
 8002002:	bf08      	it	eq
 8002004:	f043 0301 	orreq.w	r3, r3, #1
 8002008:	3430      	adds	r4, #48	; 0x30
 800200a:	4561      	cmp	r1, ip
 800200c:	bf08      	it	eq
 800200e:	f043 0301 	orreq.w	r3, r3, #1
 8002012:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002016:	42a1      	cmp	r1, r4
 8002018:	bf08      	it	eq
 800201a:	f043 0301 	orreq.w	r3, r3, #1
 800201e:	3430      	adds	r4, #48	; 0x30
 8002020:	4561      	cmp	r1, ip
 8002022:	bf08      	it	eq
 8002024:	f043 0301 	orreq.w	r3, r3, #1
 8002028:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800202c:	42a1      	cmp	r1, r4
 800202e:	bf08      	it	eq
 8002030:	f043 0301 	orreq.w	r3, r3, #1
 8002034:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8002038:	4561      	cmp	r1, ip
 800203a:	bf08      	it	eq
 800203c:	f043 0301 	orreq.w	r3, r3, #1
 8002040:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8002044:	42a1      	cmp	r1, r4
 8002046:	bf08      	it	eq
 8002048:	f043 0301 	orreq.w	r3, r3, #1
 800204c:	3430      	adds	r4, #48	; 0x30
 800204e:	4561      	cmp	r1, ip
 8002050:	bf08      	it	eq
 8002052:	f043 0301 	orreq.w	r3, r3, #1
 8002056:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800205a:	42a1      	cmp	r1, r4
 800205c:	bf08      	it	eq
 800205e:	f043 0301 	orreq.w	r3, r3, #1
 8002062:	3430      	adds	r4, #48	; 0x30
 8002064:	4561      	cmp	r1, ip
 8002066:	bf08      	it	eq
 8002068:	f043 0301 	orreq.w	r3, r3, #1
 800206c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002070:	42a1      	cmp	r1, r4
 8002072:	bf08      	it	eq
 8002074:	f043 0301 	orreq.w	r3, r3, #1
 8002078:	3430      	adds	r4, #48	; 0x30
 800207a:	4561      	cmp	r1, ip
 800207c:	bf08      	it	eq
 800207e:	f043 0301 	orreq.w	r3, r3, #1
 8002082:	42a1      	cmp	r1, r4
 8002084:	bf08      	it	eq
 8002086:	f043 0301 	orreq.w	r3, r3, #1
 800208a:	b91b      	cbnz	r3, 8002094 <HAL_DMA_IRQHandler+0x17c>
 800208c:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <HAL_DMA_IRQHandler+0x2a4>)
 800208e:	4299      	cmp	r1, r3
 8002090:	f040 8285 	bne.w	800259e <HAL_DMA_IRQHandler+0x686>
 8002094:	694b      	ldr	r3, [r1, #20]
 8002096:	0619      	lsls	r1, r3, #24
 8002098:	d509      	bpl.n	80020ae <HAL_DMA_IRQHandler+0x196>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800209a:	2101      	movs	r1, #1
 800209c:	4091      	lsls	r1, r2
 800209e:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80020a2:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	f001 021f 	and.w	r2, r1, #31
 80020ac:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020ae:	2404      	movs	r4, #4
 80020b0:	4094      	lsls	r4, r2
 80020b2:	423c      	tst	r4, r7
 80020b4:	d067      	beq.n	8002186 <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80020b6:	6801      	ldr	r1, [r0, #0]
 80020b8:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <HAL_DMA_IRQHandler+0x298>)
 80020ba:	f8df e108 	ldr.w	lr, [pc, #264]	; 80021c4 <HAL_DMA_IRQHandler+0x2ac>
 80020be:	f8df c100 	ldr.w	ip, [pc, #256]	; 80021c0 <HAL_DMA_IRQHandler+0x2a8>
 80020c2:	4571      	cmp	r1, lr
 80020c4:	bf18      	it	ne
 80020c6:	4299      	cmpne	r1, r3
 80020c8:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80020cc:	bf0c      	ite	eq
 80020ce:	2301      	moveq	r3, #1
 80020d0:	2300      	movne	r3, #0
 80020d2:	4561      	cmp	r1, ip
 80020d4:	bf08      	it	eq
 80020d6:	f043 0301 	orreq.w	r3, r3, #1
 80020da:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80020de:	4571      	cmp	r1, lr
 80020e0:	bf08      	it	eq
 80020e2:	f043 0301 	orreq.w	r3, r3, #1
 80020e6:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80020ea:	4561      	cmp	r1, ip
 80020ec:	bf08      	it	eq
 80020ee:	f043 0301 	orreq.w	r3, r3, #1
 80020f2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80020f6:	4571      	cmp	r1, lr
 80020f8:	bf08      	it	eq
 80020fa:	f043 0301 	orreq.w	r3, r3, #1
 80020fe:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002102:	4561      	cmp	r1, ip
 8002104:	bf08      	it	eq
 8002106:	f043 0301 	orreq.w	r3, r3, #1
 800210a:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 800210e:	4571      	cmp	r1, lr
 8002110:	bf08      	it	eq
 8002112:	f043 0301 	orreq.w	r3, r3, #1
 8002116:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 800211a:	4561      	cmp	r1, ip
 800211c:	bf08      	it	eq
 800211e:	f043 0301 	orreq.w	r3, r3, #1
 8002122:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002126:	4571      	cmp	r1, lr
 8002128:	bf08      	it	eq
 800212a:	f043 0301 	orreq.w	r3, r3, #1
 800212e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002132:	4561      	cmp	r1, ip
 8002134:	bf08      	it	eq
 8002136:	f043 0301 	orreq.w	r3, r3, #1
 800213a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800213e:	4571      	cmp	r1, lr
 8002140:	bf08      	it	eq
 8002142:	f043 0301 	orreq.w	r3, r3, #1
 8002146:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800214a:	4561      	cmp	r1, ip
 800214c:	bf08      	it	eq
 800214e:	f043 0301 	orreq.w	r3, r3, #1
 8002152:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002156:	4571      	cmp	r1, lr
 8002158:	bf08      	it	eq
 800215a:	f043 0301 	orreq.w	r3, r3, #1
 800215e:	4561      	cmp	r1, ip
 8002160:	bf08      	it	eq
 8002162:	f043 0301 	orreq.w	r3, r3, #1
 8002166:	b91b      	cbnz	r3, 8002170 <HAL_DMA_IRQHandler+0x258>
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_DMA_IRQHandler+0x2a4>)
 800216a:	4299      	cmp	r1, r3
 800216c:	f040 8215 	bne.w	800259a <HAL_DMA_IRQHandler+0x682>
 8002170:	680b      	ldr	r3, [r1, #0]
 8002172:	079b      	lsls	r3, r3, #30
 8002174:	d507      	bpl.n	8002186 <HAL_DMA_IRQHandler+0x26e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002176:	60ac      	str	r4, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002178:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800217a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	f001 021f 	and.w	r2, r1, #31
 8002184:	6543      	str	r3, [r0, #84]	; 0x54
 8002186:	4604      	mov	r4, r0
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002188:	2010      	movs	r0, #16
 800218a:	4090      	lsls	r0, r2
 800218c:	4238      	tst	r0, r7
 800218e:	f000 8086 	beq.w	800229e <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002192:	6821      	ldr	r1, [r4, #0]
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_DMA_IRQHandler+0x298>)
 8002196:	f8df e02c 	ldr.w	lr, [pc, #44]	; 80021c4 <HAL_DMA_IRQHandler+0x2ac>
 800219a:	f8df c024 	ldr.w	ip, [pc, #36]	; 80021c0 <HAL_DMA_IRQHandler+0x2a8>
 800219e:	4571      	cmp	r1, lr
 80021a0:	bf18      	it	ne
 80021a2:	4299      	cmpne	r1, r3
 80021a4:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80021a8:	bf08      	it	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	e00c      	b.n	80021c8 <HAL_DMA_IRQHandler+0x2b0>
 80021ae:	bf00      	nop
 80021b0:	40020010 	.word	0x40020010
 80021b4:	20000018 	.word	0x20000018
 80021b8:	40020070 	.word	0x40020070
 80021bc:	400204b8 	.word	0x400204b8
 80021c0:	40020040 	.word	0x40020040
 80021c4:	40020028 	.word	0x40020028
 80021c8:	bf18      	it	ne
 80021ca:	2300      	movne	r3, #0
 80021cc:	4561      	cmp	r1, ip
 80021ce:	bf08      	it	eq
 80021d0:	f043 0301 	orreq.w	r3, r3, #1
 80021d4:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80021d8:	4571      	cmp	r1, lr
 80021da:	bf08      	it	eq
 80021dc:	f043 0301 	orreq.w	r3, r3, #1
 80021e0:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80021e4:	4561      	cmp	r1, ip
 80021e6:	bf08      	it	eq
 80021e8:	f043 0301 	orreq.w	r3, r3, #1
 80021ec:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80021f0:	4571      	cmp	r1, lr
 80021f2:	bf08      	it	eq
 80021f4:	f043 0301 	orreq.w	r3, r3, #1
 80021f8:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80021fc:	4561      	cmp	r1, ip
 80021fe:	bf08      	it	eq
 8002200:	f043 0301 	orreq.w	r3, r3, #1
 8002204:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8002208:	4571      	cmp	r1, lr
 800220a:	bf08      	it	eq
 800220c:	f043 0301 	orreq.w	r3, r3, #1
 8002210:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8002214:	4561      	cmp	r1, ip
 8002216:	bf08      	it	eq
 8002218:	f043 0301 	orreq.w	r3, r3, #1
 800221c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002220:	4571      	cmp	r1, lr
 8002222:	bf08      	it	eq
 8002224:	f043 0301 	orreq.w	r3, r3, #1
 8002228:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800222c:	4561      	cmp	r1, ip
 800222e:	bf08      	it	eq
 8002230:	f043 0301 	orreq.w	r3, r3, #1
 8002234:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002238:	4571      	cmp	r1, lr
 800223a:	bf08      	it	eq
 800223c:	f043 0301 	orreq.w	r3, r3, #1
 8002240:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002244:	4561      	cmp	r1, ip
 8002246:	bf08      	it	eq
 8002248:	f043 0301 	orreq.w	r3, r3, #1
 800224c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002250:	4571      	cmp	r1, lr
 8002252:	bf08      	it	eq
 8002254:	f043 0301 	orreq.w	r3, r3, #1
 8002258:	4561      	cmp	r1, ip
 800225a:	bf08      	it	eq
 800225c:	f043 0301 	orreq.w	r3, r3, #1
 8002260:	b91b      	cbnz	r3, 800226a <HAL_DMA_IRQHandler+0x352>
 8002262:	4b9f      	ldr	r3, [pc, #636]	; (80024e0 <HAL_DMA_IRQHandler+0x5c8>)
 8002264:	4299      	cmp	r1, r3
 8002266:	f040 8194 	bne.w	8002592 <HAL_DMA_IRQHandler+0x67a>
 800226a:	680b      	ldr	r3, [r1, #0]
 800226c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002270:	b1ab      	cbz	r3, 800229e <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002272:	60a8      	str	r0, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	0350      	lsls	r0, r2, #13
 800227a:	f100 8102 	bmi.w	8002482 <HAL_DMA_IRQHandler+0x56a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	05d2      	lsls	r2, r2, #23
 8002282:	d403      	bmi.n	800228c <HAL_DMA_IRQHandler+0x374>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	f022 0208 	bic.w	r2, r2, #8
 800228a:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800228c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80ff 	beq.w	8002492 <HAL_DMA_IRQHandler+0x57a>
            hdma->XferHalfCpltCallback(hdma);
 8002294:	4620      	mov	r0, r4
 8002296:	4798      	blx	r3
 8002298:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800229a:	f001 021f 	and.w	r2, r1, #31
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800229e:	2120      	movs	r1, #32
 80022a0:	4091      	lsls	r1, r2
 80022a2:	4239      	tst	r1, r7
 80022a4:	d068      	beq.n	8002378 <HAL_DMA_IRQHandler+0x460>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80022a6:	6822      	ldr	r2, [r4, #0]
 80022a8:	4b8e      	ldr	r3, [pc, #568]	; (80024e4 <HAL_DMA_IRQHandler+0x5cc>)
 80022aa:	4f8f      	ldr	r7, [pc, #572]	; (80024e8 <HAL_DMA_IRQHandler+0x5d0>)
 80022ac:	488f      	ldr	r0, [pc, #572]	; (80024ec <HAL_DMA_IRQHandler+0x5d4>)
 80022ae:	42ba      	cmp	r2, r7
 80022b0:	bf18      	it	ne
 80022b2:	429a      	cmpne	r2, r3
 80022b4:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80022b8:	bf0c      	ite	eq
 80022ba:	2301      	moveq	r3, #1
 80022bc:	2300      	movne	r3, #0
 80022be:	4282      	cmp	r2, r0
 80022c0:	bf08      	it	eq
 80022c2:	f043 0301 	orreq.w	r3, r3, #1
 80022c6:	3030      	adds	r0, #48	; 0x30
 80022c8:	42ba      	cmp	r2, r7
 80022ca:	bf08      	it	eq
 80022cc:	f043 0301 	orreq.w	r3, r3, #1
 80022d0:	3730      	adds	r7, #48	; 0x30
 80022d2:	4282      	cmp	r2, r0
 80022d4:	bf08      	it	eq
 80022d6:	f043 0301 	orreq.w	r3, r3, #1
 80022da:	3030      	adds	r0, #48	; 0x30
 80022dc:	42ba      	cmp	r2, r7
 80022de:	bf08      	it	eq
 80022e0:	f043 0301 	orreq.w	r3, r3, #1
 80022e4:	3730      	adds	r7, #48	; 0x30
 80022e6:	4282      	cmp	r2, r0
 80022e8:	bf08      	it	eq
 80022ea:	f043 0301 	orreq.w	r3, r3, #1
 80022ee:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80022f2:	42ba      	cmp	r2, r7
 80022f4:	bf08      	it	eq
 80022f6:	f043 0301 	orreq.w	r3, r3, #1
 80022fa:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80022fe:	4282      	cmp	r2, r0
 8002300:	bf08      	it	eq
 8002302:	f043 0301 	orreq.w	r3, r3, #1
 8002306:	3030      	adds	r0, #48	; 0x30
 8002308:	42ba      	cmp	r2, r7
 800230a:	bf08      	it	eq
 800230c:	f043 0301 	orreq.w	r3, r3, #1
 8002310:	3730      	adds	r7, #48	; 0x30
 8002312:	4282      	cmp	r2, r0
 8002314:	bf08      	it	eq
 8002316:	f043 0301 	orreq.w	r3, r3, #1
 800231a:	3030      	adds	r0, #48	; 0x30
 800231c:	42ba      	cmp	r2, r7
 800231e:	bf08      	it	eq
 8002320:	f043 0301 	orreq.w	r3, r3, #1
 8002324:	3730      	adds	r7, #48	; 0x30
 8002326:	4282      	cmp	r2, r0
 8002328:	bf08      	it	eq
 800232a:	f043 0301 	orreq.w	r3, r3, #1
 800232e:	3030      	adds	r0, #48	; 0x30
 8002330:	42ba      	cmp	r2, r7
 8002332:	bf08      	it	eq
 8002334:	f043 0301 	orreq.w	r3, r3, #1
 8002338:	4282      	cmp	r2, r0
 800233a:	bf08      	it	eq
 800233c:	f043 0301 	orreq.w	r3, r3, #1
 8002340:	b91b      	cbnz	r3, 800234a <HAL_DMA_IRQHandler+0x432>
 8002342:	4b67      	ldr	r3, [pc, #412]	; (80024e0 <HAL_DMA_IRQHandler+0x5c8>)
 8002344:	429a      	cmp	r2, r3
 8002346:	f040 812c 	bne.w	80025a2 <HAL_DMA_IRQHandler+0x68a>
 800234a:	6813      	ldr	r3, [r2, #0]
 800234c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002350:	b193      	cbz	r3, 8002378 <HAL_DMA_IRQHandler+0x460>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002352:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002354:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002358:	2b04      	cmp	r3, #4
 800235a:	f000 809e 	beq.w	800249a <HAL_DMA_IRQHandler+0x582>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	0357      	lsls	r7, r2, #13
 8002364:	f140 80ce 	bpl.w	8002504 <HAL_DMA_IRQHandler+0x5ec>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	031d      	lsls	r5, r3, #12
 800236c:	f140 80d9 	bpl.w	8002522 <HAL_DMA_IRQHandler+0x60a>
          if(hdma->XferCpltCallback != NULL)
 8002370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002372:	b10b      	cbz	r3, 8002378 <HAL_DMA_IRQHandler+0x460>
            hdma->XferCpltCallback(hdma);
 8002374:	4620      	mov	r0, r4
 8002376:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002378:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800237a:	2b00      	cmp	r3, #0
 800237c:	d07f      	beq.n	800247e <HAL_DMA_IRQHandler+0x566>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800237e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002380:	07d8      	lsls	r0, r3, #31
 8002382:	d51f      	bpl.n	80023c4 <HAL_DMA_IRQHandler+0x4ac>
        __HAL_DMA_DISABLE(hdma);
 8002384:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8002386:	2004      	movs	r0, #4
 8002388:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002394:	4b56      	ldr	r3, [pc, #344]	; (80024f0 <HAL_DMA_IRQHandler+0x5d8>)
 8002396:	6822      	ldr	r2, [r4, #0]
 8002398:	fba3 3606 	umull	r3, r6, r3, r6
 800239c:	0ab6      	lsrs	r6, r6, #10
 800239e:	e002      	b.n	80023a6 <HAL_DMA_IRQHandler+0x48e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80023a0:	6813      	ldr	r3, [r2, #0]
 80023a2:	07d9      	lsls	r1, r3, #31
 80023a4:	d504      	bpl.n	80023b0 <HAL_DMA_IRQHandler+0x498>
          if (++count > timeout)
 80023a6:	9b01      	ldr	r3, [sp, #4]
 80023a8:	3301      	adds	r3, #1
 80023aa:	42b3      	cmp	r3, r6
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	d9f7      	bls.n	80023a0 <HAL_DMA_IRQHandler+0x488>
        __HAL_UNLOCK(hdma);
 80023b0:	2300      	movs	r3, #0
 80023b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023b6:	6813      	ldr	r3, [r2, #0]
 80023b8:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80023ba:	bf4c      	ite	mi
 80023bc:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80023be:	2301      	movpl	r3, #1
 80023c0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 80023c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d059      	beq.n	800247e <HAL_DMA_IRQHandler+0x566>
        hdma->XferErrorCallback(hdma);
 80023ca:	4620      	mov	r0, r4
}
 80023cc:	b003      	add	sp, #12
 80023ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 80023d2:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	075b      	lsls	r3, r3, #29
 80023d8:	f57f ae01 	bpl.w	8001fde <HAL_DMA_IRQHandler+0xc6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80023dc:	6822      	ldr	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023de:	2308      	movs	r3, #8
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80023e0:	f022 0204 	bic.w	r2, r2, #4
 80023e4:	6022      	str	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023e6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80023e8:	f002 021f 	and.w	r2, r2, #31
 80023ec:	4093      	lsls	r3, r2
 80023ee:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023f0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023f2:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	f001 021f 	and.w	r2, r1, #31
 80023fc:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023fe:	fa27 f302 	lsr.w	r3, r7, r2
 8002402:	07dc      	lsls	r4, r3, #31
 8002404:	f57f ae53 	bpl.w	80020ae <HAL_DMA_IRQHandler+0x196>
 8002408:	e5ed      	b.n	8001fe6 <HAL_DMA_IRQHandler+0xce>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800240a:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <HAL_DMA_IRQHandler+0x5dc>)
 800240c:	4e3a      	ldr	r6, [pc, #232]	; (80024f8 <HAL_DMA_IRQHandler+0x5e0>)
 800240e:	493b      	ldr	r1, [pc, #236]	; (80024fc <HAL_DMA_IRQHandler+0x5e4>)
 8002410:	42b4      	cmp	r4, r6
 8002412:	bf18      	it	ne
 8002414:	429c      	cmpne	r4, r3
 8002416:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	428c      	cmp	r4, r1
 8002422:	bf08      	it	eq
 8002424:	f043 0301 	orreq.w	r3, r3, #1
 8002428:	3128      	adds	r1, #40	; 0x28
 800242a:	42b4      	cmp	r4, r6
 800242c:	bf08      	it	eq
 800242e:	f043 0301 	orreq.w	r3, r3, #1
 8002432:	3628      	adds	r6, #40	; 0x28
 8002434:	428c      	cmp	r4, r1
 8002436:	bf08      	it	eq
 8002438:	f043 0301 	orreq.w	r3, r3, #1
 800243c:	3128      	adds	r1, #40	; 0x28
 800243e:	42b4      	cmp	r4, r6
 8002440:	bf08      	it	eq
 8002442:	f043 0301 	orreq.w	r3, r3, #1
 8002446:	428c      	cmp	r4, r1
 8002448:	bf08      	it	eq
 800244a:	f043 0301 	orreq.w	r3, r3, #1
 800244e:	b913      	cbnz	r3, 8002456 <HAL_DMA_IRQHandler+0x53e>
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_DMA_IRQHandler+0x5e8>)
 8002452:	429c      	cmp	r4, r3
 8002454:	d113      	bne.n	800247e <HAL_DMA_IRQHandler+0x566>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002456:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8002458:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800245a:	6823      	ldr	r3, [r4, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800245c:	f001 011f 	and.w	r1, r1, #31
 8002460:	408e      	lsls	r6, r1
 8002462:	4216      	tst	r6, r2
 8002464:	d066      	beq.n	8002534 <HAL_DMA_IRQHandler+0x61c>
 8002466:	075f      	lsls	r7, r3, #29
 8002468:	d564      	bpl.n	8002534 <HAL_DMA_IRQHandler+0x61c>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800246a:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800246c:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800246e:	f140 809c 	bpl.w	80025aa <HAL_DMA_IRQHandler+0x692>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002472:	03da      	lsls	r2, r3, #15
 8002474:	f100 80f1 	bmi.w	800265a <HAL_DMA_IRQHandler+0x742>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002478:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1a6      	bne.n	80023cc <HAL_DMA_IRQHandler+0x4b4>
}
 800247e:	b003      	add	sp, #12
 8002480:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0319      	lsls	r1, r3, #12
 8002486:	f57f af01 	bpl.w	800228c <HAL_DMA_IRQHandler+0x374>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800248a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800248c:	2b00      	cmp	r3, #0
 800248e:	f47f af01 	bne.w	8002294 <HAL_DMA_IRQHandler+0x37c>
 8002492:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002494:	f002 021f 	and.w	r2, r2, #31
 8002498:	e701      	b.n	800229e <HAL_DMA_IRQHandler+0x386>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800249a:	6822      	ldr	r2, [r4, #0]
 800249c:	6813      	ldr	r3, [r2, #0]
 800249e:	f023 0316 	bic.w	r3, r3, #22
 80024a2:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024a4:	6822      	ldr	r2, [r4, #0]
 80024a6:	6953      	ldr	r3, [r2, #20]
 80024a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ac:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d03b      	beq.n	800252c <HAL_DMA_IRQHandler+0x614>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80024b4:	6822      	ldr	r2, [r4, #0]
 80024b6:	6813      	ldr	r3, [r2, #0]
 80024b8:	f023 0308 	bic.w	r3, r3, #8
 80024bc:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024be:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80024c0:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 80024c2:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 80024c4:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024c6:	f002 021f 	and.w	r2, r2, #31
 80024ca:	4093      	lsls	r3, r2
 80024cc:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 80024ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
          __HAL_UNLOCK(hdma);
 80024d0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80024d4:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f47f af76 	bne.w	80023ca <HAL_DMA_IRQHandler+0x4b2>
 80024de:	e7ce      	b.n	800247e <HAL_DMA_IRQHandler+0x566>
 80024e0:	400204b8 	.word	0x400204b8
 80024e4:	40020010 	.word	0x40020010
 80024e8:	40020028 	.word	0x40020028
 80024ec:	40020040 	.word	0x40020040
 80024f0:	1b4e81b5 	.word	0x1b4e81b5
 80024f4:	58025408 	.word	0x58025408
 80024f8:	5802541c 	.word	0x5802541c
 80024fc:	58025430 	.word	0x58025430
 8002500:	58025494 	.word	0x58025494
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800250a:	f47f af31 	bne.w	8002370 <HAL_DMA_IRQHandler+0x458>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800250e:	6819      	ldr	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8002510:	2001      	movs	r0, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002512:	f021 0110 	bic.w	r1, r1, #16
 8002516:	6019      	str	r1, [r3, #0]
            __HAL_UNLOCK(hdma);
 8002518:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800251c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8002520:	e726      	b.n	8002370 <HAL_DMA_IRQHandler+0x458>
            if(hdma->XferM1CpltCallback != NULL)
 8002522:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f af25 	bne.w	8002374 <HAL_DMA_IRQHandler+0x45c>
 800252a:	e725      	b.n	8002378 <HAL_DMA_IRQHandler+0x460>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800252c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1c0      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x59c>
 8002532:	e7c4      	b.n	80024be <HAL_DMA_IRQHandler+0x5a6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002534:	2602      	movs	r6, #2
 8002536:	408e      	lsls	r6, r1
 8002538:	4216      	tst	r6, r2
 800253a:	d00d      	beq.n	8002558 <HAL_DMA_IRQHandler+0x640>
 800253c:	079f      	lsls	r7, r3, #30
 800253e:	d50b      	bpl.n	8002558 <HAL_DMA_IRQHandler+0x640>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002540:	041c      	lsls	r4, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002542:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002544:	f140 808e 	bpl.w	8002664 <HAL_DMA_IRQHandler+0x74c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002548:	03d9      	lsls	r1, r3, #15
 800254a:	f100 80e9 	bmi.w	8002720 <HAL_DMA_IRQHandler+0x808>
          if(hdma->XferM1CpltCallback != NULL)
 800254e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002550:	2b00      	cmp	r3, #0
 8002552:	f47f af3b 	bne.w	80023cc <HAL_DMA_IRQHandler+0x4b4>
 8002556:	e792      	b.n	800247e <HAL_DMA_IRQHandler+0x566>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002558:	2608      	movs	r6, #8
 800255a:	fa06 f101 	lsl.w	r1, r6, r1
 800255e:	4211      	tst	r1, r2
 8002560:	d08d      	beq.n	800247e <HAL_DMA_IRQHandler+0x566>
 8002562:	071b      	lsls	r3, r3, #28
 8002564:	d58b      	bpl.n	800247e <HAL_DMA_IRQHandler+0x566>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002566:	6823      	ldr	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002568:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800256a:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256c:	f023 030e 	bic.w	r3, r3, #14
 8002570:	6023      	str	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002572:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 800257e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002580:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8002582:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002586:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800258a:	2b00      	cmp	r3, #0
 800258c:	f47f af1e 	bne.w	80023cc <HAL_DMA_IRQHandler+0x4b4>
 8002590:	e775      	b.n	800247e <HAL_DMA_IRQHandler+0x566>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002592:	680b      	ldr	r3, [r1, #0]
 8002594:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002598:	e66a      	b.n	8002270 <HAL_DMA_IRQHandler+0x358>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800259a:	680b      	ldr	r3, [r1, #0]
 800259c:	e5f3      	b.n	8002186 <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800259e:	680b      	ldr	r3, [r1, #0]
 80025a0:	e585      	b.n	80020ae <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80025a2:	6813      	ldr	r3, [r2, #0]
 80025a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80025a8:	e6d2      	b.n	8002350 <HAL_DMA_IRQHandler+0x438>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80025aa:	069b      	lsls	r3, r3, #26
 80025ac:	d455      	bmi.n	800265a <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ae:	6802      	ldr	r2, [r0, #0]
 80025b0:	4b63      	ldr	r3, [pc, #396]	; (8002740 <HAL_DMA_IRQHandler+0x828>)
 80025b2:	4c64      	ldr	r4, [pc, #400]	; (8002744 <HAL_DMA_IRQHandler+0x82c>)
 80025b4:	4964      	ldr	r1, [pc, #400]	; (8002748 <HAL_DMA_IRQHandler+0x830>)
 80025b6:	42a2      	cmp	r2, r4
 80025b8:	bf18      	it	ne
 80025ba:	429a      	cmpne	r2, r3
 80025bc:	4d63      	ldr	r5, [pc, #396]	; (800274c <HAL_DMA_IRQHandler+0x834>)
 80025be:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	428a      	cmp	r2, r1
 80025ca:	bf08      	it	eq
 80025cc:	f043 0301 	orreq.w	r3, r3, #1
 80025d0:	3148      	adds	r1, #72	; 0x48
 80025d2:	42aa      	cmp	r2, r5
 80025d4:	bf08      	it	eq
 80025d6:	f043 0301 	orreq.w	r3, r3, #1
 80025da:	3548      	adds	r5, #72	; 0x48
 80025dc:	42a2      	cmp	r2, r4
 80025de:	bf08      	it	eq
 80025e0:	f043 0301 	orreq.w	r3, r3, #1
 80025e4:	3448      	adds	r4, #72	; 0x48
 80025e6:	428a      	cmp	r2, r1
 80025e8:	bf08      	it	eq
 80025ea:	f043 0301 	orreq.w	r3, r3, #1
 80025ee:	f501 7162 	add.w	r1, r1, #904	; 0x388
 80025f2:	42aa      	cmp	r2, r5
 80025f4:	bf08      	it	eq
 80025f6:	f043 0301 	orreq.w	r3, r3, #1
 80025fa:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80025fe:	42a2      	cmp	r2, r4
 8002600:	bf08      	it	eq
 8002602:	f043 0301 	orreq.w	r3, r3, #1
 8002606:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800260a:	428a      	cmp	r2, r1
 800260c:	bf08      	it	eq
 800260e:	f043 0301 	orreq.w	r3, r3, #1
 8002612:	3148      	adds	r1, #72	; 0x48
 8002614:	42aa      	cmp	r2, r5
 8002616:	bf08      	it	eq
 8002618:	f043 0301 	orreq.w	r3, r3, #1
 800261c:	3548      	adds	r5, #72	; 0x48
 800261e:	42a2      	cmp	r2, r4
 8002620:	bf08      	it	eq
 8002622:	f043 0301 	orreq.w	r3, r3, #1
 8002626:	3448      	adds	r4, #72	; 0x48
 8002628:	428a      	cmp	r2, r1
 800262a:	bf08      	it	eq
 800262c:	f043 0301 	orreq.w	r3, r3, #1
 8002630:	3148      	adds	r1, #72	; 0x48
 8002632:	42aa      	cmp	r2, r5
 8002634:	bf08      	it	eq
 8002636:	f043 0301 	orreq.w	r3, r3, #1
 800263a:	42a2      	cmp	r2, r4
 800263c:	bf08      	it	eq
 800263e:	f043 0301 	orreq.w	r3, r3, #1
 8002642:	428a      	cmp	r2, r1
 8002644:	bf08      	it	eq
 8002646:	f043 0301 	orreq.w	r3, r3, #1
 800264a:	b913      	cbnz	r3, 8002652 <HAL_DMA_IRQHandler+0x73a>
 800264c:	4b40      	ldr	r3, [pc, #256]	; (8002750 <HAL_DMA_IRQHandler+0x838>)
 800264e:	429a      	cmp	r2, r3
 8002650:	d16b      	bne.n	800272a <HAL_DMA_IRQHandler+0x812>
 8002652:	6813      	ldr	r3, [r2, #0]
 8002654:	f023 0308 	bic.w	r3, r3, #8
 8002658:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800265a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800265c:	2b00      	cmp	r3, #0
 800265e:	f47f aeb5 	bne.w	80023cc <HAL_DMA_IRQHandler+0x4b4>
 8002662:	e70c      	b.n	800247e <HAL_DMA_IRQHandler+0x566>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002664:	069a      	lsls	r2, r3, #26
 8002666:	d45b      	bmi.n	8002720 <HAL_DMA_IRQHandler+0x808>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002668:	6802      	ldr	r2, [r0, #0]
 800266a:	4b35      	ldr	r3, [pc, #212]	; (8002740 <HAL_DMA_IRQHandler+0x828>)
 800266c:	4c35      	ldr	r4, [pc, #212]	; (8002744 <HAL_DMA_IRQHandler+0x82c>)
 800266e:	4936      	ldr	r1, [pc, #216]	; (8002748 <HAL_DMA_IRQHandler+0x830>)
 8002670:	42a2      	cmp	r2, r4
 8002672:	bf18      	it	ne
 8002674:	429a      	cmpne	r2, r3
 8002676:	4d35      	ldr	r5, [pc, #212]	; (800274c <HAL_DMA_IRQHandler+0x834>)
 8002678:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800267c:	bf0c      	ite	eq
 800267e:	2301      	moveq	r3, #1
 8002680:	2300      	movne	r3, #0
 8002682:	428a      	cmp	r2, r1
 8002684:	bf08      	it	eq
 8002686:	f043 0301 	orreq.w	r3, r3, #1
 800268a:	3148      	adds	r1, #72	; 0x48
 800268c:	42aa      	cmp	r2, r5
 800268e:	bf08      	it	eq
 8002690:	f043 0301 	orreq.w	r3, r3, #1
 8002694:	3548      	adds	r5, #72	; 0x48
 8002696:	42a2      	cmp	r2, r4
 8002698:	bf08      	it	eq
 800269a:	f043 0301 	orreq.w	r3, r3, #1
 800269e:	3448      	adds	r4, #72	; 0x48
 80026a0:	428a      	cmp	r2, r1
 80026a2:	bf08      	it	eq
 80026a4:	f043 0301 	orreq.w	r3, r3, #1
 80026a8:	f501 7162 	add.w	r1, r1, #904	; 0x388
 80026ac:	42aa      	cmp	r2, r5
 80026ae:	bf08      	it	eq
 80026b0:	f043 0301 	orreq.w	r3, r3, #1
 80026b4:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80026b8:	42a2      	cmp	r2, r4
 80026ba:	bf08      	it	eq
 80026bc:	f043 0301 	orreq.w	r3, r3, #1
 80026c0:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80026c4:	428a      	cmp	r2, r1
 80026c6:	bf08      	it	eq
 80026c8:	f043 0301 	orreq.w	r3, r3, #1
 80026cc:	3148      	adds	r1, #72	; 0x48
 80026ce:	42aa      	cmp	r2, r5
 80026d0:	bf08      	it	eq
 80026d2:	f043 0301 	orreq.w	r3, r3, #1
 80026d6:	3548      	adds	r5, #72	; 0x48
 80026d8:	42a2      	cmp	r2, r4
 80026da:	bf08      	it	eq
 80026dc:	f043 0301 	orreq.w	r3, r3, #1
 80026e0:	3448      	adds	r4, #72	; 0x48
 80026e2:	428a      	cmp	r2, r1
 80026e4:	bf08      	it	eq
 80026e6:	f043 0301 	orreq.w	r3, r3, #1
 80026ea:	3148      	adds	r1, #72	; 0x48
 80026ec:	42aa      	cmp	r2, r5
 80026ee:	bf08      	it	eq
 80026f0:	f043 0301 	orreq.w	r3, r3, #1
 80026f4:	42a2      	cmp	r2, r4
 80026f6:	bf08      	it	eq
 80026f8:	f043 0301 	orreq.w	r3, r3, #1
 80026fc:	428a      	cmp	r2, r1
 80026fe:	bf08      	it	eq
 8002700:	f043 0301 	orreq.w	r3, r3, #1
 8002704:	b913      	cbnz	r3, 800270c <HAL_DMA_IRQHandler+0x7f4>
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_DMA_IRQHandler+0x838>)
 8002708:	429a      	cmp	r2, r3
 800270a:	d113      	bne.n	8002734 <HAL_DMA_IRQHandler+0x81c>
 800270c:	6813      	ldr	r3, [r2, #0]
 800270e:	f023 0314 	bic.w	r3, r3, #20
 8002712:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(hdma);
 8002714:	2200      	movs	r2, #0
          hdma->State = HAL_DMA_STATE_READY;
 8002716:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002718:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800271c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002720:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002722:	2b00      	cmp	r3, #0
 8002724:	f47f ae52 	bne.w	80023cc <HAL_DMA_IRQHandler+0x4b4>
 8002728:	e6a9      	b.n	800247e <HAL_DMA_IRQHandler+0x566>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800272a:	6813      	ldr	r3, [r2, #0]
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e792      	b.n	800265a <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002734:	6813      	ldr	r3, [r2, #0]
 8002736:	f023 030a 	bic.w	r3, r3, #10
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e7ea      	b.n	8002714 <HAL_DMA_IRQHandler+0x7fc>
 800273e:	bf00      	nop
 8002740:	40020010 	.word	0x40020010
 8002744:	40020028 	.word	0x40020028
 8002748:	40020040 	.word	0x40020040
 800274c:	40020058 	.word	0x40020058
 8002750:	400204b8 	.word	0x400204b8

08002754 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002754:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8002756:	4770      	bx	lr

08002758 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002758:	680b      	ldr	r3, [r1, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80e8 	beq.w	8002930 <HAL_GPIO_Init+0x1d8>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002760:	f8df c224 	ldr.w	ip, [pc, #548]	; 8002988 <HAL_GPIO_Init+0x230>
{
 8002764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8002768:	2500      	movs	r5, #0
{
 800276a:	b083      	sub	sp, #12
 800276c:	f8df e21c 	ldr.w	lr, [pc, #540]	; 800298c <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002770:	4f7f      	ldr	r7, [pc, #508]	; (8002970 <HAL_GPIO_Init+0x218>)
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002772:	2201      	movs	r2, #1
 8002774:	40aa      	lsls	r2, r5
    if (iocurrent != 0x00U)
 8002776:	ea12 0603 	ands.w	r6, r2, r3
 800277a:	f000 80bf 	beq.w	80028fc <HAL_GPIO_Init+0x1a4>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800277e:	684b      	ldr	r3, [r1, #4]
 8002780:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8002784:	2403      	movs	r4, #3
 8002786:	f023 0910 	bic.w	r9, r3, #16
 800278a:	fa04 f408 	lsl.w	r4, r4, r8
 800278e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002792:	43e4      	mvns	r4, r4
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002794:	f1b9 0f01 	cmp.w	r9, #1
 8002798:	d814      	bhi.n	80027c4 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->OSPEEDR;
 800279a:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800279c:	ea03 0904 	and.w	r9, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a0:	68cb      	ldr	r3, [r1, #12]
 80027a2:	fa03 f308 	lsl.w	r3, r3, r8
 80027a6:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OSPEEDR = temp;
 80027aa:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027ac:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 80027ae:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027b6:	ea29 0902 	bic.w	r9, r9, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027ba:	fa03 f205 	lsl.w	r2, r3, r5
 80027be:	ea42 0209 	orr.w	r2, r2, r9
        GPIOx->OTYPER = temp;
 80027c2:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80027c4:	68c2      	ldr	r2, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c6:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027c8:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ca:	fa03 f308 	lsl.w	r3, r3, r8
 80027ce:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 80027d0:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d2:	684b      	ldr	r3, [r1, #4]
 80027d4:	f023 0210 	bic.w	r2, r3, #16
 80027d8:	2a02      	cmp	r2, #2
 80027da:	d115      	bne.n	8002808 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 80027dc:	08ea      	lsrs	r2, r5, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027de:	f005 0907 	and.w	r9, r5, #7
 80027e2:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027e6:	690b      	ldr	r3, [r1, #16]
 80027e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027ec:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80027f0:	f8d2 a020 	ldr.w	sl, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027f4:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027f8:	fa03 f309 	lsl.w	r3, r3, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027fc:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002800:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002804:	6213      	str	r3, [r2, #32]
 8002806:	684b      	ldr	r3, [r1, #4]
      temp = GPIOx->MODER;
 8002808:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800280a:	f003 0303 	and.w	r3, r3, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800280e:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002810:	fa03 f308 	lsl.w	r3, r3, r8
 8002814:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8002816:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002818:	684b      	ldr	r3, [r1, #4]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	d56d      	bpl.n	80028fa <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281e:	f8dc 40f4 	ldr.w	r4, [ip, #244]	; 0xf4
 8002822:	f025 0903 	bic.w	r9, r5, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002826:	f005 0303 	and.w	r3, r5, #3
 800282a:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282c:	f044 0802 	orr.w	r8, r4, #2
 8002830:	eb09 040e 	add.w	r4, r9, lr
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002834:	ea4f 0983 	mov.w	r9, r3, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002838:	4b4e      	ldr	r3, [pc, #312]	; (8002974 <HAL_GPIO_Init+0x21c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	f8cc 80f4 	str.w	r8, [ip, #244]	; 0xf4
 800283e:	f8dc 80f4 	ldr.w	r8, [ip, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002842:	fa02 f209 	lsl.w	r2, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002846:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002848:	f008 0802 	and.w	r8, r8, #2
 800284c:	f8cd 8004 	str.w	r8, [sp, #4]
 8002850:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002854:	f8d4 8008 	ldr.w	r8, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002858:	ea28 0202 	bic.w	r2, r8, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800285c:	d026      	beq.n	80028ac <HAL_GPIO_Init+0x154>
 800285e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002862:	4298      	cmp	r0, r3
 8002864:	d058      	beq.n	8002918 <HAL_GPIO_Init+0x1c0>
 8002866:	4b44      	ldr	r3, [pc, #272]	; (8002978 <HAL_GPIO_Init+0x220>)
 8002868:	4298      	cmp	r0, r3
 800286a:	d04f      	beq.n	800290c <HAL_GPIO_Init+0x1b4>
 800286c:	4b43      	ldr	r3, [pc, #268]	; (800297c <HAL_GPIO_Init+0x224>)
 800286e:	4298      	cmp	r0, r3
 8002870:	d05f      	beq.n	8002932 <HAL_GPIO_Init+0x1da>
 8002872:	4b43      	ldr	r3, [pc, #268]	; (8002980 <HAL_GPIO_Init+0x228>)
 8002874:	4298      	cmp	r0, r3
 8002876:	d062      	beq.n	800293e <HAL_GPIO_Init+0x1e6>
 8002878:	4b42      	ldr	r3, [pc, #264]	; (8002984 <HAL_GPIO_Init+0x22c>)
 800287a:	4298      	cmp	r0, r3
 800287c:	d052      	beq.n	8002924 <HAL_GPIO_Init+0x1cc>
 800287e:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8002990 <HAL_GPIO_Init+0x238>
 8002882:	4540      	cmp	r0, r8
 8002884:	d061      	beq.n	800294a <HAL_GPIO_Init+0x1f2>
 8002886:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002994 <HAL_GPIO_Init+0x23c>
 800288a:	4540      	cmp	r0, r8
 800288c:	d063      	beq.n	8002956 <HAL_GPIO_Init+0x1fe>
 800288e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8002998 <HAL_GPIO_Init+0x240>
 8002892:	4540      	cmp	r0, r8
 8002894:	d065      	beq.n	8002962 <HAL_GPIO_Init+0x20a>
 8002896:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800299c <HAL_GPIO_Init+0x244>
 800289a:	4540      	cmp	r0, r8
 800289c:	bf0c      	ite	eq
 800289e:	f04f 0809 	moveq.w	r8, #9
 80028a2:	f04f 080a 	movne.w	r8, #10
 80028a6:	fa08 f309 	lsl.w	r3, r8, r9
 80028aa:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ac:	60a2      	str	r2, [r4, #8]
        temp &= ~(iocurrent);
 80028ae:	43f2      	mvns	r2, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b0:	684c      	ldr	r4, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80028b2:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp = EXTI_CurrentCPU->IMR1;
 80028b6:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b8:	03e4      	lsls	r4, r4, #15
          temp |= iocurrent;
 80028ba:	bf4c      	ite	mi
 80028bc:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 80028be:	4013      	andpl	r3, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80028c0:	603b      	str	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c2:	684c      	ldr	r4, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80028c4:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c6:	03a4      	lsls	r4, r4, #14
          temp |= iocurrent;
 80028c8:	bf4c      	ite	mi
 80028ca:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 80028cc:	4013      	andpl	r3, r2
        EXTI_CurrentCPU->EMR1 = temp;
 80028ce:	607b      	str	r3, [r7, #4]
        temp = EXTI->RTSR1;
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d4:	684c      	ldr	r4, [r1, #4]
        temp = EXTI->RTSR1;
 80028d6:	681b      	ldr	r3, [r3, #0]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d8:	02e4      	lsls	r4, r4, #11
          temp |= iocurrent;
 80028da:	bf4c      	ite	mi
 80028dc:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 80028de:	4013      	andpl	r3, r2
        EXTI->RTSR1 = temp;
 80028e0:	f8c8 3000 	str.w	r3, [r8]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028e4:	684c      	ldr	r4, [r1, #4]
        temp = EXTI->FTSR1;
 80028e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ea:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80028ec:	bf54      	ite	pl
 80028ee:	ea02 0603 	andpl.w	r6, r2, r3
        {
          temp |= iocurrent;
 80028f2:	431e      	orrmi	r6, r3
        }
        EXTI->FTSR1 = temp;
 80028f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f8:	605e      	str	r6, [r3, #4]
 80028fa:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 80028fc:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028fe:	fa33 f205 	lsrs.w	r2, r3, r5
 8002902:	f47f af36 	bne.w	8002772 <HAL_GPIO_Init+0x1a>
  }
}
 8002906:	b003      	add	sp, #12
 8002908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800290c:	f04f 0802 	mov.w	r8, #2
 8002910:	fa08 f309 	lsl.w	r3, r8, r9
 8002914:	431a      	orrs	r2, r3
 8002916:	e7c9      	b.n	80028ac <HAL_GPIO_Init+0x154>
 8002918:	f04f 0801 	mov.w	r8, #1
 800291c:	fa08 f309 	lsl.w	r3, r8, r9
 8002920:	431a      	orrs	r2, r3
 8002922:	e7c3      	b.n	80028ac <HAL_GPIO_Init+0x154>
 8002924:	f04f 0805 	mov.w	r8, #5
 8002928:	fa08 f309 	lsl.w	r3, r8, r9
 800292c:	431a      	orrs	r2, r3
 800292e:	e7bd      	b.n	80028ac <HAL_GPIO_Init+0x154>
 8002930:	4770      	bx	lr
 8002932:	f04f 0803 	mov.w	r8, #3
 8002936:	fa08 f309 	lsl.w	r3, r8, r9
 800293a:	431a      	orrs	r2, r3
 800293c:	e7b6      	b.n	80028ac <HAL_GPIO_Init+0x154>
 800293e:	f04f 0804 	mov.w	r8, #4
 8002942:	fa08 f309 	lsl.w	r3, r8, r9
 8002946:	431a      	orrs	r2, r3
 8002948:	e7b0      	b.n	80028ac <HAL_GPIO_Init+0x154>
 800294a:	f04f 0806 	mov.w	r8, #6
 800294e:	fa08 f309 	lsl.w	r3, r8, r9
 8002952:	431a      	orrs	r2, r3
 8002954:	e7aa      	b.n	80028ac <HAL_GPIO_Init+0x154>
 8002956:	f04f 0807 	mov.w	r8, #7
 800295a:	fa08 f309 	lsl.w	r3, r8, r9
 800295e:	431a      	orrs	r2, r3
 8002960:	e7a4      	b.n	80028ac <HAL_GPIO_Init+0x154>
 8002962:	f04f 0808 	mov.w	r8, #8
 8002966:	fa08 f309 	lsl.w	r3, r8, r9
 800296a:	431a      	orrs	r2, r3
 800296c:	e79e      	b.n	80028ac <HAL_GPIO_Init+0x154>
 800296e:	bf00      	nop
 8002970:	58000080 	.word	0x58000080
 8002974:	58020000 	.word	0x58020000
 8002978:	58020800 	.word	0x58020800
 800297c:	58020c00 	.word	0x58020c00
 8002980:	58021000 	.word	0x58021000
 8002984:	58021400 	.word	0x58021400
 8002988:	58024400 	.word	0x58024400
 800298c:	58000400 	.word	0x58000400
 8002990:	58021800 	.word	0x58021800
 8002994:	58021c00 	.word	0x58021c00
 8002998:	58022000 	.word	0x58022000
 800299c:	58022400 	.word	0x58022400

080029a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80029a0:	6903      	ldr	r3, [r0, #16]
 80029a2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80029a4:	bf14      	ite	ne
 80029a6:	2001      	movne	r0, #1
 80029a8:	2000      	moveq	r0, #0
 80029aa:	4770      	bx	lr

080029ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ac:	b902      	cbnz	r2, 80029b0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029ae:	0409      	lsls	r1, r1, #16
 80029b0:	6181      	str	r1, [r0, #24]
  }
}
 80029b2:	4770      	bx	lr

080029b4 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d056      	beq.n	8002a66 <HAL_I2C_Init+0xb2>
{
 80029b8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029be:	4604      	mov	r4, r0
 80029c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d049      	beq.n	8002a5c <HAL_I2C_Init+0xa8>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c8:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80029ca:	2324      	movs	r3, #36	; 0x24
 80029cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80029d0:	6813      	ldr	r3, [r2, #0]
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029d8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80029dc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80029e0:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029e2:	6822      	ldr	r2, [r4, #0]
 80029e4:	6893      	ldr	r3, [r2, #8]
 80029e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029ea:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ec:	68e3      	ldr	r3, [r4, #12]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029ee:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f0:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029f2:	68a3      	ldr	r3, [r4, #8]
 80029f4:	bf0c      	ite	eq
 80029f6:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029fa:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 80029fe:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a00:	68e3      	ldr	r3, [r4, #12]
 8002a02:	6825      	ldr	r5, [r4, #0]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d024      	beq.n	8002a52 <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a08:	6868      	ldr	r0, [r5, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0a:	2200      	movs	r2, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a0c:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_I2C_Init+0xb8>)
  hi2c->State = HAL_I2C_STATE_READY;
 8002a0e:	2120      	movs	r1, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a10:	4303      	orrs	r3, r0
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8002a12:	4610      	mov	r0, r2
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a14:	606b      	str	r3, [r5, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a16:	6825      	ldr	r5, [r4, #0]
 8002a18:	68eb      	ldr	r3, [r5, #12]
 8002a1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a1e:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a20:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
 8002a24:	432b      	orrs	r3, r5
 8002a26:	69a5      	ldr	r5, [r4, #24]
 8002a28:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002a2c:	6825      	ldr	r5, [r4, #0]
 8002a2e:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a30:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8002a34:	432b      	orrs	r3, r5
 8002a36:	6825      	ldr	r5, [r4, #0]
 8002a38:	602b      	str	r3, [r5, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002a3a:	6825      	ldr	r5, [r4, #0]
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	602b      	str	r3, [r5, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a44:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4a:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8002a50:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a56:	606b      	str	r3, [r5, #4]
 8002a58:	6825      	ldr	r5, [r4, #0]
 8002a5a:	e7d5      	b.n	8002a08 <HAL_I2C_Init+0x54>
    hi2c->Lock = HAL_UNLOCKED;
 8002a5c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002a60:	f008 fe90 	bl	800b784 <HAL_I2C_MspInit>
 8002a64:	e7b0      	b.n	80029c8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002a66:	2001      	movs	r0, #1
}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	02008000 	.word	0x02008000

08002a70 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a70:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	2a20      	cmp	r2, #32
 8002a78:	d126      	bne.n	8002ac8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002a7a:	4603      	mov	r3, r0
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002a80:	2801      	cmp	r0, #1
 8002a82:	d021      	beq.n	8002ac8 <HAL_I2CEx_ConfigAnalogFilter+0x58>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a84:	2024      	movs	r0, #36	; 0x24
{
 8002a86:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(hi2c);
 8002a88:	2401      	movs	r4, #1

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a8a:	681e      	ldr	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a90:	2500      	movs	r5, #0
    __HAL_LOCK(hi2c);
 8002a92:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002a96:	6834      	ldr	r4, [r6, #0]

    return HAL_OK;
 8002a98:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 8002a9a:	f024 0401 	bic.w	r4, r4, #1
 8002a9e:	6034      	str	r4, [r6, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002aa0:	681e      	ldr	r6, [r3, #0]
 8002aa2:	6834      	ldr	r4, [r6, #0]
 8002aa4:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002aa8:	6034      	str	r4, [r6, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002aaa:	681e      	ldr	r6, [r3, #0]
 8002aac:	6834      	ldr	r4, [r6, #0]
 8002aae:	4321      	orrs	r1, r4
 8002ab0:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002ab2:	681c      	ldr	r4, [r3, #0]
 8002ab4:	6821      	ldr	r1, [r4, #0]
 8002ab6:	f041 0101 	orr.w	r1, r1, #1
 8002aba:	6021      	str	r1, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002ac0:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002ac4:	bc70      	pop	{r4, r5, r6}
 8002ac6:	4770      	bx	lr
    return HAL_BUSY;
 8002ac8:	2002      	movs	r0, #2
}
 8002aca:	4770      	bx	lr

08002acc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002acc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	2a20      	cmp	r2, #32
 8002ad4:	d124      	bne.n	8002b20 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002ad6:	4603      	mov	r3, r0
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002adc:	2801      	cmp	r0, #1
 8002ade:	d01f      	beq.n	8002b20 <HAL_I2CEx_ConfigDigitalFilter+0x54>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	2024      	movs	r0, #36	; 0x24
{
 8002ae2:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(hi2c);
 8002ae4:	2401      	movs	r4, #1

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ae6:	681e      	ldr	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aec:	2500      	movs	r5, #0
    __HAL_LOCK(hi2c);
 8002aee:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002af2:	6834      	ldr	r4, [r6, #0]

    return HAL_OK;
 8002af4:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 8002af6:	f024 0401 	bic.w	r4, r4, #1
 8002afa:	6034      	str	r4, [r6, #0]
    tmpreg = hi2c->Instance->CR1;
 8002afc:	681e      	ldr	r6, [r3, #0]
 8002afe:	6834      	ldr	r4, [r6, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002b00:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002b04:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002b08:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002b0a:	681c      	ldr	r4, [r3, #0]
 8002b0c:	6821      	ldr	r1, [r4, #0]
 8002b0e:	f041 0101 	orr.w	r1, r1, #1
 8002b12:	6021      	str	r1, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002b18:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002b1c:	bc70      	pop	{r4, r5, r6}
 8002b1e:	4770      	bx	lr
    return HAL_BUSY;
 8002b20:	2002      	movs	r0, #2
}
 8002b22:	4770      	bx	lr

08002b24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b24:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <HAL_PWREx_ConfigSupply+0x48>)
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	0752      	lsls	r2, r2, #29
 8002b2c:	d406      	bmi.n	8002b3c <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b34:	1a18      	subs	r0, r3, r0
 8002b36:	bf18      	it	ne
 8002b38:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002b3a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b3c:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b3e:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b40:	f022 0207 	bic.w	r2, r2, #7
 8002b44:	4310      	orrs	r0, r2
 8002b46:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8002b48:	f7fd fc2a 	bl	80003a0 <HAL_GetTick>
 8002b4c:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b4e:	e005      	b.n	8002b5c <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b50:	f7fd fc26 	bl	80003a0 <HAL_GetTick>
 8002b54:	1b40      	subs	r0, r0, r5
 8002b56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b5a:	d804      	bhi.n	8002b66 <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b5c:	6863      	ldr	r3, [r4, #4]
 8002b5e:	049b      	lsls	r3, r3, #18
 8002b60:	d5f6      	bpl.n	8002b50 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8002b62:	2000      	movs	r0, #0
}
 8002b64:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002b66:	2001      	movs	r0, #1
}
 8002b68:	bd38      	pop	{r3, r4, r5, pc}
 8002b6a:	bf00      	nop
 8002b6c:	58024800 	.word	0x58024800

08002b70 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b70:	2800      	cmp	r0, #0
 8002b72:	f000 8188 	beq.w	8002e86 <HAL_RCC_OscConfig+0x316>
{
 8002b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b78:	6803      	ldr	r3, [r0, #0]
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	07d9      	lsls	r1, r3, #31
 8002b7e:	d52e      	bpl.n	8002bde <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b80:	49b2      	ldr	r1, [pc, #712]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002b82:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b84:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b86:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b8a:	2a10      	cmp	r2, #16
 8002b8c:	f000 8102 	beq.w	8002d94 <HAL_RCC_OscConfig+0x224>
 8002b90:	2a18      	cmp	r2, #24
 8002b92:	f000 80fa 	beq.w	8002d8a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b96:	6863      	ldr	r3, [r4, #4]
 8002b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9c:	f000 8122 	beq.w	8002de4 <HAL_RCC_OscConfig+0x274>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f040 8198 	bne.w	8002ed6 <HAL_RCC_OscConfig+0x366>
 8002ba6:	4ba9      	ldr	r3, [pc, #676]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb8:	6863      	ldr	r3, [r4, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8155 	beq.w	8002e6a <HAL_RCC_OscConfig+0x2fa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fd fbee 	bl	80003a0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bc4:	4da1      	ldr	r5, [pc, #644]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
        tickstart = HAL_GetTick();
 8002bc6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bc8:	e005      	b.n	8002bd6 <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bca:	f7fd fbe9 	bl	80003a0 <HAL_GetTick>
 8002bce:	1b80      	subs	r0, r0, r6
 8002bd0:	2864      	cmp	r0, #100	; 0x64
 8002bd2:	f200 8148 	bhi.w	8002e66 <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bd6:	682b      	ldr	r3, [r5, #0]
 8002bd8:	039f      	lsls	r7, r3, #14
 8002bda:	d5f6      	bpl.n	8002bca <HAL_RCC_OscConfig+0x5a>
 8002bdc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	0799      	lsls	r1, r3, #30
 8002be0:	f100 808a 	bmi.w	8002cf8 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002be4:	06d9      	lsls	r1, r3, #27
 8002be6:	d530      	bpl.n	8002c4a <HAL_RCC_OscConfig+0xda>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be8:	4a98      	ldr	r2, [pc, #608]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002bea:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bec:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	f000 80de 	beq.w	8002db4 <HAL_RCC_OscConfig+0x244>
 8002bf8:	2b18      	cmp	r3, #24
 8002bfa:	f000 80d6 	beq.w	8002daa <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002bfe:	69e3      	ldr	r3, [r4, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8176 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x382>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c06:	4b91      	ldr	r3, [pc, #580]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002c08:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c0a:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8002c0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c12:	f7fd fbc5 	bl	80003a0 <HAL_GetTick>
 8002c16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c18:	e005      	b.n	8002c26 <HAL_RCC_OscConfig+0xb6>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c1a:	f7fd fbc1 	bl	80003a0 <HAL_GetTick>
 8002c1e:	1b80      	subs	r0, r0, r6
 8002c20:	2802      	cmp	r0, #2
 8002c22:	f200 8120 	bhi.w	8002e66 <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c26:	682b      	ldr	r3, [r5, #0]
 8002c28:	05db      	lsls	r3, r3, #23
 8002c2a:	d5f6      	bpl.n	8002c1a <HAL_RCC_OscConfig+0xaa>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c2c:	f7fd fbd0 	bl	80003d0 <HAL_GetREVID>
 8002c30:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c34:	4298      	cmp	r0, r3
 8002c36:	f200 823c 	bhi.w	80030b2 <HAL_RCC_OscConfig+0x542>
 8002c3a:	686b      	ldr	r3, [r5, #4]
 8002c3c:	6a22      	ldr	r2, [r4, #32]
 8002c3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c42:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002c46:	606b      	str	r3, [r5, #4]
 8002c48:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4a:	071d      	lsls	r5, r3, #28
 8002c4c:	d517      	bpl.n	8002c7e <HAL_RCC_OscConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c4e:	6963      	ldr	r3, [r4, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 811a 	beq.w	8002e8a <HAL_RCC_OscConfig+0x31a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c56:	4b7d      	ldr	r3, [pc, #500]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002c58:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c5a:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002c62:	f7fd fb9d 	bl	80003a0 <HAL_GetTick>
 8002c66:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c68:	e005      	b.n	8002c76 <HAL_RCC_OscConfig+0x106>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c6a:	f7fd fb99 	bl	80003a0 <HAL_GetTick>
 8002c6e:	1b80      	subs	r0, r0, r6
 8002c70:	2802      	cmp	r0, #2
 8002c72:	f200 80f8 	bhi.w	8002e66 <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c76:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002c78:	0798      	lsls	r0, r3, #30
 8002c7a:	d5f6      	bpl.n	8002c6a <HAL_RCC_OscConfig+0xfa>
 8002c7c:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c7e:	069a      	lsls	r2, r3, #26
 8002c80:	d517      	bpl.n	8002cb2 <HAL_RCC_OscConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c82:	69a3      	ldr	r3, [r4, #24]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8113 	beq.w	8002eb0 <HAL_RCC_OscConfig+0x340>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c8a:	4b70      	ldr	r3, [pc, #448]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002c8c:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c8e:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8002c90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c94:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002c96:	f7fd fb83 	bl	80003a0 <HAL_GetTick>
 8002c9a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c9c:	e005      	b.n	8002caa <HAL_RCC_OscConfig+0x13a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c9e:	f7fd fb7f 	bl	80003a0 <HAL_GetTick>
 8002ca2:	1b80      	subs	r0, r0, r6
 8002ca4:	2802      	cmp	r0, #2
 8002ca6:	f200 80de 	bhi.w	8002e66 <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002caa:	682b      	ldr	r3, [r5, #0]
 8002cac:	049f      	lsls	r7, r3, #18
 8002cae:	d5f6      	bpl.n	8002c9e <HAL_RCC_OscConfig+0x12e>
 8002cb0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb2:	0759      	lsls	r1, r3, #29
 8002cb4:	f100 809c 	bmi.w	8002df0 <HAL_RCC_OscConfig+0x280>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002cba:	b1d8      	cbz	r0, 8002cf4 <HAL_RCC_OscConfig+0x184>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cbc:	4b63      	ldr	r3, [pc, #396]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002cc4:	2a18      	cmp	r2, #24
 8002cc6:	f000 81b5 	beq.w	8003034 <HAL_RCC_OscConfig+0x4c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cca:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ccc:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cce:	f000 8147 	beq.w	8002f60 <HAL_RCC_OscConfig+0x3f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd6:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8002cd8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cda:	f7fd fb61 	bl	80003a0 <HAL_GetTick>
 8002cde:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ce0:	e005      	b.n	8002cee <HAL_RCC_OscConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7fd fb5d 	bl	80003a0 <HAL_GetTick>
 8002ce6:	1b40      	subs	r0, r0, r5
 8002ce8:	2802      	cmp	r0, #2
 8002cea:	f200 80bc 	bhi.w	8002e66 <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	019b      	lsls	r3, r3, #6
 8002cf2:	d4f6      	bmi.n	8002ce2 <HAL_RCC_OscConfig+0x172>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002cf4:	2000      	movs	r0, #0
}
 8002cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf8:	4a54      	ldr	r2, [pc, #336]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002cfa:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cfc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002cfe:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002d02:	d02b      	beq.n	8002d5c <HAL_RCC_OscConfig+0x1ec>
 8002d04:	2b18      	cmp	r3, #24
 8002d06:	d027      	beq.n	8002d58 <HAL_RCC_OscConfig+0x1e8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d08:	68e2      	ldr	r2, [r4, #12]
 8002d0a:	2a00      	cmp	r2, #0
 8002d0c:	f000 8105 	beq.w	8002f1a <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d10:	494e      	ldr	r1, [pc, #312]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002d12:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d14:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d16:	f023 0319 	bic.w	r3, r3, #25
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8002d1e:	f7fd fb3f 	bl	80003a0 <HAL_GetTick>
 8002d22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d24:	e005      	b.n	8002d32 <HAL_RCC_OscConfig+0x1c2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d26:	f7fd fb3b 	bl	80003a0 <HAL_GetTick>
 8002d2a:	1b80      	subs	r0, r0, r6
 8002d2c:	2802      	cmp	r0, #2
 8002d2e:	f200 809a 	bhi.w	8002e66 <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d32:	682b      	ldr	r3, [r5, #0]
 8002d34:	075f      	lsls	r7, r3, #29
 8002d36:	d5f6      	bpl.n	8002d26 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	f7fd fb4a 	bl	80003d0 <HAL_GetREVID>
 8002d3c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d40:	6922      	ldr	r2, [r4, #16]
 8002d42:	4298      	cmp	r0, r3
 8002d44:	686b      	ldr	r3, [r5, #4]
 8002d46:	f200 81bd 	bhi.w	80030c4 <HAL_RCC_OscConfig+0x554>
 8002d4a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d4e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002d52:	606b      	str	r3, [r5, #4]
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	e745      	b.n	8002be4 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d58:	0792      	lsls	r2, r2, #30
 8002d5a:	d1d5      	bne.n	8002d08 <HAL_RCC_OscConfig+0x198>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d5c:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	075b      	lsls	r3, r3, #29
 8002d62:	d501      	bpl.n	8002d68 <HAL_RCC_OscConfig+0x1f8>
 8002d64:	68e3      	ldr	r3, [r4, #12]
 8002d66:	b1f3      	cbz	r3, 8002da6 <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	f7fd fb32 	bl	80003d0 <HAL_GetREVID>
 8002d6c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d70:	4a36      	ldr	r2, [pc, #216]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002d72:	4298      	cmp	r0, r3
 8002d74:	6921      	ldr	r1, [r4, #16]
 8002d76:	6853      	ldr	r3, [r2, #4]
 8002d78:	f200 80e3 	bhi.w	8002f42 <HAL_RCC_OscConfig+0x3d2>
 8002d7c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d80:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002d84:	6053      	str	r3, [r2, #4]
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	e72c      	b.n	8002be4 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d8a:	f001 0103 	and.w	r1, r1, #3
 8002d8e:	2902      	cmp	r1, #2
 8002d90:	f47f af01 	bne.w	8002b96 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	4a2d      	ldr	r2, [pc, #180]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	0392      	lsls	r2, r2, #14
 8002d9a:	f57f af20 	bpl.w	8002bde <HAL_RCC_OscConfig+0x6e>
 8002d9e:	6862      	ldr	r2, [r4, #4]
 8002da0:	2a00      	cmp	r2, #0
 8002da2:	f47f af1c 	bne.w	8002bde <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8002da6:	2001      	movs	r0, #1
}
 8002da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002daa:	f002 0203 	and.w	r2, r2, #3
 8002dae:	2a01      	cmp	r2, #1
 8002db0:	f47f af25 	bne.w	8002bfe <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002db4:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	05da      	lsls	r2, r3, #23
 8002dba:	d502      	bpl.n	8002dc2 <HAL_RCC_OscConfig+0x252>
 8002dbc:	69e3      	ldr	r3, [r4, #28]
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	d1f1      	bne.n	8002da6 <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dc2:	f7fd fb05 	bl	80003d0 <HAL_GetREVID>
 8002dc6:	f241 0303 	movw	r3, #4099	; 0x1003
 8002dca:	4a20      	ldr	r2, [pc, #128]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002dcc:	4298      	cmp	r0, r3
 8002dce:	6a21      	ldr	r1, [r4, #32]
 8002dd0:	f200 80be 	bhi.w	8002f50 <HAL_RCC_OscConfig+0x3e0>
 8002dd4:	6853      	ldr	r3, [r2, #4]
 8002dd6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002dda:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8002dde:	6053      	str	r3, [r2, #4]
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	e732      	b.n	8002c4a <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de4:	4a19      	ldr	r2, [pc, #100]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002de6:	6813      	ldr	r3, [r2, #0]
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e6e3      	b.n	8002bb8 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 8002df0:	4b17      	ldr	r3, [pc, #92]	; (8002e50 <HAL_RCC_OscConfig+0x2e0>)
 8002df2:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df4:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8002df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfa:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002dfc:	f7fd fad0 	bl	80003a0 <HAL_GetTick>
 8002e00:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e02:	e004      	b.n	8002e0e <HAL_RCC_OscConfig+0x29e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e04:	f7fd facc 	bl	80003a0 <HAL_GetTick>
 8002e08:	1b80      	subs	r0, r0, r6
 8002e0a:	2864      	cmp	r0, #100	; 0x64
 8002e0c:	d82b      	bhi.n	8002e66 <HAL_RCC_OscConfig+0x2f6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e0e:	682b      	ldr	r3, [r5, #0]
 8002e10:	05da      	lsls	r2, r3, #23
 8002e12:	d5f7      	bpl.n	8002e04 <HAL_RCC_OscConfig+0x294>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e14:	68a3      	ldr	r3, [r4, #8]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	f000 815b 	beq.w	80030d2 <HAL_RCC_OscConfig+0x562>
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 815e 	bne.w	80030de <HAL_RCC_OscConfig+0x56e>
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
 8002e24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	671a      	str	r2, [r3, #112]	; 0x70
 8002e2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e2e:	f022 0204 	bic.w	r2, r2, #4
 8002e32:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e34:	68a3      	ldr	r3, [r4, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 812a 	beq.w	8003090 <HAL_RCC_OscConfig+0x520>
      tickstart = HAL_GetTick();
 8002e3c:	f7fd fab0 	bl	80003a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e40:	4d02      	ldr	r5, [pc, #8]	; (8002e4c <HAL_RCC_OscConfig+0x2dc>)
      tickstart = HAL_GetTick();
 8002e42:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e48:	e009      	b.n	8002e5e <HAL_RCC_OscConfig+0x2ee>
 8002e4a:	bf00      	nop
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7fd faa4 	bl	80003a0 <HAL_GetTick>
 8002e58:	1bc0      	subs	r0, r0, r7
 8002e5a:	42b0      	cmp	r0, r6
 8002e5c:	d803      	bhi.n	8002e66 <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e5e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002e60:	079b      	lsls	r3, r3, #30
 8002e62:	d5f7      	bpl.n	8002e54 <HAL_RCC_OscConfig+0x2e4>
 8002e64:	e728      	b.n	8002cb8 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 8002e66:	2003      	movs	r0, #3
}
 8002e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8002e6a:	f7fd fa99 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e6e:	4da2      	ldr	r5, [pc, #648]	; (80030f8 <HAL_RCC_OscConfig+0x588>)
        tickstart = HAL_GetTick();
 8002e70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e72:	e004      	b.n	8002e7e <HAL_RCC_OscConfig+0x30e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e74:	f7fd fa94 	bl	80003a0 <HAL_GetTick>
 8002e78:	1b80      	subs	r0, r0, r6
 8002e7a:	2864      	cmp	r0, #100	; 0x64
 8002e7c:	d8f3      	bhi.n	8002e66 <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e7e:	682b      	ldr	r3, [r5, #0]
 8002e80:	0398      	lsls	r0, r3, #14
 8002e82:	d4f7      	bmi.n	8002e74 <HAL_RCC_OscConfig+0x304>
 8002e84:	e6aa      	b.n	8002bdc <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8002e86:	2001      	movs	r0, #1
}
 8002e88:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8002e8a:	4b9b      	ldr	r3, [pc, #620]	; (80030f8 <HAL_RCC_OscConfig+0x588>)
 8002e8c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e8e:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002e96:	f7fd fa83 	bl	80003a0 <HAL_GetTick>
 8002e9a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e9c:	e004      	b.n	8002ea8 <HAL_RCC_OscConfig+0x338>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7fd fa7f 	bl	80003a0 <HAL_GetTick>
 8002ea2:	1b80      	subs	r0, r0, r6
 8002ea4:	2802      	cmp	r0, #2
 8002ea6:	d8de      	bhi.n	8002e66 <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ea8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002eaa:	0799      	lsls	r1, r3, #30
 8002eac:	d4f7      	bmi.n	8002e9e <HAL_RCC_OscConfig+0x32e>
 8002eae:	e6e5      	b.n	8002c7c <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSI48_DISABLE();
 8002eb0:	4b91      	ldr	r3, [pc, #580]	; (80030f8 <HAL_RCC_OscConfig+0x588>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eb4:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8002eb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002ebc:	f7fd fa70 	bl	80003a0 <HAL_GetTick>
 8002ec0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ec2:	e004      	b.n	8002ece <HAL_RCC_OscConfig+0x35e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ec4:	f7fd fa6c 	bl	80003a0 <HAL_GetTick>
 8002ec8:	1b80      	subs	r0, r0, r6
 8002eca:	2802      	cmp	r0, #2
 8002ecc:	d8cb      	bhi.n	8002e66 <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ece:	682b      	ldr	r3, [r5, #0]
 8002ed0:	0498      	lsls	r0, r3, #18
 8002ed2:	d4f7      	bmi.n	8002ec4 <HAL_RCC_OscConfig+0x354>
 8002ed4:	e6ec      	b.n	8002cb0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eda:	4b87      	ldr	r3, [pc, #540]	; (80030f8 <HAL_RCC_OscConfig+0x588>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	f47f ae64 	bne.w	8002baa <HAL_RCC_OscConfig+0x3a>
 8002ee2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	e662      	b.n	8002bb8 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_CSI_DISABLE();
 8002ef2:	4b81      	ldr	r3, [pc, #516]	; (80030f8 <HAL_RCC_OscConfig+0x588>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ef6:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8002ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002efc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002efe:	f7fd fa4f 	bl	80003a0 <HAL_GetTick>
 8002f02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f04:	e004      	b.n	8002f10 <HAL_RCC_OscConfig+0x3a0>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f06:	f7fd fa4b 	bl	80003a0 <HAL_GetTick>
 8002f0a:	1b80      	subs	r0, r0, r6
 8002f0c:	2802      	cmp	r0, #2
 8002f0e:	d8aa      	bhi.n	8002e66 <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	05df      	lsls	r7, r3, #23
 8002f14:	d4f7      	bmi.n	8002f06 <HAL_RCC_OscConfig+0x396>
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	e697      	b.n	8002c4a <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b77      	ldr	r3, [pc, #476]	; (80030f8 <HAL_RCC_OscConfig+0x588>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f1e:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f26:	f7fd fa3b 	bl	80003a0 <HAL_GetTick>
 8002f2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f2c:	e004      	b.n	8002f38 <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7fd fa37 	bl	80003a0 <HAL_GetTick>
 8002f32:	1b80      	subs	r0, r0, r6
 8002f34:	2802      	cmp	r0, #2
 8002f36:	d896      	bhi.n	8002e66 <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f38:	682b      	ldr	r3, [r5, #0]
 8002f3a:	0758      	lsls	r0, r3, #29
 8002f3c:	d4f7      	bmi.n	8002f2e <HAL_RCC_OscConfig+0x3be>
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	e650      	b.n	8002be4 <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f42:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f46:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f4a:	6053      	str	r3, [r2, #4]
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	e649      	b.n	8002be4 <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f50:	68d3      	ldr	r3, [r2, #12]
 8002f52:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002f56:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f5a:	60d3      	str	r3, [r2, #12]
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	e674      	b.n	8002c4a <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PLL_DISABLE();
 8002f60:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f64:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8002f66:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f68:	f7fd fa1a 	bl	80003a0 <HAL_GetTick>
 8002f6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f6e:	e005      	b.n	8002f7c <HAL_RCC_OscConfig+0x40c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fd fa16 	bl	80003a0 <HAL_GetTick>
 8002f74:	1b80      	subs	r0, r0, r6
 8002f76:	2802      	cmp	r0, #2
 8002f78:	f63f af75 	bhi.w	8002e66 <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f7c:	682b      	ldr	r3, [r5, #0]
 8002f7e:	0199      	lsls	r1, r3, #6
 8002f80:	d4f6      	bmi.n	8002f70 <HAL_RCC_OscConfig+0x400>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f82:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002f84:	4b5d      	ldr	r3, [pc, #372]	; (80030fc <HAL_RCC_OscConfig+0x58c>)
 8002f86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002f88:	4013      	ands	r3, r2
 8002f8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f8c:	495c      	ldr	r1, [pc, #368]	; (8003100 <HAL_RCC_OscConfig+0x590>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8e:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f90:	4e59      	ldr	r6, [pc, #356]	; (80030f8 <HAL_RCC_OscConfig+0x588>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f92:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002f96:	62ab      	str	r3, [r5, #40]	; 0x28
 8002f98:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8002f9a:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8002f9e:	3f01      	subs	r7, #1
 8002fa0:	1e50      	subs	r0, r2, #1
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002fa6:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8002faa:	025b      	lsls	r3, r3, #9
 8002fac:	0400      	lsls	r0, r0, #16
 8002fae:	3a01      	subs	r2, #1
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8002fb6:	0612      	lsls	r2, r2, #24
 8002fb8:	4303      	orrs	r3, r0
 8002fba:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002fbe:	433b      	orrs	r3, r7
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fc4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fcc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002fce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002fd0:	4011      	ands	r1, r2
 8002fd2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002fd6:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fd8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002fda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002fdc:	f023 030c 	bic.w	r3, r3, #12
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fe4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002fe6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002fe8:	f023 0302 	bic.w	r3, r3, #2
 8002fec:	4313      	orrs	r3, r2
 8002fee:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ff0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ff8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ffe:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003000:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003002:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003006:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003008:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003010:	682b      	ldr	r3, [r5, #0]
 8003012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003016:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003018:	f7fd f9c2 	bl	80003a0 <HAL_GetTick>
 800301c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800301e:	e005      	b.n	800302c <HAL_RCC_OscConfig+0x4bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003020:	f7fd f9be 	bl	80003a0 <HAL_GetTick>
 8003024:	1b00      	subs	r0, r0, r4
 8003026:	2802      	cmp	r0, #2
 8003028:	f63f af1d 	bhi.w	8002e66 <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800302c:	6833      	ldr	r3, [r6, #0]
 800302e:	019a      	lsls	r2, r3, #6
 8003030:	d5f6      	bpl.n	8003020 <HAL_RCC_OscConfig+0x4b0>
 8003032:	e65f      	b.n	8002cf4 <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003034:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003038:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303a:	f43f ae5c 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003042:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003044:	428b      	cmp	r3, r1
 8003046:	f47f aeae 	bne.w	8002da6 <HAL_RCC_OscConfig+0x236>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800304a:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003050:	429a      	cmp	r2, r3
 8003052:	f47f aea8 	bne.w	8002da6 <HAL_RCC_OscConfig+0x236>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003056:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003058:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800305c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	f47f aea1 	bne.w	8002da6 <HAL_RCC_OscConfig+0x236>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003064:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003066:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800306a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	f47f ae9a 	bne.w	8002da6 <HAL_RCC_OscConfig+0x236>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003074:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8003078:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	f47f ae93 	bne.w	8002da6 <HAL_RCC_OscConfig+0x236>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003080:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003082:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8003086:	3801      	subs	r0, #1
    return HAL_ERROR;
 8003088:	1a28      	subs	r0, r5, r0
 800308a:	bf18      	it	ne
 800308c:	2001      	movne	r0, #1
 800308e:	e632      	b.n	8002cf6 <HAL_RCC_OscConfig+0x186>
      tickstart = HAL_GetTick();
 8003090:	f7fd f986 	bl	80003a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003094:	4d18      	ldr	r5, [pc, #96]	; (80030f8 <HAL_RCC_OscConfig+0x588>)
      tickstart = HAL_GetTick();
 8003096:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800309c:	e005      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7fd f97f 	bl	80003a0 <HAL_GetTick>
 80030a2:	1bc0      	subs	r0, r0, r7
 80030a4:	42b0      	cmp	r0, r6
 80030a6:	f63f aede 	bhi.w	8002e66 <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030ac:	0798      	lsls	r0, r3, #30
 80030ae:	d4f6      	bmi.n	800309e <HAL_RCC_OscConfig+0x52e>
 80030b0:	e602      	b.n	8002cb8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030b2:	68eb      	ldr	r3, [r5, #12]
 80030b4:	6a22      	ldr	r2, [r4, #32]
 80030b6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80030ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80030be:	60eb      	str	r3, [r5, #12]
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	e5c2      	b.n	8002c4a <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80030c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80030cc:	606b      	str	r3, [r5, #4]
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	e588      	b.n	8002be4 <HAL_RCC_OscConfig+0x74>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d2:	4a09      	ldr	r2, [pc, #36]	; (80030f8 <HAL_RCC_OscConfig+0x588>)
 80030d4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
 80030dc:	e6aa      	b.n	8002e34 <HAL_RCC_OscConfig+0x2c4>
 80030de:	2b05      	cmp	r3, #5
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_OscConfig+0x588>)
 80030e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030e4:	f47f ae9f 	bne.w	8002e26 <HAL_RCC_OscConfig+0x2b6>
 80030e8:	f042 0204 	orr.w	r2, r2, #4
 80030ec:	671a      	str	r2, [r3, #112]	; 0x70
 80030ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030f0:	f042 0201 	orr.w	r2, r2, #1
 80030f4:	671a      	str	r2, [r3, #112]	; 0x70
 80030f6:	e69d      	b.n	8002e34 <HAL_RCC_OscConfig+0x2c4>
 80030f8:	58024400 	.word	0x58024400
 80030fc:	fffffc0c 	.word	0xfffffc0c
 8003100:	ffff0007 	.word	0xffff0007

08003104 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003104:	4a3e      	ldr	r2, [pc, #248]	; (8003200 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003106:	6913      	ldr	r3, [r2, #16]
 8003108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800310c:	2b10      	cmp	r3, #16
 800310e:	d04f      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0xac>
 8003110:	2b18      	cmp	r3, #24
 8003112:	d00b      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x28>
 8003114:	b10b      	cbz	r3, 800311a <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003116:	483b      	ldr	r0, [pc, #236]	; (8003204 <HAL_RCC_GetSysClockFreq+0x100>)
 8003118:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800311a:	6813      	ldr	r3, [r2, #0]
 800311c:	0699      	lsls	r1, r3, #26
 800311e:	d549      	bpl.n	80031b4 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003120:	6813      	ldr	r3, [r2, #0]
 8003122:	4839      	ldr	r0, [pc, #228]	; (8003208 <HAL_RCC_GetSysClockFreq+0x104>)
 8003124:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003128:	40d8      	lsrs	r0, r3
 800312a:	4770      	bx	lr
{
 800312c:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800312e:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003130:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003132:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003134:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003138:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 800313a:	b3b0      	cbz	r0, 80031aa <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800313c:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003140:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003144:	f001 0103 	and.w	r1, r1, #3
 8003148:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800314c:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 8003150:	2901      	cmp	r1, #1
 8003152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003156:	ee07 3a10 	vmov	s14, r3
 800315a:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 800315e:	d002      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0x62>
 8003160:	d32d      	bcc.n	80031be <HAL_RCC_GetSysClockFreq+0xba>
 8003162:	2902      	cmp	r1, #2
 8003164:	d028      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003166:	eddf 5a29 	vldr	s11, [pc, #164]	; 800320c <HAL_RCC_GetSysClockFreq+0x108>
 800316a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800316e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800317c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003180:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003184:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003188:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800318c:	4b1c      	ldr	r3, [pc, #112]	; (8003200 <HAL_RCC_GetSysClockFreq+0xfc>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003194:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800319e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031a6:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80031aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031ae:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80031b0:	4817      	ldr	r0, [pc, #92]	; (8003210 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031b2:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031b4:	4814      	ldr	r0, [pc, #80]	; (8003208 <HAL_RCC_GetSysClockFreq+0x104>)
}
 80031b6:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031b8:	eddf 5a16 	vldr	s11, [pc, #88]	; 8003214 <HAL_RCC_GetSysClockFreq+0x110>
 80031bc:	e7d5      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031be:	6813      	ldr	r3, [r2, #0]
 80031c0:	069b      	lsls	r3, r3, #26
 80031c2:	d51a      	bpl.n	80031fa <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031c4:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031c6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031ca:	490f      	ldr	r1, [pc, #60]	; (8003208 <HAL_RCC_GetSysClockFreq+0x104>)
 80031cc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031d2:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d8:	ee06 1a90 	vmov	s13, r1
 80031dc:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 80031e0:	ee06 3a90 	vmov	s13, r3
 80031e4:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 80031e8:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80031ec:	ee76 7a05 	vadd.f32	s15, s12, s10
 80031f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031f4:	ee26 7a87 	vmul.f32	s14, s13, s14
 80031f8:	e7c8      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031fa:	eddf 5a07 	vldr	s11, [pc, #28]	; 8003218 <HAL_RCC_GetSysClockFreq+0x114>
 80031fe:	e7b4      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x66>
 8003200:	58024400 	.word	0x58024400
 8003204:	003d0900 	.word	0x003d0900
 8003208:	03d09000 	.word	0x03d09000
 800320c:	4a742400 	.word	0x4a742400
 8003210:	017d7840 	.word	0x017d7840
 8003214:	4bbebc20 	.word	0x4bbebc20
 8003218:	4c742400 	.word	0x4c742400

0800321c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800321c:	b178      	cbz	r0, 800323e <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800321e:	4a91      	ldr	r2, [pc, #580]	; (8003464 <HAL_RCC_ClockConfig+0x248>)
 8003220:	6813      	ldr	r3, [r2, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	428b      	cmp	r3, r1
 8003228:	d20b      	bcs.n	8003242 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	6813      	ldr	r3, [r2, #0]
 800322c:	f023 030f 	bic.w	r3, r3, #15
 8003230:	430b      	orrs	r3, r1
 8003232:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003234:	6813      	ldr	r3, [r2, #0]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	428b      	cmp	r3, r1
 800323c:	d001      	beq.n	8003242 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800323e:	2001      	movs	r0, #1
}
 8003240:	4770      	bx	lr
{
 8003242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003246:	6803      	ldr	r3, [r0, #0]
 8003248:	075f      	lsls	r7, r3, #29
 800324a:	d50c      	bpl.n	8003266 <HAL_RCC_ClockConfig+0x4a>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800324c:	4c86      	ldr	r4, [pc, #536]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
 800324e:	6905      	ldr	r5, [r0, #16]
 8003250:	69a2      	ldr	r2, [r4, #24]
 8003252:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003256:	4295      	cmp	r5, r2
 8003258:	d905      	bls.n	8003266 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800325a:	69a3      	ldr	r3, [r4, #24]
 800325c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003260:	432b      	orrs	r3, r5
 8003262:	61a3      	str	r3, [r4, #24]
 8003264:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003266:	071e      	lsls	r6, r3, #28
 8003268:	d50c      	bpl.n	8003284 <HAL_RCC_ClockConfig+0x68>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800326a:	4c7f      	ldr	r4, [pc, #508]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
 800326c:	6945      	ldr	r5, [r0, #20]
 800326e:	69e2      	ldr	r2, [r4, #28]
 8003270:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003274:	4295      	cmp	r5, r2
 8003276:	d905      	bls.n	8003284 <HAL_RCC_ClockConfig+0x68>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003278:	69e3      	ldr	r3, [r4, #28]
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	432b      	orrs	r3, r5
 8003280:	61e3      	str	r3, [r4, #28]
 8003282:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003284:	06dd      	lsls	r5, r3, #27
 8003286:	d50c      	bpl.n	80032a2 <HAL_RCC_ClockConfig+0x86>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003288:	4c77      	ldr	r4, [pc, #476]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
 800328a:	6985      	ldr	r5, [r0, #24]
 800328c:	69e2      	ldr	r2, [r4, #28]
 800328e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003292:	4295      	cmp	r5, r2
 8003294:	d905      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x86>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003296:	69e3      	ldr	r3, [r4, #28]
 8003298:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800329c:	432b      	orrs	r3, r5
 800329e:	61e3      	str	r3, [r4, #28]
 80032a0:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032a2:	069c      	lsls	r4, r3, #26
 80032a4:	d50c      	bpl.n	80032c0 <HAL_RCC_ClockConfig+0xa4>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032a6:	4c70      	ldr	r4, [pc, #448]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
 80032a8:	69c5      	ldr	r5, [r0, #28]
 80032aa:	6a22      	ldr	r2, [r4, #32]
 80032ac:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80032b0:	4295      	cmp	r5, r2
 80032b2:	d905      	bls.n	80032c0 <HAL_RCC_ClockConfig+0xa4>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032b4:	6a23      	ldr	r3, [r4, #32]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	432b      	orrs	r3, r5
 80032bc:	6223      	str	r3, [r4, #32]
 80032be:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c0:	079a      	lsls	r2, r3, #30
 80032c2:	4604      	mov	r4, r0
 80032c4:	460d      	mov	r5, r1
 80032c6:	d512      	bpl.n	80032ee <HAL_RCC_ClockConfig+0xd2>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032c8:	4867      	ldr	r0, [pc, #412]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
 80032ca:	68e1      	ldr	r1, [r4, #12]
 80032cc:	6982      	ldr	r2, [r0, #24]
 80032ce:	f002 020f 	and.w	r2, r2, #15
 80032d2:	4291      	cmp	r1, r2
 80032d4:	d93d      	bls.n	8003352 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d6:	6983      	ldr	r3, [r0, #24]
 80032d8:	f023 030f 	bic.w	r3, r3, #15
 80032dc:	4319      	orrs	r1, r3
 80032de:	6181      	str	r1, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	07df      	lsls	r7, r3, #31
 80032e4:	d405      	bmi.n	80032f2 <HAL_RCC_ClockConfig+0xd6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e6:	079f      	lsls	r7, r3, #30
 80032e8:	d540      	bpl.n	800336c <HAL_RCC_ClockConfig+0x150>
 80032ea:	68e1      	ldr	r1, [r4, #12]
 80032ec:	e033      	b.n	8003356 <HAL_RCC_ClockConfig+0x13a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ee:	07db      	lsls	r3, r3, #31
 80032f0:	d53c      	bpl.n	800336c <HAL_RCC_ClockConfig+0x150>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80032f2:	4a5d      	ldr	r2, [pc, #372]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
 80032f4:	68a1      	ldr	r1, [r4, #8]
 80032f6:	6993      	ldr	r3, [r2, #24]
 80032f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003300:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003302:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003304:	2b02      	cmp	r3, #2
 8003306:	f000 809e 	beq.w	8003446 <HAL_RCC_ClockConfig+0x22a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800330a:	2b03      	cmp	r3, #3
 800330c:	f000 80a1 	beq.w	8003452 <HAL_RCC_ClockConfig+0x236>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003310:	2b01      	cmp	r3, #1
 8003312:	f000 80a2 	beq.w	800345a <HAL_RCC_ClockConfig+0x23e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003316:	0752      	lsls	r2, r2, #29
 8003318:	d538      	bpl.n	800338c <HAL_RCC_ClockConfig+0x170>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800331a:	4953      	ldr	r1, [pc, #332]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331c:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003320:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003324:	f022 0207 	bic.w	r2, r2, #7
 8003328:	4313      	orrs	r3, r2
 800332a:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800332c:	f7fd f838 	bl	80003a0 <HAL_GetTick>
 8003330:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	e005      	b.n	8003340 <HAL_RCC_ClockConfig+0x124>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003334:	f7fd f834 	bl	80003a0 <HAL_GetTick>
 8003338:	1bc0      	subs	r0, r0, r7
 800333a:	4540      	cmp	r0, r8
 800333c:	f200 8087 	bhi.w	800344e <HAL_RCC_ClockConfig+0x232>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003340:	6933      	ldr	r3, [r6, #16]
 8003342:	6862      	ldr	r2, [r4, #4]
 8003344:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003348:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800334c:	d1f2      	bne.n	8003334 <HAL_RCC_ClockConfig+0x118>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	e7c9      	b.n	80032e6 <HAL_RCC_ClockConfig+0xca>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003352:	07da      	lsls	r2, r3, #31
 8003354:	d4cd      	bmi.n	80032f2 <HAL_RCC_ClockConfig+0xd6>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003356:	4a44      	ldr	r2, [pc, #272]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
 8003358:	6993      	ldr	r3, [r2, #24]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	428b      	cmp	r3, r1
 8003360:	d904      	bls.n	800336c <HAL_RCC_ClockConfig+0x150>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003362:	6993      	ldr	r3, [r2, #24]
 8003364:	f023 030f 	bic.w	r3, r3, #15
 8003368:	4319      	orrs	r1, r3
 800336a:	6191      	str	r1, [r2, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4a3d      	ldr	r2, [pc, #244]	; (8003464 <HAL_RCC_ClockConfig+0x248>)
 800336e:	6813      	ldr	r3, [r2, #0]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	42ab      	cmp	r3, r5
 8003376:	d90c      	bls.n	8003392 <HAL_RCC_ClockConfig+0x176>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003378:	6813      	ldr	r3, [r2, #0]
 800337a:	f023 030f 	bic.w	r3, r3, #15
 800337e:	432b      	orrs	r3, r5
 8003380:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	42ab      	cmp	r3, r5
 800338a:	d002      	beq.n	8003392 <HAL_RCC_ClockConfig+0x176>
    return HAL_ERROR;
 800338c:	2001      	movs	r0, #1
}
 800338e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	075e      	lsls	r6, r3, #29
 8003396:	d50c      	bpl.n	80033b2 <HAL_RCC_ClockConfig+0x196>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003398:	4933      	ldr	r1, [pc, #204]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
 800339a:	6920      	ldr	r0, [r4, #16]
 800339c:	698a      	ldr	r2, [r1, #24]
 800339e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80033a2:	4290      	cmp	r0, r2
 80033a4:	d205      	bcs.n	80033b2 <HAL_RCC_ClockConfig+0x196>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033a6:	698b      	ldr	r3, [r1, #24]
 80033a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ac:	4303      	orrs	r3, r0
 80033ae:	618b      	str	r3, [r1, #24]
 80033b0:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b2:	071d      	lsls	r5, r3, #28
 80033b4:	d50c      	bpl.n	80033d0 <HAL_RCC_ClockConfig+0x1b4>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033b6:	492c      	ldr	r1, [pc, #176]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
 80033b8:	6960      	ldr	r0, [r4, #20]
 80033ba:	69ca      	ldr	r2, [r1, #28]
 80033bc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80033c0:	4290      	cmp	r0, r2
 80033c2:	d205      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x1b4>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033c4:	69cb      	ldr	r3, [r1, #28]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	4303      	orrs	r3, r0
 80033cc:	61cb      	str	r3, [r1, #28]
 80033ce:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d0:	06d8      	lsls	r0, r3, #27
 80033d2:	d50c      	bpl.n	80033ee <HAL_RCC_ClockConfig+0x1d2>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033d4:	4924      	ldr	r1, [pc, #144]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
 80033d6:	69a0      	ldr	r0, [r4, #24]
 80033d8:	69ca      	ldr	r2, [r1, #28]
 80033da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80033de:	4290      	cmp	r0, r2
 80033e0:	d205      	bcs.n	80033ee <HAL_RCC_ClockConfig+0x1d2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033e2:	69cb      	ldr	r3, [r1, #28]
 80033e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033e8:	4303      	orrs	r3, r0
 80033ea:	61cb      	str	r3, [r1, #28]
 80033ec:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033ee:	0699      	lsls	r1, r3, #26
 80033f0:	d50b      	bpl.n	800340a <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
 80033f4:	69e1      	ldr	r1, [r4, #28]
 80033f6:	6a13      	ldr	r3, [r2, #32]
 80033f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033fc:	4299      	cmp	r1, r3
 80033fe:	d204      	bcs.n	800340a <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003400:	6a13      	ldr	r3, [r2, #32]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	430b      	orrs	r3, r1
 8003408:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800340a:	f7ff fe7b 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 800340e:	4a16      	ldr	r2, [pc, #88]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
 8003410:	4916      	ldr	r1, [pc, #88]	; (800346c <HAL_RCC_ClockConfig+0x250>)
 8003412:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003414:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003416:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 800341a:	4d15      	ldr	r5, [pc, #84]	; (8003470 <HAL_RCC_ClockConfig+0x254>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800341c:	f002 020f 	and.w	r2, r2, #15
 8003420:	4c14      	ldr	r4, [pc, #80]	; (8003474 <HAL_RCC_ClockConfig+0x258>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003422:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003424:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003426:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800342a:	4913      	ldr	r1, [pc, #76]	; (8003478 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800342c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003430:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8003434:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003436:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800343a:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800343c:	6022      	str	r2, [r4, #0]
}
 800343e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8003442:	f7fc bf49 	b.w	80002d8 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003446:	0396      	lsls	r6, r2, #14
 8003448:	f53f af67 	bmi.w	800331a <HAL_RCC_ClockConfig+0xfe>
 800344c:	e79e      	b.n	800338c <HAL_RCC_ClockConfig+0x170>
            return HAL_TIMEOUT;
 800344e:	2003      	movs	r0, #3
 8003450:	e79d      	b.n	800338e <HAL_RCC_ClockConfig+0x172>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003452:	0190      	lsls	r0, r2, #6
 8003454:	f53f af61 	bmi.w	800331a <HAL_RCC_ClockConfig+0xfe>
 8003458:	e798      	b.n	800338c <HAL_RCC_ClockConfig+0x170>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800345a:	05d1      	lsls	r1, r2, #23
 800345c:	f53f af5d 	bmi.w	800331a <HAL_RCC_ClockConfig+0xfe>
 8003460:	e794      	b.n	800338c <HAL_RCC_ClockConfig+0x170>
 8003462:	bf00      	nop
 8003464:	52002000 	.word	0x52002000
 8003468:	58024400 	.word	0x58024400
 800346c:	0800fe60 	.word	0x0800fe60
 8003470:	20000004 	.word	0x20000004
 8003474:	2000001c 	.word	0x2000001c
 8003478:	20000018 	.word	0x20000018

0800347c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800347c:	4a49      	ldr	r2, [pc, #292]	; (80035a4 <HAL_RCC_GetHCLKFreq+0x128>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800347e:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003480:	6913      	ldr	r3, [r2, #16]
 8003482:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003486:	2b10      	cmp	r3, #16
 8003488:	d064      	beq.n	8003554 <HAL_RCC_GetHCLKFreq+0xd8>
 800348a:	2b18      	cmp	r3, #24
 800348c:	d022      	beq.n	80034d4 <HAL_RCC_GetHCLKFreq+0x58>
 800348e:	b1bb      	cbz	r3, 80034c0 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 8003490:	4b45      	ldr	r3, [pc, #276]	; (80035a8 <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003492:	4944      	ldr	r1, [pc, #272]	; (80035a4 <HAL_RCC_GetHCLKFreq+0x128>)
 8003494:	4845      	ldr	r0, [pc, #276]	; (80035ac <HAL_RCC_GetHCLKFreq+0x130>)
 8003496:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003498:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800349a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800349e:	4c44      	ldr	r4, [pc, #272]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x134>)
 80034a0:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034a4:	4d43      	ldr	r5, [pc, #268]	; (80035b4 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034a6:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034a8:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034aa:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ae:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034b2:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034b4:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 80034b8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ba:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80034bc:	bc30      	pop	{r4, r5}
 80034be:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034c0:	6813      	ldr	r3, [r2, #0]
 80034c2:	0699      	lsls	r1, r3, #26
 80034c4:	d548      	bpl.n	8003558 <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034c6:	6813      	ldr	r3, [r2, #0]
 80034c8:	4a3b      	ldr	r2, [pc, #236]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x13c>)
 80034ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80034ce:	fa22 f303 	lsr.w	r3, r2, r3
 80034d2:	e7de      	b.n	8003492 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034d4:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034da:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80034de:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0d6      	beq.n	8003492 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80034e4:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034e8:	f001 0101 	and.w	r1, r1, #1
 80034ec:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034f0:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80034f4:	fb01 f304 	mul.w	r3, r1, r4
 80034f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 80034fc:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8003506:	d002      	beq.n	800350e <HAL_RCC_GetHCLKFreq+0x92>
 8003508:	d32b      	bcc.n	8003562 <HAL_RCC_GetHCLKFreq+0xe6>
 800350a:	2802      	cmp	r0, #2
 800350c:	d026      	beq.n	800355c <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800350e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80035bc <HAL_RCC_GetHCLKFreq+0x140>
 8003512:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8003516:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351c:	ee07 3a10 	vmov	s14, r3
 8003520:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003524:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003528:	ee37 7a25 	vadd.f32	s14, s14, s11
 800352c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003530:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCC_GetHCLKFreq+0x128>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800353c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800353e:	ee07 3a10 	vmov	s14, r3
 8003542:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003546:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800354a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800354e:	ee17 3a90 	vmov	r3, s15
 8003552:	e79e      	b.n	8003492 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8003554:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <HAL_RCC_GetHCLKFreq+0x144>)
 8003556:	e79c      	b.n	8003492 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003558:	4b17      	ldr	r3, [pc, #92]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x13c>)
 800355a:	e79a      	b.n	8003492 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800355c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80035c4 <HAL_RCC_GetHCLKFreq+0x148>
 8003560:	e7d7      	b.n	8003512 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003562:	6813      	ldr	r3, [r2, #0]
 8003564:	069b      	lsls	r3, r3, #26
 8003566:	d51a      	bpl.n	800359e <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003568:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800356a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800356e:	4912      	ldr	r1, [pc, #72]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x13c>)
 8003570:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003574:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003576:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357c:	ee07 1a10 	vmov	s14, r1
 8003580:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8003584:	ee07 3a10 	vmov	s14, r3
 8003588:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800358c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8003590:	ee76 6a05 	vadd.f32	s13, s12, s10
 8003594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359c:	e7ca      	b.n	8003534 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800359e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80035c8 <HAL_RCC_GetHCLKFreq+0x14c>
 80035a2:	e7b6      	b.n	8003512 <HAL_RCC_GetHCLKFreq+0x96>
 80035a4:	58024400 	.word	0x58024400
 80035a8:	003d0900 	.word	0x003d0900
 80035ac:	0800fe60 	.word	0x0800fe60
 80035b0:	2000001c 	.word	0x2000001c
 80035b4:	20000018 	.word	0x20000018
 80035b8:	03d09000 	.word	0x03d09000
 80035bc:	4a742400 	.word	0x4a742400
 80035c0:	017d7840 	.word	0x017d7840
 80035c4:	4bbebc20 	.word	0x4bbebc20
 80035c8:	4c742400 	.word	0x4c742400

080035cc <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80035cc:	4a3b      	ldr	r2, [pc, #236]	; (80036bc <RCCEx_PLL2_Config+0xf0>)
{
 80035ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80035d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d067      	beq.n	80036aa <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80035da:	6813      	ldr	r3, [r2, #0]
 80035dc:	460f      	mov	r7, r1
 80035de:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035e0:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 80035e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035e6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80035e8:	f7fc feda 	bl	80003a0 <HAL_GetTick>
 80035ec:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035ee:	e004      	b.n	80035fa <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80035f0:	f7fc fed6 	bl	80003a0 <HAL_GetTick>
 80035f4:	1b80      	subs	r0, r0, r6
 80035f6:	2802      	cmp	r0, #2
 80035f8:	d859      	bhi.n	80036ae <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	011a      	lsls	r2, r3, #4
 80035fe:	d4f7      	bmi.n	80035f0 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003600:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003602:	682a      	ldr	r2, [r5, #0]
 8003604:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003608:	492d      	ldr	r1, [pc, #180]	; (80036c0 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800360a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800360e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003610:	686e      	ldr	r6, [r5, #4]
 8003612:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8003616:	3e01      	subs	r6, #1
 8003618:	1e50      	subs	r0, r2, #1
 800361a:	3b01      	subs	r3, #1
 800361c:	692a      	ldr	r2, [r5, #16]
 800361e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8003622:	025b      	lsls	r3, r3, #9
 8003624:	0400      	lsls	r0, r0, #16
 8003626:	3a01      	subs	r2, #1
 8003628:	b29b      	uxth	r3, r3
 800362a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800362e:	0612      	lsls	r2, r2, #24
 8003630:	4303      	orrs	r3, r0
 8003632:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003636:	4333      	orrs	r3, r6
 8003638:	4313      	orrs	r3, r2
 800363a:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800363c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800363e:	696a      	ldr	r2, [r5, #20]
 8003640:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003644:	4313      	orrs	r3, r2
 8003646:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003648:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800364a:	69aa      	ldr	r2, [r5, #24]
 800364c:	f023 0320 	bic.w	r3, r3, #32
 8003650:	4313      	orrs	r3, r2
 8003652:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003654:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003656:	f023 0310 	bic.w	r3, r3, #16
 800365a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800365c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800365e:	69eb      	ldr	r3, [r5, #28]
 8003660:	4011      	ands	r1, r2
 8003662:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003666:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003668:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800366a:	f043 0310 	orr.w	r3, r3, #16
 800366e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003670:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003672:	b1f7      	cbz	r7, 80036b2 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003674:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003676:	bf0c      	ite	eq
 8003678:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800367c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8003680:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <RCCEx_PLL2_Config+0xf0>)
 8003684:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003686:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 8003688:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800368c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800368e:	f7fc fe87 	bl	80003a0 <HAL_GetTick>
 8003692:	4605      	mov	r5, r0
 8003694:	e004      	b.n	80036a0 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003696:	f7fc fe83 	bl	80003a0 <HAL_GetTick>
 800369a:	1b40      	subs	r0, r0, r5
 800369c:	2802      	cmp	r0, #2
 800369e:	d806      	bhi.n	80036ae <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	d5f7      	bpl.n	8003696 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 80036a6:	2000      	movs	r0, #0
}
 80036a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80036aa:	2001      	movs	r0, #1
}
 80036ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80036ae:	2003      	movs	r0, #3
}
 80036b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80036b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036b8:	e7e3      	b.n	8003682 <RCCEx_PLL2_Config+0xb6>
 80036ba:	bf00      	nop
 80036bc:	58024400 	.word	0x58024400
 80036c0:	ffff0007 	.word	0xffff0007

080036c4 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036c4:	4a3b      	ldr	r2, [pc, #236]	; (80037b4 <RCCEx_PLL3_Config+0xf0>)
{
 80036c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d067      	beq.n	80037a2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80036d2:	6813      	ldr	r3, [r2, #0]
 80036d4:	460f      	mov	r7, r1
 80036d6:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036d8:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 80036da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036de:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80036e0:	f7fc fe5e 	bl	80003a0 <HAL_GetTick>
 80036e4:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036e6:	e004      	b.n	80036f2 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80036e8:	f7fc fe5a 	bl	80003a0 <HAL_GetTick>
 80036ec:	1b80      	subs	r0, r0, r6
 80036ee:	2802      	cmp	r0, #2
 80036f0:	d859      	bhi.n	80037a6 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	009a      	lsls	r2, r3, #2
 80036f6:	d4f7      	bmi.n	80036e8 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80036f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036fa:	682a      	ldr	r2, [r5, #0]
 80036fc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003700:	492d      	ldr	r1, [pc, #180]	; (80037b8 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003702:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003706:	62a3      	str	r3, [r4, #40]	; 0x28
 8003708:	686e      	ldr	r6, [r5, #4]
 800370a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800370e:	3e01      	subs	r6, #1
 8003710:	1e50      	subs	r0, r2, #1
 8003712:	3b01      	subs	r3, #1
 8003714:	692a      	ldr	r2, [r5, #16]
 8003716:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800371a:	025b      	lsls	r3, r3, #9
 800371c:	0400      	lsls	r0, r0, #16
 800371e:	3a01      	subs	r2, #1
 8003720:	b29b      	uxth	r3, r3
 8003722:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8003726:	0612      	lsls	r2, r2, #24
 8003728:	4303      	orrs	r3, r0
 800372a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800372e:	4333      	orrs	r3, r6
 8003730:	4313      	orrs	r3, r2
 8003732:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003734:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003736:	696a      	ldr	r2, [r5, #20]
 8003738:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800373c:	4313      	orrs	r3, r2
 800373e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003740:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003742:	69aa      	ldr	r2, [r5, #24]
 8003744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003748:	4313      	orrs	r3, r2
 800374a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800374c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800374e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003752:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003754:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003756:	69eb      	ldr	r3, [r5, #28]
 8003758:	4011      	ands	r1, r2
 800375a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800375e:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003760:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003766:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003768:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800376a:	b1f7      	cbz	r7, 80037aa <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800376c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800376e:	bf0c      	ite	eq
 8003770:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003774:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8003778:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800377a:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <RCCEx_PLL3_Config+0xf0>)
 800377c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800377e:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8003780:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003784:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003786:	f7fc fe0b 	bl	80003a0 <HAL_GetTick>
 800378a:	4605      	mov	r5, r0
 800378c:	e004      	b.n	8003798 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800378e:	f7fc fe07 	bl	80003a0 <HAL_GetTick>
 8003792:	1b40      	subs	r0, r0, r5
 8003794:	2802      	cmp	r0, #2
 8003796:	d806      	bhi.n	80037a6 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	d5f7      	bpl.n	800378e <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 800379e:	2000      	movs	r0, #0
}
 80037a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80037a2:	2001      	movs	r0, #1
}
 80037a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80037a6:	2003      	movs	r0, #3
}
 80037a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80037aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037b0:	e7e3      	b.n	800377a <RCCEx_PLL3_Config+0xb6>
 80037b2:	bf00      	nop
 80037b4:	58024400 	.word	0x58024400
 80037b8:	ffff0007 	.word	0xffff0007

080037bc <HAL_RCCEx_PeriphCLKConfig>:
{
 80037bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037c0:	6803      	ldr	r3, [r0, #0]
{
 80037c2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037c4:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 80037c8:	d016      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80037ca:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80037cc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80037d0:	f000 8446 	beq.w	8004060 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80037d4:	f240 8510 	bls.w	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 80037d8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80037dc:	f000 8480 	beq.w	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80037e0:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80037e4:	f040 852e 	bne.w	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037e8:	499d      	ldr	r1, [pc, #628]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80037ea:	2600      	movs	r6, #0
 80037ec:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80037ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80037f2:	431a      	orrs	r2, r3
 80037f4:	650a      	str	r2, [r1, #80]	; 0x50
 80037f6:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037f8:	05dd      	lsls	r5, r3, #23
 80037fa:	d50a      	bpl.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 80037fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80037fe:	2a04      	cmp	r2, #4
 8003800:	d806      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003802:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003806:	03e0      	.short	0x03e0
 8003808:	03cf03e7 	.word	0x03cf03e7
 800380c:	039c039c 	.word	0x039c039c
      ret = HAL_ERROR;
 8003810:	2601      	movs	r6, #1
 8003812:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003814:	0598      	lsls	r0, r3, #22
 8003816:	d515      	bpl.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003818:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800381a:	2a80      	cmp	r2, #128	; 0x80
 800381c:	f000 843f 	beq.w	800409e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003820:	f200 84d3 	bhi.w	80041ca <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003824:	2a00      	cmp	r2, #0
 8003826:	f000 844d 	beq.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800382a:	2a40      	cmp	r2, #64	; 0x40
 800382c:	f040 84d4 	bne.w	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003830:	2100      	movs	r1, #0
 8003832:	1d20      	adds	r0, r4, #4
 8003834:	f7ff feca 	bl	80035cc <RCCEx_PLL2_Config>
 8003838:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800383a:	2d00      	cmp	r5, #0
 800383c:	f000 8438 	beq.w	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003844:	0559      	lsls	r1, r3, #21
 8003846:	d518      	bpl.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003848:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800384c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003850:	f000 8411 	beq.w	8004076 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8003854:	f200 84e5 	bhi.w	8004222 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003858:	2a00      	cmp	r2, #0
 800385a:	f000 8447 	beq.w	80040ec <HAL_RCCEx_PeriphCLKConfig+0x930>
 800385e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003862:	f040 84e6 	bne.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003866:	2100      	movs	r1, #0
 8003868:	1d20      	adds	r0, r4, #4
 800386a:	f7ff feaf 	bl	80035cc <RCCEx_PLL2_Config>
 800386e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003870:	2d00      	cmp	r5, #0
 8003872:	f000 8409 	beq.w	8004088 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800387a:	051a      	lsls	r2, r3, #20
 800387c:	d518      	bpl.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 800387e:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8003882:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8003886:	f000 83c3 	beq.w	8004010 <HAL_RCCEx_PeriphCLKConfig+0x854>
 800388a:	f200 84be 	bhi.w	800420a <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 800388e:	2a00      	cmp	r2, #0
 8003890:	f000 841f 	beq.w	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003894:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8003898:	f040 84bf 	bne.w	800421a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800389c:	2100      	movs	r1, #0
 800389e:	1d20      	adds	r0, r4, #4
 80038a0:	f7ff fe94 	bl	80035cc <RCCEx_PLL2_Config>
 80038a4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80038a6:	2d00      	cmp	r5, #0
 80038a8:	f000 83bb 	beq.w	8004022 <HAL_RCCEx_PeriphCLKConfig+0x866>
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038b0:	019f      	lsls	r7, r3, #6
 80038b2:	d50d      	bpl.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    switch(PeriphClkInit->QspiClockSelection)
 80038b4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80038b6:	2a10      	cmp	r2, #16
 80038b8:	f000 832d 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80038bc:	f240 84bd 	bls.w	800423a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80038c0:	2a20      	cmp	r2, #32
 80038c2:	f000 835f 	beq.w	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80038c6:	2a30      	cmp	r2, #48	; 0x30
 80038c8:	f000 832a 	beq.w	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x764>
      ret = HAL_ERROR;
 80038cc:	2601      	movs	r6, #1
 80038ce:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038d0:	04d8      	lsls	r0, r3, #19
 80038d2:	d517      	bpl.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->Spi123ClockSelection)
 80038d4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80038d6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80038da:	f000 83ac 	beq.w	8004036 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80038de:	f200 847f 	bhi.w	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
 80038e2:	2a00      	cmp	r2, #0
 80038e4:	f000 8409 	beq.w	80040fa <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80038e8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80038ec:	f040 8480 	bne.w	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038f0:	2100      	movs	r1, #0
 80038f2:	1d20      	adds	r0, r4, #4
 80038f4:	f7ff fe6a 	bl	80035cc <RCCEx_PLL2_Config>
 80038f8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80038fa:	2d00      	cmp	r5, #0
 80038fc:	f000 83a4 	beq.w	8004048 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003904:	0499      	lsls	r1, r3, #18
 8003906:	d51b      	bpl.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003908:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800390a:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800390e:	f000 8326 	beq.w	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
 8003912:	f200 844a 	bhi.w	80041aa <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003916:	b142      	cbz	r2, 800392a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003918:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800391c:	f040 8451 	bne.w	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003920:	2101      	movs	r1, #1
 8003922:	1d20      	adds	r0, r4, #4
 8003924:	f7ff fe52 	bl	80035cc <RCCEx_PLL2_Config>
 8003928:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800392a:	2d00      	cmp	r5, #0
 800392c:	f040 827d 	bne.w	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003930:	4a4b      	ldr	r2, [pc, #300]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003932:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003934:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003936:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800393a:	430b      	orrs	r3, r1
 800393c:	6513      	str	r3, [r2, #80]	; 0x50
 800393e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003940:	045a      	lsls	r2, r3, #17
 8003942:	d51d      	bpl.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003944:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8003948:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800394c:	f000 82d9 	beq.w	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8003950:	f200 83ef 	bhi.w	8004132 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003954:	b142      	cbz	r2, 8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003956:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800395a:	f040 83f6 	bne.w	800414a <HAL_RCCEx_PeriphCLKConfig+0x98e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800395e:	2101      	movs	r1, #1
 8003960:	1d20      	adds	r0, r4, #4
 8003962:	f7ff fe33 	bl	80035cc <RCCEx_PLL2_Config>
 8003966:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003968:	2d00      	cmp	r5, #0
 800396a:	f040 825b 	bne.w	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x668>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800396e:	4a3c      	ldr	r2, [pc, #240]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003970:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003974:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003976:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800397a:	430b      	orrs	r3, r1
 800397c:	6593      	str	r3, [r2, #88]	; 0x58
 800397e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003980:	041f      	lsls	r7, r3, #16
 8003982:	d50d      	bpl.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->FdcanClockSelection)
 8003984:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003986:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800398a:	f000 82f2 	beq.w	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 800398e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003992:	f000 81f7 	beq.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003996:	2a00      	cmp	r2, #0
 8003998:	f000 81f9 	beq.w	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      ret = HAL_ERROR;
 800399c:	2601      	movs	r6, #1
 800399e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039a0:	01d8      	lsls	r0, r3, #7
 80039a2:	d50a      	bpl.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->FmcClockSelection)
 80039a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80039a6:	2a03      	cmp	r2, #3
 80039a8:	d805      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80039aa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80039ae:	0181      	.short	0x0181
 80039b0:	017c026b 	.word	0x017c026b
 80039b4:	0181      	.short	0x0181
      ret = HAL_ERROR;
 80039b6:	2601      	movs	r6, #1
 80039b8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039ba:	0259      	lsls	r1, r3, #9
 80039bc:	f100 8186 	bmi.w	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x510>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039c0:	07df      	lsls	r7, r3, #31
 80039c2:	d52f      	bpl.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Usart16ClockSelection)
 80039c4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80039c6:	2a28      	cmp	r2, #40	; 0x28
 80039c8:	d82a      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80039ca:	e8df f012 	tbh	[pc, r2, lsl #1]
 80039ce:	01cb      	.short	0x01cb
 80039d0:	00290029 	.word	0x00290029
 80039d4:	00290029 	.word	0x00290029
 80039d8:	00290029 	.word	0x00290029
 80039dc:	02760029 	.word	0x02760029
 80039e0:	00290029 	.word	0x00290029
 80039e4:	00290029 	.word	0x00290029
 80039e8:	00290029 	.word	0x00290029
 80039ec:	01c50029 	.word	0x01c50029
 80039f0:	00290029 	.word	0x00290029
 80039f4:	00290029 	.word	0x00290029
 80039f8:	00290029 	.word	0x00290029
 80039fc:	01cb0029 	.word	0x01cb0029
 8003a00:	00290029 	.word	0x00290029
 8003a04:	00290029 	.word	0x00290029
 8003a08:	00290029 	.word	0x00290029
 8003a0c:	01cb0029 	.word	0x01cb0029
 8003a10:	00290029 	.word	0x00290029
 8003a14:	00290029 	.word	0x00290029
 8003a18:	00290029 	.word	0x00290029
 8003a1c:	01cb0029 	.word	0x01cb0029
      ret = HAL_ERROR;
 8003a20:	2601      	movs	r6, #1
 8003a22:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a24:	0798      	lsls	r0, r3, #30
 8003a26:	d50c      	bpl.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003a28:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003a2a:	2a05      	cmp	r2, #5
 8003a2c:	d807      	bhi.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x282>
 8003a2e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003a32:	012e      	.short	0x012e
 8003a34:	0128023b 	.word	0x0128023b
 8003a38:	012e012e 	.word	0x012e012e
 8003a3c:	012e      	.short	0x012e
      ret = HAL_ERROR;
 8003a3e:	2601      	movs	r6, #1
 8003a40:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a42:	0759      	lsls	r1, r3, #29
 8003a44:	d510      	bpl.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003a46:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003a4a:	2a05      	cmp	r2, #5
 8003a4c:	d80a      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a4e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003a52:	010b      	.short	0x010b
 8003a54:	01050222 	.word	0x01050222
 8003a58:	010b010b 	.word	0x010b010b
 8003a5c:	010b      	.short	0x010b
 8003a5e:	bf00      	nop
 8003a60:	58024400 	.word	0x58024400
      ret = HAL_ERROR;
 8003a64:	2601      	movs	r6, #1
 8003a66:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a68:	069a      	lsls	r2, r3, #26
 8003a6a:	d51d      	bpl.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a6c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003a70:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003a74:	f000 8259 	beq.w	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x76e>
 8003a78:	f200 8379 	bhi.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003a7c:	b142      	cbz	r2, 8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003a7e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003a82:	f040 8380 	bne.w	8004186 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a86:	2100      	movs	r1, #0
 8003a88:	1d20      	adds	r0, r4, #4
 8003a8a:	f7ff fd9f 	bl	80035cc <RCCEx_PLL2_Config>
 8003a8e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a90:	2d00      	cmp	r5, #0
 8003a92:	f040 81c4 	bne.w	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a96:	4ab9      	ldr	r2, [pc, #740]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003a98:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003a9c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003a9e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	6553      	str	r3, [r2, #84]	; 0x54
 8003aa6:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003aa8:	065f      	lsls	r7, r3, #25
 8003aaa:	d51d      	bpl.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003aac:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8003ab0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003ab4:	f000 8249 	beq.w	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8003ab8:	f200 8368 	bhi.w	800418c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003abc:	b142      	cbz	r2, 8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003abe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003ac2:	f040 836f 	bne.w	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	1d20      	adds	r0, r4, #4
 8003aca:	f7ff fd7f 	bl	80035cc <RCCEx_PLL2_Config>
 8003ace:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ad0:	2d00      	cmp	r5, #0
 8003ad2:	f040 81b0 	bne.w	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ad6:	4aa9      	ldr	r2, [pc, #676]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003ad8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003adc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003ade:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae6:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ae8:	0618      	lsls	r0, r3, #24
 8003aea:	d51d      	bpl.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003aec:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8003af0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003af4:	f000 81fb 	beq.w	8003eee <HAL_RCCEx_PeriphCLKConfig+0x732>
 8003af8:	f200 832a 	bhi.w	8004150 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8003afc:	b142      	cbz	r2, 8003b10 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003afe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003b02:	f040 8331 	bne.w	8004168 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b06:	2100      	movs	r1, #0
 8003b08:	1d20      	adds	r0, r4, #4
 8003b0a:	f7ff fd5f 	bl	80035cc <RCCEx_PLL2_Config>
 8003b0e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b10:	2d00      	cmp	r5, #0
 8003b12:	f040 8193 	bne.w	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x680>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b16:	4a99      	ldr	r2, [pc, #612]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003b18:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8003b1c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003b1e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003b22:	430b      	orrs	r3, r1
 8003b24:	6593      	str	r3, [r2, #88]	; 0x58
 8003b26:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b28:	0719      	lsls	r1, r3, #28
 8003b2a:	d50c      	bpl.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003b2c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003b30:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003b34:	f000 8254 	beq.w	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b38:	4990      	ldr	r1, [pc, #576]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003b3a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003b3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b40:	4313      	orrs	r3, r2
 8003b42:	654b      	str	r3, [r1, #84]	; 0x54
 8003b44:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b46:	06da      	lsls	r2, r3, #27
 8003b48:	d50c      	bpl.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003b4a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8003b4e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003b52:	f000 8251 	beq.w	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b56:	4989      	ldr	r1, [pc, #548]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003b58:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8003b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	658b      	str	r3, [r1, #88]	; 0x58
 8003b62:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b64:	031f      	lsls	r7, r3, #12
 8003b66:	d50e      	bpl.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    switch(PeriphClkInit->AdcClockSelection)
 8003b68:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003b6c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003b70:	f000 8118 	beq.w	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8003b74:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8003b78:	f000 811a 	beq.w	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8003b7c:	2900      	cmp	r1, #0
 8003b7e:	f000 82c3 	beq.w	8004108 <HAL_RCCEx_PeriphCLKConfig+0x94c>
      ret = HAL_ERROR;
 8003b82:	2601      	movs	r6, #1
 8003b84:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b86:	0358      	lsls	r0, r3, #13
 8003b88:	d50f      	bpl.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    switch(PeriphClkInit->UsbClockSelection)
 8003b8a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003b8e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003b92:	f000 8119 	beq.w	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003b96:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8003b9a:	f000 811b 	beq.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003b9e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003ba2:	f000 82b9 	beq.w	8004118 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      ret = HAL_ERROR;
 8003ba6:	2601      	movs	r6, #1
 8003ba8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003baa:	03d9      	lsls	r1, r3, #15
 8003bac:	d511      	bpl.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch(PeriphClkInit->SdmmcClockSelection)
 8003bae:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003bb0:	2a00      	cmp	r2, #0
 8003bb2:	f000 8156 	beq.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8003bb6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003bba:	f040 8145 	bne.w	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	1d20      	adds	r0, r4, #4
 8003bc2:	f7ff fd03 	bl	80035cc <RCCEx_PLL2_Config>
 8003bc6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003bc8:	2d00      	cmp	r5, #0
 8003bca:	f000 8152 	beq.w	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bd2:	009a      	lsls	r2, r3, #2
 8003bd4:	f100 8109 	bmi.w	8003dea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003bd8:	039f      	lsls	r7, r3, #14
 8003bda:	d42e      	bmi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003bdc:	1c30      	adds	r0, r6, #0
 8003bde:	bf18      	it	ne
 8003be0:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003be2:	02dd      	lsls	r5, r3, #11
 8003be4:	d507      	bpl.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003be6:	4a65      	ldr	r2, [pc, #404]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003be8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003bea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6513      	str	r3, [r2, #80]	; 0x50
 8003bf4:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bf6:	0299      	lsls	r1, r3, #10
 8003bf8:	d507      	bpl.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bfa:	4a60      	ldr	r2, [pc, #384]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003bfc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003bfe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6513      	str	r3, [r2, #80]	; 0x50
 8003c08:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c0a:	005a      	lsls	r2, r3, #1
 8003c0c:	d50a      	bpl.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x468>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c0e:	4b5b      	ldr	r3, [pc, #364]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c16:	611a      	str	r2, [r3, #16]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	611a      	str	r2, [r3, #16]
 8003c22:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	da06      	bge.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c28:	4a54      	ldr	r2, [pc, #336]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003c2a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003c2c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003c2e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003c32:	430b      	orrs	r3, r1
 8003c34:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8003c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8003c3a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003c3c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003c40:	f000 8105 	beq.w	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x692>
 8003c44:	f240 8142 	bls.w	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x710>
 8003c48:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003c4c:	f000 8104 	beq.w	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8003c50:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003c54:	f000 8100 	beq.w	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8003c58:	2001      	movs	r0, #1
 8003c5a:	e7c2      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c62:	f7ff fd2f 	bl	80036c4 <RCCEx_PLL3_Config>
 8003c66:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003c68:	2d00      	cmp	r5, #0
 8003c6a:	f040 80d5 	bne.w	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c6e:	4a43      	ldr	r2, [pc, #268]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003c70:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003c74:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003c76:	f023 0307 	bic.w	r3, r3, #7
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	e6f2      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c82:	2101      	movs	r1, #1
 8003c84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c88:	f7ff fd1c 	bl	80036c4 <RCCEx_PLL3_Config>
 8003c8c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003c8e:	2d00      	cmp	r5, #0
 8003c90:	f040 80bf 	bne.w	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x656>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c94:	4a39      	ldr	r2, [pc, #228]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003c96:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003c98:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003c9a:	f023 0307 	bic.w	r3, r3, #7
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	6553      	str	r3, [r2, #84]	; 0x54
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	e6cd      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	1d20      	adds	r0, r4, #4
 8003caa:	f7ff fc8f 	bl	80035cc <RCCEx_PLL2_Config>
 8003cae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003cb0:	2d00      	cmp	r5, #0
 8003cb2:	f040 80ab 	bne.w	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x650>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cb6:	4a31      	ldr	r2, [pc, #196]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003cb8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003cba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003cbc:	f023 0303 	bic.w	r3, r3, #3
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cc4:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cc6:	0259      	lsls	r1, r3, #9
 8003cc8:	f57f ae7a 	bpl.w	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ccc:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cce:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cd0:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003cd8:	f7fc fb62 	bl	80003a0 <HAL_GetTick>
 8003cdc:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cde:	e006      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x532>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce0:	f7fc fb5e 	bl	80003a0 <HAL_GetTick>
 8003ce4:	eba0 0008 	sub.w	r0, r0, r8
 8003ce8:	2864      	cmp	r0, #100	; 0x64
 8003cea:	f200 821e 	bhi.w	800412a <HAL_RCCEx_PeriphCLKConfig+0x96e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	05da      	lsls	r2, r3, #23
 8003cf2:	d5f5      	bpl.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    if(ret == HAL_OK)
 8003cf4:	2d00      	cmp	r5, #0
 8003cf6:	f040 82c6 	bne.w	8004286 <HAL_RCCEx_PeriphCLKConfig+0xaca>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003cfc:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003d00:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d02:	4051      	eors	r1, r2
 8003d04:	f411 7f40 	tst.w	r1, #768	; 0x300
 8003d08:	d00d      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x56a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d0c:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d0e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d12:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003d16:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d18:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d1a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003d1e:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8003d20:	671a      	str	r2, [r3, #112]	; 0x70
 8003d22:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d26:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003d2a:	f000 828e 	beq.w	800424a <HAL_RCCEx_PeriphCLKConfig+0xa8e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d2e:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8003d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d36:	f000 829c 	beq.w	8004272 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003d3a:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003d3c:	6913      	ldr	r3, [r2, #16]
 8003d3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d42:	6113      	str	r3, [r2, #16]
 8003d44:	4a0d      	ldr	r2, [pc, #52]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003d46:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003d4a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6713      	str	r3, [r2, #112]	; 0x70
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	e633      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d58:	2101      	movs	r1, #1
 8003d5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d5e:	f7ff fcb1 	bl	80036c4 <RCCEx_PLL3_Config>
 8003d62:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003d64:	2d00      	cmp	r5, #0
 8003d66:	d14e      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d68:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003d6a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003d6c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003d6e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003d72:	430b      	orrs	r3, r1
 8003d74:	6553      	str	r3, [r2, #84]	; 0x54
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	e654      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003d7a:	bf00      	nop
 8003d7c:	58024400 	.word	0x58024400
 8003d80:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d84:	2101      	movs	r1, #1
 8003d86:	1d20      	adds	r0, r4, #4
 8003d88:	f7ff fc20 	bl	80035cc <RCCEx_PLL2_Config>
 8003d8c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003d8e:	2d00      	cmp	r5, #0
 8003d90:	d14e      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x674>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d92:	4ab2      	ldr	r2, [pc, #712]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003d94:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003d96:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003d98:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	6513      	str	r3, [r2, #80]	; 0x50
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	e5fd      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003da4:	2102      	movs	r1, #2
 8003da6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003daa:	f7ff fc8b 	bl	80036c4 <RCCEx_PLL3_Config>
 8003dae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003db0:	2d00      	cmp	r5, #0
 8003db2:	d146      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003db4:	4aa9      	ldr	r2, [pc, #676]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003db6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003dba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003dbc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6593      	str	r3, [r2, #88]	; 0x58
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	e6de      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dc8:	2101      	movs	r1, #1
 8003dca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003dce:	f7ff fc79 	bl	80036c4 <RCCEx_PLL3_Config>
 8003dd2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003dd4:	b9a5      	cbnz	r5, 8003e00 <HAL_RCCEx_PeriphCLKConfig+0x644>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dd6:	4aa1      	ldr	r2, [pc, #644]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003dd8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003ddc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003dde:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003de2:	430b      	orrs	r3, r1
 8003de4:	6553      	str	r3, [r2, #84]	; 0x54
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	e6df      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003dea:	2102      	movs	r1, #2
 8003dec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003df0:	f7ff fc68 	bl	80036c4 <RCCEx_PLL3_Config>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	2800      	cmp	r0, #0
 8003df8:	f43f aeee 	beq.w	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      status=HAL_ERROR;
 8003dfc:	2601      	movs	r6, #1
 8003dfe:	e6eb      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e00:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e02:	462e      	mov	r6, r5
 8003e04:	e6d1      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8003e06:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e08:	462e      	mov	r6, r5
 8003e0a:	e60b      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003e0c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e0e:	462e      	mov	r6, r5
 8003e10:	e5d3      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003e12:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e14:	462e      	mov	r6, r5
 8003e16:	e614      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003e18:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e1a:	462e      	mov	r6, r5
 8003e1c:	e624      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003e1e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e20:	462e      	mov	r6, r5
 8003e22:	e641      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8003e24:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e26:	462e      	mov	r6, r5
 8003e28:	e5aa      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8003e2a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e2c:	462e      	mov	r6, r5
 8003e2e:	e587      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8003e30:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e32:	462e      	mov	r6, r5
 8003e34:	e5b4      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003e36:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e38:	462e      	mov	r6, r5
 8003e3a:	e655      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003e3c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e3e:	462e      	mov	r6, r5
 8003e40:	e672      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003e42:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e44:	462e      	mov	r6, r5
 8003e46:	e69e      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = HAL_ERROR;
 8003e48:	2601      	movs	r6, #1
 8003e4a:	4635      	mov	r5, r6
 8003e4c:	e6c1      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e4e:	4a83      	ldr	r2, [pc, #524]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003e50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e56:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003e58:	2d00      	cmp	r5, #0
 8003e5a:	d03c      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	2001      	movs	r0, #1
 8003e60:	e6bf      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x426>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e62:	4a7e      	ldr	r2, [pc, #504]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003e64:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e6a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003e6c:	2d00      	cmp	r5, #0
 8003e6e:	f47f aeae 	bne.w	8003bce <HAL_RCCEx_PeriphCLKConfig+0x412>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e72:	4a7a      	ldr	r2, [pc, #488]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003e74:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003e76:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	e6a6      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e84:	4a75      	ldr	r2, [pc, #468]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003e86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003e8e:	2d00      	cmp	r5, #0
 8003e90:	f43f af11 	beq.w	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003e94:	e7ba      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x650>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e96:	2101      	movs	r1, #1
 8003e98:	1d20      	adds	r0, r4, #4
 8003e9a:	f7ff fb97 	bl	80035cc <RCCEx_PLL2_Config>
 8003e9e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ea0:	2d00      	cmp	r5, #0
 8003ea2:	f43f aee4 	beq.w	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003ea6:	e7b7      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	1d20      	adds	r0, r4, #4
 8003eac:	f7ff fb8e 	bl	80035cc <RCCEx_PLL2_Config>
 8003eb0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	f43f aeee 	beq.w	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8003eb8:	e7ab      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x656>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eba:	2101      	movs	r1, #1
 8003ebc:	1d20      	adds	r0, r4, #4
 8003ebe:	f7ff fb85 	bl	80035cc <RCCEx_PLL2_Config>
 8003ec2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ec4:	2d00      	cmp	r5, #0
 8003ec6:	f43f af4f 	beq.w	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003eca:	e79c      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x64a>
    switch(PeriphClkInit->RngClockSelection)
 8003ecc:	2a00      	cmp	r2, #0
 8003ece:	f47f aec3 	bne.w	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(ret == HAL_OK)
 8003ed2:	2d00      	cmp	r5, #0
 8003ed4:	d1c2      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ed6:	4a61      	ldr	r2, [pc, #388]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003ed8:	1c30      	adds	r0, r6, #0
 8003eda:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003edc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003ede:	bf18      	it	ne
 8003ee0:	2001      	movne	r0, #1
 8003ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	6553      	str	r3, [r2, #84]	; 0x54
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	e679      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eee:	2102      	movs	r1, #2
 8003ef0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ef4:	f7ff fbe6 	bl	80036c4 <RCCEx_PLL3_Config>
 8003ef8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003efa:	2d00      	cmp	r5, #0
 8003efc:	f43f ae0b 	beq.w	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003f00:	e79c      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x680>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f02:	2101      	movs	r1, #1
 8003f04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f08:	f7ff fbdc 	bl	80036c4 <RCCEx_PLL3_Config>
 8003f0c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f0e:	2d00      	cmp	r5, #0
 8003f10:	f43f ad2d 	beq.w	800396e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003f14:	e786      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x668>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f16:	4a51      	ldr	r2, [pc, #324]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003f18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003f20:	2d00      	cmp	r5, #0
 8003f22:	d036      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	462e      	mov	r6, r5
 8003f28:	e4d2      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f30:	f7ff fbc8 	bl	80036c4 <RCCEx_PLL3_Config>
 8003f34:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f36:	2d00      	cmp	r5, #0
 8003f38:	f43f adad 	beq.w	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003f3c:	e76f      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x662>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f3e:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8003f40:	2d00      	cmp	r5, #0
 8003f42:	d037      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	462e      	mov	r6, r5
 8003f48:	e464      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x58>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f50:	f7ff fbb8 	bl	80036c4 <RCCEx_PLL3_Config>
 8003f54:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f56:	2d00      	cmp	r5, #0
 8003f58:	f43f adbd 	beq.w	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8003f5c:	e76b      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f5e:	2101      	movs	r1, #1
 8003f60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f64:	f7ff fbae 	bl	80036c4 <RCCEx_PLL3_Config>
 8003f68:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f6a:	2d00      	cmp	r5, #0
 8003f6c:	f43f ace0 	beq.w	8003930 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003f70:	e75b      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f72:	4a3a      	ldr	r2, [pc, #232]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003f74:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f7a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003f7c:	2d00      	cmp	r5, #0
 8003f7e:	f43f af08 	beq.w	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8003f82:	e755      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x674>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f84:	2102      	movs	r1, #2
 8003f86:	1d20      	adds	r0, r4, #4
 8003f88:	f7ff fb20 	bl	80035cc <RCCEx_PLL2_Config>
 8003f8c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f8e:	2d00      	cmp	r5, #0
 8003f90:	d1c8      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x768>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f92:	4a32      	ldr	r2, [pc, #200]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003f94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003f96:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003f98:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	e495      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003faa:	f7ff fb8b 	bl	80036c4 <RCCEx_PLL3_Config>
 8003fae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003fb0:	2d00      	cmp	r5, #0
 8003fb2:	d1c7      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x788>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fb4:	4a29      	ldr	r2, [pc, #164]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003fb6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003fb8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003fba:	f023 0307 	bic.w	r3, r3, #7
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	6513      	str	r3, [r2, #80]	; 0x50
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	e426      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fc6:	4a25      	ldr	r2, [pc, #148]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
      break;
 8003fc8:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003fd2:	e7b5      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x784>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	1d20      	adds	r0, r4, #4
 8003fd8:	f7ff faf8 	bl	80035cc <RCCEx_PLL2_Config>
 8003fdc:	4605      	mov	r5, r0
      break;
 8003fde:	e7af      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x784>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003fe6:	f7ff fb6d 	bl	80036c4 <RCCEx_PLL3_Config>
 8003fea:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	f43f ada2 	beq.w	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
          status = HAL_ERROR;
 8003ff4:	2601      	movs	r6, #1
 8003ff6:	e59f      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ffe:	f7ff fb61 	bl	80036c4 <RCCEx_PLL3_Config>
 8004002:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8004006:	2800      	cmp	r0, #0
 8004008:	f43f ada5 	beq.w	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        status = HAL_ERROR;
 800400c:	2601      	movs	r6, #1
 800400e:	e5a2      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004010:	2100      	movs	r1, #0
 8004012:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004016:	f7ff fb55 	bl	80036c4 <RCCEx_PLL3_Config>
 800401a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800401c:	2d00      	cmp	r5, #0
 800401e:	f47f ac45 	bne.w	80038ac <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004022:	4a0e      	ldr	r2, [pc, #56]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8004024:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004028:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800402a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800402e:	430b      	orrs	r3, r1
 8004030:	6593      	str	r3, [r2, #88]	; 0x58
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	e43c      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004036:	2100      	movs	r1, #0
 8004038:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800403c:	f7ff fb42 	bl	80036c4 <RCCEx_PLL3_Config>
 8004040:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004042:	2d00      	cmp	r5, #0
 8004044:	f47f ac5c 	bne.w	8003900 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004048:	4a04      	ldr	r2, [pc, #16]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800404a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800404c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004052:	430b      	orrs	r3, r1
 8004054:	6513      	str	r3, [r2, #80]	; 0x50
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	e454      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800405a:	bf00      	nop
 800405c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004060:	2102      	movs	r1, #2
 8004062:	3004      	adds	r0, #4
 8004064:	f7ff fab2 	bl	80035cc <RCCEx_PLL2_Config>
 8004068:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800406a:	2e00      	cmp	r6, #0
 800406c:	f47f abc3 	bne.w	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8004070:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004072:	f7ff bbb9 	b.w	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004076:	2100      	movs	r1, #0
 8004078:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800407c:	f7ff fb22 	bl	80036c4 <RCCEx_PLL3_Config>
 8004080:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004082:	2d00      	cmp	r5, #0
 8004084:	f47f abf7 	bne.w	8003876 <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004088:	4a81      	ldr	r2, [pc, #516]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800408a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800408e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004090:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8004094:	430b      	orrs	r3, r1
 8004096:	6593      	str	r3, [r2, #88]	; 0x58
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	f7ff bbee 	b.w	800387a <HAL_RCCEx_PeriphCLKConfig+0xbe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800409e:	2100      	movs	r1, #0
 80040a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040a4:	f7ff fb0e 	bl	80036c4 <RCCEx_PLL3_Config>
 80040a8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80040aa:	2d00      	cmp	r5, #0
 80040ac:	f47f abc8 	bne.w	8003840 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80040b0:	4a77      	ldr	r2, [pc, #476]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80040b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80040b6:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80040ba:	430b      	orrs	r3, r1
 80040bc:	6513      	str	r3, [r2, #80]	; 0x50
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	f7ff bbc0 	b.w	8003844 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c4:	4a72      	ldr	r2, [pc, #456]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80040c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040cc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80040ce:	f7ff bbb4 	b.w	800383a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d2:	4a6f      	ldr	r2, [pc, #444]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80040d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040da:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80040dc:	f7ff bbe3 	b.w	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040e0:	2102      	movs	r1, #2
 80040e2:	3024      	adds	r0, #36	; 0x24
 80040e4:	f7ff faee 	bl	80036c4 <RCCEx_PLL3_Config>
 80040e8:	4606      	mov	r6, r0
      break;
 80040ea:	e7be      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ec:	4a68      	ldr	r2, [pc, #416]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80040f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80040f6:	f7ff bbbb 	b.w	8003870 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040fa:	4a65      	ldr	r2, [pc, #404]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80040fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004102:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004104:	f7ff bbf9 	b.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004108:	1d20      	adds	r0, r4, #4
 800410a:	f7ff fa5f 	bl	80035cc <RCCEx_PLL2_Config>
 800410e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004110:	2d00      	cmp	r5, #0
 8004112:	f43f ae4f 	beq.w	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8004116:	e694      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004118:	4a5d      	ldr	r2, [pc, #372]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800411a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800411c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004120:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004122:	2d00      	cmp	r5, #0
 8004124:	f43f ae57 	beq.w	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8004128:	e66a      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x644>
            ret = HAL_TIMEOUT;
 800412a:	2603      	movs	r6, #3
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	4635      	mov	r5, r6
 8004130:	e446      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004132:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004136:	f43f ac17 	beq.w	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800413a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800413e:	f43f ac13 	beq.w	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004142:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8004146:	f43f ac0f 	beq.w	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      ret = HAL_ERROR;
 800414a:	2601      	movs	r6, #1
 800414c:	4635      	mov	r5, r6
 800414e:	e417      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004150:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004154:	f43f acdc 	beq.w	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004158:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 800415c:	f43f acd8 	beq.w	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004160:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8004164:	f43f acd4 	beq.w	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x354>
      ret = HAL_ERROR;
 8004168:	2601      	movs	r6, #1
 800416a:	4635      	mov	r5, r6
 800416c:	e4dc      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800416e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004172:	f43f ac8d 	beq.w	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004176:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800417a:	f43f ac89 	beq.w	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800417e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8004182:	f43f ac85 	beq.w	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      ret = HAL_ERROR;
 8004186:	2601      	movs	r6, #1
 8004188:	4635      	mov	r5, r6
 800418a:	e48d      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800418c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004190:	f43f ac9e 	beq.w	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004194:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8004198:	f43f ac9a 	beq.w	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800419c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80041a0:	f43f ac96 	beq.w	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = HAL_ERROR;
 80041a4:	2601      	movs	r6, #1
 80041a6:	4635      	mov	r5, r6
 80041a8:	e49e      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi45ClockSelection)
 80041aa:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80041ae:	f43f abbc 	beq.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80041b2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80041b6:	f43f abb8 	beq.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80041ba:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80041be:	f43f abb4 	beq.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = HAL_ERROR;
 80041c2:	2601      	movs	r6, #1
 80041c4:	4635      	mov	r5, r6
 80041c6:	f7ff bbbb 	b.w	8003940 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Sai23ClockSelection)
 80041ca:	2ac0      	cmp	r2, #192	; 0xc0
 80041cc:	f43f ab35 	beq.w	800383a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80041d0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80041d4:	f43f ab31 	beq.w	800383a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 80041d8:	2601      	movs	r6, #1
 80041da:	4635      	mov	r5, r6
 80041dc:	f7ff bb32 	b.w	8003844 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Spi123ClockSelection)
 80041e0:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80041e4:	f43f ab89 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80041e8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80041ec:	f43f ab85 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = HAL_ERROR;
 80041f0:	2601      	movs	r6, #1
 80041f2:	4635      	mov	r5, r6
 80041f4:	f7ff bb86 	b.w	8003904 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80041f8:	bb22      	cbnz	r2, 8004244 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041fa:	4a25      	ldr	r2, [pc, #148]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80041fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80041fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004202:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004204:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8004206:	f7ff baef 	b.w	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai4BClockSelection)
 800420a:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800420e:	f43f ab4a 	beq.w	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8004212:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8004216:	f43f ab46 	beq.w	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = HAL_ERROR;
 800421a:	2601      	movs	r6, #1
 800421c:	4635      	mov	r5, r6
 800421e:	f7ff bb47 	b.w	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004222:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8004226:	f43f ab23 	beq.w	8003870 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800422a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800422e:	f43f ab1f 	beq.w	8003870 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = HAL_ERROR;
 8004232:	2601      	movs	r6, #1
 8004234:	4635      	mov	r5, r6
 8004236:	f7ff bb20 	b.w	800387a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->QspiClockSelection)
 800423a:	2a00      	cmp	r2, #0
 800423c:	f43f ae70 	beq.w	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004240:	f7ff bb44 	b.w	80038cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      ret = HAL_ERROR;
 8004244:	2601      	movs	r6, #1
 8004246:	f7ff bad7 	b.w	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        tickstart = HAL_GetTick();
 800424a:	f7fc f8a9 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800424e:	4f10      	ldr	r7, [pc, #64]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
        tickstart = HAL_GetTick();
 8004250:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004256:	e006      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004258:	f7fc f8a2 	bl	80003a0 <HAL_GetTick>
 800425c:	eba0 0009 	sub.w	r0, r0, r9
 8004260:	4540      	cmp	r0, r8
 8004262:	f63f af62 	bhi.w	800412a <HAL_RCCEx_PeriphCLKConfig+0x96e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004268:	079b      	lsls	r3, r3, #30
 800426a:	d5f5      	bpl.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xa9c>
 800426c:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004270:	e55d      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x572>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004272:	4807      	ldr	r0, [pc, #28]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004274:	4b07      	ldr	r3, [pc, #28]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0xad8>)
 8004276:	6901      	ldr	r1, [r0, #16]
 8004278:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 800427c:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 8004280:	4313      	orrs	r3, r2
 8004282:	6103      	str	r3, [r0, #16]
 8004284:	e55e      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004286:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004288:	462e      	mov	r6, r5
 800428a:	f7ff bb99 	b.w	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800428e:	bf00      	nop
 8004290:	58024400 	.word	0x58024400
 8004294:	00ffffcf 	.word	0x00ffffcf

08004298 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004298:	4a46      	ldr	r2, [pc, #280]	; (80043b4 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 800429a:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800429c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800429e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80042a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80042a2:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80042a6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d059      	beq.n	8004360 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80042ac:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80042b0:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042b4:	f004 0403 	and.w	r4, r4, #3
 80042b8:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80042bc:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80042c0:	2c01      	cmp	r4, #1
 80042c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042c6:	ee06 1a90 	vmov	s13, r1
 80042ca:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80042ce:	d002      	beq.n	80042d6 <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 80042d0:	d34e      	bcc.n	8004370 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 80042d2:	2c02      	cmp	r4, #2
 80042d4:	d049      	beq.n	800436a <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042d6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80043b8 <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 80042da:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80042de:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80042e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e4:	ee07 3a10 	vmov	s14, r3
 80042e8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80042ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80042f0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80042f4:	ee77 7a26 	vadd.f32	s15, s14, s13
 80042f8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80042fc:	4a2d      	ldr	r2, [pc, #180]	; (80043b4 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 80042fe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004302:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004304:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004308:	ee06 3a90 	vmov	s13, r3
 800430c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8004310:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004312:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004316:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800431a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800431e:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004322:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004324:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004328:	ee06 3a90 	vmov	s13, r3
 800432c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004330:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004334:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004338:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800433c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004340:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004342:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004346:	ee07 3a10 	vmov	s14, r3
 800434a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800434e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004352:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004356:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800435a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800435e:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004360:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004364:	6083      	str	r3, [r0, #8]
}
 8004366:	bc30      	pop	{r4, r5}
 8004368:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800436a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800436e:	e7b4      	b.n	80042da <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004370:	6813      	ldr	r3, [r2, #0]
 8004372:	069b      	lsls	r3, r3, #26
 8004374:	d51a      	bpl.n	80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004376:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004378:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800437c:	4910      	ldr	r1, [pc, #64]	; (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800437e:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004382:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004384:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438a:	ee07 1a10 	vmov	s14, r1
 800438e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004392:	ee07 3a10 	vmov	s14, r3
 8004396:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800439a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800439e:	ee76 7a05 	vadd.f32	s15, s12, s10
 80043a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043aa:	e7a7      	b.n	80042fc <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043ac:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 80043b0:	e793      	b.n	80042da <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 80043b2:	bf00      	nop
 80043b4:	58024400 	.word	0x58024400
 80043b8:	4a742400 	.word	0x4a742400
 80043bc:	4bbebc20 	.word	0x4bbebc20
 80043c0:	03d09000 	.word	0x03d09000
 80043c4:	4c742400 	.word	0x4c742400

080043c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043c8:	4a46      	ldr	r2, [pc, #280]	; (80044e4 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 80043ca:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043cc:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80043ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80043d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80043d2:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80043d6:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d059      	beq.n	8004490 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80043dc:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80043e0:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043e4:	f004 0403 	and.w	r4, r4, #3
 80043e8:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80043ec:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80043f0:	2c01      	cmp	r4, #1
 80043f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043f6:	ee06 1a90 	vmov	s13, r1
 80043fa:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80043fe:	d002      	beq.n	8004406 <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 8004400:	d34e      	bcc.n	80044a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8004402:	2c02      	cmp	r4, #2
 8004404:	d049      	beq.n	800449a <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004406:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80044e8 <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 800440a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800440e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004414:	ee07 3a10 	vmov	s14, r3
 8004418:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800441c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004420:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004424:	ee77 7a26 	vadd.f32	s15, s14, s13
 8004428:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800442c:	4a2d      	ldr	r2, [pc, #180]	; (80044e4 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 800442e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004432:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004434:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004438:	ee06 3a90 	vmov	s13, r3
 800443c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8004440:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004442:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004446:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800444a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800444e:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004452:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004454:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004458:	ee06 3a90 	vmov	s13, r3
 800445c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004460:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004464:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004468:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800446c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004470:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004472:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004476:	ee07 3a10 	vmov	s14, r3
 800447a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800447e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004482:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004486:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800448a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800448e:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004490:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004494:	6083      	str	r3, [r0, #8]
}
 8004496:	bc30      	pop	{r4, r5}
 8004498:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800449a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800449e:	e7b4      	b.n	800440a <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044a0:	6813      	ldr	r3, [r2, #0]
 80044a2:	069b      	lsls	r3, r3, #26
 80044a4:	d51a      	bpl.n	80044dc <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044a6:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044a8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044ac:	4910      	ldr	r1, [pc, #64]	; (80044f0 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 80044ae:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044b4:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ba:	ee07 1a10 	vmov	s14, r1
 80044be:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80044c2:	ee07 3a10 	vmov	s14, r3
 80044c6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80044ca:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80044ce:	ee76 7a05 	vadd.f32	s15, s12, s10
 80044d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044da:	e7a7      	b.n	800442c <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044dc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80044e0:	e793      	b.n	800440a <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80044e2:	bf00      	nop
 80044e4:	58024400 	.word	0x58024400
 80044e8:	4a742400 	.word	0x4a742400
 80044ec:	4bbebc20 	.word	0x4bbebc20
 80044f0:	03d09000 	.word	0x03d09000
 80044f4:	4c742400 	.word	0x4c742400

080044f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044f8:	4a46      	ldr	r2, [pc, #280]	; (8004614 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 80044fa:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044fc:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80044fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004500:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004502:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004506:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8004508:	2b00      	cmp	r3, #0
 800450a:	d059      	beq.n	80045c0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800450c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004510:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004514:	f004 0403 	and.w	r4, r4, #3
 8004518:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800451c:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8004520:	2c01      	cmp	r4, #1
 8004522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004526:	ee06 1a90 	vmov	s13, r1
 800452a:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800452e:	d002      	beq.n	8004536 <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 8004530:	d34e      	bcc.n	80045d0 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8004532:	2c02      	cmp	r4, #2
 8004534:	d049      	beq.n	80045ca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004536:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004618 <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 800453a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800453e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004544:	ee07 3a10 	vmov	s14, r3
 8004548:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800454c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004550:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004554:	ee77 7a26 	vadd.f32	s15, s14, s13
 8004558:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800455c:	4a2d      	ldr	r2, [pc, #180]	; (8004614 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 800455e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004562:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004564:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004568:	ee06 3a90 	vmov	s13, r3
 800456c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8004570:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004572:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004576:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800457a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800457e:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004582:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004584:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004588:	ee06 3a90 	vmov	s13, r3
 800458c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004590:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004594:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004598:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800459c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80045a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80045a2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80045a6:	ee07 3a10 	vmov	s14, r3
 80045aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80045ae:	ee37 7a06 	vadd.f32	s14, s14, s12
 80045b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80045b6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80045ba:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80045be:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80045c0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80045c4:	6083      	str	r3, [r0, #8]
}
 80045c6:	bc30      	pop	{r4, r5}
 80045c8:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045ca:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800461c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80045ce:	e7b4      	b.n	800453a <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045d0:	6813      	ldr	r3, [r2, #0]
 80045d2:	069b      	lsls	r3, r3, #26
 80045d4:	d51a      	bpl.n	800460c <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045d6:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045d8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045dc:	4910      	ldr	r1, [pc, #64]	; (8004620 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 80045de:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045e4:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ea:	ee07 1a10 	vmov	s14, r1
 80045ee:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80045f2:	ee07 3a10 	vmov	s14, r3
 80045f6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80045fa:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80045fe:	ee76 7a05 	vadd.f32	s15, s12, s10
 8004602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460a:	e7a7      	b.n	800455c <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800460c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004624 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8004610:	e793      	b.n	800453a <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 8004612:	bf00      	nop
 8004614:	58024400 	.word	0x58024400
 8004618:	4a742400 	.word	0x4a742400
 800461c:	4bbebc20 	.word	0x4bbebc20
 8004620:	03d09000 	.word	0x03d09000
 8004624:	4c742400 	.word	0x4c742400

08004628 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004628:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800462c:	b500      	push	{lr}
 800462e:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004630:	d02d      	beq.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004632:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004636:	d018      	beq.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004638:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800463c:	d04e      	beq.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800463e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8004642:	d037      	beq.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004644:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004648:	f000 808b 	beq.w	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800464c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004650:	f000 80ac 	beq.w	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004654:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004658:	f000 80b6 	beq.w	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800465c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8004660:	d062      	beq.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 8004662:	2000      	movs	r0, #0
}
 8004664:	b005      	add	sp, #20
 8004666:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800466a:	4a70      	ldr	r2, [pc, #448]	; (800482c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800466c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800466e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8004672:	2b80      	cmp	r3, #128	; 0x80
 8004674:	d043      	beq.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004676:	d86a      	bhi.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d039      	beq.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800467c:	2b40      	cmp	r3, #64	; 0x40
 800467e:	d1f0      	bne.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004680:	a801      	add	r0, sp, #4
 8004682:	f7ff fe09 	bl	8004298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004686:	9801      	ldr	r0, [sp, #4]
}
 8004688:	b005      	add	sp, #20
 800468a:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800468e:	4b67      	ldr	r3, [pc, #412]	; (800482c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004692:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8004696:	2b04      	cmp	r3, #4
 8004698:	d8e3      	bhi.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046f1 	.word	0x080046f1
 80046a4:	08004681 	.word	0x08004681
 80046a8:	080046ff 	.word	0x080046ff
 80046ac:	080046d5 	.word	0x080046d5
 80046b0:	0800470d 	.word	0x0800470d
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80046b4:	4a5d      	ldr	r2, [pc, #372]	; (800482c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80046b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80046b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 80046bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046c0:	d01d      	beq.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80046c2:	d85c      	bhi.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 80046c4:	b1a3      	cbz	r3, 80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80046c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046ca:	d0d9      	beq.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80046cc:	e7c9      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 80046ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046d2:	d15b      	bne.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 80046d4:	4856      	ldr	r0, [pc, #344]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 80046d6:	b005      	add	sp, #20
 80046d8:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80046dc:	4a53      	ldr	r2, [pc, #332]	; (800482c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80046de:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80046e0:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 80046e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e8:	d009      	beq.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80046ea:	d8f0      	bhi.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d151      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046f0:	a801      	add	r0, sp, #4
 80046f2:	f7ff ff01 	bl	80044f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80046f6:	9802      	ldr	r0, [sp, #8]
}
 80046f8:	b005      	add	sp, #20
 80046fa:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046fe:	a801      	add	r0, sp, #4
 8004700:	f7ff fe62 	bl	80043c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004704:	9801      	ldr	r0, [sp, #4]
}
 8004706:	b005      	add	sp, #20
 8004708:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800470c:	4b47      	ldr	r3, [pc, #284]	; (800482c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800470e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004710:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004714:	d019      	beq.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800471a:	d062      	beq.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 800471c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004720:	4844      	ldr	r0, [pc, #272]	; (8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8004722:	bf18      	it	ne
 8004724:	2000      	movne	r0, #0
 8004726:	e79d      	b.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004728:	4b40      	ldr	r3, [pc, #256]	; (800482c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8004730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004734:	d068      	beq.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004736:	d95b      	bls.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473c:	d051      	beq.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800473e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004742:	d05f      	beq.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8004744:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004748:	d18b      	bne.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 800474a:	483b      	ldr	r0, [pc, #236]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 800474c:	e78a      	b.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 800474e:	2bc0      	cmp	r3, #192	; 0xc0
 8004750:	d0c0      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8004752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004756:	d184      	bne.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004758:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800475a:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800475e:	d1da      	bne.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8004760:	e7f3      	b.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004762:	4a32      	ldr	r2, [pc, #200]	; (800482c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004764:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004766:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800476a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476e:	d0c6      	beq.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004770:	d815      	bhi.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0bc      	beq.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8004776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477a:	d081      	beq.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800477c:	e771      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 800477e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004782:	d0a7      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8004784:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004788:	d0e6      	beq.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800478a:	e76a      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 800478c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004790:	d0e2      	beq.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8004792:	e766      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004798:	f43f af72 	beq.w	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800479c:	e761      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 800479e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047a2:	d097      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80047a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a8:	d0d6      	beq.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80047aa:	e75a      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80047ac:	4a1f      	ldr	r2, [pc, #124]	; (800482c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80047ae:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80047b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 80047b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b8:	d015      	beq.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80047ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047be:	d0cb      	beq.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f47f af4e 	bne.w	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047c6:	e75b      	b.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80047c8:	4b18      	ldr	r3, [pc, #96]	; (800482c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80047ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 80047cc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80047d0:	d08e      	beq.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f43f af45 	beq.w	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047d8:	a801      	add	r0, sp, #4
 80047da:	f7ff fd5d 	bl	8004298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80047de:	9803      	ldr	r0, [sp, #12]
          break;
 80047e0:	e740      	b.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 80047e2:	4816      	ldr	r0, [pc, #88]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 80047e4:	e73e      	b.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047e6:	a801      	add	r0, sp, #4
 80047e8:	f7ff fdee 	bl	80043c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80047ec:	9803      	ldr	r0, [sp, #12]
          break;
 80047ee:	e739      	b.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 80047f0:	b17b      	cbz	r3, 8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80047f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047f6:	f47f af34 	bne.w	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047fa:	a801      	add	r0, sp, #4
 80047fc:	f7ff fd4c 	bl	8004298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004800:	9802      	ldr	r0, [sp, #8]
          break;
 8004802:	e72f      	b.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 8004804:	480b      	ldr	r0, [pc, #44]	; (8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 8004806:	e72d      	b.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004808:	a801      	add	r0, sp, #4
 800480a:	f7ff fddd 	bl	80043c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800480e:	9802      	ldr	r0, [sp, #8]
          break;
 8004810:	e728      	b.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004812:	f7fe fe33 	bl	800347c <HAL_RCC_GetHCLKFreq>
 8004816:	4b05      	ldr	r3, [pc, #20]	; (800482c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004818:	4a09      	ldr	r2, [pc, #36]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004820:	5cd3      	ldrb	r3, [r2, r3]
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	40d8      	lsrs	r0, r3
          break;
 8004828:	e71c      	b.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800482a:	bf00      	nop
 800482c:	58024400 	.word	0x58024400
 8004830:	00bb8000 	.word	0x00bb8000
 8004834:	017d7840 	.word	0x017d7840
 8004838:	03d09000 	.word	0x03d09000
 800483c:	003d0900 	.word	0x003d0900
 8004840:	0800fe60 	.word	0x0800fe60

08004844 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004844:	b390      	cbz	r0, 80048ac <HAL_RNG_Init+0x68>
{
 8004846:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004848:	7a43      	ldrb	r3, [r0, #9]
 800484a:	4604      	mov	r4, r0
 800484c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004850:	b343      	cbz	r3, 80048a4 <HAL_RNG_Init+0x60>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004852:	2302      	movs	r3, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004854:	e9d4 2100 	ldrd	r2, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8004858:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	f023 0320 	bic.w	r3, r3, #32
 8004860:	430b      	orrs	r3, r1
 8004862:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004864:	6822      	ldr	r2, [r4, #0]
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	f043 0304 	orr.w	r3, r3, #4
 800486c:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	065b      	lsls	r3, r3, #25
 8004874:	d503      	bpl.n	800487e <HAL_RNG_Init+0x3a>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004876:	2304      	movs	r3, #4
    return HAL_ERROR;
 8004878:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 800487a:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800487c:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 800487e:	f7fb fd8f 	bl	80003a0 <HAL_GetTick>
 8004882:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004884:	e004      	b.n	8004890 <HAL_RNG_Init+0x4c>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004886:	f7fb fd8b 	bl	80003a0 <HAL_GetTick>
 800488a:	1b40      	subs	r0, r0, r5
 800488c:	2802      	cmp	r0, #2
 800488e:	d80f      	bhi.n	80048b0 <HAL_RNG_Init+0x6c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f013 0304 	ands.w	r3, r3, #4
 8004898:	d1f5      	bne.n	8004886 <HAL_RNG_Init+0x42>
  hrng->State = HAL_RNG_STATE_READY;
 800489a:	2201      	movs	r2, #1
  return HAL_OK;
 800489c:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800489e:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80048a0:	60e3      	str	r3, [r4, #12]
}
 80048a2:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 80048a4:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 80048a6:	f007 fcf9 	bl	800c29c <HAL_RNG_MspInit>
 80048aa:	e7d2      	b.n	8004852 <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 80048ac:	2001      	movs	r0, #1
}
 80048ae:	4770      	bx	lr
      hrng->State = HAL_RNG_STATE_ERROR;
 80048b0:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80048b2:	2302      	movs	r3, #2
      return HAL_ERROR;
 80048b4:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 80048b6:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80048b8:	60e3      	str	r3, [r4, #12]
}
 80048ba:	bd38      	pop	{r3, r4, r5, pc}

080048bc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 80048be:	7a03      	ldrb	r3, [r0, #8]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d00b      	beq.n	80048dc <HAL_RNG_GenerateRandomNumber+0x20>
 80048c4:	4604      	mov	r4, r0
 80048c6:	2001      	movs	r0, #1
 80048c8:	460e      	mov	r6, r1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80048ca:	7a63      	ldrb	r3, [r4, #9]
  __HAL_LOCK(hrng);
 80048cc:	7220      	strb	r0, [r4, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 80048ce:	4283      	cmp	r3, r0
 80048d0:	d006      	beq.n	80048e0 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80048d2:	2304      	movs	r3, #4
 80048d4:	60e3      	str	r3, [r4, #12]
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80048d6:	2300      	movs	r3, #0
 80048d8:	7223      	strb	r3, [r4, #8]

  return status;
}
 80048da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng);
 80048dc:	2002      	movs	r0, #2
}
 80048de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 80048e0:	2302      	movs	r3, #2
 80048e2:	7263      	strb	r3, [r4, #9]
    tickstart = HAL_GetTick();
 80048e4:	f7fb fd5c 	bl	80003a0 <HAL_GetTick>
 80048e8:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80048ea:	e004      	b.n	80048f6 <HAL_RNG_GenerateRandomNumber+0x3a>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80048ec:	f7fb fd58 	bl	80003a0 <HAL_GetTick>
 80048f0:	1bc0      	subs	r0, r0, r7
 80048f2:	2802      	cmp	r0, #2
 80048f4:	d80b      	bhi.n	800490e <HAL_RNG_GenerateRandomNumber+0x52>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80048f6:	6822      	ldr	r2, [r4, #0]
 80048f8:	6855      	ldr	r5, [r2, #4]
 80048fa:	f015 0501 	ands.w	r5, r5, #1
 80048fe:	d0f5      	beq.n	80048ec <HAL_RNG_GenerateRandomNumber+0x30>
    hrng->RandomNumber = hrng->Instance->DR;
 8004900:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 8004902:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8004904:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 8004906:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8004908:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800490a:	7262      	strb	r2, [r4, #9]
 800490c:	e7e3      	b.n	80048d6 <HAL_RNG_GenerateRandomNumber+0x1a>
        hrng->State = HAL_RNG_STATE_READY;
 800490e:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004910:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 8004912:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 8004914:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004916:	60e3      	str	r3, [r4, #12]
}
 8004918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800491a:	bf00      	nop

0800491c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800491e:	2904      	cmp	r1, #4
 8004920:	d813      	bhi.n	800494a <HAL_SAI_InitProtocol+0x2e>
 8004922:	e8df f001 	tbb	[pc, r1]
 8004926:	3535      	.short	0x3535
 8004928:	1435      	.short	0x1435
 800492a:	14          	.byte	0x14
 800492b:	00          	.byte	0x00
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800492c:	4a8b      	ldr	r2, [pc, #556]	; (8004b5c <HAL_SAI_InitProtocol+0x240>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d005      	beq.n	800493e <HAL_SAI_InitProtocol+0x22>
 8004932:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8004936:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800493a:	4293      	cmp	r3, r2
 800493c:	d105      	bne.n	800494a <HAL_SAI_InitProtocol+0x2e>
 800493e:	6862      	ldr	r2, [r4, #4]
 8004940:	2a01      	cmp	r2, #1
 8004942:	d102      	bne.n	800494a <HAL_SAI_InitProtocol+0x2e>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004944:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004946:	2a00      	cmp	r2, #0
 8004948:	d053      	beq.n	80049f2 <HAL_SAI_InitProtocol+0xd6>
  hsai->SlotInit.SlotNumber      = nbslot;

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
  {
    return HAL_ERROR;
 800494a:	2001      	movs	r0, #1
}
 800494c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800494e:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004950:	2400      	movs	r4, #0
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004952:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
  hsai->SlotInit.FirstBitOffset  = 0;
  hsai->SlotInit.SlotNumber      = nbslot;
 8004956:	6703      	str	r3, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004958:	f035 0502 	bics.w	r5, r5, #2
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800495c:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004960:	6444      	str	r4, [r0, #68]	; 0x44
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004962:	bf0c      	ite	eq
 8004964:	2701      	moveq	r7, #1
 8004966:	4627      	movne	r7, r4
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;

  if (protocol == SAI_PCM_SHORT)
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8004968:	2904      	cmp	r1, #4
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800496a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800496e:	6507      	str	r7, [r0, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 1;
 8004970:	bf14      	ite	ne
 8004972:	270d      	movne	r7, #13
 8004974:	2701      	moveq	r7, #1
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004976:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004978:	65c4      	str	r4, [r0, #92]	; 0x5c
 800497a:	6587      	str	r7, [r0, #88]	; 0x58
  hsai->SlotInit.FirstBitOffset  = 0;
 800497c:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800497e:	6741      	str	r1, [r0, #116]	; 0x74
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004980:	e9c0 6518 	strd	r6, r5, [r0, #96]	; 0x60
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
  }

  switch (datasize)
 8004984:	2a03      	cmp	r2, #3
 8004986:	d8e0      	bhi.n	800494a <HAL_SAI_InitProtocol+0x2e>
 8004988:	e8df f002 	tbb	[pc, r2]
 800498c:	259e9197 	.word	0x259e9197
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004990:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004992:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8004994:	6703      	str	r3, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004996:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800499a:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800499c:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800499e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049a2:	bf08      	it	eq
 80049a4:	4626      	moveq	r6, r4
  hsai->SlotInit.FirstBitOffset  = 0;
 80049a6:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80049a8:	f64f 74ff 	movw	r4, #65535	; 0xffff
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049ac:	bf18      	it	ne
 80049ae:	2601      	movne	r6, #1
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80049b0:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80049b2:	6744      	str	r4, [r0, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 80049b4:	f013 0401 	ands.w	r4, r3, #1
 80049b8:	6506      	str	r6, [r0, #80]	; 0x50
 80049ba:	d1c6      	bne.n	800494a <HAL_SAI_InitProtocol+0x2e>
  if (protocol == SAI_I2S_STANDARD)
 80049bc:	2900      	cmp	r1, #0
 80049be:	f000 808a 	beq.w	8004ad6 <HAL_SAI_InitProtocol+0x1ba>
 80049c2:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80049c6:	e9c0 5418 	strd	r5, r4, [r0, #96]	; 0x60
  switch (datasize)
 80049ca:	2a03      	cmp	r2, #3
 80049cc:	d8bd      	bhi.n	800494a <HAL_SAI_InitProtocol+0x2e>
 80049ce:	e8df f002 	tbb	[pc, r2]
 80049d2:	a0b0      	.short	0xa0b0
 80049d4:	ba8f      	.short	0xba8f
      hsai->FrameInit.FrameLength = 32U * nbslot;
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
      break;
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80049d6:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80049d8:	21e0      	movs	r1, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80049da:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80049dc:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80049de:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80049e0:	66c2      	str	r2, [r0, #108]	; 0x6c
 80049e2:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80049e4:	f7fb fcf4 	bl	80003d0 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80049e8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80049ec:	2b01      	cmp	r3, #1
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80049ee:	6823      	ldr	r3, [r4, #0]
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80049f0:	d09c      	beq.n	800492c <HAL_SAI_InitProtocol+0x10>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80049f2:	4a5a      	ldr	r2, [pc, #360]	; (8004b5c <HAL_SAI_InitProtocol+0x240>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d079      	beq.n	8004aec <HAL_SAI_InitProtocol+0x1d0>
 80049f8:	3220      	adds	r2, #32
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d076      	beq.n	8004aec <HAL_SAI_InitProtocol+0x1d0>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80049fe:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8004a02:	4293      	cmp	r3, r2
 8004a04:	f000 8195 	beq.w	8004d32 <HAL_SAI_InitProtocol+0x416>
 8004a08:	3220      	adds	r2, #32
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	f000 8191 	beq.w	8004d32 <HAL_SAI_InitProtocol+0x416>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004a10:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8004a14:	4293      	cmp	r3, r2
 8004a16:	f000 81bd 	beq.w	8004d94 <HAL_SAI_InitProtocol+0x478>
 8004a1a:	3220      	adds	r2, #32
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	f000 81b9 	beq.w	8004d94 <HAL_SAI_InitProtocol+0x478>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8004a22:	4a4f      	ldr	r2, [pc, #316]	; (8004b60 <HAL_SAI_InitProtocol+0x244>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d002      	beq.n	8004a2e <HAL_SAI_InitProtocol+0x112>
 8004a28:	3220      	adds	r2, #32
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d18d      	bne.n	800494a <HAL_SAI_InitProtocol+0x2e>
    SaiBaseAddress = SAI4;
 8004a2e:	4d4d      	ldr	r5, [pc, #308]	; (8004b64 <HAL_SAI_InitProtocol+0x248>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8004a30:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
 8004a34:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8004a38:	2a00      	cmp	r2, #0
 8004a3a:	f000 8173 	beq.w	8004d24 <HAL_SAI_InitProtocol+0x408>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004a3e:	4a4a      	ldr	r2, [pc, #296]	; (8004b68 <HAL_SAI_InitProtocol+0x24c>)
 8004a40:	484a      	ldr	r0, [pc, #296]	; (8004b6c <HAL_SAI_InitProtocol+0x250>)
 8004a42:	6812      	ldr	r2, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004a44:	6819      	ldr	r1, [r3, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004a46:	fba0 0202 	umull	r0, r2, r0, r2
  __HAL_SAI_DISABLE(hsai);
 8004a4a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004a4e:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 8004a50:	6019      	str	r1, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004a52:	0093      	lsls	r3, r2, #2
 8004a54:	2a00      	cmp	r2, #0
 8004a56:	f000 815d 	beq.w	8004d14 <HAL_SAI_InitProtocol+0x3f8>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004a5a:	6821      	ldr	r1, [r4, #0]
    count--;
 8004a5c:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004a5e:	680a      	ldr	r2, [r1, #0]
 8004a60:	03d7      	lsls	r7, r2, #15
 8004a62:	d506      	bpl.n	8004a72 <HAL_SAI_InitProtocol+0x156>
    if (count == 0U)
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 8155 	beq.w	8004d14 <HAL_SAI_InitProtocol+0x3f8>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004a6a:	680a      	ldr	r2, [r1, #0]
    count--;
 8004a6c:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004a6e:	03d2      	lsls	r2, r2, #15
 8004a70:	d4f8      	bmi.n	8004a64 <HAL_SAI_InitProtocol+0x148>
  switch (hsai->Init.SynchroExt)
 8004a72:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 8004a74:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 8004a76:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 8004a78:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8004a7c:	f000 8185 	beq.w	8004d8a <HAL_SAI_InitProtocol+0x46e>
 8004a80:	4293      	cmp	r3, r2
 8004a82:	bf15      	itete	ne
 8004a84:	4610      	movne	r0, r2
 8004a86:	2123      	moveq	r1, #35	; 0x23
 8004a88:	2103      	movne	r1, #3
 8004a8a:	2022      	moveq	r0, #34	; 0x22
 8004a8c:	bf0b      	itete	eq
 8004a8e:	2621      	moveq	r6, #33	; 0x21
 8004a90:	2601      	movne	r6, #1
 8004a92:	2220      	moveq	r2, #32
 8004a94:	2200      	movne	r2, #0
  switch (hsai->Init.Synchro)
 8004a96:	68a3      	ldr	r3, [r4, #8]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	f200 8138 	bhi.w	8004d10 <HAL_SAI_InitProtocol+0x3f4>
 8004aa0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004aa4:	0069012f 	.word	0x0069012f
 8004aa8:	00680132 	.word	0x00680132
 8004aac:	0180      	.short	0x0180
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004aae:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004ab0:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004ab2:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004ab4:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004ab6:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004ab8:	e793      	b.n	80049e2 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004aba:	011b      	lsls	r3, r3, #4
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004abc:	2180      	movs	r1, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004abe:	2240      	movs	r2, #64	; 0x40
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004ac0:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004ac2:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004ac4:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004ac6:	e78c      	b.n	80049e2 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004ac8:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004aca:	21c0      	movs	r1, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004acc:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004ace:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004ad0:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004ad2:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004ad4:	e785      	b.n	80049e2 <HAL_SAI_InitProtocol+0xc6>
 8004ad6:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004ada:	e9c0 1418 	strd	r1, r4, [r0, #96]	; 0x60
  switch (datasize)
 8004ade:	2a03      	cmp	r2, #3
 8004ae0:	f63f af33 	bhi.w	800494a <HAL_SAI_InitProtocol+0x2e>
 8004ae4:	e8df f002 	tbb	[pc, r2]
 8004ae8:	2f041525 	.word	0x2f041525
    SaiBaseAddress = SAI1;
 8004aec:	4d20      	ldr	r5, [pc, #128]	; (8004b70 <HAL_SAI_InitProtocol+0x254>)
 8004aee:	e79f      	b.n	8004a30 <HAL_SAI_InitProtocol+0x114>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004af0:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004af2:	25c0      	movs	r5, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004af4:	2480      	movs	r4, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004af6:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004af8:	ea4f 1283 	mov.w	r2, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004afc:	6485      	str	r5, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004afe:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b02:	66c4      	str	r4, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b04:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004b08:	f47f af6b 	bne.w	80049e2 <HAL_SAI_InitProtocol+0xc6>
      hsai->SlotInit.FirstBitOffset = 8;
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	6683      	str	r3, [r0, #104]	; 0x68
 8004b10:	e767      	b.n	80049e2 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b12:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b14:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004b16:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b18:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b1c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b1e:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b22:	66c2      	str	r2, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b24:	e9c0 4315 	strd	r4, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004b28:	f47f af5b 	bne.w	80049e2 <HAL_SAI_InitProtocol+0xc6>
      hsai->SlotInit.FirstBitOffset = 16;
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	6683      	str	r3, [r0, #104]	; 0x68
 8004b30:	e757      	b.n	80049e2 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004b32:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b34:	2480      	movs	r4, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004b36:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004b38:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b3a:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004b3c:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004b3e:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004b40:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
 8004b44:	e74d      	b.n	80049e2 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b46:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004b48:	24e0      	movs	r4, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b4a:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b4c:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004b4e:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b50:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b52:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b54:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
 8004b58:	e743      	b.n	80049e2 <HAL_SAI_InitProtocol+0xc6>
 8004b5a:	bf00      	nop
 8004b5c:	40015804 	.word	0x40015804
 8004b60:	58005404 	.word	0x58005404
 8004b64:	58005400 	.word	0x58005400
 8004b68:	20000018 	.word	0x20000018
 8004b6c:	95cbec1b 	.word	0x95cbec1b
 8004b70:	40015800 	.word	0x40015800
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8004b74:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004b76:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 8004b7a:	602a      	str	r2, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004b7c:	6a23      	ldr	r3, [r4, #32]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d045      	beq.n	8004c0e <HAL_SAI_InitProtocol+0x2f2>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	4a98      	ldr	r2, [pc, #608]	; (8004de8 <HAL_SAI_InitProtocol+0x4cc>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	f000 811c 	beq.w	8004dc4 <HAL_SAI_InitProtocol+0x4a8>
 8004b8c:	4897      	ldr	r0, [pc, #604]	; (8004dec <HAL_SAI_InitProtocol+0x4d0>)
 8004b8e:	1a18      	subs	r0, r3, r0
 8004b90:	fab0 f080 	clz	r0, r0
 8004b94:	0940      	lsrs	r0, r0, #5
 8004b96:	2800      	cmp	r0, #0
 8004b98:	f040 8114 	bne.w	8004dc4 <HAL_SAI_InitProtocol+0x4a8>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004b9c:	4a94      	ldr	r2, [pc, #592]	; (8004df0 <HAL_SAI_InitProtocol+0x4d4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	f000 810a 	beq.w	8004db8 <HAL_SAI_InitProtocol+0x49c>
 8004ba4:	3220      	adds	r2, #32
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	f000 8106 	beq.w	8004db8 <HAL_SAI_InitProtocol+0x49c>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004bac:	4a91      	ldr	r2, [pc, #580]	; (8004df4 <HAL_SAI_InitProtocol+0x4d8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	f000 80fc 	beq.w	8004dac <HAL_SAI_InitProtocol+0x490>
 8004bb4:	3220      	adds	r2, #32
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	f000 80f8 	beq.w	8004dac <HAL_SAI_InitProtocol+0x490>
    if (hsai->Instance == SAI4_Block_A)
 8004bbc:	4a8e      	ldr	r2, [pc, #568]	; (8004df8 <HAL_SAI_InitProtocol+0x4dc>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	f000 810b 	beq.w	8004dda <HAL_SAI_InitProtocol+0x4be>
    if (hsai->Instance == SAI4_Block_B)
 8004bc4:	4a8d      	ldr	r2, [pc, #564]	; (8004dfc <HAL_SAI_InitProtocol+0x4e0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	f000 8102 	beq.w	8004dd0 <HAL_SAI_InitProtocol+0x4b4>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004bcc:	69a2      	ldr	r2, [r4, #24]
 8004bce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004bd2:	6a23      	ldr	r3, [r4, #32]
 8004bd4:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8004bd8:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8004bdc:	f000 80dc 	beq.w	8004d98 <HAL_SAI_InitProtocol+0x47c>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004be0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004be2:	021b      	lsls	r3, r3, #8
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004be4:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8004be8:	bf14      	ite	ne
 8004bea:	2201      	movne	r2, #1
 8004bec:	2202      	moveq	r2, #2
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	fbb0 f3f3 	udiv	r3, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8004bf6:	4a82      	ldr	r2, [pc, #520]	; (8004e00 <HAL_SAI_InitProtocol+0x4e4>)
 8004bf8:	fba2 1203 	umull	r1, r2, r2, r3
 8004bfc:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 8004bfe:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004c02:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8004c06:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 8004c08:	bf08      	it	eq
 8004c0a:	3201      	addeq	r2, #1
 8004c0c:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004c0e:	6863      	ldr	r3, [r4, #4]
 8004c10:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004c12:	f033 0702 	bics.w	r7, r3, #2
 8004c16:	f040 80b2 	bne.w	8004d7e <HAL_SAI_InitProtocol+0x462>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004c1a:	2a01      	cmp	r2, #1
 8004c1c:	bf18      	it	ne
 8004c1e:	f44f 7700 	movne.w	r7, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004c22:	f7fb fbd5 	bl	80003d0 <HAL_GetREVID>
 8004c26:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004c2a:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004c2c:	f0c0 8096 	bcc.w	8004d5c <HAL_SAI_InitProtocol+0x440>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004c30:	6811      	ldr	r1, [r2, #0]
 8004c32:	4b74      	ldr	r3, [pc, #464]	; (8004e04 <HAL_SAI_InitProtocol+0x4e8>)
 8004c34:	400b      	ands	r3, r1
 8004c36:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c38:	6863      	ldr	r3, [r4, #4]
 8004c3a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004c3c:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
 8004c40:	430b      	orrs	r3, r1
 8004c42:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004c44:	4313      	orrs	r3, r2
 8004c46:	6962      	ldr	r2, [r4, #20]
 8004c48:	4303      	orrs	r3, r0
 8004c4a:	69a0      	ldr	r0, [r4, #24]
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004c50:	4313      	orrs	r3, r2
 8004c52:	6922      	ldr	r2, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c54:	4303      	orrs	r3, r0
 8004c56:	6820      	ldr	r0, [r4, #0]
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6801      	ldr	r1, [r0, #0]
 8004c5c:	4313      	orrs	r3, r2
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004c5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c60:	430b      	orrs	r3, r1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004c62:	f24f 0120 	movw	r1, #61472	; 0xf020
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c66:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004c6a:	4333      	orrs	r3, r6
 8004c6c:	433b      	orrs	r3, r7
 8004c6e:	6003      	str	r3, [r0, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004c70:	6826      	ldr	r6, [r4, #0]
 8004c72:	4b65      	ldr	r3, [pc, #404]	; (8004e08 <HAL_SAI_InitProtocol+0x4ec>)
 8004c74:	6872      	ldr	r2, [r6, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004c76:	4865      	ldr	r0, [pc, #404]	; (8004e0c <HAL_SAI_InitProtocol+0x4f0>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004c78:	4013      	ands	r3, r2
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8004c7a:	4a5b      	ldr	r2, [pc, #364]	; (8004de8 <HAL_SAI_InitProtocol+0x4cc>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004c7c:	6073      	str	r3, [r6, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004c7e:	69e3      	ldr	r3, [r4, #28]
 8004c80:	e9d4 760c 	ldrd	r7, r6, [r4, #48]	; 0x30
 8004c84:	433b      	orrs	r3, r7
 8004c86:	6827      	ldr	r7, [r4, #0]
 8004c88:	4333      	orrs	r3, r6
 8004c8a:	687e      	ldr	r6, [r7, #4]
 8004c8c:	4333      	orrs	r3, r6
 8004c8e:	607b      	str	r3, [r7, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	689e      	ldr	r6, [r3, #8]
 8004c94:	4030      	ands	r0, r6
 8004c96:	6098      	str	r0, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c9a:	6827      	ldr	r7, [r4, #0]
 8004c9c:	e9d4 6017 	ldrd	r6, r0, [r4, #92]	; 0x5c
 8004ca0:	4333      	orrs	r3, r6
 8004ca2:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8004ca4:	4303      	orrs	r3, r0
 8004ca6:	68b8      	ldr	r0, [r7, #8]
 8004ca8:	3e01      	subs	r6, #1
 8004caa:	4303      	orrs	r3, r0
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004cae:	4333      	orrs	r3, r6
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004cb0:	3801      	subs	r0, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004cb2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004cb6:	60bb      	str	r3, [r7, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004cb8:	6820      	ldr	r0, [r4, #0]
 8004cba:	68c3      	ldr	r3, [r0, #12]
 8004cbc:	400b      	ands	r3, r1
 8004cbe:	60c3      	str	r3, [r0, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004cc0:	6820      	ldr	r0, [r4, #0]
 8004cc2:	e9d4 361a 	ldrd	r3, r6, [r4, #104]	; 0x68
 8004cc6:	68c1      	ldr	r1, [r0, #12]
 8004cc8:	4333      	orrs	r3, r6
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004cca:	6f66      	ldr	r6, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004ccc:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004cce:	6f21      	ldr	r1, [r4, #112]	; 0x70
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004cd0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004cd4:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004cd6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004cda:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d029      	beq.n	8004d36 <HAL_SAI_InitProtocol+0x41a>
 8004ce2:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8004ce6:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d023      	beq.n	8004d36 <HAL_SAI_InitProtocol+0x41a>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004cee:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8004cf0:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004cf2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 8004cf6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hsai);
 8004cf8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 8004cfc:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
}
 8004d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004d02:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004d06:	e738      	b.n	8004b7a <HAL_SAI_InitProtocol+0x25e>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004d08:	4632      	mov	r2, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004d0a:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8004d0e:	e734      	b.n	8004b7a <HAL_SAI_InitProtocol+0x25e>
      syncen_bits = 0;
 8004d10:	2600      	movs	r6, #0
 8004d12:	e732      	b.n	8004b7a <HAL_SAI_InitProtocol+0x25e>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004d14:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 8004d18:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d1e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8004d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hsai->Lock = HAL_UNLOCKED;
 8004d24:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f007 fb0f 	bl	800c34c <HAL_SAI_MspInit>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	e685      	b.n	8004a3e <HAL_SAI_InitProtocol+0x122>
    SaiBaseAddress = SAI2;
 8004d32:	4d37      	ldr	r5, [pc, #220]	; (8004e10 <HAL_SAI_InitProtocol+0x4f4>)
 8004d34:	e67c      	b.n	8004a30 <HAL_SAI_InitProtocol+0x114>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8004d36:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8004d3e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d1d3      	bne.n	8004cee <HAL_SAI_InitProtocol+0x3d2>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004d46:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8004d4a:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004d4c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004d50:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8004d52:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	646b      	str	r3, [r5, #68]	; 0x44
 8004d5a:	e7c8      	b.n	8004cee <HAL_SAI_InitProtocol+0x3d2>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004d5c:	6811      	ldr	r1, [r2, #0]
 8004d5e:	4b2d      	ldr	r3, [pc, #180]	; (8004e14 <HAL_SAI_InitProtocol+0x4f8>)
 8004d60:	400b      	ands	r3, r1
 8004d62:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d64:	6863      	ldr	r3, [r4, #4]
 8004d66:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004d68:	e9d4 2011 	ldrd	r2, r0, [r4, #68]	; 0x44
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d70:	4303      	orrs	r3, r0
 8004d72:	6960      	ldr	r0, [r4, #20]
 8004d74:	430b      	orrs	r3, r1
 8004d76:	69a1      	ldr	r1, [r4, #24]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004d7c:	e76a      	b.n	8004c54 <HAL_SAI_InitProtocol+0x338>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004d7e:	2a01      	cmp	r2, #1
 8004d80:	bf14      	ite	ne
 8004d82:	2700      	movne	r7, #0
 8004d84:	f44f 7700 	moveq.w	r7, #512	; 0x200
 8004d88:	e74b      	b.n	8004c22 <HAL_SAI_InitProtocol+0x306>
  switch (hsai->Init.SynchroExt)
 8004d8a:	2113      	movs	r1, #19
 8004d8c:	2012      	movs	r0, #18
 8004d8e:	2611      	movs	r6, #17
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004d90:	2210      	movs	r2, #16
 8004d92:	e680      	b.n	8004a96 <HAL_SAI_InitProtocol+0x17a>
    SaiBaseAddress = SAI3;
 8004d94:	4d20      	ldr	r5, [pc, #128]	; (8004e18 <HAL_SAI_InitProtocol+0x4fc>)
 8004d96:	e64b      	b.n	8004a30 <HAL_SAI_InitProtocol+0x114>
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 8004d98:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004d9a:	fb02 f303 	mul.w	r3, r2, r3
 8004d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004da2:	e728      	b.n	8004bf6 <HAL_SAI_InitProtocol+0x2da>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8004da4:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004da6:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8004daa:	e6e6      	b.n	8004b7a <HAL_SAI_InitProtocol+0x25e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8004dac:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004db0:	f7ff fc3a 	bl	8004628 <HAL_RCCEx_GetPeriphCLKFreq>
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	e701      	b.n	8004bbc <HAL_SAI_InitProtocol+0x2a0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004db8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004dbc:	f7ff fc34 	bl	8004628 <HAL_RCCEx_GetPeriphCLKFreq>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	e6f3      	b.n	8004bac <HAL_SAI_InitProtocol+0x290>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004dc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004dc8:	f7ff fc2e 	bl	8004628 <HAL_RCCEx_GetPeriphCLKFreq>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	e6e5      	b.n	8004b9c <HAL_SAI_InitProtocol+0x280>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8004dd0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004dd4:	f7ff fc28 	bl	8004628 <HAL_RCCEx_GetPeriphCLKFreq>
 8004dd8:	e6f8      	b.n	8004bcc <HAL_SAI_InitProtocol+0x2b0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8004dda:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004dde:	f7ff fc23 	bl	8004628 <HAL_RCCEx_GetPeriphCLKFreq>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	e6ee      	b.n	8004bc4 <HAL_SAI_InitProtocol+0x2a8>
 8004de6:	bf00      	nop
 8004de8:	40015804 	.word	0x40015804
 8004dec:	40015824 	.word	0x40015824
 8004df0:	40015c04 	.word	0x40015c04
 8004df4:	40016004 	.word	0x40016004
 8004df8:	58005404 	.word	0x58005404
 8004dfc:	58005424 	.word	0x58005424
 8004e00:	cccccccd 	.word	0xcccccccd
 8004e04:	f005c010 	.word	0xf005c010
 8004e08:	ffff1ff0 	.word	0xffff1ff0
 8004e0c:	fff88000 	.word	0xfff88000
 8004e10:	40015c00 	.word	0x40015c00
 8004e14:	f805c010 	.word	0xf805c010
 8004e18:	40016000 	.word	0x40016000

08004e1c <HAL_SAI_Transmit_DMA>:
{
 8004e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e20:	460f      	mov	r7, r1
 8004e22:	4604      	mov	r4, r0
 8004e24:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8004e26:	f7fb fabb 	bl	80003a0 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8004e2a:	2f00      	cmp	r7, #0
 8004e2c:	d064      	beq.n	8004ef8 <HAL_SAI_Transmit_DMA+0xdc>
 8004e2e:	fab8 f588 	clz	r5, r8
 8004e32:	096d      	lsrs	r5, r5, #5
 8004e34:	2d00      	cmp	r5, #0
 8004e36:	d15f      	bne.n	8004ef8 <HAL_SAI_Transmit_DMA+0xdc>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004e38:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 8004e3c:	b2f6      	uxtb	r6, r6
 8004e3e:	2e01      	cmp	r6, #1
 8004e40:	d156      	bne.n	8004ef0 <HAL_SAI_Transmit_DMA+0xd4>
    __HAL_LOCK(hsai);
 8004e42:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d052      	beq.n	8004ef0 <HAL_SAI_Transmit_DMA+0xd4>
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004e4a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004e4e:	2112      	movs	r1, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004e50:	4a37      	ldr	r2, [pc, #220]	; (8004f30 <HAL_SAI_Transmit_DMA+0x114>)
 8004e52:	4681      	mov	r9, r0
    hsai->pBuffPtr = pData;
 8004e54:	67a7      	str	r7, [r4, #120]	; 0x78
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004e56:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferSize = Size;
 8004e5a:	f8a4 807c 	strh.w	r8, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004e5e:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    __HAL_LOCK(hsai);
 8004e62:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->XferCount = Size;
 8004e66:	f8a4 807e 	strh.w	r8, [r4, #126]	; 0x7e
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004e6a:	4932      	ldr	r1, [pc, #200]	; (8004f34 <HAL_SAI_Transmit_DMA+0x118>)
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004e6e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004e72:	4a31      	ldr	r2, [pc, #196]	; (8004f38 <HAL_SAI_Transmit_DMA+0x11c>)
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004e74:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004e76:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004e7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8004e7c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004e80:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004e82:	6822      	ldr	r2, [r4, #0]
 8004e84:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8004e88:	321c      	adds	r2, #28
 8004e8a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004e8c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004e90:	f7fc fc3a 	bl	8001708 <HAL_DMA_Start_IT>
 8004e94:	4607      	mov	r7, r0
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d132      	bne.n	8004f00 <HAL_SAI_Transmit_DMA+0xe4>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004e9a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	2a08      	cmp	r2, #8
 8004ea0:	d03c      	beq.n	8004f1c <HAL_SAI_Transmit_DMA+0x100>
 8004ea2:	2005      	movs	r0, #5
 8004ea4:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004ea6:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ea8:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	bf88      	it	hi
 8004eae:	4602      	movhi	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004eb0:	690b      	ldr	r3, [r1, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004eb6:	6822      	ldr	r2, [r4, #0]
 8004eb8:	6813      	ldr	r3, [r2, #0]
 8004eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ebe:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004ec0:	e006      	b.n	8004ed0 <HAL_SAI_Transmit_DMA+0xb4>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004ec2:	f7fb fa6d 	bl	80003a0 <HAL_GetTick>
 8004ec6:	eba0 0009 	sub.w	r0, r0, r9
 8004eca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004ece:	d81b      	bhi.n	8004f08 <HAL_SAI_Transmit_DMA+0xec>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004ed0:	6822      	ldr	r2, [r4, #0]
 8004ed2:	6955      	ldr	r5, [r2, #20]
 8004ed4:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8004ed8:	d0f3      	beq.n	8004ec2 <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004eda:	6813      	ldr	r3, [r2, #0]
 8004edc:	03db      	lsls	r3, r3, #15
 8004ede:	d403      	bmi.n	8004ee8 <HAL_SAI_Transmit_DMA+0xcc>
      __HAL_SAI_ENABLE(hsai);
 8004ee0:	6813      	ldr	r3, [r2, #0]
 8004ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee6:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8004eee:	e000      	b.n	8004ef2 <HAL_SAI_Transmit_DMA+0xd6>
    return HAL_BUSY;
 8004ef0:	2702      	movs	r7, #2
}
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 8004ef8:	2701      	movs	r7, #1
}
 8004efa:	4638      	mov	r0, r7
 8004efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_UNLOCK(hsai);
 8004f00:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8004f04:	4637      	mov	r7, r6
 8004f06:	e7f4      	b.n	8004ef2 <HAL_SAI_Transmit_DMA+0xd6>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004f08:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8004f0c:	2703      	movs	r7, #3
        __HAL_UNLOCK(hsai);
 8004f0e:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f16:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8004f1a:	e7ea      	b.n	8004ef2 <HAL_SAI_Transmit_DMA+0xd6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004f1c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004f20:	2a01      	cmp	r2, #1
 8004f22:	bf0b      	itete	eq
 8004f24:	2015      	moveq	r0, #21
 8004f26:	2005      	movne	r0, #5
 8004f28:	2271      	moveq	r2, #113	; 0x71
 8004f2a:	2261      	movne	r2, #97	; 0x61
 8004f2c:	e7bb      	b.n	8004ea6 <HAL_SAI_Transmit_DMA+0x8a>
 8004f2e:	bf00      	nop
 8004f30:	08005089 	.word	0x08005089
 8004f34:	08005021 	.word	0x08005021
 8004f38:	08005111 	.word	0x08005111

08004f3c <HAL_SAI_Receive_DMA>:
  if ((pData == NULL) || (Size == 0U))
 8004f3c:	2900      	cmp	r1, #0
 8004f3e:	d057      	beq.n	8004ff0 <HAL_SAI_Receive_DMA+0xb4>
{
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0U))
 8004f42:	fab2 f582 	clz	r5, r2
 8004f46:	096d      	lsrs	r5, r5, #5
 8004f48:	2d00      	cmp	r5, #0
 8004f4a:	d14f      	bne.n	8004fec <HAL_SAI_Receive_DMA+0xb0>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004f4c:	f890 6091 	ldrb.w	r6, [r0, #145]	; 0x91
 8004f50:	b2f6      	uxtb	r6, r6
 8004f52:	2e01      	cmp	r6, #1
 8004f54:	d148      	bne.n	8004fe8 <HAL_SAI_Receive_DMA+0xac>
    __HAL_LOCK(hsai);
 8004f56:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d044      	beq.n	8004fe8 <HAL_SAI_Receive_DMA+0xac>
 8004f5e:	4604      	mov	r4, r0
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004f60:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004f64:	2722      	movs	r7, #34	; 0x22
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004f66:	482a      	ldr	r0, [pc, #168]	; (8005010 <HAL_SAI_Receive_DMA+0xd4>)
    hsai->pBuffPtr = pData;
 8004f68:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8004f6a:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004f6e:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferCount = Size;
 8004f72:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
    __HAL_LOCK(hsai);
 8004f76:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004f7a:	f884 7091 	strb.w	r7, [r4, #145]	; 0x91
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004f7e:	4925      	ldr	r1, [pc, #148]	; (8005014 <HAL_SAI_Receive_DMA+0xd8>)
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004f80:	6418      	str	r0, [r3, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004f82:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004f86:	4a24      	ldr	r2, [pc, #144]	; (8005018 <HAL_SAI_Receive_DMA+0xdc>)
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004f88:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004f8a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004f8e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8004f90:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004f94:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004f96:	6821      	ldr	r1, [r4, #0]
 8004f98:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8004f9c:	311c      	adds	r1, #28
 8004f9e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004fa0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004fa4:	f7fc fbb0 	bl	8001708 <HAL_DMA_Start_IT>
 8004fa8:	bb20      	cbnz	r0, 8004ff4 <HAL_SAI_Receive_DMA+0xb8>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004faa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004fac:	6863      	ldr	r3, [r4, #4]
 8004fae:	2a08      	cmp	r2, #8
 8004fb0:	d024      	beq.n	8004ffc <HAL_SAI_Receive_DMA+0xc0>
 8004fb2:	2505      	movs	r5, #5
 8004fb4:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004fb6:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004fb8:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	bf88      	it	hi
 8004fbe:	462a      	movhi	r2, r5
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004fc0:	690b      	ldr	r3, [r1, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004fc6:	6822      	ldr	r2, [r4, #0]
 8004fc8:	6813      	ldr	r3, [r2, #0]
 8004fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fce:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	03d2      	lsls	r2, r2, #15
 8004fd6:	d403      	bmi.n	8004fe0 <HAL_SAI_Receive_DMA+0xa4>
      __HAL_SAI_ENABLE(hsai);
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004fde:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8004fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004fe8:	2002      	movs	r0, #2
}
 8004fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8004fec:	2001      	movs	r0, #1
}
 8004fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8004ff0:	2001      	movs	r0, #1
}
 8004ff2:	4770      	bx	lr
      __HAL_UNLOCK(hsai);
 8004ff4:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8004ff8:	4630      	mov	r0, r6
}
 8004ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004ffc:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005000:	2a01      	cmp	r2, #1
 8005002:	bf0b      	itete	eq
 8005004:	2515      	moveq	r5, #21
 8005006:	2505      	movne	r5, #5
 8005008:	2271      	moveq	r2, #113	; 0x71
 800500a:	2261      	movne	r2, #97	; 0x61
 800500c:	e7d3      	b.n	8004fb6 <HAL_SAI_Receive_DMA+0x7a>
 800500e:	bf00      	nop
 8005010:	08005101 	.word	0x08005101
 8005014:	08005099 	.word	0x08005099
 8005018:	08005111 	.word	0x08005111

0800501c <HAL_SAI_TxCpltCallback>:
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop

08005020 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005020:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005022:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005024:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502a:	d01a      	beq.n	8005062 <SAI_DMATxCplt+0x42>
  {
    hsai->XferCount = 0;
 800502c:	2300      	movs	r3, #0

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800502e:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8005030:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005034:	6813      	ldr	r3, [r2, #0]
 8005036:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800503a:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800503c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800503e:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005040:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005042:	d011      	beq.n	8005068 <SAI_DMATxCplt+0x48>
 8005044:	f06f 0261 	mvn.w	r2, #97	; 0x61
 8005048:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800504c:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800504e:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 8005050:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005052:	42a3      	cmp	r3, r4
 8005054:	bf88      	it	hi
 8005056:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005058:	690b      	ldr	r3, [r1, #16]
 800505a:	4013      	ands	r3, r2
 800505c:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800505e:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005062:	f7ff ffdb 	bl	800501c <HAL_SAI_TxCpltCallback>
#endif
}
 8005066:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005068:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800506c:	2a01      	cmp	r2, #1
 800506e:	bf0b      	itete	eq
 8005070:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 8005074:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 8005078:	f06f 0515 	mvneq.w	r5, #21
 800507c:	f06f 0505 	mvnne.w	r5, #5
 8005080:	e7e4      	b.n	800504c <SAI_DMATxCplt+0x2c>
 8005082:	bf00      	nop

08005084 <HAL_SAI_TxHalfCpltCallback>:
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop

08005088 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005088:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800508a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800508c:	f7ff fffa 	bl	8005084 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005090:	bd08      	pop	{r3, pc}
 8005092:	bf00      	nop

08005094 <HAL_SAI_RxCpltCallback>:
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop

08005098 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005098:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800509a:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800509c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800509e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a2:	d01a      	beq.n	80050da <SAI_DMARxCplt+0x42>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80050a4:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 80050a6:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80050a8:	6813      	ldr	r3, [r2, #0]
 80050aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050ae:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80050b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
 80050b2:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80050b6:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80050b8:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80050ba:	d011      	beq.n	80050e0 <SAI_DMARxCplt+0x48>
 80050bc:	f06f 0261 	mvn.w	r2, #97	; 0x61
 80050c0:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80050c4:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80050c6:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 80050c8:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80050ca:	42a3      	cmp	r3, r4
 80050cc:	bf88      	it	hi
 80050ce:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80050d0:	690b      	ldr	r3, [r1, #16]
 80050d2:	4013      	ands	r3, r2
 80050d4:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 80050d6:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80050da:	f7ff ffdb 	bl	8005094 <HAL_SAI_RxCpltCallback>
#endif
}
 80050de:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80050e0:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80050e4:	2a01      	cmp	r2, #1
 80050e6:	bf0b      	itete	eq
 80050e8:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 80050ec:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 80050f0:	f06f 0515 	mvneq.w	r5, #21
 80050f4:	f06f 0505 	mvnne.w	r5, #5
 80050f8:	e7e4      	b.n	80050c4 <SAI_DMARxCplt+0x2c>
 80050fa:	bf00      	nop

080050fc <HAL_SAI_RxHalfCpltCallback>:
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop

08005100 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005100:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005102:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005104:	f7ff fffa 	bl	80050fc <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8005108:	bd08      	pop	{r3, pc}
 800510a:	bf00      	nop

0800510c <HAL_SAI_ErrorCallback>:
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop

08005110 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005110:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005112:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005114:	f7fd fb1e 	bl	8002754 <HAL_DMA_GetError>
 8005118:	2802      	cmp	r0, #2
 800511a:	d02a      	beq.n	8005172 <SAI_DMAError+0x62>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800511c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005120:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005126:	4a17      	ldr	r2, [pc, #92]	; (8005184 <SAI_DMAError+0x74>)
 8005128:	4d17      	ldr	r5, [pc, #92]	; (8005188 <SAI_DMAError+0x78>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800512a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800512e:	680b      	ldr	r3, [r1, #0]
 8005130:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005134:	600b      	str	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005136:	6812      	ldr	r2, [r2, #0]
  __HAL_SAI_DISABLE(hsai);
 8005138:	6820      	ldr	r0, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800513a:	fba5 3202 	umull	r3, r2, r5, r2
  __HAL_SAI_DISABLE(hsai);
 800513e:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005140:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 8005142:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    if (count == 0U)
 8005146:	0093      	lsls	r3, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8005148:	6001      	str	r1, [r0, #0]
    if (count == 0U)
 800514a:	b19a      	cbz	r2, 8005174 <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800514c:	6821      	ldr	r1, [r4, #0]
    count--;
 800514e:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005150:	680a      	ldr	r2, [r1, #0]
 8005152:	03d0      	lsls	r0, r2, #15
 8005154:	d504      	bpl.n	8005160 <SAI_DMAError+0x50>
    if (count == 0U)
 8005156:	b16b      	cbz	r3, 8005174 <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005158:	680a      	ldr	r2, [r1, #0]
    count--;
 800515a:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800515c:	03d2      	lsls	r2, r2, #15
 800515e:	d4fa      	bmi.n	8005156 <SAI_DMAError+0x46>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005160:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005162:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8005164:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 8005166:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 800516a:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 800516e:	f7ff ffcd 	bl	800510c <HAL_SAI_ErrorCallback>
#endif
  }
}
 8005172:	bd38      	pop	{r3, r4, r5, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005174:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800517c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8005180:	e7ee      	b.n	8005160 <SAI_DMAError+0x50>
 8005182:	bf00      	nop
 8005184:	20000018 	.word	0x20000018
 8005188:	95cbec1b 	.word	0x95cbec1b

0800518c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005190:	4605      	mov	r5, r0
 8005192:	b087      	sub	sp, #28
 8005194:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005196:	f7fb f903 	bl	80003a0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800519a:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800519c:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800519e:	6828      	ldr	r0, [r5, #0]
 80051a0:	f001 ff6e 	bl	8007080 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80051a4:	4604      	mov	r4, r0
 80051a6:	b118      	cbz	r0, 80051b0 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80051a8:	4620      	mov	r0, r4
 80051aa:	b007      	add	sp, #28
 80051ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80051b0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80051b2:	6828      	ldr	r0, [r5, #0]
 80051b4:	0409      	lsls	r1, r1, #16
 80051b6:	f002 f9cf 	bl	8007558 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80051ba:	4604      	mov	r4, r0
 80051bc:	2800      	cmp	r0, #0
 80051be:	d1f3      	bne.n	80051a8 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 8U;
 80051c4:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80051c6:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80051c8:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051ca:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80051cc:	2202      	movs	r2, #2
  config.DataLength    = 8U;
 80051ce:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80051d0:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80051d2:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80051d4:	4669      	mov	r1, sp
 80051d6:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80051d8:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80051da:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80051dc:	f001 ff3a 	bl	8007054 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80051e0:	6828      	ldr	r0, [r5, #0]
 80051e2:	f002 fa75 	bl	80076d0 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80051e6:	4604      	mov	r4, r0
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d1dd      	bne.n	80051a8 <SD_FindSCR+0x1c>
  uint32_t index = 0U;
 80051ec:	4681      	mov	r9, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 80051ee:	4683      	mov	fp, r0
 80051f0:	4682      	mov	sl, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80051f2:	f240 582a 	movw	r8, #1322	; 0x52a
 80051f6:	e004      	b.n	8005202 <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80051f8:	f7fb f8d2 	bl	80003a0 <HAL_GetTick>
 80051fc:	1b80      	subs	r0, r0, r6
 80051fe:	3001      	adds	r0, #1
 8005200:	d025      	beq.n	800524e <SD_FindSCR+0xc2>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8005202:	6828      	ldr	r0, [r5, #0]
 8005204:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005206:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800520a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800520c:	d10e      	bne.n	800522c <SD_FindSCR+0xa0>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800520e:	031b      	lsls	r3, r3, #12
 8005210:	d4f2      	bmi.n	80051f8 <SD_FindSCR+0x6c>
 8005212:	f1b9 0f00 	cmp.w	r9, #0
 8005216:	d1ef      	bne.n	80051f8 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005218:	f001 ff02 	bl	8007020 <SDMMC_ReadFIFO>
 800521c:	4682      	mov	sl, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800521e:	6828      	ldr	r0, [r5, #0]
      index++;
 8005220:	f04f 0901 	mov.w	r9, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005224:	f001 fefc 	bl	8007020 <SDMMC_ReadFIFO>
 8005228:	4683      	mov	fp, r0
 800522a:	e7e5      	b.n	80051f8 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800522c:	0719      	lsls	r1, r3, #28
 800522e:	d411      	bmi.n	8005254 <SD_FindSCR+0xc8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005230:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005232:	079a      	lsls	r2, r3, #30
 8005234:	d411      	bmi.n	800525a <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005236:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005238:	069b      	lsls	r3, r3, #26
 800523a:	d411      	bmi.n	8005260 <SD_FindSCR+0xd4>
 800523c:	fa9b f28b 	rev.w	r2, fp
 8005240:	fa9a f38a 	rev.w	r3, sl
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005244:	4908      	ldr	r1, [pc, #32]	; (8005268 <SD_FindSCR+0xdc>)
 8005246:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005248:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800524c:	e7ac      	b.n	80051a8 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800524e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005252:	e7a9      	b.n	80051a8 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005254:	2408      	movs	r4, #8
 8005256:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005258:	e7a6      	b.n	80051a8 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800525a:	2402      	movs	r4, #2
 800525c:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800525e:	e7a3      	b.n	80051a8 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005260:	2420      	movs	r4, #32
 8005262:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005264:	e7a0      	b.n	80051a8 <SD_FindSCR+0x1c>
 8005266:	bf00      	nop
 8005268:	18000f3a 	.word	0x18000f3a

0800526c <HAL_SD_ReadBlocks>:
{
 800526c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005270:	460d      	mov	r5, r1
 8005272:	b086      	sub	sp, #24
 8005274:	4604      	mov	r4, r0
 8005276:	4690      	mov	r8, r2
 8005278:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 800527a:	f7fb f891 	bl	80003a0 <HAL_GetTick>
  if(NULL == pData)
 800527e:	2d00      	cmp	r5, #0
 8005280:	d070      	beq.n	8005364 <HAL_SD_ReadBlocks+0xf8>
 8005282:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005284:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8005288:	b2c0      	uxtb	r0, r0
 800528a:	2801      	cmp	r0, #1
 800528c:	d007      	beq.n	800529e <HAL_SD_ReadBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800528e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005290:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005296:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005298:	b006      	add	sp, #24
 800529a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800529e:	eb08 0306 	add.w	r3, r8, r6
 80052a2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80052a4:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80052a6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80052a8:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80052aa:	d863      	bhi.n	8005374 <HAL_SD_ReadBlocks+0x108>
    hsd->Instance->DCTRL = 0U;
 80052ac:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 80052ae:	2203      	movs	r2, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80052b0:	f04f 0902 	mov.w	r9, #2
    hsd->State = HAL_SD_STATE_BUSY;
 80052b4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80052b8:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 80052ba:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80052bc:	0271      	lsls	r1, r6, #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80052be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80052c0:	9101      	str	r1, [sp, #4]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80052c2:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80052c4:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80052ca:	6820      	ldr	r0, [r4, #0]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80052cc:	9300      	str	r3, [sp, #0]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80052ce:	f04f 0300 	mov.w	r3, #0
      add *= 512U;
 80052d2:	bf18      	it	ne
 80052d4:	ea4f 2848 	movne.w	r8, r8, lsl #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80052d8:	9202      	str	r2, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80052da:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80052dc:	e9cd 9303 	strd	r9, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80052e0:	f001 feb8 	bl	8007054 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80052e4:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 80052e6:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80052e8:	68d3      	ldr	r3, [r2, #12]
 80052ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ee:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 80052f0:	d953      	bls.n	800539a <HAL_SD_ReadBlocks+0x12e>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80052f2:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80052f6:	4641      	mov	r1, r8
 80052f8:	6820      	ldr	r0, [r4, #0]
 80052fa:	f001 ff49 	bl	8007190 <SDMMC_CmdReadMultiBlock>
 80052fe:	4603      	mov	r3, r0
 8005300:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005302:	2b00      	cmp	r3, #0
 8005304:	d13d      	bne.n	8005382 <HAL_SD_ReadBlocks+0x116>
    dataremaining = config.DataLength;
 8005306:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800530a:	e006      	b.n	800531a <HAL_SD_ReadBlocks+0xae>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800530c:	f7fb f848 	bl	80003a0 <HAL_GetTick>
 8005310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005312:	1bc0      	subs	r0, r0, r7
 8005314:	4298      	cmp	r0, r3
 8005316:	d274      	bcs.n	8005402 <HAL_SD_ReadBlocks+0x196>
 8005318:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800531a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800531c:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8005320:	d143      	bne.n	80053aa <HAL_SD_ReadBlocks+0x13e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005322:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005324:	0419      	lsls	r1, r3, #16
 8005326:	d5f1      	bpl.n	800530c <HAL_SD_ReadBlocks+0xa0>
 8005328:	f1b9 0f1f 	cmp.w	r9, #31
 800532c:	d9ee      	bls.n	800530c <HAL_SD_ReadBlocks+0xa0>
 800532e:	f105 0a04 	add.w	sl, r5, #4
 8005332:	f105 0824 	add.w	r8, r5, #36	; 0x24
 8005336:	e000      	b.n	800533a <HAL_SD_ReadBlocks+0xce>
 8005338:	6820      	ldr	r0, [r4, #0]
          data = SDMMC_ReadFIFO(hsd->Instance);
 800533a:	f001 fe71 	bl	8007020 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800533e:	f80a 0c04 	strb.w	r0, [sl, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005342:	0a02      	lsrs	r2, r0, #8
 8005344:	f10a 0a04 	add.w	sl, sl, #4
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005348:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800534a:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800534c:	f80a 2c07 	strb.w	r2, [sl, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005350:	f80a 3c06 	strb.w	r3, [sl, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005354:	f80a 0c05 	strb.w	r0, [sl, #-5]
        for(count = 0U; count < 8U; count++)
 8005358:	45c2      	cmp	sl, r8
 800535a:	d1ed      	bne.n	8005338 <HAL_SD_ReadBlocks+0xcc>
 800535c:	3520      	adds	r5, #32
        dataremaining -= 32U;
 800535e:	f1a9 0920 	sub.w	r9, r9, #32
 8005362:	e7d3      	b.n	800530c <HAL_SD_ReadBlocks+0xa0>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005366:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005368:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800536c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800536e:	b006      	add	sp, #24
 8005370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005374:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800537a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800537c:	b006      	add	sp, #24
 800537e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005382:	4a39      	ldr	r2, [pc, #228]	; (8005468 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 8005384:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8005386:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005388:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800538a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 800538c:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 800538e:	4313      	orrs	r3, r2
 8005390:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005392:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005396:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 8005398:	e77e      	b.n	8005298 <HAL_SD_ReadBlocks+0x2c>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800539a:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800539c:	4641      	mov	r1, r8
 800539e:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80053a0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80053a2:	f001 feb1 	bl	8007108 <SDMMC_CmdReadSingleBlock>
 80053a6:	4603      	mov	r3, r0
 80053a8:	e7aa      	b.n	8005300 <HAL_SD_ReadBlocks+0x94>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80053aa:	68c3      	ldr	r3, [r0, #12]
 80053ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b0:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b6:	05d2      	lsls	r2, r2, #23
 80053b8:	d50b      	bpl.n	80053d2 <HAL_SD_ReadBlocks+0x166>
 80053ba:	2e01      	cmp	r6, #1
 80053bc:	d909      	bls.n	80053d2 <HAL_SD_ReadBlocks+0x166>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80053be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80053c0:	2a03      	cmp	r2, #3
 80053c2:	d006      	beq.n	80053d2 <HAL_SD_ReadBlocks+0x166>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 ffaf 	bl	8007328 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80053ca:	4603      	mov	r3, r0
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d145      	bne.n	800545c <HAL_SD_ReadBlocks+0x1f0>
 80053d0:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80053d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d4:	f012 0208 	ands.w	r2, r2, #8
 80053d8:	d121      	bne.n	800541e <HAL_SD_ReadBlocks+0x1b2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80053da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053dc:	f011 0102 	ands.w	r1, r1, #2
 80053e0:	d12a      	bne.n	8005438 <HAL_SD_ReadBlocks+0x1cc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80053e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80053e4:	f010 0020 	ands.w	r0, r0, #32
 80053e8:	d032      	beq.n	8005450 <HAL_SD_ReadBlocks+0x1e4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053ea:	481f      	ldr	r0, [pc, #124]	; (8005468 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 80053ec:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053ee:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80053f0:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80053f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053f4:	f043 0320 	orr.w	r3, r3, #32
 80053f8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053fa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053fe:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005400:	e74a      	b.n	8005298 <HAL_SD_ReadBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005402:	6823      	ldr	r3, [r4, #0]
        hsd->State= HAL_SD_STATE_READY;
 8005404:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005406:	4d18      	ldr	r5, [pc, #96]	; (8005468 <HAL_SD_ReadBlocks+0x1fc>)
        hsd->Context = SD_CONTEXT_NONE;
 8005408:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800540a:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800540c:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800540e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005414:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005416:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800541a:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800541c:	e73c      	b.n	8005298 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800541e:	4812      	ldr	r0, [pc, #72]	; (8005468 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 8005420:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8005422:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005424:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005426:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005428:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800542a:	f043 0308 	orr.w	r3, r3, #8
 800542e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005430:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005434:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005436:	e72f      	b.n	8005298 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005438:	480b      	ldr	r0, [pc, #44]	; (8005468 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 800543a:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800543c:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800543e:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005440:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005442:	f043 0302 	orr.w	r3, r3, #2
 8005446:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005448:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800544c:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800544e:	e723      	b.n	8005298 <HAL_SD_ReadBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005450:	4906      	ldr	r1, [pc, #24]	; (800546c <HAL_SD_ReadBlocks+0x200>)
    hsd->State = HAL_SD_STATE_READY;
 8005452:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005454:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005456:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 800545a:	e71d      	b.n	8005298 <HAL_SD_ReadBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800545c:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800545e:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005460:	4801      	ldr	r0, [pc, #4]	; (8005468 <HAL_SD_ReadBlocks+0x1fc>)
          hsd->Context = SD_CONTEXT_NONE;
 8005462:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005464:	6390      	str	r0, [r2, #56]	; 0x38
 8005466:	e790      	b.n	800538a <HAL_SD_ReadBlocks+0x11e>
 8005468:	1fe00fff 	.word	0x1fe00fff
 800546c:	18000f3a 	.word	0x18000f3a

08005470 <HAL_SD_WriteBlocks>:
{
 8005470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005474:	460d      	mov	r5, r1
 8005476:	b089      	sub	sp, #36	; 0x24
 8005478:	4604      	mov	r4, r0
 800547a:	4616      	mov	r6, r2
 800547c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800547e:	f7fa ff8f 	bl	80003a0 <HAL_GetTick>
  if(NULL == pData)
 8005482:	2d00      	cmp	r5, #0
 8005484:	d05d      	beq.n	8005542 <HAL_SD_WriteBlocks+0xd2>
 8005486:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005488:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800548c:	b2c0      	uxtb	r0, r0
 800548e:	2801      	cmp	r0, #1
 8005490:	d007      	beq.n	80054a2 <HAL_SD_WriteBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005494:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005496:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800549a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800549c:	b009      	add	sp, #36	; 0x24
 800549e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80054a2:	19f3      	adds	r3, r6, r7
 80054a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80054a6:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80054a8:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80054aa:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80054ac:	d851      	bhi.n	8005552 <HAL_SD_WriteBlocks+0xe2>
    hsd->Instance->DCTRL = 0U;
 80054ae:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 80054b0:	2203      	movs	r2, #3
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80054b2:	0278      	lsls	r0, r7, #9
    hsd->State = HAL_SD_STATE_BUSY;
 80054b4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80054b8:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 80054ba:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80054bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80054c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80054c2:	9102      	str	r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80054c4:	a902      	add	r1, sp, #8
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80054c6:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80054c8:	f04f 0300 	mov.w	r3, #0
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80054cc:	e9cd 0203 	strd	r0, r2, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80054d0:	6820      	ldr	r0, [r4, #0]
      add *= 512U;
 80054d2:	bf18      	it	ne
 80054d4:	0276      	lslne	r6, r6, #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80054d6:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80054d8:	e9cd 3305 	strd	r3, r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80054dc:	f001 fdba 	bl	8007054 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80054e0:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 80054e2:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80054e4:	68d3      	ldr	r3, [r2, #12]
 80054e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ea:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 80054ec:	d944      	bls.n	8005578 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80054ee:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80054f0:	4631      	mov	r1, r6
 80054f2:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80054f4:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80054f6:	f001 fed3 	bl	80072a0 <SDMMC_CmdWriteMultiBlock>
 80054fa:	4603      	mov	r3, r0
 80054fc:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054fe:	bb7b      	cbnz	r3, 8005560 <HAL_SD_WriteBlocks+0xf0>
    dataremaining = config.DataLength;
 8005500:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005502:	e007      	b.n	8005514 <HAL_SD_WriteBlocks+0xa4>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005504:	f7fa ff4c 	bl	80003a0 <HAL_GetTick>
 8005508:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800550a:	eba0 0008 	sub.w	r0, r0, r8
 800550e:	4298      	cmp	r0, r3
 8005510:	d266      	bcs.n	80055e0 <HAL_SD_WriteBlocks+0x170>
 8005512:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005514:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005516:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800551a:	d135      	bne.n	8005588 <HAL_SD_WriteBlocks+0x118>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800551c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800551e:	0459      	lsls	r1, r3, #17
 8005520:	d5f0      	bpl.n	8005504 <HAL_SD_WriteBlocks+0x94>
 8005522:	2e1f      	cmp	r6, #31
 8005524:	d9ee      	bls.n	8005504 <HAL_SD_WriteBlocks+0x94>
 8005526:	f105 0920 	add.w	r9, r5, #32
 800552a:	e000      	b.n	800552e <HAL_SD_WriteBlocks+0xbe>
 800552c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800552e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005532:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005534:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005536:	f001 fd77 	bl	8007028 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800553a:	454d      	cmp	r5, r9
 800553c:	d1f6      	bne.n	800552c <HAL_SD_WriteBlocks+0xbc>
        dataremaining -= 32U;
 800553e:	3e20      	subs	r6, #32
 8005540:	e7e0      	b.n	8005504 <HAL_SD_WriteBlocks+0x94>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005542:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005544:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005546:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800554a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800554c:	b009      	add	sp, #36	; 0x24
 800554e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005552:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005558:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800555a:	b009      	add	sp, #36	; 0x24
 800555c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005560:	4a38      	ldr	r2, [pc, #224]	; (8005644 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8005562:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8005564:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005566:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005568:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 800556a:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 800556c:	4313      	orrs	r3, r2
 800556e:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005570:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005574:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 8005576:	e791      	b.n	800549c <HAL_SD_WriteBlocks+0x2c>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005578:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800557a:	4631      	mov	r1, r6
 800557c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800557e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005580:	f001 fe4a 	bl	8007218 <SDMMC_CmdWriteSingleBlock>
 8005584:	4603      	mov	r3, r0
 8005586:	e7b9      	b.n	80054fc <HAL_SD_WriteBlocks+0x8c>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005588:	68c3      	ldr	r3, [r0, #12]
 800558a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558e:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005594:	05d2      	lsls	r2, r2, #23
 8005596:	d50b      	bpl.n	80055b0 <HAL_SD_WriteBlocks+0x140>
 8005598:	2f01      	cmp	r7, #1
 800559a:	d909      	bls.n	80055b0 <HAL_SD_WriteBlocks+0x140>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800559c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800559e:	2a03      	cmp	r2, #3
 80055a0:	d006      	beq.n	80055b0 <HAL_SD_WriteBlocks+0x140>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 fec0 	bl	8007328 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80055a8:	4603      	mov	r3, r0
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d143      	bne.n	8005636 <HAL_SD_WriteBlocks+0x1c6>
 80055ae:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80055b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b2:	f012 0208 	ands.w	r2, r2, #8
 80055b6:	d11f      	bne.n	80055f8 <HAL_SD_WriteBlocks+0x188>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80055b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055ba:	f011 0102 	ands.w	r1, r1, #2
 80055be:	d128      	bne.n	8005612 <HAL_SD_WriteBlocks+0x1a2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80055c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80055c2:	f010 0010 	ands.w	r0, r0, #16
 80055c6:	d030      	beq.n	800562a <HAL_SD_WriteBlocks+0x1ba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055c8:	481e      	ldr	r0, [pc, #120]	; (8005644 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 80055ca:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055cc:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80055ce:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80055d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055d2:	f043 0310 	orr.w	r3, r3, #16
 80055d6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055d8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055dc:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 80055de:	e75d      	b.n	800549c <HAL_SD_WriteBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055e0:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 80055e2:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055e4:	4d17      	ldr	r5, [pc, #92]	; (8005644 <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 80055e6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80055e8:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055ea:	638d      	str	r5, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80055ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055ee:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80055f0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80055f4:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80055f6:	e751      	b.n	800549c <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055f8:	4812      	ldr	r0, [pc, #72]	; (8005644 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 80055fa:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 80055fc:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055fe:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005600:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005602:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005604:	f043 0308 	orr.w	r3, r3, #8
 8005608:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800560a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800560e:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005610:	e744      	b.n	800549c <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005612:	480c      	ldr	r0, [pc, #48]	; (8005644 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8005614:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005616:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005618:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800561a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800561c:	f043 0302 	orr.w	r3, r3, #2
 8005620:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005622:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005626:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005628:	e738      	b.n	800549c <HAL_SD_WriteBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800562a:	4907      	ldr	r1, [pc, #28]	; (8005648 <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 800562c:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800562e:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005630:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8005634:	e732      	b.n	800549c <HAL_SD_WriteBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005636:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 8005638:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800563a:	4802      	ldr	r0, [pc, #8]	; (8005644 <HAL_SD_WriteBlocks+0x1d4>)
          hsd->Context = SD_CONTEXT_NONE;
 800563c:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800563e:	6390      	str	r0, [r2, #56]	; 0x38
 8005640:	e792      	b.n	8005568 <HAL_SD_WriteBlocks+0xf8>
 8005642:	bf00      	nop
 8005644:	1fe00fff 	.word	0x1fe00fff
 8005648:	18000f3a 	.word	0x18000f3a

0800564c <HAL_SD_ErrorCallback>:
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop

08005650 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop

08005654 <HAL_SD_GetCardCSD>:
{
 8005654:	4603      	mov	r3, r0
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005656:	2000      	movs	r0, #0
{
 8005658:	b430      	push	{r4, r5}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800565a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800565c:	0f92      	lsrs	r2, r2, #30
 800565e:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005660:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005662:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8005666:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005668:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 800566c:	f002 0203 	and.w	r2, r2, #3
 8005670:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005672:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8005676:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005678:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 800567c:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800567e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8005682:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005684:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005686:	0d12      	lsrs	r2, r2, #20
 8005688:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800568a:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800568e:	f002 020f 	and.w	r2, r2, #15
 8005692:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005694:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005696:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800569a:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800569c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800569e:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80056a2:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80056a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80056a6:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80056aa:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80056ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80056ae:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80056b2:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80056b4:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80056b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b8:	2a00      	cmp	r2, #0
 80056ba:	f040 8086 	bne.w	80057ca <HAL_SD_GetCardCSD+0x176>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80056be:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80056c0:	f640 72fc 	movw	r2, #4092	; 0xffc
 80056c4:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80056c6:	2401      	movs	r4, #1
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80056c8:	ea02 0285 	and.w	r2, r2, r5, lsl #2
    hsd->SdCard.LogBlockSize = 512U;
 80056cc:	f44f 7500 	mov.w	r5, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80056d0:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80056d4:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80056d6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80056d8:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 80056dc:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80056de:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 80056e2:	f002 0207 	and.w	r2, r2, #7
 80056e6:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80056e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80056ea:	f3c2 5242 	ubfx	r2, r2, #21, #3
 80056ee:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80056f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80056f2:	f3c2 4282 	ubfx	r2, r2, #18, #3
 80056f6:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80056f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80056fa:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 80056fe:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005700:	690a      	ldr	r2, [r1, #16]
 8005702:	4422      	add	r2, r4
 8005704:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005706:	7e08      	ldrb	r0, [r1, #24]
 8005708:	f000 0007 	and.w	r0, r0, #7
 800570c:	3002      	adds	r0, #2
 800570e:	4082      	lsls	r2, r0
 8005710:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005712:	7a08      	ldrb	r0, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 8005714:	659d      	str	r5, [r3, #88]	; 0x58
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005716:	f000 000f 	and.w	r0, r0, #15
 800571a:	fa04 f000 	lsl.w	r0, r4, r0
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800571e:	0a44      	lsrs	r4, r0, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005720:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005722:	fb02 f204 	mul.w	r2, r2, r4
 8005726:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005728:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  pCSD->Reserved3 = 0;
 800572a:	2500      	movs	r5, #0
  pCSD->Reserved4 = 1;
 800572c:	2401      	movs	r4, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800572e:	f3c2 3280 	ubfx	r2, r2, #14, #1
  return HAL_OK;
 8005732:	4628      	mov	r0, r5
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005734:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005736:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005738:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800573c:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800573e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005740:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005744:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005746:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005748:	0fd2      	lsrs	r2, r2, #31
 800574a:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800574c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800574e:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8005752:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005754:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005756:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800575a:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800575c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800575e:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8005762:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005764:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005766:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800576a:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800576e:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005772:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8005776:	4022      	ands	r2, r4
 8005778:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800577c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800577e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005782:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005786:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005788:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800578c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005790:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005792:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8005796:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800579a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800579c:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80057a0:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80057a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80057a6:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80057aa:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80057ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80057b0:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80057b4:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80057b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ba:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80057be:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80057c2:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
}
 80057c6:	bc30      	pop	{r4, r5}
 80057c8:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80057ca:	2a01      	cmp	r2, #1
 80057cc:	d00c      	beq.n	80057e8 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057ce:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 80057d0:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057d2:	4c0e      	ldr	r4, [pc, #56]	; (800580c <HAL_SD_GetCardCSD+0x1b8>)
    return HAL_ERROR;
 80057d4:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057d6:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80057de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80057e0:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 80057e4:	bc30      	pop	{r4, r5}
 80057e6:	4770      	bx	lr
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80057e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.BlockSize = 512U;
 80057ea:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80057ee:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 80057f2:	0412      	lsls	r2, r2, #16
 80057f4:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80057f8:	4322      	orrs	r2, r4
 80057fa:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80057fc:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 80057fe:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005800:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005802:	6598      	str	r0, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005804:	0292      	lsls	r2, r2, #10
 8005806:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005808:	655a      	str	r2, [r3, #84]	; 0x54
 800580a:	e78d      	b.n	8005728 <HAL_SD_GetCardCSD+0xd4>
 800580c:	1fe00fff 	.word	0x1fe00fff

08005810 <HAL_SD_InitCard>:
{
 8005810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005814:	6982      	ldr	r2, [r0, #24]
{
 8005816:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005818:	2300      	movs	r3, #0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800581a:	21fa      	movs	r1, #250	; 0xfa
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800581c:	2a02      	cmp	r2, #2
{
 800581e:	4604      	mov	r4, r0
 8005820:	6805      	ldr	r5, [r0, #0]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005822:	910b      	str	r1, [sp, #44]	; 0x2c
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005824:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005828:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800582c:	d104      	bne.n	8005838 <HAL_SD_InitCard+0x28>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800582e:	682b      	ldr	r3, [r5, #0]
 8005830:	f043 0310 	orr.w	r3, r3, #16
 8005834:	602b      	str	r3, [r5, #0]
 8005836:	6805      	ldr	r5, [r0, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 8005838:	aa0a      	add	r2, sp, #40	; 0x28
 800583a:	ab07      	add	r3, sp, #28
 800583c:	ca07      	ldmia	r2, {r0, r1, r2}
 800583e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005842:	4628      	mov	r0, r5
 8005844:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005846:	f001 fbd1 	bl	8006fec <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800584a:	6820      	ldr	r0, [r4, #0]
 800584c:	f001 fbf2 	bl	8007034 <SDMMC_PowerState_ON>
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8005850:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005854:	f7fe fee8 	bl	8004628 <HAL_RCCEx_GetPeriphCLKFreq>
 8005858:	4ba3      	ldr	r3, [pc, #652]	; (8005ae8 <HAL_SD_InitCard+0x2d8>)
 800585a:	fba3 3000 	umull	r3, r0, r3, r0
  if(sdmmc_clk != 0U)
 800585e:	0940      	lsrs	r0, r0, #5
 8005860:	d019      	beq.n	8005896 <HAL_SD_InitCard+0x86>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005862:	4ba2      	ldr	r3, [pc, #648]	; (8005aec <HAL_SD_InitCard+0x2dc>)
 8005864:	fbb3 f0f0 	udiv	r0, r3, r0
 8005868:	3001      	adds	r0, #1
 800586a:	f7fa fd9f 	bl	80003ac <HAL_Delay>
  __IO uint32_t count = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 8005872:	f7fa fd95 	bl	80003a0 <HAL_GetTick>
 8005876:	4680      	mov	r8, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005878:	6820      	ldr	r0, [r4, #0]
 800587a:	f001 fdff 	bl	800747c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800587e:	4605      	mov	r5, r0
 8005880:	b168      	cbz	r0, 800589e <HAL_SD_InitCard+0x8e>
    hsd->State = HAL_SD_STATE_READY;
 8005882:	2601      	movs	r6, #1
 8005884:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005888:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800588a:	431d      	orrs	r5, r3
 800588c:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800588e:	4630      	mov	r0, r6
 8005890:	b018      	add	sp, #96	; 0x60
 8005892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 8005896:	2002      	movs	r0, #2
 8005898:	f7fa fd88 	bl	80003ac <HAL_Delay>
 800589c:	e7e7      	b.n	800586e <HAL_SD_InitCard+0x5e>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800589e:	6820      	ldr	r0, [r4, #0]
 80058a0:	f001 fe1a 	bl	80074d8 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d179      	bne.n	800599c <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80058a8:	2301      	movs	r3, #1
 80058aa:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80058ac:	2100      	movs	r1, #0
 80058ae:	6820      	ldr	r0, [r4, #0]
 80058b0:	f001 fe52 	bl	8007558 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80058b4:	bb08      	cbnz	r0, 80058fa <HAL_SD_InitCard+0xea>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80058b6:	9b06      	ldr	r3, [sp, #24]
 80058b8:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 80058bc:	42b3      	cmp	r3, r6
 80058be:	f200 8109 	bhi.w	8005ad4 <HAL_SD_InitCard+0x2c4>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80058c2:	4f8b      	ldr	r7, [pc, #556]	; (8005af0 <HAL_SD_InitCard+0x2e0>)
 80058c4:	e00c      	b.n	80058e0 <HAL_SD_InitCard+0xd0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80058c6:	4601      	mov	r1, r0
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	f001 fbbf 	bl	800704c <SDMMC_GetResponse>
    count++;
 80058ce:	9b06      	ldr	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80058d0:	1e02      	subs	r2, r0, #0
    count++;
 80058d2:	f103 0301 	add.w	r3, r3, #1
 80058d6:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80058d8:	9b06      	ldr	r3, [sp, #24]
 80058da:	db11      	blt.n	8005900 <HAL_SD_InitCard+0xf0>
 80058dc:	42b3      	cmp	r3, r6
 80058de:	d80f      	bhi.n	8005900 <HAL_SD_InitCard+0xf0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80058e0:	2100      	movs	r1, #0
 80058e2:	6820      	ldr	r0, [r4, #0]
 80058e4:	f001 fe38 	bl	8007558 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80058e8:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 80058ea:	4605      	mov	r5, r0
 80058ec:	2800      	cmp	r0, #0
 80058ee:	d1c8      	bne.n	8005882 <HAL_SD_InitCard+0x72>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80058f0:	6820      	ldr	r0, [r4, #0]
 80058f2:	f001 fe75 	bl	80075e0 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d0e5      	beq.n	80058c6 <HAL_SD_InitCard+0xb6>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058fa:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80058fe:	e7c0      	b.n	8005882 <HAL_SD_InitCard+0x72>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005900:	9906      	ldr	r1, [sp, #24]
 8005902:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005906:	4299      	cmp	r1, r3
 8005908:	f200 809d 	bhi.w	8005a46 <HAL_SD_InitCard+0x236>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800590c:	0057      	lsls	r7, r2, #1
 800590e:	6820      	ldr	r0, [r4, #0]
 8005910:	d504      	bpl.n	800591c <HAL_SD_InitCard+0x10c>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005912:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005914:	2101      	movs	r1, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005916:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005918:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800591a:	d051      	beq.n	80059c0 <HAL_SD_InitCard+0x1b0>
  uint16_t sd_rca = 1U;
 800591c:	2301      	movs	r3, #1
 800591e:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005922:	f001 fb8f 	bl	8007044 <SDMMC_GetPowerState>
 8005926:	2800      	cmp	r0, #0
 8005928:	d044      	beq.n	80059b4 <HAL_SD_InitCard+0x1a4>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800592a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	2a03      	cmp	r2, #3
 8005930:	d125      	bne.n	800597e <HAL_SD_InitCard+0x16e>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005932:	4618      	mov	r0, r3
 8005934:	2104      	movs	r1, #4
 8005936:	f001 fb89 	bl	800704c <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800593a:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800593c:	0d03      	lsrs	r3, r0, #20
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800593e:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005940:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005942:	f7ff fe87 	bl	8005654 <HAL_SD_GetCardCSD>
 8005946:	4606      	mov	r6, r0
 8005948:	2800      	cmp	r0, #0
 800594a:	d136      	bne.n	80059ba <HAL_SD_InitCard+0x1aa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800594c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800594e:	4603      	mov	r3, r0
 8005950:	6820      	ldr	r0, [r4, #0]
 8005952:	0412      	lsls	r2, r2, #16
 8005954:	f001 fd4e 	bl	80073f4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005958:	b9b0      	cbnz	r0, 8005988 <HAL_SD_InitCard+0x178>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800595a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800595e:	6820      	ldr	r0, [r4, #0]
 8005960:	f001 fb8e 	bl	8007080 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005964:	2800      	cmp	r0, #0
 8005966:	d092      	beq.n	800588e <HAL_SD_InitCard+0x7e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005968:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800596a:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800596c:	4961      	ldr	r1, [pc, #388]	; (8005af4 <HAL_SD_InitCard+0x2e4>)
    return HAL_ERROR;
 800596e:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005970:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005972:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005974:	4318      	orrs	r0, r3
 8005976:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005978:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 800597c:	e787      	b.n	800588e <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800597e:	4618      	mov	r0, r3
 8005980:	f001 feec 	bl	800775c <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005984:	2800      	cmp	r0, #0
 8005986:	d061      	beq.n	8005a4c <HAL_SD_InitCard+0x23c>
    hsd->State = HAL_SD_STATE_READY;
 8005988:	2601      	movs	r6, #1
 800598a:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800598e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005990:	4308      	orrs	r0, r1
 8005992:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005994:	4630      	mov	r0, r6
 8005996:	b018      	add	sp, #96	; 0x60
 8005998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V1_X;
 800599c:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800599e:	6820      	ldr	r0, [r4, #0]
 80059a0:	f001 fd6c 	bl	800747c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80059a4:	4605      	mov	r5, r0
 80059a6:	2800      	cmp	r0, #0
 80059a8:	f47f af6b 	bne.w	8005882 <HAL_SD_InitCard+0x72>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80059ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d181      	bne.n	80058b6 <HAL_SD_InitCard+0xa6>
 80059b2:	e77b      	b.n	80058ac <HAL_SD_InitCard+0x9c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059b4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80059b8:	e7e6      	b.n	8005988 <HAL_SD_InitCard+0x178>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059ba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80059be:	e7e3      	b.n	8005988 <HAL_SD_InitCard+0x178>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80059c0:	01d6      	lsls	r6, r2, #7
 80059c2:	d5ab      	bpl.n	800591c <HAL_SD_InitCard+0x10c>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80059c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059c8:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80059ca:	6803      	ldr	r3, [r0, #0]
 80059cc:	f043 0308 	orr.w	r3, r3, #8
 80059d0:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80059d2:	6820      	ldr	r0, [r4, #0]
 80059d4:	f002 f818 	bl	8007a08 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 80059d8:	4605      	mov	r5, r0
 80059da:	b130      	cbz	r0, 80059ea <HAL_SD_InitCard+0x1da>
 80059dc:	e751      	b.n	8005882 <HAL_SD_InitCard+0x72>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80059de:	f7fa fcdf 	bl	80003a0 <HAL_GetTick>
 80059e2:	eba0 0008 	sub.w	r0, r0, r8
 80059e6:	3001      	adds	r0, #1
 80059e8:	d079      	beq.n	8005ade <HAL_SD_InitCard+0x2ce>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ee:	0155      	lsls	r5, r2, #5
 80059f0:	d5f5      	bpl.n	80059de <HAL_SD_InitCard+0x1ce>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80059f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fc:	02d8      	lsls	r0, r3, #11
 80059fe:	f57f af7c 	bpl.w	80058fa <HAL_SD_InitCard+0xea>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8005a02:	2001      	movs	r0, #1
 8005a04:	f7ff fe24 	bl	8005650 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005a08:	6822      	ldr	r2, [r4, #0]
 8005a0a:	6813      	ldr	r3, [r2, #0]
 8005a0c:	f043 0304 	orr.w	r3, r3, #4
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	e005      	b.n	8005a20 <HAL_SD_InitCard+0x210>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005a14:	f7fa fcc4 	bl	80003a0 <HAL_GetTick>
 8005a18:	eba0 0008 	sub.w	r0, r0, r8
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d05e      	beq.n	8005ade <HAL_SD_InitCard+0x2ce>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a24:	0191      	lsls	r1, r2, #6
 8005a26:	d5f5      	bpl.n	8005a14 <HAL_SD_InitCard+0x204>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a32:	02d2      	lsls	r2, r2, #11
 8005a34:	d407      	bmi.n	8005a46 <HAL_SD_InitCard+0x236>
          hsd->Instance->POWER = 0x13U;
 8005a36:	2113      	movs	r1, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
          hsd->Instance->POWER = 0x13U;
 8005a3c:	6019      	str	r1, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	639a      	str	r2, [r3, #56]	; 0x38
 8005a42:	6820      	ldr	r0, [r4, #0]
 8005a44:	e76a      	b.n	800591c <HAL_SD_InitCard+0x10c>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005a46:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8005a4a:	e71a      	b.n	8005882 <HAL_SD_InitCard+0x72>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a4c:	4601      	mov	r1, r0
 8005a4e:	6820      	ldr	r0, [r4, #0]
 8005a50:	f001 fafc 	bl	800704c <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005a54:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a56:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005a58:	6820      	ldr	r0, [r4, #0]
 8005a5a:	f001 faf7 	bl	800704c <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005a5e:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005a60:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	f001 faf2 	bl	800704c <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005a68:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005a6a:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005a6c:	6820      	ldr	r0, [r4, #0]
 8005a6e:	f001 faed 	bl	800704c <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005a74:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d034      	beq.n	8005ae4 <HAL_SD_InitCard+0x2d4>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005a7a:	f10d 0116 	add.w	r1, sp, #22
 8005a7e:	6820      	ldr	r0, [r4, #0]
 8005a80:	f001 fee4 	bl	800784c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a84:	2800      	cmp	r0, #0
 8005a86:	f47f af7f 	bne.w	8005988 <HAL_SD_InitCard+0x178>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a8a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	2a03      	cmp	r2, #3
 8005a90:	f43f af4f 	beq.w	8005932 <HAL_SD_InitCard+0x122>
    hsd->SdCard.RelCardAdd = sd_rca;
 8005a94:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a98:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 8005a9a:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a9c:	0409      	lsls	r1, r1, #16
 8005a9e:	f001 fe99 	bl	80077d4 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	f47f af70 	bne.w	8005988 <HAL_SD_InitCard+0x178>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005aa8:	4601      	mov	r1, r0
 8005aaa:	6820      	ldr	r0, [r4, #0]
 8005aac:	f001 face 	bl	800704c <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005ab0:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ab2:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005ab4:	6820      	ldr	r0, [r4, #0]
 8005ab6:	f001 fac9 	bl	800704c <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005aba:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005abc:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005abe:	6820      	ldr	r0, [r4, #0]
 8005ac0:	f001 fac4 	bl	800704c <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005ac4:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005ac6:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005ac8:	6820      	ldr	r0, [r4, #0]
 8005aca:	f001 fabf 	bl	800704c <SDMMC_GetResponse>
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	66e0      	str	r0, [r4, #108]	; 0x6c
 8005ad2:	e72e      	b.n	8005932 <HAL_SD_InitCard+0x122>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005ad4:	9b06      	ldr	r3, [sp, #24]
 8005ad6:	42b3      	cmp	r3, r6
 8005ad8:	d8b5      	bhi.n	8005a46 <HAL_SD_InitCard+0x236>
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	e71e      	b.n	800591c <HAL_SD_InitCard+0x10c>
            return HAL_SD_ERROR_TIMEOUT;
 8005ade:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005ae2:	e6ce      	b.n	8005882 <HAL_SD_InitCard+0x72>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	e724      	b.n	8005932 <HAL_SD_InitCard+0x122>
 8005ae8:	10624dd3 	.word	0x10624dd3
 8005aec:	00012110 	.word	0x00012110
 8005af0:	c1100000 	.word	0xc1100000
 8005af4:	1fe00fff 	.word	0x1fe00fff

08005af8 <HAL_SD_GetCardStatus>:
{
 8005af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005afc:	4604      	mov	r4, r0
 8005afe:	b097      	sub	sp, #92	; 0x5c
 8005b00:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8005b02:	f7fa fc4d 	bl	80003a0 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005b06:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8005b08:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005b0a:	6820      	ldr	r0, [r4, #0]
 8005b0c:	f001 fa9e 	bl	800704c <SDMMC_GetResponse>
 8005b10:	0187      	lsls	r7, r0, #6
 8005b12:	d422      	bmi.n	8005b5a <HAL_SD_GetCardStatus+0x62>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005b14:	2140      	movs	r1, #64	; 0x40
 8005b16:	6820      	ldr	r0, [r4, #0]
 8005b18:	f001 fab2 	bl	8007080 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b1c:	b308      	cbz	r0, 8005b62 <HAL_SD_GetCardStatus+0x6a>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005b1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b20:	63a3      	str	r3, [r4, #56]	; 0x38
 8005b22:	6823      	ldr	r3, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b24:	495b      	ldr	r1, [pc, #364]	; (8005c94 <HAL_SD_GetCardStatus+0x19c>)
    hsd->State = HAL_SD_STATE_READY;
 8005b26:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b28:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005b2a:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 8005b2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b2e:	4318      	orrs	r0, r3
 8005b30:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005b32:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005b36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b3a:	6820      	ldr	r0, [r4, #0]
 8005b3c:	f001 faa0 	bl	8007080 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b40:	b138      	cbz	r0, 8005b52 <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 8005b42:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	4953      	ldr	r1, [pc, #332]	; (8005c94 <HAL_SD_GetCardStatus+0x19c>)
    status = HAL_ERROR;
 8005b48:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b4a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005b4c:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005b4e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005b52:	4630      	mov	r0, r6
 8005b54:	b017      	add	sp, #92	; 0x5c
 8005b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b5a:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005b5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005b60:	e7e0      	b.n	8005b24 <HAL_SD_GetCardStatus+0x2c>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b62:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005b64:	6820      	ldr	r0, [r4, #0]
 8005b66:	0409      	lsls	r1, r1, #16
 8005b68:	f001 fcf6 	bl	8007558 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d1d6      	bne.n	8005b1e <HAL_SD_GetCardStatus+0x26>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 64U;
 8005b74:	2340      	movs	r3, #64	; 0x40
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005b76:	2160      	movs	r1, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005b78:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b7a:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005b7c:	2202      	movs	r2, #2
  config.DataLength    = 64U;
 8005b7e:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005b80:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005b82:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005b84:	4669      	mov	r1, sp
 8005b86:	6820      	ldr	r0, [r4, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005b88:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005b8a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005b8c:	f001 fa62 	bl	8007054 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005b90:	6820      	ldr	r0, [r4, #0]
 8005b92:	f001 fef3 	bl	800797c <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d1c1      	bne.n	8005b1e <HAL_SD_GetCardStatus+0x26>
  uint32_t *pData = pSDstatus;
 8005b9a:	af06      	add	r7, sp, #24
 8005b9c:	e005      	b.n	8005baa <HAL_SD_GetCardStatus+0xb2>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b9e:	f7fa fbff 	bl	80003a0 <HAL_GetTick>
 8005ba2:	eba0 0008 	sub.w	r0, r0, r8
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	d013      	beq.n	8005bd2 <HAL_SD_GetCardStatus+0xda>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bae:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005bb4:	d110      	bne.n	8005bd8 <HAL_SD_GetCardStatus+0xe0>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005bb6:	0416      	lsls	r6, r2, #16
 8005bb8:	d5f1      	bpl.n	8005b9e <HAL_SD_GetCardStatus+0xa6>
 8005bba:	f107 0620 	add.w	r6, r7, #32
 8005bbe:	e000      	b.n	8005bc2 <HAL_SD_GetCardStatus+0xca>
 8005bc0:	6823      	ldr	r3, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 fa2c 	bl	8007020 <SDMMC_ReadFIFO>
 8005bc8:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 8005bcc:	42b7      	cmp	r7, r6
 8005bce:	d1f7      	bne.n	8005bc0 <HAL_SD_GetCardStatus+0xc8>
 8005bd0:	e7e5      	b.n	8005b9e <HAL_SD_GetCardStatus+0xa6>
      return HAL_SD_ERROR_TIMEOUT;
 8005bd2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005bd6:	e7a4      	b.n	8005b22 <HAL_SD_GetCardStatus+0x2a>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005bd8:	0710      	lsls	r0, r2, #28
 8005bda:	d455      	bmi.n	8005c88 <HAL_SD_GetCardStatus+0x190>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bde:	0791      	lsls	r1, r2, #30
 8005be0:	d454      	bmi.n	8005c8c <HAL_SD_GetCardStatus+0x194>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be4:	0692      	lsls	r2, r2, #26
 8005be6:	d50b      	bpl.n	8005c00 <HAL_SD_GetCardStatus+0x108>
 8005be8:	e052      	b.n	8005c90 <HAL_SD_GetCardStatus+0x198>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005bea:	f001 fa19 	bl	8007020 <SDMMC_ReadFIFO>
 8005bee:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005bf2:	f7fa fbd5 	bl	80003a0 <HAL_GetTick>
 8005bf6:	eba0 0008 	sub.w	r0, r0, r8
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d0e9      	beq.n	8005bd2 <HAL_SD_GetCardStatus+0xda>
 8005bfe:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005c00:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005c02:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005c04:	f416 5680 	ands.w	r6, r6, #4096	; 0x1000
 8005c08:	d1ef      	bne.n	8005bea <HAL_SD_GetCardStatus+0xf2>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005c0a:	9f06      	ldr	r7, [sp, #24]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005c0c:	9808      	ldr	r0, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005c0e:	0a39      	lsrs	r1, r7, #8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005c10:	f3c7 1e81 	ubfx	lr, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005c14:	ea4f 4810 	mov.w	r8, r0, lsr #16
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005c18:	f3c7 1c40 	ubfx	ip, r7, #5, #1
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005c1c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005c22:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005c26:	f028 07ff 	bic.w	r7, r8, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005c2a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8005c98 <HAL_SD_GetCardStatus+0x1a0>
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005c2e:	fa5f f982 	uxtb.w	r9, r2
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005c32:	b289      	uxth	r1, r1
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005c34:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005c38:	fa5f f880 	uxtb.w	r8, r0
 8005c3c:	9b07      	ldr	r3, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005c3e:	ea47 0709 	orr.w	r7, r7, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005c42:	f885 e000 	strb.w	lr, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005c46:	f885 c001 	strb.w	ip, [r5, #1]
 8005c4a:	fa93 fe83 	rev.w	lr, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005c4e:	8069      	strh	r1, [r5, #2]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005c50:	f3c0 5303 	ubfx	r3, r0, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005c54:	f3c0 2107 	ubfx	r1, r0, #8, #8
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005c58:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005c5c:	f3c2 2c85 	ubfx	ip, r2, #10, #6
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005c60:	f885 8008 	strb.w	r8, [r5, #8]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005c64:	f3c2 2001 	ubfx	r0, r2, #8, #2
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005c68:	7269      	strb	r1, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005c6a:	72ab      	strb	r3, [r5, #10]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005c6c:	f3c2 1103 	ubfx	r1, r2, #4, #4
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005c70:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005c74:	f002 020f 	and.w	r2, r2, #15
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005c78:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005c7a:	f885 c00e 	strb.w	ip, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005c7e:	73e8      	strb	r0, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005c80:	7429      	strb	r1, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005c82:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005c84:	74ab      	strb	r3, [r5, #18]
 8005c86:	e756      	b.n	8005b36 <HAL_SD_GetCardStatus+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005c88:	2008      	movs	r0, #8
 8005c8a:	e74b      	b.n	8005b24 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c8c:	2002      	movs	r0, #2
 8005c8e:	e749      	b.n	8005b24 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 8005c90:	2020      	movs	r0, #32
 8005c92:	e747      	b.n	8005b24 <HAL_SD_GetCardStatus+0x2c>
 8005c94:	1fe00fff 	.word	0x1fe00fff
 8005c98:	18000f3a 	.word	0x18000f3a

08005c9c <HAL_SD_GetCardInfo>:
{
 8005c9c:	4603      	mov	r3, r0
}
 8005c9e:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005ca0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca2:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca6:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005caa:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005cac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cae:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005cb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cb2:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005cb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cb6:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cba:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cbe:	61cb      	str	r3, [r1, #28]
}
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop

08005cc4 <HAL_SD_ConfigWideBusOperation>:
{
 8005cc4:	b570      	push	{r4, r5, r6, lr}
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005cc6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 8005cc8:	2303      	movs	r3, #3
{
 8005cca:	b08a      	sub	sp, #40	; 0x28
 8005ccc:	4604      	mov	r4, r0
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005cce:	2a03      	cmp	r2, #3
  hsd->State = HAL_SD_STATE_BUSY;
 8005cd0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8005cd4:	460d      	mov	r5, r1
 8005cd6:	6803      	ldr	r3, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005cd8:	d025      	beq.n	8005d26 <HAL_SD_ConfigWideBusOperation+0x62>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005cda:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005cde:	d022      	beq.n	8005d26 <HAL_SD_ConfigWideBusOperation+0x62>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005ce0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005ce4:	d064      	beq.n	8005db0 <HAL_SD_ConfigWideBusOperation+0xec>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005ce6:	2900      	cmp	r1, #0
 8005ce8:	d043      	beq.n	8005d72 <HAL_SD_ConfigWideBusOperation+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005cea:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005cec:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005cf0:	6382      	str	r2, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005cf2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005cf4:	b9f2      	cbnz	r2, 8005d34 <HAL_SD_ConfigWideBusOperation+0x70>
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8005cf6:	6962      	ldr	r2, [r4, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005cf8:	6921      	ldr	r1, [r4, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8005cfa:	2a03      	cmp	r2, #3
    Init.BusWide             = WideMode;
 8005cfc:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005cfe:	9107      	str	r1, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005d00:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8005d04:	e9cd 6004 	strd	r6, r0, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8005d08:	d92a      	bls.n	8005d60 <HAL_SD_ConfigWideBusOperation+0x9c>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8005d0a:	9208      	str	r2, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005d0c:	aa0a      	add	r2, sp, #40	; 0x28
 8005d0e:	ae04      	add	r6, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005d10:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 8005d12:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8005d16:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8005d20:	f001 f964 	bl	8006fec <SDMMC_Init>
 8005d24:	e009      	b.n	8005d3a <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d2c:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005d2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d30:	2a00      	cmp	r2, #0
 8005d32:	d0e0      	beq.n	8005cf6 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d34:	4a33      	ldr	r2, [pc, #204]	; (8005e04 <HAL_SD_ConfigWideBusOperation+0x140>)
    status = HAL_ERROR;
 8005d36:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d38:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d3e:	6820      	ldr	r0, [r4, #0]
 8005d40:	f001 f99e 	bl	8007080 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d44:	b130      	cbz	r0, 8005d54 <HAL_SD_ConfigWideBusOperation+0x90>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d46:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8005d48:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d4a:	4a2e      	ldr	r2, [pc, #184]	; (8005e04 <HAL_SD_ConfigWideBusOperation+0x140>)
 8005d4c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d50:	4318      	orrs	r0, r3
 8005d52:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8005d54:	2301      	movs	r3, #1
}
 8005d56:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8005d58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005d5c:	b00a      	add	sp, #40	; 0x28
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005d60:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005d62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005d66:	d0d0      	beq.n	8005d0a <HAL_SD_ConfigWideBusOperation+0x46>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005d68:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005d6c:	d02d      	beq.n	8005dca <HAL_SD_ConfigWideBusOperation+0x106>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8005d6e:	2204      	movs	r2, #4
 8005d70:	e7cb      	b.n	8005d0a <HAL_SD_ConfigWideBusOperation+0x46>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005d72:	4618      	mov	r0, r3
  uint32_t scr[2U] = {0UL, 0UL};
 8005d74:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005d78:	f001 f968 	bl	800704c <SDMMC_GetResponse>
 8005d7c:	0181      	lsls	r1, r0, #6
 8005d7e:	d420      	bmi.n	8005dc2 <HAL_SD_ConfigWideBusOperation+0xfe>
  errorstate = SD_FindSCR(hsd, scr);
 8005d80:	a904      	add	r1, sp, #16
 8005d82:	4620      	mov	r0, r4
 8005d84:	f7ff fa02 	bl	800518c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d88:	b968      	cbnz	r0, 8005da6 <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005d8a:	9a05      	ldr	r2, [sp, #20]
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	03d2      	lsls	r2, r2, #15
 8005d90:	d534      	bpl.n	8005dfc <HAL_SD_ConfigWideBusOperation+0x138>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d92:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005d94:	4618      	mov	r0, r3
 8005d96:	0409      	lsls	r1, r1, #16
 8005d98:	f001 fbde 	bl	8007558 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d9c:	b918      	cbnz	r0, 8005da6 <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005d9e:	4601      	mov	r1, r0
 8005da0:	6820      	ldr	r0, [r4, #0]
 8005da2:	f001 fc51 	bl	8007648 <SDMMC_CmdBusWidth>
 8005da6:	6823      	ldr	r3, [r4, #0]
      hsd->ErrorCode |= errorstate;
 8005da8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005daa:	4310      	orrs	r0, r2
 8005dac:	63a0      	str	r0, [r4, #56]	; 0x38
 8005dae:	e7be      	b.n	8005d2e <HAL_SD_ConfigWideBusOperation+0x6a>
  uint32_t scr[2U] = {0UL, 0UL};
 8005db0:	2200      	movs	r2, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005db2:	4618      	mov	r0, r3
 8005db4:	4611      	mov	r1, r2
  uint32_t scr[2U] = {0UL, 0UL};
 8005db6:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005dba:	f001 f947 	bl	800704c <SDMMC_GetResponse>
 8005dbe:	0186      	lsls	r6, r0, #6
 8005dc0:	d506      	bpl.n	8005dd0 <HAL_SD_ConfigWideBusOperation+0x10c>
 8005dc2:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005dc4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005dc8:	e7ee      	b.n	8005da8 <HAL_SD_ConfigWideBusOperation+0xe4>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8005dca:	2202      	movs	r2, #2
 8005dcc:	9208      	str	r2, [sp, #32]
 8005dce:	e79d      	b.n	8005d0c <HAL_SD_ConfigWideBusOperation+0x48>
  errorstate = SD_FindSCR(hsd, scr);
 8005dd0:	a904      	add	r1, sp, #16
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f7ff f9da 	bl	800518c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d1e4      	bne.n	8005da6 <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005ddc:	9a05      	ldr	r2, [sp, #20]
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	0350      	lsls	r0, r2, #13
 8005de2:	d50b      	bpl.n	8005dfc <HAL_SD_ConfigWideBusOperation+0x138>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005de4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005de6:	4618      	mov	r0, r3
 8005de8:	0409      	lsls	r1, r1, #16
 8005dea:	f001 fbb5 	bl	8007558 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d1d9      	bne.n	8005da6 <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005df2:	2102      	movs	r1, #2
 8005df4:	6820      	ldr	r0, [r4, #0]
 8005df6:	f001 fc27 	bl	8007648 <SDMMC_CmdBusWidth>
 8005dfa:	e7d4      	b.n	8005da6 <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005dfc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005e00:	e7d2      	b.n	8005da8 <HAL_SD_ConfigWideBusOperation+0xe4>
 8005e02:	bf00      	nop
 8005e04:	1fe00fff 	.word	0x1fe00fff

08005e08 <HAL_SD_Init>:
{
 8005e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e0a:	b087      	sub	sp, #28
  if(hsd == NULL)
 8005e0c:	b1a0      	cbz	r0, 8005e38 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8005e0e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005e12:	4604      	mov	r4, r0
 8005e14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e18:	b93b      	cbnz	r3, 8005e2a <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8005e1a:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 8005e1c:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8005e1e:	b90b      	cbnz	r3, 8005e24 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8005e20:	2302      	movs	r3, #2
 8005e22:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8005e24:	4620      	mov	r0, r4
 8005e26:	f006 fbd3 	bl	800c5d0 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8005e2a:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005e2c:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8005e2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005e32:	f7ff fced 	bl	8005810 <HAL_SD_InitCard>
 8005e36:	b118      	cbz	r0, 8005e40 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 8005e38:	2501      	movs	r5, #1
}
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	b007      	add	sp, #28
 8005e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005e40:	a901      	add	r1, sp, #4
 8005e42:	4620      	mov	r0, r4
 8005e44:	f7ff fe58 	bl	8005af8 <HAL_SD_GetCardStatus>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d1f5      	bne.n	8005e38 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005e4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 8005e4e:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005e52:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005e54:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8005e58:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005e5a:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005e5c:	d029      	beq.n	8005eb2 <HAL_SD_Init+0xaa>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005e5e:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005e60:	68e1      	ldr	r1, [r4, #12]
 8005e62:	4620      	mov	r0, r4
 8005e64:	f7ff ff2e 	bl	8005cc4 <HAL_SD_ConfigWideBusOperation>
 8005e68:	4605      	mov	r5, r0
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d1e4      	bne.n	8005e38 <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 8005e6e:	f7fa fa97 	bl	80003a0 <HAL_GetTick>
 8005e72:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005e74:	e007      	b.n	8005e86 <HAL_SD_Init+0x7e>
    hsd->ErrorCode |= errorstate;
 8005e76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e78:	431e      	orrs	r6, r3
 8005e7a:	63a6      	str	r6, [r4, #56]	; 0x38
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005e7c:	f7fa fa90 	bl	80003a0 <HAL_GetTick>
 8005e80:	1bc0      	subs	r0, r0, r7
 8005e82:	3001      	adds	r0, #1
 8005e84:	d01d      	beq.n	8005ec2 <HAL_SD_Init+0xba>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e86:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005e88:	6820      	ldr	r0, [r4, #0]
 8005e8a:	0409      	lsls	r1, r1, #16
 8005e8c:	f001 fd32 	bl	80078f4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e90:	4606      	mov	r6, r0
 8005e92:	2800      	cmp	r0, #0
 8005e94:	d1ef      	bne.n	8005e76 <HAL_SD_Init+0x6e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e96:	4601      	mov	r1, r0
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	f001 f8d7 	bl	800704c <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005e9e:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005ea2:	2804      	cmp	r0, #4
 8005ea4:	d1ea      	bne.n	8005e7c <HAL_SD_Init+0x74>
  hsd->State = HAL_SD_STATE_READY;
 8005ea6:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ea8:	63a6      	str	r6, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005eaa:	6326      	str	r6, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005eac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005eb0:	e7c3      	b.n	8005e3a <HAL_SD_Init+0x32>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005eb2:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005eb4:	bf14      	ite	ne
 8005eb6:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005eba:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8005ebe:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005ec0:	e7ce      	b.n	8005e60 <HAL_SD_Init+0x58>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005ec2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 8005ec6:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8005ec8:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005eca:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005ecc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8005ed0:	e7b3      	b.n	8005e3a <HAL_SD_Init+0x32>
 8005ed2:	bf00      	nop

08005ed4 <HAL_SD_GetCardState>:
{
 8005ed4:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ed6:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8005ed8:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005eda:	6800      	ldr	r0, [r0, #0]
 8005edc:	0409      	lsls	r1, r1, #16
 8005ede:	f001 fd09 	bl	80078f4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ee2:	4601      	mov	r1, r0
 8005ee4:	b120      	cbz	r0, 8005ef0 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8005ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ee8:	2000      	movs	r0, #0
 8005eea:	4319      	orrs	r1, r3
 8005eec:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8005eee:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ef0:	6820      	ldr	r0, [r4, #0]
 8005ef2:	f001 f8ab 	bl	800704c <SDMMC_GetResponse>
 8005ef6:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8005efa:	bd10      	pop	{r4, pc}

08005efc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop

08005f00 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop

08005f04 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop

08005f08 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop

08005f0c <HAL_SD_IRQHandler>:
{
 8005f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f0e:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005f10:	6800      	ldr	r0, [r0, #0]
{
 8005f12:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 8005f14:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005f16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f18:	041b      	lsls	r3, r3, #16
 8005f1a:	d502      	bpl.n	8005f22 <HAL_SD_IRQHandler+0x16>
 8005f1c:	072f      	lsls	r7, r5, #28
 8005f1e:	f100 80b6 	bmi.w	800608e <HAL_SD_IRQHandler+0x182>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005f22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f24:	05de      	lsls	r6, r3, #23
 8005f26:	d528      	bpl.n	8005f7a <HAL_SD_IRQHandler+0x6e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005f28:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005f2c:	4b98      	ldr	r3, [pc, #608]	; (8006190 <HAL_SD_IRQHandler+0x284>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005f2e:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005f34:	400b      	ands	r3, r1
 8005f36:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005f38:	6822      	ldr	r2, [r4, #0]
 8005f3a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f40:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005f42:	6822      	ldr	r2, [r4, #0]
 8005f44:	68d3      	ldr	r3, [r2, #12]
 8005f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4a:	60d3      	str	r3, [r2, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 8005f4c:	f015 0308 	ands.w	r3, r5, #8
 8005f50:	d075      	beq.n	800603e <HAL_SD_IRQHandler+0x132>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005f52:	f015 0f22 	tst.w	r5, #34	; 0x22
 8005f56:	6820      	ldr	r0, [r4, #0]
 8005f58:	f040 80be 	bne.w	80060d8 <HAL_SD_IRQHandler+0x1cc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005f5c:	498d      	ldr	r1, [pc, #564]	; (8006194 <HAL_SD_IRQHandler+0x288>)
      hsd->State = HAL_SD_STATE_READY;
 8005f5e:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8005f60:	2300      	movs	r3, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005f62:	6381      	str	r1, [r0, #56]	; 0x38
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005f64:	07a9      	lsls	r1, r5, #30
      hsd->State = HAL_SD_STATE_READY;
 8005f66:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f6a:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005f6c:	f000 80af 	beq.w	80060ce <HAL_SD_IRQHandler+0x1c2>
        HAL_SD_RxCpltCallback(hsd);
 8005f70:	4620      	mov	r0, r4
 8005f72:	f005 f98d 	bl	800b290 <HAL_SD_RxCpltCallback>
}
 8005f76:	b003      	add	sp, #12
 8005f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005f7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f7c:	045e      	lsls	r6, r3, #17
 8005f7e:	d502      	bpl.n	8005f86 <HAL_SD_IRQHandler+0x7a>
 8005f80:	0729      	lsls	r1, r5, #28
 8005f82:	f100 80b0 	bmi.w	80060e6 <HAL_SD_IRQHandler+0x1da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005f86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f88:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005f8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005f8e:	d06d      	beq.n	800606c <HAL_SD_IRQHandler+0x160>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005f90:	079a      	lsls	r2, r3, #30
 8005f92:	d503      	bpl.n	8005f9c <HAL_SD_IRQHandler+0x90>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f96:	f043 0302 	orr.w	r3, r3, #2
 8005f9a:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8005f9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f9e:	071b      	lsls	r3, r3, #28
 8005fa0:	d503      	bpl.n	8005faa <HAL_SD_IRQHandler+0x9e>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005fa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fa4:	f043 0308 	orr.w	r3, r3, #8
 8005fa8:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005faa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005fac:	069f      	lsls	r7, r3, #26
 8005fae:	d503      	bpl.n	8005fb8 <HAL_SD_IRQHandler+0xac>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005fb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fb2:	f043 0320 	orr.w	r3, r3, #32
 8005fb6:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005fb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005fba:	06de      	lsls	r6, r3, #27
 8005fbc:	d503      	bpl.n	8005fc6 <HAL_SD_IRQHandler+0xba>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005fbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fc0:	f043 0310 	orr.w	r3, r3, #16
 8005fc4:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005fc6:	4b73      	ldr	r3, [pc, #460]	; (8006194 <HAL_SD_IRQHandler+0x288>)
 8005fc8:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005fca:	6822      	ldr	r2, [r4, #0]
 8005fcc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005fce:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8005fd2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005fd4:	6822      	ldr	r2, [r4, #0]
 8005fd6:	68d3      	ldr	r3, [r2, #12]
 8005fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fdc:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8005fde:	6822      	ldr	r2, [r4, #0]
 8005fe0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005fe2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005fe6:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8005fe8:	6822      	ldr	r2, [r4, #0]
 8005fea:	68d3      	ldr	r3, [r2, #12]
 8005fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff0:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005ff2:	6820      	ldr	r0, [r4, #0]
 8005ff4:	f001 f998 	bl	8007328 <SDMMC_CmdStopTransfer>
 8005ff8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8005ffa:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8005ffc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006000:	4318      	orrs	r0, r3
 8006002:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006004:	68d3      	ldr	r3, [r2, #12]
 8006006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800600a:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	6399      	str	r1, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006010:	f015 0308 	ands.w	r3, r5, #8
 8006014:	f040 808f 	bne.w	8006136 <HAL_SD_IRQHandler+0x22a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006018:	0629      	lsls	r1, r5, #24
 800601a:	d5ac      	bpl.n	8005f76 <HAL_SD_IRQHandler+0x6a>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800601c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800601e:	2a00      	cmp	r2, #0
 8006020:	d0a9      	beq.n	8005f76 <HAL_SD_IRQHandler+0x6a>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006022:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8006024:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 8006026:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006028:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800602a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800602e:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006030:	6822      	ldr	r2, [r4, #0]
 8006032:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006034:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006038:	f7ff fb08 	bl	800564c <HAL_SD_ErrorCallback>
 800603c:	e79b      	b.n	8005f76 <HAL_SD_IRQHandler+0x6a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800603e:	062a      	lsls	r2, r5, #24
 8006040:	d599      	bpl.n	8005f76 <HAL_SD_IRQHandler+0x6a>
      hsd->Instance->DLEN = 0;
 8006042:	6822      	ldr	r2, [r4, #0]
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006044:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 8006048:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800604a:	6822      	ldr	r2, [r4, #0]
 800604c:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800604e:	6822      	ldr	r2, [r4, #0]
 8006050:	6513      	str	r3, [r2, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006052:	f040 8088 	bne.w	8006166 <HAL_SD_IRQHandler+0x25a>
      hsd->State = HAL_SD_STATE_READY;
 8006056:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8006058:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800605a:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800605e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006062:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006064:	d17b      	bne.n	800615e <HAL_SD_IRQHandler+0x252>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006066:	07af      	lsls	r7, r5, #30
 8006068:	d085      	beq.n	8005f76 <HAL_SD_IRQHandler+0x6a>
 800606a:	e781      	b.n	8005f70 <HAL_SD_IRQHandler+0x64>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800606c:	00da      	lsls	r2, r3, #3
 800606e:	d582      	bpl.n	8005f76 <HAL_SD_IRQHandler+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006070:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006074:	f005 0520 	and.w	r5, r5, #32
 8006078:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800607a:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006080:	075b      	lsls	r3, r3, #29
 8006082:	d461      	bmi.n	8006148 <HAL_SD_IRQHandler+0x23c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006084:	2d00      	cmp	r5, #0
 8006086:	d07c      	beq.n	8006182 <HAL_SD_IRQHandler+0x276>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006088:	f7ff ff3e 	bl	8005f08 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800608c:	e773      	b.n	8005f76 <HAL_SD_IRQHandler+0x6a>
  if (hsd->RxXferSize >= 32U)
 800608e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006090:	2b1f      	cmp	r3, #31
 8006092:	f67f af70 	bls.w	8005f76 <HAL_SD_IRQHandler+0x6a>
  tmp = hsd->pRxBuffPtr;
 8006096:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006098:	1d3d      	adds	r5, r7, #4
 800609a:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800609e:	e000      	b.n	80060a2 <HAL_SD_IRQHandler+0x196>
 80060a0:	6820      	ldr	r0, [r4, #0]
      data = SDMMC_ReadFIFO(hsd->Instance);
 80060a2:	f000 ffbd 	bl	8007020 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 80060a6:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80060aa:	0a02      	lsrs	r2, r0, #8
 80060ac:	3504      	adds	r5, #4
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80060ae:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80060b0:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80060b2:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80060b6:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80060ba:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 80060be:	42ae      	cmp	r6, r5
 80060c0:	d1ee      	bne.n	80060a0 <HAL_SD_IRQHandler+0x194>
    hsd->RxXferSize -= 32U;
 80060c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hsd->pRxBuffPtr = tmp;
 80060c4:	3720      	adds	r7, #32
    hsd->RxXferSize -= 32U;
 80060c6:	3b20      	subs	r3, #32
 80060c8:	e9c4 730a 	strd	r7, r3, [r4, #40]	; 0x28
 80060cc:	e753      	b.n	8005f76 <HAL_SD_IRQHandler+0x6a>
        HAL_SD_TxCpltCallback(hsd);
 80060ce:	4620      	mov	r0, r4
 80060d0:	f005 f8d8 	bl	800b284 <HAL_SD_TxCpltCallback>
}
 80060d4:	b003      	add	sp, #12
 80060d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060d8:	f001 f926 	bl	8007328 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80060dc:	4603      	mov	r3, r0
 80060de:	2800      	cmp	r0, #0
 80060e0:	d136      	bne.n	8006150 <HAL_SD_IRQHandler+0x244>
 80060e2:	6820      	ldr	r0, [r4, #0]
 80060e4:	e73a      	b.n	8005f5c <HAL_SD_IRQHandler+0x50>
  if (hsd->TxXferSize >= 32U)
 80060e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e8:	2b1f      	cmp	r3, #31
 80060ea:	f67f af44 	bls.w	8005f76 <HAL_SD_IRQHandler+0x6a>
  tmp = hsd->pTxBuffPtr;
 80060ee:	6a26      	ldr	r6, [r4, #32]
 80060f0:	1d37      	adds	r7, r6, #4
 80060f2:	f106 0524 	add.w	r5, r6, #36	; 0x24
 80060f6:	e000      	b.n	80060fa <HAL_SD_IRQHandler+0x1ee>
 80060f8:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 80060fa:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80060fe:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006100:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 8006102:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8006104:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 8006108:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800610c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800610e:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 8006112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006116:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8006118:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800611c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006120:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006122:	f000 ff81 	bl	8007028 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006126:	42bd      	cmp	r5, r7
 8006128:	d1e6      	bne.n	80060f8 <HAL_SD_IRQHandler+0x1ec>
    hsd->TxXferSize -= 32U;
 800612a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsd->pTxBuffPtr = tmp;
 800612c:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800612e:	3b20      	subs	r3, #32
 8006130:	e9c4 6308 	strd	r6, r3, [r4, #32]
 8006134:	e71f      	b.n	8005f76 <HAL_SD_IRQHandler+0x6a>
      hsd->State = HAL_SD_STATE_READY;
 8006136:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8006138:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 800613a:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800613c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006140:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006142:	f7ff fa83 	bl	800564c <HAL_SD_ErrorCallback>
 8006146:	e716      	b.n	8005f76 <HAL_SD_IRQHandler+0x6a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006148:	b9f5      	cbnz	r5, 8006188 <HAL_SD_IRQHandler+0x27c>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800614a:	f7ff fed7 	bl	8005efc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800614e:	e712      	b.n	8005f76 <HAL_SD_IRQHandler+0x6a>
          hsd->ErrorCode |= errorstate;
 8006150:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006152:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8006154:	4313      	orrs	r3, r2
 8006156:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006158:	f7ff fa78 	bl	800564c <HAL_SD_ErrorCallback>
 800615c:	e7c1      	b.n	80060e2 <HAL_SD_IRQHandler+0x1d6>
        HAL_SD_TxCpltCallback(hsd);
 800615e:	4620      	mov	r0, r4
 8006160:	f005 f890 	bl	800b284 <HAL_SD_TxCpltCallback>
 8006164:	e77f      	b.n	8006066 <HAL_SD_IRQHandler+0x15a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006166:	6820      	ldr	r0, [r4, #0]
 8006168:	f001 f8de 	bl	8007328 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800616c:	4603      	mov	r3, r0
 800616e:	2800      	cmp	r0, #0
 8006170:	f43f af71 	beq.w	8006056 <HAL_SD_IRQHandler+0x14a>
          hsd->ErrorCode |= errorstate;
 8006174:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006176:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8006178:	4313      	orrs	r3, r2
 800617a:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800617c:	f7ff fa66 	bl	800564c <HAL_SD_ErrorCallback>
 8006180:	e769      	b.n	8006056 <HAL_SD_IRQHandler+0x14a>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006182:	f7ff febd 	bl	8005f00 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 8006186:	e6f6      	b.n	8005f76 <HAL_SD_IRQHandler+0x6a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006188:	f7ff febc 	bl	8005f04 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800618c:	e6f3      	b.n	8005f76 <HAL_SD_IRQHandler+0x6a>
 800618e:	bf00      	nop
 8006190:	ffff3ec5 	.word	0xffff3ec5
 8006194:	18000f3a 	.word	0x18000f3a

08006198 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006198:	b310      	cbz	r0, 80061e0 <HAL_SDRAM_Init+0x48>
{
 800619a:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800619c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80061a0:	4604      	mov	r4, r0
 80061a2:	460d      	mov	r5, r1
 80061a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80061a8:	b1ab      	cbz	r3, 80061d6 <HAL_SDRAM_Init+0x3e>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80061aa:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80061ac:	1d21      	adds	r1, r4, #4
 80061ae:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80061b0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80061b4:	f000 fe18 	bl	8006de8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80061b8:	4629      	mov	r1, r5
 80061ba:	e9d4 0200 	ldrd	r0, r2, [r4]
 80061be:	f000 fe4b 	bl	8006e58 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80061c2:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80061c4:	2101      	movs	r1, #1

  return HAL_OK;
 80061c6:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80061c8:	6813      	ldr	r3, [r2, #0]
 80061ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ce:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80061d0:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 80061d4:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80061d6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80061da:	f005 f925 	bl	800b428 <HAL_SDRAM_MspInit>
 80061de:	e7e4      	b.n	80061aa <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 80061e0:	2001      	movs	r0, #1
}
 80061e2:	4770      	bx	lr
 80061e4:	52004000 	.word	0x52004000

080061e8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80061e8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80061ec:	b2db      	uxtb	r3, r3
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d015      	beq.n	800621e <HAL_SDRAM_SendCommand+0x36>
{
 80061f2:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80061f4:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
 80061f8:	2c01      	cmp	r4, #1
 80061fa:	d001      	beq.n	8006200 <HAL_SDRAM_SendCommand+0x18>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 80061fc:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80061fe:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006200:	2302      	movs	r3, #2
 8006202:	4605      	mov	r5, r0
 8006204:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006206:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006208:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800620c:	f000 fe6a 	bl	8006ee4 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006210:	6833      	ldr	r3, [r6, #0]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d005      	beq.n	8006222 <HAL_SDRAM_SendCommand+0x3a>
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006216:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  return HAL_OK;
 800621a:	2000      	movs	r0, #0
}
 800621c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800621e:	4618      	mov	r0, r3
}
 8006220:	4770      	bx	lr
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006222:	2305      	movs	r3, #5
  return HAL_OK;
 8006224:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006226:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 800622a:	bd70      	pop	{r4, r5, r6, pc}

0800622c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800622c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800622e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d006      	beq.n	8006246 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006238:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800623c:	b2ed      	uxtb	r5, r5
 800623e:	2d01      	cmp	r5, #1
 8006240:	d003      	beq.n	800624a <HAL_SDRAM_ProgramRefreshRate+0x1e>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8006242:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006244:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8006246:	4618      	mov	r0, r3
}
 8006248:	bd38      	pop	{r3, r4, r5, pc}
 800624a:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800624c:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800624e:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006250:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006254:	f000 fe58 	bl	8006f08 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006258:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  return HAL_OK;
 800625c:	2000      	movs	r0, #0
}
 800625e:	bd38      	pop	{r3, r4, r5, pc}

08006260 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8006260:	6801      	ldr	r1, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006262:	4a30      	ldr	r2, [pc, #192]	; (8006324 <SPI_CloseTransfer+0xc4>)
{
 8006264:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8006266:	694b      	ldr	r3, [r1, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006268:	698c      	ldr	r4, [r1, #24]
 800626a:	f044 0408 	orr.w	r4, r4, #8
 800626e:	618c      	str	r4, [r1, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006270:	6804      	ldr	r4, [r0, #0]
 8006272:	69a1      	ldr	r1, [r4, #24]
 8006274:	f041 0110 	orr.w	r1, r1, #16
 8006278:	61a1      	str	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800627a:	6804      	ldr	r4, [r0, #0]
 800627c:	6821      	ldr	r1, [r4, #0]
 800627e:	f021 0101 	bic.w	r1, r1, #1
 8006282:	6021      	str	r1, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006284:	6801      	ldr	r1, [r0, #0]
 8006286:	690c      	ldr	r4, [r1, #16]
 8006288:	4022      	ands	r2, r4
 800628a:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800628c:	6801      	ldr	r1, [r0, #0]
 800628e:	688a      	ldr	r2, [r1, #8]
 8006290:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006294:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006296:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800629a:	2a04      	cmp	r2, #4
 800629c:	d001      	beq.n	80062a2 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800629e:	069c      	lsls	r4, r3, #26
 80062a0:	d433      	bmi.n	800630a <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062a2:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 80062a6:	2a03      	cmp	r2, #3
 80062a8:	d001      	beq.n	80062ae <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80062aa:	0659      	lsls	r1, r3, #25
 80062ac:	d421      	bmi.n	80062f2 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80062ae:	059a      	lsls	r2, r3, #22
 80062b0:	d50a      	bpl.n	80062c8 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062b2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062b6:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062b8:	f042 0201 	orr.w	r2, r2, #1
 80062bc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062c0:	698a      	ldr	r2, [r1, #24]
 80062c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c6:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80062c8:	05db      	lsls	r3, r3, #23
 80062ca:	d50a      	bpl.n	80062e2 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80062cc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80062d0:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80062d2:	f043 0308 	orr.w	r3, r3, #8
 80062d6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80062da:	6993      	ldr	r3, [r2, #24]
 80062dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e0:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80062e2:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 80062e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 80062e8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80062ec:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 80062f0:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062f2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062f6:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062f8:	f042 0204 	orr.w	r2, r2, #4
 80062fc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006300:	698a      	ldr	r2, [r1, #24]
 8006302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006306:	618a      	str	r2, [r1, #24]
 8006308:	e7d1      	b.n	80062ae <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800630a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800630e:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006310:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006314:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006318:	698a      	ldr	r2, [r1, #24]
 800631a:	f042 0220 	orr.w	r2, r2, #32
 800631e:	618a      	str	r2, [r1, #24]
 8006320:	e7bf      	b.n	80062a2 <SPI_CloseTransfer+0x42>
 8006322:	bf00      	nop
 8006324:	fffffc90 	.word	0xfffffc90

08006328 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006328:	2800      	cmp	r0, #0
 800632a:	f000 809b 	beq.w	8006464 <HAL_SPI_Init+0x13c>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800632e:	4955      	ldr	r1, [pc, #340]	; (8006484 <HAL_SPI_Init+0x15c>)
{
 8006330:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006332:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006334:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006336:	428a      	cmp	r2, r1
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006338:	6283      	str	r3, [r0, #40]	; 0x28
 800633a:	68c3      	ldr	r3, [r0, #12]
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800633c:	d013      	beq.n	8006366 <HAL_SPI_Init+0x3e>
 800633e:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 8006342:	428a      	cmp	r2, r1
 8006344:	d00f      	beq.n	8006366 <HAL_SPI_Init+0x3e>
 8006346:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800634a:	428a      	cmp	r2, r1
 800634c:	d075      	beq.n	800643a <HAL_SPI_Init+0x112>
 800634e:	2b0f      	cmp	r3, #15
 8006350:	d807      	bhi.n	8006362 <HAL_SPI_Init+0x3a>
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006352:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006354:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8006356:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006358:	0949      	lsrs	r1, r1, #5

  return data_size * fifo_threashold;
 800635a:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800635e:	2b08      	cmp	r3, #8
 8006360:	d907      	bls.n	8006372 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8006362:	2001      	movs	r0, #1
}
 8006364:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 8006366:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006368:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800636a:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800636c:	0949      	lsrs	r1, r1, #5
  return data_size * fifo_threashold;
 800636e:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006372:	4c44      	ldr	r4, [pc, #272]	; (8006484 <HAL_SPI_Init+0x15c>)
 8006374:	4944      	ldr	r1, [pc, #272]	; (8006488 <HAL_SPI_Init+0x160>)
 8006376:	428a      	cmp	r2, r1
 8006378:	bf18      	it	ne
 800637a:	42a2      	cmpne	r2, r4
 800637c:	d063      	beq.n	8006446 <HAL_SPI_Init+0x11e>
 800637e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006382:	428a      	cmp	r2, r1
 8006384:	d05f      	beq.n	8006446 <HAL_SPI_Init+0x11e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006386:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800638a:	4604      	mov	r4, r0
 800638c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8006390:	2b00      	cmp	r3, #0
 8006392:	d061      	beq.n	8006458 <HAL_SPI_Init+0x130>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006394:	2302      	movs	r3, #2
 8006396:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800639a:	6813      	ldr	r3, [r2, #0]
 800639c:	f023 0301 	bic.w	r3, r3, #1
 80063a0:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80063a2:	69a3      	ldr	r3, [r4, #24]
 80063a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063a8:	d05e      	beq.n	8006468 <HAL_SPI_Init+0x140>
 80063aa:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80063ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80063ae:	69e3      	ldr	r3, [r4, #28]
 80063b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80063b2:	430b      	orrs	r3, r1
 80063b4:	68e1      	ldr	r1, [r4, #12]
 80063b6:	4303      	orrs	r3, r0
 80063b8:	430b      	orrs	r3, r1
 80063ba:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80063bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80063be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80063c2:	4313      	orrs	r3, r2
 80063c4:	69a1      	ldr	r1, [r4, #24]
 80063c6:	6922      	ldr	r2, [r4, #16]
 80063c8:	4303      	orrs	r3, r0
 80063ca:	6965      	ldr	r5, [r4, #20]
 80063cc:	6a20      	ldr	r0, [r4, #32]
 80063ce:	430b      	orrs	r3, r1
 80063d0:	6861      	ldr	r1, [r4, #4]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80063d6:	432b      	orrs	r3, r5
 80063d8:	68a5      	ldr	r5, [r4, #8]
 80063da:	4303      	orrs	r3, r0
 80063dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80063de:	430b      	orrs	r3, r1
 80063e0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80063e2:	4313      	orrs	r3, r2
 80063e4:	6822      	ldr	r2, [r4, #0]
 80063e6:	432b      	orrs	r3, r5
 80063e8:	4303      	orrs	r3, r0
 80063ea:	430b      	orrs	r3, r1
 80063ec:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80063ee:	6863      	ldr	r3, [r4, #4]
 80063f0:	b96b      	cbnz	r3, 800640e <HAL_SPI_Init+0xe6>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80063f2:	6822      	ldr	r2, [r4, #0]
 80063f4:	6893      	ldr	r3, [r2, #8]
 80063f6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80063fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80063fe:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006400:	6822      	ldr	r2, [r4, #0]
 8006402:	6893      	ldr	r3, [r2, #8]
 8006404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800640c:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800640e:	6822      	ldr	r2, [r4, #0]
 8006410:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006412:	f023 0301 	bic.w	r3, r3, #1
 8006416:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006418:	6863      	ldr	r3, [r4, #4]
 800641a:	025b      	lsls	r3, r3, #9
 800641c:	d506      	bpl.n	800642c <HAL_SPI_Init+0x104>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800641e:	6822      	ldr	r2, [r4, #0]
 8006420:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006422:	68d3      	ldr	r3, [r2, #12]
 8006424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006428:	430b      	orrs	r3, r1
 800642a:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800642c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800642e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006430:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006434:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8006438:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 800643a:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800643c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800643e:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006440:	0949      	lsrs	r1, r1, #5
  return data_size * fifo_threashold;
 8006442:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006446:	2b10      	cmp	r3, #16
 8006448:	d88b      	bhi.n	8006362 <HAL_SPI_Init+0x3a>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800644a:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800644e:	4604      	mov	r4, r0
 8006450:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8006454:	2b00      	cmp	r3, #0
 8006456:	d19d      	bne.n	8006394 <HAL_SPI_Init+0x6c>
    hspi->Lock = HAL_UNLOCKED;
 8006458:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800645c:	f006 f970 	bl	800c740 <HAL_SPI_MspInit>
 8006460:	6822      	ldr	r2, [r4, #0]
 8006462:	e797      	b.n	8006394 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 8006464:	2001      	movs	r0, #1
}
 8006466:	4770      	bx	lr
 8006468:	e9d4 2300 	ldrd	r2, r3, [r4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800646c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006470:	d19c      	bne.n	80063ac <HAL_SPI_Init+0x84>
 8006472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006474:	2b00      	cmp	r3, #0
 8006476:	d199      	bne.n	80063ac <HAL_SPI_Init+0x84>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006478:	6813      	ldr	r3, [r2, #0]
 800647a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	e793      	b.n	80063aa <HAL_SPI_Init+0x82>
 8006482:	bf00      	nop
 8006484:	40013000 	.word	0x40013000
 8006488:	40003800 	.word	0x40003800

0800648c <HAL_SPI_Transmit_DMA>:
{
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 8006490:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 8006494:	2801      	cmp	r0, #1
 8006496:	f000 8082 	beq.w	800659e <HAL_SPI_Transmit_DMA+0x112>
 800649a:	2401      	movs	r4, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 800649c:	f893 0081 	ldrb.w	r0, [r3, #129]	; 0x81
 80064a0:	42a0      	cmp	r0, r4
  __HAL_LOCK(hspi);
 80064a2:	f883 4080 	strb.w	r4, [r3, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 80064a6:	d167      	bne.n	8006578 <HAL_SPI_Transmit_DMA+0xec>
  if ((pData == NULL) || (Size == 0UL))
 80064a8:	2900      	cmp	r1, #0
 80064aa:	d06d      	beq.n	8006588 <HAL_SPI_Transmit_DMA+0xfc>
 80064ac:	fab2 f082 	clz	r0, r2
 80064b0:	0940      	lsrs	r0, r0, #5
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d168      	bne.n	8006588 <HAL_SPI_Transmit_DMA+0xfc>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064b6:	689c      	ldr	r4, [r3, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064b8:	2503      	movs	r5, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064ba:	65d9      	str	r1, [r3, #92]	; 0x5c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064bc:	f5b4 2fc0 	cmp.w	r4, #393216	; 0x60000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064c0:	f883 5081 	strb.w	r5, [r3, #129]	; 0x81
  hspi->TxXferSize  = Size;
 80064c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064c8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = NULL;
 80064cc:	6658      	str	r0, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 80064ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferSize  = (uint16_t)0UL;
 80064d2:	f8a3 0068 	strh.w	r0, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80064d6:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 80064da:	e9c3 001c 	strd	r0, r0, [r3, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064de:	d058      	beq.n	8006592 <HAL_SPI_Transmit_DMA+0x106>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80064e0:	68dc      	ldr	r4, [r3, #12]
 80064e2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80064e4:	2c0f      	cmp	r4, #15
 80064e6:	6988      	ldr	r0, [r1, #24]
 80064e8:	d84b      	bhi.n	8006582 <HAL_SPI_Transmit_DMA+0xf6>
 80064ea:	2c07      	cmp	r4, #7
 80064ec:	d879      	bhi.n	80065e2 <HAL_SPI_Transmit_DMA+0x156>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064ee:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80064f2:	d067      	beq.n	80065c4 <HAL_SPI_Transmit_DMA+0x138>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80064f4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80064f8:	d06c      	beq.n	80065d4 <HAL_SPI_Transmit_DMA+0x148>
 80064fa:	461d      	mov	r5, r3
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80064fc:	4b41      	ldr	r3, [pc, #260]	; (8006604 <HAL_SPI_Transmit_DMA+0x178>)
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80064fe:	4842      	ldr	r0, [pc, #264]	; (8006608 <HAL_SPI_Transmit_DMA+0x17c>)
 8006500:	4614      	mov	r4, r2
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006502:	640b      	str	r3, [r1, #64]	; 0x40
  hspi->hdmatx->XferAbortCallback = NULL;
 8006504:	2200      	movs	r2, #0
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006506:	6fab      	ldr	r3, [r5, #120]	; 0x78
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006508:	4940      	ldr	r1, [pc, #256]	; (800660c <HAL_SPI_Transmit_DMA+0x180>)
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800650a:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800650c:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800650e:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 8006510:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8006512:	651a      	str	r2, [r3, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006514:	682a      	ldr	r2, [r5, #0]
 8006516:	6893      	ldr	r3, [r2, #8]
 8006518:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800651c:	6093      	str	r3, [r2, #8]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800651e:	682a      	ldr	r2, [r5, #0]
 8006520:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8006524:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8006526:	3220      	adds	r2, #32
 8006528:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 800652a:	f7fb f8ed 	bl	8001708 <HAL_DMA_Start_IT>
 800652e:	2800      	cmp	r0, #0
 8006530:	d137      	bne.n	80065a2 <HAL_SPI_Transmit_DMA+0x116>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006532:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	69d2      	ldr	r2, [r2, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006538:	6859      	ldr	r1, [r3, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800653a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800653e:	4a34      	ldr	r2, [pc, #208]	; (8006610 <HAL_SPI_Transmit_DMA+0x184>)
 8006540:	ea02 0201 	and.w	r2, r2, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006544:	bf18      	it	ne
 8006546:	4322      	orrne	r2, r4
 8006548:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800654a:	682a      	ldr	r2, [r5, #0]
 800654c:	6893      	ldr	r3, [r2, #8]
 800654e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006552:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8006554:	682a      	ldr	r2, [r5, #0]
 8006556:	6913      	ldr	r3, [r2, #16]
 8006558:	f443 7348 	orr.w	r3, r3, #800	; 0x320
 800655c:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800655e:	682a      	ldr	r2, [r5, #0]
 8006560:	6813      	ldr	r3, [r2, #0]
 8006562:	f043 0301 	orr.w	r3, r3, #1
 8006566:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006568:	686b      	ldr	r3, [r5, #4]
 800656a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800656e:	d023      	beq.n	80065b8 <HAL_SPI_Transmit_DMA+0x12c>
  __HAL_UNLOCK(hspi);
 8006570:	2300      	movs	r3, #0
 8006572:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
}
 8006576:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hspi);
 8006578:	2200      	movs	r2, #0
    return errorcode;
 800657a:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 800657c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8006580:	bd38      	pop	{r3, r4, r5, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006582:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8006586:	d0b8      	beq.n	80064fa <HAL_SPI_Transmit_DMA+0x6e>
    __HAL_UNLOCK(hspi);
 8006588:	2200      	movs	r2, #0
    return errorcode;
 800658a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800658c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8006590:	bd38      	pop	{r3, r4, r5, pc}
    SPI_1LINE_TX(hspi);
 8006592:	6818      	ldr	r0, [r3, #0]
 8006594:	6801      	ldr	r1, [r0, #0]
 8006596:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800659a:	6001      	str	r1, [r0, #0]
 800659c:	e7a0      	b.n	80064e0 <HAL_SPI_Transmit_DMA+0x54>
  __HAL_LOCK(hspi);
 800659e:	2002      	movs	r0, #2
}
 80065a0:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065a2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80065a6:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065a8:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 80065ac:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065ae:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80065b2:	f885 2081 	strb.w	r2, [r5, #129]	; 0x81
}
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80065b8:	682a      	ldr	r2, [r5, #0]
 80065ba:	6813      	ldr	r3, [r2, #0]
 80065bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	e7d5      	b.n	8006570 <HAL_SPI_Transmit_DMA+0xe4>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80065c4:	f8b3 0062 	ldrh.w	r0, [r3, #98]	; 0x62
 80065c8:	3001      	adds	r0, #1
 80065ca:	0840      	lsrs	r0, r0, #1
 80065cc:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
 80065d0:	6988      	ldr	r0, [r1, #24]
 80065d2:	e78f      	b.n	80064f4 <HAL_SPI_Transmit_DMA+0x68>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80065d4:	f8b3 0062 	ldrh.w	r0, [r3, #98]	; 0x62
 80065d8:	3003      	adds	r0, #3
 80065da:	0880      	lsrs	r0, r0, #2
 80065dc:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
 80065e0:	e78b      	b.n	80064fa <HAL_SPI_Transmit_DMA+0x6e>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80065e2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80065e6:	d002      	beq.n	80065ee <HAL_SPI_Transmit_DMA+0x162>
 80065e8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80065ec:	d1cc      	bne.n	8006588 <HAL_SPI_Transmit_DMA+0xfc>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80065ee:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80065f2:	d182      	bne.n	80064fa <HAL_SPI_Transmit_DMA+0x6e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80065f4:	f8b3 0062 	ldrh.w	r0, [r3, #98]	; 0x62
 80065f8:	3001      	adds	r0, #1
 80065fa:	0840      	lsrs	r0, r0, #1
 80065fc:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
 8006600:	e77b      	b.n	80064fa <HAL_SPI_Transmit_DMA+0x6e>
 8006602:	bf00      	nop
 8006604:	08006a6d 	.word	0x08006a6d
 8006608:	080069ed 	.word	0x080069ed
 800660c:	08006a9d 	.word	0x08006a9d
 8006610:	ffff0000 	.word	0xffff0000

08006614 <HAL_SPI_TransmitReceive_DMA>:
{
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8006618:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 800661c:	2801      	cmp	r0, #1
 800661e:	d068      	beq.n	80066f2 <HAL_SPI_TransmitReceive_DMA+0xde>
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8006620:	6865      	ldr	r5, [r4, #4]
  __HAL_LOCK(hspi);
 8006622:	2601      	movs	r6, #1
  tmp_state   = hspi->State;
 8006624:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8006628:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
  __HAL_LOCK(hspi);
 800662c:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
  tmp_state   = hspi->State;
 8006630:	b2c0      	uxtb	r0, r0
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8006632:	d010      	beq.n	8006656 <HAL_SPI_TransmitReceive_DMA+0x42>
 8006634:	2801      	cmp	r0, #1
 8006636:	d109      	bne.n	800664c <HAL_SPI_TransmitReceive_DMA+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006638:	2b00      	cmp	r3, #0
 800663a:	bf18      	it	ne
 800663c:	2a00      	cmpne	r2, #0
 800663e:	d000      	beq.n	8006642 <HAL_SPI_TransmitReceive_DMA+0x2e>
 8006640:	b979      	cbnz	r1, 8006662 <HAL_SPI_TransmitReceive_DMA+0x4e>
    __HAL_UNLOCK(hspi);
 8006642:	2300      	movs	r3, #0
    return errorcode;
 8006644:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8006646:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800664a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 800664c:	2300      	movs	r3, #0
    return errorcode;
 800664e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 8006650:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006654:	bd70      	pop	{r4, r5, r6, pc}
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8006656:	68a5      	ldr	r5, [r4, #8]
 8006658:	2d00      	cmp	r5, #0
 800665a:	d1eb      	bne.n	8006634 <HAL_SPI_TransmitReceive_DMA+0x20>
 800665c:	2804      	cmp	r0, #4
 800665e:	d1e9      	bne.n	8006634 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006660:	e7ea      	b.n	8006638 <HAL_SPI_TransmitReceive_DMA+0x24>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006662:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
 8006666:	2804      	cmp	r0, #4
 8006668:	d002      	beq.n	8006670 <HAL_SPI_TransmitReceive_DMA+0x5c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800666a:	2005      	movs	r0, #5
 800666c:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006670:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006672:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006674:	65e1      	str	r1, [r4, #92]	; 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006676:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->TxXferSize  = Size;
 800667a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800667e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006682:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006684:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006688:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800668c:	e9c4 001c 	strd	r0, r0, [r4, #112]	; 0x70
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006690:	68aa      	ldr	r2, [r5, #8]
 8006692:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006696:	60aa      	str	r2, [r5, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006698:	68e1      	ldr	r1, [r4, #12]
 800669a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800669c:	290f      	cmp	r1, #15
 800669e:	d92a      	bls.n	80066f6 <HAL_SPI_TransmitReceive_DMA+0xe2>
 80066a0:	6991      	ldr	r1, [r2, #24]
 80066a2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80066a6:	d1cc      	bne.n	8006642 <HAL_SPI_TransmitReceive_DMA+0x2e>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80066a8:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 80066ac:	2904      	cmp	r1, #4
 80066ae:	d04e      	beq.n	800674e <HAL_SPI_TransmitReceive_DMA+0x13a>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80066b0:	4858      	ldr	r0, [pc, #352]	; (8006814 <HAL_SPI_TransmitReceive_DMA+0x200>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80066b2:	4959      	ldr	r1, [pc, #356]	; (8006818 <HAL_SPI_TransmitReceive_DMA+0x204>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80066b4:	6410      	str	r0, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80066b6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80066b8:	63d1      	str	r1, [r2, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80066ba:	4958      	ldr	r1, [pc, #352]	; (800681c <HAL_SPI_TransmitReceive_DMA+0x208>)
 80066bc:	461d      	mov	r5, r3
 80066be:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  hspi->hdmarx->XferAbortCallback = NULL;
 80066c0:	2200      	movs	r2, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80066c2:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 80066c4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80066c6:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80066c8:	6821      	ldr	r1, [r4, #0]
 80066ca:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80066ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066d0:	3130      	adds	r1, #48	; 0x30
 80066d2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80066d4:	f7fb f818 	bl	8001708 <HAL_DMA_Start_IT>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d05c      	beq.n	8006796 <HAL_SPI_TransmitReceive_DMA+0x182>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80066dc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80066e0:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80066e2:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 80066e6:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80066e8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80066ec:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 80066f0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hspi);
 80066f2:	2002      	movs	r0, #2
}
 80066f4:	bd70      	pop	{r4, r5, r6, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80066f6:	2907      	cmp	r1, #7
 80066f8:	d82f      	bhi.n	800675a <HAL_SPI_TransmitReceive_DMA+0x146>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066fa:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80066fc:	6981      	ldr	r1, [r0, #24]
 80066fe:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006702:	d106      	bne.n	8006712 <HAL_SPI_TransmitReceive_DMA+0xfe>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006704:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8006708:	3101      	adds	r1, #1
 800670a:	0849      	lsrs	r1, r1, #1
 800670c:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
 8006710:	6981      	ldr	r1, [r0, #24]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006712:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006716:	d105      	bne.n	8006724 <HAL_SPI_TransmitReceive_DMA+0x110>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006718:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 800671c:	3103      	adds	r1, #3
 800671e:	0889      	lsrs	r1, r1, #2
 8006720:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006724:	6991      	ldr	r1, [r2, #24]
 8006726:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800672a:	d106      	bne.n	800673a <HAL_SPI_TransmitReceive_DMA+0x126>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800672c:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8006730:	3101      	adds	r1, #1
 8006732:	0849      	lsrs	r1, r1, #1
 8006734:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8006738:	6991      	ldr	r1, [r2, #24]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800673a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800673e:	d1b3      	bne.n	80066a8 <HAL_SPI_TransmitReceive_DMA+0x94>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8006740:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8006744:	3103      	adds	r1, #3
 8006746:	0889      	lsrs	r1, r1, #2
 8006748:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 800674c:	e7ac      	b.n	80066a8 <HAL_SPI_TransmitReceive_DMA+0x94>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800674e:	4834      	ldr	r0, [pc, #208]	; (8006820 <HAL_SPI_TransmitReceive_DMA+0x20c>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006750:	4934      	ldr	r1, [pc, #208]	; (8006824 <HAL_SPI_TransmitReceive_DMA+0x210>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006752:	6410      	str	r0, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006754:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006756:	63d1      	str	r1, [r2, #60]	; 0x3c
 8006758:	e7af      	b.n	80066ba <HAL_SPI_TransmitReceive_DMA+0xa6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800675a:	6991      	ldr	r1, [r2, #24]
 800675c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006760:	d003      	beq.n	800676a <HAL_SPI_TransmitReceive_DMA+0x156>
 8006762:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006766:	f47f af6c 	bne.w	8006642 <HAL_SPI_TransmitReceive_DMA+0x2e>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800676a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800676c:	6980      	ldr	r0, [r0, #24]
 800676e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8006772:	d106      	bne.n	8006782 <HAL_SPI_TransmitReceive_DMA+0x16e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006774:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8006778:	3101      	adds	r1, #1
 800677a:	0849      	lsrs	r1, r1, #1
 800677c:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
 8006780:	6991      	ldr	r1, [r2, #24]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006782:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006786:	d18f      	bne.n	80066a8 <HAL_SPI_TransmitReceive_DMA+0x94>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006788:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 800678c:	3101      	adds	r1, #1
 800678e:	0849      	lsrs	r1, r1, #1
 8006790:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8006794:	e788      	b.n	80066a8 <HAL_SPI_TransmitReceive_DMA+0x94>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006796:	6822      	ldr	r2, [r4, #0]
 8006798:	6893      	ldr	r3, [r2, #8]
 800679a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800679e:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80067a0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80067a2:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80067a4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80067a6:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80067a8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80067aa:	64d8      	str	r0, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80067ac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80067ae:	6518      	str	r0, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 80067b0:	6822      	ldr	r2, [r4, #0]
 80067b2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80067b6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80067b8:	3220      	adds	r2, #32
 80067ba:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80067bc:	f7fa ffa4 	bl	8001708 <HAL_DMA_Start_IT>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d18b      	bne.n	80066dc <HAL_SPI_TransmitReceive_DMA+0xc8>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80067c4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80067ca:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80067cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80067d0:	4b15      	ldr	r3, [pc, #84]	; (8006828 <HAL_SPI_TransmitReceive_DMA+0x214>)
 80067d2:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80067d6:	bf18      	it	ne
 80067d8:	432b      	orrne	r3, r5
 80067da:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80067dc:	6822      	ldr	r2, [r4, #0]
 80067de:	6893      	ldr	r3, [r2, #8]
 80067e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e4:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80067e6:	6822      	ldr	r2, [r4, #0]
 80067e8:	6913      	ldr	r3, [r2, #16]
 80067ea:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 80067ee:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 80067f0:	6822      	ldr	r2, [r4, #0]
 80067f2:	6813      	ldr	r3, [r2, #0]
 80067f4:	f043 0301 	orr.w	r3, r3, #1
 80067f8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067fa:	6863      	ldr	r3, [r4, #4]
 80067fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006800:	d104      	bne.n	800680c <HAL_SPI_TransmitReceive_DMA+0x1f8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006802:	6822      	ldr	r2, [r4, #0]
 8006804:	6813      	ldr	r3, [r2, #0]
 8006806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800680a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800680c:	2300      	movs	r3, #0
 800680e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006812:	bd70      	pop	{r4, r5, r6, pc}
 8006814:	08006a8d 	.word	0x08006a8d
 8006818:	08006a41 	.word	0x08006a41
 800681c:	08006a9d 	.word	0x08006a9d
 8006820:	08006a7d 	.word	0x08006a7d
 8006824:	08006a15 	.word	0x08006a15
 8006828:	ffff0000 	.word	0xffff0000

0800682c <HAL_SPI_Receive_DMA>:
{
 800682c:	b570      	push	{r4, r5, r6, lr}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800682e:	6885      	ldr	r5, [r0, #8]
{
 8006830:	4604      	mov	r4, r0
 8006832:	460e      	mov	r6, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006834:	b925      	cbnz	r5, 8006840 <HAL_SPI_Receive_DMA+0x14>
 8006836:	6843      	ldr	r3, [r0, #4]
 8006838:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800683c:	f000 808d 	beq.w	800695a <HAL_SPI_Receive_DMA+0x12e>
  __HAL_LOCK(hspi);
 8006840:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8006844:	2b01      	cmp	r3, #1
 8006846:	f000 8097 	beq.w	8006978 <HAL_SPI_Receive_DMA+0x14c>
 800684a:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 800684c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006850:	428b      	cmp	r3, r1
  __HAL_LOCK(hspi);
 8006852:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 8006856:	d168      	bne.n	800692a <HAL_SPI_Receive_DMA+0xfe>
  if ((pData == NULL) || (Size == 0UL))
 8006858:	2e00      	cmp	r6, #0
 800685a:	d073      	beq.n	8006944 <HAL_SPI_Receive_DMA+0x118>
 800685c:	fab2 f182 	clz	r1, r2
 8006860:	0949      	lsrs	r1, r1, #5
 8006862:	2900      	cmp	r1, #0
 8006864:	d16e      	bne.n	8006944 <HAL_SPI_Receive_DMA+0x118>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006866:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006868:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800686c:	6666      	str	r6, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800686e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->RxXferSize  = Size;
 8006872:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006876:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800687a:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 800687e:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006882:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 8006886:	e9c4 111c 	strd	r1, r1, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800688a:	d06f      	beq.n	800696c <HAL_SPI_Receive_DMA+0x140>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800688c:	68e3      	ldr	r3, [r4, #12]
 800688e:	2b0f      	cmp	r3, #15
 8006890:	d85d      	bhi.n	800694e <HAL_SPI_Receive_DMA+0x122>
 8006892:	2b07      	cmp	r3, #7
 8006894:	d84e      	bhi.n	8006934 <HAL_SPI_Receive_DMA+0x108>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006896:	6821      	ldr	r1, [r4, #0]
 8006898:	688b      	ldr	r3, [r1, #8]
 800689a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800689e:	608b      	str	r3, [r1, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80068a0:	68e1      	ldr	r1, [r4, #12]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068a2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80068a4:	2907      	cmp	r1, #7
 80068a6:	d869      	bhi.n	800697c <HAL_SPI_Receive_DMA+0x150>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068a8:	6999      	ldr	r1, [r3, #24]
 80068aa:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80068ae:	f000 808a 	beq.w	80069c6 <HAL_SPI_Receive_DMA+0x19a>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80068b2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80068b6:	d07f      	beq.n	80069b8 <HAL_SPI_Receive_DMA+0x18c>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80068b8:	4947      	ldr	r1, [pc, #284]	; (80069d8 <HAL_SPI_Receive_DMA+0x1ac>)
 80068ba:	4615      	mov	r5, r2
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80068bc:	4847      	ldr	r0, [pc, #284]	; (80069dc <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 80068be:	2200      	movs	r2, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80068c0:	6419      	str	r1, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80068c2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80068c4:	4946      	ldr	r1, [pc, #280]	; (80069e0 <HAL_SPI_Receive_DMA+0x1b4>)
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80068c6:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80068c8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80068ca:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 80068cc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80068ce:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80068d0:	6821      	ldr	r1, [r4, #0]
 80068d2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80068d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068d8:	3130      	adds	r1, #48	; 0x30
 80068da:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80068dc:	f7fa ff14 	bl	8001708 <HAL_DMA_Start_IT>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d158      	bne.n	8006996 <HAL_SPI_Receive_DMA+0x16a>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80068e4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80068e6:	6822      	ldr	r2, [r4, #0]
 80068e8:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80068ea:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80068ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80068f0:	4b3c      	ldr	r3, [pc, #240]	; (80069e4 <HAL_SPI_Receive_DMA+0x1b8>)
 80068f2:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80068f6:	bf18      	it	ne
 80068f8:	432b      	orrne	r3, r5
 80068fa:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80068fc:	6822      	ldr	r2, [r4, #0]
 80068fe:	6893      	ldr	r3, [r2, #8]
 8006900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006904:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006906:	6822      	ldr	r2, [r4, #0]
 8006908:	6913      	ldr	r3, [r2, #16]
 800690a:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800690e:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8006910:	6822      	ldr	r2, [r4, #0]
 8006912:	6813      	ldr	r3, [r2, #0]
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800691a:	6863      	ldr	r3, [r4, #4]
 800691c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006920:	d044      	beq.n	80069ac <HAL_SPI_Receive_DMA+0x180>
  __HAL_UNLOCK(hspi);
 8006922:	2300      	movs	r3, #0
 8006924:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006928:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 800692a:	2300      	movs	r3, #0
    return errorcode;
 800692c:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 800692e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006932:	bd70      	pop	{r4, r5, r6, pc}
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006934:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800693c:	d0ab      	beq.n	8006896 <HAL_SPI_Receive_DMA+0x6a>
 800693e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006942:	d0a8      	beq.n	8006896 <HAL_SPI_Receive_DMA+0x6a>
    __HAL_UNLOCK(hspi);
 8006944:	2300      	movs	r3, #0
    return errorcode;
 8006946:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8006948:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800694c:	bd70      	pop	{r4, r5, r6, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800694e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006956:	d1f5      	bne.n	8006944 <HAL_SPI_Receive_DMA+0x118>
 8006958:	e79d      	b.n	8006896 <HAL_SPI_Receive_DMA+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800695a:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800695c:	4613      	mov	r3, r2
 800695e:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006960:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
}
 8006964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006968:	f7ff be54 	b.w	8006614 <HAL_SPI_TransmitReceive_DMA>
    SPI_1LINE_RX(hspi);
 800696c:	6821      	ldr	r1, [r4, #0]
 800696e:	680b      	ldr	r3, [r1, #0]
 8006970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006974:	600b      	str	r3, [r1, #0]
 8006976:	e789      	b.n	800688c <HAL_SPI_Receive_DMA+0x60>
  __HAL_LOCK(hspi);
 8006978:	2002      	movs	r0, #2
}
 800697a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800697c:	290f      	cmp	r1, #15
 800697e:	d89b      	bhi.n	80068b8 <HAL_SPI_Receive_DMA+0x8c>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006980:	6999      	ldr	r1, [r3, #24]
 8006982:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006986:	d197      	bne.n	80068b8 <HAL_SPI_Receive_DMA+0x8c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006988:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 800698c:	3101      	adds	r1, #1
 800698e:	0849      	lsrs	r1, r1, #1
 8006990:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8006994:	e790      	b.n	80068b8 <HAL_SPI_Receive_DMA+0x8c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006996:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800699a:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800699c:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 80069a0:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80069a2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80069a6:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80069ac:	6822      	ldr	r2, [r4, #0]
 80069ae:	6813      	ldr	r3, [r2, #0]
 80069b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	e7b4      	b.n	8006922 <HAL_SPI_Receive_DMA+0xf6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80069b8:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 80069bc:	3103      	adds	r1, #3
 80069be:	0889      	lsrs	r1, r1, #2
 80069c0:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 80069c4:	e778      	b.n	80068b8 <HAL_SPI_Receive_DMA+0x8c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80069c6:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 80069ca:	3101      	adds	r1, #1
 80069cc:	0849      	lsrs	r1, r1, #1
 80069ce:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 80069d2:	6999      	ldr	r1, [r3, #24]
 80069d4:	e76d      	b.n	80068b2 <HAL_SPI_Receive_DMA+0x86>
 80069d6:	bf00      	nop
 80069d8:	08006a7d 	.word	0x08006a7d
 80069dc:	08006a15 	.word	0x08006a15
 80069e0:	08006a9d 	.word	0x08006a9d
 80069e4:	ffff0000 	.word	0xffff0000

080069e8 <HAL_SPI_TxCpltCallback>:
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop

080069ec <SPI_DMATransmitCplt>:
{
 80069ec:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80069f0:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80069f4:	2b07      	cmp	r3, #7
 80069f6:	d009      	beq.n	8006a0c <SPI_DMATransmitCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80069f8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a00:	d005      	beq.n	8006a0e <SPI_DMATransmitCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006a02:	6802      	ldr	r2, [r0, #0]
 8006a04:	6913      	ldr	r3, [r2, #16]
 8006a06:	f043 0308 	orr.w	r3, r3, #8
 8006a0a:	6113      	str	r3, [r2, #16]
}
 8006a0c:	bd08      	pop	{r3, pc}
      HAL_SPI_TxCpltCallback(hspi);
 8006a0e:	f7ff ffeb 	bl	80069e8 <HAL_SPI_TxCpltCallback>
}
 8006a12:	bd08      	pop	{r3, pc}

08006a14 <SPI_DMAReceiveCplt>:
{
 8006a14:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a16:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006a18:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006a1c:	2b07      	cmp	r3, #7
 8006a1e:	d009      	beq.n	8006a34 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006a20:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a28:	d005      	beq.n	8006a36 <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006a2a:	6802      	ldr	r2, [r0, #0]
 8006a2c:	6913      	ldr	r3, [r2, #16]
 8006a2e:	f043 0308 	orr.w	r3, r3, #8
 8006a32:	6113      	str	r3, [r2, #16]
}
 8006a34:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8006a36:	f005 fb5b 	bl	800c0f0 <HAL_SPI_RxCpltCallback>
}
 8006a3a:	bd08      	pop	{r3, pc}

08006a3c <HAL_SPI_TxRxCpltCallback>:
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop

08006a40 <SPI_DMATransmitReceiveCplt>:
{
 8006a40:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a42:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006a44:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006a48:	2b07      	cmp	r3, #7
 8006a4a:	d009      	beq.n	8006a60 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006a4c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a54:	d005      	beq.n	8006a62 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006a56:	6802      	ldr	r2, [r0, #0]
 8006a58:	6913      	ldr	r3, [r2, #16]
 8006a5a:	f043 0308 	orr.w	r3, r3, #8
 8006a5e:	6113      	str	r3, [r2, #16]
}
 8006a60:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 8006a62:	f7ff ffeb 	bl	8006a3c <HAL_SPI_TxRxCpltCallback>
}
 8006a66:	bd08      	pop	{r3, pc}

08006a68 <HAL_SPI_TxHalfCpltCallback>:
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop

08006a6c <SPI_DMAHalfTransmitCplt>:
{
 8006a6c:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006a6e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006a70:	f7ff fffa 	bl	8006a68 <HAL_SPI_TxHalfCpltCallback>
}
 8006a74:	bd08      	pop	{r3, pc}
 8006a76:	bf00      	nop

08006a78 <HAL_SPI_RxHalfCpltCallback>:
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop

08006a7c <SPI_DMAHalfReceiveCplt>:
{
 8006a7c:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006a7e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006a80:	f7ff fffa 	bl	8006a78 <HAL_SPI_RxHalfCpltCallback>
}
 8006a84:	bd08      	pop	{r3, pc}
 8006a86:	bf00      	nop

08006a88 <HAL_SPI_TxRxHalfCpltCallback>:
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop

08006a8c <SPI_DMAHalfTransmitReceiveCplt>:
{
 8006a8c:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006a8e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006a90:	f7ff fffa 	bl	8006a88 <HAL_SPI_TxRxHalfCpltCallback>
}
 8006a94:	bd08      	pop	{r3, pc}
 8006a96:	bf00      	nop

08006a98 <HAL_SPI_ErrorCallback>:
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop

08006a9c <SPI_DMAError>:
{
 8006a9c:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a9e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006aa0:	f7fb fe58 	bl	8002754 <HAL_DMA_GetError>
 8006aa4:	2802      	cmp	r0, #2
 8006aa6:	d066      	beq.n	8006b76 <SPI_DMAError+0xda>
  uint32_t itflag = hspi->Instance->SR;
 8006aa8:	6821      	ldr	r1, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006aaa:	4a33      	ldr	r2, [pc, #204]	; (8006b78 <SPI_DMAError+0xdc>)
  uint32_t itflag = hspi->Instance->SR;
 8006aac:	694b      	ldr	r3, [r1, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006aae:	6988      	ldr	r0, [r1, #24]
 8006ab0:	f040 0008 	orr.w	r0, r0, #8
 8006ab4:	6188      	str	r0, [r1, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006ab6:	6820      	ldr	r0, [r4, #0]
 8006ab8:	6981      	ldr	r1, [r0, #24]
 8006aba:	f041 0110 	orr.w	r1, r1, #16
 8006abe:	6181      	str	r1, [r0, #24]
  __HAL_SPI_DISABLE(hspi);
 8006ac0:	6820      	ldr	r0, [r4, #0]
 8006ac2:	6801      	ldr	r1, [r0, #0]
 8006ac4:	f021 0101 	bic.w	r1, r1, #1
 8006ac8:	6001      	str	r1, [r0, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006aca:	6821      	ldr	r1, [r4, #0]
 8006acc:	6908      	ldr	r0, [r1, #16]
 8006ace:	4002      	ands	r2, r0
 8006ad0:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006ad2:	6821      	ldr	r1, [r4, #0]
 8006ad4:	688a      	ldr	r2, [r1, #8]
 8006ad6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006ada:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006adc:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006ae0:	2a04      	cmp	r2, #4
 8006ae2:	d00c      	beq.n	8006afe <SPI_DMAError+0x62>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006ae4:	0698      	lsls	r0, r3, #26
 8006ae6:	d50a      	bpl.n	8006afe <SPI_DMAError+0x62>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006ae8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006aec:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006aee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006af2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006af6:	698a      	ldr	r2, [r1, #24]
 8006af8:	f042 0220 	orr.w	r2, r2, #32
 8006afc:	618a      	str	r2, [r1, #24]
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006afe:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006b02:	2a03      	cmp	r2, #3
 8006b04:	d00c      	beq.n	8006b20 <SPI_DMAError+0x84>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006b06:	0659      	lsls	r1, r3, #25
 8006b08:	d50a      	bpl.n	8006b20 <SPI_DMAError+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b0a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b0e:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b10:	f042 0204 	orr.w	r2, r2, #4
 8006b14:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b18:	698a      	ldr	r2, [r1, #24]
 8006b1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b1e:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006b20:	059a      	lsls	r2, r3, #22
 8006b22:	d50a      	bpl.n	8006b3a <SPI_DMAError+0x9e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b24:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b28:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b2a:	f042 0201 	orr.w	r2, r2, #1
 8006b2e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b32:	698a      	ldr	r2, [r1, #24]
 8006b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b38:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006b3a:	05db      	lsls	r3, r3, #23
 8006b3c:	d50a      	bpl.n	8006b54 <SPI_DMAError+0xb8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b3e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b42:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b44:	f043 0308 	orr.w	r3, r3, #8
 8006b48:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b4c:	6993      	ldr	r3, [r2, #24]
 8006b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b52:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 8006b54:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 8006b56:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 8006b58:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 8006b5a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006b5e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b62:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006b66:	f043 0310 	orr.w	r3, r3, #16
 8006b6a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006b6e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8006b72:	f7ff ff91 	bl	8006a98 <HAL_SPI_ErrorCallback>
}
 8006b76:	bd10      	pop	{r4, pc}
 8006b78:	fffffc90 	.word	0xfffffc90

08006b7c <HAL_SPI_IRQHandler>:
{
 8006b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 8006b80:	6803      	ldr	r3, [r0, #0]
{
 8006b82:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8006b84:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006b86:	695a      	ldr	r2, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006b88:	f8d3 c008 	ldr.w	ip, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 8006b8c:	ea01 0502 	and.w	r5, r1, r2
  HAL_SPI_StateTypeDef State = hspi->State;
 8006b90:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006b94:	f005 0664 	and.w	r6, r5, #100	; 0x64
 8006b98:	2e04      	cmp	r6, #4
 8006b9a:	f040 8086 	bne.w	8006caa <HAL_SPI_IRQHandler+0x12e>
    hspi->TxISR(hspi);
 8006b9e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006ba0:	f005 0626 	and.w	r6, r5, #38	; 0x26
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006ba4:	f005 0545 	and.w	r5, r5, #69	; 0x45
    hspi->TxISR(hspi);
 8006ba8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006baa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006bac:	4620      	mov	r0, r4
 8006bae:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006bb0:	2d01      	cmp	r5, #1
 8006bb2:	d102      	bne.n	8006bba <HAL_SPI_IRQHandler+0x3e>
    hspi->RxISR(hspi);
 8006bb4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006bba:	2e02      	cmp	r6, #2
 8006bbc:	d173      	bne.n	8006ca6 <HAL_SPI_IRQHandler+0x12a>
    hspi->TxISR(hspi);
 8006bbe:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006bc0:	4620      	mov	r0, r4
}
 8006bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8006bc6:	4718      	bx	r3
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006bc8:	0517      	lsls	r7, r2, #20
 8006bca:	f100 80d9 	bmi.w	8006d80 <HAL_SPI_IRQHandler+0x204>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006bce:	f415 7f58 	tst.w	r5, #864	; 0x360
 8006bd2:	d068      	beq.n	8006ca6 <HAL_SPI_IRQHandler+0x12a>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006bd4:	0668      	lsls	r0, r5, #25
 8006bd6:	d509      	bpl.n	8006bec <HAL_SPI_IRQHandler+0x70>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006bd8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006bdc:	f042 0204 	orr.w	r2, r2, #4
 8006be0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bea:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006bec:	05a9      	lsls	r1, r5, #22
 8006bee:	d50a      	bpl.n	8006c06 <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006bf0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006bf4:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006bfe:	6993      	ldr	r3, [r2, #24]
 8006c00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c04:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006c06:	05ea      	lsls	r2, r5, #23
 8006c08:	d50a      	bpl.n	8006c20 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c0a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c0e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c10:	f043 0308 	orr.w	r3, r3, #8
 8006c14:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c18:	6993      	ldr	r3, [r2, #24]
 8006c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c1e:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006c20:	06ab      	lsls	r3, r5, #26
 8006c22:	d50a      	bpl.n	8006c3a <HAL_SPI_IRQHandler+0xbe>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006c24:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006c28:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006c32:	6993      	ldr	r3, [r2, #24]
 8006c34:	f043 0320 	orr.w	r3, r3, #32
 8006c38:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c3a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d031      	beq.n	8006ca6 <HAL_SPI_IRQHandler+0x12a>
      __HAL_SPI_DISABLE(hspi);
 8006c42:	6821      	ldr	r1, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006c44:	f40c 4c40 	and.w	ip, ip, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8006c48:	4b5e      	ldr	r3, [pc, #376]	; (8006dc4 <HAL_SPI_IRQHandler+0x248>)
      __HAL_SPI_DISABLE(hspi);
 8006c4a:	680a      	ldr	r2, [r1, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006c4c:	f5bc 4f40 	cmp.w	ip, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	600a      	str	r2, [r1, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8006c56:	6822      	ldr	r2, [r4, #0]
 8006c58:	6911      	ldr	r1, [r2, #16]
 8006c5a:	ea03 0301 	and.w	r3, r3, r1
 8006c5e:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006c60:	f040 80a9 	bne.w	8006db6 <HAL_SPI_IRQHandler+0x23a>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006c64:	6822      	ldr	r2, [r4, #0]
 8006c66:	6893      	ldr	r3, [r2, #8]
 8006c68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006c6c:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8006c6e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006c70:	b15b      	cbz	r3, 8006c8a <HAL_SPI_IRQHandler+0x10e>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c72:	4a55      	ldr	r2, [pc, #340]	; (8006dc8 <HAL_SPI_IRQHandler+0x24c>)
 8006c74:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c76:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006c78:	f7fb f814 	bl	8001ca4 <HAL_DMA_Abort_IT>
 8006c7c:	b128      	cbz	r0, 8006c8a <HAL_SPI_IRQHandler+0x10e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c7e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c86:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8006c8a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006c8c:	b15b      	cbz	r3, 8006ca6 <HAL_SPI_IRQHandler+0x12a>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c8e:	4a4e      	ldr	r2, [pc, #312]	; (8006dc8 <HAL_SPI_IRQHandler+0x24c>)
 8006c90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c92:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006c94:	f7fb f806 	bl	8001ca4 <HAL_DMA_Abort_IT>
 8006c98:	b128      	cbz	r0, 8006ca6 <HAL_SPI_IRQHandler+0x12a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c9a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8006ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006caa:	f005 0045 	and.w	r0, r5, #69	; 0x45
 8006cae:	f005 0626 	and.w	r6, r5, #38	; 0x26
 8006cb2:	2801      	cmp	r0, #1
 8006cb4:	f43f af7e 	beq.w	8006bb4 <HAL_SPI_IRQHandler+0x38>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006cb8:	2e02      	cmp	r6, #2
 8006cba:	d080      	beq.n	8006bbe <HAL_SPI_IRQHandler+0x42>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006cbc:	0728      	lsls	r0, r5, #28
 8006cbe:	d583      	bpl.n	8006bc8 <HAL_SPI_IRQHandler+0x4c>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006cc0:	699a      	ldr	r2, [r3, #24]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8006cc2:	f41c 4f40 	tst.w	ip, #49152	; 0xc000
 8006cc6:	b2ff      	uxtb	r7, r7
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006cc8:	f042 0208 	orr.w	r2, r2, #8
 8006ccc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006cce:	6821      	ldr	r1, [r4, #0]
 8006cd0:	698a      	ldr	r2, [r1, #24]
 8006cd2:	f042 0210 	orr.w	r2, r2, #16
 8006cd6:	618a      	str	r2, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006cd8:	6821      	ldr	r1, [r4, #0]
 8006cda:	698a      	ldr	r2, [r1, #24]
 8006cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ce0:	618a      	str	r2, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006ce2:	6821      	ldr	r1, [r4, #0]
 8006ce4:	690a      	ldr	r2, [r1, #16]
 8006ce6:	f022 0208 	bic.w	r2, r2, #8
 8006cea:	610a      	str	r2, [r1, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8006cec:	d00f      	beq.n	8006d0e <HAL_SPI_IRQHandler+0x192>
 8006cee:	2f04      	cmp	r7, #4
 8006cf0:	d059      	beq.n	8006da6 <HAL_SPI_IRQHandler+0x22a>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8006cf2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006cf4:	69d2      	ldr	r2, [r2, #28]
 8006cf6:	b152      	cbz	r2, 8006d0e <HAL_SPI_IRQHandler+0x192>
 8006cf8:	2f03      	cmp	r7, #3
 8006cfa:	d03d      	beq.n	8006d78 <HAL_SPI_IRQHandler+0x1fc>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8006cfc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006cfe:	69d2      	ldr	r2, [r2, #28]
 8006d00:	b12a      	cbz	r2, 8006d0e <HAL_SPI_IRQHandler+0x192>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006d02:	2f05      	cmp	r7, #5
 8006d04:	d1cf      	bne.n	8006ca6 <HAL_SPI_IRQHandler+0x12a>
      HAL_SPI_TxRxCpltCallback(hspi);
 8006d06:	4620      	mov	r0, r4
 8006d08:	f7ff fe98 	bl	8006a3c <HAL_SPI_TxRxCpltCallback>
 8006d0c:	e7cb      	b.n	8006ca6 <HAL_SPI_IRQHandler+0x12a>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006d0e:	6822      	ldr	r2, [r4, #0]
 8006d10:	6892      	ldr	r2, [r2, #8]
 8006d12:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8006d16:	d120      	bne.n	8006d5a <HAL_SPI_IRQHandler+0x1de>
        while (hspi->RxXferCount != 0UL)
 8006d18:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006d1c:	b292      	uxth	r2, r2
 8006d1e:	b1e2      	cbz	r2, 8006d5a <HAL_SPI_IRQHandler+0x1de>
 8006d20:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006d22:	e00f      	b.n	8006d44 <HAL_SPI_IRQHandler+0x1c8>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006d24:	6822      	ldr	r2, [r4, #0]
 8006d26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d28:	600a      	str	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8006d2a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006d2c:	3104      	adds	r1, #4
 8006d2e:	6661      	str	r1, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8006d30:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006d34:	3a01      	subs	r2, #1
 8006d36:	b292      	uxth	r2, r2
 8006d38:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8006d3c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006d40:	b292      	uxth	r2, r2
 8006d42:	b152      	cbz	r2, 8006d5a <HAL_SPI_IRQHandler+0x1de>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006d44:	68e2      	ldr	r2, [r4, #12]
 8006d46:	2a0f      	cmp	r2, #15
 8006d48:	d8ec      	bhi.n	8006d24 <HAL_SPI_IRQHandler+0x1a8>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d4a:	2a07      	cmp	r2, #7
 8006d4c:	d923      	bls.n	8006d96 <HAL_SPI_IRQHandler+0x21a>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d4e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8006d50:	800a      	strh	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d52:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006d54:	3102      	adds	r1, #2
 8006d56:	6661      	str	r1, [r4, #100]	; 0x64
 8006d58:	e7ea      	b.n	8006d30 <HAL_SPI_IRQHandler+0x1b4>
      SPI_CloseTransfer(hspi);
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f7ff fa80 	bl	8006260 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d66:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d6a:	b98b      	cbnz	r3, 8006d90 <HAL_SPI_IRQHandler+0x214>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006d6c:	2f05      	cmp	r7, #5
 8006d6e:	d0ca      	beq.n	8006d06 <HAL_SPI_IRQHandler+0x18a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006d70:	2f04      	cmp	r7, #4
 8006d72:	d01c      	beq.n	8006dae <HAL_SPI_IRQHandler+0x232>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006d74:	2f03      	cmp	r7, #3
 8006d76:	d196      	bne.n	8006ca6 <HAL_SPI_IRQHandler+0x12a>
      HAL_SPI_TxCpltCallback(hspi);
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f7ff fe35 	bl	80069e8 <HAL_SPI_TxCpltCallback>
 8006d7e:	e792      	b.n	8006ca6 <HAL_SPI_IRQHandler+0x12a>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006d80:	070e      	lsls	r6, r1, #28
 8006d82:	f57f af24 	bpl.w	8006bce <HAL_SPI_IRQHandler+0x52>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006d86:	699a      	ldr	r2, [r3, #24]
 8006d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d8c:	619a      	str	r2, [r3, #24]
    return;
 8006d8e:	e78a      	b.n	8006ca6 <HAL_SPI_IRQHandler+0x12a>
        HAL_SPI_ErrorCallback(hspi);
 8006d90:	f7ff fe82 	bl	8006a98 <HAL_SPI_ErrorCallback>
        return;
 8006d94:	e787      	b.n	8006ca6 <HAL_SPI_IRQHandler+0x12a>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d96:	6822      	ldr	r2, [r4, #0]
 8006d98:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006d9c:	700a      	strb	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d9e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006da0:	3101      	adds	r1, #1
 8006da2:	6661      	str	r1, [r4, #100]	; 0x64
 8006da4:	e7c4      	b.n	8006d30 <HAL_SPI_IRQHandler+0x1b4>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8006da6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006da8:	69d2      	ldr	r2, [r2, #28]
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	d0af      	beq.n	8006d0e <HAL_SPI_IRQHandler+0x192>
      HAL_SPI_RxCpltCallback(hspi);
 8006dae:	4620      	mov	r0, r4
 8006db0:	f005 f99e 	bl	800c0f0 <HAL_SPI_RxCpltCallback>
 8006db4:	e777      	b.n	8006ca6 <HAL_SPI_IRQHandler+0x12a>
        hspi->State = HAL_SPI_STATE_READY;
 8006db6:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8006db8:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8006dba:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006dbe:	f7ff fe6b 	bl	8006a98 <HAL_SPI_ErrorCallback>
 8006dc2:	e770      	b.n	8006ca6 <HAL_SPI_IRQHandler+0x12a>
 8006dc4:	fffffc94 	.word	0xfffffc94
 8006dc8:	08006dcd 	.word	0x08006dcd

08006dcc <SPI_DMAAbortOnError>:
{
 8006dcc:	b508      	push	{r3, lr}
  hspi->RxXferCount = (uint16_t) 0UL;
 8006dce:	2200      	movs	r2, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_READY;
 8006dd2:	2101      	movs	r1, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 8006dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  HAL_SPI_ErrorCallback(hspi);
 8006dd8:	4618      	mov	r0, r3
  hspi->TxXferCount = (uint16_t) 0UL;
 8006dda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8006dde:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006de2:	f7ff fe59 	bl	8006a98 <HAL_SPI_ErrorCallback>
}
 8006de6:	bd08      	pop	{r3, pc}

08006de8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006de8:	b470      	push	{r4, r5, r6}
 8006dea:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006dee:	680c      	ldr	r4, [r1, #0]
 8006df0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006df2:	4313      	orrs	r3, r2
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006df4:	b1c4      	cbz	r4, 8006e28 <FMC_SDRAM_Init+0x40>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006df6:	6804      	ldr	r4, [r0, #0]
 8006df8:	432b      	orrs	r3, r5
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006dfa:	4a16      	ldr	r2, [pc, #88]	; (8006e54 <FMC_SDRAM_Init+0x6c>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006dfc:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8006e00:	4323      	orrs	r3, r4
 8006e02:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006e04:	6843      	ldr	r3, [r0, #4]
 8006e06:	684c      	ldr	r4, [r1, #4]
 8006e08:	401a      	ands	r2, r3
 8006e0a:	690d      	ldr	r5, [r1, #16]
 8006e0c:	e9d1 3602 	ldrd	r3, r6, [r1, #8]
 8006e10:	4322      	orrs	r2, r4
 8006e12:	4313      	orrs	r3, r2
 8006e14:	4333      	orrs	r3, r6
 8006e16:	e9d1 4105 	ldrd	r4, r1, [r1, #20]
 8006e1a:	432b      	orrs	r3, r5
 8006e1c:	4323      	orrs	r3, r4
 8006e1e:	430b      	orrs	r3, r1
 8006e20:	6043      	str	r3, [r0, #4]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006e22:	2000      	movs	r0, #0
 8006e24:	bc70      	pop	{r4, r5, r6}
 8006e26:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e28:	6804      	ldr	r4, [r0, #0]
 8006e2a:	432b      	orrs	r3, r5
 8006e2c:	4a09      	ldr	r2, [pc, #36]	; (8006e54 <FMC_SDRAM_Init+0x6c>)
 8006e2e:	684d      	ldr	r5, [r1, #4]
 8006e30:	4022      	ands	r2, r4
 8006e32:	688c      	ldr	r4, [r1, #8]
 8006e34:	68ce      	ldr	r6, [r1, #12]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	432b      	orrs	r3, r5
 8006e3a:	690d      	ldr	r5, [r1, #16]
 8006e3c:	4323      	orrs	r3, r4
 8006e3e:	4333      	orrs	r3, r6
 8006e40:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 8006e44:	432b      	orrs	r3, r5
 8006e46:	4323      	orrs	r3, r4
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	6003      	str	r3, [r0, #0]
}
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	bc70      	pop	{r4, r5, r6}
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	ffff8000 	.word	0xffff8000

08006e58 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006e58:	b4f0      	push	{r4, r5, r6, r7}
 8006e5a:	68cb      	ldr	r3, [r1, #12]
 8006e5c:	694c      	ldr	r4, [r1, #20]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	3c01      	subs	r4, #1
 8006e62:	031b      	lsls	r3, r3, #12
 8006e64:	0524      	lsls	r4, r4, #20
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006e66:	b1fa      	cbz	r2, 8006ea8 <FMC_SDRAM_Timing_Init+0x50>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e68:	6885      	ldr	r5, [r0, #8]
 8006e6a:	4323      	orrs	r3, r4
 8006e6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ee0 <FMC_SDRAM_Timing_Init+0x88>)
 8006e6e:	402a      	ands	r2, r5
 8006e70:	4313      	orrs	r3, r2
 8006e72:	6083      	str	r3, [r0, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006e74:	684c      	ldr	r4, [r1, #4]
 8006e76:	68c2      	ldr	r2, [r0, #12]
 8006e78:	680d      	ldr	r5, [r1, #0]
 8006e7a:	1e63      	subs	r3, r4, #1
 8006e7c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006e80:	688c      	ldr	r4, [r1, #8]
 8006e82:	1e6e      	subs	r6, r5, #1
 8006e84:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8006e88:	1e65      	subs	r5, r4, #1
 8006e8a:	690c      	ldr	r4, [r1, #16]
 8006e8c:	4333      	orrs	r3, r6
 8006e8e:	698a      	ldr	r2, [r1, #24]
 8006e90:	1e61      	subs	r1, r4, #1
 8006e92:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006e96:	3a01      	subs	r2, #1
 8006e98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006e9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006ea0:	60c3      	str	r3, [r0, #12]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	bcf0      	pop	{r4, r5, r6, r7}
 8006ea6:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ea8:	680a      	ldr	r2, [r1, #0]
 8006eaa:	4323      	orrs	r3, r4
 8006eac:	6887      	ldr	r7, [r0, #8]
 8006eae:	3a01      	subs	r2, #1
 8006eb0:	684c      	ldr	r4, [r1, #4]
 8006eb2:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
 8006eb6:	688d      	ldr	r5, [r1, #8]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	1e66      	subs	r6, r4, #1
 8006ebc:	3d01      	subs	r5, #1
 8006ebe:	690c      	ldr	r4, [r1, #16]
 8006ec0:	433b      	orrs	r3, r7
 8006ec2:	698a      	ldr	r2, [r1, #24]
 8006ec4:	1e61      	subs	r1, r4, #1
 8006ec6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8006eca:	3a01      	subs	r2, #1
 8006ecc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006ed0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006ed4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006ed8:	6083      	str	r3, [r0, #8]
}
 8006eda:	2000      	movs	r0, #0
 8006edc:	bcf0      	pop	{r4, r5, r6, r7}
 8006ede:	4770      	bx	lr
 8006ee0:	ff0f0fff 	.word	0xff0f0fff

08006ee4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006ee4:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 8006ee6:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 8006eea:	4604      	mov	r4, r0
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8006eec:	2000      	movs	r0, #0
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	6926      	ldr	r6, [r4, #16]
 8006ef2:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006ef6:	4333      	orrs	r3, r6
 8006ef8:	3a01      	subs	r2, #1
 8006efa:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
 8006efe:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006f02:	6123      	str	r3, [r4, #16]
}
 8006f04:	bc70      	pop	{r4, r5, r6}
 8006f06:	4770      	bx	lr

08006f08 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006f08:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006f0a:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 8006f0c:	2000      	movs	r0, #0
{
 8006f0e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006f10:	6954      	ldr	r4, [r2, #20]
 8006f12:	4023      	ands	r3, r4
 8006f14:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006f18:	6151      	str	r1, [r2, #20]
}
 8006f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	ffffc001 	.word	0xffffc001

08006f24 <SDMMC_GetCmdResp1.part.2>:
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006f24:	4b30      	ldr	r3, [pc, #192]	; (8006fe8 <SDMMC_GetCmdResp1.part.2+0xc4>)
  return (*(__IO uint32_t *) tmp);
 8006f26:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	b34b      	cbz	r3, 8006f80 <SDMMC_GetCmdResp1.part.2+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	db29      	blt.n	8006f84 <SDMMC_GetCmdResp1.part.2+0x60>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006f30:	0051      	lsls	r1, r2, #1
 8006f32:	d42d      	bmi.n	8006f90 <SDMMC_GetCmdResp1.part.2+0x6c>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006f34:	0093      	lsls	r3, r2, #2
 8006f36:	d42d      	bmi.n	8006f94 <SDMMC_GetCmdResp1.part.2+0x70>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006f38:	00d1      	lsls	r1, r2, #3
 8006f3a:	d426      	bmi.n	8006f8a <SDMMC_GetCmdResp1.part.2+0x66>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006f3c:	0113      	lsls	r3, r2, #4
 8006f3e:	d42e      	bmi.n	8006f9e <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006f40:	0151      	lsls	r1, r2, #5
 8006f42:	d42f      	bmi.n	8006fa4 <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006f44:	01d3      	lsls	r3, r2, #7
 8006f46:	d427      	bmi.n	8006f98 <SDMMC_GetCmdResp1.part.2+0x74>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006f48:	0211      	lsls	r1, r2, #8
 8006f4a:	d42e      	bmi.n	8006faa <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006f4c:	0253      	lsls	r3, r2, #9
 8006f4e:	d42f      	bmi.n	8006fb0 <SDMMC_GetCmdResp1.part.2+0x8c>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006f50:	0291      	lsls	r1, r2, #10
 8006f52:	d430      	bmi.n	8006fb6 <SDMMC_GetCmdResp1.part.2+0x92>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006f54:	02d3      	lsls	r3, r2, #11
 8006f56:	d431      	bmi.n	8006fbc <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006f58:	0351      	lsls	r1, r2, #13
 8006f5a:	d432      	bmi.n	8006fc2 <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006f5c:	0393      	lsls	r3, r2, #14
 8006f5e:	d433      	bmi.n	8006fc8 <SDMMC_GetCmdResp1.part.2+0xa4>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006f60:	03d1      	lsls	r1, r2, #15
 8006f62:	d434      	bmi.n	8006fce <SDMMC_GetCmdResp1.part.2+0xaa>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006f64:	0413      	lsls	r3, r2, #16
 8006f66:	d435      	bmi.n	8006fd4 <SDMMC_GetCmdResp1.part.2+0xb0>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006f68:	0451      	lsls	r1, r2, #17
 8006f6a:	d436      	bmi.n	8006fda <SDMMC_GetCmdResp1.part.2+0xb6>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006f6c:	0493      	lsls	r3, r2, #18
 8006f6e:	d437      	bmi.n	8006fe0 <SDMMC_GetCmdResp1.part.2+0xbc>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006f70:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006f74:	bf14      	ite	ne
 8006f76:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8006f7a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8006f7e:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 8006f80:	4618      	mov	r0, r3
 8006f82:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006f84:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8006f88:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006f8a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006f8e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006f90:	2040      	movs	r0, #64	; 0x40
 8006f92:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006f94:	2080      	movs	r0, #128	; 0x80
 8006f96:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006f98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f9c:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006f9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006fa2:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006fa4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006fa8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006faa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006fae:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006fb0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006fb4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006fb6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006fba:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8006fbc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006fc0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006fc2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006fc6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006fc8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006fcc:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006fce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006fd2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006fd4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006fd8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006fda:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006fde:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8006fe0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	fdffe008 	.word	0xfdffe008

08006fec <SDMMC_Init>:
{
 8006fec:	b084      	sub	sp, #16
 8006fee:	b470      	push	{r4, r5, r6}
 8006ff0:	ad04      	add	r5, sp, #16
 8006ff2:	4606      	mov	r6, r0
             Init.BusWide             |\
 8006ff4:	9c07      	ldr	r4, [sp, #28]
}
 8006ff6:	2000      	movs	r0, #0
{
 8006ff8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8006ffc:	460b      	mov	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006ffe:	6875      	ldr	r5, [r6, #4]
             Init.ClockPowerSave      |\
 8007000:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 8007004:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8007006:	9908      	ldr	r1, [sp, #32]
             Init.ClockPowerSave      |\
 8007008:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800700a:	4a04      	ldr	r2, [pc, #16]	; (800701c <SDMMC_Init+0x30>)
             Init.BusWide             |\
 800700c:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800700e:	402a      	ands	r2, r5
             Init.HardwareFlowControl |\
 8007010:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007012:	4313      	orrs	r3, r2
 8007014:	6073      	str	r3, [r6, #4]
}
 8007016:	bc70      	pop	{r4, r5, r6}
 8007018:	b004      	add	sp, #16
 800701a:	4770      	bx	lr
 800701c:	ffc02c00 	.word	0xffc02c00

08007020 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8007020:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop

08007028 <SDMMC_WriteFIFO>:
{
 8007028:	4603      	mov	r3, r0
  SDMMCx->FIFO = *pWriteData;
 800702a:	680a      	ldr	r2, [r1, #0]
}
 800702c:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800702e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8007032:	4770      	bx	lr

08007034 <SDMMC_PowerState_ON>:
{
 8007034:	4602      	mov	r2, r0
}
 8007036:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007038:	6813      	ldr	r3, [r2, #0]
 800703a:	f043 0303 	orr.w	r3, r3, #3
 800703e:	6013      	str	r3, [r2, #0]
}
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop

08007044 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007044:	6800      	ldr	r0, [r0, #0]
}
 8007046:	f000 0003 	and.w	r0, r0, #3
 800704a:	4770      	bx	lr

0800704c <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800704c:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800704e:	5840      	ldr	r0, [r0, r1]
}
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop

08007054 <SDMMC_ConfigData>:
{
 8007054:	b430      	push	{r4, r5}
 8007056:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007058:	680b      	ldr	r3, [r1, #0]
}
 800705a:	2000      	movs	r0, #0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800705c:	6253      	str	r3, [r2, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800705e:	684b      	ldr	r3, [r1, #4]
 8007060:	6293      	str	r3, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 8007062:	690d      	ldr	r5, [r1, #16]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007064:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 8007068:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800706a:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800706c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferDir   |\
 800706e:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007070:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
                       Data->TransferMode  |\
 8007074:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007076:	430b      	orrs	r3, r1
 8007078:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800707a:	bc30      	pop	{r4, r5}
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop

08007080 <SDMMC_CmdBlockLength>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007080:	4a1c      	ldr	r2, [pc, #112]	; (80070f4 <SDMMC_CmdBlockLength+0x74>)
 8007082:	4b1d      	ldr	r3, [pc, #116]	; (80070f8 <SDMMC_CmdBlockLength+0x78>)
{
 8007084:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007086:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007088:	f241 1410 	movw	r4, #4368	; 0x1110
  SDMMCx->ARG = Command->Argument;
 800708c:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800708e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007092:	68c1      	ldr	r1, [r0, #12]
 8007094:	4d19      	ldr	r5, [pc, #100]	; (80070fc <SDMMC_CmdBlockLength+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007096:	f241 3388 	movw	r3, #5000	; 0x1388
 800709a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800709c:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800709e:	4918      	ldr	r1, [pc, #96]	; (8007100 <SDMMC_CmdBlockLength+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80070a0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80070a4:	432c      	orrs	r4, r5
 80070a6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80070a8:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80070ac:	d312      	bcc.n	80070d4 <SDMMC_CmdBlockLength+0x54>
    sta_reg = SDMMCx->STA;
 80070ae:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80070b0:	420a      	tst	r2, r1
 80070b2:	d0f9      	beq.n	80070a8 <SDMMC_CmdBlockLength+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80070b4:	0494      	lsls	r4, r2, #18
 80070b6:	d4f7      	bmi.n	80070a8 <SDMMC_CmdBlockLength+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80070b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80070ba:	075a      	lsls	r2, r3, #29
 80070bc:	d413      	bmi.n	80070e6 <SDMMC_CmdBlockLength+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80070be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80070c0:	07db      	lsls	r3, r3, #31
 80070c2:	d40b      	bmi.n	80070dc <SDMMC_CmdBlockLength+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80070c4:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <SDMMC_CmdBlockLength+0x84>)
 80070c6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80070c8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b10      	cmp	r3, #16
 80070ce:	d00e      	beq.n	80070ee <SDMMC_CmdBlockLength+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070d0:	2001      	movs	r0, #1
  return errorstate;
 80070d2:	e001      	b.n	80070d8 <SDMMC_CmdBlockLength+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80070d4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80070d8:	bc30      	pop	{r4, r5}
 80070da:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80070dc:	2301      	movs	r3, #1
 80070de:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070e0:	4618      	mov	r0, r3
}
 80070e2:	bc30      	pop	{r4, r5}
 80070e4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80070e6:	2304      	movs	r3, #4
 80070e8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070ea:	4618      	mov	r0, r3
 80070ec:	e7f4      	b.n	80070d8 <SDMMC_CmdBlockLength+0x58>
}
 80070ee:	bc30      	pop	{r4, r5}
 80070f0:	f7ff bf18 	b.w	8006f24 <SDMMC_GetCmdResp1.part.2>
 80070f4:	20000018 	.word	0x20000018
 80070f8:	10624dd3 	.word	0x10624dd3
 80070fc:	fffee0c0 	.word	0xfffee0c0
 8007100:	00200045 	.word	0x00200045
 8007104:	002000c5 	.word	0x002000c5

08007108 <SDMMC_CmdReadSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007108:	4a1c      	ldr	r2, [pc, #112]	; (800717c <SDMMC_CmdReadSingleBlock+0x74>)
 800710a:	4b1d      	ldr	r3, [pc, #116]	; (8007180 <SDMMC_CmdReadSingleBlock+0x78>)
{
 800710c:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800710e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007110:	f241 1411 	movw	r4, #4369	; 0x1111
  SDMMCx->ARG = Command->Argument;
 8007114:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007116:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800711a:	68c1      	ldr	r1, [r0, #12]
 800711c:	4d19      	ldr	r5, [pc, #100]	; (8007184 <SDMMC_CmdReadSingleBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800711e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007122:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007124:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007126:	4918      	ldr	r1, [pc, #96]	; (8007188 <SDMMC_CmdReadSingleBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007128:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800712c:	432c      	orrs	r4, r5
 800712e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007130:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007134:	d312      	bcc.n	800715c <SDMMC_CmdReadSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 8007136:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007138:	420a      	tst	r2, r1
 800713a:	d0f9      	beq.n	8007130 <SDMMC_CmdReadSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800713c:	0494      	lsls	r4, r2, #18
 800713e:	d4f7      	bmi.n	8007130 <SDMMC_CmdReadSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007140:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007142:	075a      	lsls	r2, r3, #29
 8007144:	d413      	bmi.n	800716e <SDMMC_CmdReadSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007146:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007148:	07db      	lsls	r3, r3, #31
 800714a:	d40b      	bmi.n	8007164 <SDMMC_CmdReadSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <SDMMC_CmdReadSingleBlock+0x84>)
 800714e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007150:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b11      	cmp	r3, #17
 8007156:	d00e      	beq.n	8007176 <SDMMC_CmdReadSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007158:	2001      	movs	r0, #1
  return errorstate;
 800715a:	e001      	b.n	8007160 <SDMMC_CmdReadSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800715c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007160:	bc30      	pop	{r4, r5}
 8007162:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007164:	2301      	movs	r3, #1
 8007166:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007168:	4618      	mov	r0, r3
}
 800716a:	bc30      	pop	{r4, r5}
 800716c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800716e:	2304      	movs	r3, #4
 8007170:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007172:	4618      	mov	r0, r3
 8007174:	e7f4      	b.n	8007160 <SDMMC_CmdReadSingleBlock+0x58>
}
 8007176:	bc30      	pop	{r4, r5}
 8007178:	f7ff bed4 	b.w	8006f24 <SDMMC_GetCmdResp1.part.2>
 800717c:	20000018 	.word	0x20000018
 8007180:	10624dd3 	.word	0x10624dd3
 8007184:	fffee0c0 	.word	0xfffee0c0
 8007188:	00200045 	.word	0x00200045
 800718c:	002000c5 	.word	0x002000c5

08007190 <SDMMC_CmdReadMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007190:	4a1c      	ldr	r2, [pc, #112]	; (8007204 <SDMMC_CmdReadMultiBlock+0x74>)
 8007192:	4b1d      	ldr	r3, [pc, #116]	; (8007208 <SDMMC_CmdReadMultiBlock+0x78>)
{
 8007194:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007196:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007198:	f241 1412 	movw	r4, #4370	; 0x1112
  SDMMCx->ARG = Command->Argument;
 800719c:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800719e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071a2:	68c1      	ldr	r1, [r0, #12]
 80071a4:	4d19      	ldr	r5, [pc, #100]	; (800720c <SDMMC_CmdReadMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80071aa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071ac:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80071ae:	4918      	ldr	r1, [pc, #96]	; (8007210 <SDMMC_CmdReadMultiBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071b0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071b4:	432c      	orrs	r4, r5
 80071b6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80071b8:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80071bc:	d312      	bcc.n	80071e4 <SDMMC_CmdReadMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 80071be:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80071c0:	420a      	tst	r2, r1
 80071c2:	d0f9      	beq.n	80071b8 <SDMMC_CmdReadMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80071c4:	0494      	lsls	r4, r2, #18
 80071c6:	d4f7      	bmi.n	80071b8 <SDMMC_CmdReadMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80071c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80071ca:	075a      	lsls	r2, r3, #29
 80071cc:	d413      	bmi.n	80071f6 <SDMMC_CmdReadMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80071ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80071d0:	07db      	lsls	r3, r3, #31
 80071d2:	d40b      	bmi.n	80071ec <SDMMC_CmdReadMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80071d4:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <SDMMC_CmdReadMultiBlock+0x84>)
 80071d6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80071d8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b12      	cmp	r3, #18
 80071de:	d00e      	beq.n	80071fe <SDMMC_CmdReadMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071e0:	2001      	movs	r0, #1
  return errorstate;
 80071e2:	e001      	b.n	80071e8 <SDMMC_CmdReadMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80071e4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80071e8:	bc30      	pop	{r4, r5}
 80071ea:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80071ec:	2301      	movs	r3, #1
 80071ee:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071f0:	4618      	mov	r0, r3
}
 80071f2:	bc30      	pop	{r4, r5}
 80071f4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80071f6:	2304      	movs	r3, #4
 80071f8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071fa:	4618      	mov	r0, r3
 80071fc:	e7f4      	b.n	80071e8 <SDMMC_CmdReadMultiBlock+0x58>
}
 80071fe:	bc30      	pop	{r4, r5}
 8007200:	f7ff be90 	b.w	8006f24 <SDMMC_GetCmdResp1.part.2>
 8007204:	20000018 	.word	0x20000018
 8007208:	10624dd3 	.word	0x10624dd3
 800720c:	fffee0c0 	.word	0xfffee0c0
 8007210:	00200045 	.word	0x00200045
 8007214:	002000c5 	.word	0x002000c5

08007218 <SDMMC_CmdWriteSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007218:	4a1c      	ldr	r2, [pc, #112]	; (800728c <SDMMC_CmdWriteSingleBlock+0x74>)
 800721a:	4b1d      	ldr	r3, [pc, #116]	; (8007290 <SDMMC_CmdWriteSingleBlock+0x78>)
{
 800721c:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800721e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007220:	f241 1418 	movw	r4, #4376	; 0x1118
  SDMMCx->ARG = Command->Argument;
 8007224:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007226:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800722a:	68c1      	ldr	r1, [r0, #12]
 800722c:	4d19      	ldr	r5, [pc, #100]	; (8007294 <SDMMC_CmdWriteSingleBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800722e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007232:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007234:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007236:	4918      	ldr	r1, [pc, #96]	; (8007298 <SDMMC_CmdWriteSingleBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007238:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800723c:	432c      	orrs	r4, r5
 800723e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007240:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007244:	d312      	bcc.n	800726c <SDMMC_CmdWriteSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 8007246:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007248:	420a      	tst	r2, r1
 800724a:	d0f9      	beq.n	8007240 <SDMMC_CmdWriteSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800724c:	0494      	lsls	r4, r2, #18
 800724e:	d4f7      	bmi.n	8007240 <SDMMC_CmdWriteSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007250:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007252:	075a      	lsls	r2, r3, #29
 8007254:	d413      	bmi.n	800727e <SDMMC_CmdWriteSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007256:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007258:	07db      	lsls	r3, r3, #31
 800725a:	d40b      	bmi.n	8007274 <SDMMC_CmdWriteSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800725c:	4b0f      	ldr	r3, [pc, #60]	; (800729c <SDMMC_CmdWriteSingleBlock+0x84>)
 800725e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007260:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b18      	cmp	r3, #24
 8007266:	d00e      	beq.n	8007286 <SDMMC_CmdWriteSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007268:	2001      	movs	r0, #1
  return errorstate;
 800726a:	e001      	b.n	8007270 <SDMMC_CmdWriteSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800726c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007270:	bc30      	pop	{r4, r5}
 8007272:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007274:	2301      	movs	r3, #1
 8007276:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007278:	4618      	mov	r0, r3
}
 800727a:	bc30      	pop	{r4, r5}
 800727c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800727e:	2304      	movs	r3, #4
 8007280:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007282:	4618      	mov	r0, r3
 8007284:	e7f4      	b.n	8007270 <SDMMC_CmdWriteSingleBlock+0x58>
}
 8007286:	bc30      	pop	{r4, r5}
 8007288:	f7ff be4c 	b.w	8006f24 <SDMMC_GetCmdResp1.part.2>
 800728c:	20000018 	.word	0x20000018
 8007290:	10624dd3 	.word	0x10624dd3
 8007294:	fffee0c0 	.word	0xfffee0c0
 8007298:	00200045 	.word	0x00200045
 800729c:	002000c5 	.word	0x002000c5

080072a0 <SDMMC_CmdWriteMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072a0:	4a1c      	ldr	r2, [pc, #112]	; (8007314 <SDMMC_CmdWriteMultiBlock+0x74>)
 80072a2:	4b1d      	ldr	r3, [pc, #116]	; (8007318 <SDMMC_CmdWriteMultiBlock+0x78>)
{
 80072a4:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072a6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80072a8:	f241 1419 	movw	r4, #4377	; 0x1119
  SDMMCx->ARG = Command->Argument;
 80072ac:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072ae:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80072b2:	68c1      	ldr	r1, [r0, #12]
 80072b4:	4d19      	ldr	r5, [pc, #100]	; (800731c <SDMMC_CmdWriteMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80072ba:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80072bc:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80072be:	4918      	ldr	r1, [pc, #96]	; (8007320 <SDMMC_CmdWriteMultiBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072c0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80072c4:	432c      	orrs	r4, r5
 80072c6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80072c8:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80072cc:	d312      	bcc.n	80072f4 <SDMMC_CmdWriteMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 80072ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80072d0:	420a      	tst	r2, r1
 80072d2:	d0f9      	beq.n	80072c8 <SDMMC_CmdWriteMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80072d4:	0494      	lsls	r4, r2, #18
 80072d6:	d4f7      	bmi.n	80072c8 <SDMMC_CmdWriteMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80072d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072da:	075a      	lsls	r2, r3, #29
 80072dc:	d413      	bmi.n	8007306 <SDMMC_CmdWriteMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80072de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072e0:	07db      	lsls	r3, r3, #31
 80072e2:	d40b      	bmi.n	80072fc <SDMMC_CmdWriteMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072e4:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <SDMMC_CmdWriteMultiBlock+0x84>)
 80072e6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80072e8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b19      	cmp	r3, #25
 80072ee:	d00e      	beq.n	800730e <SDMMC_CmdWriteMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072f0:	2001      	movs	r0, #1
  return errorstate;
 80072f2:	e001      	b.n	80072f8 <SDMMC_CmdWriteMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80072f4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80072f8:	bc30      	pop	{r4, r5}
 80072fa:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80072fc:	2301      	movs	r3, #1
 80072fe:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007300:	4618      	mov	r0, r3
}
 8007302:	bc30      	pop	{r4, r5}
 8007304:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007306:	2304      	movs	r3, #4
 8007308:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800730a:	4618      	mov	r0, r3
 800730c:	e7f4      	b.n	80072f8 <SDMMC_CmdWriteMultiBlock+0x58>
}
 800730e:	bc30      	pop	{r4, r5}
 8007310:	f7ff be08 	b.w	8006f24 <SDMMC_GetCmdResp1.part.2>
 8007314:	20000018 	.word	0x20000018
 8007318:	10624dd3 	.word	0x10624dd3
 800731c:	fffee0c0 	.word	0xfffee0c0
 8007320:	00200045 	.word	0x00200045
 8007324:	002000c5 	.word	0x002000c5

08007328 <SDMMC_CmdStopTransfer>:
{
 8007328:	b570      	push	{r4, r5, r6, lr}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800732a:	68c3      	ldr	r3, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800732c:	2600      	movs	r6, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800732e:	4a2b      	ldr	r2, [pc, #172]	; (80073dc <SDMMC_CmdStopTransfer+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007330:	f241 140c 	movw	r4, #4364	; 0x110c
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8007334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007338:	4d29      	ldr	r5, [pc, #164]	; (80073e0 <SDMMC_CmdStopTransfer+0xb8>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800733a:	6812      	ldr	r2, [r2, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800733c:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800733e:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007340:	4b28      	ldr	r3, [pc, #160]	; (80073e4 <SDMMC_CmdStopTransfer+0xbc>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8007342:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007346:	fba3 3202 	umull	r3, r2, r3, r2
 800734a:	4b27      	ldr	r3, [pc, #156]	; (80073e8 <SDMMC_CmdStopTransfer+0xc0>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800734c:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800734e:	6086      	str	r6, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007350:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007352:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007354:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007358:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800735a:	4924      	ldr	r1, [pc, #144]	; (80073ec <SDMMC_CmdStopTransfer+0xc4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800735c:	432c      	orrs	r4, r5
 800735e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007360:	b1c3      	cbz	r3, 8007394 <SDMMC_CmdStopTransfer+0x6c>
    sta_reg = SDMMCx->STA;
 8007362:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007364:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007366:	420a      	tst	r2, r1
 8007368:	d0fa      	beq.n	8007360 <SDMMC_CmdStopTransfer+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800736a:	0492      	lsls	r2, r2, #18
 800736c:	d4f8      	bmi.n	8007360 <SDMMC_CmdStopTransfer+0x38>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800736e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007370:	075b      	lsls	r3, r3, #29
 8007372:	d41f      	bmi.n	80073b4 <SDMMC_CmdStopTransfer+0x8c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007374:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007376:	f014 0401 	ands.w	r4, r4, #1
 800737a:	d113      	bne.n	80073a4 <SDMMC_CmdStopTransfer+0x7c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800737c:	4b1c      	ldr	r3, [pc, #112]	; (80073f0 <SDMMC_CmdStopTransfer+0xc8>)
 800737e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007380:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b0c      	cmp	r3, #12
 8007386:	d01c      	beq.n	80073c2 <SDMMC_CmdStopTransfer+0x9a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007388:	68c3      	ldr	r3, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800738a:	2401      	movs	r4, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800738c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007390:	60c3      	str	r3, [r0, #12]
 8007392:	e005      	b.n	80073a0 <SDMMC_CmdStopTransfer+0x78>
 8007394:	68c3      	ldr	r3, [r0, #12]
      return SDMMC_ERROR_TIMEOUT;
 8007396:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800739a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800739e:	60c3      	str	r3, [r0, #12]
}
 80073a0:	4620      	mov	r0, r4
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80073a4:	2401      	movs	r4, #1
 80073a6:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80073a8:	68c3      	ldr	r3, [r0, #12]
 80073aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ae:	60c3      	str	r3, [r0, #12]
}
 80073b0:	4620      	mov	r0, r4
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80073b4:	2404      	movs	r4, #4
 80073b6:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80073b8:	68c3      	ldr	r3, [r0, #12]
 80073ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073be:	60c3      	str	r3, [r0, #12]
 80073c0:	e7ee      	b.n	80073a0 <SDMMC_CmdStopTransfer+0x78>
 80073c2:	4605      	mov	r5, r0
 80073c4:	f7ff fdae 	bl	8006f24 <SDMMC_GetCmdResp1.part.2>
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80073c8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80073cc:	bf18      	it	ne
 80073ce:	4604      	movne	r4, r0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80073d0:	68eb      	ldr	r3, [r5, #12]
 80073d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d6:	60eb      	str	r3, [r5, #12]
 80073d8:	e7e2      	b.n	80073a0 <SDMMC_CmdStopTransfer+0x78>
 80073da:	bf00      	nop
 80073dc:	20000018 	.word	0x20000018
 80073e0:	fffee0c0 	.word	0xfffee0c0
 80073e4:	10624dd3 	.word	0x10624dd3
 80073e8:	05f5e100 	.word	0x05f5e100
 80073ec:	00200045 	.word	0x00200045
 80073f0:	002000c5 	.word	0x002000c5

080073f4 <SDMMC_CmdSelDesel>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80073f4:	4b1c      	ldr	r3, [pc, #112]	; (8007468 <SDMMC_CmdSelDesel+0x74>)
 80073f6:	491d      	ldr	r1, [pc, #116]	; (800746c <SDMMC_CmdSelDesel+0x78>)
{
 80073f8:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80073fa:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073fc:	f241 1407 	movw	r4, #4359	; 0x1107
  SDMMCx->ARG = Command->Argument;
 8007400:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007402:	4d1b      	ldr	r5, [pc, #108]	; (8007470 <SDMMC_CmdSelDesel+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007404:	fba1 3203 	umull	r3, r2, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007408:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800740a:	f241 3388 	movw	r3, #5000	; 0x1388
 800740e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007410:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007412:	4918      	ldr	r1, [pc, #96]	; (8007474 <SDMMC_CmdSelDesel+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007414:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007418:	432c      	orrs	r4, r5
 800741a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800741c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007420:	d312      	bcc.n	8007448 <SDMMC_CmdSelDesel+0x54>
    sta_reg = SDMMCx->STA;
 8007422:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007424:	420a      	tst	r2, r1
 8007426:	d0f9      	beq.n	800741c <SDMMC_CmdSelDesel+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007428:	0494      	lsls	r4, r2, #18
 800742a:	d4f7      	bmi.n	800741c <SDMMC_CmdSelDesel+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800742c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800742e:	075a      	lsls	r2, r3, #29
 8007430:	d413      	bmi.n	800745a <SDMMC_CmdSelDesel+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007432:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007434:	07db      	lsls	r3, r3, #31
 8007436:	d40b      	bmi.n	8007450 <SDMMC_CmdSelDesel+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007438:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <SDMMC_CmdSelDesel+0x84>)
 800743a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800743c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b07      	cmp	r3, #7
 8007442:	d00e      	beq.n	8007462 <SDMMC_CmdSelDesel+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007444:	2001      	movs	r0, #1
  return errorstate;
 8007446:	e001      	b.n	800744c <SDMMC_CmdSelDesel+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007448:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800744c:	bc30      	pop	{r4, r5}
 800744e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007450:	2301      	movs	r3, #1
 8007452:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007454:	4618      	mov	r0, r3
}
 8007456:	bc30      	pop	{r4, r5}
 8007458:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800745a:	2304      	movs	r3, #4
 800745c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800745e:	4618      	mov	r0, r3
 8007460:	e7f4      	b.n	800744c <SDMMC_CmdSelDesel+0x58>
}
 8007462:	bc30      	pop	{r4, r5}
 8007464:	f7ff bd5e 	b.w	8006f24 <SDMMC_GetCmdResp1.part.2>
 8007468:	20000018 	.word	0x20000018
 800746c:	10624dd3 	.word	0x10624dd3
 8007470:	fffee0c0 	.word	0xfffee0c0
 8007474:	00200045 	.word	0x00200045
 8007478:	002000c5 	.word	0x002000c5

0800747c <SDMMC_CmdGoIdleState>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800747c:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <SDMMC_CmdGoIdleState+0x4c>)
{
 800747e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8007480:	2200      	movs	r2, #0
{
 8007482:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007484:	4c11      	ldr	r4, [pc, #68]	; (80074cc <SDMMC_CmdGoIdleState+0x50>)
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 800748c:	608a      	str	r2, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800748e:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007492:	4a0f      	ldr	r2, [pc, #60]	; (80074d0 <SDMMC_CmdGoIdleState+0x54>)
 8007494:	68cc      	ldr	r4, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007496:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007498:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800749a:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800749e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074a2:	60ca      	str	r2, [r1, #12]
 80074a4:	e002      	b.n	80074ac <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80074a6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80074a8:	0612      	lsls	r2, r2, #24
 80074aa:	d407      	bmi.n	80074bc <SDMMC_CmdGoIdleState+0x40>
    if (count-- == 0U)
 80074ac:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80074b0:	d2f9      	bcs.n	80074a6 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80074b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80074b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074ba:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80074bc:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <SDMMC_CmdGoIdleState+0x58>)
  return SDMMC_ERROR_NONE;
 80074be:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80074c0:	638b      	str	r3, [r1, #56]	; 0x38
}
 80074c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	20000018 	.word	0x20000018
 80074cc:	10624dd3 	.word	0x10624dd3
 80074d0:	fffee0c0 	.word	0xfffee0c0
 80074d4:	002000c5 	.word	0x002000c5

080074d8 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074d8:	4a1c      	ldr	r2, [pc, #112]	; (800754c <SDMMC_CmdOperCond+0x74>)
{
 80074da:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074dc:	4b1c      	ldr	r3, [pc, #112]	; (8007550 <SDMMC_CmdOperCond+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80074de:	f241 1008 	movw	r0, #4360	; 0x1108
{
 80074e2:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80074e4:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074e8:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80074ea:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074ec:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80074f0:	68cd      	ldr	r5, [r1, #12]
 80074f2:	4c18      	ldr	r4, [pc, #96]	; (8007554 <SDMMC_CmdOperCond+0x7c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80074f8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80074fa:	402c      	ands	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074fc:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007500:	4320      	orrs	r0, r4
 8007502:	60c8      	str	r0, [r1, #12]

  do
  {
    if (count-- == 0U)
 8007504:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007508:	d313      	bcc.n	8007532 <SDMMC_CmdOperCond+0x5a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800750a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800750c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007510:	d0f8      	beq.n	8007504 <SDMMC_CmdOperCond+0x2c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007512:	0492      	lsls	r2, r2, #18
 8007514:	d4f6      	bmi.n	8007504 <SDMMC_CmdOperCond+0x2c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007516:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007518:	075b      	lsls	r3, r3, #29
 800751a:	d412      	bmi.n	8007542 <SDMMC_CmdOperCond+0x6a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800751c:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800751e:	f010 0001 	ands.w	r0, r0, #1
 8007522:	d10a      	bne.n	800753a <SDMMC_CmdOperCond+0x62>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007524:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007526:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800752a:	d00d      	beq.n	8007548 <SDMMC_CmdOperCond+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800752c:	2340      	movs	r3, #64	; 0x40
 800752e:	638b      	str	r3, [r1, #56]	; 0x38
 8007530:	e001      	b.n	8007536 <SDMMC_CmdOperCond+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8007532:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007536:	bc30      	pop	{r4, r5}
 8007538:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800753a:	2001      	movs	r0, #1
 800753c:	6388      	str	r0, [r1, #56]	; 0x38
}
 800753e:	bc30      	pop	{r4, r5}
 8007540:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007542:	2004      	movs	r0, #4
 8007544:	6388      	str	r0, [r1, #56]	; 0x38
 8007546:	e7f6      	b.n	8007536 <SDMMC_CmdOperCond+0x5e>
  }

  return SDMMC_ERROR_NONE;
 8007548:	4618      	mov	r0, r3
  return errorstate;
 800754a:	e7f4      	b.n	8007536 <SDMMC_CmdOperCond+0x5e>
 800754c:	20000018 	.word	0x20000018
 8007550:	10624dd3 	.word	0x10624dd3
 8007554:	fffee0c0 	.word	0xfffee0c0

08007558 <SDMMC_CmdAppCommand>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007558:	4a1c      	ldr	r2, [pc, #112]	; (80075cc <SDMMC_CmdAppCommand+0x74>)
 800755a:	4b1d      	ldr	r3, [pc, #116]	; (80075d0 <SDMMC_CmdAppCommand+0x78>)
{
 800755c:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800755e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007560:	f241 1437 	movw	r4, #4407	; 0x1137
  SDMMCx->ARG = Command->Argument;
 8007564:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007566:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800756a:	68c1      	ldr	r1, [r0, #12]
 800756c:	4d19      	ldr	r5, [pc, #100]	; (80075d4 <SDMMC_CmdAppCommand+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800756e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007572:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007574:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007576:	4918      	ldr	r1, [pc, #96]	; (80075d8 <SDMMC_CmdAppCommand+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007578:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800757c:	432c      	orrs	r4, r5
 800757e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007580:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007584:	d312      	bcc.n	80075ac <SDMMC_CmdAppCommand+0x54>
    sta_reg = SDMMCx->STA;
 8007586:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007588:	420a      	tst	r2, r1
 800758a:	d0f9      	beq.n	8007580 <SDMMC_CmdAppCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800758c:	0494      	lsls	r4, r2, #18
 800758e:	d4f7      	bmi.n	8007580 <SDMMC_CmdAppCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007590:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007592:	075a      	lsls	r2, r3, #29
 8007594:	d413      	bmi.n	80075be <SDMMC_CmdAppCommand+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007596:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007598:	07db      	lsls	r3, r3, #31
 800759a:	d40b      	bmi.n	80075b4 <SDMMC_CmdAppCommand+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800759c:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <SDMMC_CmdAppCommand+0x84>)
 800759e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80075a0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b37      	cmp	r3, #55	; 0x37
 80075a6:	d00e      	beq.n	80075c6 <SDMMC_CmdAppCommand+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075a8:	2001      	movs	r0, #1
  return errorstate;
 80075aa:	e001      	b.n	80075b0 <SDMMC_CmdAppCommand+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80075ac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80075b0:	bc30      	pop	{r4, r5}
 80075b2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80075b4:	2301      	movs	r3, #1
 80075b6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075b8:	4618      	mov	r0, r3
}
 80075ba:	bc30      	pop	{r4, r5}
 80075bc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80075be:	2304      	movs	r3, #4
 80075c0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80075c2:	4618      	mov	r0, r3
 80075c4:	e7f4      	b.n	80075b0 <SDMMC_CmdAppCommand+0x58>
}
 80075c6:	bc30      	pop	{r4, r5}
 80075c8:	f7ff bcac 	b.w	8006f24 <SDMMC_GetCmdResp1.part.2>
 80075cc:	20000018 	.word	0x20000018
 80075d0:	10624dd3 	.word	0x10624dd3
 80075d4:	fffee0c0 	.word	0xfffee0c0
 80075d8:	00200045 	.word	0x00200045
 80075dc:	002000c5 	.word	0x002000c5

080075e0 <SDMMC_CmdAppOperCommand>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075e0:	4a15      	ldr	r2, [pc, #84]	; (8007638 <SDMMC_CmdAppOperCommand+0x58>)
 80075e2:	4b16      	ldr	r3, [pc, #88]	; (800763c <SDMMC_CmdAppOperCommand+0x5c>)
{
 80075e4:	b430      	push	{r4, r5}
 80075e6:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075e8:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80075ea:	f241 1029 	movw	r0, #4393	; 0x1129
  SDMMCx->ARG = Command->Argument;
 80075ee:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075f0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80075f4:	68e5      	ldr	r5, [r4, #12]
 80075f6:	4912      	ldr	r1, [pc, #72]	; (8007640 <SDMMC_CmdAppOperCommand+0x60>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80075fc:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80075fe:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007600:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007604:	4308      	orrs	r0, r1
 8007606:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 8007608:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800760c:	d30d      	bcc.n	800762a <SDMMC_CmdAppOperCommand+0x4a>
    sta_reg = SDMMCx->STA;
 800760e:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007610:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007614:	d0f8      	beq.n	8007608 <SDMMC_CmdAppOperCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007616:	0492      	lsls	r2, r2, #18
 8007618:	d4f6      	bmi.n	8007608 <SDMMC_CmdAppOperCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800761a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800761c:	f010 0004 	ands.w	r0, r0, #4
 8007620:	d107      	bne.n	8007632 <SDMMC_CmdAppOperCommand+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007622:	4b08      	ldr	r3, [pc, #32]	; (8007644 <SDMMC_CmdAppOperCommand+0x64>)
 8007624:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8007626:	bc30      	pop	{r4, r5}
 8007628:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800762a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800762e:	bc30      	pop	{r4, r5}
 8007630:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007632:	2004      	movs	r0, #4
 8007634:	63a0      	str	r0, [r4, #56]	; 0x38
 8007636:	e7fa      	b.n	800762e <SDMMC_CmdAppOperCommand+0x4e>
 8007638:	20000018 	.word	0x20000018
 800763c:	10624dd3 	.word	0x10624dd3
 8007640:	fffee0c0 	.word	0xfffee0c0
 8007644:	002000c5 	.word	0x002000c5

08007648 <SDMMC_CmdBusWidth>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007648:	4a1c      	ldr	r2, [pc, #112]	; (80076bc <SDMMC_CmdBusWidth+0x74>)
 800764a:	4b1d      	ldr	r3, [pc, #116]	; (80076c0 <SDMMC_CmdBusWidth+0x78>)
{
 800764c:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800764e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007650:	f241 1406 	movw	r4, #4358	; 0x1106
  SDMMCx->ARG = Command->Argument;
 8007654:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007656:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800765a:	68c1      	ldr	r1, [r0, #12]
 800765c:	4d19      	ldr	r5, [pc, #100]	; (80076c4 <SDMMC_CmdBusWidth+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800765e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007662:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007664:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007666:	4918      	ldr	r1, [pc, #96]	; (80076c8 <SDMMC_CmdBusWidth+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007668:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800766c:	432c      	orrs	r4, r5
 800766e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007670:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007674:	d312      	bcc.n	800769c <SDMMC_CmdBusWidth+0x54>
    sta_reg = SDMMCx->STA;
 8007676:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007678:	420a      	tst	r2, r1
 800767a:	d0f9      	beq.n	8007670 <SDMMC_CmdBusWidth+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800767c:	0494      	lsls	r4, r2, #18
 800767e:	d4f7      	bmi.n	8007670 <SDMMC_CmdBusWidth+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007680:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007682:	075a      	lsls	r2, r3, #29
 8007684:	d413      	bmi.n	80076ae <SDMMC_CmdBusWidth+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007686:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007688:	07db      	lsls	r3, r3, #31
 800768a:	d40b      	bmi.n	80076a4 <SDMMC_CmdBusWidth+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800768c:	4b0f      	ldr	r3, [pc, #60]	; (80076cc <SDMMC_CmdBusWidth+0x84>)
 800768e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007690:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b06      	cmp	r3, #6
 8007696:	d00e      	beq.n	80076b6 <SDMMC_CmdBusWidth+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007698:	2001      	movs	r0, #1
  return errorstate;
 800769a:	e001      	b.n	80076a0 <SDMMC_CmdBusWidth+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800769c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80076a0:	bc30      	pop	{r4, r5}
 80076a2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80076a4:	2301      	movs	r3, #1
 80076a6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076a8:	4618      	mov	r0, r3
}
 80076aa:	bc30      	pop	{r4, r5}
 80076ac:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076ae:	2304      	movs	r3, #4
 80076b0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076b2:	4618      	mov	r0, r3
 80076b4:	e7f4      	b.n	80076a0 <SDMMC_CmdBusWidth+0x58>
}
 80076b6:	bc30      	pop	{r4, r5}
 80076b8:	f7ff bc34 	b.w	8006f24 <SDMMC_GetCmdResp1.part.2>
 80076bc:	20000018 	.word	0x20000018
 80076c0:	10624dd3 	.word	0x10624dd3
 80076c4:	fffee0c0 	.word	0xfffee0c0
 80076c8:	00200045 	.word	0x00200045
 80076cc:	002000c5 	.word	0x002000c5

080076d0 <SDMMC_CmdSendSCR>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076d0:	4a1d      	ldr	r2, [pc, #116]	; (8007748 <SDMMC_CmdSendSCR+0x78>)
  SDMMCx->ARG = Command->Argument;
 80076d2:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076d4:	4b1d      	ldr	r3, [pc, #116]	; (800774c <SDMMC_CmdSendSCR+0x7c>)
{
 80076d6:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076d8:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076da:	f241 1433 	movw	r4, #4403	; 0x1133
  SDMMCx->ARG = Command->Argument;
 80076de:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076e0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076e4:	68c1      	ldr	r1, [r0, #12]
 80076e6:	4d1a      	ldr	r5, [pc, #104]	; (8007750 <SDMMC_CmdSendSCR+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80076ec:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076ee:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80076f0:	4918      	ldr	r1, [pc, #96]	; (8007754 <SDMMC_CmdSendSCR+0x84>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076f2:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076f6:	432c      	orrs	r4, r5
 80076f8:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80076fa:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80076fe:	d312      	bcc.n	8007726 <SDMMC_CmdSendSCR+0x56>
    sta_reg = SDMMCx->STA;
 8007700:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007702:	420a      	tst	r2, r1
 8007704:	d0f9      	beq.n	80076fa <SDMMC_CmdSendSCR+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007706:	0494      	lsls	r4, r2, #18
 8007708:	d4f7      	bmi.n	80076fa <SDMMC_CmdSendSCR+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800770a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800770c:	075a      	lsls	r2, r3, #29
 800770e:	d413      	bmi.n	8007738 <SDMMC_CmdSendSCR+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007710:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007712:	07db      	lsls	r3, r3, #31
 8007714:	d40b      	bmi.n	800772e <SDMMC_CmdSendSCR+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007716:	4b10      	ldr	r3, [pc, #64]	; (8007758 <SDMMC_CmdSendSCR+0x88>)
 8007718:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800771a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b33      	cmp	r3, #51	; 0x33
 8007720:	d00e      	beq.n	8007740 <SDMMC_CmdSendSCR+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007722:	2001      	movs	r0, #1
  return errorstate;
 8007724:	e001      	b.n	800772a <SDMMC_CmdSendSCR+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8007726:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800772a:	bc30      	pop	{r4, r5}
 800772c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800772e:	2301      	movs	r3, #1
 8007730:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007732:	4618      	mov	r0, r3
}
 8007734:	bc30      	pop	{r4, r5}
 8007736:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007738:	2304      	movs	r3, #4
 800773a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800773c:	4618      	mov	r0, r3
 800773e:	e7f4      	b.n	800772a <SDMMC_CmdSendSCR+0x5a>
}
 8007740:	bc30      	pop	{r4, r5}
 8007742:	f7ff bbef 	b.w	8006f24 <SDMMC_GetCmdResp1.part.2>
 8007746:	bf00      	nop
 8007748:	20000018 	.word	0x20000018
 800774c:	10624dd3 	.word	0x10624dd3
 8007750:	fffee0c0 	.word	0xfffee0c0
 8007754:	00200045 	.word	0x00200045
 8007758:	002000c5 	.word	0x002000c5

0800775c <SDMMC_CmdSendCID>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800775c:	4a19      	ldr	r2, [pc, #100]	; (80077c4 <SDMMC_CmdSendCID+0x68>)
{
 800775e:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007760:	4b19      	ldr	r3, [pc, #100]	; (80077c8 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007762:	f241 3002 	movw	r0, #4866	; 0x1302
{
 8007766:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8007768:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800776a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800776c:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800776e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007772:	68cd      	ldr	r5, [r1, #12]
 8007774:	4c15      	ldr	r4, [pc, #84]	; (80077cc <SDMMC_CmdSendCID+0x70>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007776:	f241 3388 	movw	r3, #5000	; 0x1388
 800777a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800777c:	402c      	ands	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800777e:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007782:	4320      	orrs	r0, r4
 8007784:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 8007786:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800778a:	d310      	bcc.n	80077ae <SDMMC_CmdSendCID+0x52>
    sta_reg = SDMMCx->STA;
 800778c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800778e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007792:	d0f8      	beq.n	8007786 <SDMMC_CmdSendCID+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007794:	0492      	lsls	r2, r2, #18
 8007796:	d4f6      	bmi.n	8007786 <SDMMC_CmdSendCID+0x2a>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007798:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800779a:	075b      	lsls	r3, r3, #29
 800779c:	d40f      	bmi.n	80077be <SDMMC_CmdSendCID+0x62>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800779e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80077a0:	f010 0001 	ands.w	r0, r0, #1
 80077a4:	d107      	bne.n	80077b6 <SDMMC_CmdSendCID+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80077a6:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <SDMMC_CmdSendCID+0x74>)
 80077a8:	638b      	str	r3, [r1, #56]	; 0x38
}
 80077aa:	bc30      	pop	{r4, r5}
 80077ac:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80077ae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80077b2:	bc30      	pop	{r4, r5}
 80077b4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80077b6:	2001      	movs	r0, #1
 80077b8:	6388      	str	r0, [r1, #56]	; 0x38
}
 80077ba:	bc30      	pop	{r4, r5}
 80077bc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077be:	2004      	movs	r0, #4
 80077c0:	6388      	str	r0, [r1, #56]	; 0x38
 80077c2:	e7f6      	b.n	80077b2 <SDMMC_CmdSendCID+0x56>
 80077c4:	20000018 	.word	0x20000018
 80077c8:	10624dd3 	.word	0x10624dd3
 80077cc:	fffee0c0 	.word	0xfffee0c0
 80077d0:	002000c5 	.word	0x002000c5

080077d4 <SDMMC_CmdSendCSD>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077d4:	4a19      	ldr	r2, [pc, #100]	; (800783c <SDMMC_CmdSendCSD+0x68>)
 80077d6:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <SDMMC_CmdSendCSD+0x6c>)
{
 80077d8:	b430      	push	{r4, r5}
 80077da:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077dc:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077de:	f241 3009 	movw	r0, #4873	; 0x1309
  SDMMCx->ARG = Command->Argument;
 80077e2:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077e4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077e8:	68e5      	ldr	r5, [r4, #12]
 80077ea:	4916      	ldr	r1, [pc, #88]	; (8007844 <SDMMC_CmdSendCSD+0x70>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80077f0:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077f2:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077f4:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077f8:	4308      	orrs	r0, r1
 80077fa:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 80077fc:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007800:	d310      	bcc.n	8007824 <SDMMC_CmdSendCSD+0x50>
    sta_reg = SDMMCx->STA;
 8007802:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007804:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007808:	d0f8      	beq.n	80077fc <SDMMC_CmdSendCSD+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800780a:	0492      	lsls	r2, r2, #18
 800780c:	d4f6      	bmi.n	80077fc <SDMMC_CmdSendCSD+0x28>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800780e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007810:	075b      	lsls	r3, r3, #29
 8007812:	d40f      	bmi.n	8007834 <SDMMC_CmdSendCSD+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007814:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007816:	f010 0001 	ands.w	r0, r0, #1
 800781a:	d107      	bne.n	800782c <SDMMC_CmdSendCSD+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800781c:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <SDMMC_CmdSendCSD+0x74>)
 800781e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8007820:	bc30      	pop	{r4, r5}
 8007822:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007824:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007828:	bc30      	pop	{r4, r5}
 800782a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800782c:	2001      	movs	r0, #1
 800782e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007830:	bc30      	pop	{r4, r5}
 8007832:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007834:	2004      	movs	r0, #4
 8007836:	63a0      	str	r0, [r4, #56]	; 0x38
 8007838:	e7f6      	b.n	8007828 <SDMMC_CmdSendCSD+0x54>
 800783a:	bf00      	nop
 800783c:	20000018 	.word	0x20000018
 8007840:	10624dd3 	.word	0x10624dd3
 8007844:	fffee0c0 	.word	0xfffee0c0
 8007848:	002000c5 	.word	0x002000c5

0800784c <SDMMC_CmdSetRelAdd>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800784c:	4b25      	ldr	r3, [pc, #148]	; (80078e4 <SDMMC_CmdSetRelAdd+0x98>)
 800784e:	4a26      	ldr	r2, [pc, #152]	; (80078e8 <SDMMC_CmdSetRelAdd+0x9c>)
{
 8007850:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 8007852:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007854:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007856:	4d25      	ldr	r5, [pc, #148]	; (80078ec <SDMMC_CmdSetRelAdd+0xa0>)
  SDMMCx->ARG = Command->Argument;
 8007858:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800785a:	f241 1403 	movw	r4, #4355	; 0x1103
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800785e:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007862:	68c6      	ldr	r6, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007864:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007866:	4035      	ands	r5, r6
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007868:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800786c:	432c      	orrs	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800786e:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007872:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007874:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007878:	d311      	bcc.n	800789e <SDMMC_CmdSetRelAdd+0x52>
    sta_reg = SDMMCx->STA;
 800787a:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800787c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007880:	d0f8      	beq.n	8007874 <SDMMC_CmdSetRelAdd+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007882:	0496      	lsls	r6, r2, #18
 8007884:	d4f6      	bmi.n	8007874 <SDMMC_CmdSetRelAdd+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007886:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007888:	075d      	lsls	r5, r3, #29
 800788a:	d411      	bmi.n	80078b0 <SDMMC_CmdSetRelAdd+0x64>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800788c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800788e:	07dc      	lsls	r4, r3, #31
 8007890:	d409      	bmi.n	80078a6 <SDMMC_CmdSetRelAdd+0x5a>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007892:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b03      	cmp	r3, #3
 8007898:	d00e      	beq.n	80078b8 <SDMMC_CmdSetRelAdd+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800789a:	2001      	movs	r0, #1
 800789c:	e001      	b.n	80078a2 <SDMMC_CmdSetRelAdd+0x56>
      return SDMMC_ERROR_TIMEOUT;
 800789e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80078a2:	bc70      	pop	{r4, r5, r6}
 80078a4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078a6:	2301      	movs	r3, #1
 80078a8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078aa:	4618      	mov	r0, r3
}
 80078ac:	bc70      	pop	{r4, r5, r6}
 80078ae:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80078b0:	2304      	movs	r3, #4
 80078b2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078b4:	4618      	mov	r0, r3
 80078b6:	e7f4      	b.n	80078a2 <SDMMC_CmdSetRelAdd+0x56>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078b8:	4b0d      	ldr	r3, [pc, #52]	; (80078f0 <SDMMC_CmdSetRelAdd+0xa4>)
 80078ba:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 80078bc:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80078be:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 80078c2:	d009      	beq.n	80078d8 <SDMMC_CmdSetRelAdd+0x8c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80078c4:	045a      	lsls	r2, r3, #17
 80078c6:	d40a      	bmi.n	80078de <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80078c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80078cc:	bf0c      	ite	eq
 80078ce:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80078d2:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80078d6:	e7e4      	b.n	80078a2 <SDMMC_CmdSetRelAdd+0x56>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80078d8:	0c1b      	lsrs	r3, r3, #16
 80078da:	800b      	strh	r3, [r1, #0]
 80078dc:	e7e1      	b.n	80078a2 <SDMMC_CmdSetRelAdd+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80078de:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80078e2:	e7de      	b.n	80078a2 <SDMMC_CmdSetRelAdd+0x56>
 80078e4:	20000018 	.word	0x20000018
 80078e8:	10624dd3 	.word	0x10624dd3
 80078ec:	fffee0c0 	.word	0xfffee0c0
 80078f0:	002000c5 	.word	0x002000c5

080078f4 <SDMMC_CmdSendStatus>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80078f4:	4a1c      	ldr	r2, [pc, #112]	; (8007968 <SDMMC_CmdSendStatus+0x74>)
 80078f6:	4b1d      	ldr	r3, [pc, #116]	; (800796c <SDMMC_CmdSendStatus+0x78>)
{
 80078f8:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80078fa:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80078fc:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 8007900:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007902:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007906:	68c1      	ldr	r1, [r0, #12]
 8007908:	4d19      	ldr	r5, [pc, #100]	; (8007970 <SDMMC_CmdSendStatus+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800790a:	f241 3388 	movw	r3, #5000	; 0x1388
 800790e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007910:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007912:	4918      	ldr	r1, [pc, #96]	; (8007974 <SDMMC_CmdSendStatus+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007914:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007918:	432c      	orrs	r4, r5
 800791a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800791c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007920:	d312      	bcc.n	8007948 <SDMMC_CmdSendStatus+0x54>
    sta_reg = SDMMCx->STA;
 8007922:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007924:	420a      	tst	r2, r1
 8007926:	d0f9      	beq.n	800791c <SDMMC_CmdSendStatus+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007928:	0494      	lsls	r4, r2, #18
 800792a:	d4f7      	bmi.n	800791c <SDMMC_CmdSendStatus+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800792c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800792e:	075a      	lsls	r2, r3, #29
 8007930:	d413      	bmi.n	800795a <SDMMC_CmdSendStatus+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007932:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007934:	07db      	lsls	r3, r3, #31
 8007936:	d40b      	bmi.n	8007950 <SDMMC_CmdSendStatus+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007938:	4b0f      	ldr	r3, [pc, #60]	; (8007978 <SDMMC_CmdSendStatus+0x84>)
 800793a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800793c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b0d      	cmp	r3, #13
 8007942:	d00e      	beq.n	8007962 <SDMMC_CmdSendStatus+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007944:	2001      	movs	r0, #1
  return errorstate;
 8007946:	e001      	b.n	800794c <SDMMC_CmdSendStatus+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007948:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800794c:	bc30      	pop	{r4, r5}
 800794e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007950:	2301      	movs	r3, #1
 8007952:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007954:	4618      	mov	r0, r3
}
 8007956:	bc30      	pop	{r4, r5}
 8007958:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800795a:	2304      	movs	r3, #4
 800795c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800795e:	4618      	mov	r0, r3
 8007960:	e7f4      	b.n	800794c <SDMMC_CmdSendStatus+0x58>
}
 8007962:	bc30      	pop	{r4, r5}
 8007964:	f7ff bade 	b.w	8006f24 <SDMMC_GetCmdResp1.part.2>
 8007968:	20000018 	.word	0x20000018
 800796c:	10624dd3 	.word	0x10624dd3
 8007970:	fffee0c0 	.word	0xfffee0c0
 8007974:	00200045 	.word	0x00200045
 8007978:	002000c5 	.word	0x002000c5

0800797c <SDMMC_CmdStatusRegister>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800797c:	4a1d      	ldr	r2, [pc, #116]	; (80079f4 <SDMMC_CmdStatusRegister+0x78>)
  SDMMCx->ARG = Command->Argument;
 800797e:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007980:	4b1d      	ldr	r3, [pc, #116]	; (80079f8 <SDMMC_CmdStatusRegister+0x7c>)
{
 8007982:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007984:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007986:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 800798a:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800798c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007990:	68c1      	ldr	r1, [r0, #12]
 8007992:	4d1a      	ldr	r5, [pc, #104]	; (80079fc <SDMMC_CmdStatusRegister+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007994:	f241 3388 	movw	r3, #5000	; 0x1388
 8007998:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800799a:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800799c:	4918      	ldr	r1, [pc, #96]	; (8007a00 <SDMMC_CmdStatusRegister+0x84>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800799e:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079a2:	432c      	orrs	r4, r5
 80079a4:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80079a6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80079aa:	d312      	bcc.n	80079d2 <SDMMC_CmdStatusRegister+0x56>
    sta_reg = SDMMCx->STA;
 80079ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80079ae:	420a      	tst	r2, r1
 80079b0:	d0f9      	beq.n	80079a6 <SDMMC_CmdStatusRegister+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80079b2:	0494      	lsls	r4, r2, #18
 80079b4:	d4f7      	bmi.n	80079a6 <SDMMC_CmdStatusRegister+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079b8:	075a      	lsls	r2, r3, #29
 80079ba:	d413      	bmi.n	80079e4 <SDMMC_CmdStatusRegister+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079be:	07db      	lsls	r3, r3, #31
 80079c0:	d40b      	bmi.n	80079da <SDMMC_CmdStatusRegister+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079c2:	4b10      	ldr	r3, [pc, #64]	; (8007a04 <SDMMC_CmdStatusRegister+0x88>)
 80079c4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80079c6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b0d      	cmp	r3, #13
 80079cc:	d00e      	beq.n	80079ec <SDMMC_CmdStatusRegister+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079ce:	2001      	movs	r0, #1
  return errorstate;
 80079d0:	e001      	b.n	80079d6 <SDMMC_CmdStatusRegister+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 80079d2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80079d6:	bc30      	pop	{r4, r5}
 80079d8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80079da:	2301      	movs	r3, #1
 80079dc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079de:	4618      	mov	r0, r3
}
 80079e0:	bc30      	pop	{r4, r5}
 80079e2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079e4:	2304      	movs	r3, #4
 80079e6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079e8:	4618      	mov	r0, r3
 80079ea:	e7f4      	b.n	80079d6 <SDMMC_CmdStatusRegister+0x5a>
}
 80079ec:	bc30      	pop	{r4, r5}
 80079ee:	f7ff ba99 	b.w	8006f24 <SDMMC_GetCmdResp1.part.2>
 80079f2:	bf00      	nop
 80079f4:	20000018 	.word	0x20000018
 80079f8:	10624dd3 	.word	0x10624dd3
 80079fc:	fffee0c0 	.word	0xfffee0c0
 8007a00:	00200045 	.word	0x00200045
 8007a04:	002000c5 	.word	0x002000c5

08007a08 <SDMMC_CmdVoltageSwitch>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a08:	4a1d      	ldr	r2, [pc, #116]	; (8007a80 <SDMMC_CmdVoltageSwitch+0x78>)
  SDMMCx->ARG = Command->Argument;
 8007a0a:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a0c:	4b1d      	ldr	r3, [pc, #116]	; (8007a84 <SDMMC_CmdVoltageSwitch+0x7c>)
{
 8007a0e:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a10:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007a12:	f241 140b 	movw	r4, #4363	; 0x110b
  SDMMCx->ARG = Command->Argument;
 8007a16:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a18:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007a1c:	68c1      	ldr	r1, [r0, #12]
 8007a1e:	4d1a      	ldr	r5, [pc, #104]	; (8007a88 <SDMMC_CmdVoltageSwitch+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a20:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a24:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007a26:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007a28:	4918      	ldr	r1, [pc, #96]	; (8007a8c <SDMMC_CmdVoltageSwitch+0x84>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a2a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007a2e:	432c      	orrs	r4, r5
 8007a30:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007a32:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007a36:	d312      	bcc.n	8007a5e <SDMMC_CmdVoltageSwitch+0x56>
    sta_reg = SDMMCx->STA;
 8007a38:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a3a:	420a      	tst	r2, r1
 8007a3c:	d0f9      	beq.n	8007a32 <SDMMC_CmdVoltageSwitch+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007a3e:	0494      	lsls	r4, r2, #18
 8007a40:	d4f7      	bmi.n	8007a32 <SDMMC_CmdVoltageSwitch+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a44:	075a      	lsls	r2, r3, #29
 8007a46:	d413      	bmi.n	8007a70 <SDMMC_CmdVoltageSwitch+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a4a:	07db      	lsls	r3, r3, #31
 8007a4c:	d40b      	bmi.n	8007a66 <SDMMC_CmdVoltageSwitch+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a4e:	4b10      	ldr	r3, [pc, #64]	; (8007a90 <SDMMC_CmdVoltageSwitch+0x88>)
 8007a50:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007a52:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b0b      	cmp	r3, #11
 8007a58:	d00e      	beq.n	8007a78 <SDMMC_CmdVoltageSwitch+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a5a:	2001      	movs	r0, #1
  return errorstate;
 8007a5c:	e001      	b.n	8007a62 <SDMMC_CmdVoltageSwitch+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8007a5e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007a62:	bc30      	pop	{r4, r5}
 8007a64:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a66:	2301      	movs	r3, #1
 8007a68:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a6a:	4618      	mov	r0, r3
}
 8007a6c:	bc30      	pop	{r4, r5}
 8007a6e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a70:	2304      	movs	r3, #4
 8007a72:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a74:	4618      	mov	r0, r3
 8007a76:	e7f4      	b.n	8007a62 <SDMMC_CmdVoltageSwitch+0x5a>
}
 8007a78:	bc30      	pop	{r4, r5}
 8007a7a:	f7ff ba53 	b.w	8006f24 <SDMMC_GetCmdResp1.part.2>
 8007a7e:	bf00      	nop
 8007a80:	20000018 	.word	0x20000018
 8007a84:	10624dd3 	.word	0x10624dd3
 8007a88:	fffee0c0 	.word	0xfffee0c0
 8007a8c:	00200045 	.word	0x00200045
 8007a90:	002000c5 	.word	0x002000c5

08007a94 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007a94:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <disk_status+0x10>)
 8007a96:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007a9a:	4403      	add	r3, r0
 8007a9c:	6852      	ldr	r2, [r2, #4]
 8007a9e:	7a18      	ldrb	r0, [r3, #8]
 8007aa0:	6853      	ldr	r3, [r2, #4]
 8007aa2:	4718      	bx	r3
 8007aa4:	200002cc 	.word	0x200002cc

08007aa8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8007aa8:	4b08      	ldr	r3, [pc, #32]	; (8007acc <disk_initialize+0x24>)
 8007aaa:	5c1a      	ldrb	r2, [r3, r0]
 8007aac:	b95a      	cbnz	r2, 8007ac6 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007aae:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007ab2:	1819      	adds	r1, r3, r0
{
 8007ab4:	b410      	push	{r4}
    disk.is_initialized[pdrv] = 1;
 8007ab6:	2401      	movs	r4, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007ab8:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 8007aba:	541c      	strb	r4, [r3, r0]
  }
  return stat;
}
 8007abc:	f85d 4b04 	ldr.w	r4, [sp], #4
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007ac0:	7a08      	ldrb	r0, [r1, #8]
 8007ac2:	6813      	ldr	r3, [r2, #0]
 8007ac4:	4718      	bx	r3
}
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	200002cc 	.word	0x200002cc

08007ad0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007ad0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007ad2:	4c05      	ldr	r4, [pc, #20]	; (8007ae8 <disk_read+0x18>)
 8007ad4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007ad8:	4404      	add	r4, r0
 8007ada:	686d      	ldr	r5, [r5, #4]
 8007adc:	7a20      	ldrb	r0, [r4, #8]
 8007ade:	68ac      	ldr	r4, [r5, #8]
 8007ae0:	46a4      	mov	ip, r4
  return res;
}
 8007ae2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007ae4:	4760      	bx	ip
 8007ae6:	bf00      	nop
 8007ae8:	200002cc 	.word	0x200002cc

08007aec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007aec:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007aee:	4c05      	ldr	r4, [pc, #20]	; (8007b04 <disk_write+0x18>)
 8007af0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007af4:	4404      	add	r4, r0
 8007af6:	686d      	ldr	r5, [r5, #4]
 8007af8:	7a20      	ldrb	r0, [r4, #8]
 8007afa:	68ec      	ldr	r4, [r5, #12]
 8007afc:	46a4      	mov	ip, r4
  return res;
}
 8007afe:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007b00:	4760      	bx	ip
 8007b02:	bf00      	nop
 8007b04:	200002cc 	.word	0x200002cc

08007b08 <move_window.part.5>:
}
#endif


static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8007b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007b0c:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8007b0e:	4604      	mov	r4, r0
 8007b10:	460e      	mov	r6, r1
 8007b12:	f100 0734 	add.w	r7, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007b16:	b96b      	cbnz	r3, 8007b34 <move_window.part.5+0x2c>
	if (sector != fs->winsect) {	/* Window offset changed? */
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007b18:	4632      	mov	r2, r6
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	7860      	ldrb	r0, [r4, #1]
 8007b20:	f7ff ffd6 	bl	8007ad0 <disk_read>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	bf1a      	itte	ne
 8007b28:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
 8007b2c:	2001      	movne	r0, #1
 8007b2e:	2000      	moveq	r0, #0
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
 8007b30:	6326      	str	r6, [r4, #48]	; 0x30
 8007b32:	e01f      	b.n	8007b74 <move_window.part.5+0x6c>
		wsect = fs->winsect;	/* Current sector number */
 8007b34:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007b36:	2301      	movs	r3, #1
 8007b38:	4639      	mov	r1, r7
 8007b3a:	7840      	ldrb	r0, [r0, #1]
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	f7ff ffd5 	bl	8007aec <disk_write>
 8007b42:	b9b0      	cbnz	r0, 8007b72 <move_window.part.5+0x6a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b46:	69e2      	ldr	r2, [r4, #28]
 8007b48:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 8007b4a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d2e3      	bcs.n	8007b18 <move_window.part.5+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b50:	f894 8002 	ldrb.w	r8, [r4, #2]
 8007b54:	f1b8 0f01 	cmp.w	r8, #1
 8007b58:	7860      	ldrb	r0, [r4, #1]
 8007b5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8007b5e:	f04f 0301 	mov.w	r3, #1
 8007b62:	4639      	mov	r1, r7
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b64:	d9d8      	bls.n	8007b18 <move_window.part.5+0x10>
					wsect += fs->fsize;
 8007b66:	69e2      	ldr	r2, [r4, #28]
 8007b68:	4415      	add	r5, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8007b6a:	462a      	mov	r2, r5
 8007b6c:	f7ff ffbe 	bl	8007aec <disk_write>
 8007b70:	e7f0      	b.n	8007b54 <move_window.part.5+0x4c>
			res = FR_DISK_ERR;
 8007b72:	2001      	movs	r0, #1
		}
	}
	return res;
}
 8007b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007b78 <put_fat.part.7>:
/*-----------------------------------------------------------------------*/
/* FAT access - Change value of a FAT entry                              */
/*-----------------------------------------------------------------------*/

static
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8007b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
		switch (fs->fs_type) {
 8007b7c:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8007b7e:	4604      	mov	r4, r0
 8007b80:	460d      	mov	r5, r1
 8007b82:	4617      	mov	r7, r2
		switch (fs->fs_type) {
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	f000 808b 	beq.w	8007ca0 <put_fat.part.7+0x128>
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d062      	beq.n	8007c54 <put_fat.part.7+0xdc>
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d002      	beq.n	8007b98 <put_fat.part.7+0x20>
	FRESULT res = FR_INT_ERR;
 8007b92:	2002      	movs	r0, #2
			fs->wflag = 1;
			break;
		}
	}
	return res;
}
 8007b94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bc = (UINT)clst; bc += bc / 2;
 8007b98:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b9c:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b9e:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8007ba2:	f100 0634 	add.w	r6, r0, #52	; 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007ba6:	eb02 2958 	add.w	r9, r2, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007baa:	45d1      	cmp	r9, sl
 8007bac:	f040 80f0 	bne.w	8007d90 <put_fat.part.7+0x218>
			p = fs->win + bc++ % SS(fs);
 8007bb0:	f108 0901 	add.w	r9, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007bb4:	f015 0a01 	ands.w	sl, r5, #1
			p = fs->win + bc++ % SS(fs);
 8007bb8:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8007bbc:	ea4f 2259 	mov.w	r2, r9, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007bc0:	f000 8116 	beq.w	8007df0 <put_fat.part.7+0x278>
 8007bc4:	f816 3008 	ldrb.w	r3, [r6, r8]
			fs->wflag = 1;
 8007bc8:	2101      	movs	r1, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007bca:	f003 030f 	and.w	r3, r3, #15
 8007bce:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8007bd2:	f806 3008 	strb.w	r3, [r6, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007bd6:	6a65      	ldr	r5, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bd8:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007bdc:	4415      	add	r5, r2
			fs->wflag = 1;
 8007bde:	70e1      	strb	r1, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007be0:	4545      	cmp	r5, r8
 8007be2:	f000 8122 	beq.w	8007e2a <put_fat.part.7+0x2b2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007be6:	2301      	movs	r3, #1
 8007be8:	4642      	mov	r2, r8
 8007bea:	4631      	mov	r1, r6
 8007bec:	7860      	ldrb	r0, [r4, #1]
 8007bee:	f7ff ff7d 	bl	8007aec <disk_write>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	f040 80f9 	bne.w	8007dea <put_fat.part.7+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007bf8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007bfa:	69e3      	ldr	r3, [r4, #28]
 8007bfc:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8007c00:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d212      	bcs.n	8007c2c <put_fat.part.7+0xb4>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007c06:	f894 b002 	ldrb.w	fp, [r4, #2]
 8007c0a:	f1bb 0f01 	cmp.w	fp, #1
 8007c0e:	d801      	bhi.n	8007c14 <put_fat.part.7+0x9c>
 8007c10:	e00c      	b.n	8007c2c <put_fat.part.7+0xb4>
 8007c12:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8007c14:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007c16:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	4642      	mov	r2, r8
 8007c20:	7860      	ldrb	r0, [r4, #1]
 8007c22:	f7ff ff63 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007c26:	f1bb 0f01 	cmp.w	fp, #1
 8007c2a:	d1f2      	bne.n	8007c12 <put_fat.part.7+0x9a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	462a      	mov	r2, r5
 8007c30:	4631      	mov	r1, r6
 8007c32:	7860      	ldrb	r0, [r4, #1]
 8007c34:	f7ff ff4c 	bl	8007ad0 <disk_read>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	f040 80a3 	bne.w	8007d84 <put_fat.part.7+0x20c>
			p = fs->win + bc % SS(fs);
 8007c3e:	f3c9 0908 	ubfx	r9, r9, #0, #9
			fs->winsect = sector;
 8007c42:	6325      	str	r5, [r4, #48]	; 0x30
			p = fs->win + bc % SS(fs);
 8007c44:	444e      	add	r6, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007c46:	f1ba 0f00 	cmp.w	sl, #0
 8007c4a:	f000 80df 	beq.w	8007e0c <put_fat.part.7+0x294>
 8007c4e:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8007c52:	e0e1      	b.n	8007e18 <put_fat.part.7+0x2a0>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007c54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007c56:	f100 0634 	add.w	r6, r0, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c5a:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007c5e:	eb03 18d1 	add.w	r8, r3, r1, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c62:	45c8      	cmp	r8, r9
 8007c64:	d161      	bne.n	8007d2a <put_fat.part.7+0x1b2>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007c66:	00ad      	lsls	r5, r5, #2
 8007c68:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
	*ptr++ = (BYTE)val; val >>= 8;
 8007c6c:	2300      	movs	r3, #0
			fs->wflag = 1;
 8007c6e:	2101      	movs	r1, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007c70:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
			fs->wflag = 1;
 8007c74:	4618      	mov	r0, r3
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007c76:	1972      	adds	r2, r6, r5
	rv = rv << 8 | ptr[2];
 8007c78:	8852      	ldrh	r2, [r2, #2]
	rv = rv << 8 | ptr[0];
 8007c7a:	0412      	lsls	r2, r2, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007c7c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007c80:	433a      	orrs	r2, r7
	*ptr++ = (BYTE)val; val >>= 8;
 8007c82:	0a17      	lsrs	r7, r2, #8
 8007c84:	f362 0307 	bfi	r3, r2, #0, #8
 8007c88:	f367 230f 	bfi	r3, r7, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007c8c:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007c8e:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8007c90:	f367 4317 	bfi	r3, r7, #16, #8
 8007c94:	f362 631f 	bfi	r3, r2, #24, #8
 8007c98:	5173      	str	r3, [r6, r5]
			fs->wflag = 1;
 8007c9a:	70e1      	strb	r1, [r4, #3]
}
 8007c9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007ca0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ca2:	f100 0634 	add.w	r6, r0, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ca6:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007caa:	eb03 2811 	add.w	r8, r3, r1, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007cae:	45c8      	cmp	r8, r9
 8007cb0:	d02e      	beq.n	8007d10 <put_fat.part.7+0x198>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007cb2:	78c3      	ldrb	r3, [r0, #3]
 8007cb4:	7840      	ldrb	r0, [r0, #1]
 8007cb6:	b313      	cbz	r3, 8007cfe <put_fat.part.7+0x186>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007cb8:	2301      	movs	r3, #1
 8007cba:	464a      	mov	r2, r9
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	f7ff ff15 	bl	8007aec <disk_write>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	f040 8091 	bne.w	8007dea <put_fat.part.7+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007cc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007cca:	69e3      	ldr	r3, [r4, #28]
 8007ccc:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8007cd0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d212      	bcs.n	8007cfc <put_fat.part.7+0x184>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007cd6:	f894 a002 	ldrb.w	sl, [r4, #2]
 8007cda:	f1ba 0f01 	cmp.w	sl, #1
 8007cde:	d801      	bhi.n	8007ce4 <put_fat.part.7+0x16c>
 8007ce0:	e00c      	b.n	8007cfc <put_fat.part.7+0x184>
 8007ce2:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8007ce4:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ce6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8007cea:	2301      	movs	r3, #1
 8007cec:	4631      	mov	r1, r6
 8007cee:	464a      	mov	r2, r9
 8007cf0:	7860      	ldrb	r0, [r4, #1]
 8007cf2:	f7ff fefb 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007cf6:	f1ba 0f01 	cmp.w	sl, #1
 8007cfa:	d1f2      	bne.n	8007ce2 <put_fat.part.7+0x16a>
 8007cfc:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4642      	mov	r2, r8
 8007d02:	4631      	mov	r1, r6
 8007d04:	f7ff fee4 	bl	8007ad0 <disk_read>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d13b      	bne.n	8007d84 <put_fat.part.7+0x20c>
			fs->winsect = sector;
 8007d0c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007d10:	006d      	lsls	r5, r5, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8007d12:	f3c7 2207 	ubfx	r2, r7, #8, #8
			fs->wflag = 1;
 8007d16:	2301      	movs	r3, #1
 8007d18:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007d1a:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8007d1e:	5577      	strb	r7, [r6, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007d20:	442e      	add	r6, r5
	*ptr++ = (BYTE)val;
 8007d22:	7072      	strb	r2, [r6, #1]
			fs->wflag = 1;
 8007d24:	70e3      	strb	r3, [r4, #3]
}
 8007d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007d2a:	78c3      	ldrb	r3, [r0, #3]
 8007d2c:	7840      	ldrb	r0, [r0, #1]
 8007d2e:	b313      	cbz	r3, 8007d76 <put_fat.part.7+0x1fe>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007d30:	2301      	movs	r3, #1
 8007d32:	464a      	mov	r2, r9
 8007d34:	4631      	mov	r1, r6
 8007d36:	f7ff fed9 	bl	8007aec <disk_write>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d155      	bne.n	8007dea <put_fat.part.7+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007d3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d40:	69e3      	ldr	r3, [r4, #28]
 8007d42:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8007d46:	70e0      	strb	r0, [r4, #3]
 8007d48:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d213      	bcs.n	8007d76 <put_fat.part.7+0x1fe>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007d4e:	f894 a002 	ldrb.w	sl, [r4, #2]
 8007d52:	f1ba 0f01 	cmp.w	sl, #1
 8007d56:	d802      	bhi.n	8007d5e <put_fat.part.7+0x1e6>
 8007d58:	e00d      	b.n	8007d76 <put_fat.part.7+0x1fe>
 8007d5a:	69e3      	ldr	r3, [r4, #28]
 8007d5c:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8007d5e:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007d60:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8007d64:	2301      	movs	r3, #1
 8007d66:	4631      	mov	r1, r6
 8007d68:	464a      	mov	r2, r9
 8007d6a:	f7ff febf 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007d6e:	f1ba 0f01 	cmp.w	sl, #1
 8007d72:	d1f2      	bne.n	8007d5a <put_fat.part.7+0x1e2>
 8007d74:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007d76:	2301      	movs	r3, #1
 8007d78:	4642      	mov	r2, r8
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	f7ff fea8 	bl	8007ad0 <disk_read>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d04f      	beq.n	8007e24 <put_fat.part.7+0x2ac>
			fs->winsect = sector;
 8007d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 8007d88:	2001      	movs	r0, #1
			fs->winsect = sector;
 8007d8a:	6323      	str	r3, [r4, #48]	; 0x30
}
 8007d8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007d90:	78c2      	ldrb	r2, [r0, #3]
 8007d92:	7840      	ldrb	r0, [r0, #1]
 8007d94:	b1fa      	cbz	r2, 8007dd6 <put_fat.part.7+0x25e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007d96:	4652      	mov	r2, sl
 8007d98:	4631      	mov	r1, r6
 8007d9a:	f7ff fea7 	bl	8007aec <disk_write>
 8007d9e:	bb20      	cbnz	r0, 8007dea <put_fat.part.7+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007da0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007da2:	69e3      	ldr	r3, [r4, #28]
 8007da4:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 8007da8:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d212      	bcs.n	8007dd4 <put_fat.part.7+0x25c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007dae:	f894 b002 	ldrb.w	fp, [r4, #2]
 8007db2:	f1bb 0f01 	cmp.w	fp, #1
 8007db6:	d801      	bhi.n	8007dbc <put_fat.part.7+0x244>
 8007db8:	e00c      	b.n	8007dd4 <put_fat.part.7+0x25c>
 8007dba:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8007dbc:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007dbe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4652      	mov	r2, sl
 8007dc8:	7860      	ldrb	r0, [r4, #1]
 8007dca:	f7ff fe8f 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007dce:	f1bb 0f01 	cmp.w	fp, #1
 8007dd2:	d1f2      	bne.n	8007dba <put_fat.part.7+0x242>
 8007dd4:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	464a      	mov	r2, r9
 8007dda:	4631      	mov	r1, r6
 8007ddc:	f7ff fe78 	bl	8007ad0 <disk_read>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d1cf      	bne.n	8007d84 <put_fat.part.7+0x20c>
			fs->winsect = sector;
 8007de4:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8007de8:	e6e2      	b.n	8007bb0 <put_fat.part.7+0x38>
	FRESULT res = FR_INT_ERR;
 8007dea:	2001      	movs	r0, #1
}
 8007dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007df0:	f806 7008 	strb.w	r7, [r6, r8]
			fs->wflag = 1;
 8007df4:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007df6:	6a65      	ldr	r5, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007df8:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007dfc:	4415      	add	r5, r2
			fs->wflag = 1;
 8007dfe:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e00:	45a8      	cmp	r8, r5
 8007e02:	f47f aef0 	bne.w	8007be6 <put_fat.part.7+0x6e>
			p = fs->win + bc % SS(fs);
 8007e06:	f3c9 0908 	ubfx	r9, r9, #0, #9
 8007e0a:	444e      	add	r6, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007e0c:	7833      	ldrb	r3, [r6, #0]
 8007e0e:	f3c7 2203 	ubfx	r2, r7, #8, #4
 8007e12:	f023 070f 	bic.w	r7, r3, #15
 8007e16:	4317      	orrs	r7, r2
			fs->wflag = 1;
 8007e18:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007e1a:	7037      	strb	r7, [r6, #0]
			fs->wflag = 1;
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	70e3      	strb	r3, [r4, #3]
}
 8007e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8007e24:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8007e28:	e71d      	b.n	8007c66 <put_fat.part.7+0xee>
			p = fs->win + bc % SS(fs);
 8007e2a:	f3c9 0908 	ubfx	r9, r9, #0, #9
 8007e2e:	444e      	add	r6, r9
 8007e30:	e70d      	b.n	8007c4e <put_fat.part.7+0xd6>
 8007e32:	bf00      	nop

08007e34 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007e38:	2901      	cmp	r1, #1
{
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	9000      	str	r0, [sp, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007e3e:	d914      	bls.n	8007e6a <remove_chain+0x36>
	FATFS *fs = obj->fs;
 8007e40:	6804      	ldr	r4, [r0, #0]
 8007e42:	460d      	mov	r5, r1
 8007e44:	4606      	mov	r6, r0
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007e46:	69a3      	ldr	r3, [r4, #24]
 8007e48:	428b      	cmp	r3, r1
 8007e4a:	d90e      	bls.n	8007e6a <remove_chain+0x36>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007e4c:	b98a      	cbnz	r2, 8007e72 <remove_chain+0x3e>
 8007e4e:	46a3      	mov	fp, r4
 8007e50:	f104 0a34 	add.w	sl, r4, #52	; 0x34
 8007e54:	465e      	mov	r6, fp
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007e56:	429d      	cmp	r5, r3
 8007e58:	d207      	bcs.n	8007e6a <remove_chain+0x36>
		switch (fs->fs_type) {
 8007e5a:	7833      	ldrb	r3, [r6, #0]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	f000 8106 	beq.w	800806e <remove_chain+0x23a>
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d068      	beq.n	8007f38 <remove_chain+0x104>
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d014      	beq.n	8007e94 <remove_chain+0x60>

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007e6a:	2002      	movs	r0, #2
			}
		}
	}
#endif
	return FR_OK;
}
 8007e6c:	b005      	add	sp, #20
 8007e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d9f9      	bls.n	8007e6a <remove_chain+0x36>
 8007e76:	2a01      	cmp	r2, #1
 8007e78:	d9f7      	bls.n	8007e6a <remove_chain+0x36>
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e82:	f7ff fe79 	bl	8007b78 <put_fat.part.7>
		if (res != FR_OK) return res;
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d1f0      	bne.n	8007e6c <remove_chain+0x38>
 8007e8a:	f8d6 b000 	ldr.w	fp, [r6]
 8007e8e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8007e92:	e7dd      	b.n	8007e50 <remove_chain+0x1c>
			bc = (UINT)clst; bc += bc / 2;
 8007e94:	eb05 0755 	add.w	r7, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e98:	6a72      	ldr	r2, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e9a:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e9e:	eb02 2857 	add.w	r8, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ea2:	45c8      	cmp	r8, r9
 8007ea4:	f040 8127 	bne.w	80080f6 <remove_chain+0x2c2>
			wc = fs->win[bc++ % SS(fs)];
 8007ea8:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8007eac:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007eae:	eb02 2857 	add.w	r8, r2, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8007eb2:	4433      	add	r3, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007eb4:	45c8      	cmp	r8, r9
			wc = fs->win[bc++ % SS(fs)];
 8007eb6:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007eba:	f000 8260 	beq.w	800837e <remove_chain+0x54a>
 8007ebe:	f106 0234 	add.w	r2, r6, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007ec2:	78f3      	ldrb	r3, [r6, #3]
 8007ec4:	7870      	ldrb	r0, [r6, #1]
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	9201      	str	r2, [sp, #4]
 8007eca:	b333      	cbz	r3, 8007f1a <remove_chain+0xe6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007ecc:	2301      	movs	r3, #1
 8007ece:	464a      	mov	r2, r9
 8007ed0:	f7ff fe0c 	bl	8007aec <disk_write>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	f040 816f 	bne.w	80081b8 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007eda:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007edc:	69f3      	ldr	r3, [r6, #28]
 8007ede:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8007ee2:	70f0      	strb	r0, [r6, #3]
 8007ee4:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d217      	bcs.n	8007f1a <remove_chain+0xe6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007eea:	f896 c002 	ldrb.w	ip, [r6, #2]
 8007eee:	4662      	mov	r2, ip
 8007ef0:	2a01      	cmp	r2, #1
 8007ef2:	d912      	bls.n	8007f1a <remove_chain+0xe6>
 8007ef4:	9402      	str	r4, [sp, #8]
 8007ef6:	4664      	mov	r4, ip
 8007ef8:	9503      	str	r5, [sp, #12]
 8007efa:	9d01      	ldr	r5, [sp, #4]
 8007efc:	e001      	b.n	8007f02 <remove_chain+0xce>
 8007efe:	69f3      	ldr	r3, [r6, #28]
 8007f00:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8007f02:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007f04:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8007f06:	2301      	movs	r3, #1
 8007f08:	4629      	mov	r1, r5
 8007f0a:	464a      	mov	r2, r9
 8007f0c:	f7ff fdee 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007f10:	2c01      	cmp	r4, #1
 8007f12:	d1f4      	bne.n	8007efe <remove_chain+0xca>
 8007f14:	7870      	ldrb	r0, [r6, #1]
 8007f16:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007f1a:	9901      	ldr	r1, [sp, #4]
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	4642      	mov	r2, r8
 8007f20:	f7ff fdd6 	bl	8007ad0 <disk_read>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	f000 8228 	beq.w	800837a <remove_chain+0x546>
			fs->winsect = sector;
 8007f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007f2e:	2001      	movs	r0, #1
			fs->winsect = sector;
 8007f30:	6333      	str	r3, [r6, #48]	; 0x30
}
 8007f32:	b005      	add	sp, #20
 8007f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007f38:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007f3a:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007f3e:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007f42:	eb07 17d5 	add.w	r7, r7, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007f46:	454f      	cmp	r7, r9
 8007f48:	f040 8107 	bne.w	800815a <remove_chain+0x326>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007f4c:	00ab      	lsls	r3, r5, #2
 8007f4e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007f52:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
 8007f56:	f818 7003 	ldrb.w	r7, [r8, r3]
	rv = rv << 8 | ptr[1];
 8007f5a:	f892 b001 	ldrb.w	fp, [r2, #1]
	rv = rv << 8 | ptr[2];
 8007f5e:	8853      	ldrh	r3, [r2, #2]
	rv = rv << 8 | ptr[1];
 8007f60:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
	rv = rv << 8 | ptr[0];
 8007f64:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007f68:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
 8007f6c:	2f00      	cmp	r7, #0
 8007f6e:	f000 8214 	beq.w	800839a <remove_chain+0x566>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007f72:	2f01      	cmp	r7, #1
 8007f74:	f43f af79 	beq.w	8007e6a <remove_chain+0x36>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007f78:	69a3      	ldr	r3, [r4, #24]
 8007f7a:	42ab      	cmp	r3, r5
 8007f7c:	f67f af75 	bls.w	8007e6a <remove_chain+0x36>
		switch (fs->fs_type) {
 8007f80:	7823      	ldrb	r3, [r4, #0]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	f000 8165 	beq.w	8008252 <remove_chain+0x41e>
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	f000 8119 	beq.w	80081c0 <remove_chain+0x38c>
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	f47f af6b 	bne.w	8007e6a <remove_chain+0x36>
			bc = (UINT)clst; bc += bc / 2;
 8007f94:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f98:	6a62      	ldr	r2, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007f9a:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f9e:	eb02 2856 	add.w	r8, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007fa2:	45c8      	cmp	r8, r9
 8007fa4:	d02e      	beq.n	8008004 <remove_chain+0x1d0>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007fa6:	78e2      	ldrb	r2, [r4, #3]
 8007fa8:	7860      	ldrb	r0, [r4, #1]
 8007faa:	b30a      	cbz	r2, 8007ff0 <remove_chain+0x1bc>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007fac:	464a      	mov	r2, r9
 8007fae:	4651      	mov	r1, sl
 8007fb0:	f7ff fd9c 	bl	8007aec <disk_write>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	f040 80ff 	bne.w	80081b8 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007fba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007fbc:	69e3      	ldr	r3, [r4, #28]
 8007fbe:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8007fc2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d212      	bcs.n	8007fee <remove_chain+0x1ba>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007fc8:	f894 b002 	ldrb.w	fp, [r4, #2]
 8007fcc:	f1bb 0f01 	cmp.w	fp, #1
 8007fd0:	d801      	bhi.n	8007fd6 <remove_chain+0x1a2>
 8007fd2:	e00c      	b.n	8007fee <remove_chain+0x1ba>
 8007fd4:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8007fd6:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007fd8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8007fdc:	2301      	movs	r3, #1
 8007fde:	4651      	mov	r1, sl
 8007fe0:	464a      	mov	r2, r9
 8007fe2:	7860      	ldrb	r0, [r4, #1]
 8007fe4:	f7ff fd82 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007fe8:	f1bb 0f01 	cmp.w	fp, #1
 8007fec:	d1f2      	bne.n	8007fd4 <remove_chain+0x1a0>
 8007fee:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	4642      	mov	r2, r8
 8007ff4:	4651      	mov	r1, sl
 8007ff6:	f7ff fd6b 	bl	8007ad0 <disk_read>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	f040 8168 	bne.w	80082d0 <remove_chain+0x49c>
			fs->winsect = sector;
 8008000:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
			p = fs->win + bc++ % SS(fs);
 8008004:	f106 0801 	add.w	r8, r6, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008008:	f015 0901 	ands.w	r9, r5, #1
			p = fs->win + bc++ % SS(fs);
 800800c:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8008010:	ea4f 2258 	mov.w	r2, r8, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008014:	f000 8171 	beq.w	80082fa <remove_chain+0x4c6>
 8008018:	f81a 3006 	ldrb.w	r3, [sl, r6]
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	f80a 3006 	strb.w	r3, [sl, r6]
			fs->wflag = 1;
 8008024:	f04f 0301 	mov.w	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008028:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800802a:	6b25      	ldr	r5, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800802c:	4416      	add	r6, r2
			fs->wflag = 1;
 800802e:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008030:	42b5      	cmp	r5, r6
 8008032:	f040 816c 	bne.w	800830e <remove_chain+0x4da>
			p = fs->win + bc % SS(fs);
 8008036:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800803a:	2300      	movs	r3, #0
			p = fs->win + bc % SS(fs);
 800803c:	44d0      	add	r8, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800803e:	f888 3000 	strb.w	r3, [r8]
			fs->wflag = 1;
 8008042:	f04f 0301 	mov.w	r3, #1
 8008046:	70e3      	strb	r3, [r4, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008048:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800804c:	1e91      	subs	r1, r2, #2
 800804e:	428b      	cmp	r3, r1
 8008050:	d205      	bcs.n	800805e <remove_chain+0x22a>
			fs->fsi_flag |= 1;
 8008052:	7921      	ldrb	r1, [r4, #4]
			fs->free_clst++;
 8008054:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 8008056:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 800805a:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 800805c:	7121      	strb	r1, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800805e:	42ba      	cmp	r2, r7
 8008060:	f240 819b 	bls.w	800839a <remove_chain+0x566>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008064:	9b00      	ldr	r3, [sp, #0]
 8008066:	463d      	mov	r5, r7
 8008068:	681e      	ldr	r6, [r3, #0]
 800806a:	69b3      	ldr	r3, [r6, #24]
 800806c:	e6f3      	b.n	8007e56 <remove_chain+0x22>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800806e:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008070:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008074:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008078:	eb07 2715 	add.w	r7, r7, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800807c:	454f      	cmp	r7, r9
 800807e:	d02e      	beq.n	80080de <remove_chain+0x2aa>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008080:	78f3      	ldrb	r3, [r6, #3]
 8008082:	7870      	ldrb	r0, [r6, #1]
 8008084:	b313      	cbz	r3, 80080cc <remove_chain+0x298>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008086:	2301      	movs	r3, #1
 8008088:	464a      	mov	r2, r9
 800808a:	4641      	mov	r1, r8
 800808c:	f7ff fd2e 	bl	8007aec <disk_write>
 8008090:	2800      	cmp	r0, #0
 8008092:	f040 8091 	bne.w	80081b8 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008096:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008098:	69f3      	ldr	r3, [r6, #28]
 800809a:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 800809e:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d212      	bcs.n	80080ca <remove_chain+0x296>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80080a4:	f896 b002 	ldrb.w	fp, [r6, #2]
 80080a8:	f1bb 0f01 	cmp.w	fp, #1
 80080ac:	d801      	bhi.n	80080b2 <remove_chain+0x27e>
 80080ae:	e00c      	b.n	80080ca <remove_chain+0x296>
 80080b0:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 80080b2:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80080b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80080b8:	2301      	movs	r3, #1
 80080ba:	4641      	mov	r1, r8
 80080bc:	464a      	mov	r2, r9
 80080be:	7870      	ldrb	r0, [r6, #1]
 80080c0:	f7ff fd14 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80080c4:	f1bb 0f01 	cmp.w	fp, #1
 80080c8:	d1f2      	bne.n	80080b0 <remove_chain+0x27c>
 80080ca:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80080cc:	2301      	movs	r3, #1
 80080ce:	463a      	mov	r2, r7
 80080d0:	4641      	mov	r1, r8
 80080d2:	f7ff fcfd 	bl	8007ad0 <disk_read>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	f47f af27 	bne.w	8007f2a <remove_chain+0xf6>
			fs->winsect = sector;
 80080dc:	6337      	str	r7, [r6, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80080de:	006b      	lsls	r3, r5, #1
 80080e0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80080e4:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
 80080e8:	f818 7003 	ldrb.w	r7, [r8, r3]
 80080ec:	f892 b001 	ldrb.w	fp, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80080f0:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 80080f4:	e73a      	b.n	8007f6c <remove_chain+0x138>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80080f6:	78f2      	ldrb	r2, [r6, #3]
 80080f8:	f106 0b34 	add.w	fp, r6, #52	; 0x34
 80080fc:	7870      	ldrb	r0, [r6, #1]
 80080fe:	b1fa      	cbz	r2, 8008140 <remove_chain+0x30c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008100:	464a      	mov	r2, r9
 8008102:	4659      	mov	r1, fp
 8008104:	f7ff fcf2 	bl	8007aec <disk_write>
 8008108:	2800      	cmp	r0, #0
 800810a:	d155      	bne.n	80081b8 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800810c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800810e:	69f3      	ldr	r3, [r6, #28]
 8008110:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8008114:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008116:	429a      	cmp	r2, r3
 8008118:	d211      	bcs.n	800813e <remove_chain+0x30a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800811a:	78b2      	ldrb	r2, [r6, #2]
 800811c:	2a01      	cmp	r2, #1
 800811e:	d90e      	bls.n	800813e <remove_chain+0x30a>
 8008120:	9401      	str	r4, [sp, #4]
 8008122:	4614      	mov	r4, r2
 8008124:	e000      	b.n	8008128 <remove_chain+0x2f4>
 8008126:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8008128:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800812a:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800812c:	2301      	movs	r3, #1
 800812e:	4659      	mov	r1, fp
 8008130:	464a      	mov	r2, r9
 8008132:	7870      	ldrb	r0, [r6, #1]
 8008134:	f7ff fcda 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008138:	2c01      	cmp	r4, #1
 800813a:	d1f4      	bne.n	8008126 <remove_chain+0x2f2>
 800813c:	9c01      	ldr	r4, [sp, #4]
 800813e:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008140:	4659      	mov	r1, fp
 8008142:	2301      	movs	r3, #1
 8008144:	4642      	mov	r2, r8
 8008146:	f7ff fcc3 	bl	8007ad0 <disk_read>
 800814a:	2800      	cmp	r0, #0
 800814c:	f47f aeed 	bne.w	8007f2a <remove_chain+0xf6>
			fs->winsect = sector;
 8008150:	46c1      	mov	r9, r8
 8008152:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008154:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 8008158:	e6a6      	b.n	8007ea8 <remove_chain+0x74>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800815a:	78f3      	ldrb	r3, [r6, #3]
 800815c:	7870      	ldrb	r0, [r6, #1]
 800815e:	b30b      	cbz	r3, 80081a4 <remove_chain+0x370>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008160:	2301      	movs	r3, #1
 8008162:	464a      	mov	r2, r9
 8008164:	4641      	mov	r1, r8
 8008166:	f7ff fcc1 	bl	8007aec <disk_write>
 800816a:	bb28      	cbnz	r0, 80081b8 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800816c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800816e:	69f3      	ldr	r3, [r6, #28]
 8008170:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8008174:	70f0      	strb	r0, [r6, #3]
 8008176:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008178:	429a      	cmp	r2, r3
 800817a:	d213      	bcs.n	80081a4 <remove_chain+0x370>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800817c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8008180:	f1bb 0f01 	cmp.w	fp, #1
 8008184:	d802      	bhi.n	800818c <remove_chain+0x358>
 8008186:	e00d      	b.n	80081a4 <remove_chain+0x370>
 8008188:	69f3      	ldr	r3, [r6, #28]
 800818a:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 800818c:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800818e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8008192:	2301      	movs	r3, #1
 8008194:	4641      	mov	r1, r8
 8008196:	464a      	mov	r2, r9
 8008198:	f7ff fca8 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800819c:	f1bb 0f01 	cmp.w	fp, #1
 80081a0:	d1f2      	bne.n	8008188 <remove_chain+0x354>
 80081a2:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80081a4:	2301      	movs	r3, #1
 80081a6:	463a      	mov	r2, r7
 80081a8:	4641      	mov	r1, r8
 80081aa:	f7ff fc91 	bl	8007ad0 <disk_read>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	f47f aebb 	bne.w	8007f2a <remove_chain+0xf6>
			fs->winsect = sector;
 80081b4:	6337      	str	r7, [r6, #48]	; 0x30
 80081b6:	e6c9      	b.n	8007f4c <remove_chain+0x118>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80081b8:	2001      	movs	r0, #1
}
 80081ba:	b005      	add	sp, #20
 80081bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80081c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80081c2:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80081c6:	eb06 16d5 	add.w	r6, r6, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80081ca:	4546      	cmp	r6, r8
 80081cc:	d02d      	beq.n	800822a <remove_chain+0x3f6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80081ce:	78e3      	ldrb	r3, [r4, #3]
 80081d0:	7860      	ldrb	r0, [r4, #1]
 80081d2:	b313      	cbz	r3, 800821a <remove_chain+0x3e6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80081d4:	2301      	movs	r3, #1
 80081d6:	4642      	mov	r2, r8
 80081d8:	4651      	mov	r1, sl
 80081da:	f7ff fc87 	bl	8007aec <disk_write>
 80081de:	2800      	cmp	r0, #0
 80081e0:	d1ea      	bne.n	80081b8 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80081e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80081e4:	69e3      	ldr	r3, [r4, #28]
 80081e6:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80081ea:	70e0      	strb	r0, [r4, #3]
 80081ec:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d213      	bcs.n	800821a <remove_chain+0x3e6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80081f2:	f894 9002 	ldrb.w	r9, [r4, #2]
 80081f6:	f1b9 0f01 	cmp.w	r9, #1
 80081fa:	d802      	bhi.n	8008202 <remove_chain+0x3ce>
 80081fc:	e00d      	b.n	800821a <remove_chain+0x3e6>
 80081fe:	69e3      	ldr	r3, [r4, #28]
 8008200:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8008202:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008204:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8008208:	2301      	movs	r3, #1
 800820a:	4651      	mov	r1, sl
 800820c:	4642      	mov	r2, r8
 800820e:	f7ff fc6d 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008212:	f1b9 0f01 	cmp.w	r9, #1
 8008216:	d1f2      	bne.n	80081fe <remove_chain+0x3ca>
 8008218:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800821a:	2301      	movs	r3, #1
 800821c:	4632      	mov	r2, r6
 800821e:	4651      	mov	r1, sl
 8008220:	f7ff fc56 	bl	8007ad0 <disk_read>
 8008224:	2800      	cmp	r0, #0
 8008226:	d153      	bne.n	80082d0 <remove_chain+0x49c>
			fs->winsect = sector;
 8008228:	6326      	str	r6, [r4, #48]	; 0x30
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800822a:	00ad      	lsls	r5, r5, #2
	*ptr++ = (BYTE)val; val >>= 8;
 800822c:	f04f 0100 	mov.w	r1, #0
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008230:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8008234:	eb0a 0205 	add.w	r2, sl, r5
	rv = rv << 8 | ptr[2];
 8008238:	8853      	ldrh	r3, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800823a:	f80a 1005 	strb.w	r1, [sl, r5]
	*ptr++ = (BYTE)val; val >>= 8;
 800823e:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008240:	7051      	strb	r1, [r2, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8008242:	7091      	strb	r1, [r2, #2]
 8008244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
 8008248:	70d3      	strb	r3, [r2, #3]
			fs->wflag = 1;
 800824a:	f04f 0301 	mov.w	r3, #1
 800824e:	70e3      	strb	r3, [r4, #3]
 8008250:	e6fa      	b.n	8008048 <remove_chain+0x214>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008252:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008254:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008258:	eb06 2615 	add.w	r6, r6, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800825c:	4546      	cmp	r6, r8
 800825e:	d03e      	beq.n	80082de <remove_chain+0x4aa>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008260:	78e3      	ldrb	r3, [r4, #3]
 8008262:	7860      	ldrb	r0, [r4, #1]
 8008264:	b30b      	cbz	r3, 80082aa <remove_chain+0x476>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008266:	2301      	movs	r3, #1
 8008268:	4642      	mov	r2, r8
 800826a:	4651      	mov	r1, sl
 800826c:	f7ff fc3e 	bl	8007aec <disk_write>
 8008270:	2800      	cmp	r0, #0
 8008272:	d1a1      	bne.n	80081b8 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008274:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008276:	69e3      	ldr	r3, [r4, #28]
 8008278:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 800827c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800827e:	429a      	cmp	r2, r3
 8008280:	d212      	bcs.n	80082a8 <remove_chain+0x474>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008282:	f894 9002 	ldrb.w	r9, [r4, #2]
 8008286:	f1b9 0f01 	cmp.w	r9, #1
 800828a:	d801      	bhi.n	8008290 <remove_chain+0x45c>
 800828c:	e00c      	b.n	80082a8 <remove_chain+0x474>
 800828e:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8008290:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008292:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8008296:	2301      	movs	r3, #1
 8008298:	4651      	mov	r1, sl
 800829a:	4642      	mov	r2, r8
 800829c:	7860      	ldrb	r0, [r4, #1]
 800829e:	f7ff fc25 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80082a2:	f1b9 0f01 	cmp.w	r9, #1
 80082a6:	d1f2      	bne.n	800828e <remove_chain+0x45a>
 80082a8:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80082aa:	2301      	movs	r3, #1
 80082ac:	4632      	mov	r2, r6
 80082ae:	4651      	mov	r1, sl
 80082b0:	f7ff fc0e 	bl	8007ad0 <disk_read>
 80082b4:	b960      	cbnz	r0, 80082d0 <remove_chain+0x49c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80082b6:	006d      	lsls	r5, r5, #1
			fs->winsect = sector;
 80082b8:	6326      	str	r6, [r4, #48]	; 0x30
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80082ba:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 80082be:	eb0a 0305 	add.w	r3, sl, r5
	*ptr++ = (BYTE)val; val >>= 8;
 80082c2:	f80a 0005 	strb.w	r0, [sl, r5]
	*ptr++ = (BYTE)val;
 80082c6:	7058      	strb	r0, [r3, #1]
			fs->wflag = 1;
 80082c8:	f04f 0301 	mov.w	r3, #1
 80082cc:	70e3      	strb	r3, [r4, #3]
 80082ce:	e6bb      	b.n	8008048 <remove_chain+0x214>
			fs->winsect = sector;
 80082d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 80082d4:	2001      	movs	r0, #1
			fs->winsect = sector;
 80082d6:	6323      	str	r3, [r4, #48]	; 0x30
}
 80082d8:	b005      	add	sp, #20
 80082da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80082de:	006d      	lsls	r5, r5, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80082e0:	f04f 0200 	mov.w	r2, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80082e4:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 80082e8:	eb0a 0305 	add.w	r3, sl, r5
	*ptr++ = (BYTE)val; val >>= 8;
 80082ec:	f80a 2005 	strb.w	r2, [sl, r5]
	*ptr++ = (BYTE)val;
 80082f0:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
 80082f2:	f04f 0301 	mov.w	r3, #1
 80082f6:	70e3      	strb	r3, [r4, #3]
 80082f8:	e6a6      	b.n	8008048 <remove_chain+0x214>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80082fa:	f80a 9006 	strb.w	r9, [sl, r6]
			fs->wflag = 1;
 80082fe:	f04f 0301 	mov.w	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008302:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008304:	6b25      	ldr	r5, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008306:	4416      	add	r6, r2
			fs->wflag = 1;
 8008308:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800830a:	42ae      	cmp	r6, r5
 800830c:	d047      	beq.n	800839e <remove_chain+0x56a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800830e:	2301      	movs	r3, #1
 8008310:	462a      	mov	r2, r5
 8008312:	4651      	mov	r1, sl
 8008314:	7860      	ldrb	r0, [r4, #1]
 8008316:	f7ff fbe9 	bl	8007aec <disk_write>
 800831a:	2800      	cmp	r0, #0
 800831c:	f47f af4c 	bne.w	80081b8 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008320:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008322:	69e3      	ldr	r3, [r4, #28]
 8008324:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8008326:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008328:	429a      	cmp	r2, r3
 800832a:	d212      	bcs.n	8008352 <remove_chain+0x51e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800832c:	f894 b002 	ldrb.w	fp, [r4, #2]
 8008330:	f1bb 0f01 	cmp.w	fp, #1
 8008334:	d801      	bhi.n	800833a <remove_chain+0x506>
 8008336:	e00c      	b.n	8008352 <remove_chain+0x51e>
 8008338:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 800833a:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800833c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8008340:	2301      	movs	r3, #1
 8008342:	4651      	mov	r1, sl
 8008344:	462a      	mov	r2, r5
 8008346:	7860      	ldrb	r0, [r4, #1]
 8008348:	f7ff fbd0 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800834c:	f1bb 0f01 	cmp.w	fp, #1
 8008350:	d1f2      	bne.n	8008338 <remove_chain+0x504>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008352:	2301      	movs	r3, #1
 8008354:	4632      	mov	r2, r6
 8008356:	4651      	mov	r1, sl
 8008358:	7860      	ldrb	r0, [r4, #1]
 800835a:	f7ff fbb9 	bl	8007ad0 <disk_read>
 800835e:	2800      	cmp	r0, #0
 8008360:	d1b6      	bne.n	80082d0 <remove_chain+0x49c>
			p = fs->win + bc % SS(fs);
 8008362:	f3c8 0808 	ubfx	r8, r8, #0, #9
			fs->winsect = sector;
 8008366:	6326      	str	r6, [r4, #48]	; 0x30
			p = fs->win + bc % SS(fs);
 8008368:	44d0      	add	r8, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800836a:	f1b9 0f00 	cmp.w	r9, #0
 800836e:	d11a      	bne.n	80083a6 <remove_chain+0x572>
 8008370:	f898 3000 	ldrb.w	r3, [r8]
 8008374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008378:	e661      	b.n	800803e <remove_chain+0x20a>
			fs->winsect = sector;
 800837a:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;
 800837e:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008382:	07eb      	lsls	r3, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8008384:	443e      	add	r6, r7
 8008386:	f896 7034 	ldrb.w	r7, [r6, #52]	; 0x34
 800838a:	ea4b 2b07 	orr.w	fp, fp, r7, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800838e:	bf4c      	ite	mi
 8008390:	ea4f 171b 	movmi.w	r7, fp, lsr #4
 8008394:	f3cb 070b 	ubfxpl	r7, fp, #0, #12
 8008398:	e5e8      	b.n	8007f6c <remove_chain+0x138>
	return FR_OK;
 800839a:	2000      	movs	r0, #0
 800839c:	e566      	b.n	8007e6c <remove_chain+0x38>
			p = fs->win + bc % SS(fs);
 800839e:	f3c8 0808 	ubfx	r8, r8, #0, #9
 80083a2:	44d0      	add	r8, sl
 80083a4:	e7e4      	b.n	8008370 <remove_chain+0x53c>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80083a6:	4603      	mov	r3, r0
 80083a8:	e649      	b.n	800803e <remove_chain+0x20a>
 80083aa:	bf00      	nop

080083ac <dir_sdi>:
{
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80083ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80083b0:	d239      	bcs.n	8008426 <dir_sdi+0x7a>
{
 80083b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b6:	460d      	mov	r5, r1
 80083b8:	b085      	sub	sp, #20
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80083ba:	06e9      	lsls	r1, r5, #27
 80083bc:	d12f      	bne.n	800841e <dir_sdi+0x72>
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80083be:	6884      	ldr	r4, [r0, #8]
 80083c0:	4680      	mov	r8, r0
	dp->dptr = ofs;				/* Set current offset */
 80083c2:	6145      	str	r5, [r0, #20]
	FATFS *fs = dp->obj.fs;
 80083c4:	f8d0 b000 	ldr.w	fp, [r0]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80083c8:	bb84      	cbnz	r4, 800842c <dir_sdi+0x80>
 80083ca:	f89b 3000 	ldrb.w	r3, [fp]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d902      	bls.n	80083d8 <dir_sdi+0x2c>
		clst = fs->dirbase;
 80083d2:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80083d6:	bb43      	cbnz	r3, 800842a <dir_sdi+0x7e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80083d8:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 80083dc:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80083e0:	d91d      	bls.n	800841e <dir_sdi+0x72>
		dp->sect = fs->dirbase;
 80083e2:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80083e6:	f8c8 201c 	str.w	r2, [r8, #28]
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
	}
	dp->clust = clst;					/* Current cluster# */
 80083ea:	f8c8 4018 	str.w	r4, [r8, #24]
	if (!dp->sect) return FR_INT_ERR;
 80083ee:	b1b2      	cbz	r2, 800841e <dir_sdi+0x72>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80083f0:	f3c5 0108 	ubfx	r1, r5, #0, #9
 80083f4:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80083f8:	eb02 2555 	add.w	r5, r2, r5, lsr #9

	return FR_OK;
 80083fc:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80083fe:	440b      	add	r3, r1
 8008400:	e9c8 5307 	strd	r5, r3, [r8, #28]
}
 8008404:	b005      	add	sp, #20
 8008406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840a:	f8dd 8000 	ldr.w	r8, [sp]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800840e:	3b02      	subs	r3, #2
	clst -= 2;
 8008410:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008412:	4299      	cmp	r1, r3
 8008414:	f0c0 8153 	bcc.w	80086be <dir_sdi+0x312>
		dp->sect = clust2sect(fs, clst);
 8008418:	2300      	movs	r3, #0
 800841a:	e9c8 4306 	strd	r4, r3, [r8, #24]
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800841e:	2002      	movs	r0, #2
}
 8008420:	b005      	add	sp, #20
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8008426:	2002      	movs	r0, #2
}
 8008428:	4770      	bx	lr
 800842a:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800842c:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8008430:	ea4f 2a43 	mov.w	sl, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8008434:	4555      	cmp	r5, sl
 8008436:	f0c0 814d 	bcc.w	80086d4 <dir_sdi+0x328>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800843a:	2c01      	cmp	r4, #1
 800843c:	d9ef      	bls.n	800841e <dir_sdi+0x72>
 800843e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8008442:	42a3      	cmp	r3, r4
 8008444:	d9eb      	bls.n	800841e <dir_sdi+0x72>
 8008446:	465e      	mov	r6, fp
 8008448:	f8cd 8000 	str.w	r8, [sp]
		switch (fs->fs_type) {
 800844c:	7833      	ldrb	r3, [r6, #0]
 800844e:	2b02      	cmp	r3, #2
 8008450:	f000 80a3 	beq.w	800859a <dir_sdi+0x1ee>
 8008454:	2b03      	cmp	r3, #3
 8008456:	d043      	beq.n	80084e0 <dir_sdi+0x134>
 8008458:	2b01      	cmp	r3, #1
 800845a:	d1e0      	bne.n	800841e <dir_sdi+0x72>
			bc = (UINT)clst; bc += bc / 2;
 800845c:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008460:	6a72      	ldr	r2, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008462:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008466:	eb02 2957 	add.w	r9, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800846a:	45c1      	cmp	r9, r8
 800846c:	f000 80db 	beq.w	8008626 <dir_sdi+0x27a>
 8008470:	f106 0134 	add.w	r1, r6, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008474:	78f2      	ldrb	r2, [r6, #3]
 8008476:	7870      	ldrb	r0, [r6, #1]
 8008478:	9101      	str	r1, [sp, #4]
 800847a:	b31a      	cbz	r2, 80084c4 <dir_sdi+0x118>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800847c:	4642      	mov	r2, r8
 800847e:	f7ff fb35 	bl	8007aec <disk_write>
 8008482:	2800      	cmp	r0, #0
 8008484:	f040 8124 	bne.w	80086d0 <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008488:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800848a:	69f3      	ldr	r3, [r6, #28]
 800848c:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8008490:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008492:	429a      	cmp	r2, r3
 8008494:	d214      	bcs.n	80084c0 <dir_sdi+0x114>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008496:	78b2      	ldrb	r2, [r6, #2]
 8008498:	2a01      	cmp	r2, #1
 800849a:	d911      	bls.n	80084c0 <dir_sdi+0x114>
 800849c:	9402      	str	r4, [sp, #8]
 800849e:	4614      	mov	r4, r2
 80084a0:	9503      	str	r5, [sp, #12]
 80084a2:	9d01      	ldr	r5, [sp, #4]
 80084a4:	e000      	b.n	80084a8 <dir_sdi+0xfc>
 80084a6:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 80084a8:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80084aa:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80084ac:	2301      	movs	r3, #1
 80084ae:	4629      	mov	r1, r5
 80084b0:	4642      	mov	r2, r8
 80084b2:	7870      	ldrb	r0, [r6, #1]
 80084b4:	f7ff fb1a 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80084b8:	2c01      	cmp	r4, #1
 80084ba:	d1f4      	bne.n	80084a6 <dir_sdi+0xfa>
 80084bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80084c0:	7870      	ldrb	r0, [r6, #1]
 80084c2:	9901      	ldr	r1, [sp, #4]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80084c4:	2301      	movs	r3, #1
 80084c6:	464a      	mov	r2, r9
 80084c8:	f7ff fb02 	bl	8007ad0 <disk_read>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	f000 80a6 	beq.w	800861e <dir_sdi+0x272>
			fs->winsect = sector;
 80084d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80084d6:	2001      	movs	r0, #1
			fs->winsect = sector;
 80084d8:	6333      	str	r3, [r6, #48]	; 0x30
}
 80084da:	b005      	add	sp, #20
 80084dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80084e0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80084e2:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80084e6:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80084ea:	eb07 17d4 	add.w	r7, r7, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80084ee:	454f      	cmp	r7, r9
 80084f0:	d02d      	beq.n	800854e <dir_sdi+0x1a2>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80084f2:	78f3      	ldrb	r3, [r6, #3]
 80084f4:	7870      	ldrb	r0, [r6, #1]
 80084f6:	b313      	cbz	r3, 800853e <dir_sdi+0x192>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80084f8:	2301      	movs	r3, #1
 80084fa:	464a      	mov	r2, r9
 80084fc:	4641      	mov	r1, r8
 80084fe:	f7ff faf5 	bl	8007aec <disk_write>
 8008502:	2800      	cmp	r0, #0
 8008504:	f040 80e4 	bne.w	80086d0 <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008508:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800850a:	69f3      	ldr	r3, [r6, #28]
 800850c:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8008510:	70f0      	strb	r0, [r6, #3]
 8008512:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008514:	429a      	cmp	r2, r3
 8008516:	d212      	bcs.n	800853e <dir_sdi+0x192>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008518:	78b2      	ldrb	r2, [r6, #2]
 800851a:	2a01      	cmp	r2, #1
 800851c:	d90f      	bls.n	800853e <dir_sdi+0x192>
 800851e:	9401      	str	r4, [sp, #4]
 8008520:	4614      	mov	r4, r2
 8008522:	e001      	b.n	8008528 <dir_sdi+0x17c>
 8008524:	69f3      	ldr	r3, [r6, #28]
 8008526:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8008528:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800852a:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800852c:	2301      	movs	r3, #1
 800852e:	4641      	mov	r1, r8
 8008530:	464a      	mov	r2, r9
 8008532:	f7ff fadb 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008536:	2c01      	cmp	r4, #1
 8008538:	d1f4      	bne.n	8008524 <dir_sdi+0x178>
 800853a:	9c01      	ldr	r4, [sp, #4]
 800853c:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800853e:	2301      	movs	r3, #1
 8008540:	463a      	mov	r2, r7
 8008542:	4641      	mov	r1, r8
 8008544:	f7ff fac4 	bl	8007ad0 <disk_read>
 8008548:	2800      	cmp	r0, #0
 800854a:	d1c2      	bne.n	80084d2 <dir_sdi+0x126>
			fs->winsect = sector;
 800854c:	6337      	str	r7, [r6, #48]	; 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800854e:	00a4      	lsls	r4, r4, #2
 8008550:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8008554:	eb08 0204 	add.w	r2, r8, r4
	rv = rv << 8 | ptr[0];
 8008558:	f818 4004 	ldrb.w	r4, [r8, r4]
	rv = rv << 8 | ptr[2];
 800855c:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 800855e:	7853      	ldrb	r3, [r2, #1]
 8008560:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8008564:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008568:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800856c:	2c01      	cmp	r4, #1
 800856e:	f67f af56 	bls.w	800841e <dir_sdi+0x72>
 8008572:	f8db 3018 	ldr.w	r3, [fp, #24]
 8008576:	42a3      	cmp	r3, r4
 8008578:	f67f af51 	bls.w	800841e <dir_sdi+0x72>
			ofs -= csz;
 800857c:	eba5 050a 	sub.w	r5, r5, sl
		while (ofs >= csz) {				/* Follow cluster chain */
 8008580:	45aa      	cmp	sl, r5
 8008582:	f63f af42 	bhi.w	800840a <dir_sdi+0x5e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008586:	9b00      	ldr	r3, [sp, #0]
 8008588:	681e      	ldr	r6, [r3, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800858a:	69b3      	ldr	r3, [r6, #24]
 800858c:	42a3      	cmp	r3, r4
 800858e:	f67f af46 	bls.w	800841e <dir_sdi+0x72>
		switch (fs->fs_type) {
 8008592:	7833      	ldrb	r3, [r6, #0]
 8008594:	2b02      	cmp	r3, #2
 8008596:	f47f af5d 	bne.w	8008454 <dir_sdi+0xa8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800859a:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800859c:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80085a0:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80085a4:	eb07 2714 	add.w	r7, r7, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80085a8:	454f      	cmp	r7, r9
 80085aa:	d02d      	beq.n	8008608 <dir_sdi+0x25c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80085ac:	78f3      	ldrb	r3, [r6, #3]
 80085ae:	7870      	ldrb	r0, [r6, #1]
 80085b0:	b30b      	cbz	r3, 80085f6 <dir_sdi+0x24a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80085b2:	2301      	movs	r3, #1
 80085b4:	464a      	mov	r2, r9
 80085b6:	4641      	mov	r1, r8
 80085b8:	f7ff fa98 	bl	8007aec <disk_write>
 80085bc:	2800      	cmp	r0, #0
 80085be:	f040 8087 	bne.w	80086d0 <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80085c2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80085c4:	69f3      	ldr	r3, [r6, #28]
 80085c6:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 80085ca:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d211      	bcs.n	80085f4 <dir_sdi+0x248>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80085d0:	78b2      	ldrb	r2, [r6, #2]
 80085d2:	2a01      	cmp	r2, #1
 80085d4:	d90e      	bls.n	80085f4 <dir_sdi+0x248>
 80085d6:	9401      	str	r4, [sp, #4]
 80085d8:	4614      	mov	r4, r2
 80085da:	e000      	b.n	80085de <dir_sdi+0x232>
 80085dc:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 80085de:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80085e0:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80085e2:	2301      	movs	r3, #1
 80085e4:	4641      	mov	r1, r8
 80085e6:	464a      	mov	r2, r9
 80085e8:	7870      	ldrb	r0, [r6, #1]
 80085ea:	f7ff fa7f 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80085ee:	2c01      	cmp	r4, #1
 80085f0:	d1f4      	bne.n	80085dc <dir_sdi+0x230>
 80085f2:	9c01      	ldr	r4, [sp, #4]
 80085f4:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80085f6:	2301      	movs	r3, #1
 80085f8:	463a      	mov	r2, r7
 80085fa:	4641      	mov	r1, r8
 80085fc:	f7ff fa68 	bl	8007ad0 <disk_read>
 8008600:	2800      	cmp	r0, #0
 8008602:	f47f af66 	bne.w	80084d2 <dir_sdi+0x126>
			fs->winsect = sector;
 8008606:	6337      	str	r7, [r6, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008608:	0064      	lsls	r4, r4, #1
 800860a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800860e:	eb08 0304 	add.w	r3, r8, r4
	rv = rv << 8 | ptr[0];
 8008612:	f818 4004 	ldrb.w	r4, [r8, r4]
 8008616:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008618:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800861c:	e7a6      	b.n	800856c <dir_sdi+0x1c0>
			fs->winsect = sector;
 800861e:	46c8      	mov	r8, r9
 8008620:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008622:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8008626:	1c79      	adds	r1, r7, #1
 8008628:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800862c:	eb02 2951 	add.w	r9, r2, r1, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8008630:	4433      	add	r3, r6
 8008632:	9101      	str	r1, [sp, #4]
 8008634:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008638:	45c1      	cmp	r9, r8
			wc = fs->win[bc++ % SS(fs)];
 800863a:	9302      	str	r3, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800863c:	d030      	beq.n	80086a0 <dir_sdi+0x2f4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800863e:	78f3      	ldrb	r3, [r6, #3]
 8008640:	f106 0734 	add.w	r7, r6, #52	; 0x34
 8008644:	7870      	ldrb	r0, [r6, #1]
 8008646:	b30b      	cbz	r3, 800868c <dir_sdi+0x2e0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008648:	2301      	movs	r3, #1
 800864a:	4642      	mov	r2, r8
 800864c:	4639      	mov	r1, r7
 800864e:	f7ff fa4d 	bl	8007aec <disk_write>
 8008652:	2800      	cmp	r0, #0
 8008654:	d13c      	bne.n	80086d0 <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008656:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008658:	69f3      	ldr	r3, [r6, #28]
 800865a:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 800865e:	70f0      	strb	r0, [r6, #3]
 8008660:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008662:	429a      	cmp	r2, r3
 8008664:	d212      	bcs.n	800868c <dir_sdi+0x2e0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008666:	78b2      	ldrb	r2, [r6, #2]
 8008668:	2a01      	cmp	r2, #1
 800866a:	d90f      	bls.n	800868c <dir_sdi+0x2e0>
 800866c:	9403      	str	r4, [sp, #12]
 800866e:	4614      	mov	r4, r2
 8008670:	e001      	b.n	8008676 <dir_sdi+0x2ca>
 8008672:	69f3      	ldr	r3, [r6, #28]
 8008674:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8008676:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008678:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800867a:	2301      	movs	r3, #1
 800867c:	4639      	mov	r1, r7
 800867e:	4642      	mov	r2, r8
 8008680:	f7ff fa34 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008684:	2c01      	cmp	r4, #1
 8008686:	d1f4      	bne.n	8008672 <dir_sdi+0x2c6>
 8008688:	9c03      	ldr	r4, [sp, #12]
 800868a:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800868c:	4639      	mov	r1, r7
 800868e:	2301      	movs	r3, #1
 8008690:	464a      	mov	r2, r9
 8008692:	f7ff fa1d 	bl	8007ad0 <disk_read>
 8008696:	2800      	cmp	r0, #0
 8008698:	f47f af1b 	bne.w	80084d2 <dir_sdi+0x126>
			fs->winsect = sector;
 800869c:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;
 80086a0:	9b01      	ldr	r3, [sp, #4]
 80086a2:	9a02      	ldr	r2, [sp, #8]
 80086a4:	f3c3 0708 	ubfx	r7, r3, #0, #9
 80086a8:	443e      	add	r6, r7
 80086aa:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80086ae:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80086b2:	07e2      	lsls	r2, r4, #31
 80086b4:	bf4c      	ite	mi
 80086b6:	091c      	lsrmi	r4, r3, #4
 80086b8:	f3c3 040b 	ubfxpl	r4, r3, #0, #12
 80086bc:	e756      	b.n	800856c <dir_sdi+0x1c0>
	return clst * fs->csize + fs->database;
 80086be:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 80086c2:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 80086c6:	fb01 3202 	mla	r2, r1, r2, r3
		dp->sect = clust2sect(fs, clst);
 80086ca:	f8c8 201c 	str.w	r2, [r8, #28]
 80086ce:	e68c      	b.n	80083ea <dir_sdi+0x3e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80086d0:	2001      	movs	r0, #1
 80086d2:	e6a5      	b.n	8008420 <dir_sdi+0x74>
 80086d4:	f8db 3018 	ldr.w	r3, [fp, #24]
 80086d8:	e699      	b.n	800840e <dir_sdi+0x62>
 80086da:	bf00      	nop

080086dc <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80086dc:	2901      	cmp	r1, #1
 80086de:	d932      	bls.n	8008746 <get_fat.isra.8+0x6a>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80086e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80086e4:	6983      	ldr	r3, [r0, #24]
 80086e6:	4299      	cmp	r1, r3
 80086e8:	d22a      	bcs.n	8008740 <get_fat.isra.8+0x64>
		switch (fs->fs_type) {
 80086ea:	7803      	ldrb	r3, [r0, #0]
 80086ec:	4606      	mov	r6, r0
 80086ee:	460c      	mov	r4, r1
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d041      	beq.n	8008778 <get_fat.isra.8+0x9c>
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d028      	beq.n	800874a <get_fat.isra.8+0x6e>
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d121      	bne.n	8008740 <get_fat.isra.8+0x64>
			bc = (UINT)clst; bc += bc / 2;
 80086fc:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008700:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008702:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008706:	eb02 2557 	add.w	r5, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800870a:	4545      	cmp	r5, r8
 800870c:	f040 80a5 	bne.w	800885a <get_fat.isra.8+0x17e>
			wc = fs->win[bc++ % SS(fs)];
 8008710:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8008714:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008716:	eb02 2957 	add.w	r9, r2, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800871a:	4433      	add	r3, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 800871c:	45c1      	cmp	r9, r8
			wc = fs->win[bc++ % SS(fs)];
 800871e:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008722:	f040 80ca 	bne.w	80088ba <get_fat.isra.8+0x1de>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008726:	f3c7 0008 	ubfx	r0, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800872a:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800872c:	4430      	add	r0, r6
 800872e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8008732:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008736:	bf4c      	ite	mi
 8008738:	0900      	lsrmi	r0, r0, #4
 800873a:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800873e:	e000      	b.n	8008742 <get_fat.isra.8+0x66>
			val = 1;	/* Internal error */
 8008740:	2001      	movs	r0, #1
}
 8008742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		val = 1;	/* Internal error */
 8008746:	2001      	movs	r0, #1
}
 8008748:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800874a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800874c:	f100 0734 	add.w	r7, r0, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008750:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008754:	eb05 15d1 	add.w	r5, r5, r1, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008758:	4545      	cmp	r5, r8
 800875a:	d14e      	bne.n	80087fa <get_fat.isra.8+0x11e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800875c:	00a1      	lsls	r1, r4, #2
 800875e:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
 8008762:	187a      	adds	r2, r7, r1
	rv = rv << 8 | ptr[0];
 8008764:	5c78      	ldrb	r0, [r7, r1]
	rv = rv << 8 | ptr[1];
 8008766:	7853      	ldrb	r3, [r2, #1]
	rv = rv << 8 | ptr[2];
 8008768:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 800876a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800876e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008772:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8008776:	e7e4      	b.n	8008742 <get_fat.isra.8+0x66>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008778:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800877a:	f100 0734 	add.w	r7, r0, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800877e:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008782:	eb05 2511 	add.w	r5, r5, r1, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008786:	4545      	cmp	r5, r8
 8008788:	d02e      	beq.n	80087e8 <get_fat.isra.8+0x10c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800878a:	78c3      	ldrb	r3, [r0, #3]
 800878c:	7840      	ldrb	r0, [r0, #1]
 800878e:	b313      	cbz	r3, 80087d6 <get_fat.isra.8+0xfa>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008790:	2301      	movs	r3, #1
 8008792:	4642      	mov	r2, r8
 8008794:	4639      	mov	r1, r7
 8008796:	f7ff f9a9 	bl	8007aec <disk_write>
 800879a:	2800      	cmp	r0, #0
 800879c:	f040 80c1 	bne.w	8008922 <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80087a0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80087a2:	69f3      	ldr	r3, [r6, #28]
 80087a4:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80087a8:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d212      	bcs.n	80087d4 <get_fat.isra.8+0xf8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087ae:	f896 9002 	ldrb.w	r9, [r6, #2]
 80087b2:	f1b9 0f01 	cmp.w	r9, #1
 80087b6:	d801      	bhi.n	80087bc <get_fat.isra.8+0xe0>
 80087b8:	e00c      	b.n	80087d4 <get_fat.isra.8+0xf8>
 80087ba:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 80087bc:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087be:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80087c2:	2301      	movs	r3, #1
 80087c4:	4639      	mov	r1, r7
 80087c6:	4642      	mov	r2, r8
 80087c8:	7870      	ldrb	r0, [r6, #1]
 80087ca:	f7ff f98f 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087ce:	f1b9 0f01 	cmp.w	r9, #1
 80087d2:	d1f2      	bne.n	80087ba <get_fat.isra.8+0xde>
 80087d4:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80087d6:	2301      	movs	r3, #1
 80087d8:	462a      	mov	r2, r5
 80087da:	4639      	mov	r1, r7
 80087dc:	f7ff f978 	bl	8007ad0 <disk_read>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	f040 809a 	bne.w	800891a <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 80087e6:	6335      	str	r5, [r6, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80087e8:	0061      	lsls	r1, r4, #1
 80087ea:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 80087ee:	187b      	adds	r3, r7, r1
	rv = rv << 8 | ptr[0];
 80087f0:	5c78      	ldrb	r0, [r7, r1]
 80087f2:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80087f4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80087f8:	e7a3      	b.n	8008742 <get_fat.isra.8+0x66>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80087fa:	78c3      	ldrb	r3, [r0, #3]
 80087fc:	7840      	ldrb	r0, [r0, #1]
 80087fe:	b31b      	cbz	r3, 8008848 <get_fat.isra.8+0x16c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008800:	2301      	movs	r3, #1
 8008802:	4642      	mov	r2, r8
 8008804:	4639      	mov	r1, r7
 8008806:	f7ff f971 	bl	8007aec <disk_write>
 800880a:	2800      	cmp	r0, #0
 800880c:	f040 8089 	bne.w	8008922 <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008810:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008812:	69f3      	ldr	r3, [r6, #28]
 8008814:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8008818:	70f0      	strb	r0, [r6, #3]
 800881a:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800881c:	429a      	cmp	r2, r3
 800881e:	d213      	bcs.n	8008848 <get_fat.isra.8+0x16c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008820:	f896 9002 	ldrb.w	r9, [r6, #2]
 8008824:	f1b9 0f01 	cmp.w	r9, #1
 8008828:	d802      	bhi.n	8008830 <get_fat.isra.8+0x154>
 800882a:	e00d      	b.n	8008848 <get_fat.isra.8+0x16c>
 800882c:	69f3      	ldr	r3, [r6, #28]
 800882e:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8008830:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008832:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8008836:	2301      	movs	r3, #1
 8008838:	4639      	mov	r1, r7
 800883a:	4642      	mov	r2, r8
 800883c:	f7ff f956 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008840:	f1b9 0f01 	cmp.w	r9, #1
 8008844:	d1f2      	bne.n	800882c <get_fat.isra.8+0x150>
 8008846:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008848:	2301      	movs	r3, #1
 800884a:	462a      	mov	r2, r5
 800884c:	4639      	mov	r1, r7
 800884e:	f7ff f93f 	bl	8007ad0 <disk_read>
 8008852:	2800      	cmp	r0, #0
 8008854:	d161      	bne.n	800891a <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 8008856:	6335      	str	r5, [r6, #48]	; 0x30
 8008858:	e780      	b.n	800875c <get_fat.isra.8+0x80>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800885a:	78c2      	ldrb	r2, [r0, #3]
 800885c:	f100 0934 	add.w	r9, r0, #52	; 0x34
 8008860:	7840      	ldrb	r0, [r0, #1]
 8008862:	b302      	cbz	r2, 80088a6 <get_fat.isra.8+0x1ca>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008864:	4642      	mov	r2, r8
 8008866:	4649      	mov	r1, r9
 8008868:	f7ff f940 	bl	8007aec <disk_write>
 800886c:	2800      	cmp	r0, #0
 800886e:	d158      	bne.n	8008922 <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008870:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008872:	69f3      	ldr	r3, [r6, #28]
 8008874:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8008878:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800887a:	429a      	cmp	r2, r3
 800887c:	d212      	bcs.n	80088a4 <get_fat.isra.8+0x1c8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800887e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8008882:	f1ba 0f01 	cmp.w	sl, #1
 8008886:	d801      	bhi.n	800888c <get_fat.isra.8+0x1b0>
 8008888:	e00c      	b.n	80088a4 <get_fat.isra.8+0x1c8>
 800888a:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 800888c:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800888e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8008892:	2301      	movs	r3, #1
 8008894:	4649      	mov	r1, r9
 8008896:	4642      	mov	r2, r8
 8008898:	7870      	ldrb	r0, [r6, #1]
 800889a:	f7ff f927 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800889e:	f1ba 0f01 	cmp.w	sl, #1
 80088a2:	d1f2      	bne.n	800888a <get_fat.isra.8+0x1ae>
 80088a4:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80088a6:	4649      	mov	r1, r9
 80088a8:	2301      	movs	r3, #1
 80088aa:	462a      	mov	r2, r5
 80088ac:	f7ff f910 	bl	8007ad0 <disk_read>
 80088b0:	bb98      	cbnz	r0, 800891a <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 80088b2:	46a8      	mov	r8, r5
 80088b4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80088b6:	6335      	str	r5, [r6, #48]	; 0x30
 80088b8:	e72a      	b.n	8008710 <get_fat.isra.8+0x34>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80088ba:	78f3      	ldrb	r3, [r6, #3]
 80088bc:	f106 0a34 	add.w	sl, r6, #52	; 0x34
 80088c0:	7870      	ldrb	r0, [r6, #1]
 80088c2:	b30b      	cbz	r3, 8008908 <get_fat.isra.8+0x22c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80088c4:	2301      	movs	r3, #1
 80088c6:	4642      	mov	r2, r8
 80088c8:	4651      	mov	r1, sl
 80088ca:	f7ff f90f 	bl	8007aec <disk_write>
 80088ce:	bb40      	cbnz	r0, 8008922 <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80088d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80088d2:	69f3      	ldr	r3, [r6, #28]
 80088d4:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80088d8:	70f0      	strb	r0, [r6, #3]
 80088da:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80088dc:	429a      	cmp	r2, r3
 80088de:	d213      	bcs.n	8008908 <get_fat.isra.8+0x22c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80088e0:	f896 b002 	ldrb.w	fp, [r6, #2]
 80088e4:	f1bb 0f01 	cmp.w	fp, #1
 80088e8:	d802      	bhi.n	80088f0 <get_fat.isra.8+0x214>
 80088ea:	e00d      	b.n	8008908 <get_fat.isra.8+0x22c>
 80088ec:	69f3      	ldr	r3, [r6, #28]
 80088ee:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 80088f0:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80088f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80088f6:	2301      	movs	r3, #1
 80088f8:	4651      	mov	r1, sl
 80088fa:	4642      	mov	r2, r8
 80088fc:	f7ff f8f6 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008900:	f1bb 0f01 	cmp.w	fp, #1
 8008904:	d1f2      	bne.n	80088ec <get_fat.isra.8+0x210>
 8008906:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008908:	4651      	mov	r1, sl
 800890a:	2301      	movs	r3, #1
 800890c:	464a      	mov	r2, r9
 800890e:	f7ff f8df 	bl	8007ad0 <disk_read>
 8008912:	b910      	cbnz	r0, 800891a <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 8008914:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
 8008918:	e705      	b.n	8008726 <get_fat.isra.8+0x4a>
 800891a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800891e:	6330      	str	r0, [r6, #48]	; 0x30
 8008920:	e70f      	b.n	8008742 <get_fat.isra.8+0x66>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008926:	e70c      	b.n	8008742 <get_fat.isra.8+0x66>

08008928 <create_chain>:
{
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	b087      	sub	sp, #28
 800892e:	4682      	mov	sl, r0
	FATFS *fs = obj->fs;
 8008930:	f8d0 b000 	ldr.w	fp, [r0]
	if (clst == 0) {	/* Create a new chain */
 8008934:	9101      	str	r1, [sp, #4]
 8008936:	2900      	cmp	r1, #0
 8008938:	f040 818f 	bne.w	8008c5a <create_chain+0x332>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800893c:	f8db 8010 	ldr.w	r8, [fp, #16]
 8008940:	f8db 3018 	ldr.w	r3, [fp, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008944:	f1b8 0f00 	cmp.w	r8, #0
 8008948:	d020      	beq.n	800898c <create_chain+0x64>
 800894a:	4598      	cmp	r8, r3
 800894c:	bf28      	it	cs
 800894e:	f04f 0801 	movcs.w	r8, #1
 8008952:	4644      	mov	r4, r8
 8008954:	46d1      	mov	r9, sl
			ncl++;							/* Next cluster */
 8008956:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008958:	429c      	cmp	r4, r3
 800895a:	d31a      	bcc.n	8008992 <create_chain+0x6a>
				if (ncl > scl) return 0;	/* No free cluster */
 800895c:	f1b8 0f01 	cmp.w	r8, #1
 8008960:	f240 8176 	bls.w	8008c50 <create_chain+0x328>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008964:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 8008968:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800896a:	69ab      	ldr	r3, [r5, #24]
 800896c:	42a3      	cmp	r3, r4
 800896e:	d908      	bls.n	8008982 <create_chain+0x5a>
		switch (fs->fs_type) {
 8008970:	782b      	ldrb	r3, [r5, #0]
 8008972:	2b02      	cmp	r3, #2
 8008974:	f000 8124 	beq.w	8008bc0 <create_chain+0x298>
 8008978:	2b03      	cmp	r3, #3
 800897a:	f000 80aa 	beq.w	8008ad2 <create_chain+0x1aa>
 800897e:	2b01      	cmp	r3, #1
 8008980:	d00c      	beq.n	800899c <create_chain+0x74>
			val = 1;	/* Internal error */
 8008982:	2401      	movs	r4, #1
}
 8008984:	4620      	mov	r0, r4
 8008986:	b007      	add	sp, #28
 8008988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800898c:	f04f 0801 	mov.w	r8, #1
 8008990:	e7df      	b.n	8008952 <create_chain+0x2a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008992:	2c01      	cmp	r4, #1
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008994:	f8d9 5000 	ldr.w	r5, [r9]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008998:	d9f3      	bls.n	8008982 <create_chain+0x5a>
 800899a:	e7e6      	b.n	800896a <create_chain+0x42>
			bc = (UINT)clst; bc += bc / 2;
 800899c:	eb04 0654 	add.w	r6, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089a0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80089a2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089a6:	eb02 2756 	add.w	r7, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80089aa:	4557      	cmp	r7, sl
 80089ac:	d036      	beq.n	8008a1c <create_chain+0xf4>
 80089ae:	f105 0134 	add.w	r1, r5, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80089b2:	78ea      	ldrb	r2, [r5, #3]
 80089b4:	7868      	ldrb	r0, [r5, #1]
 80089b6:	9102      	str	r1, [sp, #8]
 80089b8:	b332      	cbz	r2, 8008a08 <create_chain+0xe0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80089ba:	4652      	mov	r2, sl
 80089bc:	f7ff f896 	bl	8007aec <disk_write>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	f040 815e 	bne.w	8008c82 <create_chain+0x35a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80089c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80089c8:	69eb      	ldr	r3, [r5, #28]
 80089ca:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 80089ce:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d217      	bcs.n	8008a04 <create_chain+0xdc>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80089d4:	78aa      	ldrb	r2, [r5, #2]
 80089d6:	2a01      	cmp	r2, #1
 80089d8:	d914      	bls.n	8008a04 <create_chain+0xdc>
 80089da:	f8cd 800c 	str.w	r8, [sp, #12]
 80089de:	4690      	mov	r8, r2
 80089e0:	9404      	str	r4, [sp, #16]
 80089e2:	9c02      	ldr	r4, [sp, #8]
 80089e4:	e000      	b.n	80089e8 <create_chain+0xc0>
 80089e6:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 80089e8:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80089ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80089ee:	2301      	movs	r3, #1
 80089f0:	4621      	mov	r1, r4
 80089f2:	4652      	mov	r2, sl
 80089f4:	7868      	ldrb	r0, [r5, #1]
 80089f6:	f7ff f879 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80089fa:	f1b8 0f01 	cmp.w	r8, #1
 80089fe:	d1f2      	bne.n	80089e6 <create_chain+0xbe>
 8008a00:	e9dd 8403 	ldrd	r8, r4, [sp, #12]
 8008a04:	7868      	ldrb	r0, [r5, #1]
 8008a06:	9902      	ldr	r1, [sp, #8]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008a08:	2301      	movs	r3, #1
 8008a0a:	463a      	mov	r2, r7
 8008a0c:	f7ff f860 	bl	8007ad0 <disk_read>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f040 810c 	bne.w	8008c2e <create_chain+0x306>
			fs->winsect = sector;
 8008a16:	46ba      	mov	sl, r7
 8008a18:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008a1a:	632f      	str	r7, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8008a1c:	f3c6 0308 	ubfx	r3, r6, #0, #9
 8008a20:	3601      	adds	r6, #1
 8008a22:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a24:	eb02 2756 	add.w	r7, r2, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8008a28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a2c:	4557      	cmp	r7, sl
			wc = fs->win[bc++ % SS(fs)];
 8008a2e:	9302      	str	r3, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a30:	d038      	beq.n	8008aa4 <create_chain+0x17c>
 8008a32:	f105 0234 	add.w	r2, r5, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a36:	78eb      	ldrb	r3, [r5, #3]
 8008a38:	7868      	ldrb	r0, [r5, #1]
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	9203      	str	r2, [sp, #12]
 8008a3e:	b33b      	cbz	r3, 8008a90 <create_chain+0x168>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008a40:	2301      	movs	r3, #1
 8008a42:	4652      	mov	r2, sl
 8008a44:	f7ff f852 	bl	8007aec <disk_write>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	f040 811a 	bne.w	8008c82 <create_chain+0x35a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008a4e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008a50:	69eb      	ldr	r3, [r5, #28]
 8008a52:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 8008a56:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d218      	bcs.n	8008a8e <create_chain+0x166>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a5c:	78aa      	ldrb	r2, [r5, #2]
 8008a5e:	7868      	ldrb	r0, [r5, #1]
 8008a60:	2a01      	cmp	r2, #1
 8008a62:	d915      	bls.n	8008a90 <create_chain+0x168>
 8008a64:	f8cd 8010 	str.w	r8, [sp, #16]
 8008a68:	4690      	mov	r8, r2
 8008a6a:	9405      	str	r4, [sp, #20]
 8008a6c:	9c03      	ldr	r4, [sp, #12]
 8008a6e:	e001      	b.n	8008a74 <create_chain+0x14c>
 8008a70:	69eb      	ldr	r3, [r5, #28]
 8008a72:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8008a74:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a76:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	4652      	mov	r2, sl
 8008a80:	f7ff f834 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a84:	f1b8 0f01 	cmp.w	r8, #1
 8008a88:	d1f2      	bne.n	8008a70 <create_chain+0x148>
 8008a8a:	e9dd 8404 	ldrd	r8, r4, [sp, #16]
 8008a8e:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008a90:	9903      	ldr	r1, [sp, #12]
 8008a92:	2301      	movs	r3, #1
 8008a94:	463a      	mov	r2, r7
 8008a96:	f7ff f81b 	bl	8007ad0 <disk_read>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	f040 80c7 	bne.w	8008c2e <create_chain+0x306>
 8008aa0:	9b02      	ldr	r3, [sp, #8]
			fs->winsect = sector;
 8008aa2:	632f      	str	r7, [r5, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;
 8008aa4:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8008aa8:	4435      	add	r5, r6
 8008aaa:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
 8008aae:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008ab2:	07e3      	lsls	r3, r4, #31
 8008ab4:	bf4c      	ite	mi
 8008ab6:	093f      	lsrmi	r7, r7, #4
 8008ab8:	f3c7 070b 	ubfxpl	r7, r7, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 8008abc:	2f00      	cmp	r7, #0
 8008abe:	d051      	beq.n	8008b64 <create_chain+0x23c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008ac0:	2f01      	cmp	r7, #1
 8008ac2:	f000 80e4 	beq.w	8008c8e <create_chain+0x366>
			if (ncl == scl) return 0;		/* No free cluster */
 8008ac6:	45a0      	cmp	r8, r4
 8008ac8:	f000 80c2 	beq.w	8008c50 <create_chain+0x328>
 8008acc:	f8db 3018 	ldr.w	r3, [fp, #24]
 8008ad0:	e741      	b.n	8008956 <create_chain+0x2e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ad2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ad4:	f105 0634 	add.w	r6, r5, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ad8:	6b2f      	ldr	r7, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ada:	eb03 1ad4 	add.w	sl, r3, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ade:	45ba      	cmp	sl, r7
 8008ae0:	d031      	beq.n	8008b46 <create_chain+0x21e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008ae2:	78eb      	ldrb	r3, [r5, #3]
 8008ae4:	7868      	ldrb	r0, [r5, #1]
 8008ae6:	b32b      	cbz	r3, 8008b34 <create_chain+0x20c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008ae8:	2301      	movs	r3, #1
 8008aea:	463a      	mov	r2, r7
 8008aec:	4631      	mov	r1, r6
 8008aee:	f7fe fffd 	bl	8007aec <disk_write>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	f040 80c5 	bne.w	8008c82 <create_chain+0x35a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008af8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008afa:	69eb      	ldr	r3, [r5, #28]
 8008afc:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 8008afe:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d216      	bcs.n	8008b32 <create_chain+0x20a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b04:	78aa      	ldrb	r2, [r5, #2]
 8008b06:	7868      	ldrb	r0, [r5, #1]
 8008b08:	2a01      	cmp	r2, #1
 8008b0a:	d913      	bls.n	8008b34 <create_chain+0x20c>
 8008b0c:	f8cd 8008 	str.w	r8, [sp, #8]
 8008b10:	4690      	mov	r8, r2
 8008b12:	e001      	b.n	8008b18 <create_chain+0x1f0>
 8008b14:	69eb      	ldr	r3, [r5, #28]
 8008b16:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8008b18:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b1a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4631      	mov	r1, r6
 8008b22:	463a      	mov	r2, r7
 8008b24:	f7fe ffe2 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b28:	f1b8 0f01 	cmp.w	r8, #1
 8008b2c:	d1f2      	bne.n	8008b14 <create_chain+0x1ec>
 8008b2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008b32:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008b34:	2301      	movs	r3, #1
 8008b36:	4652      	mov	r2, sl
 8008b38:	4631      	mov	r1, r6
 8008b3a:	f7fe ffc9 	bl	8007ad0 <disk_read>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d175      	bne.n	8008c2e <create_chain+0x306>
			fs->winsect = sector;
 8008b42:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008b46:	00a3      	lsls	r3, r4, #2
 8008b48:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008b4c:	18f2      	adds	r2, r6, r3
	rv = rv << 8 | ptr[0];
 8008b4e:	5cf7      	ldrb	r7, [r6, r3]
	rv = rv << 8 | ptr[2];
 8008b50:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8008b52:	7853      	ldrb	r3, [r2, #1]
 8008b54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8008b58:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008b5c:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 8008b60:	2f00      	cmp	r7, #0
 8008b62:	d1ad      	bne.n	8008ac0 <create_chain+0x198>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008b64:	f8db 3018 	ldr.w	r3, [fp, #24]
 8008b68:	42a3      	cmp	r3, r4
 8008b6a:	f67f af0a 	bls.w	8008982 <create_chain+0x5a>
 8008b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b72:	4621      	mov	r1, r4
 8008b74:	4658      	mov	r0, fp
 8008b76:	f7fe ffff 	bl	8007b78 <put_fat.part.7>
		if (res == FR_OK && clst != 0) {
 8008b7a:	b970      	cbnz	r0, 8008b9a <create_chain+0x272>
 8008b7c:	9a01      	ldr	r2, [sp, #4]
 8008b7e:	b162      	cbz	r2, 8008b9a <create_chain+0x272>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008b80:	2a01      	cmp	r2, #1
 8008b82:	f67f aefe 	bls.w	8008982 <create_chain+0x5a>
 8008b86:	f8db 3018 	ldr.w	r3, [fp, #24]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	f4bf aef9 	bcs.w	8008982 <create_chain+0x5a>
 8008b90:	4611      	mov	r1, r2
 8008b92:	4658      	mov	r0, fp
 8008b94:	4622      	mov	r2, r4
 8008b96:	f7fe ffef 	bl	8007b78 <put_fat.part.7>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d16e      	bne.n	8008c7c <create_chain+0x354>
		fs->last_clst = ncl;
 8008b9e:	f8cb 4010 	str.w	r4, [fp, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008ba2:	e9db 2305 	ldrd	r2, r3, [fp, #20]
 8008ba6:	3b02      	subs	r3, #2
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d802      	bhi.n	8008bb2 <create_chain+0x28a>
 8008bac:	3a01      	subs	r2, #1
 8008bae:	f8cb 2014 	str.w	r2, [fp, #20]
		fs->fsi_flag |= 1;
 8008bb2:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8008bb6:	f043 0301 	orr.w	r3, r3, #1
 8008bba:	f88b 3004 	strb.w	r3, [fp, #4]
 8008bbe:	e6e1      	b.n	8008984 <create_chain+0x5c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008bc0:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8008bc2:	f105 0734 	add.w	r7, r5, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008bc6:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008bca:	eb06 2614 	add.w	r6, r6, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008bce:	4556      	cmp	r6, sl
 8008bd0:	d035      	beq.n	8008c3e <create_chain+0x316>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008bd2:	78eb      	ldrb	r3, [r5, #3]
 8008bd4:	7868      	ldrb	r0, [r5, #1]
 8008bd6:	b323      	cbz	r3, 8008c22 <create_chain+0x2fa>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4652      	mov	r2, sl
 8008bdc:	4639      	mov	r1, r7
 8008bde:	f7fe ff85 	bl	8007aec <disk_write>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d14d      	bne.n	8008c82 <create_chain+0x35a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008be6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008be8:	69eb      	ldr	r3, [r5, #28]
 8008bea:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 8008bee:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d215      	bcs.n	8008c20 <create_chain+0x2f8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008bf4:	78aa      	ldrb	r2, [r5, #2]
 8008bf6:	2a01      	cmp	r2, #1
 8008bf8:	d912      	bls.n	8008c20 <create_chain+0x2f8>
 8008bfa:	f8cd 8008 	str.w	r8, [sp, #8]
 8008bfe:	4690      	mov	r8, r2
 8008c00:	e000      	b.n	8008c04 <create_chain+0x2dc>
 8008c02:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8008c04:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c06:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	4652      	mov	r2, sl
 8008c10:	7868      	ldrb	r0, [r5, #1]
 8008c12:	f7fe ff6b 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c16:	f1b8 0f01 	cmp.w	r8, #1
 8008c1a:	d1f2      	bne.n	8008c02 <create_chain+0x2da>
 8008c1c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008c20:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008c22:	2301      	movs	r3, #1
 8008c24:	4632      	mov	r2, r6
 8008c26:	4639      	mov	r1, r7
 8008c28:	f7fe ff52 	bl	8007ad0 <disk_read>
 8008c2c:	b130      	cbz	r0, 8008c3c <create_chain+0x314>
			fs->winsect = sector;
 8008c2e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8008c32:	4620      	mov	r0, r4
			fs->winsect = sector;
 8008c34:	632c      	str	r4, [r5, #48]	; 0x30
}
 8008c36:	b007      	add	sp, #28
 8008c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8008c3c:	632e      	str	r6, [r5, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008c3e:	0063      	lsls	r3, r4, #1
 8008c40:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008c44:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8008c46:	5cff      	ldrb	r7, [r7, r3]
 8008c48:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008c4a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8008c4e:	e735      	b.n	8008abc <create_chain+0x194>
				if (ncl > scl) return 0;	/* No free cluster */
 8008c50:	2400      	movs	r4, #0
}
 8008c52:	4620      	mov	r0, r4
 8008c54:	b007      	add	sp, #28
 8008c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008c5a:	4658      	mov	r0, fp
 8008c5c:	f7ff fd3e 	bl	80086dc <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008c60:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008c62:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008c64:	f67f ae8d 	bls.w	8008982 <create_chain+0x5a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008c68:	1c42      	adds	r2, r0, #1
 8008c6a:	d00a      	beq.n	8008c82 <create_chain+0x35a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008c6c:	f8db 3018 	ldr.w	r3, [fp, #24]
 8008c70:	4283      	cmp	r3, r0
 8008c72:	f63f ae87 	bhi.w	8008984 <create_chain+0x5c>
 8008c76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008c7a:	e66a      	b.n	8008952 <create_chain+0x2a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008c7c:	2801      	cmp	r0, #1
 8008c7e:	f47f ae80 	bne.w	8008982 <create_chain+0x5a>
 8008c82:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8008c86:	4620      	mov	r0, r4
 8008c88:	b007      	add	sp, #28
 8008c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8e:	463c      	mov	r4, r7
 8008c90:	e678      	b.n	8008984 <create_chain+0x5c>
 8008c92:	bf00      	nop

08008c94 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dp->dptr = ofs;				/* Set current offset */
 8008c98:	2300      	movs	r3, #0
{
 8008c9a:	b089      	sub	sp, #36	; 0x24
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008c9c:	6884      	ldr	r4, [r0, #8]
{
 8008c9e:	4683      	mov	fp, r0
 8008ca0:	9100      	str	r1, [sp, #0]
	dp->dptr = ofs;				/* Set current offset */
 8008ca2:	6143      	str	r3, [r0, #20]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008ca4:	f8d0 a000 	ldr.w	sl, [r0]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008ca8:	2c00      	cmp	r4, #0
 8008caa:	d160      	bne.n	8008d6e <dir_alloc+0xda>
 8008cac:	f89a 3000 	ldrb.w	r3, [sl]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d857      	bhi.n	8008d64 <dir_alloc+0xd0>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008cb4:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 80b6 	beq.w	8008e2a <dir_alloc+0x196>
		dp->sect = fs->dirbase;
 8008cbe:	f8da 8028 	ldr.w	r8, [sl, #40]	; 0x28
 8008cc2:	f8cb 801c 	str.w	r8, [fp, #28]
	dp->clust = clst;					/* Current cluster# */
 8008cc6:	f8cb 4018 	str.w	r4, [fp, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008cca:	f1b8 0f00 	cmp.w	r8, #0
 8008cce:	f000 80ac 	beq.w	8008e2a <dir_alloc+0x196>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008cd2:	f10a 0634 	add.w	r6, sl, #52	; 0x34
 8008cd6:	4647      	mov	r7, r8
 8008cd8:	f04f 0900 	mov.w	r9, #0
 8008cdc:	46b0      	mov	r8, r6
 8008cde:	f8cb 6020 	str.w	r6, [fp, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ce2:	f8da 4030 	ldr.w	r4, [sl, #48]	; 0x30
 8008ce6:	42bc      	cmp	r4, r7
 8008ce8:	f000 80c0 	beq.w	8008e6c <dir_alloc+0x1d8>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008cec:	f89a 3003 	ldrb.w	r3, [sl, #3]
 8008cf0:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8008cf4:	b333      	cbz	r3, 8008d44 <dir_alloc+0xb0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	4641      	mov	r1, r8
 8008cfc:	f7fe fef6 	bl	8007aec <disk_write>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	f040 80ad 	bne.w	8008e60 <dir_alloc+0x1cc>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008d06:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8008d0a:	f8da 301c 	ldr.w	r3, [sl, #28]
 8008d0e:	1aa2      	subs	r2, r4, r2
			fs->wflag = 0;
 8008d10:	f88a 0003 	strb.w	r0, [sl, #3]
 8008d14:	f89a 0001 	ldrb.w	r0, [sl, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d213      	bcs.n	8008d44 <dir_alloc+0xb0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d1c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8008d20:	2d01      	cmp	r5, #1
 8008d22:	d804      	bhi.n	8008d2e <dir_alloc+0x9a>
 8008d24:	e00e      	b.n	8008d44 <dir_alloc+0xb0>
 8008d26:	f8da 301c 	ldr.w	r3, [sl, #28]
 8008d2a:	f89a 0001 	ldrb.w	r0, [sl, #1]
					wsect += fs->fsize;
 8008d2e:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d30:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8008d32:	2301      	movs	r3, #1
 8008d34:	4641      	mov	r1, r8
 8008d36:	4622      	mov	r2, r4
 8008d38:	f7fe fed8 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d3c:	2d01      	cmp	r5, #1
 8008d3e:	d1f2      	bne.n	8008d26 <dir_alloc+0x92>
 8008d40:	f89a 0001 	ldrb.w	r0, [sl, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008d44:	2301      	movs	r3, #1
 8008d46:	463a      	mov	r2, r7
 8008d48:	4641      	mov	r1, r8
 8008d4a:	f7fe fec1 	bl	8007ad0 <disk_read>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f000 8088 	beq.w	8008e64 <dir_alloc+0x1d0>
			fs->winsect = sector;
 8008d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 8008d58:	2001      	movs	r0, #1
			fs->winsect = sector;
 8008d5a:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
	return res;
}
 8008d5e:	b009      	add	sp, #36	; 0x24
 8008d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
 8008d64:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0a3      	beq.n	8008cb4 <dir_alloc+0x20>
 8008d6c:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008d6e:	f8ba 300a 	ldrh.w	r3, [sl, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d14e      	bne.n	8008e14 <dir_alloc+0x180>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008d76:	2c01      	cmp	r4, #1
 8008d78:	d957      	bls.n	8008e2a <dir_alloc+0x196>
 8008d7a:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008d7e:	42a3      	cmp	r3, r4
 8008d80:	d953      	bls.n	8008e2a <dir_alloc+0x196>
 8008d82:	4655      	mov	r5, sl
		switch (fs->fs_type) {
 8008d84:	782b      	ldrb	r3, [r5, #0]
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d053      	beq.n	8008e32 <dir_alloc+0x19e>
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	f000 811f 	beq.w	8008fce <dir_alloc+0x33a>
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d14a      	bne.n	8008e2a <dir_alloc+0x196>
			bc = (UINT)clst; bc += bc / 2;
 8008d94:	eb04 0654 	add.w	r6, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d98:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008d9a:	6b2f      	ldr	r7, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d9c:	eb02 2856 	add.w	r8, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008da0:	45b8      	cmp	r8, r7
 8008da2:	f000 816d 	beq.w	8009080 <dir_alloc+0x3ec>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008da6:	78ea      	ldrb	r2, [r5, #3]
 8008da8:	f105 0934 	add.w	r9, r5, #52	; 0x34
 8008dac:	7868      	ldrb	r0, [r5, #1]
 8008dae:	b312      	cbz	r2, 8008df6 <dir_alloc+0x162>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008db0:	463a      	mov	r2, r7
 8008db2:	4649      	mov	r1, r9
 8008db4:	f7fe fe9a 	bl	8007aec <disk_write>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d151      	bne.n	8008e60 <dir_alloc+0x1cc>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008dbc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008dbe:	69eb      	ldr	r3, [r5, #28]
 8008dc0:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 8008dc2:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d215      	bcs.n	8008df4 <dir_alloc+0x160>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008dc8:	78aa      	ldrb	r2, [r5, #2]
 8008dca:	2a01      	cmp	r2, #1
 8008dcc:	d912      	bls.n	8008df4 <dir_alloc+0x160>
 8008dce:	f8cd a000 	str.w	sl, [sp]
 8008dd2:	4692      	mov	sl, r2
 8008dd4:	e000      	b.n	8008dd8 <dir_alloc+0x144>
 8008dd6:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8008dd8:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008dda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8008dde:	2301      	movs	r3, #1
 8008de0:	4649      	mov	r1, r9
 8008de2:	463a      	mov	r2, r7
 8008de4:	7868      	ldrb	r0, [r5, #1]
 8008de6:	f7fe fe81 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008dea:	f1ba 0f01 	cmp.w	sl, #1
 8008dee:	d1f2      	bne.n	8008dd6 <dir_alloc+0x142>
 8008df0:	f8dd a000 	ldr.w	sl, [sp]
 8008df4:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008df6:	4649      	mov	r1, r9
 8008df8:	2301      	movs	r3, #1
 8008dfa:	4642      	mov	r2, r8
 8008dfc:	f7fe fe68 	bl	8007ad0 <disk_read>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	f000 8139 	beq.w	8009078 <dir_alloc+0x3e4>
			fs->winsect = sector;
 8008e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e0a:	2001      	movs	r0, #1
 8008e0c:	632b      	str	r3, [r5, #48]	; 0x30
}
 8008e0e:	b009      	add	sp, #36	; 0x24
 8008e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e14:	f8da 2018 	ldr.w	r2, [sl, #24]
	clst -= 2;
 8008e18:	f1a4 0802 	sub.w	r8, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e1c:	3a02      	subs	r2, #2
 8008e1e:	4590      	cmp	r8, r2
 8008e20:	f0c0 81c3 	bcc.w	80091aa <dir_alloc+0x516>
		dp->sect = clust2sect(fs, clst);
 8008e24:	2300      	movs	r3, #0
 8008e26:	e9cb 4306 	strd	r4, r3, [fp, #24]
		switch (fs->fs_type) {
 8008e2a:	2002      	movs	r0, #2
}
 8008e2c:	b009      	add	sp, #36	; 0x24
 8008e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008e32:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8008e34:	f105 0734 	add.w	r7, r5, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008e38:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008e3c:	eb06 2614 	add.w	r6, r6, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008e40:	4546      	cmp	r6, r8
 8008e42:	f000 8192 	beq.w	800916a <dir_alloc+0x4d6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008e46:	78eb      	ldrb	r3, [r5, #3]
 8008e48:	7868      	ldrb	r0, [r5, #1]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 8184 	beq.w	8009158 <dir_alloc+0x4c4>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008e50:	2301      	movs	r3, #1
 8008e52:	4642      	mov	r2, r8
 8008e54:	4639      	mov	r1, r7
 8008e56:	f7fe fe49 	bl	8007aec <disk_write>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	f000 8161 	beq.w	8009122 <dir_alloc+0x48e>
			fs->winsect = sector;
 8008e60:	2001      	movs	r0, #1
 8008e62:	e7e3      	b.n	8008e2c <dir_alloc+0x198>
 8008e64:	f8ca 7030 	str.w	r7, [sl, #48]	; 0x30
 8008e68:	f8db 6020 	ldr.w	r6, [fp, #32]
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008e6c:	7833      	ldrb	r3, [r6, #0]
 8008e6e:	2be5      	cmp	r3, #229	; 0xe5
 8008e70:	d026      	beq.n	8008ec0 <dir_alloc+0x22c>
 8008e72:	fab3 f383 	clz	r3, r3
 8008e76:	095b      	lsrs	r3, r3, #5
 8008e78:	bb13      	cbnz	r3, 8008ec0 <dir_alloc+0x22c>
				n = 0;					/* Not a blank entry. Restart to search */
 8008e7a:	4699      	mov	r9, r3
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008e7c:	f8db 4014 	ldr.w	r4, [fp, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008e80:	f8db 701c 	ldr.w	r7, [fp, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008e84:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008e86:	b327      	cbz	r7, 8008ed2 <dir_alloc+0x23e>
 8008e88:	4bbc      	ldr	r3, [pc, #752]	; (800917c <dir_alloc+0x4e8>)
 8008e8a:	429c      	cmp	r4, r3
 8008e8c:	d821      	bhi.n	8008ed2 <dir_alloc+0x23e>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008e8e:	f3c4 0608 	ubfx	r6, r4, #0, #9
	FATFS *fs = dp->obj.fs;
 8008e92:	f8db 5000 	ldr.w	r5, [fp]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008e96:	b94e      	cbnz	r6, 8008eac <dir_alloc+0x218>
		dp->sect++;				/* Next sector */
 8008e98:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 8008e9a:	f8db 1018 	ldr.w	r1, [fp, #24]
		dp->sect++;				/* Next sector */
 8008e9e:	f8cb 701c 	str.w	r7, [fp, #28]
		if (!dp->clust) {		/* Static table */
 8008ea2:	b9c1      	cbnz	r1, 8008ed6 <dir_alloc+0x242>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008ea4:	892b      	ldrh	r3, [r5, #8]
 8008ea6:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8008eaa:	d910      	bls.n	8008ece <dir_alloc+0x23a>
 8008eac:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8008eb0:	9301      	str	r3, [sp, #4]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008eb2:	4433      	add	r3, r6
	dp->dptr = ofs;						/* Current entry */
 8008eb4:	f8cb 4014 	str.w	r4, [fp, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008eb8:	461e      	mov	r6, r3
 8008eba:	f8cb 3020 	str.w	r3, [fp, #32]
 8008ebe:	e710      	b.n	8008ce2 <dir_alloc+0x4e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008ec0:	f109 0901 	add.w	r9, r9, #1
 8008ec4:	9b00      	ldr	r3, [sp, #0]
 8008ec6:	4599      	cmp	r9, r3
 8008ec8:	d1d8      	bne.n	8008e7c <dir_alloc+0x1e8>
 8008eca:	2000      	movs	r0, #0
	return res;
 8008ecc:	e7ae      	b.n	8008e2c <dir_alloc+0x198>
				dp->sect = 0; return FR_NO_FILE;
 8008ece:	f8cb 101c 	str.w	r1, [fp, #28]
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008ed2:	2007      	movs	r0, #7
 8008ed4:	e7aa      	b.n	8008e2c <dir_alloc+0x198>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ed6:	896b      	ldrh	r3, [r5, #10]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	ea13 2354 	ands.w	r3, r3, r4, lsr #9
 8008ede:	d1e5      	bne.n	8008eac <dir_alloc+0x218>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f7ff fbfb 	bl	80086dc <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008ee6:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ee8:	9002      	str	r0, [sp, #8]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008eea:	d99e      	bls.n	8008e2a <dir_alloc+0x196>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d0b7      	beq.n	8008e60 <dir_alloc+0x1cc>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008ef0:	69ab      	ldr	r3, [r5, #24]
 8008ef2:	4298      	cmp	r0, r3
 8008ef4:	f0c0 8144 	bcc.w	8009180 <dir_alloc+0x4ec>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008ef8:	f8db 1018 	ldr.w	r1, [fp, #24]
 8008efc:	4658      	mov	r0, fp
 8008efe:	f7ff fd13 	bl	8008928 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008f02:	9002      	str	r0, [sp, #8]
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d0e4      	beq.n	8008ed2 <dir_alloc+0x23e>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008f08:	2801      	cmp	r0, #1
 8008f0a:	d08e      	beq.n	8008e2a <dir_alloc+0x196>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d0a7      	beq.n	8008e60 <dir_alloc+0x1cc>
 8008f10:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8008f14:	461a      	mov	r2, r3
 8008f16:	9304      	str	r3, [sp, #16]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008f18:	78eb      	ldrb	r3, [r5, #3]
 8008f1a:	9201      	str	r2, [sp, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f040 814f 	bne.w	80091c0 <dir_alloc+0x52c>
	clst -= 2;
 8008f22:	9b02      	ldr	r3, [sp, #8]
 8008f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f28:	2100      	movs	r1, #0
 8008f2a:	9804      	ldr	r0, [sp, #16]
 8008f2c:	1e9f      	subs	r7, r3, #2
 8008f2e:	9703      	str	r7, [sp, #12]
 8008f30:	f004 fa5e 	bl	800d3f0 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f34:	69ab      	ldr	r3, [r5, #24]
 8008f36:	896a      	ldrh	r2, [r5, #10]
 8008f38:	3b02      	subs	r3, #2
 8008f3a:	429f      	cmp	r7, r3
 8008f3c:	f080 813e 	bcs.w	80091bc <dir_alloc+0x528>
	return clst * fs->csize + fs->database;
 8008f40:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f42:	fb07 3702 	mla	r7, r7, r2, r3
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f46:	632f      	str	r7, [r5, #48]	; 0x30
 8008f48:	2a00      	cmp	r2, #0
 8008f4a:	f000 8162 	beq.w	8009212 <dir_alloc+0x57e>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f8cd 801c 	str.w	r8, [sp, #28]
 8008f54:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 8008f58:	4699      	mov	r9, r3
 8008f5a:	f8dd a010 	ldr.w	sl, [sp, #16]
						fs->wflag = 1;
 8008f5e:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008f62:	463a      	mov	r2, r7
 8008f64:	4651      	mov	r1, sl
 8008f66:	7868      	ldrb	r0, [r5, #1]
						fs->wflag = 1;
 8008f68:	70eb      	strb	r3, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	f7fe fdbe 	bl	8007aec <disk_write>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	f47f af75 	bne.w	8008e60 <dir_alloc+0x1cc>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f76:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008f78:	69eb      	ldr	r3, [r5, #28]
 8008f7a:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 8008f7c:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d212      	bcs.n	8008fa8 <dir_alloc+0x314>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f82:	f895 8002 	ldrb.w	r8, [r5, #2]
 8008f86:	f1b8 0f01 	cmp.w	r8, #1
 8008f8a:	d801      	bhi.n	8008f90 <dir_alloc+0x2fc>
 8008f8c:	e00c      	b.n	8008fa8 <dir_alloc+0x314>
 8008f8e:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8008f90:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8008f96:	2301      	movs	r3, #1
 8008f98:	4651      	mov	r1, sl
 8008f9a:	463a      	mov	r2, r7
 8008f9c:	7868      	ldrb	r0, [r5, #1]
 8008f9e:	f7fe fda5 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008fa2:	f1b8 0f01 	cmp.w	r8, #1
 8008fa6:	d1f2      	bne.n	8008f8e <dir_alloc+0x2fa>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008fa8:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8008faa:	f109 0901 	add.w	r9, r9, #1
 8008fae:	896b      	ldrh	r3, [r5, #10]
 8008fb0:	3701      	adds	r7, #1
 8008fb2:	4599      	cmp	r9, r3
 8008fb4:	632f      	str	r7, [r5, #48]	; 0x30
 8008fb6:	d3d2      	bcc.n	8008f5e <dir_alloc+0x2ca>
 8008fb8:	464b      	mov	r3, r9
 8008fba:	f8dd a018 	ldr.w	sl, [sp, #24]
 8008fbe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008fc2:	f8dd 801c 	ldr.w	r8, [sp, #28]
					fs->winsect -= n;							/* Restore window offset */
 8008fc6:	1afb      	subs	r3, r7, r3
 8008fc8:	632b      	str	r3, [r5, #48]	; 0x30
 8008fca:	9b02      	ldr	r3, [sp, #8]
 8008fcc:	e0de      	b.n	800918c <dir_alloc+0x4f8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fd0:	f105 0634 	add.w	r6, r5, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008fd4:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fd8:	eb03 17d4 	add.w	r7, r3, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008fdc:	4547      	cmp	r7, r8
 8008fde:	d02f      	beq.n	8009040 <dir_alloc+0x3ac>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008fe0:	78eb      	ldrb	r3, [r5, #3]
 8008fe2:	7868      	ldrb	r0, [r5, #1]
 8008fe4:	b31b      	cbz	r3, 800902e <dir_alloc+0x39a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	4642      	mov	r2, r8
 8008fea:	4631      	mov	r1, r6
 8008fec:	f7fe fd7e 	bl	8007aec <disk_write>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	f47f af35 	bne.w	8008e60 <dir_alloc+0x1cc>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008ff6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008ff8:	69eb      	ldr	r3, [r5, #28]
 8008ffa:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8008ffe:	70e8      	strb	r0, [r5, #3]
 8009000:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009002:	429a      	cmp	r2, r3
 8009004:	d213      	bcs.n	800902e <dir_alloc+0x39a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009006:	f895 9002 	ldrb.w	r9, [r5, #2]
 800900a:	f1b9 0f01 	cmp.w	r9, #1
 800900e:	d802      	bhi.n	8009016 <dir_alloc+0x382>
 8009010:	e00d      	b.n	800902e <dir_alloc+0x39a>
 8009012:	69eb      	ldr	r3, [r5, #28]
 8009014:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8009016:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009018:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800901c:	2301      	movs	r3, #1
 800901e:	4631      	mov	r1, r6
 8009020:	4642      	mov	r2, r8
 8009022:	f7fe fd63 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009026:	f1b9 0f01 	cmp.w	r9, #1
 800902a:	d1f2      	bne.n	8009012 <dir_alloc+0x37e>
 800902c:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800902e:	2301      	movs	r3, #1
 8009030:	463a      	mov	r2, r7
 8009032:	4631      	mov	r1, r6
 8009034:	f7fe fd4c 	bl	8007ad0 <disk_read>
 8009038:	2800      	cmp	r0, #0
 800903a:	f47f aee4 	bne.w	8008e06 <dir_alloc+0x172>
			fs->winsect = sector;
 800903e:	632f      	str	r7, [r5, #48]	; 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009040:	00a4      	lsls	r4, r4, #2
 8009042:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8009046:	1932      	adds	r2, r6, r4
	rv = rv << 8 | ptr[0];
 8009048:	5d34      	ldrb	r4, [r6, r4]
	rv = rv << 8 | ptr[2];
 800904a:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 800904c:	7853      	ldrb	r3, [r2, #1]
 800904e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8009052:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009056:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800905a:	2c01      	cmp	r4, #1
 800905c:	f67f aee5 	bls.w	8008e2a <dir_alloc+0x196>
 8009060:	f8da 3018 	ldr.w	r3, [sl, #24]
 8009064:	42a3      	cmp	r3, r4
 8009066:	f67f aee0 	bls.w	8008e2a <dir_alloc+0x196>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800906a:	f8db 5000 	ldr.w	r5, [fp]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800906e:	69ab      	ldr	r3, [r5, #24]
 8009070:	42a3      	cmp	r3, r4
 8009072:	f63f ae87 	bhi.w	8008d84 <dir_alloc+0xf0>
 8009076:	e6d8      	b.n	8008e2a <dir_alloc+0x196>
			fs->winsect = sector;
 8009078:	4647      	mov	r7, r8
 800907a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800907c:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8009080:	f3c6 0308 	ubfx	r3, r6, #0, #9
 8009084:	3601      	adds	r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009086:	eb02 2856 	add.w	r8, r2, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800908a:	442b      	add	r3, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800908c:	45b8      	cmp	r8, r7
			wc = fs->win[bc++ % SS(fs)];
 800908e:	f893 9034 	ldrb.w	r9, [r3, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009092:	d039      	beq.n	8009108 <dir_alloc+0x474>
 8009094:	f105 0234 	add.w	r2, r5, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009098:	78eb      	ldrb	r3, [r5, #3]
 800909a:	7868      	ldrb	r0, [r5, #1]
 800909c:	4611      	mov	r1, r2
 800909e:	9200      	str	r2, [sp, #0]
 80090a0:	b343      	cbz	r3, 80090f4 <dir_alloc+0x460>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80090a2:	2301      	movs	r3, #1
 80090a4:	463a      	mov	r2, r7
 80090a6:	f7fe fd21 	bl	8007aec <disk_write>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	f47f aed8 	bne.w	8008e60 <dir_alloc+0x1cc>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80090b0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80090b2:	69eb      	ldr	r3, [r5, #28]
 80090b4:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 80090b6:	70e8      	strb	r0, [r5, #3]
 80090b8:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d21a      	bcs.n	80090f4 <dir_alloc+0x460>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80090be:	f895 c002 	ldrb.w	ip, [r5, #2]
 80090c2:	4662      	mov	r2, ip
 80090c4:	2a01      	cmp	r2, #1
 80090c6:	d915      	bls.n	80090f4 <dir_alloc+0x460>
 80090c8:	f8cd a004 	str.w	sl, [sp, #4]
 80090cc:	46e2      	mov	sl, ip
 80090ce:	9402      	str	r4, [sp, #8]
 80090d0:	9c00      	ldr	r4, [sp, #0]
 80090d2:	e001      	b.n	80090d8 <dir_alloc+0x444>
 80090d4:	69eb      	ldr	r3, [r5, #28]
 80090d6:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 80090d8:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80090da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80090de:	2301      	movs	r3, #1
 80090e0:	4621      	mov	r1, r4
 80090e2:	463a      	mov	r2, r7
 80090e4:	f7fe fd02 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80090e8:	f1ba 0f01 	cmp.w	sl, #1
 80090ec:	d1f2      	bne.n	80090d4 <dir_alloc+0x440>
 80090ee:	7868      	ldrb	r0, [r5, #1]
 80090f0:	e9dd a401 	ldrd	sl, r4, [sp, #4]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80090f4:	9900      	ldr	r1, [sp, #0]
 80090f6:	2301      	movs	r3, #1
 80090f8:	4642      	mov	r2, r8
 80090fa:	f7fe fce9 	bl	8007ad0 <disk_read>
 80090fe:	2800      	cmp	r0, #0
 8009100:	f47f ae81 	bne.w	8008e06 <dir_alloc+0x172>
			fs->winsect = sector;
 8009104:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;
 8009108:	f3c6 0608 	ubfx	r6, r6, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800910c:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800910e:	4435      	add	r5, r6
 8009110:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8009114:	ea49 2303 	orr.w	r3, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009118:	bf4c      	ite	mi
 800911a:	091c      	lsrmi	r4, r3, #4
 800911c:	f3c3 040b 	ubfxpl	r4, r3, #0, #12
 8009120:	e79b      	b.n	800905a <dir_alloc+0x3c6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009122:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009124:	69eb      	ldr	r3, [r5, #28]
 8009126:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 800912a:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800912c:	429a      	cmp	r2, r3
 800912e:	d212      	bcs.n	8009156 <dir_alloc+0x4c2>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009130:	f895 9002 	ldrb.w	r9, [r5, #2]
 8009134:	f1b9 0f01 	cmp.w	r9, #1
 8009138:	d801      	bhi.n	800913e <dir_alloc+0x4aa>
 800913a:	e00c      	b.n	8009156 <dir_alloc+0x4c2>
 800913c:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 800913e:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009140:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8009144:	2301      	movs	r3, #1
 8009146:	4639      	mov	r1, r7
 8009148:	4642      	mov	r2, r8
 800914a:	7868      	ldrb	r0, [r5, #1]
 800914c:	f7fe fcce 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009150:	f1b9 0f01 	cmp.w	r9, #1
 8009154:	d1f2      	bne.n	800913c <dir_alloc+0x4a8>
 8009156:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009158:	2301      	movs	r3, #1
 800915a:	4632      	mov	r2, r6
 800915c:	4639      	mov	r1, r7
 800915e:	f7fe fcb7 	bl	8007ad0 <disk_read>
 8009162:	2800      	cmp	r0, #0
 8009164:	f47f ae4f 	bne.w	8008e06 <dir_alloc+0x172>
			fs->winsect = sector;
 8009168:	632e      	str	r6, [r5, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800916a:	0064      	lsls	r4, r4, #1
 800916c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8009170:	193b      	adds	r3, r7, r4
	rv = rv << 8 | ptr[0];
 8009172:	5d3c      	ldrb	r4, [r7, r4]
 8009174:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009176:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800917a:	e76e      	b.n	800905a <dir_alloc+0x3c6>
 800917c:	001fffff 	.word	0x001fffff
 8009180:	1e83      	subs	r3, r0, #2
 8009182:	9303      	str	r3, [sp, #12]
 8009184:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8009188:	9301      	str	r3, [sp, #4]
 800918a:	4603      	mov	r3, r0
				dp->clust = clst;		/* Initialize data for new cluster */
 800918c:	f8cb 3018 	str.w	r3, [fp, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009190:	69ab      	ldr	r3, [r5, #24]
 8009192:	9a03      	ldr	r2, [sp, #12]
 8009194:	3b02      	subs	r3, #2
 8009196:	4293      	cmp	r3, r2
 8009198:	d90e      	bls.n	80091b8 <dir_alloc+0x524>
	return clst * fs->csize + fs->database;
 800919a:	896f      	ldrh	r7, [r5, #10]
 800919c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800919e:	fb02 3707 	mla	r7, r2, r7, r3
				dp->sect = clust2sect(fs, clst);
 80091a2:	f8cb 701c 	str.w	r7, [fp, #28]
 80091a6:	9b01      	ldr	r3, [sp, #4]
 80091a8:	e683      	b.n	8008eb2 <dir_alloc+0x21e>
	return clst * fs->csize + fs->database;
 80091aa:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 80091ae:	fb08 2803 	mla	r8, r8, r3, r2
		dp->sect = clust2sect(fs, clst);
 80091b2:	f8cb 801c 	str.w	r8, [fp, #28]
 80091b6:	e586      	b.n	8008cc6 <dir_alloc+0x32>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80091b8:	2700      	movs	r7, #0
 80091ba:	e7f2      	b.n	80091a2 <dir_alloc+0x50e>
 80091bc:	2700      	movs	r7, #0
 80091be:	e6c2      	b.n	8008f46 <dir_alloc+0x2b2>
		wsect = fs->winsect;	/* Current sector number */
 80091c0:	6b2f      	ldr	r7, [r5, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80091c2:	4611      	mov	r1, r2
 80091c4:	2301      	movs	r3, #1
 80091c6:	7868      	ldrb	r0, [r5, #1]
 80091c8:	463a      	mov	r2, r7
 80091ca:	f7fe fc8f 	bl	8007aec <disk_write>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	f47f ae46 	bne.w	8008e60 <dir_alloc+0x1cc>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80091d4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80091d6:	69eb      	ldr	r3, [r5, #28]
 80091d8:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 80091da:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80091dc:	429a      	cmp	r2, r3
 80091de:	f4bf aea0 	bcs.w	8008f22 <dir_alloc+0x28e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80091e2:	78aa      	ldrb	r2, [r5, #2]
 80091e4:	2a01      	cmp	r2, #1
 80091e6:	f67f ae9c 	bls.w	8008f22 <dir_alloc+0x28e>
 80091ea:	f8cd 900c 	str.w	r9, [sp, #12]
 80091ee:	4691      	mov	r9, r2
 80091f0:	e000      	b.n	80091f4 <dir_alloc+0x560>
 80091f2:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 80091f4:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80091f6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80091fa:	2301      	movs	r3, #1
 80091fc:	9904      	ldr	r1, [sp, #16]
 80091fe:	463a      	mov	r2, r7
 8009200:	7868      	ldrb	r0, [r5, #1]
 8009202:	f7fe fc73 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009206:	f1b9 0f01 	cmp.w	r9, #1
 800920a:	d1f2      	bne.n	80091f2 <dir_alloc+0x55e>
 800920c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009210:	e687      	b.n	8008f22 <dir_alloc+0x28e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009212:	4613      	mov	r3, r2
 8009214:	e6d7      	b.n	8008fc6 <dir_alloc+0x332>
 8009216:	bf00      	nop

08009218 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800921c:	2100      	movs	r1, #0
{
 800921e:	b087      	sub	sp, #28
 8009220:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8009222:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009224:	f7ff f8c2 	bl	80083ac <dir_sdi>
	if (res != FR_OK) return res;
 8009228:	4683      	mov	fp, r0
 800922a:	2800      	cmp	r0, #0
 800922c:	d13d      	bne.n	80092aa <dir_find+0x92>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800922e:	23ff      	movs	r3, #255	; 0xff
 8009230:	69e7      	ldr	r7, [r4, #28]
 8009232:	461d      	mov	r5, r3
 8009234:	9301      	str	r3, [sp, #4]
 8009236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800923a:	46a8      	mov	r8, r5
 800923c:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800923e:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8009240:	42bd      	cmp	r5, r7
 8009242:	d037      	beq.n	80092b4 <dir_find+0x9c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009244:	78f3      	ldrb	r3, [r6, #3]
 8009246:	f106 0934 	add.w	r9, r6, #52	; 0x34
 800924a:	7870      	ldrb	r0, [r6, #1]
 800924c:	b313      	cbz	r3, 8009294 <dir_find+0x7c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800924e:	2301      	movs	r3, #1
 8009250:	462a      	mov	r2, r5
 8009252:	4649      	mov	r1, r9
 8009254:	f7fe fc4a 	bl	8007aec <disk_write>
 8009258:	2800      	cmp	r0, #0
 800925a:	f040 80bf 	bne.w	80093dc <dir_find+0x1c4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800925e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009260:	69f3      	ldr	r3, [r6, #28]
 8009262:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8009264:	70f0      	strb	r0, [r6, #3]
 8009266:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009268:	429a      	cmp	r2, r3
 800926a:	d213      	bcs.n	8009294 <dir_find+0x7c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800926c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8009270:	f1ba 0f01 	cmp.w	sl, #1
 8009274:	d802      	bhi.n	800927c <dir_find+0x64>
 8009276:	e00d      	b.n	8009294 <dir_find+0x7c>
 8009278:	69f3      	ldr	r3, [r6, #28]
 800927a:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 800927c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800927e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8009282:	2301      	movs	r3, #1
 8009284:	4649      	mov	r1, r9
 8009286:	462a      	mov	r2, r5
 8009288:	f7fe fc30 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800928c:	f1ba 0f01 	cmp.w	sl, #1
 8009290:	d1f2      	bne.n	8009278 <dir_find+0x60>
 8009292:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009294:	4649      	mov	r1, r9
 8009296:	2301      	movs	r3, #1
 8009298:	463a      	mov	r2, r7
 800929a:	f7fe fc19 	bl	8007ad0 <disk_read>
 800929e:	b140      	cbz	r0, 80092b2 <dir_find+0x9a>
			fs->winsect = sector;
 80092a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 80092a4:	f04f 0b01 	mov.w	fp, #1
			fs->winsect = sector;
 80092a8:	6333      	str	r3, [r6, #48]	; 0x30
#endif
		res = dir_next(dp, 0);	/* Next entry */
	} while (res == FR_OK);

	return res;
}
 80092aa:	4658      	mov	r0, fp
 80092ac:	b007      	add	sp, #28
 80092ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80092b2:	6337      	str	r7, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];
 80092b4:	6a27      	ldr	r7, [r4, #32]
 80092b6:	783d      	ldrb	r5, [r7, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80092b8:	b345      	cbz	r5, 800930c <dir_find+0xf4>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80092ba:	7afa      	ldrb	r2, [r7, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80092bc:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80092be:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80092c2:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80092c4:	d003      	beq.n	80092ce <dir_find+0xb6>
 80092c6:	0712      	lsls	r2, r2, #28
 80092c8:	d526      	bpl.n	8009318 <dir_find+0x100>
 80092ca:	2b0f      	cmp	r3, #15
 80092cc:	d065      	beq.n	800939a <dir_find+0x182>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80092ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092d2:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80092d6:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80092d8:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092da:	4ba2      	ldr	r3, [pc, #648]	; (8009564 <dir_find+0x34c>)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80092dc:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092de:	69e7      	ldr	r7, [r4, #28]
 80092e0:	429d      	cmp	r5, r3
 80092e2:	d813      	bhi.n	800930c <dir_find+0xf4>
 80092e4:	b197      	cbz	r7, 800930c <dir_find+0xf4>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80092e6:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 80092ea:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80092ec:	b94a      	cbnz	r2, 8009302 <dir_find+0xea>
		dp->sect++;				/* Next sector */
 80092ee:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 80092f0:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 80092f2:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 80092f4:	2900      	cmp	r1, #0
 80092f6:	d163      	bne.n	80093c0 <dir_find+0x1a8>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80092f8:	8919      	ldrh	r1, [r3, #8]
 80092fa:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 80092fe:	f240 80bc 	bls.w	800947a <dir_find+0x262>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009302:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8009304:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009306:	4413      	add	r3, r2
 8009308:	6223      	str	r3, [r4, #32]
 800930a:	e798      	b.n	800923e <dir_find+0x26>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800930c:	f04f 0b04 	mov.w	fp, #4
}
 8009310:	4658      	mov	r0, fp
 8009312:	b007      	add	sp, #28
 8009314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009318:	2b0f      	cmp	r3, #15
 800931a:	d03e      	beq.n	800939a <dir_find+0x182>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800931c:	f1b8 0f00 	cmp.w	r8, #0
 8009320:	d05f      	beq.n	80093e2 <dir_find+0x1ca>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009322:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8009326:	07da      	lsls	r2, r3, #31
 8009328:	d4d1      	bmi.n	80092ce <dir_find+0xb6>
	} while (--cnt && r == 0);
 800932a:	783a      	ldrb	r2, [r7, #0]
 800932c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009330:	429a      	cmp	r2, r3
 8009332:	d1cc      	bne.n	80092ce <dir_find+0xb6>
 8009334:	787a      	ldrb	r2, [r7, #1]
 8009336:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800933a:	429a      	cmp	r2, r3
 800933c:	d1c7      	bne.n	80092ce <dir_find+0xb6>
 800933e:	78ba      	ldrb	r2, [r7, #2]
 8009340:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8009344:	429a      	cmp	r2, r3
 8009346:	d1c2      	bne.n	80092ce <dir_find+0xb6>
 8009348:	78fa      	ldrb	r2, [r7, #3]
 800934a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800934e:	429a      	cmp	r2, r3
 8009350:	d1bd      	bne.n	80092ce <dir_find+0xb6>
 8009352:	793a      	ldrb	r2, [r7, #4]
 8009354:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009358:	429a      	cmp	r2, r3
 800935a:	d1b8      	bne.n	80092ce <dir_find+0xb6>
 800935c:	797a      	ldrb	r2, [r7, #5]
 800935e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8009362:	429a      	cmp	r2, r3
 8009364:	d1b3      	bne.n	80092ce <dir_find+0xb6>
 8009366:	79ba      	ldrb	r2, [r7, #6]
 8009368:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800936c:	429a      	cmp	r2, r3
 800936e:	d1ae      	bne.n	80092ce <dir_find+0xb6>
 8009370:	79fa      	ldrb	r2, [r7, #7]
 8009372:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8009376:	429a      	cmp	r2, r3
 8009378:	d1a9      	bne.n	80092ce <dir_find+0xb6>
 800937a:	7a3a      	ldrb	r2, [r7, #8]
 800937c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009380:	429a      	cmp	r2, r3
 8009382:	d1a4      	bne.n	80092ce <dir_find+0xb6>
 8009384:	7a7a      	ldrb	r2, [r7, #9]
 8009386:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800938a:	429a      	cmp	r2, r3
 800938c:	d19f      	bne.n	80092ce <dir_find+0xb6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800938e:	7aba      	ldrb	r2, [r7, #10]
 8009390:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8009394:	429a      	cmp	r2, r3
 8009396:	d19a      	bne.n	80092ce <dir_find+0xb6>
 8009398:	e787      	b.n	80092aa <dir_find+0x92>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800939a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800939e:	065b      	lsls	r3, r3, #25
 80093a0:	d49a      	bmi.n	80092d8 <dir_find+0xc0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80093a2:	0668      	lsls	r0, r5, #25
 80093a4:	d56e      	bpl.n	8009484 <dir_find+0x26c>
						sum = dp->dir[LDIR_Chksum];
 80093a6:	7b7a      	ldrb	r2, [r7, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80093a8:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80093ac:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 80093ae:	9201      	str	r2, [sp, #4]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80093b0:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80093b2:	7b7b      	ldrb	r3, [r7, #13]
 80093b4:	9a01      	ldr	r2, [sp, #4]
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d07f      	beq.n	80094ba <dir_find+0x2a2>
 80093ba:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80093be:	e78b      	b.n	80092d8 <dir_find+0xc0>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80093c0:	8958      	ldrh	r0, [r3, #10]
 80093c2:	3801      	subs	r0, #1
 80093c4:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 80093c8:	d19b      	bne.n	8009302 <dir_find+0xea>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80093ca:	4618      	mov	r0, r3
 80093cc:	9203      	str	r2, [sp, #12]
 80093ce:	9302      	str	r3, [sp, #8]
 80093d0:	f7ff f984 	bl	80086dc <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80093d4:	2801      	cmp	r0, #1
 80093d6:	d96b      	bls.n	80094b0 <dir_find+0x298>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	d158      	bne.n	800948e <dir_find+0x276>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80093dc:	f04f 0b01 	mov.w	fp, #1
 80093e0:	e763      	b.n	80092aa <dir_find+0x92>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80093e2:	783b      	ldrb	r3, [r7, #0]
 80093e4:	787a      	ldrb	r2, [r7, #1]
 80093e6:	01d9      	lsls	r1, r3, #7
 80093e8:	78b8      	ldrb	r0, [r7, #2]
 80093ea:	f897 c004 	ldrb.w	ip, [r7, #4]
 80093ee:	ea41 0153 	orr.w	r1, r1, r3, lsr #1
 80093f2:	78fb      	ldrb	r3, [r7, #3]
 80093f4:	79bd      	ldrb	r5, [r7, #6]
 80093f6:	4411      	add	r1, r2
 80093f8:	f3c1 0246 	ubfx	r2, r1, #1, #7
 80093fc:	ea42 11c1 	orr.w	r1, r2, r1, lsl #7
 8009400:	fa50 f281 	uxtab	r2, r0, r1
 8009404:	7978      	ldrb	r0, [r7, #5]
 8009406:	f3c2 0146 	ubfx	r1, r2, #1, #7
 800940a:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
 800940e:	7a3a      	ldrb	r2, [r7, #8]
 8009410:	fa53 f181 	uxtab	r1, r3, r1
 8009414:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8009418:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
 800941c:	fa5c f381 	uxtab	r3, ip, r1
 8009420:	f3c3 0146 	ubfx	r1, r3, #1, #7
 8009424:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	fa50 f181 	uxtab	r1, r0, r1
 800942e:	f3c1 0046 	ubfx	r0, r1, #1, #7
 8009432:	ea40 11c1 	orr.w	r1, r0, r1, lsl #7
 8009436:	fa55 f081 	uxtab	r0, r5, r1
 800943a:	f3c0 0146 	ubfx	r1, r0, #1, #7
 800943e:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 8009442:	7a78      	ldrb	r0, [r7, #9]
 8009444:	fa53 f181 	uxtab	r1, r3, r1
 8009448:	f3c1 0346 	ubfx	r3, r1, #1, #7
 800944c:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8009450:	7ab9      	ldrb	r1, [r7, #10]
 8009452:	fa52 f383 	uxtab	r3, r2, r3
 8009456:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800945a:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 800945e:	fa50 f283 	uxtab	r2, r0, r3
 8009462:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8009466:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800946a:	9a01      	ldr	r2, [sp, #4]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800946c:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009470:	b2db      	uxtb	r3, r3
 8009472:	429a      	cmp	r2, r3
 8009474:	f47f af55 	bne.w	8009322 <dir_find+0x10a>
 8009478:	e717      	b.n	80092aa <dir_find+0x92>
				dp->sect = 0; return FR_NO_FILE;
 800947a:	2300      	movs	r3, #0
 800947c:	f04f 0b04 	mov.w	fp, #4
 8009480:	61e3      	str	r3, [r4, #28]
 8009482:	e712      	b.n	80092aa <dir_find+0x92>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009484:	45a8      	cmp	r8, r5
 8009486:	d094      	beq.n	80093b2 <dir_find+0x19a>
 8009488:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800948c:	e724      	b.n	80092d8 <dir_find+0xc0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800948e:	9b02      	ldr	r3, [sp, #8]
 8009490:	6999      	ldr	r1, [r3, #24]
 8009492:	4288      	cmp	r0, r1
 8009494:	d2f1      	bcs.n	800947a <dir_find+0x262>
				dp->clust = clst;		/* Initialize data for new cluster */
 8009496:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8009498:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800949a:	6999      	ldr	r1, [r3, #24]
 800949c:	9a03      	ldr	r2, [sp, #12]
 800949e:	3902      	subs	r1, #2
 80094a0:	4288      	cmp	r0, r1
 80094a2:	d208      	bcs.n	80094b6 <dir_find+0x29e>
	return clst * fs->csize + fs->database;
 80094a4:	895f      	ldrh	r7, [r3, #10]
 80094a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094a8:	fb00 1707 	mla	r7, r0, r7, r1
				dp->sect = clust2sect(fs, clst);
 80094ac:	61e7      	str	r7, [r4, #28]
 80094ae:	e728      	b.n	8009302 <dir_find+0xea>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80094b0:	f04f 0b02 	mov.w	fp, #2
 80094b4:	e6f9      	b.n	80092aa <dir_find+0x92>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80094b6:	4617      	mov	r7, r2
 80094b8:	e7f8      	b.n	80094ac <dir_find+0x294>
	rv = rv << 8 | ptr[0];
 80094ba:	7efa      	ldrb	r2, [r7, #27]
 80094bc:	7ebb      	ldrb	r3, [r7, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80094be:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80094c2:	f47f af7a 	bne.w	80093ba <dir_find+0x1a2>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80094c6:	f897 9000 	ldrb.w	r9, [r7]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80094ca:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80094cc:	68f1      	ldr	r1, [r6, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80094ce:	f009 093f 	and.w	r9, r9, #63	; 0x3f
 80094d2:	9505      	str	r5, [sp, #20]
 80094d4:	f8df a094 	ldr.w	sl, [pc, #148]	; 800956c <dir_find+0x354>
 80094d8:	460d      	mov	r5, r1
 80094da:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80094de:	9104      	str	r1, [sp, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80094e0:	9602      	str	r6, [sp, #8]
 80094e2:	4610      	mov	r0, r2
 80094e4:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80094e8:	9403      	str	r4, [sp, #12]
 80094ea:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 80094ee:	e011      	b.n	8009514 <dir_find+0x2fc>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80094f0:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 80094f4:	4640      	mov	r0, r8
 80094f6:	d81f      	bhi.n	8009538 <dir_find+0x320>
 80094f8:	f001 fcda 	bl	800aeb0 <ff_wtoupper>
 80094fc:	4604      	mov	r4, r0
 80094fe:	f835 0019 	ldrh.w	r0, [r5, r9, lsl #1]
 8009502:	46b1      	mov	r9, r6
 8009504:	f001 fcd4 	bl	800aeb0 <ff_wtoupper>
 8009508:	4284      	cmp	r4, r0
	rv = rv << 8 | ptr[0];
 800950a:	4640      	mov	r0, r8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800950c:	d114      	bne.n	8009538 <dir_find+0x320>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800950e:	4b16      	ldr	r3, [pc, #88]	; (8009568 <dir_find+0x350>)
 8009510:	4553      	cmp	r3, sl
 8009512:	d016      	beq.n	8009542 <dir_find+0x32a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009514:	f81a 3b01 	ldrb.w	r3, [sl], #1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009518:	f109 0601 	add.w	r6, r9, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800951c:	eb07 0c03 	add.w	ip, r7, r3
	rv = rv << 8 | ptr[0];
 8009520:	f817 8003 	ldrb.w	r8, [r7, r3]
 8009524:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8009528:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (wc) {
 800952c:	2800      	cmp	r0, #0
 800952e:	d1df      	bne.n	80094f0 <dir_find+0x2d8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009534:	4598      	cmp	r8, r3
 8009536:	d0ea      	beq.n	800950e <dir_find+0x2f6>
 8009538:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800953c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8009540:	e6ca      	b.n	80092d8 <dir_find+0xc0>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009542:	783b      	ldrb	r3, [r7, #0]
 8009544:	9e02      	ldr	r6, [sp, #8]
 8009546:	0659      	lsls	r1, r3, #25
 8009548:	9d05      	ldr	r5, [sp, #20]
 800954a:	9c03      	ldr	r4, [sp, #12]
 800954c:	d500      	bpl.n	8009550 <dir_find+0x338>
 800954e:	b918      	cbnz	r0, 8009558 <dir_find+0x340>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009550:	3d01      	subs	r5, #1
 8009552:	fa5f f885 	uxtb.w	r8, r5
 8009556:	e6bf      	b.n	80092d8 <dir_find+0xc0>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009558:	9b04      	ldr	r3, [sp, #16]
 800955a:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0f6      	beq.n	8009550 <dir_find+0x338>
 8009562:	e72a      	b.n	80093ba <dir_find+0x1a2>
 8009564:	001fffff 	.word	0x001fffff
 8009568:	0800fa85 	.word	0x0800fa85
 800956c:	0800fa78 	.word	0x0800fa78

08009570 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009574:	780b      	ldrb	r3, [r1, #0]
{
 8009576:	b085      	sub	sp, #20
 8009578:	460f      	mov	r7, r1
 800957a:	4606      	mov	r6, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800957c:	2b5c      	cmp	r3, #92	; 0x5c
	FATFS *fs = obj->fs;
 800957e:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009582:	d001      	beq.n	8009588 <follow_path+0x18>
 8009584:	2b2f      	cmp	r3, #47	; 0x2f
 8009586:	d105      	bne.n	8009594 <follow_path+0x24>
 8009588:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 800958c:	2b2f      	cmp	r3, #47	; 0x2f
 800958e:	d0fb      	beq.n	8009588 <follow_path+0x18>
 8009590:	2b5c      	cmp	r3, #92	; 0x5c
 8009592:	d0f9      	beq.n	8009588 <follow_path+0x18>
		obj->sclust = 0;					/* Start from root directory */
 8009594:	2100      	movs	r1, #0
 8009596:	60b1      	str	r1, [r6, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009598:	7838      	ldrb	r0, [r7, #0]
 800959a:	281f      	cmp	r0, #31
 800959c:	f240 814c 	bls.w	8009838 <follow_path+0x2c8>
 80095a0:	465b      	mov	r3, fp
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80095a2:	9101      	str	r1, [sp, #4]
		w = p[si++];					/* Get a character */
 80095a4:	b280      	uxth	r0, r0
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80095a6:	68dd      	ldr	r5, [r3, #12]
		if (w < ' ') break;				/* Break if end of the path name */
 80095a8:	281f      	cmp	r0, #31
 80095aa:	d92d      	bls.n	8009608 <follow_path+0x98>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80095ac:	285c      	cmp	r0, #92	; 0x5c
 80095ae:	d031      	beq.n	8009614 <follow_path+0xa4>
 80095b0:	282f      	cmp	r0, #47	; 0x2f
 80095b2:	d02f      	beq.n	8009614 <follow_path+0xa4>
 80095b4:	f1a5 0902 	sub.w	r9, r5, #2
 80095b8:	46b8      	mov	r8, r7
		w = p[si++];					/* Get a character */
 80095ba:	2401      	movs	r4, #1
 80095bc:	e00f      	b.n	80095de <follow_path+0x6e>
		lfn[di++] = w;					/* Store the Unicode character */
 80095be:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 80095c2:	1c63      	adds	r3, r4, #1
 80095c4:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 80095c8:	281f      	cmp	r0, #31
 80095ca:	f240 811e 	bls.w	800980a <follow_path+0x29a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80095ce:	282f      	cmp	r0, #47	; 0x2f
 80095d0:	d022      	beq.n	8009618 <follow_path+0xa8>
 80095d2:	285c      	cmp	r0, #92	; 0x5c
 80095d4:	d020      	beq.n	8009618 <follow_path+0xa8>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80095d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095da:	d011      	beq.n	8009600 <follow_path+0x90>
 80095dc:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80095de:	2101      	movs	r1, #1
 80095e0:	f001 fc44 	bl	800ae6c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80095e4:	b160      	cbz	r0, 8009600 <follow_path+0x90>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80095e6:	287f      	cmp	r0, #127	; 0x7f
 80095e8:	d8e9      	bhi.n	80095be <follow_path+0x4e>
	while (*str && *str != chr) str++;
 80095ea:	2822      	cmp	r0, #34	; 0x22
 80095ec:	d008      	beq.n	8009600 <follow_path+0x90>
 80095ee:	232a      	movs	r3, #42	; 0x2a
 80095f0:	4aa4      	ldr	r2, [pc, #656]	; (8009884 <follow_path+0x314>)
 80095f2:	e003      	b.n	80095fc <follow_path+0x8c>
 80095f4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d0e0      	beq.n	80095be <follow_path+0x4e>
 80095fc:	4298      	cmp	r0, r3
 80095fe:	d1f9      	bne.n	80095f4 <follow_path+0x84>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009600:	2006      	movs	r0, #6
			}
		}
	}

	return res;
}
 8009602:	b005      	add	sp, #20
 8009604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 8009608:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800960a:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 800960c:	802b      	strh	r3, [r5, #0]
}
 800960e:	b005      	add	sp, #20
 8009610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		w = p[si++];					/* Get a character */
 8009614:	2301      	movs	r3, #1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009616:	2400      	movs	r4, #0
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009618:	5cfa      	ldrb	r2, [r7, r3]
 800961a:	18f9      	adds	r1, r7, r3
 800961c:	2a2f      	cmp	r2, #47	; 0x2f
 800961e:	d002      	beq.n	8009626 <follow_path+0xb6>
 8009620:	2a5c      	cmp	r2, #92	; 0x5c
 8009622:	f040 8114 	bne.w	800984e <follow_path+0x2de>
 8009626:	3301      	adds	r3, #1
 8009628:	443b      	add	r3, r7
 800962a:	461f      	mov	r7, r3
 800962c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009630:	2a2f      	cmp	r2, #47	; 0x2f
 8009632:	d0fa      	beq.n	800962a <follow_path+0xba>
 8009634:	2a5c      	cmp	r2, #92	; 0x5c
 8009636:	d0f8      	beq.n	800962a <follow_path+0xba>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009638:	2c00      	cmp	r4, #0
 800963a:	d0e5      	beq.n	8009608 <follow_path+0x98>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800963c:	f04f 0900 	mov.w	r9, #0
		w = lfn[di - 1];
 8009640:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009644:	4423      	add	r3, r4
 8009646:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800964a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
		if (w != ' ' && w != '.') break;
 800964e:	2a20      	cmp	r2, #32
 8009650:	d105      	bne.n	800965e <follow_path+0xee>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009652:	3c01      	subs	r4, #1
 8009654:	d0d8      	beq.n	8009608 <follow_path+0x98>
		w = lfn[di - 1];
 8009656:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
		if (w != ' ' && w != '.') break;
 800965a:	2a20      	cmp	r2, #32
 800965c:	d0f9      	beq.n	8009652 <follow_path+0xe2>
 800965e:	2a2e      	cmp	r2, #46	; 0x2e
 8009660:	d0f7      	beq.n	8009652 <follow_path+0xe2>
		*d++ = (BYTE)val;
 8009662:	2220      	movs	r2, #32
 8009664:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8009668:	9b01      	ldr	r3, [sp, #4]
 800966a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 800966e:	eb05 0344 	add.w	r3, r5, r4, lsl #1
		*d++ = (BYTE)val;
 8009672:	6271      	str	r1, [r6, #36]	; 0x24
 8009674:	62b1      	str	r1, [r6, #40]	; 0x28
 8009676:	f886 202c 	strb.w	r2, [r6, #44]	; 0x2c
 800967a:	f886 202d 	strb.w	r2, [r6, #45]	; 0x2d
 800967e:	f886 202e 	strb.w	r2, [r6, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009682:	8828      	ldrh	r0, [r5, #0]
 8009684:	282e      	cmp	r0, #46	; 0x2e
 8009686:	d006      	beq.n	8009696 <follow_path+0x126>
 8009688:	1a82      	subs	r2, r0, r2
 800968a:	fab2 f282 	clz	r2, r2
 800968e:	0952      	lsrs	r2, r2, #5
 8009690:	2a00      	cmp	r2, #0
 8009692:	f000 80da 	beq.w	800984a <follow_path+0x2da>
 8009696:	462a      	mov	r2, r5
 8009698:	f04f 0800 	mov.w	r8, #0
 800969c:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80096a0:	f108 0801 	add.w	r8, r8, #1
 80096a4:	2820      	cmp	r0, #32
 80096a6:	d0f9      	beq.n	800969c <follow_path+0x12c>
 80096a8:	282e      	cmp	r0, #46	; 0x2e
 80096aa:	d0f7      	beq.n	800969c <follow_path+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80096ac:	f049 0903 	orr.w	r9, r9, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80096b0:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 80096b4:	2a2e      	cmp	r2, #46	; 0x2e
 80096b6:	d001      	beq.n	80096bc <follow_path+0x14c>
 80096b8:	3c01      	subs	r4, #1
 80096ba:	d1f9      	bne.n	80096b0 <follow_path+0x140>
		dp->fn[i++] = (BYTE)w;
 80096bc:	2208      	movs	r2, #8
 80096be:	4639      	mov	r1, r7
 80096c0:	f04f 0a00 	mov.w	sl, #0
 80096c4:	4637      	mov	r7, r6
		w = lfn[si++];					/* Get an LFN character */
 80096c6:	f108 0801 	add.w	r8, r8, #1
 80096ca:	462e      	mov	r6, r5
		dp->fn[i++] = (BYTE)w;
 80096cc:	4653      	mov	r3, sl
 80096ce:	4615      	mov	r5, r2
 80096d0:	460a      	mov	r2, r1
		if (!w) break;					/* Break on end of the LFN */
 80096d2:	b168      	cbz	r0, 80096f0 <follow_path+0x180>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80096d4:	2820      	cmp	r0, #32
 80096d6:	d003      	beq.n	80096e0 <follow_path+0x170>
 80096d8:	282e      	cmp	r0, #46	; 0x2e
 80096da:	d152      	bne.n	8009782 <follow_path+0x212>
 80096dc:	45a0      	cmp	r8, r4
 80096de:	d050      	beq.n	8009782 <follow_path+0x212>
			cf |= NS_LOSS | NS_LFN; continue;
 80096e0:	f049 0903 	orr.w	r9, r9, #3
 80096e4:	f836 0018 	ldrh.w	r0, [r6, r8, lsl #1]
		w = lfn[si++];					/* Get an LFN character */
 80096e8:	f108 0801 	add.w	r8, r8, #1
		if (!w) break;					/* Break on end of the LFN */
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d1f1      	bne.n	80096d4 <follow_path+0x164>
 80096f0:	463e      	mov	r6, r7
 80096f2:	4617      	mov	r7, r2
 80096f4:	462a      	mov	r2, r5
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80096f6:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
 80096fa:	29e5      	cmp	r1, #229	; 0xe5
 80096fc:	d102      	bne.n	8009704 <follow_path+0x194>
 80096fe:	2105      	movs	r1, #5
 8009700:	f886 1024 	strb.w	r1, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8009704:	2a08      	cmp	r2, #8
 8009706:	d101      	bne.n	800970c <follow_path+0x19c>
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009710:	2a0c      	cmp	r2, #12
 8009712:	d07e      	beq.n	8009812 <follow_path+0x2a2>
 8009714:	f003 0303 	and.w	r3, r3, #3
 8009718:	2b03      	cmp	r3, #3
 800971a:	d07a      	beq.n	8009812 <follow_path+0x2a2>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800971c:	f019 0f02 	tst.w	r9, #2
 8009720:	d107      	bne.n	8009732 <follow_path+0x1c2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009722:	2b01      	cmp	r3, #1
 8009724:	bf08      	it	eq
 8009726:	f049 0910 	orreq.w	r9, r9, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800972a:	2a04      	cmp	r2, #4
 800972c:	bf08      	it	eq
 800972e:	f049 0908 	orreq.w	r9, r9, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009732:	f886 902f 	strb.w	r9, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8009736:	4630      	mov	r0, r6
 8009738:	f7ff fd6e 	bl	8009218 <dir_find>
			ns = dp->fn[NSFLAG];
 800973c:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8009740:	2800      	cmp	r0, #0
 8009742:	d171      	bne.n	8009828 <follow_path+0x2b8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009744:	075a      	lsls	r2, r3, #29
 8009746:	f53f af5c 	bmi.w	8009602 <follow_path+0x92>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800974a:	79b3      	ldrb	r3, [r6, #6]
 800974c:	06db      	lsls	r3, r3, #27
 800974e:	f140 8089 	bpl.w	8009864 <follow_path+0x2f4>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009752:	6972      	ldr	r2, [r6, #20]
 8009754:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8009758:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800975c:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 8009760:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009762:	4413      	add	r3, r2
	rv = rv << 8 | ptr[0];
 8009764:	7ed8      	ldrb	r0, [r3, #27]
 8009766:	7e9a      	ldrb	r2, [r3, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 8009768:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800976c:	d105      	bne.n	800977a <follow_path+0x20a>
	rv = rv << 8 | ptr[0];
 800976e:	7d59      	ldrb	r1, [r3, #21]
 8009770:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009772:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009776:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800977a:	60b2      	str	r2, [r6, #8]
 800977c:	6833      	ldr	r3, [r6, #0]
 800977e:	7838      	ldrb	r0, [r7, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009780:	e710      	b.n	80095a4 <follow_path+0x34>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009782:	45aa      	cmp	sl, r5
 8009784:	d21a      	bcs.n	80097bc <follow_path+0x24c>
 8009786:	eba8 0104 	sub.w	r1, r8, r4
 800978a:	fab1 f181 	clz	r1, r1
 800978e:	0949      	lsrs	r1, r1, #5
 8009790:	b9a1      	cbnz	r1, 80097bc <follow_path+0x24c>
		if (w >= 0x80) {				/* Non ASCII character */
 8009792:	287f      	cmp	r0, #127	; 0x7f
 8009794:	d820      	bhi.n	80097d8 <follow_path+0x268>
	while (*str && *str != chr) str++;
 8009796:	282b      	cmp	r0, #43	; 0x2b
 8009798:	d02d      	beq.n	80097f6 <follow_path+0x286>
 800979a:	212c      	movs	r1, #44	; 0x2c
 800979c:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 800988c <follow_path+0x31c>
 80097a0:	4281      	cmp	r1, r0
 80097a2:	d028      	beq.n	80097f6 <follow_path+0x286>
 80097a4:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 80097a8:	2900      	cmp	r1, #0
 80097aa:	d1f9      	bne.n	80097a0 <follow_path+0x230>
				if (IsUpper(w)) {		/* ASCII large capital */
 80097ac:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 80097b0:	2919      	cmp	r1, #25
 80097b2:	d84e      	bhi.n	8009852 <follow_path+0x2e2>
					b |= 2;
 80097b4:	f043 0302 	orr.w	r3, r3, #2
 80097b8:	b2c0      	uxtb	r0, r0
 80097ba:	e01f      	b.n	80097fc <follow_path+0x28c>
			if (ni == 11) {				/* Long extension */
 80097bc:	2d0b      	cmp	r5, #11
 80097be:	d053      	beq.n	8009868 <follow_path+0x2f8>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80097c0:	45a0      	cmp	r8, r4
 80097c2:	d002      	beq.n	80097ca <follow_path+0x25a>
 80097c4:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
 80097c8:	d892      	bhi.n	80096f0 <follow_path+0x180>
			b <<= 2; continue;
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	46a0      	mov	r8, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80097ce:	250b      	movs	r5, #11
 80097d0:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	e785      	b.n	80096e4 <follow_path+0x174>
 80097d8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80097dc:	f049 0902 	orr.w	r9, r9, #2
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80097e0:	f001 fb44 	bl	800ae6c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80097e4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80097e8:	b128      	cbz	r0, 80097f6 <follow_path+0x286>
 80097ea:	4927      	ldr	r1, [pc, #156]	; (8009888 <follow_path+0x318>)
 80097ec:	4408      	add	r0, r1
 80097ee:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d1cf      	bne.n	8009796 <follow_path+0x226>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80097f6:	f049 0903 	orr.w	r9, r9, #3
 80097fa:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 80097fc:	eb07 010a 	add.w	r1, r7, sl
 8009800:	f10a 0a01 	add.w	sl, sl, #1
 8009804:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8009808:	e76c      	b.n	80096e4 <follow_path+0x174>
	*path = &p[si];						/* Return pointer to the next segment */
 800980a:	441f      	add	r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800980c:	f04f 0904 	mov.w	r9, #4
 8009810:	e716      	b.n	8009640 <follow_path+0xd0>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009812:	f049 0902 	orr.w	r9, r9, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 8009816:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009818:	f886 902f 	strb.w	r9, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800981c:	f7ff fcfc 	bl	8009218 <dir_find>
			ns = dp->fn[NSFLAG];
 8009820:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8009824:	2800      	cmp	r0, #0
 8009826:	d08d      	beq.n	8009744 <follow_path+0x1d4>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009828:	2804      	cmp	r0, #4
 800982a:	f47f aeea 	bne.w	8009602 <follow_path+0x92>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800982e:	f013 0f04 	tst.w	r3, #4
 8009832:	bf08      	it	eq
 8009834:	2005      	moveq	r0, #5
 8009836:	e6e4      	b.n	8009602 <follow_path+0x92>
		dp->fn[NSFLAG] = NS_NONAME;
 8009838:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800983a:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
 800983c:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
 8009840:	b005      	add	sp, #20
 8009842:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8009846:	f7fe bdb1 	b.w	80083ac <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800984a:	4690      	mov	r8, r2
 800984c:	e730      	b.n	80096b0 <follow_path+0x140>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800984e:	460f      	mov	r7, r1
 8009850:	e6f2      	b.n	8009638 <follow_path+0xc8>
					if (IsLower(w)) {	/* ASCII small capital */
 8009852:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8009856:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8009858:	bf9c      	itt	ls
 800985a:	3820      	subls	r0, #32
 800985c:	f043 0301 	orrls.w	r3, r3, #1
 8009860:	b2c0      	uxtb	r0, r0
 8009862:	e7cb      	b.n	80097fc <follow_path+0x28c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009864:	2005      	movs	r0, #5
 8009866:	e6cc      	b.n	8009602 <follow_path+0x92>
 8009868:	463e      	mov	r6, r7
 800986a:	4617      	mov	r7, r2
				cf |= NS_LOSS | NS_LFN; break;
 800986c:	f049 0903 	orr.w	r9, r9, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009870:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 8009874:	2ae5      	cmp	r2, #229	; 0xe5
 8009876:	f47f af49 	bne.w	800970c <follow_path+0x19c>
 800987a:	2205      	movs	r2, #5
 800987c:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
 8009880:	e744      	b.n	800970c <follow_path+0x19c>
 8009882:	bf00      	nop
 8009884:	0800fa89 	.word	0x0800fa89
 8009888:	0800f9f8 	.word	0x0800f9f8
 800988c:	0800fa95 	.word	0x0800fa95

08009890 <dir_register>:
{
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009894:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8009898:	b089      	sub	sp, #36	; 0x24
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800989a:	f013 08a0 	ands.w	r8, r3, #160	; 0xa0
 800989e:	f040 8347 	bne.w	8009f30 <dir_register+0x6a0>
	FATFS *fs = dp->obj.fs;
 80098a2:	6807      	ldr	r7, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	881a      	ldrh	r2, [r3, #0]
 80098a8:	2a00      	cmp	r2, #0
 80098aa:	f000 84a3 	beq.w	800a1f4 <dir_register+0x964>
 80098ae:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 80098b2:	f108 0801 	add.w	r8, r8, #1
 80098b6:	2a00      	cmp	r2, #0
 80098b8:	d1f9      	bne.n	80098ae <dir_register+0x1e>
	mem_cpy(sn, dp->fn, 12);
 80098ba:	4606      	mov	r6, r0
 80098bc:	4605      	mov	r5, r0
 80098be:	ab05      	add	r3, sp, #20
 80098c0:	f856 0f24 	ldr.w	r0, [r6, #36]!
 80098c4:	6871      	ldr	r1, [r6, #4]
 80098c6:	68b2      	ldr	r2, [r6, #8]
 80098c8:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80098ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80098ce:	07d9      	lsls	r1, r3, #31
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	f140 817c 	bpl.w	8009bce <dir_register+0x33e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80098d6:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
 80098d8:	f04f 0901 	mov.w	r9, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80098dc:	4cb8      	ldr	r4, [pc, #736]	; (8009bc0 <dir_register+0x330>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80098de:	f04f 0a20 	mov.w	sl, #32
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80098e2:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
			*d++ = *s++;
 80098e6:	9a06      	ldr	r2, [sp, #24]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80098e8:	f1b9 0f05 	cmp.w	r9, #5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80098ec:	68fb      	ldr	r3, [r7, #12]
			*d++ = *s++;
 80098ee:	f89d e01c 	ldrb.w	lr, [sp, #28]
 80098f2:	f89d 001d 	ldrb.w	r0, [sp, #29]
 80098f6:	f89d 101e 	ldrb.w	r1, [sp, #30]
 80098fa:	62aa      	str	r2, [r5, #40]	; 0x28
 80098fc:	9a05      	ldr	r2, [sp, #20]
 80098fe:	f885 e02c 	strb.w	lr, [r5, #44]	; 0x2c
 8009902:	626a      	str	r2, [r5, #36]	; 0x24
 8009904:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
 8009908:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
 800990c:	f89d e014 	ldrb.w	lr, [sp, #20]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009910:	f240 8267 	bls.w	8009de2 <dir_register+0x552>
 8009914:	f1a3 0c02 	sub.w	ip, r3, #2
 8009918:	464a      	mov	r2, r9
 800991a:	e08a      	b.n	8009a32 <dir_register+0x1a2>
				sr = (sr << 1) + (wc & 1);
 800991c:	f003 0001 	and.w	r0, r3, #1
				wc >>= 1;
 8009920:	0859      	lsrs	r1, r3, #1
				sr = (sr << 1) + (wc & 1);
 8009922:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8009926:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800992a:	03c2      	lsls	r2, r0, #15
				wc >>= 1;
 800992c:	ea4f 0293 	mov.w	r2, r3, lsr #2
				if (sr & 0x10000) sr ^= 0x11021;
 8009930:	bf48      	it	mi
 8009932:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8009934:	f002 0201 	and.w	r2, r2, #1
 8009938:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800993c:	03c8      	lsls	r0, r1, #15
				wc >>= 1;
 800993e:	ea4f 00d3 	mov.w	r0, r3, lsr #3
				if (sr & 0x10000) sr ^= 0x11021;
 8009942:	bf48      	it	mi
 8009944:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8009946:	f000 0001 	and.w	r0, r0, #1
 800994a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800994e:	03d1      	lsls	r1, r2, #15
				wc >>= 1;
 8009950:	ea4f 1113 	mov.w	r1, r3, lsr #4
				if (sr & 0x10000) sr ^= 0x11021;
 8009954:	bf48      	it	mi
 8009956:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 8009958:	f001 0101 	and.w	r1, r1, #1
 800995c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8009960:	03c2      	lsls	r2, r0, #15
				wc >>= 1;
 8009962:	ea4f 1253 	mov.w	r2, r3, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 8009966:	bf48      	it	mi
 8009968:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800996a:	f002 0201 	and.w	r2, r2, #1
 800996e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8009972:	03c8      	lsls	r0, r1, #15
				wc >>= 1;
 8009974:	ea4f 1093 	mov.w	r0, r3, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 8009978:	bf48      	it	mi
 800997a:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800997c:	f000 0001 	and.w	r0, r0, #1
 8009980:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8009984:	03d1      	lsls	r1, r2, #15
				wc >>= 1;
 8009986:	ea4f 11d3 	mov.w	r1, r3, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 800998a:	bf48      	it	mi
 800998c:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 800998e:	f001 0101 	and.w	r1, r1, #1
 8009992:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8009996:	03c2      	lsls	r2, r0, #15
				wc >>= 1;
 8009998:	ea4f 2213 	mov.w	r2, r3, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 800999c:	bf48      	it	mi
 800999e:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80099a0:	f002 0201 	and.w	r2, r2, #1
 80099a4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80099a8:	03c8      	lsls	r0, r1, #15
				wc >>= 1;
 80099aa:	ea4f 2053 	mov.w	r0, r3, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 80099ae:	bf48      	it	mi
 80099b0:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 80099b2:	f000 0001 	and.w	r0, r0, #1
 80099b6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80099ba:	03d1      	lsls	r1, r2, #15
				wc >>= 1;
 80099bc:	ea4f 2193 	mov.w	r1, r3, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 80099c0:	bf48      	it	mi
 80099c2:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 80099c4:	f001 0101 	and.w	r1, r1, #1
 80099c8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80099cc:	03c2      	lsls	r2, r0, #15
				wc >>= 1;
 80099ce:	ea4f 22d3 	mov.w	r2, r3, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 80099d2:	bf48      	it	mi
 80099d4:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80099d6:	f002 0201 	and.w	r2, r2, #1
 80099da:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80099de:	03c8      	lsls	r0, r1, #15
				wc >>= 1;
 80099e0:	ea4f 3013 	mov.w	r0, r3, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 80099e4:	bf48      	it	mi
 80099e6:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 80099e8:	f000 0001 	and.w	r0, r0, #1
 80099ec:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80099f0:	03d1      	lsls	r1, r2, #15
				wc >>= 1;
 80099f2:	ea4f 3153 	mov.w	r1, r3, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 80099f6:	bf48      	it	mi
 80099f8:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 80099fa:	f001 0101 	and.w	r1, r1, #1
 80099fe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8009a02:	03c2      	lsls	r2, r0, #15
				wc >>= 1;
 8009a04:	ea4f 3293 	mov.w	r2, r3, lsr #14
 8009a08:	ea4f 33d3 	mov.w	r3, r3, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 8009a0c:	bf48      	it	mi
 8009a0e:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8009a10:	f002 0201 	and.w	r2, r2, #1
 8009a14:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8009a18:	03c8      	lsls	r0, r1, #15
 8009a1a:	bf48      	it	mi
 8009a1c:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8009a1e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8009a22:	03d0      	lsls	r0, r2, #15
 8009a24:	bf48      	it	mi
 8009a26:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 8009a28:	eb03 0242 	add.w	r2, r3, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8009a2c:	03d1      	lsls	r1, r2, #15
 8009a2e:	bf48      	it	mi
 8009a30:	4062      	eormi	r2, r4
		while (*lfn) {	/* Create a CRC */
 8009a32:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f47f af70 	bne.w	800991c <dir_register+0x8c>
		c = (BYTE)((seq % 16) + '0');
 8009a3c:	f002 010f 	and.w	r1, r2, #15
 8009a40:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 8009a44:	2b39      	cmp	r3, #57	; 0x39
 8009a46:	bf88      	it	hi
 8009a48:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
		ns[i--] = c;
 8009a4c:	f88d 3013 	strb.w	r3, [sp, #19]
	} while (seq);
 8009a50:	0913      	lsrs	r3, r2, #4
 8009a52:	f000 8231 	beq.w	8009eb8 <dir_register+0x628>
		c = (BYTE)((seq % 16) + '0');
 8009a56:	f003 030f 	and.w	r3, r3, #15
 8009a5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
 8009a5e:	2939      	cmp	r1, #57	; 0x39
 8009a60:	bf88      	it	hi
 8009a62:	f103 0137 	addhi.w	r1, r3, #55	; 0x37
	} while (seq);
 8009a66:	0a13      	lsrs	r3, r2, #8
		ns[i--] = c;
 8009a68:	f88d 1012 	strb.w	r1, [sp, #18]
	} while (seq);
 8009a6c:	f000 8230 	beq.w	8009ed0 <dir_register+0x640>
		c = (BYTE)((seq % 16) + '0');
 8009a70:	f003 030f 	and.w	r3, r3, #15
 8009a74:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
 8009a78:	2939      	cmp	r1, #57	; 0x39
 8009a7a:	bf88      	it	hi
 8009a7c:	f103 0137 	addhi.w	r1, r3, #55	; 0x37
	} while (seq);
 8009a80:	0b13      	lsrs	r3, r2, #12
		ns[i--] = c;
 8009a82:	f88d 1011 	strb.w	r1, [sp, #17]
	} while (seq);
 8009a86:	f000 822f 	beq.w	8009ee8 <dir_register+0x658>
		c = (BYTE)((seq % 16) + '0');
 8009a8a:	f003 030f 	and.w	r3, r3, #15
 8009a8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
 8009a92:	2939      	cmp	r1, #57	; 0x39
 8009a94:	bf88      	it	hi
 8009a96:	f103 0137 	addhi.w	r1, r3, #55	; 0x37
	} while (seq);
 8009a9a:	0c13      	lsrs	r3, r2, #16
		ns[i--] = c;
 8009a9c:	f88d 1010 	strb.w	r1, [sp, #16]
	} while (seq);
 8009aa0:	f000 822e 	beq.w	8009f00 <dir_register+0x670>
		c = (BYTE)((seq % 16) + '0');
 8009aa4:	f003 030f 	and.w	r3, r3, #15
 8009aa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
 8009aac:	2939      	cmp	r1, #57	; 0x39
 8009aae:	bf88      	it	hi
 8009ab0:	f103 0137 	addhi.w	r1, r3, #55	; 0x37
	} while (seq);
 8009ab4:	0d13      	lsrs	r3, r2, #20
		ns[i--] = c;
 8009ab6:	f88d 100f 	strb.w	r1, [sp, #15]
	} while (seq);
 8009aba:	f000 822d 	beq.w	8009f18 <dir_register+0x688>
		c = (BYTE)((seq % 16) + '0');
 8009abe:	f003 030f 	and.w	r3, r3, #15
 8009ac2:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
 8009ac6:	2939      	cmp	r1, #57	; 0x39
 8009ac8:	bf88      	it	hi
 8009aca:	f103 0137 	addhi.w	r1, r3, #55	; 0x37
	} while (seq);
 8009ace:	0e13      	lsrs	r3, r2, #24
		ns[i--] = c;
 8009ad0:	f88d 100e 	strb.w	r1, [sp, #14]
	} while (seq);
 8009ad4:	f000 8230 	beq.w	8009f38 <dir_register+0x6a8>
		c = (BYTE)((seq % 16) + '0');
 8009ad8:	f003 030f 	and.w	r3, r3, #15
 8009adc:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
 8009ae0:	2939      	cmp	r1, #57	; 0x39
 8009ae2:	bf88      	it	hi
 8009ae4:	f103 0137 	addhi.w	r1, r3, #55	; 0x37
	} while (seq);
 8009ae8:	0f13      	lsrs	r3, r2, #28
		ns[i--] = c;
 8009aea:	f88d 100d 	strb.w	r1, [sp, #13]
	} while (seq);
 8009aee:	f000 822f 	beq.w	8009f50 <dir_register+0x6c0>
		c = (BYTE)((seq % 16) + '0');
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	f103 0230 	add.w	r2, r3, #48	; 0x30
		if (c > '9') c += 7;
 8009af8:	2a39      	cmp	r2, #57	; 0x39
 8009afa:	bf88      	it	hi
 8009afc:	f103 0237 	addhi.w	r2, r3, #55	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009b00:	f1be 0f20 	cmp.w	lr, #32
		ns[i--] = c;
 8009b04:	f88d 200c 	strb.w	r2, [sp, #12]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009b08:	f000 8365 	beq.w	800a1d6 <dir_register+0x946>
		ns[i--] = c;
 8009b0c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009b10:	f04f 0b00 	mov.w	fp, #0
 8009b14:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8009b18:	2100      	movs	r1, #0
 8009b1a:	e005      	b.n	8009b28 <dir_register+0x298>
 8009b1c:	f890 c000 	ldrb.w	ip, [r0]
 8009b20:	f1bc 0f20 	cmp.w	ip, #32
 8009b24:	d005      	beq.n	8009b32 <dir_register+0x2a2>
 8009b26:	4619      	mov	r1, r3
 8009b28:	1c4b      	adds	r3, r1, #1
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	3201      	adds	r2, #1
 8009b2e:	4573      	cmp	r3, lr
 8009b30:	d3f4      	bcc.n	8009b1c <dir_register+0x28c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b32:	f1be 0f08 	cmp.w	lr, #8
 8009b36:	f101 0202 	add.w	r2, r1, #2
 8009b3a:	bf32      	itee	cc
 8009b3c:	f04f 0c7e 	movcc.w	ip, #126	; 0x7e
 8009b40:	f04f 0c20 	movcs.w	ip, #32
 8009b44:	46f3      	movcs	fp, lr
	} while (j < 8);
 8009b46:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b48:	f880 c000 	strb.w	ip, [r0]
	} while (j < 8);
 8009b4c:	d82a      	bhi.n	8009ba4 <dir_register+0x314>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b4e:	f1bb 0f07 	cmp.w	fp, #7
 8009b52:	f101 0003 	add.w	r0, r1, #3
 8009b56:	f240 814c 	bls.w	8009df2 <dir_register+0x562>
	} while (j < 8);
 8009b5a:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b5c:	f806 a002 	strb.w	sl, [r6, r2]
	} while (j < 8);
 8009b60:	d020      	beq.n	8009ba4 <dir_register+0x314>
 8009b62:	3104      	adds	r1, #4
 8009b64:	1832      	adds	r2, r6, r0
 8009b66:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b68:	f882 a000 	strb.w	sl, [r2]
	} while (j < 8);
 8009b6c:	d01a      	beq.n	8009ba4 <dir_register+0x314>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b6e:	1d1a      	adds	r2, r3, #4
 8009b70:	f806 a001 	strb.w	sl, [r6, r1]
	} while (j < 8);
 8009b74:	2a08      	cmp	r2, #8
 8009b76:	d015      	beq.n	8009ba4 <dir_register+0x314>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b78:	1d59      	adds	r1, r3, #5
 8009b7a:	f806 a002 	strb.w	sl, [r6, r2]
	} while (j < 8);
 8009b7e:	2908      	cmp	r1, #8
 8009b80:	d010      	beq.n	8009ba4 <dir_register+0x314>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b82:	1d9a      	adds	r2, r3, #6
 8009b84:	f806 a001 	strb.w	sl, [r6, r1]
	} while (j < 8);
 8009b88:	2a08      	cmp	r2, #8
 8009b8a:	d00b      	beq.n	8009ba4 <dir_register+0x314>
 8009b8c:	4432      	add	r2, r6
 8009b8e:	1dd9      	adds	r1, r3, #7
 8009b90:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b92:	f882 a000 	strb.w	sl, [r2]
	} while (j < 8);
 8009b96:	d005      	beq.n	8009ba4 <dir_register+0x314>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b98:	2220      	movs	r2, #32
	} while (j < 8);
 8009b9a:	3301      	adds	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b9c:	5472      	strb	r2, [r6, r1]
 8009b9e:	bf08      	it	eq
 8009ba0:	f885 a02b 	strbeq.w	sl, [r5, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f7ff fb37 	bl	8009218 <dir_find>
			if (res != FR_OK) break;
 8009baa:	b958      	cbnz	r0, 8009bc4 <dir_register+0x334>
		for (n = 1; n < 100; n++) {
 8009bac:	f109 0901 	add.w	r9, r9, #1
 8009bb0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8009bb4:	f47f ae97 	bne.w	80098e6 <dir_register+0x56>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009bb8:	2007      	movs	r0, #7
}
 8009bba:	b009      	add	sp, #36	; 0x24
 8009bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc0:	00011021 	.word	0x00011021
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009bc4:	2804      	cmp	r0, #4
 8009bc6:	d1f8      	bne.n	8009bba <dir_register+0x32a>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009bc8:	9b00      	ldr	r3, [sp, #0]
 8009bca:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009bce:	079a      	lsls	r2, r3, #30
 8009bd0:	f140 81cc 	bpl.w	8009f6c <dir_register+0x6dc>
 8009bd4:	f108 020c 	add.w	r2, r8, #12
 8009bd8:	4be2      	ldr	r3, [pc, #904]	; (8009f64 <dir_register+0x6d4>)
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009bda:	4628      	mov	r0, r5
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8009be0:	ea4f 0b93 	mov.w	fp, r3, lsr #2
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009be4:	f10b 0101 	add.w	r1, fp, #1
 8009be8:	f7ff f854 	bl	8008c94 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d1e4      	bne.n	8009bba <dir_register+0x32a>
 8009bf0:	f1bb 0f00 	cmp.w	fp, #0
 8009bf4:	f000 81c1 	beq.w	8009f7a <dir_register+0x6ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009bf8:	6969      	ldr	r1, [r5, #20]
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	eba1 114b 	sub.w	r1, r1, fp, lsl #5
 8009c00:	f7fe fbd4 	bl	80083ac <dir_sdi>
		if (res == FR_OK) {
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d1d8      	bne.n	8009bba <dir_register+0x32a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009c08:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8009c0c:	f107 0a34 	add.w	sl, r7, #52	; 0x34
 8009c10:	f895 0025 	ldrb.w	r0, [r5, #37]	; 0x25
 8009c14:	01d3      	lsls	r3, r2, #7
 8009c16:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
 8009c1a:	f895 4027 	ldrb.w	r4, [r5, #39]	; 0x27
 8009c1e:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8009c22:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
 8009c26:	181a      	adds	r2, r3, r0
 8009c28:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
 8009c2c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8009c30:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8009c34:	fa51 f283 	uxtab	r2, r1, r3
 8009c38:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
 8009c3c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8009c40:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8009c44:	fa54 f283 	uxtab	r2, r4, r3
 8009c48:	f895 402b 	ldrb.w	r4, [r5, #43]	; 0x2b
 8009c4c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8009c50:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8009c54:	fa5c f283 	uxtab	r2, ip, r3
 8009c58:	f895 c02c 	ldrb.w	ip, [r5, #44]	; 0x2c
 8009c5c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8009c60:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8009c64:	fa50 f283 	uxtab	r2, r0, r3
 8009c68:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
 8009c6c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8009c70:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8009c74:	fa51 f283 	uxtab	r2, r1, r3
 8009c78:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
 8009c7c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8009c80:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8009c84:	fa54 f283 	uxtab	r2, r4, r3
 8009c88:	69ec      	ldr	r4, [r5, #28]
 8009c8a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8009c8e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8009c92:	fa5c f283 	uxtab	r2, ip, r3
 8009c96:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8009c9a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8009c9e:	fa50 f383 	uxtab	r3, r0, r3
 8009ca2:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8009ca6:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8009caa:	fa51 f183 	uxtab	r1, r1, r3
 8009cae:	b2cb      	uxtb	r3, r1
 8009cb0:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009cb2:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
 8009cb6:	45a0      	cmp	r8, r4
 8009cb8:	d021      	beq.n	8009cfe <dir_register+0x46e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009cba:	78fb      	ldrb	r3, [r7, #3]
 8009cbc:	7878      	ldrb	r0, [r7, #1]
 8009cbe:	b1ab      	cbz	r3, 8009cec <dir_register+0x45c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	4642      	mov	r2, r8
 8009cc4:	4651      	mov	r1, sl
 8009cc6:	f7fd ff11 	bl	8007aec <disk_write>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	f040 8295 	bne.w	800a1fa <dir_register+0x96a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8009cd8:	70f8      	strb	r0, [r7, #3]
 8009cda:	7878      	ldrb	r0, [r7, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d205      	bcs.n	8009cec <dir_register+0x45c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ce0:	f897 9002 	ldrb.w	r9, [r7, #2]
 8009ce4:	f1b9 0f01 	cmp.w	r9, #1
 8009ce8:	f200 8176 	bhi.w	8009fd8 <dir_register+0x748>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009cec:	2301      	movs	r3, #1
 8009cee:	4622      	mov	r2, r4
 8009cf0:	4651      	mov	r1, sl
 8009cf2:	f7fd feed 	bl	8007ad0 <disk_read>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	f040 8275 	bne.w	800a1e6 <dir_register+0x956>
			fs->winsect = sector;
 8009cfc:	633c      	str	r4, [r7, #48]	; 0x30
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009cfe:	fa5f f08b 	uxtb.w	r0, fp
 8009d02:	6a2b      	ldr	r3, [r5, #32]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009d04:	9a00      	ldr	r2, [sp, #0]
	dir[LDIR_Type] = 0;
 8009d06:	2400      	movs	r4, #0
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009d08:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009d0c:	68f9      	ldr	r1, [r7, #12]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009d0e:	f04f 0e0f 	mov.w	lr, #15
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009d12:	735a      	strb	r2, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009d14:	eb08 0c48 	add.w	ip, r8, r8, lsl #1
	dir[LDIR_Type] = 0;
 8009d18:	731c      	strb	r4, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d1a:	769c      	strb	r4, [r3, #26]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009d1c:	eb08 028c 	add.w	r2, r8, ip, lsl #2
	*ptr++ = (BYTE)val;
 8009d20:	76dc      	strb	r4, [r3, #27]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009d22:	f883 e00b 	strb.w	lr, [r3, #11]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009d26:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
 8009d2a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
	*ptr++ = (BYTE)val; val >>= 8;
 8009d2e:	ea4f 241e 	mov.w	r4, lr, lsr #8
 8009d32:	f883 e001 	strb.w	lr, [r3, #1]
	*ptr++ = (BYTE)val;
 8009d36:	709c      	strb	r4, [r3, #2]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009d38:	f1be 0f00 	cmp.w	lr, #0
 8009d3c:	f040 818a 	bne.w	800a054 <dir_register+0x7c4>
	*ptr++ = (BYTE)val; val >>= 8;
 8009d40:	22ff      	movs	r2, #255	; 0xff
 8009d42:	70da      	strb	r2, [r3, #3]
	*ptr++ = (BYTE)val;
 8009d44:	711a      	strb	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d46:	22ff      	movs	r2, #255	; 0xff
 8009d48:	715a      	strb	r2, [r3, #5]
	*ptr++ = (BYTE)val;
 8009d4a:	719a      	strb	r2, [r3, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d4c:	22ff      	movs	r2, #255	; 0xff
 8009d4e:	71da      	strb	r2, [r3, #7]
	*ptr++ = (BYTE)val;
 8009d50:	721a      	strb	r2, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d52:	22ff      	movs	r2, #255	; 0xff
 8009d54:	725a      	strb	r2, [r3, #9]
	*ptr++ = (BYTE)val;
 8009d56:	729a      	strb	r2, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d58:	22ff      	movs	r2, #255	; 0xff
 8009d5a:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
 8009d5c:	73da      	strb	r2, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d5e:	22ff      	movs	r2, #255	; 0xff
 8009d60:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 8009d62:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d64:	22ff      	movs	r2, #255	; 0xff
 8009d66:	749a      	strb	r2, [r3, #18]
	*ptr++ = (BYTE)val;
 8009d68:	74da      	strb	r2, [r3, #19]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d6a:	22ff      	movs	r2, #255	; 0xff
 8009d6c:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 8009d6e:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d70:	22ff      	movs	r2, #255	; 0xff
 8009d72:	759a      	strb	r2, [r3, #22]
	*ptr++ = (BYTE)val;
 8009d74:	75da      	strb	r2, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d76:	22ff      	movs	r2, #255	; 0xff
 8009d78:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8009d7a:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d7c:	22ff      	movs	r2, #255	; 0xff
 8009d7e:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val;
 8009d80:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d82:	22ff      	movs	r2, #255	; 0xff
 8009d84:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8009d86:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009d88:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009d8c:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
 8009d8e:	f04f 0301 	mov.w	r3, #1
 8009d92:	70fb      	strb	r3, [r7, #3]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009d94:	696b      	ldr	r3, [r5, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009d96:	69ec      	ldr	r4, [r5, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009d98:	f103 0920 	add.w	r9, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009d9c:	4b72      	ldr	r3, [pc, #456]	; (8009f68 <dir_register+0x6d8>)
 8009d9e:	4599      	cmp	r9, r3
 8009da0:	f200 8215 	bhi.w	800a1ce <dir_register+0x93e>
 8009da4:	2c00      	cmp	r4, #0
 8009da6:	f000 8212 	beq.w	800a1ce <dir_register+0x93e>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009daa:	f3c9 0208 	ubfx	r2, r9, #0, #9
	FATFS *fs = dp->obj.fs;
 8009dae:	f8d5 8000 	ldr.w	r8, [r5]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009db2:	b95a      	cbnz	r2, 8009dcc <dir_register+0x53c>
		dp->sect++;				/* Next sector */
 8009db4:	3401      	adds	r4, #1
		if (!dp->clust) {		/* Static table */
 8009db6:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 8009db8:	61ec      	str	r4, [r5, #28]
		if (!dp->clust) {		/* Static table */
 8009dba:	2900      	cmp	r1, #0
 8009dbc:	f040 821f 	bne.w	800a1fe <dir_register+0x96e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009dc0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8009dc4:	ebb3 1f59 	cmp.w	r3, r9, lsr #5
 8009dc8:	f240 826a 	bls.w	800a2a0 <dir_register+0xa10>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009dcc:	f108 0334 	add.w	r3, r8, #52	; 0x34
			} while (res == FR_OK && --nent);
 8009dd0:	f1bb 0b01 	subs.w	fp, fp, #1
	dp->dptr = ofs;						/* Current entry */
 8009dd4:	f8c5 9014 	str.w	r9, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009dd8:	4413      	add	r3, r2
 8009dda:	622b      	str	r3, [r5, #32]
			} while (res == FR_OK && --nent);
 8009ddc:	f47f af69 	bne.w	8009cb2 <dir_register+0x422>
 8009de0:	e0cc      	b.n	8009f7c <dir_register+0x6ec>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009de2:	464a      	mov	r2, r9
 8009de4:	e62a      	b.n	8009a3c <dir_register+0x1ac>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009de6:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 8009dea:	f04f 0b03 	mov.w	fp, #3
 8009dee:	2201      	movs	r2, #1
 8009df0:	2002      	movs	r0, #2
 8009df2:	a908      	add	r1, sp, #32
	} while (j < 8);
 8009df4:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009df6:	f10b 0c01 	add.w	ip, fp, #1
 8009dfa:	4459      	add	r1, fp
 8009dfc:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8009e00:	54b1      	strb	r1, [r6, r2]
	} while (j < 8);
 8009e02:	f43f aecf 	beq.w	8009ba4 <dir_register+0x314>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e06:	f1bc 0f07 	cmp.w	ip, #7
 8009e0a:	f103 0103 	add.w	r1, r3, #3
 8009e0e:	eb06 0200 	add.w	r2, r6, r0
 8009e12:	f63f aea8 	bhi.w	8009b66 <dir_register+0x2d6>
 8009e16:	aa08      	add	r2, sp, #32
	} while (j < 8);
 8009e18:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e1a:	4494      	add	ip, r2
 8009e1c:	f10b 0202 	add.w	r2, fp, #2
 8009e20:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 8009e24:	f806 c000 	strb.w	ip, [r6, r0]
	} while (j < 8);
 8009e28:	f43f aebc 	beq.w	8009ba4 <dir_register+0x314>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e2c:	2a08      	cmp	r2, #8
 8009e2e:	f43f ae9e 	beq.w	8009b6e <dir_register+0x2de>
 8009e32:	a808      	add	r0, sp, #32
 8009e34:	4410      	add	r0, r2
 8009e36:	1d1a      	adds	r2, r3, #4
 8009e38:	f810 cc14 	ldrb.w	ip, [r0, #-20]
	} while (j < 8);
 8009e3c:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e3e:	f10b 0003 	add.w	r0, fp, #3
 8009e42:	f806 c001 	strb.w	ip, [r6, r1]
	} while (j < 8);
 8009e46:	f43f aead 	beq.w	8009ba4 <dir_register+0x314>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e4a:	2807      	cmp	r0, #7
 8009e4c:	f63f ae94 	bhi.w	8009b78 <dir_register+0x2e8>
 8009e50:	a908      	add	r1, sp, #32
 8009e52:	4408      	add	r0, r1
 8009e54:	1d59      	adds	r1, r3, #5
 8009e56:	f810 cc14 	ldrb.w	ip, [r0, #-20]
	} while (j < 8);
 8009e5a:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e5c:	f10b 0004 	add.w	r0, fp, #4
 8009e60:	f806 c002 	strb.w	ip, [r6, r2]
	} while (j < 8);
 8009e64:	f43f ae9e 	beq.w	8009ba4 <dir_register+0x314>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e68:	2807      	cmp	r0, #7
 8009e6a:	f63f ae8a 	bhi.w	8009b82 <dir_register+0x2f2>
 8009e6e:	aa08      	add	r2, sp, #32
 8009e70:	f103 0c06 	add.w	ip, r3, #6
 8009e74:	f10b 0b05 	add.w	fp, fp, #5
 8009e78:	4410      	add	r0, r2
	} while (j < 8);
 8009e7a:	f1bc 0f08 	cmp.w	ip, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e7e:	f810 2c14 	ldrb.w	r2, [r0, #-20]
 8009e82:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
 8009e84:	f43f ae8e 	beq.w	8009ba4 <dir_register+0x314>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e88:	f1bb 0f08 	cmp.w	fp, #8
 8009e8c:	f103 0107 	add.w	r1, r3, #7
 8009e90:	eb06 020c 	add.w	r2, r6, ip
 8009e94:	f43f ae7c 	beq.w	8009b90 <dir_register+0x300>
 8009e98:	aa08      	add	r2, sp, #32
	} while (j < 8);
 8009e9a:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e9c:	445a      	add	r2, fp
 8009e9e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009ea2:	f806 200c 	strb.w	r2, [r6, ip]
	} while (j < 8);
 8009ea6:	f43f ae7d 	beq.w	8009ba4 <dir_register+0x314>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009eaa:	f1bb 0f06 	cmp.w	fp, #6
 8009eae:	f47f ae73 	bne.w	8009b98 <dir_register+0x308>
 8009eb2:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8009eb6:	e670      	b.n	8009b9a <dir_register+0x30a>
	ns[i] = '~';
 8009eb8:	227e      	movs	r2, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009eba:	f1be 0f20 	cmp.w	lr, #32
	ns[i] = '~';
 8009ebe:	f88d 2012 	strb.w	r2, [sp, #18]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009ec2:	f000 81e6 	beq.w	800a292 <dir_register+0xa02>
		ns[i--] = c;
 8009ec6:	f04f 0e06 	mov.w	lr, #6
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009eca:	f04f 0b07 	mov.w	fp, #7
 8009ece:	e621      	b.n	8009b14 <dir_register+0x284>
	ns[i] = '~';
 8009ed0:	227e      	movs	r2, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009ed2:	f1be 0f20 	cmp.w	lr, #32
	ns[i] = '~';
 8009ed6:	f88d 2011 	strb.w	r2, [sp, #17]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009eda:	f000 81d3 	beq.w	800a284 <dir_register+0x9f4>
		ns[i--] = c;
 8009ede:	f04f 0e05 	mov.w	lr, #5
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009ee2:	f04f 0b06 	mov.w	fp, #6
 8009ee6:	e615      	b.n	8009b14 <dir_register+0x284>
	ns[i] = '~';
 8009ee8:	227e      	movs	r2, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009eea:	f1be 0f20 	cmp.w	lr, #32
	ns[i] = '~';
 8009eee:	f88d 2010 	strb.w	r2, [sp, #16]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009ef2:	f000 81c0 	beq.w	800a276 <dir_register+0x9e6>
		ns[i--] = c;
 8009ef6:	f04f 0e04 	mov.w	lr, #4
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009efa:	f04f 0b05 	mov.w	fp, #5
 8009efe:	e609      	b.n	8009b14 <dir_register+0x284>
	ns[i] = '~';
 8009f00:	227e      	movs	r2, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f02:	f1be 0f20 	cmp.w	lr, #32
	ns[i] = '~';
 8009f06:	f88d 200f 	strb.w	r2, [sp, #15]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f0a:	f000 81d4 	beq.w	800a2b6 <dir_register+0xa26>
		ns[i--] = c;
 8009f0e:	f04f 0e03 	mov.w	lr, #3
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f12:	f04f 0b04 	mov.w	fp, #4
 8009f16:	e5fd      	b.n	8009b14 <dir_register+0x284>
	ns[i] = '~';
 8009f18:	227e      	movs	r2, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f1a:	f1be 0f20 	cmp.w	lr, #32
	ns[i] = '~';
 8009f1e:	f88d 200e 	strb.w	r2, [sp, #14]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f22:	f43f af60 	beq.w	8009de6 <dir_register+0x556>
		ns[i--] = c;
 8009f26:	f04f 0e02 	mov.w	lr, #2
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f2a:	f04f 0b03 	mov.w	fp, #3
 8009f2e:	e5f1      	b.n	8009b14 <dir_register+0x284>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009f30:	2006      	movs	r0, #6
}
 8009f32:	b009      	add	sp, #36	; 0x24
 8009f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 8009f38:	227e      	movs	r2, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f3a:	f1be 0f20 	cmp.w	lr, #32
	ns[i] = '~';
 8009f3e:	f88d 200d 	strb.w	r2, [sp, #13]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f42:	f000 81b1 	beq.w	800a2a8 <dir_register+0xa18>
		ns[i--] = c;
 8009f46:	f04f 0e01 	mov.w	lr, #1
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f4a:	f04f 0b02 	mov.w	fp, #2
 8009f4e:	e5e1      	b.n	8009b14 <dir_register+0x284>
	ns[i] = '~';
 8009f50:	217e      	movs	r1, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009f52:	f04f 0b01 	mov.w	fp, #1
 8009f56:	2002      	movs	r0, #2
	ns[i] = '~';
 8009f58:	f88d 100c 	strb.w	r1, [sp, #12]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009f5c:	465a      	mov	r2, fp
 8009f5e:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
 8009f62:	e746      	b.n	8009df2 <dir_register+0x562>
 8009f64:	4ec4ec4f 	.word	0x4ec4ec4f
 8009f68:	001fffff 	.word	0x001fffff
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f7fe fe90 	bl	8008c94 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009f74:	2800      	cmp	r0, #0
 8009f76:	f47f ae20 	bne.w	8009bba <dir_register+0x32a>
 8009f7a:	69ec      	ldr	r4, [r5, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f7c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8009f80:	45a2      	cmp	sl, r4
 8009f82:	d040      	beq.n	800a006 <dir_register+0x776>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f84:	78fb      	ldrb	r3, [r7, #3]
 8009f86:	f107 0934 	add.w	r9, r7, #52	; 0x34
 8009f8a:	7878      	ldrb	r0, [r7, #1]
 8009f8c:	b393      	cbz	r3, 8009ff4 <dir_register+0x764>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f8e:	2301      	movs	r3, #1
 8009f90:	4652      	mov	r2, sl
 8009f92:	4649      	mov	r1, r9
 8009f94:	f7fd fdaa 	bl	8007aec <disk_write>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	f040 812e 	bne.w	800a1fa <dir_register+0x96a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 8009fa6:	70f8      	strb	r0, [r7, #3]
 8009fa8:	7878      	ldrb	r0, [r7, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d222      	bcs.n	8009ff4 <dir_register+0x764>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fae:	f897 8002 	ldrb.w	r8, [r7, #2]
 8009fb2:	f1b8 0f01 	cmp.w	r8, #1
 8009fb6:	d91d      	bls.n	8009ff4 <dir_register+0x764>
					wsect += fs->fsize;
 8009fb8:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	4652      	mov	r2, sl
 8009fc4:	f7fd fd92 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fc8:	f1b8 0f01 	cmp.w	r8, #1
 8009fcc:	d011      	beq.n	8009ff2 <dir_register+0x762>
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	7878      	ldrb	r0, [r7, #1]
 8009fd2:	e7f1      	b.n	8009fb8 <dir_register+0x728>
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	7878      	ldrb	r0, [r7, #1]
					wsect += fs->fsize;
 8009fd8:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fda:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8009fde:	2301      	movs	r3, #1
 8009fe0:	4651      	mov	r1, sl
 8009fe2:	4642      	mov	r2, r8
 8009fe4:	f7fd fd82 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fe8:	f1b9 0f01 	cmp.w	r9, #1
 8009fec:	d1f2      	bne.n	8009fd4 <dir_register+0x744>
 8009fee:	7878      	ldrb	r0, [r7, #1]
 8009ff0:	e67c      	b.n	8009cec <dir_register+0x45c>
 8009ff2:	7878      	ldrb	r0, [r7, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009ff4:	4649      	mov	r1, r9
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	4622      	mov	r2, r4
 8009ffa:	f7fd fd69 	bl	8007ad0 <disk_read>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	f040 80f1 	bne.w	800a1e6 <dir_register+0x956>
			fs->winsect = sector;
 800a004:	633c      	str	r4, [r7, #48]	; 0x30
 800a006:	2220      	movs	r2, #32
 800a008:	2100      	movs	r1, #0
 800a00a:	6a28      	ldr	r0, [r5, #32]
 800a00c:	f003 f9f0 	bl	800d3f0 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a010:	6a2b      	ldr	r3, [r5, #32]
 800a012:	f105 0228 	add.w	r2, r5, #40	; 0x28
 800a016:	4293      	cmp	r3, r2
 800a018:	d203      	bcs.n	800a022 <dir_register+0x792>
 800a01a:	1d1a      	adds	r2, r3, #4
 800a01c:	4296      	cmp	r6, r2
 800a01e:	f0c0 8111 	bcc.w	800a244 <dir_register+0x9b4>
			*d++ = *s++;
 800a022:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a028:	605a      	str	r2, [r3, #4]
 800a02a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
			fs->wflag = 1;
 800a02e:	2000      	movs	r0, #0
			*d++ = *s++;
 800a030:	721a      	strb	r2, [r3, #8]
 800a032:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 800a036:	725a      	strb	r2, [r3, #9]
 800a038:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
 800a03c:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 800a03e:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a040:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800a044:	6a29      	ldr	r1, [r5, #32]
 800a046:	f003 0318 	and.w	r3, r3, #24
 800a04a:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 800a04c:	70fa      	strb	r2, [r7, #3]
}
 800a04e:	b009      	add	sp, #36	; 0x24
 800a050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a054:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800a058:	45a6      	cmp	lr, r4
 800a05a:	f43f ae71 	beq.w	8009d40 <dir_register+0x4b0>
 800a05e:	3201      	adds	r2, #1
 800a060:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
 800a064:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800a066:	ea4f 281e 	mov.w	r8, lr, lsr #8
 800a06a:	f883 e003 	strb.w	lr, [r3, #3]
	*ptr++ = (BYTE)val;
 800a06e:	f883 8004 	strb.w	r8, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a072:	f1be 0f00 	cmp.w	lr, #0
 800a076:	f43f ae66 	beq.w	8009d46 <dir_register+0x4b6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a07a:	45a6      	cmp	lr, r4
 800a07c:	f43f ae63 	beq.w	8009d46 <dir_register+0x4b6>
 800a080:	440a      	add	r2, r1
 800a082:	f8b2 e002 	ldrh.w	lr, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a086:	ea4f 281e 	mov.w	r8, lr, lsr #8
 800a08a:	f883 e005 	strb.w	lr, [r3, #5]
	*ptr++ = (BYTE)val;
 800a08e:	f883 8006 	strb.w	r8, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a092:	f1be 0f00 	cmp.w	lr, #0
 800a096:	f43f ae59 	beq.w	8009d4c <dir_register+0x4bc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a09a:	45a6      	cmp	lr, r4
 800a09c:	f43f ae56 	beq.w	8009d4c <dir_register+0x4bc>
 800a0a0:	f8b2 e004 	ldrh.w	lr, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0a4:	ea4f 281e 	mov.w	r8, lr, lsr #8
 800a0a8:	f883 e007 	strb.w	lr, [r3, #7]
	*ptr++ = (BYTE)val;
 800a0ac:	f883 8008 	strb.w	r8, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a0b0:	f1be 0f00 	cmp.w	lr, #0
 800a0b4:	f43f ae4d 	beq.w	8009d52 <dir_register+0x4c2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a0b8:	45a6      	cmp	lr, r4
 800a0ba:	f43f ae4a 	beq.w	8009d52 <dir_register+0x4c2>
 800a0be:	f8b2 e006 	ldrh.w	lr, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0c2:	ea4f 281e 	mov.w	r8, lr, lsr #8
 800a0c6:	f883 e009 	strb.w	lr, [r3, #9]
	*ptr++ = (BYTE)val;
 800a0ca:	f883 800a 	strb.w	r8, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a0ce:	f1be 0f00 	cmp.w	lr, #0
 800a0d2:	f43f ae41 	beq.w	8009d58 <dir_register+0x4c8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a0d6:	45a6      	cmp	lr, r4
 800a0d8:	f43f ae3e 	beq.w	8009d58 <dir_register+0x4c8>
 800a0dc:	f8b2 e008 	ldrh.w	lr, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0e0:	ea4f 241e 	mov.w	r4, lr, lsr #8
 800a0e4:	f883 e00e 	strb.w	lr, [r3, #14]
	*ptr++ = (BYTE)val;
 800a0e8:	73dc      	strb	r4, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a0ea:	f1be 0f00 	cmp.w	lr, #0
 800a0ee:	f43f ae36 	beq.w	8009d5e <dir_register+0x4ce>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a0f2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800a0f6:	45a6      	cmp	lr, r4
 800a0f8:	f43f ae31 	beq.w	8009d5e <dir_register+0x4ce>
 800a0fc:	f8b2 e00a 	ldrh.w	lr, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 800a100:	ea4f 281e 	mov.w	r8, lr, lsr #8
 800a104:	f883 e010 	strb.w	lr, [r3, #16]
	*ptr++ = (BYTE)val;
 800a108:	f883 8011 	strb.w	r8, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a10c:	f1be 0f00 	cmp.w	lr, #0
 800a110:	f43f ae28 	beq.w	8009d64 <dir_register+0x4d4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a114:	45a6      	cmp	lr, r4
 800a116:	f43f ae25 	beq.w	8009d64 <dir_register+0x4d4>
 800a11a:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800a11e:	ea4f 281e 	mov.w	r8, lr, lsr #8
 800a122:	f883 e012 	strb.w	lr, [r3, #18]
	*ptr++ = (BYTE)val;
 800a126:	f883 8013 	strb.w	r8, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a12a:	f1be 0f00 	cmp.w	lr, #0
 800a12e:	f43f ae1c 	beq.w	8009d6a <dir_register+0x4da>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a132:	45a6      	cmp	lr, r4
 800a134:	f43f ae19 	beq.w	8009d6a <dir_register+0x4da>
 800a138:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 800a13c:	ea4f 281e 	mov.w	r8, lr, lsr #8
 800a140:	f883 e014 	strb.w	lr, [r3, #20]
	*ptr++ = (BYTE)val;
 800a144:	f883 8015 	strb.w	r8, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a148:	f1be 0f00 	cmp.w	lr, #0
 800a14c:	f43f ae10 	beq.w	8009d70 <dir_register+0x4e0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a150:	45a6      	cmp	lr, r4
 800a152:	f43f ae0d 	beq.w	8009d70 <dir_register+0x4e0>
 800a156:	f8b2 e010 	ldrh.w	lr, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800a15a:	ea4f 281e 	mov.w	r8, lr, lsr #8
 800a15e:	f883 e016 	strb.w	lr, [r3, #22]
	*ptr++ = (BYTE)val;
 800a162:	f883 8017 	strb.w	r8, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a166:	f1be 0f00 	cmp.w	lr, #0
 800a16a:	f43f ae04 	beq.w	8009d76 <dir_register+0x4e6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a16e:	45a6      	cmp	lr, r4
 800a170:	f43f ae01 	beq.w	8009d76 <dir_register+0x4e6>
 800a174:	8a54      	ldrh	r4, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 800a176:	ea4f 2e14 	mov.w	lr, r4, lsr #8
 800a17a:	761c      	strb	r4, [r3, #24]
	*ptr++ = (BYTE)val;
 800a17c:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a180:	2c00      	cmp	r4, #0
 800a182:	f43f adfb 	beq.w	8009d7c <dir_register+0x4ec>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a186:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800a18a:	4574      	cmp	r4, lr
 800a18c:	f43f adf6 	beq.w	8009d7c <dir_register+0x4ec>
 800a190:	8a94      	ldrh	r4, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800a192:	ea4f 2814 	mov.w	r8, r4, lsr #8
 800a196:	771c      	strb	r4, [r3, #28]
	*ptr++ = (BYTE)val;
 800a198:	f883 801d 	strb.w	r8, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a19c:	2c00      	cmp	r4, #0
 800a19e:	f43f adf0 	beq.w	8009d82 <dir_register+0x4f2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a1a2:	4574      	cmp	r4, lr
 800a1a4:	f43f aded 	beq.w	8009d82 <dir_register+0x4f2>
 800a1a8:	8ad4      	ldrh	r4, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a1aa:	f64f 7efd 	movw	lr, #65533	; 0xfffd
 800a1ae:	1e62      	subs	r2, r4, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800a1b0:	ea4f 2814 	mov.w	r8, r4, lsr #8
 800a1b4:	779c      	strb	r4, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a1b6:	b292      	uxth	r2, r2
	*ptr++ = (BYTE)val;
 800a1b8:	f883 801f 	strb.w	r8, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a1bc:	4572      	cmp	r2, lr
 800a1be:	f63f ade3 	bhi.w	8009d88 <dir_register+0x4f8>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a1c2:	4461      	add	r1, ip
 800a1c4:	8b4a      	ldrh	r2, [r1, #26]
 800a1c6:	2a00      	cmp	r2, #0
 800a1c8:	f43f adde 	beq.w	8009d88 <dir_register+0x4f8>
 800a1cc:	e5de      	b.n	8009d8c <dir_register+0x4fc>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a1ce:	2004      	movs	r0, #4
}
 800a1d0:	b009      	add	sp, #36	; 0x24
 800a1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a1d6:	f242 0020 	movw	r0, #8224	; 0x2020
 800a1da:	f105 0226 	add.w	r2, r5, #38	; 0x26
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a1de:	2300      	movs	r3, #0
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a1e0:	2103      	movs	r1, #3
 800a1e2:	84a8      	strh	r0, [r5, #36]	; 0x24
 800a1e4:	e4bf      	b.n	8009b66 <dir_register+0x2d6>
			fs->winsect = sector;
 800a1e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800a1ea:	2001      	movs	r0, #1
			fs->winsect = sector;
 800a1ec:	633b      	str	r3, [r7, #48]	; 0x30
}
 800a1ee:	b009      	add	sp, #36	; 0x24
 800a1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a1f4:	4690      	mov	r8, r2
 800a1f6:	f7ff bb60 	b.w	80098ba <dir_register+0x2a>
				res = FR_DISK_ERR;
 800a1fa:	2001      	movs	r0, #1
 800a1fc:	e4dd      	b.n	8009bba <dir_register+0x32a>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a1fe:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800a202:	3b01      	subs	r3, #1
 800a204:	ea13 2359 	ands.w	r3, r3, r9, lsr #9
 800a208:	f47f ade0 	bne.w	8009dcc <dir_register+0x53c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a20c:	4640      	mov	r0, r8
 800a20e:	9201      	str	r2, [sp, #4]
 800a210:	f7fe fa64 	bl	80086dc <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a214:	2801      	cmp	r0, #1
 800a216:	d957      	bls.n	800a2c8 <dir_register+0xa38>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	d0ee      	beq.n	800a1fa <dir_register+0x96a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a21c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800a220:	4298      	cmp	r0, r3
 800a222:	d23d      	bcs.n	800a2a0 <dir_register+0xa10>
				dp->clust = clst;		/* Initialize data for new cluster */
 800a224:	61a8      	str	r0, [r5, #24]
	clst -= 2;
 800a226:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a228:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800a22c:	9a01      	ldr	r2, [sp, #4]
 800a22e:	3b02      	subs	r3, #2
 800a230:	4298      	cmp	r0, r3
 800a232:	d247      	bcs.n	800a2c4 <dir_register+0xa34>
	return clst * fs->csize + fs->database;
 800a234:	f8b8 400a 	ldrh.w	r4, [r8, #10]
 800a238:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800a23c:	fb00 3404 	mla	r4, r0, r4, r3
				dp->sect = clust2sect(fs, clst);
 800a240:	61ec      	str	r4, [r5, #28]
 800a242:	e5c3      	b.n	8009dcc <dir_register+0x53c>
			*d++ = *s++;
 800a244:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800a248:	701a      	strb	r2, [r3, #0]
 800a24a:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 800a24e:	705a      	strb	r2, [r3, #1]
 800a250:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
 800a254:	709a      	strb	r2, [r3, #2]
 800a256:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
 800a25a:	70da      	strb	r2, [r3, #3]
 800a25c:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800a260:	711a      	strb	r2, [r3, #4]
 800a262:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800a266:	715a      	strb	r2, [r3, #5]
 800a268:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
 800a26c:	719a      	strb	r2, [r3, #6]
 800a26e:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 800a272:	71da      	strb	r2, [r3, #7]
 800a274:	e6d9      	b.n	800a02a <dir_register+0x79a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a276:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 800a27a:	f04f 0b05 	mov.w	fp, #5
 800a27e:	2201      	movs	r2, #1
 800a280:	2002      	movs	r0, #2
 800a282:	e5b6      	b.n	8009df2 <dir_register+0x562>
 800a284:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 800a288:	f04f 0b06 	mov.w	fp, #6
 800a28c:	2201      	movs	r2, #1
 800a28e:	2002      	movs	r0, #2
 800a290:	e5af      	b.n	8009df2 <dir_register+0x562>
 800a292:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 800a296:	f04f 0b07 	mov.w	fp, #7
 800a29a:	2201      	movs	r2, #1
 800a29c:	2002      	movs	r0, #2
 800a29e:	e5a8      	b.n	8009df2 <dir_register+0x562>
				dp->sect = 0; return FR_NO_FILE;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	2004      	movs	r0, #4
 800a2a4:	61eb      	str	r3, [r5, #28]
 800a2a6:	e488      	b.n	8009bba <dir_register+0x32a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a2a8:	f04f 0b02 	mov.w	fp, #2
 800a2ac:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	4658      	mov	r0, fp
 800a2b4:	e59d      	b.n	8009df2 <dir_register+0x562>
 800a2b6:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 800a2ba:	f04f 0b04 	mov.w	fp, #4
 800a2be:	2201      	movs	r2, #1
 800a2c0:	2002      	movs	r0, #2
 800a2c2:	e596      	b.n	8009df2 <dir_register+0x562>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a2c4:	4614      	mov	r4, r2
 800a2c6:	e7bb      	b.n	800a240 <dir_register+0x9b0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a2c8:	2002      	movs	r0, #2
 800a2ca:	e476      	b.n	8009bba <dir_register+0x32a>

0800a2cc <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a2cc:	2300      	movs	r3, #0
{
 800a2ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 800a2d2:	600b      	str	r3, [r1, #0]
{
 800a2d4:	b085      	sub	sp, #20
	if (*path) {	/* If the pointer is not a null */
 800a2d6:	6805      	ldr	r5, [r0, #0]
 800a2d8:	2d00      	cmp	r5, #0
 800a2da:	f000 8286 	beq.w	800a7ea <find_volume+0x51e>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a2de:	782e      	ldrb	r6, [r5, #0]
 800a2e0:	2e1f      	cmp	r6, #31
 800a2e2:	f240 81d2 	bls.w	800a68a <find_volume+0x3be>
 800a2e6:	2e3a      	cmp	r6, #58	; 0x3a
 800a2e8:	f000 81cf 	beq.w	800a68a <find_volume+0x3be>
 800a2ec:	462c      	mov	r4, r5
 800a2ee:	e001      	b.n	800a2f4 <find_volume+0x28>
 800a2f0:	2b3a      	cmp	r3, #58	; 0x3a
 800a2f2:	d003      	beq.n	800a2fc <find_volume+0x30>
 800a2f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a2f8:	2b1f      	cmp	r3, #31
 800a2fa:	d8f9      	bhi.n	800a2f0 <find_volume+0x24>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a2fc:	2b3a      	cmp	r3, #58	; 0x3a
 800a2fe:	f000 8112 	beq.w	800a526 <find_volume+0x25a>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a302:	4bbf      	ldr	r3, [pc, #764]	; (800a600 <find_volume+0x334>)
 800a304:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a306:	2c00      	cmp	r4, #0
 800a308:	f000 811b 	beq.w	800a542 <find_volume+0x276>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a30c:	600c      	str	r4, [r1, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a30e:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a312:	7823      	ldrb	r3, [r4, #0]
 800a314:	b173      	cbz	r3, 800a334 <find_volume+0x68>
		stat = disk_status(fs->drv);
 800a316:	7860      	ldrb	r0, [r4, #1]
 800a318:	f7fd fbbc 	bl	8007a94 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a31c:	07c1      	lsls	r1, r0, #31
 800a31e:	d409      	bmi.n	800a334 <find_volume+0x68>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a320:	2d00      	cmp	r5, #0
 800a322:	f000 81b5 	beq.w	800a690 <find_volume+0x3c4>
 800a326:	f010 0004 	ands.w	r0, r0, #4
 800a32a:	f040 8117 	bne.w	800a55c <find_volume+0x290>
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800a32e:	b005      	add	sp, #20
 800a330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800a334:	2000      	movs	r0, #0
 800a336:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a338:	f7fd fbb6 	bl	8007aa8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a33c:	07c2      	lsls	r2, r0, #31
 800a33e:	f100 8104 	bmi.w	800a54a <find_volume+0x27e>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a342:	b115      	cbz	r5, 800a34a <find_volume+0x7e>
 800a344:	0743      	lsls	r3, r0, #29
 800a346:	f100 8109 	bmi.w	800a55c <find_volume+0x290>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a34a:	2200      	movs	r2, #0
 800a34c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a350:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800a354:	2301      	movs	r3, #1
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a356:	70e2      	strb	r2, [r4, #3]
 800a358:	6325      	str	r5, [r4, #48]	; 0x30
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a35a:	4631      	mov	r1, r6
 800a35c:	7860      	ldrb	r0, [r4, #1]
 800a35e:	f7fd fbb7 	bl	8007ad0 <disk_read>
 800a362:	2800      	cmp	r0, #0
 800a364:	f040 80f5 	bne.w	800a552 <find_volume+0x286>
	rv = rv << 8 | ptr[0];
 800a368:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a36c:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 800a370:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->winsect = sector;
 800a374:	6320      	str	r0, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 800a376:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a37a:	4288      	cmp	r0, r1
 800a37c:	f040 8181 	bne.w	800a682 <find_volume+0x3b6>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a380:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
 800a384:	2fe9      	cmp	r7, #233	; 0xe9
 800a386:	d006      	beq.n	800a396 <find_volume+0xca>
 800a388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a38a:	489e      	ldr	r0, [pc, #632]	; (800a604 <find_volume+0x338>)
 800a38c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800a390:	4281      	cmp	r1, r0
 800a392:	f040 80e7 	bne.w	800a564 <find_volume+0x298>
	rv = rv << 8 | ptr[2];
 800a396:	f8b4 506c 	ldrh.w	r5, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 800a39a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 800a39e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 800a3a2:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a3a6:	4d98      	ldr	r5, [pc, #608]	; (800a608 <find_volume+0x33c>)
	rv = rv << 8 | ptr[0];
 800a3a8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a3ac:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800a3b0:	42a9      	cmp	r1, r5
 800a3b2:	d00d      	beq.n	800a3d0 <find_volume+0x104>
	rv = rv << 8 | ptr[2];
 800a3b4:	f8b4 5088 	ldrh.w	r5, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 800a3b8:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 800a3bc:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 800a3c0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a3c4:	4d91      	ldr	r5, [pc, #580]	; (800a60c <find_volume+0x340>)
	rv = rv << 8 | ptr[0];
 800a3c6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a3ca:	42a9      	cmp	r1, r5
 800a3cc:	f040 80ca 	bne.w	800a564 <find_volume+0x298>
	bsect = 0;
 800a3d0:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[0];
 800a3d2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a3d6:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 800a3da:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a3de:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a3e2:	f040 814e 	bne.w	800a682 <find_volume+0x3b6>
	rv = rv << 8 | ptr[0];
 800a3e6:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
 800a3ea:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a3ee:	ea51 2100 	orrs.w	r1, r1, r0, lsl #8
 800a3f2:	d109      	bne.n	800a408 <find_volume+0x13c>
	rv = rv << 8 | ptr[2];
 800a3f4:	f8b4 605a 	ldrh.w	r6, [r4, #90]	; 0x5a
	rv = rv << 8 | ptr[1];
 800a3f8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
	rv = rv << 8 | ptr[0];
 800a3fc:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
	rv = rv << 8 | ptr[1];
 800a400:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	rv = rv << 8 | ptr[0];
 800a404:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a408:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
		fs->fsize = fasize;
 800a40c:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a40e:	1e70      	subs	r0, r6, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a410:	70a6      	strb	r6, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a412:	2801      	cmp	r0, #1
 800a414:	f200 8135 	bhi.w	800a682 <find_volume+0x3b6>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a418:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
 800a41c:	fa1f f088 	uxth.w	r0, r8
 800a420:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a422:	2800      	cmp	r0, #0
 800a424:	f000 812d 	beq.w	800a682 <find_volume+0x3b6>
 800a428:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800a42c:	ea10 0f08 	tst.w	r0, r8
 800a430:	f040 8127 	bne.w	800a682 <find_volume+0x3b6>
	rv = rv << 8 | ptr[0];
 800a434:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 800a438:	f894 7045 	ldrb.w	r7, [r4, #69]	; 0x45
 800a43c:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
 800a440:	b23f      	sxth	r7, r7
 800a442:	fa1f fe87 	uxth.w	lr, r7
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a446:	f01e 0f0f 	tst.w	lr, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a44a:	f8a4 e008 	strh.w	lr, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a44e:	f040 8118 	bne.w	800a682 <find_volume+0x3b6>
	rv = rv << 8 | ptr[0];
 800a452:	f894 c048 	ldrb.w	ip, [r4, #72]	; 0x48
 800a456:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a45a:	ea50 200c 	orrs.w	r0, r0, ip, lsl #8
 800a45e:	d109      	bne.n	800a474 <find_volume+0x1a8>
	rv = rv << 8 | ptr[2];
 800a460:	f8b4 9056 	ldrh.w	r9, [r4, #86]	; 0x56
	rv = rv << 8 | ptr[1];
 800a464:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
	rv = rv << 8 | ptr[0];
 800a468:	f894 c054 	ldrb.w	ip, [r4, #84]	; 0x54
	rv = rv << 8 | ptr[1];
 800a46c:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
	rv = rv << 8 | ptr[0];
 800a470:	ea4c 2000 	orr.w	r0, ip, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800a474:	f894 9043 	ldrb.w	r9, [r4, #67]	; 0x43
 800a478:	f894 c042 	ldrb.w	ip, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a47c:	ea5c 2c09 	orrs.w	ip, ip, r9, lsl #8
 800a480:	f000 80ff 	beq.w	800a682 <find_volume+0x3b6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a484:	fb01 f606 	mul.w	r6, r1, r6
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a488:	eb0c 191e 	add.w	r9, ip, lr, lsr #4
 800a48c:	44b1      	add	r9, r6
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a48e:	4548      	cmp	r0, r9
 800a490:	f0c0 80f7 	bcc.w	800a682 <find_volume+0x3b6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a494:	eba0 0009 	sub.w	r0, r0, r9
 800a498:	fbb0 f0f8 	udiv	r0, r0, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a49c:	2800      	cmp	r0, #0
 800a49e:	f000 80f0 	beq.w	800a682 <find_volume+0x3b6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a4a2:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 800a4a6:	4540      	cmp	r0, r8
 800a4a8:	f200 81db 	bhi.w	800a862 <find_volume+0x596>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a4ac:	f640 78f5 	movw	r8, #4085	; 0xff5
 800a4b0:	eb0c 0205 	add.w	r2, ip, r5
 800a4b4:	eb09 0705 	add.w	r7, r9, r5
 800a4b8:	1c83      	adds	r3, r0, #2
 800a4ba:	4540      	cmp	r0, r8
 800a4bc:	f200 8207 	bhi.w	800a8ce <find_volume+0x602>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a4c0:	61a3      	str	r3, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800a4c2:	62e7      	str	r7, [r4, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a4c4:	e9c4 5208 	strd	r5, r2, [r4, #32]
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a4c8:	f1be 0f00 	cmp.w	lr, #0
 800a4cc:	f000 80d9 	beq.w	800a682 <find_volume+0x3b6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a4d0:	4416      	add	r6, r2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a4d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a4dc:	62a6      	str	r6, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a4de:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a4e2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a4e6:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800a4ea:	f0c0 80ca 	bcc.w	800a682 <find_volume+0x3b6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a4ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800a4f2:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a4f4:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800a4f8:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 800a4fa:	4945      	ldr	r1, [pc, #276]	; (800a610 <find_volume+0x344>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a4fc:	4a45      	ldr	r2, [pc, #276]	; (800a614 <find_volume+0x348>)
	fs->id = ++Fsid;		/* File system mount ID */
 800a4fe:	880b      	ldrh	r3, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 800a500:	7020      	strb	r0, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a502:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a504:	6810      	ldr	r0, [r2, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a506:	4d44      	ldr	r5, [pc, #272]	; (800a618 <find_volume+0x34c>)
	fs->id = ++Fsid;		/* File system mount ID */
 800a508:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a50a:	42a0      	cmp	r0, r4
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a50c:	60e5      	str	r5, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 800a50e:	800b      	strh	r3, [r1, #0]
 800a510:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a512:	d101      	bne.n	800a518 <find_volume+0x24c>
 800a514:	2300      	movs	r3, #0
 800a516:	6013      	str	r3, [r2, #0]
 800a518:	6913      	ldr	r3, [r2, #16]
 800a51a:	2000      	movs	r0, #0
 800a51c:	429c      	cmp	r4, r3
 800a51e:	f47f af06 	bne.w	800a32e <find_volume+0x62>
 800a522:	6110      	str	r0, [r2, #16]
 800a524:	e703      	b.n	800a32e <find_volume+0x62>
			i = *tp++ - '0';
 800a526:	3501      	adds	r5, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a528:	42ac      	cmp	r4, r5
 800a52a:	f040 815e 	bne.w	800a7ea <find_volume+0x51e>
 800a52e:	2e30      	cmp	r6, #48	; 0x30
 800a530:	f040 815b 	bne.w	800a7ea <find_volume+0x51e>
					*path = ++tt;
 800a534:	3401      	adds	r4, #1
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a536:	4b32      	ldr	r3, [pc, #200]	; (800a600 <find_volume+0x334>)
					*path = ++tt;
 800a538:	6004      	str	r4, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a53a:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a53c:	2c00      	cmp	r4, #0
 800a53e:	f47f aee5 	bne.w	800a30c <find_volume+0x40>
 800a542:	200c      	movs	r0, #12
}
 800a544:	b005      	add	sp, #20
 800a546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a54a:	2003      	movs	r0, #3
}
 800a54c:	b005      	add	sp, #20
 800a54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a552:	2001      	movs	r0, #1
			fs->winsect = sector;
 800a554:	6325      	str	r5, [r4, #48]	; 0x30
}
 800a556:	b005      	add	sp, #20
 800a558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				return FR_WRITE_PROTECTED;
 800a55c:	200a      	movs	r0, #10
}
 800a55e:	b005      	add	sp, #20
 800a560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a564:	f894 51f6 	ldrb.w	r5, [r4, #502]	; 0x1f6
 800a568:	b14d      	cbz	r5, 800a57e <find_volume+0x2b2>
	rv = rv << 8 | ptr[2];
 800a56a:	f8b4 01fc 	ldrh.w	r0, [r4, #508]	; 0x1fc
	rv = rv << 8 | ptr[1];
 800a56e:	f894 11fb 	ldrb.w	r1, [r4, #507]	; 0x1fb
	rv = rv << 8 | ptr[0];
 800a572:	f894 51fa 	ldrb.w	r5, [r4, #506]	; 0x1fa
	rv = rv << 8 | ptr[1];
 800a576:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800a57a:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a57e:	f894 0206 	ldrb.w	r0, [r4, #518]	; 0x206
 800a582:	b148      	cbz	r0, 800a598 <find_volume+0x2cc>
	rv = rv << 8 | ptr[2];
 800a584:	f8b4 c20c 	ldrh.w	ip, [r4, #524]	; 0x20c
	rv = rv << 8 | ptr[1];
 800a588:	f894 020b 	ldrb.w	r0, [r4, #523]	; 0x20b
	rv = rv << 8 | ptr[0];
 800a58c:	f894 120a 	ldrb.w	r1, [r4, #522]	; 0x20a
	rv = rv << 8 | ptr[1];
 800a590:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 800a594:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a598:	f894 1216 	ldrb.w	r1, [r4, #534]	; 0x216
 800a59c:	9001      	str	r0, [sp, #4]
 800a59e:	2900      	cmp	r1, #0
 800a5a0:	d178      	bne.n	800a694 <find_volume+0x3c8>
 800a5a2:	4608      	mov	r0, r1
 800a5a4:	f894 1226 	ldrb.w	r1, [r4, #550]	; 0x226
 800a5a8:	9002      	str	r0, [sp, #8]
 800a5aa:	b149      	cbz	r1, 800a5c0 <find_volume+0x2f4>
	rv = rv << 8 | ptr[2];
 800a5ac:	f8b4 c22c 	ldrh.w	ip, [r4, #556]	; 0x22c
	rv = rv << 8 | ptr[1];
 800a5b0:	f894 022b 	ldrb.w	r0, [r4, #555]	; 0x22b
	rv = rv << 8 | ptr[0];
 800a5b4:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
	rv = rv << 8 | ptr[1];
 800a5b8:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 800a5bc:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a5c0:	9103      	str	r1, [sp, #12]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a5c2:	2d00      	cmp	r5, #0
 800a5c4:	d171      	bne.n	800a6aa <find_volume+0x3de>
			bsect = br[i];
 800a5c6:	9d01      	ldr	r5, [sp, #4]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a5c8:	2d00      	cmp	r5, #0
 800a5ca:	f040 8083 	bne.w	800a6d4 <find_volume+0x408>
			bsect = br[i];
 800a5ce:	9d02      	ldr	r5, [sp, #8]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a5d0:	2d00      	cmp	r5, #0
 800a5d2:	f040 80c5 	bne.w	800a760 <find_volume+0x494>
			bsect = br[i];
 800a5d6:	9d03      	ldr	r5, [sp, #12]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a5d8:	2d00      	cmp	r5, #0
 800a5da:	d052      	beq.n	800a682 <find_volume+0x3b6>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a5dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a5e0:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a5e2:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a5e4:	70e3      	strb	r3, [r4, #3]
 800a5e6:	6327      	str	r7, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a5e8:	d019      	beq.n	800a61e <find_volume+0x352>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	462a      	mov	r2, r5
 800a5f0:	7860      	ldrb	r0, [r4, #1]
 800a5f2:	f7fd fa6d 	bl	8007ad0 <disk_read>
 800a5f6:	b188      	cbz	r0, 800a61c <find_volume+0x350>
			fs->winsect = sector;
 800a5f8:	6327      	str	r7, [r4, #48]	; 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	e697      	b.n	800a32e <find_volume+0x62>
 800a5fe:	bf00      	nop
 800a600:	200000a4 	.word	0x200000a4
 800a604:	009000eb 	.word	0x009000eb
 800a608:	00544146 	.word	0x00544146
 800a60c:	33544146 	.word	0x33544146
 800a610:	200000c8 	.word	0x200000c8
 800a614:	200000a8 	.word	0x200000a8
 800a618:	200000cc 	.word	0x200000cc
			fs->winsect = sector;
 800a61c:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 800a61e:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a622:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 800a626:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 800a62a:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a62e:	4288      	cmp	r0, r1
 800a630:	d127      	bne.n	800a682 <find_volume+0x3b6>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a632:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800a636:	29e9      	cmp	r1, #233	; 0xe9
 800a638:	d005      	beq.n	800a646 <find_volume+0x37a>
 800a63a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a63c:	48ce      	ldr	r0, [pc, #824]	; (800a978 <find_volume+0x6ac>)
 800a63e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800a642:	4281      	cmp	r1, r0
 800a644:	d11d      	bne.n	800a682 <find_volume+0x3b6>
	rv = rv << 8 | ptr[2];
 800a646:	f8b4 606c 	ldrh.w	r6, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 800a64a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 800a64e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 800a652:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a656:	4ec9      	ldr	r6, [pc, #804]	; (800a97c <find_volume+0x6b0>)
	rv = rv << 8 | ptr[0];
 800a658:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a65c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800a660:	42b1      	cmp	r1, r6
 800a662:	f43f aeb6 	beq.w	800a3d2 <find_volume+0x106>
	rv = rv << 8 | ptr[2];
 800a666:	f8b4 6088 	ldrh.w	r6, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 800a66a:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 800a66e:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 800a672:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a676:	4ec2      	ldr	r6, [pc, #776]	; (800a980 <find_volume+0x6b4>)
	rv = rv << 8 | ptr[0];
 800a678:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a67c:	42b1      	cmp	r1, r6
 800a67e:	f43f aea8 	beq.w	800a3d2 <find_volume+0x106>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a682:	200d      	movs	r0, #13
}
 800a684:	b005      	add	sp, #20
 800a686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a68a:	4633      	mov	r3, r6
 800a68c:	462c      	mov	r4, r5
 800a68e:	e635      	b.n	800a2fc <find_volume+0x30>
			return FR_OK;				/* The file system object is valid */
 800a690:	4628      	mov	r0, r5
 800a692:	e64c      	b.n	800a32e <find_volume+0x62>
	rv = rv << 8 | ptr[2];
 800a694:	f8b4 c21c 	ldrh.w	ip, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 800a698:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
	rv = rv << 8 | ptr[0];
 800a69c:	f894 121a 	ldrb.w	r1, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 800a6a0:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 800a6a4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 800a6a8:	e77c      	b.n	800a5a4 <find_volume+0x2d8>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a6aa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a6ae:	2100      	movs	r1, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a6b0:	4545      	cmp	r5, r8
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a6b2:	70e1      	strb	r1, [r4, #3]
 800a6b4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a6b8:	f000 80a7 	beq.w	800a80a <find_volume+0x53e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a6bc:	2301      	movs	r3, #1
 800a6be:	462a      	mov	r2, r5
 800a6c0:	4631      	mov	r1, r6
 800a6c2:	7860      	ldrb	r0, [r4, #1]
 800a6c4:	f7fd fa04 	bl	8007ad0 <disk_read>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	f000 8090 	beq.w	800a7ee <find_volume+0x522>
			fs->winsect = sector;
 800a6ce:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 800a6d2:	e778      	b.n	800a5c6 <find_volume+0x2fa>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a6d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a6d8:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a6da:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a6dc:	70e3      	strb	r3, [r4, #3]
 800a6de:	6327      	str	r7, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a6e0:	d009      	beq.n	800a6f6 <find_volume+0x42a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	462a      	mov	r2, r5
 800a6e6:	4631      	mov	r1, r6
 800a6e8:	7860      	ldrb	r0, [r4, #1]
 800a6ea:	f7fd f9f1 	bl	8007ad0 <disk_read>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f040 80b3 	bne.w	800a85a <find_volume+0x58e>
			fs->winsect = sector;
 800a6f4:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 800a6f6:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a6fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 800a6fe:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 800a702:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a706:	4288      	cmp	r0, r1
 800a708:	f47f af61 	bne.w	800a5ce <find_volume+0x302>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a70c:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800a710:	29e9      	cmp	r1, #233	; 0xe9
 800a712:	d006      	beq.n	800a722 <find_volume+0x456>
 800a714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a716:	4898      	ldr	r0, [pc, #608]	; (800a978 <find_volume+0x6ac>)
 800a718:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800a71c:	4281      	cmp	r1, r0
 800a71e:	f47f af56 	bne.w	800a5ce <find_volume+0x302>
	rv = rv << 8 | ptr[2];
 800a722:	f8b4 706c 	ldrh.w	r7, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 800a726:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 800a72a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 800a72e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a732:	4f92      	ldr	r7, [pc, #584]	; (800a97c <find_volume+0x6b0>)
	rv = rv << 8 | ptr[0];
 800a734:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a738:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800a73c:	42b9      	cmp	r1, r7
 800a73e:	f43f ae48 	beq.w	800a3d2 <find_volume+0x106>
	rv = rv << 8 | ptr[2];
 800a742:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 800a746:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 800a74a:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 800a74e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a752:	4f8b      	ldr	r7, [pc, #556]	; (800a980 <find_volume+0x6b4>)
	rv = rv << 8 | ptr[0];
 800a754:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a758:	42b9      	cmp	r1, r7
 800a75a:	f43f ae3a 	beq.w	800a3d2 <find_volume+0x106>
 800a75e:	e736      	b.n	800a5ce <find_volume+0x302>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a760:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a764:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a766:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a768:	70e3      	strb	r3, [r4, #3]
 800a76a:	6327      	str	r7, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a76c:	d008      	beq.n	800a780 <find_volume+0x4b4>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a76e:	2301      	movs	r3, #1
 800a770:	462a      	mov	r2, r5
 800a772:	4631      	mov	r1, r6
 800a774:	7860      	ldrb	r0, [r4, #1]
 800a776:	f7fd f9ab 	bl	8007ad0 <disk_read>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d16f      	bne.n	800a85e <find_volume+0x592>
			fs->winsect = sector;
 800a77e:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 800a780:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a784:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 800a788:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 800a78c:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a790:	4288      	cmp	r0, r1
 800a792:	f47f af20 	bne.w	800a5d6 <find_volume+0x30a>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a796:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800a79a:	29e9      	cmp	r1, #233	; 0xe9
 800a79c:	d006      	beq.n	800a7ac <find_volume+0x4e0>
 800a79e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7a0:	4875      	ldr	r0, [pc, #468]	; (800a978 <find_volume+0x6ac>)
 800a7a2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800a7a6:	4281      	cmp	r1, r0
 800a7a8:	f47f af15 	bne.w	800a5d6 <find_volume+0x30a>
	rv = rv << 8 | ptr[2];
 800a7ac:	f8b4 706c 	ldrh.w	r7, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 800a7b0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 800a7b4:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 800a7b8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a7bc:	4f6f      	ldr	r7, [pc, #444]	; (800a97c <find_volume+0x6b0>)
	rv = rv << 8 | ptr[0];
 800a7be:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a7c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800a7c6:	42b9      	cmp	r1, r7
 800a7c8:	f43f ae03 	beq.w	800a3d2 <find_volume+0x106>
	rv = rv << 8 | ptr[2];
 800a7cc:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 800a7d0:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 800a7d4:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 800a7d8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a7dc:	4f68      	ldr	r7, [pc, #416]	; (800a980 <find_volume+0x6b4>)
	rv = rv << 8 | ptr[0];
 800a7de:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a7e2:	42b9      	cmp	r1, r7
 800a7e4:	f43f adf5 	beq.w	800a3d2 <find_volume+0x106>
 800a7e8:	e6f5      	b.n	800a5d6 <find_volume+0x30a>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a7ea:	200b      	movs	r0, #11
 800a7ec:	e59f      	b.n	800a32e <find_volume+0x62>
	rv = rv << 8 | ptr[0];
 800a7ee:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a7f2:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 800a7f6:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->winsect = sector;
 800a7fa:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 800a7fc:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a800:	4288      	cmp	r0, r1
 800a802:	f47f aee0 	bne.w	800a5c6 <find_volume+0x2fa>
 800a806:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a80a:	2fe9      	cmp	r7, #233	; 0xe9
 800a80c:	d006      	beq.n	800a81c <find_volume+0x550>
 800a80e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a810:	4859      	ldr	r0, [pc, #356]	; (800a978 <find_volume+0x6ac>)
 800a812:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800a816:	4281      	cmp	r1, r0
 800a818:	f47f aed5 	bne.w	800a5c6 <find_volume+0x2fa>
	rv = rv << 8 | ptr[2];
 800a81c:	f8b4 706c 	ldrh.w	r7, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 800a820:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 800a824:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 800a828:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a82c:	4f53      	ldr	r7, [pc, #332]	; (800a97c <find_volume+0x6b0>)
	rv = rv << 8 | ptr[0];
 800a82e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a832:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800a836:	42b9      	cmp	r1, r7
 800a838:	f43f adcb 	beq.w	800a3d2 <find_volume+0x106>
	rv = rv << 8 | ptr[2];
 800a83c:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 800a840:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 800a844:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 800a848:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a84c:	4f4c      	ldr	r7, [pc, #304]	; (800a980 <find_volume+0x6b4>)
	rv = rv << 8 | ptr[0];
 800a84e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a852:	42b9      	cmp	r1, r7
 800a854:	f43f adbd 	beq.w	800a3d2 <find_volume+0x106>
 800a858:	e6b5      	b.n	800a5c6 <find_volume+0x2fa>
			fs->winsect = sector;
 800a85a:	6327      	str	r7, [r4, #48]	; 0x30
 800a85c:	e6b7      	b.n	800a5ce <find_volume+0x302>
 800a85e:	6327      	str	r7, [r4, #48]	; 0x30
 800a860:	e6b9      	b.n	800a5d6 <find_volume+0x30a>
	rv = rv << 8 | ptr[0];
 800a862:	f894 e05f 	ldrb.w	lr, [r4, #95]	; 0x5f
 800a866:	3002      	adds	r0, #2
 800a868:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a86c:	44ac      	add	ip, r5
		fs->database = bsect + sysect;					/* Data start sector */
 800a86e:	44a9      	add	r9, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a870:	61a0      	str	r0, [r4, #24]
	rv = rv << 8 | ptr[0];
 800a872:	ea46 260e 	orr.w	r6, r6, lr, lsl #8
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a876:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a87a:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a87e:	433e      	orrs	r6, r7
		fs->volbase = bsect;							/* Volume start sector */
 800a880:	6225      	str	r5, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a882:	b236      	sxth	r6, r6
 800a884:	2e00      	cmp	r6, #0
 800a886:	f47f aefc 	bne.w	800a682 <find_volume+0x3b6>
	rv = rv << 8 | ptr[2];
 800a88a:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a88e:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[1];
 800a890:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 800a894:	f894 6060 	ldrb.w	r6, [r4, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a898:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
	rv = rv << 8 | ptr[1];
 800a89c:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a8a0:	ebb1 2f50 	cmp.w	r1, r0, lsr #9
	rv = rv << 8 | ptr[0];
 800a8a4:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a8a8:	62a6      	str	r6, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a8aa:	f4ff aeea 	bcc.w	800a682 <find_volume+0x3b6>
	rv = rv << 8 | ptr[0];
 800a8ae:	f894 7065 	ldrb.w	r7, [r4, #101]	; 0x65
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a8b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	rv = rv << 8 | ptr[0];
 800a8b6:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
		fs->fsi_flag = 0x80;
 800a8ba:	2680      	movs	r6, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a8bc:	6160      	str	r0, [r4, #20]
	rv = rv << 8 | ptr[0];
 800a8be:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a8c2:	6120      	str	r0, [r4, #16]
		fs->fsi_flag = 0x80;
 800a8c4:	7126      	strb	r6, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a8c6:	2901      	cmp	r1, #1
 800a8c8:	d00e      	beq.n	800a8e8 <find_volume+0x61c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a8ca:	2003      	movs	r0, #3
 800a8cc:	e615      	b.n	800a4fa <find_volume+0x22e>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a8ce:	61a3      	str	r3, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800a8d0:	62e7      	str	r7, [r4, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a8d2:	e9c4 5208 	strd	r5, r2, [r4, #32]
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a8d6:	f1be 0f00 	cmp.w	lr, #0
 800a8da:	f43f aed2 	beq.w	800a682 <find_volume+0x3b6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a8de:	4416      	add	r6, r2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a8e0:	005b      	lsls	r3, r3, #1
 800a8e2:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a8e4:	62a6      	str	r6, [r4, #40]	; 0x28
 800a8e6:	e5fc      	b.n	800a4e2 <find_volume+0x216>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a8e8:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a8ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a8ec:	4281      	cmp	r1, r0
 800a8ee:	d138      	bne.n	800a962 <find_volume+0x696>
	rv = rv << 8 | ptr[0];
 800a8f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a8f4:	f64a 2255 	movw	r2, #43605	; 0xaa55
			fs->fsi_flag = 0;
 800a8f8:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a8fa:	4293      	cmp	r3, r2
			fs->fsi_flag = 0;
 800a8fc:	7121      	strb	r1, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a8fe:	d1e4      	bne.n	800a8ca <find_volume+0x5fe>
	rv = rv << 8 | ptr[2];
 800a900:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 800a902:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 800a906:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
	rv = rv << 8 | ptr[1];
 800a90a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a90e:	491d      	ldr	r1, [pc, #116]	; (800a984 <find_volume+0x6b8>)
	rv = rv << 8 | ptr[0];
 800a910:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a914:	428b      	cmp	r3, r1
 800a916:	d1d8      	bne.n	800a8ca <find_volume+0x5fe>
	rv = rv << 8 | ptr[2];
 800a918:	f8b4 121a 	ldrh.w	r1, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 800a91c:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
	rv = rv << 8 | ptr[0];
 800a920:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
	rv = rv << 8 | ptr[1];
 800a924:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a928:	4917      	ldr	r1, [pc, #92]	; (800a988 <find_volume+0x6bc>)
	rv = rv << 8 | ptr[0];
 800a92a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a92e:	428b      	cmp	r3, r1
 800a930:	d1cb      	bne.n	800a8ca <find_volume+0x5fe>
	rv = rv << 8 | ptr[1];
 800a932:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a936:	2003      	movs	r0, #3
	rv = rv << 8 | ptr[1];
 800a938:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
	rv = rv << 8 | ptr[2];
 800a93c:	f8b4 521e 	ldrh.w	r5, [r4, #542]	; 0x21e
 800a940:	f8b4 1222 	ldrh.w	r1, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 800a944:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
	rv = rv << 8 | ptr[0];
 800a948:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 800a94c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800a950:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 800a954:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800a958:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a95c:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800a960:	e5cb      	b.n	800a4fa <find_volume+0x22e>
 800a962:	4620      	mov	r0, r4
 800a964:	f7fd f8d0 	bl	8007b08 <move_window.part.5>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a968:	2800      	cmp	r0, #0
 800a96a:	d1ae      	bne.n	800a8ca <find_volume+0x5fe>
 800a96c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800a970:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 800a974:	e7bc      	b.n	800a8f0 <find_volume+0x624>
 800a976:	bf00      	nop
 800a978:	009000eb 	.word	0x009000eb
 800a97c:	00544146 	.word	0x00544146
 800a980:	33544146 	.word	0x33544146
 800a984:	41615252 	.word	0x41615252
 800a988:	61417272 	.word	0x61417272

0800a98c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a98c:	b510      	push	{r4, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800a994:	2900      	cmp	r1, #0
 800a996:	d034      	beq.n	800aa02 <f_mount+0x76>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a998:	780c      	ldrb	r4, [r1, #0]
 800a99a:	2c3a      	cmp	r4, #58	; 0x3a
 800a99c:	d040      	beq.n	800aa20 <f_mount+0x94>
 800a99e:	2c1f      	cmp	r4, #31
 800a9a0:	d93e      	bls.n	800aa20 <f_mount+0x94>
 800a9a2:	4608      	mov	r0, r1
 800a9a4:	e001      	b.n	800a9aa <f_mount+0x1e>
 800a9a6:	2b3a      	cmp	r3, #58	; 0x3a
 800a9a8:	d003      	beq.n	800a9b2 <f_mount+0x26>
 800a9aa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a9ae:	2b1f      	cmp	r3, #31
 800a9b0:	d8f9      	bhi.n	800a9a6 <f_mount+0x1a>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a9b2:	2b3a      	cmp	r3, #58	; 0x3a
 800a9b4:	d020      	beq.n	800a9f8 <f_mount+0x6c>


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a9b6:	491c      	ldr	r1, [pc, #112]	; (800aa28 <f_mount+0x9c>)
 800a9b8:	680b      	ldr	r3, [r1, #0]

	if (cfs) {
 800a9ba:	b143      	cbz	r3, 800a9ce <f_mount+0x42>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a9bc:	481b      	ldr	r0, [pc, #108]	; (800aa2c <f_mount+0xa0>)
 800a9be:	6804      	ldr	r4, [r0, #0]
 800a9c0:	42a3      	cmp	r3, r4
 800a9c2:	d027      	beq.n	800aa14 <f_mount+0x88>
 800a9c4:	6904      	ldr	r4, [r0, #16]
 800a9c6:	429c      	cmp	r4, r3
 800a9c8:	d021      	beq.n	800aa0e <f_mount+0x82>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	7018      	strb	r0, [r3, #0]
	}

	if (fs) {
 800a9ce:	9b01      	ldr	r3, [sp, #4]
 800a9d0:	b1cb      	cbz	r3, 800aa06 <f_mount+0x7a>
		fs->fs_type = 0;				/* Clear new fs object */
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	7018      	strb	r0, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a9d6:	9b01      	ldr	r3, [sp, #4]
 800a9d8:	600b      	str	r3, [r1, #0]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a9da:	b153      	cbz	r3, 800a9f2 <f_mount+0x66>
 800a9dc:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 800a9e0:	bf18      	it	ne
 800a9e2:	2201      	movne	r2, #1
 800a9e4:	b92a      	cbnz	r2, 800a9f2 <f_mount+0x66>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a9e6:	a901      	add	r1, sp, #4
 800a9e8:	4668      	mov	r0, sp
 800a9ea:	f7ff fc6f 	bl	800a2cc <find_volume>
	LEAVE_FF(fs, res);
}
 800a9ee:	b002      	add	sp, #8
 800a9f0:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a9f2:	2000      	movs	r0, #0
}
 800a9f4:	b002      	add	sp, #8
 800a9f6:	bd10      	pop	{r4, pc}
			i = *tp++ - '0';
 800a9f8:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a9fa:	4288      	cmp	r0, r1
 800a9fc:	d101      	bne.n	800aa02 <f_mount+0x76>
 800a9fe:	2c30      	cmp	r4, #48	; 0x30
 800aa00:	d0d9      	beq.n	800a9b6 <f_mount+0x2a>
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa02:	200b      	movs	r0, #11
 800aa04:	e7f3      	b.n	800a9ee <f_mount+0x62>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aa06:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 800aa08:	600b      	str	r3, [r1, #0]
}
 800aa0a:	b002      	add	sp, #8
 800aa0c:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aa0e:	2400      	movs	r4, #0
 800aa10:	6104      	str	r4, [r0, #16]
 800aa12:	e7da      	b.n	800a9ca <f_mount+0x3e>
 800aa14:	2400      	movs	r4, #0
 800aa16:	6004      	str	r4, [r0, #0]
 800aa18:	6904      	ldr	r4, [r0, #16]
 800aa1a:	429c      	cmp	r4, r3
 800aa1c:	d1d5      	bne.n	800a9ca <f_mount+0x3e>
 800aa1e:	e7f6      	b.n	800aa0e <f_mount+0x82>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aa20:	4623      	mov	r3, r4
 800aa22:	4608      	mov	r0, r1
 800aa24:	e7c5      	b.n	800a9b2 <f_mount+0x26>
 800aa26:	bf00      	nop
 800aa28:	200000a4 	.word	0x200000a4
 800aa2c:	200000a8 	.word	0x200000a8

0800aa30 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800aa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa34:	b091      	sub	sp, #68	; 0x44
 800aa36:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d038      	beq.n	800aaae <f_open+0x7e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800aa3c:	f002 073f 	and.w	r7, r2, #63	; 0x3f
 800aa40:	4604      	mov	r4, r0
 800aa42:	4615      	mov	r5, r2
	res = find_volume(&path, &fs, mode);
 800aa44:	a902      	add	r1, sp, #8
 800aa46:	a801      	add	r0, sp, #4
 800aa48:	463a      	mov	r2, r7
 800aa4a:	f7ff fc3f 	bl	800a2cc <find_volume>
	if (res == FR_OK) {
 800aa4e:	4606      	mov	r6, r0
 800aa50:	b128      	cbz	r0, 800aa5e <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aa52:	2300      	movs	r3, #0
 800aa54:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800aa56:	4630      	mov	r0, r6
 800aa58:	b011      	add	sp, #68	; 0x44
 800aa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa5e:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 800aa62:	a803      	add	r0, sp, #12
		dj.obj.fs = fs;
 800aa64:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa66:	f7fe fd83 	bl	8009570 <follow_path>
 800aa6a:	f005 0c1c 	and.w	ip, r5, #28
 800aa6e:	4603      	mov	r3, r0
		if (res == FR_OK) {
 800aa70:	bb10      	cbnz	r0, 800aab8 <f_open+0x88>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800aa72:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f2c0 8117 	blt.w	800acaa <f_open+0x27a>
		if (Files[i].fs) {	/* Existing entry */
 800aa7c:	f8df 839c 	ldr.w	r8, [pc, #924]	; 800ae1c <f_open+0x3ec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa80:	f027 0201 	bic.w	r2, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aa84:	9b03      	ldr	r3, [sp, #12]
		if (Files[i].fs) {	/* Existing entry */
 800aa86:	f8d8 1000 	ldr.w	r1, [r8]
				Files[i].clu == dp->obj.sclust &&
 800aa8a:	f8dd b014 	ldr.w	fp, [sp, #20]
				Files[i].ofs == dp->dptr) break;
 800aa8e:	f8dd 9020 	ldr.w	r9, [sp, #32]
		if (Files[i].fs) {	/* Existing entry */
 800aa92:	b381      	cbz	r1, 800aaf6 <f_open+0xc6>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aa94:	428b      	cmp	r3, r1
 800aa96:	d048      	beq.n	800ab2a <f_open+0xfa>
		if (Files[i].fs) {	/* Existing entry */
 800aa98:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800aa9c:	b3c1      	cbz	r1, 800ab10 <f_open+0xe0>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aa9e:	4299      	cmp	r1, r3
 800aaa0:	d059      	beq.n	800ab56 <f_open+0x126>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800aaa2:	f1bc 0f00 	cmp.w	ip, #0
 800aaa6:	d018      	beq.n	800aada <f_open+0xaa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aaa8:	2312      	movs	r3, #18
 800aaaa:	461e      	mov	r6, r3
 800aaac:	e7d1      	b.n	800aa52 <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 800aaae:	2609      	movs	r6, #9
}
 800aab0:	4630      	mov	r0, r6
 800aab2:	b011      	add	sp, #68	; 0x44
 800aab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800aab8:	f1bc 0f00 	cmp.w	ip, #0
 800aabc:	d019      	beq.n	800aaf2 <f_open+0xc2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800aabe:	2804      	cmp	r0, #4
 800aac0:	d1f3      	bne.n	800aaaa <f_open+0x7a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aac2:	f8df 8358 	ldr.w	r8, [pc, #856]	; 800ae1c <f_open+0x3ec>
 800aac6:	f8d8 3000 	ldr.w	r3, [r8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 8109 	beq.w	800ace2 <f_open+0x2b2>
 800aad0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f000 8104 	beq.w	800ace2 <f_open+0x2b2>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aada:	2612      	movs	r6, #18
 800aadc:	e7b9      	b.n	800aa52 <f_open+0x22>
 800aade:	4628      	mov	r0, r5
 800aae0:	4651      	mov	r1, sl
 800aae2:	f7fd f811 	bl	8007b08 <move_window.part.5>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aae6:	9d02      	ldr	r5, [sp, #8]
 800aae8:	f8c5 9010 	str.w	r9, [r5, #16]
		if (res == FR_OK) {
 800aaec:	2800      	cmp	r0, #0
 800aaee:	f000 8142 	beq.w	800ad76 <f_open+0x346>
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	e7ad      	b.n	800aa52 <f_open+0x22>
		if (Files[i].fs) {	/* Existing entry */
 800aaf6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800aafa:	b149      	cbz	r1, 800ab10 <f_open+0xe0>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aafc:	428b      	cmp	r3, r1
 800aafe:	d107      	bne.n	800ab10 <f_open+0xe0>
 800ab00:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ab04:	4559      	cmp	r1, fp
 800ab06:	d103      	bne.n	800ab10 <f_open+0xe0>
				Files[i].clu == dp->obj.sclust &&
 800ab08:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ab0c:	4589      	cmp	r9, r1
 800ab0e:	d02a      	beq.n	800ab66 <f_open+0x136>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ab10:	f1bc 0f00 	cmp.w	ip, #0
 800ab14:	d029      	beq.n	800ab6a <f_open+0x13a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ab16:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800ab1a:	f011 0f11 	tst.w	r1, #17
 800ab1e:	d12d      	bne.n	800ab7c <f_open+0x14c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ab20:	0769      	lsls	r1, r5, #29
 800ab22:	f140 80d8 	bpl.w	800acd6 <f_open+0x2a6>
 800ab26:	2608      	movs	r6, #8
 800ab28:	e793      	b.n	800aa52 <f_open+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab2a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab2e:	458b      	cmp	fp, r1
 800ab30:	d1b2      	bne.n	800aa98 <f_open+0x68>
				Files[i].clu == dp->obj.sclust &&
 800ab32:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800ab36:	4589      	cmp	r9, r1
 800ab38:	d1ae      	bne.n	800aa98 <f_open+0x68>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab3a:	4631      	mov	r1, r6
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ab3c:	b92a      	cbnz	r2, 800ab4a <f_open+0x11a>
 800ab3e:	eb08 1101 	add.w	r1, r8, r1, lsl #4
 800ab42:	8989      	ldrh	r1, [r1, #12]
 800ab44:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ab48:	d1e2      	bne.n	800ab10 <f_open+0xe0>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ab4a:	f1bc 0f00 	cmp.w	ip, #0
 800ab4e:	f040 8118 	bne.w	800ad82 <f_open+0x352>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ab52:	2610      	movs	r6, #16
 800ab54:	e77d      	b.n	800aa52 <f_open+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab56:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ab5a:	458b      	cmp	fp, r1
 800ab5c:	d1a1      	bne.n	800aaa2 <f_open+0x72>
				Files[i].clu == dp->obj.sclust &&
 800ab5e:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ab62:	4549      	cmp	r1, r9
 800ab64:	d19d      	bne.n	800aaa2 <f_open+0x72>
 800ab66:	2101      	movs	r1, #1
 800ab68:	e7e8      	b.n	800ab3c <f_open+0x10c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ab6a:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800ab6e:	06c8      	lsls	r0, r1, #27
 800ab70:	f100 80b5 	bmi.w	800acde <f_open+0x2ae>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ab74:	07a8      	lsls	r0, r5, #30
 800ab76:	d503      	bpl.n	800ab80 <f_open+0x150>
 800ab78:	07c9      	lsls	r1, r1, #31
 800ab7a:	d501      	bpl.n	800ab80 <f_open+0x150>
						res = FR_DENIED;
 800ab7c:	2607      	movs	r6, #7
 800ab7e:	e768      	b.n	800aa52 <f_open+0x22>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ab80:	f015 0f08 	tst.w	r5, #8
 800ab84:	9d02      	ldr	r5, [sp, #8]
 800ab86:	d003      	beq.n	800ab90 <f_open+0x160>
				mode |= FA_MODIFIED;
 800ab88:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800ab8c:	f027 0201 	bic.w	r2, r7, #1
		if (Files[i].fs == dp->obj.fs &&
 800ab90:	f8d8 1000 	ldr.w	r1, [r8]
			fp->dir_ptr = dj.dir;
 800ab94:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ab98:	6b28      	ldr	r0, [r5, #48]	; 0x30
		if (Files[i].fs == dp->obj.fs &&
 800ab9a:	428b      	cmp	r3, r1
			fp->dir_ptr = dj.dir;
 800ab9c:	e9c4 0c09 	strd	r0, ip, [r4, #36]	; 0x24
		if (Files[i].fs == dp->obj.fs &&
 800aba0:	f000 808c 	beq.w	800acbc <f_open+0x28c>
 800aba4:	f8d8 a010 	ldr.w	sl, [r8, #16]
 800aba8:	459a      	cmp	sl, r3
 800abaa:	d00a      	beq.n	800abc2 <f_open+0x192>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800abac:	2900      	cmp	r1, #0
 800abae:	f000 80eb 	beq.w	800ad88 <f_open+0x358>
 800abb2:	f1ba 0f00 	cmp.w	sl, #0
 800abb6:	f000 812b 	beq.w	800ae10 <f_open+0x3e0>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abba:	2300      	movs	r3, #0
 800abbc:	2602      	movs	r6, #2
 800abbe:	6123      	str	r3, [r4, #16]
 800abc0:	e747      	b.n	800aa52 <f_open+0x22>
		if (Files[i].fs == dp->obj.fs &&
 800abc2:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800abc6:	4558      	cmp	r0, fp
 800abc8:	d1f0      	bne.n	800abac <f_open+0x17c>
			Files[i].clu == dp->obj.sclust &&
 800abca:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800abce:	4581      	cmp	r9, r0
 800abd0:	d1ec      	bne.n	800abac <f_open+0x17c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800abd2:	f04f 0e01 	mov.w	lr, #1
 800abd6:	ea4f 110e 	mov.w	r1, lr, lsl #4
 800abda:	eb08 0301 	add.w	r3, r8, r1
 800abde:	899b      	ldrh	r3, [r3, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800abe0:	2a00      	cmp	r2, #0
 800abe2:	d164      	bne.n	800acae <f_open+0x27e>
 800abe4:	3301      	adds	r3, #1
 800abe6:	f10e 0a01 	add.w	sl, lr, #1
 800abea:	b29b      	uxth	r3, r3
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abec:	f8c4 a010 	str.w	sl, [r4, #16]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800abf0:	4441      	add	r1, r8
	if (fs->fs_type == FS_FAT32) {
 800abf2:	782a      	ldrb	r2, [r5, #0]
	rv = rv << 8 | ptr[0];
 800abf4:	f89c 001b 	ldrb.w	r0, [ip, #27]
 800abf8:	f89c 801a 	ldrb.w	r8, [ip, #26]
	if (fs->fs_type == FS_FAT32) {
 800abfc:	2a03      	cmp	r2, #3
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800abfe:	818b      	strh	r3, [r1, #12]
	cl = ld_word(dir + DIR_FstClusLO);
 800ac00:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800ac04:	d107      	bne.n	800ac16 <f_open+0x1e6>
	rv = rv << 8 | ptr[0];
 800ac06:	f89c 2015 	ldrb.w	r2, [ip, #21]
 800ac0a:	f89c 3014 	ldrb.w	r3, [ip, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ac0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ac12:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ac16:	f8c4 8008 	str.w	r8, [r4, #8]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ac1a:	2300      	movs	r3, #0
	rv = rv << 8 | ptr[2];
 800ac1c:	f8bc 001e 	ldrh.w	r0, [ip, #30]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ac20:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	rv = rv << 8 | ptr[1];
 800ac24:	f89c 201d 	ldrb.w	r2, [ip, #29]
 800ac28:	4619      	mov	r1, r3
	rv = rv << 8 | ptr[0];
 800ac2a:	f89c 901c 	ldrb.w	r9, [ip, #28]
	rv = rv << 8 | ptr[1];
 800ac2e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ac32:	6025      	str	r5, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ac34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac36:	4650      	mov	r0, sl
	rv = rv << 8 | ptr[0];
 800ac38:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
 800ac3c:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ac40:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->obj.id = fs->id;
 800ac44:	f8b5 c006 	ldrh.w	ip, [r5, #6]
			fp->flag = mode;		/* Set file access mode */
 800ac48:	7527      	strb	r7, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 800ac4a:	7563      	strb	r3, [r4, #21]
			fp->obj.id = fs->id;
 800ac4c:	f8a4 c004 	strh.w	ip, [r4, #4]
			fp->sect = 0;			/* Invalidate current data sector */
 800ac50:	6223      	str	r3, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ac52:	61a3      	str	r3, [r4, #24]
 800ac54:	f002 fbcc 	bl	800d3f0 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ac58:	06bf      	lsls	r7, r7, #26
 800ac5a:	f57f aefc 	bpl.w	800aa56 <f_open+0x26>
 800ac5e:	f1b9 0f00 	cmp.w	r9, #0
 800ac62:	f43f aef8 	beq.w	800aa56 <f_open+0x26>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ac66:	f8c4 9018 	str.w	r9, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ac6a:	896d      	ldrh	r5, [r5, #10]
 800ac6c:	026d      	lsls	r5, r5, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac6e:	454d      	cmp	r5, r9
 800ac70:	f080 80a1 	bcs.w	800adb6 <f_open+0x386>
					clst = get_fat(&fp->obj, clst);
 800ac74:	4641      	mov	r1, r8
 800ac76:	6820      	ldr	r0, [r4, #0]
 800ac78:	f7fd fd30 	bl	80086dc <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 800ac7c:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800ac7e:	4680      	mov	r8, r0
 800ac80:	eba9 0905 	sub.w	r9, r9, r5
					if (clst <= 1) res = FR_INT_ERR;
 800ac84:	d90e      	bls.n	800aca4 <f_open+0x274>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac86:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ac8a:	bf18      	it	ne
 800ac8c:	45a9      	cmpne	r9, r5
 800ac8e:	d8f1      	bhi.n	800ac74 <f_open+0x244>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ac90:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
				fp->clust = clst;
 800ac94:	61e0      	str	r0, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 800ac96:	bf0c      	ite	eq
 800ac98:	2301      	moveq	r3, #1
 800ac9a:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ac9c:	f040 808d 	bne.w	800adba <f_open+0x38a>
 800aca0:	461e      	mov	r6, r3
 800aca2:	e6d6      	b.n	800aa52 <f_open+0x22>
				fp->clust = clst;
 800aca4:	61e0      	str	r0, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 800aca6:	2602      	movs	r6, #2
 800aca8:	e6d3      	b.n	800aa52 <f_open+0x22>
				res = FR_INVALID_NAME;
 800acaa:	2606      	movs	r6, #6
 800acac:	e6d1      	b.n	800aa52 <f_open+0x22>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d183      	bne.n	800abba <f_open+0x18a>
 800acb2:	f10e 0a01 	add.w	sl, lr, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800acb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acba:	e797      	b.n	800abec <f_open+0x1bc>
		if (Files[i].fs == dp->obj.fs &&
 800acbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800acc0:	4583      	cmp	fp, r0
 800acc2:	f47f af6f 	bne.w	800aba4 <f_open+0x174>
			Files[i].clu == dp->obj.sclust &&
 800acc6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800acca:	4581      	cmp	r9, r0
 800accc:	f47f af6a 	bne.w	800aba4 <f_open+0x174>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800acd0:	f04f 0e00 	mov.w	lr, #0
 800acd4:	e77f      	b.n	800abd6 <f_open+0x1a6>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800acd6:	072d      	lsls	r5, r5, #28
 800acd8:	d40b      	bmi.n	800acf2 <f_open+0x2c2>
 800acda:	9d02      	ldr	r5, [sp, #8]
 800acdc:	e758      	b.n	800ab90 <f_open+0x160>
					res = FR_NO_FILE;
 800acde:	2604      	movs	r6, #4
 800ace0:	e6b7      	b.n	800aa52 <f_open+0x22>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ace2:	a803      	add	r0, sp, #12
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ace4:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ace8:	f7fe fdd2 	bl	8009890 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800acec:	2800      	cmp	r0, #0
 800acee:	f47f af00 	bne.w	800aaf2 <f_open+0xc2>
				dw = GET_FATTIME();
 800acf2:	f000 fb4d 	bl	800b390 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800acf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800acf8:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800acfc:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800ad00:	b2c5      	uxtb	r5, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ad02:	f04f 0c20 	mov.w	ip, #32
	*ptr++ = (BYTE)val;
 800ad06:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800ad08:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad0a:	739d      	strb	r5, [r3, #14]
	*ptr++ = (BYTE)val;
 800ad0c:	7458      	strb	r0, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad0e:	741a      	strb	r2, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ad10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800ad12:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val;
 800ad14:	7658      	strb	r0, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad16:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad18:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ad1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ad1c:	9902      	ldr	r1, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ad1e:	f883 c00b 	strb.w	ip, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ad22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 800ad24:	780a      	ldrb	r2, [r1, #0]
	rv = rv << 8 | ptr[0];
 800ad26:	7ed8      	ldrb	r0, [r3, #27]
 800ad28:	f893 901a 	ldrb.w	r9, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800ad2c:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800ad2e:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800ad32:	d066      	beq.n	800ae02 <f_open+0x3d2>
	*ptr++ = (BYTE)val; val >>= 8;
 800ad34:	2200      	movs	r2, #0
 800ad36:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800ad38:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800ad3a:	7808      	ldrb	r0, [r1, #0]
 800ad3c:	2803      	cmp	r0, #3
 800ad3e:	d05d      	beq.n	800adfc <f_open+0x3cc>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ad40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800ad42:	2200      	movs	r2, #0
					fs->wflag = 1;
 800ad44:	2001      	movs	r0, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800ad46:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 800ad48:	70c8      	strb	r0, [r1, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800ad4a:	f1b9 0f00 	cmp.w	r9, #0
 800ad4e:	d030      	beq.n	800adb2 <f_open+0x382>
						dw = fs->winsect;
 800ad50:	9b02      	ldr	r3, [sp, #8]
						res = remove_chain(&dj.obj, cl, 0);
 800ad52:	a803      	add	r0, sp, #12
 800ad54:	4649      	mov	r1, r9
						dw = fs->winsect;
 800ad56:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800ad5a:	f7fd f86b 	bl	8007e34 <remove_chain>
						if (res == FR_OK) {
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	f47f aec7 	bne.w	800aaf2 <f_open+0xc2>
							res = move_window(fs, dw);
 800ad64:	9d02      	ldr	r5, [sp, #8]
 800ad66:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ad6a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ad6c:	459a      	cmp	sl, r3
 800ad6e:	f47f aeb6 	bne.w	800aade <f_open+0xae>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ad72:	f8c5 9010 	str.w	r9, [r5, #16]
 800ad76:	9b03      	ldr	r3, [sp, #12]
 800ad78:	f8dd b014 	ldr.w	fp, [sp, #20]
 800ad7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad80:	e702      	b.n	800ab88 <f_open+0x158>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ad82:	2310      	movs	r3, #16
 800ad84:	461e      	mov	r6, r3
 800ad86:	e664      	b.n	800aa52 <f_open+0x22>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad88:	468e      	mov	lr, r1
 800ad8a:	f04f 0a01 	mov.w	sl, #1
		Files[i].fs = dp->obj.fs;
 800ad8e:	ea4f 110e 	mov.w	r1, lr, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad92:	2a00      	cmp	r2, #0
		Files[i].ctr = 0;
 800ad94:	f04f 0e00 	mov.w	lr, #0
		Files[i].fs = dp->obj.fs;
 800ad98:	eb08 0201 	add.w	r2, r8, r1
 800ad9c:	f848 3001 	str.w	r3, [r8, r1]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ada0:	bf14      	ite	ne
 800ada2:	f44f 7380 	movne.w	r3, #256	; 0x100
 800ada6:	2301      	moveq	r3, #1
		Files[i].ctr = 0;
 800ada8:	f8a2 e00c 	strh.w	lr, [r2, #12]
		Files[i].ofs = dp->dptr;
 800adac:	e9c2 b901 	strd	fp, r9, [r2, #4]
 800adb0:	e71c      	b.n	800abec <f_open+0x1bc>
 800adb2:	9d02      	ldr	r5, [sp, #8]
 800adb4:	e7df      	b.n	800ad76 <f_open+0x346>
				fp->clust = clst;
 800adb6:	f8c4 801c 	str.w	r8, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800adba:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f43f ae49 	beq.w	800aa56 <f_open+0x26>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800adc4:	9802      	ldr	r0, [sp, #8]
	clst -= 2;
 800adc6:	f1a8 0802 	sub.w	r8, r8, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800adca:	6983      	ldr	r3, [r0, #24]
 800adcc:	3b02      	subs	r3, #2
 800adce:	4598      	cmp	r8, r3
 800add0:	f4bf af69 	bcs.w	800aca6 <f_open+0x276>
	return clst * fs->csize + fs->database;
 800add4:	8942      	ldrh	r2, [r0, #10]
 800add6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800add8:	fb08 3202 	mla	r2, r8, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 800addc:	2a00      	cmp	r2, #0
 800adde:	f43f af62 	beq.w	800aca6 <f_open+0x276>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ade2:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ade6:	4651      	mov	r1, sl
 800ade8:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800adea:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800adec:	7840      	ldrb	r0, [r0, #1]
 800adee:	f7fc fe6f 	bl	8007ad0 <disk_read>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	f43f ae2f 	beq.w	800aa56 <f_open+0x26>
 800adf8:	2601      	movs	r6, #1
 800adfa:	e62a      	b.n	800aa52 <f_open+0x22>
	*ptr++ = (BYTE)val; val >>= 8;
 800adfc:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 800adfe:	755a      	strb	r2, [r3, #21]
 800ae00:	e79e      	b.n	800ad40 <f_open+0x310>
	rv = rv << 8 | ptr[0];
 800ae02:	7d58      	ldrb	r0, [r3, #21]
 800ae04:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ae06:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800ae0a:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 800ae0e:	e791      	b.n	800ad34 <f_open+0x304>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae10:	f04f 0a02 	mov.w	sl, #2
 800ae14:	f04f 0e01 	mov.w	lr, #1
 800ae18:	e7b9      	b.n	800ad8e <f_open+0x35e>
 800ae1a:	bf00      	nop
 800ae1c:	200000a8 	.word	0x200000a8

0800ae20 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800ae20:	4b11      	ldr	r3, [pc, #68]	; (800ae68 <FATFS_LinkDriver+0x48>)
 800ae22:	7a5a      	ldrb	r2, [r3, #9]
 800ae24:	b10a      	cbz	r2, 800ae2a <FATFS_LinkDriver+0xa>
  uint8_t ret = 1;
 800ae26:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800ae28:	4770      	bx	lr
{
 800ae2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae2c:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 800ae30:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.drv[disk.nbr] = drv;
 800ae34:	7a5e      	ldrb	r6, [r3, #9]
    path[1] = ':';
 800ae36:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 800ae3a:	7a5d      	ldrb	r5, [r3, #9]
    path[2] = '/';
 800ae3c:	272f      	movs	r7, #47	; 0x2f
    DiskNum = disk.nbr++;
 800ae3e:	7a5a      	ldrb	r2, [r3, #9]
    disk.drv[disk.nbr] = drv;
 800ae40:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 800ae44:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 800ae46:	f803 400e 	strb.w	r4, [r3, lr]
    DiskNum = disk.nbr++;
 800ae4a:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 800ae4c:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 800ae4e:	722c      	strb	r4, [r5, #8]
    DiskNum = disk.nbr++;
 800ae50:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800ae52:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800ae54:	b2c0      	uxtb	r0, r0
 800ae56:	7258      	strb	r0, [r3, #9]
    path[3] = 0;
 800ae58:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 800ae5a:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 800ae5c:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 800ae5e:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 800ae62:	708f      	strb	r7, [r1, #2]
}
 800ae64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae66:	bf00      	nop
 800ae68:	200002cc 	.word	0x200002cc

0800ae6c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ae6c:	287f      	cmp	r0, #127	; 0x7f
 800ae6e:	d918      	bls.n	800aea2 <ff_convert+0x36>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ae70:	b981      	cbnz	r1, 800ae94 <ff_convert+0x28>
 800ae72:	4b0e      	ldr	r3, [pc, #56]	; (800aeac <ff_convert+0x40>)
{
 800ae74:	b410      	push	{r4}
 800ae76:	e001      	b.n	800ae7c <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ae78:	2980      	cmp	r1, #128	; 0x80
 800ae7a:	d015      	beq.n	800aea8 <ff_convert+0x3c>
				if (chr == Tbl[c]) break;
 800ae7c:	f833 2b02 	ldrh.w	r2, [r3], #2
 800ae80:	b28c      	uxth	r4, r1
 800ae82:	3101      	adds	r1, #1
 800ae84:	4282      	cmp	r2, r0
 800ae86:	d1f7      	bne.n	800ae78 <ff_convert+0xc>
 800ae88:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800ae8c:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 800ae8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae92:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ae94:	28ff      	cmp	r0, #255	; 0xff
 800ae96:	d805      	bhi.n	800aea4 <ff_convert+0x38>
 800ae98:	4b04      	ldr	r3, [pc, #16]	; (800aeac <ff_convert+0x40>)
 800ae9a:	3880      	subs	r0, #128	; 0x80
 800ae9c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800aea0:	4770      	bx	lr
}
 800aea2:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800aea4:	2000      	movs	r0, #0
 800aea6:	4770      	bx	lr
 800aea8:	2000      	movs	r0, #0
 800aeaa:	e7f0      	b.n	800ae8e <ff_convert+0x22>
 800aeac:	0800fa9c 	.word	0x0800fa9c

0800aeb0 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800aeb0:	4b22      	ldr	r3, [pc, #136]	; (800af3c <ff_wtoupper+0x8c>)
 800aeb2:	4a23      	ldr	r2, [pc, #140]	; (800af40 <ff_wtoupper+0x90>)
 800aeb4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800aeb8:	bf38      	it	cc
 800aeba:	4613      	movcc	r3, r2
{
 800aebc:	b470      	push	{r4, r5, r6}
 800aebe:	3304      	adds	r3, #4
 800aec0:	e001      	b.n	800aec6 <ff_wtoupper+0x16>
 800aec2:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800aec4:	b1ca      	cbz	r2, 800aefa <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
 800aec6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800aeca:	461e      	mov	r6, r3
		if (!bc || chr < bc) break;
 800aecc:	b199      	cbz	r1, 800aef6 <ff_wtoupper+0x46>
 800aece:	4288      	cmp	r0, r1
 800aed0:	d311      	bcc.n	800aef6 <ff_wtoupper+0x46>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800aed2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800aed6:	b2d4      	uxtb	r4, r2
 800aed8:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 800aeda:	1865      	adds	r5, r4, r1
 800aedc:	42a8      	cmp	r0, r5
 800aede:	daf0      	bge.n	800aec2 <ff_wtoupper+0x12>
			switch (cmd) {
 800aee0:	2a08      	cmp	r2, #8
 800aee2:	d808      	bhi.n	800aef6 <ff_wtoupper+0x46>
 800aee4:	e8df f002 	tbb	[pc, r2]
 800aee8:	1d1a1410 	.word	0x1d1a1410
 800aeec:	05262320 	.word	0x05262320
 800aef0:	0c          	.byte	0x0c
 800aef1:	00          	.byte	0x00
			case 7: chr -= 80; break;				/* Shift -80 */
 800aef2:	3850      	subs	r0, #80	; 0x50
 800aef4:	b280      	uxth	r0, r0
	}

	return chr;
}
 800aef6:	bc70      	pop	{r4, r5, r6}
 800aef8:	4770      	bx	lr
		if (!cmd) p += nc;
 800aefa:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 800aefe:	e7de      	b.n	800aebe <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800af00:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800af04:	b280      	uxth	r0, r0
 800af06:	e7f6      	b.n	800aef6 <ff_wtoupper+0x46>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800af08:	1a41      	subs	r1, r0, r1
 800af0a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800af0e:	e7f2      	b.n	800aef6 <ff_wtoupper+0x46>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800af10:	1a41      	subs	r1, r0, r1
 800af12:	f001 0301 	and.w	r3, r1, #1
 800af16:	1ac0      	subs	r0, r0, r3
 800af18:	b280      	uxth	r0, r0
 800af1a:	e7ec      	b.n	800aef6 <ff_wtoupper+0x46>
			case 2: chr -= 16; break;				/* Shift -16 */
 800af1c:	3810      	subs	r0, #16
 800af1e:	b280      	uxth	r0, r0
 800af20:	e7e9      	b.n	800aef6 <ff_wtoupper+0x46>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800af22:	3820      	subs	r0, #32
 800af24:	b280      	uxth	r0, r0
 800af26:	e7e6      	b.n	800aef6 <ff_wtoupper+0x46>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800af28:	3830      	subs	r0, #48	; 0x30
 800af2a:	b280      	uxth	r0, r0
 800af2c:	e7e3      	b.n	800aef6 <ff_wtoupper+0x46>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800af2e:	381a      	subs	r0, #26
 800af30:	b280      	uxth	r0, r0
 800af32:	e7e0      	b.n	800aef6 <ff_wtoupper+0x46>
			case 6:	chr += 8; break;				/* Shift +8 */
 800af34:	3008      	adds	r0, #8
 800af36:	b280      	uxth	r0, r0
 800af38:	e7dd      	b.n	800aef6 <ff_wtoupper+0x46>
 800af3a:	bf00      	nop
 800af3c:	0800fd90 	.word	0x0800fd90
 800af40:	0800fb9c 	.word	0x0800fb9c

0800af44 <MX_ADC1_Init>:
  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800af44:	4b6c      	ldr	r3, [pc, #432]	; (800b0f8 <MX_ADC1_Init+0x1b4>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800af46:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  hadc1.Instance = ADC1;
 800af4a:	486c      	ldr	r0, [pc, #432]	; (800b0fc <MX_ADC1_Init+0x1b8>)
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 10;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.NbrOfDiscConversion = 4;
 800af4c:	2104      	movs	r1, #4
{
 800af4e:	b530      	push	{r4, r5, lr}
  hadc1.Init.NbrOfConversion = 10;
 800af50:	240a      	movs	r4, #10
  hadc1.Instance = ADC1;
 800af52:	6018      	str	r0, [r3, #0]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800af54:	f44f 6098 	mov.w	r0, #1216	; 0x4c0
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800af58:	2508      	movs	r5, #8
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800af5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800af5c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  hadc1.Init.NbrOfConversion = 10;
 800af60:	619c      	str	r4, [r3, #24]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = 2;
 800af62:	2402      	movs	r4, #2
  hadc1.Init.NbrOfDiscConversion = 4;
 800af64:	6219      	str	r1, [r3, #32]
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800af66:	2120      	movs	r1, #32
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800af68:	6258      	str	r0, [r3, #36]	; 0x24
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 800af6a:	f240 4001 	movw	r0, #1025	; 0x401
{
 800af6e:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800af70:	611d      	str	r5, [r3, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800af72:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800af74:	2503      	movs	r5, #3
  ADC_MultiModeTypeDef multimode = {0};
 800af76:	2200      	movs	r2, #0
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 800af78:	6498      	str	r0, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800af7a:	4618      	mov	r0, r3
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800af7c:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800af7e:	609a      	str	r2, [r3, #8]
  ADC_MultiModeTypeDef multimode = {0};
 800af80:	9200      	str	r2, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 800af82:	9203      	str	r2, [sp, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800af84:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800af86:	755a      	strb	r2, [r3, #21]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800af88:	771a      	strb	r2, [r3, #28]
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800af8a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800af8c:	e9c3 410f 	strd	r4, r1, [r3, #60]	; 0x3c
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800af90:	2101      	movs	r1, #1
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800af92:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 800af96:	e9cd 2201 	strd	r2, r2, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800af9a:	e9cd 2204 	strd	r2, r2, [sp, #16]
 800af9e:	e9cd 2206 	strd	r2, r2, [sp, #24]
 800afa2:	e9cd 2208 	strd	r2, r2, [sp, #32]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800afa6:	60d9      	str	r1, [r3, #12]
  hadc1.Init.OversamplingMode = ENABLE;
 800afa8:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800afac:	f7f5 fe04 	bl	8000bb8 <HAL_ADC_Init>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	f040 809e 	bne.w	800b0f2 <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800afb6:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800afb8:	4669      	mov	r1, sp
 800afba:	484f      	ldr	r0, [pc, #316]	; (800b0f8 <MX_ADC1_Init+0x1b4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800afbc:	9300      	str	r3, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800afbe:	f7f5 ff15 	bl	8000dec <HAL_ADCEx_MultiModeConfigChannel>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	f040 8092 	bne.w	800b0ec <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800afc8:	4b4d      	ldr	r3, [pc, #308]	; (800b100 <MX_ADC1_Init+0x1bc>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800afca:	2106      	movs	r1, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 800afcc:	2002      	movs	r0, #2
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800afce:	f240 74ff 	movw	r4, #2047	; 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800afd2:	2204      	movs	r2, #4
  sConfig.Channel = ADC_CHANNEL_16;
 800afd4:	9303      	str	r3, [sp, #12]
  sConfig.Offset = 32768;
 800afd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800afda:	9104      	str	r1, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 800afdc:	9005      	str	r0, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800afde:	a903      	add	r1, sp, #12
 800afe0:	4845      	ldr	r0, [pc, #276]	; (800b0f8 <MX_ADC1_Init+0x1b4>)
  sConfig.Offset = 32768;
 800afe2:	9308      	str	r3, [sp, #32]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800afe4:	e9cd 4206 	strd	r4, r2, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800afe8:	f7f5 fb26 	bl	8000638 <HAL_ADC_ConfigChannel>
 800afec:	2800      	cmp	r0, #0
 800afee:	d17a      	bne.n	800b0e6 <MX_ADC1_Init+0x1a2>
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_17;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800aff0:	230c      	movs	r3, #12
  sConfig.Channel = ADC_CHANNEL_17;
 800aff2:	4a44      	ldr	r2, [pc, #272]	; (800b104 <MX_ADC1_Init+0x1c0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800aff4:	4840      	ldr	r0, [pc, #256]	; (800b0f8 <MX_ADC1_Init+0x1b4>)
 800aff6:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800affa:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800affe:	f7f5 fb1b 	bl	8000638 <HAL_ADC_ConfigChannel>
 800b002:	2800      	cmp	r0, #0
 800b004:	d16c      	bne.n	800b0e0 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800b006:	4a40      	ldr	r2, [pc, #256]	; (800b108 <MX_ADC1_Init+0x1c4>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800b008:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b00a:	a903      	add	r1, sp, #12
 800b00c:	483a      	ldr	r0, [pc, #232]	; (800b0f8 <MX_ADC1_Init+0x1b4>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800b00e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b012:	f7f5 fb11 	bl	8000638 <HAL_ADC_ConfigChannel>
 800b016:	2800      	cmp	r0, #0
 800b018:	d15f      	bne.n	800b0da <MX_ADC1_Init+0x196>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800b01a:	4a3c      	ldr	r2, [pc, #240]	; (800b10c <MX_ADC1_Init+0x1c8>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800b01c:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b01e:	a903      	add	r1, sp, #12
 800b020:	4835      	ldr	r0, [pc, #212]	; (800b0f8 <MX_ADC1_Init+0x1b4>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800b022:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b026:	f7f5 fb07 	bl	8000638 <HAL_ADC_ConfigChannel>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d152      	bne.n	800b0d4 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800b02e:	4c38      	ldr	r4, [pc, #224]	; (800b110 <MX_ADC1_Init+0x1cc>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800b030:	f44f 7280 	mov.w	r2, #256	; 0x100
  sConfig.Offset = 0;
 800b034:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b036:	a903      	add	r1, sp, #12
 800b038:	482f      	ldr	r0, [pc, #188]	; (800b0f8 <MX_ADC1_Init+0x1b4>)
  sConfig.Offset = 0;
 800b03a:	9308      	str	r3, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800b03c:	e9cd 4203 	strd	r4, r2, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b040:	f7f5 fafa 	bl	8000638 <HAL_ADC_ConfigChannel>
 800b044:	2800      	cmp	r0, #0
 800b046:	d142      	bne.n	800b0ce <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_19;
 800b048:	4a32      	ldr	r2, [pc, #200]	; (800b114 <MX_ADC1_Init+0x1d0>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800b04a:	f44f 7383 	mov.w	r3, #262	; 0x106
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b04e:	a903      	add	r1, sp, #12
 800b050:	4829      	ldr	r0, [pc, #164]	; (800b0f8 <MX_ADC1_Init+0x1b4>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800b052:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b056:	f7f5 faef 	bl	8000638 <HAL_ADC_ConfigChannel>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	d134      	bne.n	800b0c8 <MX_ADC1_Init+0x184>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800b05e:	4a2e      	ldr	r2, [pc, #184]	; (800b118 <MX_ADC1_Init+0x1d4>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800b060:	f44f 7386 	mov.w	r3, #268	; 0x10c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b064:	a903      	add	r1, sp, #12
 800b066:	4824      	ldr	r0, [pc, #144]	; (800b0f8 <MX_ADC1_Init+0x1b4>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800b068:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b06c:	f7f5 fae4 	bl	8000638 <HAL_ADC_ConfigChannel>
 800b070:	bb38      	cbnz	r0, 800b0c2 <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800b072:	4a2a      	ldr	r2, [pc, #168]	; (800b11c <MX_ADC1_Init+0x1d8>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800b074:	f44f 7389 	mov.w	r3, #274	; 0x112
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b078:	a903      	add	r1, sp, #12
 800b07a:	481f      	ldr	r0, [pc, #124]	; (800b0f8 <MX_ADC1_Init+0x1b4>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800b07c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b080:	f7f5 fada 	bl	8000638 <HAL_ADC_ConfigChannel>
 800b084:	b9d0      	cbnz	r0, 800b0bc <MX_ADC1_Init+0x178>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800b086:	4a26      	ldr	r2, [pc, #152]	; (800b120 <MX_ADC1_Init+0x1dc>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800b088:	f44f 738c 	mov.w	r3, #280	; 0x118
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b08c:	a903      	add	r1, sp, #12
 800b08e:	481a      	ldr	r0, [pc, #104]	; (800b0f8 <MX_ADC1_Init+0x1b4>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800b090:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b094:	f7f5 fad0 	bl	8000638 <HAL_ADC_ConfigChannel>
 800b098:	b968      	cbnz	r0, 800b0b6 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800b09a:	4a22      	ldr	r2, [pc, #136]	; (800b124 <MX_ADC1_Init+0x1e0>)
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800b09c:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b0a0:	a903      	add	r1, sp, #12
 800b0a2:	4815      	ldr	r0, [pc, #84]	; (800b0f8 <MX_ADC1_Init+0x1b4>)
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800b0a4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b0a8:	f7f5 fac6 	bl	8000638 <HAL_ADC_ConfigChannel>
 800b0ac:	b108      	cbz	r0, 800b0b2 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800b0ae:	f001 f821 	bl	800c0f4 <Error_Handler>
  }

}
 800b0b2:	b00b      	add	sp, #44	; 0x2c
 800b0b4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800b0b6:	f001 f81d 	bl	800c0f4 <Error_Handler>
 800b0ba:	e7ee      	b.n	800b09a <MX_ADC1_Init+0x156>
    Error_Handler();
 800b0bc:	f001 f81a 	bl	800c0f4 <Error_Handler>
 800b0c0:	e7e1      	b.n	800b086 <MX_ADC1_Init+0x142>
    Error_Handler();
 800b0c2:	f001 f817 	bl	800c0f4 <Error_Handler>
 800b0c6:	e7d4      	b.n	800b072 <MX_ADC1_Init+0x12e>
    Error_Handler();
 800b0c8:	f001 f814 	bl	800c0f4 <Error_Handler>
 800b0cc:	e7c7      	b.n	800b05e <MX_ADC1_Init+0x11a>
    Error_Handler();
 800b0ce:	f001 f811 	bl	800c0f4 <Error_Handler>
 800b0d2:	e7b9      	b.n	800b048 <MX_ADC1_Init+0x104>
    Error_Handler();
 800b0d4:	f001 f80e 	bl	800c0f4 <Error_Handler>
 800b0d8:	e7a9      	b.n	800b02e <MX_ADC1_Init+0xea>
    Error_Handler();
 800b0da:	f001 f80b 	bl	800c0f4 <Error_Handler>
 800b0de:	e79c      	b.n	800b01a <MX_ADC1_Init+0xd6>
    Error_Handler();
 800b0e0:	f001 f808 	bl	800c0f4 <Error_Handler>
 800b0e4:	e78f      	b.n	800b006 <MX_ADC1_Init+0xc2>
    Error_Handler();
 800b0e6:	f001 f805 	bl	800c0f4 <Error_Handler>
 800b0ea:	e781      	b.n	800aff0 <MX_ADC1_Init+0xac>
    Error_Handler();
 800b0ec:	f001 f802 	bl	800c0f4 <Error_Handler>
 800b0f0:	e76a      	b.n	800afc8 <MX_ADC1_Init+0x84>
    Error_Handler();
 800b0f2:	f000 ffff 	bl	800c0f4 <Error_Handler>
 800b0f6:	e75e      	b.n	800afb6 <MX_ADC1_Init+0x72>
 800b0f8:	2000033c 	.word	0x2000033c
 800b0fc:	40022000 	.word	0x40022000
 800b100:	43210000 	.word	0x43210000
 800b104:	47520000 	.word	0x47520000
 800b108:	3ac04000 	.word	0x3ac04000
 800b10c:	3ef08000 	.word	0x3ef08000
 800b110:	4b840000 	.word	0x4b840000
 800b114:	4fb80000 	.word	0x4fb80000
 800b118:	0c900008 	.word	0x0c900008
 800b11c:	1d500080 	.word	0x1d500080
 800b120:	10c00010 	.word	0x10c00010
 800b124:	21800100 	.word	0x21800100

0800b128 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800b128:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 800b12a:	4b35      	ldr	r3, [pc, #212]	; (800b200 <HAL_ADC_MspInit+0xd8>)
{
 800b12c:	b089      	sub	sp, #36	; 0x24
  if(adcHandle->Instance==ADC1)
 800b12e:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b130:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 800b132:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b134:	9407      	str	r4, [sp, #28]
 800b136:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800b13a:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(adcHandle->Instance==ADC1)
 800b13e:	d001      	beq.n	800b144 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800b140:	b009      	add	sp, #36	; 0x24
 800b142:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 800b144:	4b2f      	ldr	r3, [pc, #188]	; (800b204 <HAL_ADC_MspInit+0xdc>)
 800b146:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b148:	20ff      	movs	r0, #255	; 0xff
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b14a:	2703      	movs	r7, #3
    __HAL_RCC_ADC12_CLK_ENABLE();
 800b14c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b150:	a903      	add	r1, sp, #12
    hdma_adc1.Instance = DMA1_Stream0;
 800b152:	4d2d      	ldr	r5, [pc, #180]	; (800b208 <HAL_ADC_MspInit+0xe0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 800b154:	f042 0220 	orr.w	r2, r2, #32
 800b158:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800b15c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800b160:	f002 0220 	and.w	r2, r2, #32
 800b164:	9200      	str	r2, [sp, #0]
 800b166:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b168:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b16c:	f042 0201 	orr.w	r2, r2, #1
 800b170:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b174:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b178:	f002 0201 	and.w	r2, r2, #1
 800b17c:	9201      	str	r2, [sp, #4]
 800b17e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b180:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b184:	f042 0204 	orr.w	r2, r2, #4
 800b188:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b18c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b190:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b192:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b196:	481d      	ldr	r0, [pc, #116]	; (800b20c <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b198:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b19a:	9302      	str	r3, [sp, #8]
 800b19c:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b19e:	f7f7 fadb 	bl	8002758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b1a2:	2330      	movs	r3, #48	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b1a4:	a903      	add	r1, sp, #12
 800b1a6:	481a      	ldr	r0, [pc, #104]	; (800b210 <HAL_ADC_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b1a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1aa:	e9cd 7404 	strd	r7, r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b1ae:	f7f7 fad3 	bl	8002758 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 800b1b2:	4a18      	ldr	r2, [pc, #96]	; (800b214 <HAL_ADC_MspInit+0xec>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800b1b4:	2309      	movs	r3, #9
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b1b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800b1ba:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b1be:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800b1c2:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b1c6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_adc1.Instance = DMA1_Stream0;
 800b1ca:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b1cc:	2204      	movs	r2, #4
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800b1ce:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b1d0:	2301      	movs	r3, #1
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b1d2:	60ac      	str	r4, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b1d4:	60ec      	str	r4, [r5, #12]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b1d6:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b1d8:	e9c5 e004 	strd	lr, r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800b1dc:	4628      	mov	r0, r5
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b1de:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800b1e2:	e9c5 c706 	strd	ip, r7, [r5, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b1e6:	e9c5 1208 	strd	r1, r2, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800b1ea:	f7f5 ffb7 	bl	800115c <HAL_DMA_Init>
 800b1ee:	b918      	cbnz	r0, 800b1f8 <HAL_ADC_MspInit+0xd0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800b1f0:	64f5      	str	r5, [r6, #76]	; 0x4c
 800b1f2:	63ae      	str	r6, [r5, #56]	; 0x38
}
 800b1f4:	b009      	add	sp, #36	; 0x24
 800b1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800b1f8:	f000 ff7c 	bl	800c0f4 <Error_Handler>
 800b1fc:	e7f8      	b.n	800b1f0 <HAL_ADC_MspInit+0xc8>
 800b1fe:	bf00      	nop
 800b200:	40022000 	.word	0x40022000
 800b204:	58024400 	.word	0x58024400
 800b208:	200003a0 	.word	0x200003a0
 800b20c:	58020000 	.word	0x58020000
 800b210:	58020800 	.word	0x58020800
 800b214:	40020010 	.word	0x40020010

0800b218 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b218:	b500      	push	{lr}
 800b21a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	4613      	mov	r3, r2
 800b220:	460a      	mov	r2, r1
 800b222:	4601      	mov	r1, r0
 800b224:	4804      	ldr	r0, [pc, #16]	; (800b238 <BSP_SD_ReadBlocks+0x20>)
 800b226:	f7fa f821 	bl	800526c <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 800b22a:	3000      	adds	r0, #0
 800b22c:	bf18      	it	ne
 800b22e:	2001      	movne	r0, #1
 800b230:	b003      	add	sp, #12
 800b232:	f85d fb04 	ldr.w	pc, [sp], #4
 800b236:	bf00      	nop
 800b238:	20019c10 	.word	0x20019c10

0800b23c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b23c:	b500      	push	{lr}
 800b23e:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	4613      	mov	r3, r2
 800b244:	460a      	mov	r2, r1
 800b246:	4601      	mov	r1, r0
 800b248:	4804      	ldr	r0, [pc, #16]	; (800b25c <BSP_SD_WriteBlocks+0x20>)
 800b24a:	f7fa f911 	bl	8005470 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 800b24e:	3000      	adds	r0, #0
 800b250:	bf18      	it	ne
 800b252:	2001      	movne	r0, #1
 800b254:	b003      	add	sp, #12
 800b256:	f85d fb04 	ldr.w	pc, [sp], #4
 800b25a:	bf00      	nop
 800b25c:	20019c10 	.word	0x20019c10

0800b260 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b260:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b262:	4803      	ldr	r0, [pc, #12]	; (800b270 <BSP_SD_GetCardState+0x10>)
 800b264:	f7fa fe36 	bl	8005ed4 <HAL_SD_GetCardState>
}
 800b268:	3804      	subs	r0, #4
 800b26a:	bf18      	it	ne
 800b26c:	2001      	movne	r0, #1
 800b26e:	bd08      	pop	{r3, pc}
 800b270:	20019c10 	.word	0x20019c10

0800b274 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b274:	4601      	mov	r1, r0
 800b276:	4801      	ldr	r0, [pc, #4]	; (800b27c <BSP_SD_GetCardInfo+0x8>)
 800b278:	f7fa bd10 	b.w	8005c9c <HAL_SD_GetCardInfo>
 800b27c:	20019c10 	.word	0x20019c10

0800b280 <BSP_SD_WriteCpltCallback>:
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop

0800b284 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b284:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800b286:	f7ff fffb 	bl	800b280 <BSP_SD_WriteCpltCallback>
}
 800b28a:	bd08      	pop	{r3, pc}

0800b28c <BSP_SD_ReadCpltCallback>:
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop

0800b290 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b290:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800b292:	f7ff fffb 	bl	800b28c <BSP_SD_ReadCpltCallback>
}
 800b296:	bd08      	pop	{r3, pc}

0800b298 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b298:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 800b29a:	2301      	movs	r3, #1
{
 800b29c:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800b29e:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800b2a2:	f000 f877 	bl	800b394 <BSP_PlatformIsDetected>
 800b2a6:	b908      	cbnz	r0, 800b2ac <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 800b2a8:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800b2ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800b2b0:	b003      	add	sp, #12
 800b2b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2b6:	bf00      	nop

0800b2b8 <BSP_SD_Init>:
{
 800b2b8:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b2ba:	f7ff ffed 	bl	800b298 <BSP_SD_IsDetected>
 800b2be:	2801      	cmp	r0, #1
 800b2c0:	d001      	beq.n	800b2c6 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800b2c2:	2002      	movs	r0, #2
}
 800b2c4:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800b2c6:	4807      	ldr	r0, [pc, #28]	; (800b2e4 <BSP_SD_Init+0x2c>)
 800b2c8:	f7fa fd9e 	bl	8005e08 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d1f9      	bne.n	800b2c4 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b2d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b2d4:	4803      	ldr	r0, [pc, #12]	; (800b2e4 <BSP_SD_Init+0x2c>)
 800b2d6:	f7fa fcf5 	bl	8005cc4 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800b2da:	3000      	adds	r0, #0
 800b2dc:	bf18      	it	ne
 800b2de:	2001      	movne	r0, #1
}
 800b2e0:	bd08      	pop	{r3, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20019c10 	.word	0x20019c10

0800b2e8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b2e8:	4b21      	ldr	r3, [pc, #132]	; (800b370 <MX_DMA_Init+0x88>)
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800b2ea:	2101      	movs	r1, #1
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	200b      	movs	r0, #11
{
 800b2f0:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b2f2:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 800b2f6:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b2f8:	430c      	orrs	r4, r1
 800b2fa:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 800b2fe:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 800b302:	400c      	ands	r4, r1
 800b304:	9400      	str	r4, [sp, #0]
 800b306:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b308:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 800b30c:	f044 0402 	orr.w	r4, r4, #2
 800b310:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 800b314:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b318:	f003 0302 	and.w	r3, r3, #2
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800b320:	f7f5 fdf8 	bl	8000f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800b324:	200b      	movs	r0, #11
 800b326:	f7f5 fe2b 	bl	8000f80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 800b32a:	2200      	movs	r2, #0
 800b32c:	2102      	movs	r1, #2
 800b32e:	200c      	movs	r0, #12
 800b330:	f7f5 fdf0 	bl	8000f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800b334:	200c      	movs	r0, #12
 800b336:	f7f5 fe23 	bl	8000f80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
 800b33a:	2200      	movs	r2, #0
 800b33c:	2103      	movs	r1, #3
 800b33e:	200d      	movs	r0, #13
 800b340:	f7f5 fde8 	bl	8000f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800b344:	200d      	movs	r0, #13
 800b346:	f7f5 fe1b 	bl	8000f80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 2, 0);
 800b34a:	2200      	movs	r2, #0
 800b34c:	2102      	movs	r1, #2
 800b34e:	200e      	movs	r0, #14
 800b350:	f7f5 fde0 	bl	8000f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800b354:	200e      	movs	r0, #14
 800b356:	f7f5 fe13 	bl	8000f80 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800b35a:	2200      	movs	r2, #0
 800b35c:	2038      	movs	r0, #56	; 0x38
 800b35e:	4611      	mov	r1, r2
 800b360:	f7f5 fdd8 	bl	8000f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800b364:	2038      	movs	r0, #56	; 0x38

}
 800b366:	b002      	add	sp, #8
 800b368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800b36c:	f7f5 be08 	b.w	8000f80 <HAL_NVIC_EnableIRQ>
 800b370:	58024400 	.word	0x58024400

0800b374 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b374:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b376:	4903      	ldr	r1, [pc, #12]	; (800b384 <MX_FATFS_Init+0x10>)
 800b378:	4803      	ldr	r0, [pc, #12]	; (800b388 <MX_FATFS_Init+0x14>)
 800b37a:	f7ff fd51 	bl	800ae20 <FATFS_LinkDriver>
 800b37e:	4b03      	ldr	r3, [pc, #12]	; (800b38c <MX_FATFS_Init+0x18>)
 800b380:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b382:	bd08      	pop	{r3, pc}
 800b384:	2000041c 	.word	0x2000041c
 800b388:	0800fe4c 	.word	0x0800fe4c
 800b38c:	20000418 	.word	0x20000418

0800b390 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 800b390:	2000      	movs	r0, #0
 800b392:	4770      	bx	lr

0800b394 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b394:	b510      	push	{r4, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b396:	4c08      	ldr	r4, [pc, #32]	; (800b3b8 <BSP_PlatformIsDetected+0x24>)
 800b398:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b39c:	4620      	mov	r0, r4
 800b39e:	f7f7 faff 	bl	80029a0 <HAL_GPIO_ReadPin>
        status = SD_NOT_PRESENT;
    }
    /* USER CODE BEGIN 1 */
    status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b3a8:	f7f7 fafa 	bl	80029a0 <HAL_GPIO_ReadPin>
    {
        status = SD_NOT_PRESENT;
    }
    /* USER CODE END 1 */ 
    return status;
}  
 800b3ac:	f1a0 0001 	sub.w	r0, r0, #1
 800b3b0:	fab0 f080 	clz	r0, r0
 800b3b4:	0940      	lsrs	r0, r0, #5
 800b3b6:	bd10      	pop	{r4, pc}
 800b3b8:	58020800 	.word	0x58020800

0800b3bc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800b3bc:	b570      	push	{r4, r5, r6, lr}
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800b3be:	4b18      	ldr	r3, [pc, #96]	; (800b420 <MX_FMC_Init+0x64>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800b3c0:	2001      	movs	r0, #1
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800b3c2:	4d18      	ldr	r5, [pc, #96]	; (800b424 <MX_FMC_Init+0x68>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800b3c4:	2108      	movs	r1, #8
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800b3c6:	2410      	movs	r4, #16
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800b3c8:	2240      	movs	r2, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800b3ca:	601d      	str	r5, [r3, #0]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800b3cc:	f44f 7580 	mov.w	r5, #256	; 0x100
{
 800b3d0:	b088      	sub	sp, #32
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
 800b3d2:	2604      	movs	r6, #4
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800b3d4:	6098      	str	r0, [r3, #8]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800b3d6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800b3da:	60d9      	str	r1, [r3, #12]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800b3dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800b3e0:	611c      	str	r4, [r3, #16]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800b3e2:	2400      	movs	r4, #0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800b3e4:	615a      	str	r2, [r3, #20]
  SdramTiming.LoadToActiveDelay = 2;
 800b3e6:	2202      	movs	r2, #2
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800b3e8:	619d      	str	r5, [r3, #24]
  SdramTiming.ExitSelfRefreshDelay = 6;
 800b3ea:	2506      	movs	r5, #6
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800b3ec:	6218      	str	r0, [r3, #32]
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800b3ee:	4618      	mov	r0, r3
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800b3f0:	6259      	str	r1, [r3, #36]	; 0x24
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800b3f2:	eb0d 0106 	add.w	r1, sp, r6
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800b3f6:	605c      	str	r4, [r3, #4]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800b3f8:	61dc      	str	r4, [r3, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800b3fa:	629c      	str	r4, [r3, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800b3fc:	9201      	str	r2, [sp, #4]
  SdramTiming.RCDDelay = 2;
 800b3fe:	9207      	str	r2, [sp, #28]
  SdramTiming.ExitSelfRefreshDelay = 6;
 800b400:	9502      	str	r5, [sp, #8]
  SdramTiming.RPDelay = 2;
 800b402:	e9cd 2205 	strd	r2, r2, [sp, #20]
  SdramTiming.SelfRefreshTime = 4;
 800b406:	e9cd 6503 	strd	r6, r5, [sp, #12]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800b40a:	f7fa fec5 	bl	8006198 <HAL_SDRAM_Init>
 800b40e:	b108      	cbz	r0, 800b414 <MX_FMC_Init+0x58>
  {
    Error_Handler( );
 800b410:	f000 fe70 	bl	800c0f4 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800b414:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800b418:	f7f4 ffe0 	bl	80003dc <HAL_SetFMCMemorySwappingConfig>

}
 800b41c:	b008      	add	sp, #32
 800b41e:	bd70      	pop	{r4, r5, r6, pc}
 800b420:	20000884 	.word	0x20000884
 800b424:	52004140 	.word	0x52004140

0800b428 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 800b428:	4a2a      	ldr	r2, [pc, #168]	; (800b4d4 <HAL_SDRAM_MspInit+0xac>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b42a:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800b42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b42e:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 800b430:	6814      	ldr	r4, [r2, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b432:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800b436:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800b43a:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 800b43c:	b10c      	cbz	r4, 800b442 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800b43e:	b007      	add	sp, #28
 800b440:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_RCC_FMC_CLK_ENABLE();
 800b442:	4b25      	ldr	r3, [pc, #148]	; (800b4d8 <HAL_SDRAM_MspInit+0xb0>)
  FMC_Initialized = 1;
 800b444:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b446:	f64f 003f 	movw	r0, #63551	; 0xf83f
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b44a:	2702      	movs	r7, #2
  FMC_Initialized = 1;
 800b44c:	6011      	str	r1, [r2, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b44e:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800b450:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b454:	250c      	movs	r5, #12
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b456:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 800b458:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b45c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800b460:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b464:	9001      	str	r0, [sp, #4]
  __HAL_RCC_FMC_CLK_ENABLE();
 800b466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b46a:	481c      	ldr	r0, [pc, #112]	; (800b4dc <HAL_SDRAM_MspInit+0xb4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b46c:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b472:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b476:	f7f7 f96f 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800b47a:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b47c:	a901      	add	r1, sp, #4
 800b47e:	4818      	ldr	r0, [pc, #96]	; (800b4e0 <HAL_SDRAM_MspInit+0xb8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800b480:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b482:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b484:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b486:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b48a:	f7f7 f965 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800b48e:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b492:	a901      	add	r1, sp, #4
 800b494:	4813      	ldr	r0, [pc, #76]	; (800b4e4 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800b496:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b498:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b49a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b49c:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b4a0:	f7f7 f95a 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800b4a4:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b4a8:	a901      	add	r1, sp, #4
 800b4aa:	480f      	ldr	r0, [pc, #60]	; (800b4e8 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800b4ac:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4ae:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4b0:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b4b2:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b4b6:	f7f7 f94f 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800b4ba:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b4be:	a901      	add	r1, sp, #4
 800b4c0:	480a      	ldr	r0, [pc, #40]	; (800b4ec <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4c2:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4c4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800b4c6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b4c8:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b4cc:	f7f7 f944 	bl	8002758 <HAL_GPIO_Init>
}
 800b4d0:	b007      	add	sp, #28
 800b4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4d4:	200002d8 	.word	0x200002d8
 800b4d8:	58024400 	.word	0x58024400
 800b4dc:	58021400 	.word	0x58021400
 800b4e0:	58020800 	.word	0x58020800
 800b4e4:	58021800 	.word	0x58021800
 800b4e8:	58021000 	.word	0x58021000
 800b4ec:	58020c00 	.word	0x58020c00

0800b4f0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800b4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b4f4:	4b85      	ldr	r3, [pc, #532]	; (800b70c <MX_GPIO_Init+0x21c>)
{
 800b4f6:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4f8:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b4fa:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b4fc:	f04f 0a02 	mov.w	sl, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800b500:	4f83      	ldr	r7, [pc, #524]	; (800b710 <MX_GPIO_Init+0x220>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b502:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800b504:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b506:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800b508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b50c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC15 PC1 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b50e:	2503      	movs	r5, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b510:	940c      	str	r4, [sp, #48]	; 0x30
 800b512:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b514:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800b518:	f8df 9200 	ldr.w	r9, [pc, #512]	; 800b71c <MX_GPIO_Init+0x22c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b51c:	f040 0c10 	orr.w	ip, r0, #16
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 800b520:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 800b720 <MX_GPIO_Init+0x230>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800b524:	4638      	mov	r0, r7
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800b526:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b724 <MX_GPIO_Init+0x234>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b52a:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800b52e:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b532:	f00c 0c10 	and.w	ip, ip, #16
 800b536:	f8cd c004 	str.w	ip, [sp, #4]
 800b53a:	f8dd c004 	ldr.w	ip, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b53e:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b542:	f04c 0c04 	orr.w	ip, ip, #4
 800b546:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800b54a:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b54e:	f00c 0c04 	and.w	ip, ip, #4
 800b552:	f8cd c008 	str.w	ip, [sp, #8]
 800b556:	f8dd c008 	ldr.w	ip, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b55a:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b55e:	f04c 0c20 	orr.w	ip, ip, #32
 800b562:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800b566:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b56a:	f00c 0c20 	and.w	ip, ip, #32
 800b56e:	f8cd c00c 	str.w	ip, [sp, #12]
 800b572:	f8dd c00c 	ldr.w	ip, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b576:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b57a:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800b57e:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800b582:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b586:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 800b58a:	f8cd c010 	str.w	ip, [sp, #16]
 800b58e:	f8dd c010 	ldr.w	ip, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b592:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b596:	ea4c 0c06 	orr.w	ip, ip, r6
 800b59a:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800b59e:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b5a2:	ea0c 0c06 	and.w	ip, ip, r6
 800b5a6:	f8cd c014 	str.w	ip, [sp, #20]
 800b5aa:	f8dd c014 	ldr.w	ip, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b5ae:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b5b2:	ea4c 0c0a 	orr.w	ip, ip, sl
 800b5b6:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800b5ba:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b5be:	ea0c 0c0a 	and.w	ip, ip, sl
 800b5c2:	f8cd c018 	str.w	ip, [sp, #24]
 800b5c6:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b5ca:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b5ce:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 800b5d2:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800b5d6:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b5da:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 800b5de:	f8cd c01c 	str.w	ip, [sp, #28]
 800b5e2:	f8dd c01c 	ldr.w	ip, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b5e6:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800b5ea:	f04c 0c08 	orr.w	ip, ip, #8
 800b5ee:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800b5f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5f6:	f003 0308 	and.w	r3, r3, #8
 800b5fa:	9308      	str	r3, [sp, #32]
 800b5fc:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800b5fe:	f7f7 f9d5 	bl	80029ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800b602:	4622      	mov	r2, r4
 800b604:	4648      	mov	r0, r9
 800b606:	2180      	movs	r1, #128	; 0x80
 800b608:	f7f7 f9d0 	bl	80029ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 800b60c:	4622      	mov	r2, r4
 800b60e:	4640      	mov	r0, r8
 800b610:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800b614:	f7f7 f9ca 	bl	80029ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800b618:	4622      	mov	r2, r4
 800b61a:	4658      	mov	r0, fp
 800b61c:	2110      	movs	r1, #16
 800b61e:	f7f7 f9c5 	bl	80029ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b626:	a909      	add	r1, sp, #36	; 0x24
 800b628:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b62a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b62e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b632:	f7f7 f891 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800b636:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b63a:	a909      	add	r1, sp, #36	; 0x24
 800b63c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b63e:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b642:	e9cd a40b 	strd	sl, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b646:	f7f7 f887 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800b64a:	f248 03c2 	movw	r3, #32962	; 0x80c2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b64e:	4638      	mov	r0, r7
 800b650:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b652:	940b      	str	r4, [sp, #44]	; 0x2c

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b654:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b658:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b65c:	f7f7 f87c 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800b660:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b664:	a909      	add	r1, sp, #36	; 0x24
 800b666:	482b      	ldr	r0, [pc, #172]	; (800b714 <MX_GPIO_Init+0x224>)
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800b668:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b66a:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b66e:	f7f7 f873 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14 
 800b672:	f244 33e7 	movw	r3, #17383	; 0x43e7
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b676:	a909      	add	r1, sp, #36	; 0x24
 800b678:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14 
 800b67a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b67c:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b680:	f7f7 f86a 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b684:	f44f 6200 	mov.w	r2, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b688:	4b23      	ldr	r3, [pc, #140]	; (800b718 <MX_GPIO_Init+0x228>)
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b68a:	a909      	add	r1, sp, #36	; 0x24
 800b68c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b68e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b690:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b694:	f7f7 f860 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 PD4 
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 800b698:	f243 0378 	movw	r3, #12408	; 0x3078
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b69c:	4638      	mov	r0, r7
 800b69e:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 800b6a0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6a2:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b6a6:	f7f7 f857 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG12 PG13 
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13 
 800b6aa:	f247 0348 	movw	r3, #28744	; 0x7048
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b6ae:	a909      	add	r1, sp, #36	; 0x24
 800b6b0:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13 
 800b6b2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6b4:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b6b8:	f7f7 f84e 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800b6bc:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b6be:	4648      	mov	r0, r9
 800b6c0:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800b6c2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6c4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6c6:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b6ca:	f7f7 f845 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 800b6ce:	f44f 4315 	mov.w	r3, #38144	; 0x9500
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6d2:	a909      	add	r1, sp, #36	; 0x24
 800b6d4:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 800b6d6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6d8:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6dc:	f7f7 f83c 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800b6e0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800b6e8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6ea:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6ec:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6f0:	f7f7 f832 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b6f4:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6f6:	a909      	add	r1, sp, #36	; 0x24
 800b6f8:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6fa:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b6fc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6fe:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b702:	f7f7 f829 	bl	8002758 <HAL_GPIO_Init>

}
 800b706:	b00f      	add	sp, #60	; 0x3c
 800b708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70c:	58024400 	.word	0x58024400
 800b710:	58020800 	.word	0x58020800
 800b714:	58021400 	.word	0x58021400
 800b718:	11110000 	.word	0x11110000
 800b71c:	58021800 	.word	0x58021800
 800b720:	58020000 	.word	0x58020000
 800b724:	58020400 	.word	0x58020400

0800b728 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800b728:	b538      	push	{r3, r4, r5, lr}

  hi2c2.Instance = I2C2;
 800b72a:	4b13      	ldr	r3, [pc, #76]	; (800b778 <MX_I2C2_Init+0x50>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
 800b72c:	2200      	movs	r2, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b72e:	2101      	movs	r1, #1
  hi2c2.Instance = I2C2;
 800b730:	4d12      	ldr	r5, [pc, #72]	; (800b77c <MX_I2C2_Init+0x54>)
  hi2c2.Init.Timing = 0x00B03FDB;
 800b732:	4c13      	ldr	r4, [pc, #76]	; (800b780 <MX_I2C2_Init+0x58>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b734:	4618      	mov	r0, r3
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b736:	621a      	str	r2, [r3, #32]
  hi2c2.Init.Timing = 0x00B03FDB;
 800b738:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c2.Init.OwnAddress1 = 0;
 800b73c:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c2.Init.OwnAddress2 = 0;
 800b740:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b744:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b748:	f7f7 f934 	bl	80029b4 <HAL_I2C_Init>
 800b74c:	b988      	cbnz	r0, 800b772 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b74e:	2100      	movs	r1, #0
 800b750:	4809      	ldr	r0, [pc, #36]	; (800b778 <MX_I2C2_Init+0x50>)
 800b752:	f7f7 f98d 	bl	8002a70 <HAL_I2CEx_ConfigAnalogFilter>
 800b756:	b948      	cbnz	r0, 800b76c <MX_I2C2_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800b758:	2100      	movs	r1, #0
 800b75a:	4807      	ldr	r0, [pc, #28]	; (800b778 <MX_I2C2_Init+0x50>)
 800b75c:	f7f7 f9b6 	bl	8002acc <HAL_I2CEx_ConfigDigitalFilter>
 800b760:	b900      	cbnz	r0, 800b764 <MX_I2C2_Init+0x3c>
  {
    Error_Handler();
  }

}
 800b762:	bd38      	pop	{r3, r4, r5, pc}
 800b764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800b768:	f000 bcc4 	b.w	800c0f4 <Error_Handler>
    Error_Handler();
 800b76c:	f000 fcc2 	bl	800c0f4 <Error_Handler>
 800b770:	e7f2      	b.n	800b758 <MX_I2C2_Init+0x30>
    Error_Handler();
 800b772:	f000 fcbf 	bl	800c0f4 <Error_Handler>
 800b776:	e7ea      	b.n	800b74e <MX_I2C2_Init+0x26>
 800b778:	200008b8 	.word	0x200008b8
 800b77c:	40005800 	.word	0x40005800
 800b780:	00b03fdb 	.word	0x00b03fdb

0800b784 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b784:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C2)
 800b786:	4a1a      	ldr	r2, [pc, #104]	; (800b7f0 <HAL_I2C_MspInit+0x6c>)
{
 800b788:	b088      	sub	sp, #32
  if(i2cHandle->Instance==I2C2)
 800b78a:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b78c:	2300      	movs	r3, #0
  if(i2cHandle->Instance==I2C2)
 800b78e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b790:	9307      	str	r3, [sp, #28]
 800b792:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800b796:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(i2cHandle->Instance==I2C2)
 800b79a:	d001      	beq.n	800b7a0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800b79c:	b008      	add	sp, #32
 800b79e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b7a0:	4c14      	ldr	r4, [pc, #80]	; (800b7f4 <HAL_I2C_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b7a2:	2012      	movs	r0, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b7a4:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b7a6:	f44f 6640 	mov.w	r6, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b7aa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7ae:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b7b0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b7b2:	f043 0302 	orr.w	r3, r3, #2
 800b7b6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b7ba:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b7be:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b7c0:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b7c4:	480c      	ldr	r0, [pc, #48]	; (800b7f8 <HAL_I2C_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b7c6:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b7cc:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b7d0:	f7f6 ffc2 	bl	8002758 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b7d4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800b7d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b7dc:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800b7e0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800b7e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7e8:	9302      	str	r3, [sp, #8]
 800b7ea:	9b02      	ldr	r3, [sp, #8]
}
 800b7ec:	b008      	add	sp, #32
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	40005800 	.word	0x40005800
 800b7f4:	58024400 	.word	0x58024400
 800b7f8:	58020400 	.word	0x58020400

0800b7fc <randomNumber>:
}

/* USER CODE BEGIN 4 */


float randomNumber(void) {
 800b7fc:	b500      	push	{lr}
 800b7fe:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800b800:	4807      	ldr	r0, [pc, #28]	; (800b820 <randomNumber+0x24>)
 800b802:	a901      	add	r1, sp, #4
 800b804:	f7f9 f85a 	bl	80048bc <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800b808:	eddd 7a01 	vldr	s15, [sp, #4]
 800b80c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800b824 <randomNumber+0x28>
 800b810:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 800b814:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b818:	b003      	add	sp, #12
 800b81a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b81e:	bf00      	nop
 800b820:	200199dc 	.word	0x200199dc
 800b824:	2f80000d 	.word	0x2f80000d

0800b828 <SystemClock_Config>:
{
 800b828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b82c:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b82e:	224c      	movs	r2, #76	; 0x4c
 800b830:	2100      	movs	r1, #0
 800b832:	a80a      	add	r0, sp, #40	; 0x28
 800b834:	f001 fddc 	bl	800d3f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b838:	2220      	movs	r2, #32
 800b83a:	2100      	movs	r1, #0
 800b83c:	a802      	add	r0, sp, #8
 800b83e:	f001 fdd7 	bl	800d3f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b842:	22bc      	movs	r2, #188	; 0xbc
 800b844:	2100      	movs	r1, #0
 800b846:	a81d      	add	r0, sp, #116	; 0x74
 800b848:	f001 fdd2 	bl	800d3f0 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800b84c:	2002      	movs	r0, #2
 800b84e:	f7f7 f969 	bl	8002b24 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800b852:	4b39      	ldr	r3, [pc, #228]	; (800b938 <SystemClock_Config+0x110>)
 800b854:	2200      	movs	r2, #0
 800b856:	4939      	ldr	r1, [pc, #228]	; (800b93c <SystemClock_Config+0x114>)
 800b858:	9201      	str	r2, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800b85a:	461a      	mov	r2, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800b85c:	6998      	ldr	r0, [r3, #24]
 800b85e:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800b862:	6198      	str	r0, [r3, #24]
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b86a:	9301      	str	r3, [sp, #4]
 800b86c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800b86e:	f043 0301 	orr.w	r3, r3, #1
 800b872:	62cb      	str	r3, [r1, #44]	; 0x2c
 800b874:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800b876:	f003 0301 	and.w	r3, r3, #1
 800b87a:	9301      	str	r3, [sp, #4]
 800b87c:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800b87e:	6993      	ldr	r3, [r2, #24]
 800b880:	049b      	lsls	r3, r3, #18
 800b882:	d5fc      	bpl.n	800b87e <SystemClock_Config+0x56>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800b884:	4a2e      	ldr	r2, [pc, #184]	; (800b940 <SystemClock_Config+0x118>)
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b886:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800b888:	2423      	movs	r4, #35	; 0x23
  RCC_OscInitStruct.PLL.PLLM = 5;
 800b88a:	2005      	movs	r0, #5
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800b88c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800b88e:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b890:	2640      	movs	r6, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800b892:	f04f 0908 	mov.w	r9, #8
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800b896:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b89a:	f44f 3880 	mov.w	r8, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 192;
 800b89e:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800b8a0:	432b      	orrs	r3, r5
 800b8a2:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800b8a4:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800b8a6:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLM = 5;
 800b8a8:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b8aa:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b8ac:	960e      	str	r6, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 800b8ae:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b8b0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800b8b4:	970d      	str	r7, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800b8b6:	9710      	str	r7, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = 2;
 800b8b8:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800b8ba:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b8bc:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800b8c0:	e9cd 5517 	strd	r5, r5, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800b8c4:	e9cd 941a 	strd	r9, r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b8c8:	f7f7 f952 	bl	8002b70 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b8cc:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b8d0:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800b8d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800b8d6:	eb0d 0009 	add.w	r0, sp, r9
 800b8da:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800b8dc:	9609      	str	r6, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800b8de:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800b8e0:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800b8e2:	f8cd 9014 	str.w	r9, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b8e6:	e9cd c202 	strd	ip, r2, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800b8ea:	e9cd 6606 	strd	r6, r6, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800b8ee:	f7f7 fc95 	bl	800321c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800b8f2:	f44f 76ac 	mov.w	r6, #344	; 0x158
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SPI1
 800b8f6:	f8df e04c 	ldr.w	lr, [pc, #76]	; 800b944 <SystemClock_Config+0x11c>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800b8fa:	f04f 0c19 	mov.w	ip, #25
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800b8fe:	2107      	movs	r1, #7
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800b900:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800b904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b908:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800b90a:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800b90e:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800b910:	942e      	str	r4, [sp, #184]	; 0xb8
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800b912:	9234      	str	r2, [sp, #208]	; 0xd0
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800b914:	9345      	str	r3, [sp, #276]	; 0x114
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800b916:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800b91a:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800b91e:	e9cd 4731 	strd	r4, r7, [sp, #196]	; 0xc4
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800b922:	e9cd 443c 	strd	r4, r4, [sp, #240]	; 0xf0
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800b926:	e9cd ec1d 	strd	lr, ip, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800b92a:	e9cd 611f 	strd	r6, r1, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b92e:	f7f7 ff45 	bl	80037bc <HAL_RCCEx_PeriphCLKConfig>
}
 800b932:	b04d      	add	sp, #308	; 0x134
 800b934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b938:	58024800 	.word	0x58024800
 800b93c:	58000400 	.word	0x58000400
 800b940:	58024400 	.word	0x58024400
 800b944:	810b1108 	.word	0x810b1108

0800b948 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 800b948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 1;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800b94c:	4c2b      	ldr	r4, [pc, #172]	; (800b9fc <SDRAM_Initialization_sequence+0xb4>)
{
 800b94e:	b087      	sub	sp, #28
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800b950:	2501      	movs	r5, #1
    __IO uint32_t tmpmrd = 0;
 800b952:	2600      	movs	r6, #0
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800b954:	2710      	movs	r7, #16
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800b956:	a902      	add	r1, sp, #8
 800b958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b95c:	4620      	mov	r0, r4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
 800b95e:	f04f 0808 	mov.w	r8, #8
    __IO uint32_t tmpmrd = 0;
 800b962:	9601      	str	r6, [sp, #4]
    Command.ModeRegisterDefinition = 0;
 800b964:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800b966:	f04f 0903 	mov.w	r9, #3
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800b96a:	9502      	str	r5, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800b96c:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800b970:	f7fa fc3a 	bl	80061e8 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 800b974:	4628      	mov	r0, r5
 800b976:	f7f4 fd19 	bl	80003ac <HAL_Delay>
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800b97a:	2302      	movs	r3, #2
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800b97c:	eb0d 0108 	add.w	r1, sp, r8
 800b980:	4620      	mov	r0, r4
 800b982:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800b986:	9302      	str	r3, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 800b988:	9605      	str	r6, [sp, #20]
    Command.AutoRefreshNumber = 1;
 800b98a:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800b98e:	f7fa fc2b 	bl	80061e8 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800b992:	f240 2222 	movw	r2, #546	; 0x222
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800b996:	2304      	movs	r3, #4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800b998:	eb0d 0108 	add.w	r1, sp, r8
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800b99c:	9201      	str	r2, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800b99e:	4620      	mov	r0, r4
    Command.ModeRegisterDefinition = tmpmrd;
 800b9a0:	f8dd c004 	ldr.w	ip, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800b9a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800b9a8:	9302      	str	r3, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800b9aa:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 800b9ac:	e9cd 5c04 	strd	r5, ip, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800b9b0:	f7fa fc1a 	bl	80061e8 <HAL_SDRAM_SendCommand>
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800b9b4:	eb0d 0108 	add.w	r1, sp, r8
 800b9b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9bc:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800b9be:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 800b9c0:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800b9c2:	f8cd 9008 	str.w	r9, [sp, #8]
    Command.AutoRefreshNumber = 8;
 800b9c6:	f8cd 8010 	str.w	r8, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800b9ca:	f7fa fc0d 	bl	80061e8 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f7f4 fcec 	bl	80003ac <HAL_Delay>
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800b9d4:	eb0d 0108 	add.w	r1, sp, r8
 800b9d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9dc:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800b9de:	e9cd 9702 	strd	r9, r7, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 800b9e2:	e9cd 8604 	strd	r8, r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800b9e6:	f7fa fbff 	bl	80061e8 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 800b9ea:	f240 5169 	movw	r1, #1385	; 0x569
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f7fa fc1c 	bl	800622c <HAL_SDRAM_ProgramRefreshRate>
}
 800b9f4:	b007      	add	sp, #28
 800b9f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9fa:	bf00      	nop
 800b9fc:	20000884 	.word	0x20000884

0800ba00 <MPU_Conf>:
	}
}
#endif

void MPU_Conf(void)
{
 800ba00:	b510      	push	{r4, lr}
 800ba02:	b084      	sub	sp, #16
	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;

	  //D3 Domain�SRAM
	  MPU_InitStruct.BaseAddress = 0x38000000;
 800ba04:	f04f 5460 	mov.w	r4, #939524096	; 0x38000000
	  HAL_MPU_Disable();
 800ba08:	f7f5 fae0 	bl	8000fcc <HAL_MPU_Disable>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ba0c:	2301      	movs	r3, #1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800ba0e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800ba12:	4a0d      	ldr	r2, [pc, #52]	; (800ba48 <MPU_Conf+0x48>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ba14:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ba16:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800ba1a:	9101      	str	r1, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800ba1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ba20:	f7f5 faf6 	bl	8001010 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ba24:	f240 1101 	movw	r1, #257	; 0x101


	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800ba28:	4a08      	ldr	r2, [pc, #32]	; (800ba4c <MPU_Conf+0x4c>)


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ba2a:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800ba2c:	4b08      	ldr	r3, [pc, #32]	; (800ba50 <MPU_Conf+0x50>)
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ba2e:	f8ad 1000 	strh.w	r1, [sp]
	  MPU_InitStruct.BaseAddress = 0x38000000;
 800ba32:	9401      	str	r4, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800ba34:	e9cd 2302 	strd	r2, r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ba38:	f7f5 faea 	bl	8001010 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800ba3c:	2004      	movs	r0, #4
 800ba3e:	f7f5 fad5 	bl	8000fec <HAL_MPU_Enable>
}
 800ba42:	b004      	add	sp, #16
 800ba44:	bd10      	pop	{r4, pc}
 800ba46:	bf00      	nop
 800ba48:	03010011 	.word	0x03010011
 800ba4c:	0301000f 	.word	0x0301000f
 800ba50:	01010100 	.word	0x01010100

0800ba54 <main>:
{
 800ba54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba58:	ed2d 8b06 	vpush	{d8-d10}
 800ba5c:	b083      	sub	sp, #12
  MPU_Conf();
 800ba5e:	f7ff ffcf 	bl	800ba00 <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 800ba62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ba66:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800ba6a:	4aa7      	ldr	r2, [pc, #668]	; (800bd08 <main+0x2b4>)
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800ba72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ba76:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800ba7a:	6953      	ldr	r3, [r2, #20]
 800ba7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba80:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800ba82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ba86:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800ba8a:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800ba8e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800ba92:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ba96:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800ba9a:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800ba9e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800baa2:	07b7      	lsls	r7, r6, #30
 800baa4:	015c      	lsls	r4, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800baa6:	ea04 050c 	and.w	r5, r4, ip
 800baaa:	4638      	mov	r0, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800baac:	4631      	mov	r1, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800baae:	ea40 0305 	orr.w	r3, r0, r5
      } while (ways-- != 0U);
 800bab2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800bab4:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 800bab8:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800babc:	1c4b      	adds	r3, r1, #1
 800babe:	d1f6      	bne.n	800baae <main+0x5a>
 800bac0:	3c20      	subs	r4, #32
    } while(sets-- != 0U);
 800bac2:	f114 0f20 	cmn.w	r4, #32
 800bac6:	d1ee      	bne.n	800baa6 <main+0x52>
 800bac8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800bacc:	6953      	ldr	r3, [r2, #20]
 800bace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bad2:	6153      	str	r3, [r2, #20]
 800bad4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bad8:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800badc:	f7f4 fc22 	bl	8000324 <HAL_Init>
  SystemClock_Config();
 800bae0:	f7ff fea2 	bl	800b828 <SystemClock_Config>
  MX_GPIO_Init();
 800bae4:	f7ff fd04 	bl	800b4f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800bae8:	f7ff fbfe 	bl	800b2e8 <MX_DMA_Init>
  MX_FMC_Init();
 800baec:	f7ff fc66 	bl	800b3bc <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 800baf0:	f000 fd58 	bl	800c5a4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800baf4:	f7ff fc3e 	bl	800b374 <MX_FATFS_Init>
  MX_SAI1_Init();
 800baf8:	f000 fbea 	bl	800c2d0 <MX_SAI1_Init>
  MX_RNG_Init();
 800bafc:	f000 fbba 	bl	800c274 <MX_RNG_Init>
  MX_SPI2_Init();
 800bb00:	f000 fdf4 	bl	800c6ec <MX_SPI2_Init>
  MX_I2C2_Init();
 800bb04:	f7ff fe10 	bl	800b728 <MX_I2C2_Init>
  MX_ADC1_Init();
 800bb08:	f7ff fa1c 	bl	800af44 <MX_ADC1_Init>
  MX_SPI1_Init();
 800bb0c:	f000 fdc0 	bl	800c690 <MX_SPI1_Init>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800bb10:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 800bb14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800bb18:	eee1 3a10 	vmsr	fpscr, r3
 800bb1c:	497b      	ldr	r1, [pc, #492]	; (800bd0c <main+0x2b8>)
 800bb1e:	2300      	movs	r3, #0
	  SPI_TX[i] = counter++;
 800bb20:	4e7b      	ldr	r6, [pc, #492]	; (800bd10 <main+0x2bc>)
 800bb22:	780a      	ldrb	r2, [r1, #0]
 800bb24:	461d      	mov	r5, r3
 800bb26:	6233      	str	r3, [r6, #32]
 800bb28:	1c50      	adds	r0, r2, #1
 800bb2a:	f362 0307 	bfi	r3, r2, #0, #8
 800bb2e:	f102 0410 	add.w	r4, r2, #16
 800bb32:	f360 230f 	bfi	r3, r0, #8, #8
 800bb36:	1c90      	adds	r0, r2, #2
 800bb38:	3203      	adds	r2, #3
 800bb3a:	700c      	strb	r4, [r1, #0]
 800bb3c:	f360 4317 	bfi	r3, r0, #16, #8
  HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 32);
 800bb40:	f106 0140 	add.w	r1, r6, #64	; 0x40
 800bb44:	4873      	ldr	r0, [pc, #460]	; (800bd14 <main+0x2c0>)
 800bb46:	f362 631f 	bfi	r3, r2, #24, #8
 800bb4a:	2220      	movs	r2, #32
 800bb4c:	f003 347f 	and.w	r4, r3, #2139062143	; 0x7f7f7f7f
 800bb50:	f003 3780 	and.w	r7, r3, #2155905152	; 0x80808080
	  SPI_TX[i] = counter++;
 800bb54:	6033      	str	r3, [r6, #0]
 800bb56:	f104 3404 	add.w	r4, r4, #67372036	; 0x4040404
 800bb5a:	407c      	eors	r4, r7
 800bb5c:	f004 337f 	and.w	r3, r4, #2139062143	; 0x7f7f7f7f
 800bb60:	6074      	str	r4, [r6, #4]
 800bb62:	f004 3480 	and.w	r4, r4, #2155905152	; 0x80808080
 800bb66:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 800bb6a:	4063      	eors	r3, r4
 800bb6c:	f003 347f 	and.w	r4, r3, #2139062143	; 0x7f7f7f7f
 800bb70:	60b3      	str	r3, [r6, #8]
 800bb72:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 800bb76:	f104 3404 	add.w	r4, r4, #67372036	; 0x4040404
 800bb7a:	4063      	eors	r3, r4
 800bb7c:	e9c6 5509 	strd	r5, r5, [r6, #36]	; 0x24
 800bb80:	60f3      	str	r3, [r6, #12]
 800bb82:	e9c6 550b 	strd	r5, r5, [r6, #44]	; 0x2c
  HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 32);
 800bb86:	f7fa fe51 	bl	800682c <HAL_SPI_Receive_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	2140      	movs	r1, #64	; 0x40
 800bb8e:	4862      	ldr	r0, [pc, #392]	; (800bd18 <main+0x2c4>)
 800bb90:	f7f6 ff0c 	bl	80029ac <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800bb94:	200a      	movs	r0, #10
 800bb96:	f7f4 fc09 	bl	80003ac <HAL_Delay>
  SDRAM_Initialization_sequence();
 800bb9a:	f7ff fed5 	bl	800b948 <SDRAM_Initialization_sequence>
  HAL_Delay(10);
 800bb9e:	200a      	movs	r0, #10
 800bba0:	f7f4 fc04 	bl	80003ac <HAL_Delay>
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800bba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bba8:	495c      	ldr	r1, [pc, #368]	; (800bd1c <main+0x2c8>)
 800bbaa:	485d      	ldr	r0, [pc, #372]	; (800bd20 <main+0x2cc>)
 800bbac:	f7f9 f936 	bl	8004e1c <HAL_SAI_Transmit_DMA>
  HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 800bbb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbb4:	495b      	ldr	r1, [pc, #364]	; (800bd24 <main+0x2d0>)
 800bbb6:	485c      	ldr	r0, [pc, #368]	; (800bd28 <main+0x2d4>)
 800bbb8:	f7f9 f9c0 	bl	8004f3c <HAL_SAI_Receive_DMA>
 if(BSP_SD_IsDetected())
 800bbbc:	f7ff fb6c 	bl	800b298 <BSP_SD_IsDetected>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d166      	bne.n	800bc92 <main+0x23e>
 800bbc4:	4e59      	ldr	r6, [pc, #356]	; (800bd2c <main+0x2d8>)
LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 800bbc6:	2400      	movs	r4, #0
	tThreshold_init(&threshold[i],120.0f, 220.0f);
 800bbc8:	eddf aa59 	vldr	s21, [pc, #356]	; 800bd30 <main+0x2dc>
LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 800bbcc:	f44f 7000 	mov.w	r0, #512	; 0x200
	tThreshold_init(&threshold[i],120.0f, 220.0f);
 800bbd0:	ed9f aa58 	vldr	s20, [pc, #352]	; 800bd34 <main+0x2e0>
	tSlide_init(&fastSlide[i],1.0f,500.0f); //1110
 800bbd4:	eddf 9a58 	vldr	s19, [pc, #352]	; 800bd38 <main+0x2e4>
		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 2000.0f, 0.6f);
 800bbd8:	ed9f 9a58 	vldr	s18, [pc, #352]	; 800bd3c <main+0x2e8>
 800bbdc:	eddf 8a58 	vldr	s17, [pc, #352]	; 800bd40 <main+0x2ec>
		tHighpass_init(&opticalHighpass[i][j], 80.0f);
 800bbe0:	ed9f 8a58 	vldr	s16, [pc, #352]	; 800bd44 <main+0x2f0>
 800bbe4:	4d58      	ldr	r5, [pc, #352]	; (800bd48 <main+0x2f4>)
 800bbe6:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 800bd98 <main+0x344>
 800bbea:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bd9c <main+0x348>
 800bbee:	4f57      	ldr	r7, [pc, #348]	; (800bd4c <main+0x2f8>)
LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 800bbf0:	4b57      	ldr	r3, [pc, #348]	; (800bd50 <main+0x2fc>)
 800bbf2:	4a58      	ldr	r2, [pc, #352]	; (800bd54 <main+0x300>)
 800bbf4:	4958      	ldr	r1, [pc, #352]	; (800bd58 <main+0x304>)
 800bbf6:	ed9f 0a59 	vldr	s0, [pc, #356]	; 800bd5c <main+0x308>
 800bbfa:	f001 fb7d 	bl	800d2f8 <LEAF_init>
	tThreshold_init(&threshold[i],120.0f, 220.0f);
 800bbfe:	eb09 0004 	add.w	r0, r9, r4
 800bc02:	eef0 0a6a 	vmov.f32	s1, s21
 800bc06:	eeb0 0a4a 	vmov.f32	s0, s20
 800bc0a:	f000 ff75 	bl	800caf8 <tThreshold_init>
	tSlide_init(&fastSlide[i],1.0f,500.0f); //1110
 800bc0e:	eb08 0004 	add.w	r0, r8, r4
 800bc12:	eef0 0a69 	vmov.f32	s1, s19
 800bc16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bc1a:	f000 ffa1 	bl	800cb60 <tSlide_init>
	tSlide_init(&slowSlide[i],1.0f,500.0f); //1110
 800bc1e:	1938      	adds	r0, r7, r4
 800bc20:	eef0 0a69 	vmov.f32	s1, s19
 800bc24:	3404      	adds	r4, #4
 800bc26:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bc2a:	f000 ff99 	bl	800cb60 <tSlide_init>
		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 2000.0f, 0.6f);
 800bc2e:	eef0 0a49 	vmov.f32	s1, s18
 800bc32:	2101      	movs	r1, #1
 800bc34:	4630      	mov	r0, r6
 800bc36:	eeb0 0a68 	vmov.f32	s0, s17
 800bc3a:	f001 f81b 	bl	800cc74 <tVZFilter_init>
		tHighpass_init(&opticalHighpass[i][j], 80.0f);
 800bc3e:	4628      	mov	r0, r5
 800bc40:	eeb0 0a48 	vmov.f32	s0, s16
 800bc44:	f000 ffe6 	bl	800cc14 <tHighpass_init>
		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 2000.0f, 0.6f);
 800bc48:	1d30      	adds	r0, r6, #4
 800bc4a:	eef0 0a49 	vmov.f32	s1, s18
 800bc4e:	2101      	movs	r1, #1
 800bc50:	eeb0 0a68 	vmov.f32	s0, s17
 800bc54:	3608      	adds	r6, #8
 800bc56:	f001 f80d 	bl	800cc74 <tVZFilter_init>
		tHighpass_init(&opticalHighpass[i][j], 80.0f);
 800bc5a:	1d28      	adds	r0, r5, #4
 800bc5c:	eeb0 0a48 	vmov.f32	s0, s16
 800bc60:	3508      	adds	r5, #8
 800bc62:	f000 ffd7 	bl	800cc14 <tHighpass_init>
for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 800bc66:	2c28      	cmp	r4, #40	; 0x28
 800bc68:	d1c9      	bne.n	800bbfe <main+0x1aa>
 800bc6a:	4c3d      	ldr	r4, [pc, #244]	; (800bd60 <main+0x30c>)
LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 800bc6c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800bc70:	483c      	ldr	r0, [pc, #240]	; (800bd64 <main+0x310>)
 800bc72:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800bc76:	f001 fa43 	bl	800d100 <LEAF_generate_atodb>
	 tPluckDetectorInt_init(&myPluck[j]);
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	3404      	adds	r4, #4
 800bc7e:	f000 faf3 	bl	800c268 <tPluckDetectorInt_init>
 for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 800bc82:	42ac      	cmp	r4, r5
 800bc84:	d1f9      	bne.n	800bc7a <main+0x226>
 HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 800bc86:	2250      	movs	r2, #80	; 0x50
 800bc88:	4937      	ldr	r1, [pc, #220]	; (800bd68 <main+0x314>)
 800bc8a:	4838      	ldr	r0, [pc, #224]	; (800bd6c <main+0x318>)
 800bc8c:	f7f4 fbb0 	bl	80003f0 <HAL_ADC_Start_DMA>
 800bc90:	e7fe      	b.n	800bc90 <main+0x23c>
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800bc92:	a901      	add	r1, sp, #4
 800bc94:	4836      	ldr	r0, [pc, #216]	; (800bd70 <main+0x31c>)
 800bc96:	f7f8 fe11 	bl	80048bc <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800bc9a:	eddd 7a01 	vldr	s15, [sp, #4]
  uint theNumber = randomNumber() * 65535;
 800bc9e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800bd74 <main+0x320>
  itoa(theNumber,tempText, 10);
 800bca2:	220a      	movs	r2, #10
	float num = (float)rand * INV_TWO_TO_32;
 800bca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
  itoa(theNumber,tempText, 10);
 800bca8:	4933      	ldr	r1, [pc, #204]	; (800bd78 <main+0x324>)
  uint theNumber = randomNumber() * 65535;
 800bcaa:	ee67 7a87 	vmul.f32	s15, s15, s14
  itoa(theNumber,tempText, 10);
 800bcae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcb2:	ee17 0a90 	vmov	r0, s15
 800bcb6:	f001 fb99 	bl	800d3ec <itoa>
  strncat(filename, tempText, sizeof(tempText));
 800bcba:	221e      	movs	r2, #30
 800bcbc:	492e      	ldr	r1, [pc, #184]	; (800bd78 <main+0x324>)
 800bcbe:	482f      	ldr	r0, [pc, #188]	; (800bd7c <main+0x328>)
 800bcc0:	f001 fb9e 	bl	800d400 <strncat>
  strncat(filename, fileExt, sizeof(fileExt));
 800bcc4:	2205      	movs	r2, #5
 800bcc6:	492e      	ldr	r1, [pc, #184]	; (800bd80 <main+0x32c>)
 800bcc8:	482c      	ldr	r0, [pc, #176]	; (800bd7c <main+0x328>)
 800bcca:	f001 fb99 	bl	800d400 <strncat>
  statusH = disk_initialize(0);
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f7fb feea 	bl	8007aa8 <disk_initialize>
 800bcd4:	4b2b      	ldr	r3, [pc, #172]	; (800bd84 <main+0x330>)
 800bcd6:	7018      	strb	r0, [r3, #0]
  HAL_Delay(10);
 800bcd8:	200a      	movs	r0, #10
 800bcda:	f7f4 fb67 	bl	80003ac <HAL_Delay>
  if(f_mount(&MMCFatFs, (TCHAR const*)SDPath, 1) == FR_OK)
 800bcde:	2201      	movs	r2, #1
 800bce0:	4929      	ldr	r1, [pc, #164]	; (800bd88 <main+0x334>)
 800bce2:	482a      	ldr	r0, [pc, #168]	; (800bd8c <main+0x338>)
 800bce4:	f7fe fe52 	bl	800a98c <f_mount>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	f47f af6b 	bne.w	800bbc4 <main+0x170>
		  if(f_open(&myFile, filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800bcee:	220a      	movs	r2, #10
 800bcf0:	4922      	ldr	r1, [pc, #136]	; (800bd7c <main+0x328>)
 800bcf2:	4827      	ldr	r0, [pc, #156]	; (800bd90 <main+0x33c>)
 800bcf4:	f7fe fe9c 	bl	800aa30 <f_open>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	f47f af63 	bne.w	800bbc4 <main+0x170>
			SDReady = 1;
 800bcfe:	4b25      	ldr	r3, [pc, #148]	; (800bd94 <main+0x340>)
 800bd00:	2201      	movs	r2, #1
 800bd02:	601a      	str	r2, [r3, #0]
 800bd04:	e75e      	b.n	800bbc4 <main+0x170>
 800bd06:	bf00      	nop
 800bd08:	e000ed00 	.word	0xe000ed00
 800bd0c:	20000fd1 	.word	0x20000fd1
 800bd10:	30000000 	.word	0x30000000
 800bd14:	20019c90 	.word	0x20019c90
 800bd18:	58020800 	.word	0x58020800
 800bd1c:	300021a0 	.word	0x300021a0
 800bd20:	20019b78 	.word	0x20019b78
 800bd24:	300001a0 	.word	0x300001a0
 800bd28:	200199f0 	.word	0x200199f0
 800bd2c:	20019960 	.word	0x20019960
 800bd30:	435c0000 	.word	0x435c0000
 800bd34:	42f00000 	.word	0x42f00000
 800bd38:	43fa0000 	.word	0x43fa0000
 800bd3c:	3f19999a 	.word	0x3f19999a
 800bd40:	44fa0000 	.word	0x44fa0000
 800bd44:	42a00000 	.word	0x42a00000
 800bd48:	20000b74 	.word	0x20000b74
 800bd4c:	20001270 	.word	0x20001270
 800bd50:	0800b7fd 	.word	0x0800b7fd
 800bd54:	000493e0 	.word	0x000493e0
 800bd58:	24035b60 	.word	0x24035b60
 800bd5c:	473b8000 	.word	0x473b8000
 800bd60:	20000ee0 	.word	0x20000ee0
 800bd64:	200012c0 	.word	0x200012c0
 800bd68:	30000060 	.word	0x30000060
 800bd6c:	2000033c 	.word	0x2000033c
 800bd70:	200199dc 	.word	0x200199dc
 800bd74:	377fff1a 	.word	0x377fff1a
 800bd78:	20000f84 	.word	0x20000f84
 800bd7c:	20000f08 	.word	0x20000f08
 800bd80:	20000008 	.word	0x20000008
 800bd84:	20000fd0 	.word	0x20000fd0
 800bd88:	2000041c 	.word	0x2000041c
 800bd8c:	20000fd8 	.word	0x20000fd8
 800bd90:	20000940 	.word	0x20000940
 800bd94:	200002dc 	.word	0x200002dc
 800bd98:	20000918 	.word	0x20000918
 800bd9c:	200199b4 	.word	0x200199b4

0800bda0 <attackDetectPeak2>:
int armedCounter[NUM_STRINGS];
float slopeStorage[NUM_STRINGS];
int attackDetectPeak2 (int whichString, int tempInt)
{
	float output = -1;
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 800bda0:	ee07 1a90 	vmov	s15, r1
 800bda4:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800bf48 <attackDetectPeak2+0x1a8>
 800bda8:	ed9f 0a68 	vldr	s0, [pc, #416]	; 800bf4c <attackDetectPeak2+0x1ac>
 800bdac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 800bdb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 800bdb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdb8:	00c6      	lsls	r6, r0, #3
	for (int k = 0; k < FILTER_ORDER; k++)
	{
		// a highpass filter, remove any slow moving signal (effectively centers the signal around zero and gets rid of the signal that isn't high frequency vibration) cutoff of 100Hz, // applied 8 times to get rid of a lot of low frequency bumbling around
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 800bdba:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 800bf88 <attackDetectPeak2+0x1e8>
 800bdbe:	0084      	lsls	r4, r0, #2
		tempSamp = tVZFilter_tick(&opticalLowpass[whichString][k], tempSamp * 1.0f);
 800bdc0:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800bf8c <attackDetectPeak2+0x1ec>
 800bdc4:	1d37      	adds	r7, r6, #4
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 800bdc6:	ee27 0a80 	vmul.f32	s0, s15, s0
{
 800bdca:	4605      	mov	r5, r0
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 800bdcc:	eb09 0006 	add.w	r0, r9, r6
{
 800bdd0:	ed2d 8b02 	vpush	{d8}
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 800bdd4:	f000 ff3e 	bl	800cc54 <tHighpass_tick>
		tempSamp = tVZFilter_tick(&opticalLowpass[whichString][k], tempSamp * 1.0f);
 800bdd8:	eb08 0006 	add.w	r0, r8, r6
 800bddc:	f001 f93e 	bl	800d05c <tVZFilter_tick>
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 800bde0:	eb09 0007 	add.w	r0, r9, r7
 800bde4:	f000 ff36 	bl	800cc54 <tHighpass_tick>
		tempSamp = tVZFilter_tick(&opticalLowpass[whichString][k], tempSamp * 1.0f);
 800bde8:	eb08 0007 	add.w	r0, r8, r7
 800bdec:	f001 f936 	bl	800d05c <tVZFilter_tick>
	}

	float tempAbs = fabsf(tempSamp);

	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 800bdf0:	4857      	ldr	r0, [pc, #348]	; (800bf50 <attackDetectPeak2+0x1b0>)
 800bdf2:	eeb0 0ac0 	vabs.f32	s0, s0
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 800bdf6:	f8df 8198 	ldr.w	r8, [pc, #408]	; 800bf90 <attackDetectPeak2+0x1f0>
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 800bdfa:	4420      	add	r0, r4
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
	//dbSmoothed2 = atodb(Dsmoothed2);
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
	//dbSmoothed2 = LEAF_clip(-50.f, dbSmoothed2, 12.0f);
	//get the slope
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 800bdfc:	4e55      	ldr	r6, [pc, #340]	; (800bf54 <attackDetectPeak2+0x1b4>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 800bdfe:	f000 fed7 	bl	800cbb0 <tSlide_tick>
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 800be02:	4855      	ldr	r0, [pc, #340]	; (800bf58 <attackDetectPeak2+0x1b8>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 800be04:	4b55      	ldr	r3, [pc, #340]	; (800bf5c <attackDetectPeak2+0x1bc>)
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 800be06:	4420      	add	r0, r4
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 800be08:	4f55      	ldr	r7, [pc, #340]	; (800bf60 <attackDetectPeak2+0x1c0>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 800be0a:	ed83 0a00 	vstr	s0, [r3]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 800be0e:	f000 fecf 	bl	800cbb0 <tSlide_tick>
 800be12:	eef0 7a40 	vmov.f32	s15, s0
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 800be16:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800bf64 <attackDetectPeak2+0x1c4>
 800be1a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800be1e:	eef0 0a67 	vmov.f32	s1, s15
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 800be22:	edc8 7a00 	vstr	s15, [r8]
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 800be26:	f001 f957 	bl	800d0d8 <LEAF_clip>
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 800be2a:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800bf68 <attackDetectPeak2+0x1c8>
 800be2e:	4b4f      	ldr	r3, [pc, #316]	; (800bf6c <attackDetectPeak2+0x1cc>)
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 800be30:	eeb0 7a40 	vmov.f32	s14, s0
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 800be34:	ee60 7a27 	vmul.f32	s15, s0, s15
 800be38:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800bf70 <attackDetectPeak2+0x1d0>
 800be3c:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 800be40:	ed88 7a00 	vstr	s14, [r8]
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 800be44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be48:	ee17 2a90 	vmov	r2, s15
 800be4c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800be50:	edd3 0a00 	vldr	s1, [r3]
 800be54:	f001 f940 	bl	800d0d8 <LEAF_clip>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 800be58:	1933      	adds	r3, r6, r4
	slopeStorage[whichString] = slope;
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 800be5a:	edd8 8a00 	vldr	s17, [r8]
 800be5e:	eddf 7a45 	vldr	s15, [pc, #276]	; 800bf74 <attackDetectPeak2+0x1d4>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 800be62:	ed93 8a00 	vldr	s16, [r3]
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 800be66:	ee68 8aa7 	vmul.f32	s17, s17, s15
	slopeStorage[whichString] = slope;
 800be6a:	4b43      	ldr	r3, [pc, #268]	; (800bf78 <attackDetectPeak2+0x1d8>)
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 800be6c:	ee30 8a48 	vsub.f32	s16, s0, s16
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 800be70:	4842      	ldr	r0, [pc, #264]	; (800bf7c <attackDetectPeak2+0x1dc>)
	slopeStorage[whichString] = slope;
 800be72:	4423      	add	r3, r4
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 800be74:	ed87 0a00 	vstr	s0, [r7]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 800be78:	4420      	add	r0, r4
 800be7a:	eeb0 0a68 	vmov.f32	s0, s17
	slopeStorage[whichString] = slope;
 800be7e:	ed83 8a00 	vstr	s16, [r3]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 800be82:	f000 fe55 	bl	800cb30 <tThreshold_tick>
 800be86:	4b3e      	ldr	r3, [pc, #248]	; (800bf80 <attackDetectPeak2+0x1e0>)
	if ((slope > 0.1f) && (threshOut > 0))
 800be88:	2800      	cmp	r0, #0
	{
		armed[whichString] = 1;
 800be8a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800bf94 <attackDetectPeak2+0x1f4>
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 800be8e:	6018      	str	r0, [r3, #0]
	if ((slope > 0.1f) && (threshOut > 0))
 800be90:	dd06      	ble.n	800bea0 <attackDetectPeak2+0x100>
 800be92:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800bf84 <attackDetectPeak2+0x1e4>
 800be96:	eeb4 8a67 	vcmp.f32	s16, s15
 800be9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be9e:	dc0c      	bgt.n	800beba <attackDetectPeak2+0x11a>
	}

	if (armed[whichString] == 1)
 800bea0:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d00b      	beq.n	800bec0 <attackDetectPeak2+0x120>
{
 800bea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			downCounter[whichString] = 0;
			stringMaxes[whichString] = 0;
		}
	}

	prevdbSmoothed2[whichString] = dbSmoothed2;
 800beac:	4434      	add	r4, r6
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	6023      	str	r3, [r4, #0]
	return (int)output;
}
 800beb2:	ecbd 8b02 	vpop	{d8}
 800beb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		armed[whichString] = 1;
 800beba:	2301      	movs	r3, #1
 800bebc:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
		if (integerVersion > stringMaxes[whichString])
 800bec0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bf98 <attackDetectPeak2+0x1f8>
 800bec4:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 800bec8:	ee07 3a90 	vmov	s15, r3
 800becc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bed0:	eef4 7ae8 	vcmpe.f32	s15, s17
 800bed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed8:	d42f      	bmi.n	800bf3a <attackDetectPeak2+0x19a>
		armedCounter[whichString]++;
 800beda:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800bf9c <attackDetectPeak2+0x1fc>
		if (slope <= 0.0f)
 800bede:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bee2:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800bfa0 <attackDetectPeak2+0x200>
		armedCounter[whichString]++;
 800bee6:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
		if (slope <= 0.0f)
 800beea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beee:	f85b 2025 	ldr.w	r2, [fp, r5, lsl #2]
		armedCounter[whichString]++;
 800bef2:	f103 0301 	add.w	r3, r3, #1
 800bef6:	f849 3025 	str.w	r3, [r9, r5, lsl #2]
		if (slope <= 0.0f)
 800befa:	d802      	bhi.n	800bf02 <attackDetectPeak2+0x162>
			downCounter[whichString]++;
 800befc:	3201      	adds	r2, #1
 800befe:	f84b 2025 	str.w	r2, [fp, r5, lsl #2]
		if (downCounter[whichString] > 128)
 800bf02:	2a80      	cmp	r2, #128	; 0x80
 800bf04:	ddd0      	ble.n	800bea8 <attackDetectPeak2+0x108>
			output = LEAF_clip(0.0f, output, 65535.0f);
 800bf06:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 800bf0a:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 800bf74 <attackDetectPeak2+0x1d4>
 800bf0e:	ee07 3a90 	vmov	s15, r3
 800bf12:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800bf64 <attackDetectPeak2+0x1c4>
 800bf16:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800bf1a:	f001 f8dd 	bl	800d0d8 <LEAF_clip>
 800bf1e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			armed[whichString] = 0;
 800bf22:	2300      	movs	r3, #0
 800bf24:	ee17 0a90 	vmov	r0, s15
 800bf28:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
			armedCounter[whichString] = 0;
 800bf2c:	f849 3025 	str.w	r3, [r9, r5, lsl #2]
			downCounter[whichString] = 0;
 800bf30:	f84b 3025 	str.w	r3, [fp, r5, lsl #2]
			stringMaxes[whichString] = 0;
 800bf34:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 800bf38:	e7b8      	b.n	800beac <attackDetectPeak2+0x10c>
			stringMaxes[whichString] = integerVersion;
 800bf3a:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 800bf3e:	ee18 3a90 	vmov	r3, s17
 800bf42:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 800bf46:	e7c8      	b.n	800beda <attackDetectPeak2+0x13a>
 800bf48:	47000000 	.word	0x47000000
 800bf4c:	37fffffc 	.word	0x37fffffc
 800bf50:	200199b4 	.word	0x200199b4
 800bf54:	20000eb8 	.word	0x20000eb8
 800bf58:	20001270 	.word	0x20001270
 800bf5c:	20000fd4 	.word	0x20000fd4
 800bf60:	20000e9c 	.word	0x20000e9c
 800bf64:	00000000 	.word	0x00000000
 800bf68:	46c34e00 	.word	0x46c34e00
 800bf6c:	200012c0 	.word	0x200012c0
 800bf70:	c2a00000 	.word	0xc2a00000
 800bf74:	477fff00 	.word	0x477fff00
 800bf78:	20000e4c 	.word	0x20000e4c
 800bf7c:	20000918 	.word	0x20000918
 800bf80:	20000330 	.word	0x20000330
 800bf84:	3dcccccd 	.word	0x3dcccccd
 800bf88:	20000b74 	.word	0x20000b74
 800bf8c:	20019960 	.word	0x20019960
 800bf90:	20000f30 	.word	0x20000f30
 800bf94:	200002e0 	.word	0x200002e0
 800bf98:	20000308 	.word	0x20000308
 800bf9c:	20000e74 	.word	0x20000e74
 800bfa0:	20001298 	.word	0x20001298

0800bfa4 <ADC_Frame>:
int brokedIt = 0;
int didPlucked2[10];
int pluckDelay[10];
int pluckValues[10];
void ADC_Frame(int offset)
{
 800bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	b085      	sub	sp, #20
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800bfac:	2201      	movs	r2, #1
 800bfae:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bfb2:	4843      	ldr	r0, [pc, #268]	; (800c0c0 <ADC_Frame+0x11c>)
 800bfb4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800bfb8:	f7f6 fcf8 	bl	80029ac <HAL_GPIO_WritePin>
 800bfbc:	4b41      	ldr	r3, [pc, #260]	; (800c0c4 <ADC_Frame+0x120>)
 800bfbe:	2204      	movs	r2, #4
 800bfc0:	4e41      	ldr	r6, [pc, #260]	; (800c0c8 <ADC_Frame+0x124>)
 800bfc2:	f1a3 0760 	sub.w	r7, r3, #96	; 0x60
 800bfc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfca:	9203      	str	r2, [sp, #12]
	int changeHappened = 0;
 800bfcc:	f04f 0b00 	mov.w	fp, #0
 800bfd0:	3b04      	subs	r3, #4
 800bfd2:	6832      	ldr	r2, [r6, #0]
 800bfd4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800c0d8 <ADC_Frame+0x134>
					changeHappened = 1;
					stringSounding[j] = 1;
					//HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 4);
				}

				if ((stringTouchRH[j]) && (stringSounding[j]))
 800bfd8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800c0dc <ADC_Frame+0x138>
 800bfdc:	9301      	str	r3, [sp, #4]
		if (howManyFrames > 0)
 800bfde:	2a00      	cmp	r2, #0
 800bfe0:	dd01      	ble.n	800bfe6 <ADC_Frame+0x42>
			howManyFrames--;
 800bfe2:	3a01      	subs	r2, #1
 800bfe4:	6032      	str	r2, [r6, #0]
	int changeHappened = 0;
 800bfe6:	2400      	movs	r4, #0
 800bfe8:	4d38      	ldr	r5, [pc, #224]	; (800c0cc <ADC_Frame+0x128>)
 800bfea:	f8dd a004 	ldr.w	sl, [sp, #4]
			if (j < 8)
 800bfee:	2c07      	cmp	r4, #7
			int tempInt = ADC_values[(i*NUM_ADC_CHANNELS) + j];
 800bff0:	f85a 1f04 	ldr.w	r1, [sl, #4]!
			if (j < 8)
 800bff4:	dc3d      	bgt.n	800c072 <ADC_Frame+0xce>
				stringTouchRH[j] = (SPI_RX[4] >> j) & 1;
 800bff6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800bffa:	4123      	asrs	r3, r4
 800bffc:	f003 0301 	and.w	r3, r3, #1
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 800c000:	4620      	mov	r0, r4
 800c002:	f825 3b02 	strh.w	r3, [r5], #2
 800c006:	f7ff fecb 	bl	800bda0 <attackDetectPeak2>
			if (howManyFrames == 0)
 800c00a:	6832      	ldr	r2, [r6, #0]
 800c00c:	00a1      	lsls	r1, r4, #2
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 800c00e:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
			if (howManyFrames == 0)
 800c012:	b9c2      	cbnz	r2, 800c046 <ADC_Frame+0xa2>
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 800c014:	2800      	cmp	r0, #0
 800c016:	f835 cc02 	ldrh.w	ip, [r5, #-2]
 800c01a:	dd32      	ble.n	800c082 <ADC_Frame+0xde>
 800c01c:	f858 3001 	ldr.w	r3, [r8, r1]
 800c020:	b973      	cbnz	r3, 800c040 <ADC_Frame+0x9c>
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] & 0xff);
 800c022:	4b2b      	ldr	r3, [pc, #172]	; (800c0d0 <ADC_Frame+0x12c>)
					SPI_PLUCK_TX[(j * 2)] = (didPlucked[j] >> 8);
 800c024:	ea4f 2e20 	mov.w	lr, r0, asr #8
					stringSounding[j] = 1;
 800c028:	f04f 0b01 	mov.w	fp, #1
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] & 0xff);
 800c02c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
					stringSounding[j] = 1;
 800c030:	f848 b001 	str.w	fp, [r8, r1]
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] & 0xff);
 800c034:	9302      	str	r3, [sp, #8]
					SPI_PLUCK_TX[(j * 2)] = (didPlucked[j] >> 8);
 800c036:	4b26      	ldr	r3, [pc, #152]	; (800c0d0 <ADC_Frame+0x12c>)
 800c038:	f803 e014 	strb.w	lr, [r3, r4, lsl #1]
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] & 0xff);
 800c03c:	9b02      	ldr	r3, [sp, #8]
 800c03e:	7058      	strb	r0, [r3, #1]
				if ((stringTouchRH[j]) && (stringSounding[j]))
 800c040:	f1bc 0f00 	cmp.w	ip, #0
 800c044:	d124      	bne.n	800c090 <ADC_Frame+0xec>
		for (int j = 0; j < 10; j++)
 800c046:	3401      	adds	r4, #1
 800c048:	2c0a      	cmp	r4, #10
 800c04a:	d1d0      	bne.n	800bfee <ADC_Frame+0x4a>
 800c04c:	9b01      	ldr	r3, [sp, #4]
 800c04e:	3328      	adds	r3, #40	; 0x28
 800c050:	9301      	str	r3, [sp, #4]
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 800c052:	9b03      	ldr	r3, [sp, #12]
 800c054:	3b01      	subs	r3, #1
 800c056:	9303      	str	r3, [sp, #12]
 800c058:	d1c1      	bne.n	800bfde <ADC_Frame+0x3a>
			}
*/
		}

	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800c05a:	461a      	mov	r2, r3
 800c05c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c060:	4817      	ldr	r0, [pc, #92]	; (800c0c0 <ADC_Frame+0x11c>)
 800c062:	f7f6 fca3 	bl	80029ac <HAL_GPIO_WritePin>
	if (changeHappened)
 800c066:	f1bb 0f00 	cmp.w	fp, #0
 800c06a:	d120      	bne.n	800c0ae <ADC_Frame+0x10a>
	{
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 20);
	}
}
 800c06c:	b005      	add	sp, #20
 800c06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				stringTouchRH[j] = (SPI_RX[5] >> (j-8)) & 1;
 800c072:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800c076:	f1a4 0208 	sub.w	r2, r4, #8
 800c07a:	4113      	asrs	r3, r2
 800c07c:	f003 0301 	and.w	r3, r3, #1
 800c080:	e7be      	b.n	800c000 <ADC_Frame+0x5c>
				if ((stringTouchRH[j]) && (stringSounding[j]))
 800c082:	f1bc 0f00 	cmp.w	ip, #0
 800c086:	d0de      	beq.n	800c046 <ADC_Frame+0xa2>
 800c088:	f858 3001 	ldr.w	r3, [r8, r1]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d0da      	beq.n	800c046 <ADC_Frame+0xa2>
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 800c090:	480f      	ldr	r0, [pc, #60]	; (800c0d0 <ADC_Frame+0x12c>)
					SPI_PLUCK_TX[(j * 2)] = 0;
 800c092:	f04f 0c00 	mov.w	ip, #0
					changeHappened = 1;
 800c096:	f04f 0b01 	mov.w	fp, #1
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 800c09a:	eb00 0344 	add.w	r3, r0, r4, lsl #1
					SPI_PLUCK_TX[(j * 2)] = 0;
 800c09e:	f800 c014 	strb.w	ip, [r0, r4, lsl #1]
					stringSounding[j] = 0;
 800c0a2:	2000      	movs	r0, #0
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 800c0a4:	f883 c001 	strb.w	ip, [r3, #1]
					stringSounding[j] = 0;
 800c0a8:	f848 0001 	str.w	r0, [r8, r1]
 800c0ac:	e7cb      	b.n	800c046 <ADC_Frame+0xa2>
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 20);
 800c0ae:	2214      	movs	r2, #20
 800c0b0:	4907      	ldr	r1, [pc, #28]	; (800c0d0 <ADC_Frame+0x12c>)
 800c0b2:	4808      	ldr	r0, [pc, #32]	; (800c0d4 <ADC_Frame+0x130>)
}
 800c0b4:	b005      	add	sp, #20
 800c0b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 20);
 800c0ba:	f7fa b9e7 	b.w	800648c <HAL_SPI_Transmit_DMA>
 800c0be:	bf00      	nop
 800c0c0:	58020000 	.word	0x58020000
 800c0c4:	30000060 	.word	0x30000060
 800c0c8:	20000010 	.word	0x20000010
 800c0cc:	20000ea0 	.word	0x20000ea0
 800c0d0:	30000020 	.word	0x30000020
 800c0d4:	20019d90 	.word	0x20019d90
 800c0d8:	20000f5c 	.word	0x20000f5c
 800c0dc:	20000dfc 	.word	0x20000dfc

0800c0e0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{


	ADC_Frame(ADC_FRAME_SIZE);
 800c0e0:	2004      	movs	r0, #4
 800c0e2:	f7ff bf5f 	b.w	800bfa4 <ADC_Frame>
 800c0e6:	bf00      	nop

0800c0e8 <HAL_ADC_ConvHalfCpltCallback>:


}
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
	ADC_Frame(0);
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	f7ff bf5b 	b.w	800bfa4 <ADC_Frame>
 800c0ee:	bf00      	nop

0800c0f0 <HAL_SPI_RxCpltCallback>:
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
}
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop

0800c0f4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop

0800c0f8 <tPluckDetectorInt_initToPool>:
void    tPluckDetectorInt_init          (tPluckDetectorInt* const pd)
{
    tPluckDetectorInt_initToPool(pd, &leaf.mempool);
}
void    tPluckDetectorInt_initToPool    (tPluckDetectorInt* const pd, tMempool* const mp)
{
 800c0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tMempool* m = *mp;
 800c0fc:	f8d1 8000 	ldr.w	r8, [r1]
{
 800c100:	460e      	mov	r6, r1
 800c102:	4681      	mov	r9, r0
    _tPluckDetectorInt* p = *pd = (_tPluckDetectorInt*) mpool_alloc(sizeof(_tPluckDetectorInt), m);
 800c104:	f44f 7084 	mov.w	r0, #264	; 0x108
 800c108:	4641      	mov	r1, r8
    p->mempool = m;

	//INITIALIZE VARIABLES
	p->current_dir = 1;
	p->envelope_min = 0;//maybe could be 32 bit?
 800c10a:	2500      	movs	r5, #0
    _tPluckDetectorInt* p = *pd = (_tPluckDetectorInt*) mpool_alloc(sizeof(_tPluckDetectorInt), m);
 800c10c:	f001 f83e 	bl	800d18c <mpool_alloc>
	p->current_dir = 1;
 800c110:	2301      	movs	r3, #1
	p->envelope_max = 65535;//maybe could be 32 bit?
 800c112:	f64f 71ff 	movw	r1, #65535	; 0xffff
    _tPluckDetectorInt* p = *pd = (_tPluckDetectorInt*) mpool_alloc(sizeof(_tPluckDetectorInt), m);
 800c116:	4604      	mov	r4, r0
 800c118:	f8c9 0000 	str.w	r0, [r9]
	p->super_smoothed = 0;//Mean of the last [SUPER_SMOOTHING_WINDOW] smoothed values
	p->super_smoothedAccum = 0;

	p->pluck_strength = 0;

	p->smoothing_window = 8;
 800c11c:	2708      	movs	r7, #8
	p->current_dir = 1;
 800c11e:	6103      	str	r3, [r0, #16]
    p->super_smoothing_window = 128;
 800c120:	f04f 0e80 	mov.w	lr, #128	; 0x80
	p->prior_super_smoothed_dir = 1;
 800c124:	6243      	str	r3, [r0, #36]	; 0x24
    p->minmax_window = 8;


    tRingBufferInt_initToPool(&p->smoothed_array, p->smoothing_window, mp);
 800c126:	4632      	mov	r2, r6
    p->mempool = m;
 800c128:	f8c0 8000 	str.w	r8, [r0]
	p->midpoint_estimate = 48552;
 800c12c:	f64b 58a8 	movw	r8, #48552	; 0xbda8
	p->envelope_max = 65535;//maybe could be 32 bit?
 800c130:	6181      	str	r1, [r0, #24]
	p->Pindex = 1;
 800c132:	2001      	movs	r0, #1
 800c134:	2100      	movs	r1, #0
		p->prior_dirs[i] = 1;
 800c136:	6323      	str	r3, [r4, #48]	; 0x30
	p->envelope_min = 0;//maybe could be 32 bit?
 800c138:	6165      	str	r5, [r4, #20]
 800c13a:	6365      	str	r5, [r4, #52]	; 0x34
 800c13c:	63a5      	str	r5, [r4, #56]	; 0x38
 800c13e:	63e5      	str	r5, [r4, #60]	; 0x3c
 800c140:	6425      	str	r5, [r4, #64]	; 0x40
 800c142:	6465      	str	r5, [r4, #68]	; 0x44
 800c144:	64a5      	str	r5, [r4, #72]	; 0x48
 800c146:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c148:	6525      	str	r5, [r4, #80]	; 0x50
 800c14a:	6565      	str	r5, [r4, #84]	; 0x54
 800c14c:	65a5      	str	r5, [r4, #88]	; 0x58
	p->midpoint_estimate = 48552;
 800c14e:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
	p->ready_for_pluck = 1;
 800c152:	e9c4 5320 	strd	r5, r3, [r4, #128]	; 0x80
		p->prior_dirs[i] = 1;
 800c156:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
	p->prior_super_smoothed = 0;
 800c15a:	e9c4 5507 	strd	r5, r5, [r4, #28]
	p->prior_detect_1_value = 0;
 800c15e:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	p->prior_detect_2_value = 0;
 800c162:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	p->prior_detect_3_value = 0;
 800c166:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
	p->delay_since_last_detect = 0;
 800c16a:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
	p->Pindex = 1;
 800c16e:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	p->smoothing_window = 8;
 800c172:	e9c4 7e30 	strd	r7, lr, [r4, #192]	; 0xc0
    tRingBufferInt_initToPool(&p->smoothed_array, p->smoothing_window, mp);
 800c176:	4639      	mov	r1, r7
 800c178:	1d20      	adds	r0, r4, #4
    p->minmax_window = 8;
 800c17a:	f8c4 70c8 	str.w	r7, [r4, #200]	; 0xc8
	p->smoothed = 0;//Mean of the last [SMOOTHING_WINDOW] samples
 800c17e:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
	p->super_smoothed = 0;//Mean of the last [SUPER_SMOOTHING_WINDOW] smoothed values
 800c182:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	p->pluck_strength = 0;
 800c186:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
    tRingBufferInt_initToPool(&p->smoothed_array, p->smoothing_window, mp);
 800c18a:	f000 fc81 	bl	800ca90 <tRingBufferInt_initToPool>

	tRingBufferInt_initToPool(&p->super_smoothed_array, p->super_smoothing_window, mp);
 800c18e:	19e0      	adds	r0, r4, r7
 800c190:	4632      	mov	r2, r6
 800c192:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800c196:	f000 fc7b 	bl	800ca90 <tRingBufferInt_initToPool>

	tRingBufferInt_initToPool(&p->minmax_samples, p->minmax_window, mp);
 800c19a:	4632      	mov	r2, r6
 800c19c:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 800c1a0:	f104 000c 	add.w	r0, r4, #12
 800c1a4:	f000 fc74 	bl	800ca90 <tRingBufferInt_initToPool>

	p->min_recent_value = 0;
	p->max_recent_value = 0;
    p->max_samples_still_same_pluck = 2400; //400
 800c1a8:	f44f 6316 	mov.w	r3, #2400	; 0x960
    p->max_var_diff_width = 100;
    p->max_width_is_resonating = 2000;
 800c1ac:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    p->max_ratio_value_diffs = 100.0f;
 800c1b0:	492c      	ldr	r1, [pc, #176]	; (800c264 <tPluckDetectorInt_initToPool+0x16c>)
    p->min_value_spread = 100; //500
    p->min_same_direction_steps = 10; //150
    p->minMaxIncrementsBetweenSamples = 8;
    p->midpoint_estimate_window = 4096;
 800c1b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    p->samples_per_midpoint_estimate_check = 4800;
 800c1b6:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
    p->minMaxIncrementsBetweenSamples = 8;
 800c1ba:	f8c4 70d4 	str.w	r7, [r4, #212]	; 0xd4
    p->max_var_diff_width = 100;
 800c1be:	2764      	movs	r7, #100	; 0x64
    p->midpoint_estimate_acceptance_threshold = 10;
    p->midpoint_accum = 0;
 800c1c0:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
    p->max_samples_still_same_pluck = 2400; //400
 800c1c4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    p->prior_midpoints_window = 4;
 800c1c8:	2304      	movs	r3, #4
    p->max_width_is_resonating = 2000;
 800c1ca:	f8c4 c0b0 	str.w	ip, [r4, #176]	; 0xb0
    p->max_ratio_value_diffs = 100.0f;
 800c1ce:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    tRingBufferInt_initToPool(&p->prior_midpoint_estimates, p->prior_midpoints_window, mp);
 800c1d2:	4619      	mov	r1, r3
    p->midpoint_estimate_window = 4096;
 800c1d4:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
    tRingBufferInt_initToPool(&p->prior_midpoint_estimates, p->prior_midpoints_window, mp);
 800c1d8:	4632      	mov	r2, r6
    p->samples_per_midpoint_estimate_check = 4800;
 800c1da:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    tRingBufferInt_initToPool(&p->prior_midpoint_estimates, p->prior_midpoints_window, mp);
 800c1de:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    p->prior_midpoints_window = 4;
 800c1e2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    p->max_var_diff_width = 100;
 800c1e6:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	p->max_recent_value = 0;
 800c1ea:	e9c4 5533 	strd	r5, r5, [r4, #204]	; 0xcc
    p->min_same_direction_steps = 10; //150
 800c1ee:	250a      	movs	r5, #10
 800c1f0:	e9c4 752e 	strd	r7, r5, [r4, #184]	; 0xb8
    p->midpoint_estimate_acceptance_threshold = 10;
 800c1f4:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    tRingBufferInt_initToPool(&p->prior_midpoint_estimates, p->prior_midpoints_window, mp);
 800c1f8:	f000 fc4a 	bl	800ca90 <tRingBufferInt_initToPool>
    tRingBufferInt_initToPool(&p->midpoint_samples, p->midpoint_estimate_window, mp);
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 800c202:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 800c206:	f000 fc43 	bl	800ca90 <tRingBufferInt_initToPool>

	p->inv_smoothing_window = 1.0f / p->smoothing_window;
 800c20a:	ed94 7a30 	vldr	s14, [r4, #192]	; 0xc0
 800c20e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c212:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
	p->inv_super_smoothing_window = 1.0f / p->super_smoothing_window;
 800c216:	ed94 7a31 	vldr	s14, [r4, #196]	; 0xc4
 800c21a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
	p->inv_minmax_window = 1.0f / p->minmax_window;
 800c21e:	ed94 7a32 	vldr	s14, [r4, #200]	; 0xc8
	p->inv_smoothing_window = 1.0f / p->smoothing_window;
 800c222:	eec7 4a85 	vdiv.f32	s9, s15, s10
	p->inv_minmax_window = 1.0f / p->minmax_window;
 800c226:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
	p->inv_midpoint_estimate_window = 1.0f / p->midpoint_estimate_window;
 800c22a:	ed94 7a3a 	vldr	s14, [r4, #232]	; 0xe8
	p->inv_super_smoothing_window = 1.0f / p->super_smoothing_window;
 800c22e:	ee87 5aa5 	vdiv.f32	s10, s15, s11
	p->inv_midpoint_estimate_window = 1.0f / p->midpoint_estimate_window;
 800c232:	eef8 6a47 	vcvt.f32.u32	s13, s14
	p->inv_prior_midpoints_window = 1.0f / p->prior_midpoints_window;
 800c236:	ed94 7a39 	vldr	s14, [r4, #228]	; 0xe4
	p->inv_minmax_window = 1.0f / p->minmax_window;
 800c23a:	eec7 5a86 	vdiv.f32	s11, s15, s12
	p->inv_smoothing_window = 1.0f / p->smoothing_window;
 800c23e:	edc4 4a3d 	vstr	s9, [r4, #244]	; 0xf4
	p->inv_prior_midpoints_window = 1.0f / p->prior_midpoints_window;
 800c242:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	p->inv_midpoint_estimate_window = 1.0f / p->midpoint_estimate_window;
 800c246:	ee87 6aa6 	vdiv.f32	s12, s15, s13
	p->inv_super_smoothing_window = 1.0f / p->super_smoothing_window;
 800c24a:	ed84 5a3e 	vstr	s10, [r4, #248]	; 0xf8
	p->inv_prior_midpoints_window = 1.0f / p->prior_midpoints_window;
 800c24e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	p->inv_minmax_window = 1.0f / p->minmax_window;
 800c252:	edc4 5a3f 	vstr	s11, [r4, #252]	; 0xfc
	p->inv_midpoint_estimate_window = 1.0f / p->midpoint_estimate_window;
 800c256:	ed84 6a40 	vstr	s12, [r4, #256]	; 0x100
	p->inv_prior_midpoints_window = 1.0f / p->prior_midpoints_window;
 800c25a:	edc4 6a41 	vstr	s13, [r4, #260]	; 0x104

}
 800c25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c262:	bf00      	nop
 800c264:	42c80000 	.word	0x42c80000

0800c268 <tPluckDetectorInt_init>:
    tPluckDetectorInt_initToPool(pd, &leaf.mempool);
 800c268:	4901      	ldr	r1, [pc, #4]	; (800c270 <tPluckDetectorInt_init+0x8>)
 800c26a:	f7ff bf45 	b.w	800c0f8 <tPluckDetectorInt_initToPool>
 800c26e:	bf00      	nop
 800c270:	20019ea8 	.word	0x20019ea8

0800c274 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800c274:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 800c276:	4b07      	ldr	r3, [pc, #28]	; (800c294 <MX_RNG_Init+0x20>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800c278:	2100      	movs	r1, #0
  hrng.Instance = RNG;
 800c27a:	4a07      	ldr	r2, [pc, #28]	; (800c298 <MX_RNG_Init+0x24>)
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800c27c:	4618      	mov	r0, r3
  hrng.Instance = RNG;
 800c27e:	e9c3 2100 	strd	r2, r1, [r3]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800c282:	f7f8 fadf 	bl	8004844 <HAL_RNG_Init>
 800c286:	b900      	cbnz	r0, 800c28a <MX_RNG_Init+0x16>
  {
    Error_Handler();
  }

}
 800c288:	bd08      	pop	{r3, pc}
 800c28a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800c28e:	f7ff bf31 	b.w	800c0f4 <Error_Handler>
 800c292:	bf00      	nop
 800c294:	200199dc 	.word	0x200199dc
 800c298:	48021800 	.word	0x48021800

0800c29c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 800c29c:	6802      	ldr	r2, [r0, #0]
 800c29e:	4b0a      	ldr	r3, [pc, #40]	; (800c2c8 <HAL_RNG_MspInit+0x2c>)
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d000      	beq.n	800c2a6 <HAL_RNG_MspInit+0xa>
 800c2a4:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800c2a6:	4b09      	ldr	r3, [pc, #36]	; (800c2cc <HAL_RNG_MspInit+0x30>)
{
 800c2a8:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 800c2aa:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800c2ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2b2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800c2b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800c2c2:	b002      	add	sp, #8
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	48021800 	.word	0x48021800
 800c2cc:	58024400 	.word	0x58024400

0800c2d0 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800c2d0:	b570      	push	{r4, r5, r6, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 800c2d2:	481a      	ldr	r0, [pc, #104]	; (800c33c <MX_SAI1_Init+0x6c>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800c2d4:	2500      	movs	r5, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 800c2d6:	4c1a      	ldr	r4, [pc, #104]	; (800c340 <MX_SAI1_Init+0x70>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800c2d8:	2101      	movs	r1, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800c2da:	f64b 3280 	movw	r2, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800c2de:	2302      	movs	r3, #2
  hsai_BlockA1.Instance = SAI1_Block_A;
 800c2e0:	6020      	str	r0, [r4, #0]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800c2e2:	4620      	mov	r0, r4
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800c2e4:	61e1      	str	r1, [r4, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800c2e6:	4629      	mov	r1, r5
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800c2e8:	6222      	str	r2, [r4, #32]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800c2ea:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800c2ec:	60e5      	str	r5, [r4, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800c2ee:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800c2f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800c2f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800c2f8:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800c2fc:	f7f8 fb0e 	bl	800491c <HAL_SAI_InitProtocol>
 800c300:	b9c8      	cbnz	r0, 800c336 <MX_SAI1_Init+0x66>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800c302:	4c10      	ldr	r4, [pc, #64]	; (800c344 <MX_SAI1_Init+0x74>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800c304:	2500      	movs	r5, #0
  hsai_BlockB1.Instance = SAI1_Block_B;
 800c306:	4910      	ldr	r1, [pc, #64]	; (800c348 <MX_SAI1_Init+0x78>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800c308:	2203      	movs	r2, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800c30a:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800c30c:	2601      	movs	r6, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 800c30e:	6021      	str	r1, [r4, #0]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800c310:	4620      	mov	r0, r4
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800c312:	6062      	str	r2, [r4, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800c314:	4629      	mov	r1, r5
 800c316:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800c318:	60a6      	str	r6, [r4, #8]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800c31a:	61e6      	str	r6, [r4, #28]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800c31c:	6165      	str	r5, [r4, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800c31e:	60e5      	str	r5, [r4, #12]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800c320:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800c322:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800c326:	f7f8 faf9 	bl	800491c <HAL_SAI_InitProtocol>
 800c32a:	b900      	cbnz	r0, 800c32e <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
  }

}
 800c32c:	bd70      	pop	{r4, r5, r6, pc}
 800c32e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 800c332:	f7ff bedf 	b.w	800c0f4 <Error_Handler>
    Error_Handler();
 800c336:	f7ff fedd 	bl	800c0f4 <Error_Handler>
 800c33a:	e7e2      	b.n	800c302 <MX_SAI1_Init+0x32>
 800c33c:	40015804 	.word	0x40015804
 800c340:	20019b78 	.word	0x20019b78
 800c344:	200199f0 	.word	0x200199f0
 800c348:	40015824 	.word	0x40015824

0800c34c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800c34c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800c34e:	4a50      	ldr	r2, [pc, #320]	; (800c490 <HAL_SAI_MspInit+0x144>)
{
 800c350:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI1_Block_A)
 800c352:	6803      	ldr	r3, [r0, #0]
{
 800c354:	4605      	mov	r5, r0
    if(hsai->Instance==SAI1_Block_A)
 800c356:	4293      	cmp	r3, r2
 800c358:	d03f      	beq.n	800c3da <HAL_SAI_MspInit+0x8e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 800c35a:	4a4e      	ldr	r2, [pc, #312]	; (800c494 <HAL_SAI_MspInit+0x148>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d001      	beq.n	800c364 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 800c360:	b009      	add	sp, #36	; 0x24
 800c362:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (SAI1_client == 0)
 800c364:	4b4c      	ldr	r3, [pc, #304]	; (800c498 <HAL_SAI_MspInit+0x14c>)
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	2a00      	cmp	r2, #0
 800c36a:	d06f      	beq.n	800c44c <HAL_SAI_MspInit+0x100>
    SAI1_client ++;
 800c36c:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c36e:	2108      	movs	r1, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c370:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c372:	2600      	movs	r6, #0
    SAI1_client ++;
 800c374:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c376:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800c378:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c37a:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c37c:	9004      	str	r0, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c37e:	a903      	add	r1, sp, #12
 800c380:	4846      	ldr	r0, [pc, #280]	; (800c49c <HAL_SAI_MspInit+0x150>)
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c382:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai1_b.Instance = DMA1_Stream2;
 800c386:	4c46      	ldr	r4, [pc, #280]	; (800c4a0 <HAL_SAI_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800c388:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c38a:	e9cd 6205 	strd	r6, r2, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c38e:	f7f6 f9e3 	bl	8002758 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 800c392:	4a44      	ldr	r2, [pc, #272]	; (800c4a4 <HAL_SAI_MspInit+0x158>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800c394:	2358      	movs	r3, #88	; 0x58
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c396:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800c39a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800c39e:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_b.Instance = DMA1_Stream2;
 800c3a2:	6022      	str	r2, [r4, #0]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_MEDIUM;
 800c3a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800c3a8:	6063      	str	r3, [r4, #4]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800c3aa:	2304      	movs	r3, #4
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c3ac:	60a6      	str	r6, [r4, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800c3ae:	60e6      	str	r6, [r4, #12]
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800c3b0:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c3b2:	e9c4 c004 	strd	ip, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800c3b6:	4620      	mov	r0, r4
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800c3b8:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800c3bc:	e9c4 7106 	strd	r7, r1, [r4, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800c3c0:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800c3c4:	f7f4 feca 	bl	800115c <HAL_DMA_Init>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	d15b      	bne.n	800c484 <HAL_SAI_MspInit+0x138>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800c3cc:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
 800c3d0:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800c3d2:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
}
 800c3d6:	b009      	add	sp, #36	; 0x24
 800c3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 800c3da:	4b2f      	ldr	r3, [pc, #188]	; (800c498 <HAL_SAI_MspInit+0x14c>)
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	2a00      	cmp	r2, #0
 800c3e0:	d042      	beq.n	800c468 <HAL_SAI_MspInit+0x11c>
    SAI1_client ++;
 800c3e2:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800c3e4:	2174      	movs	r1, #116	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3e6:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3e8:	2600      	movs	r6, #0
    SAI1_client ++;
 800c3ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c3ec:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800c3ee:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800c3f0:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3f2:	9004      	str	r0, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c3f4:	a903      	add	r1, sp, #12
 800c3f6:	4829      	ldr	r0, [pc, #164]	; (800c49c <HAL_SAI_MspInit+0x150>)
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800c3f8:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_sai1_a.Instance = DMA1_Stream1;
 800c3fc:	4c2a      	ldr	r4, [pc, #168]	; (800c4a8 <HAL_SAI_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800c3fe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c400:	e9cd 6205 	strd	r6, r2, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c404:	f7f6 f9a8 	bl	8002758 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 800c408:	4928      	ldr	r1, [pc, #160]	; (800c4ac <HAL_SAI_MspInit+0x160>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800c40a:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c40c:	2340      	movs	r3, #64	; 0x40
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c40e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800c412:	60e6      	str	r6, [r4, #12]
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800c414:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai1_a.Instance = DMA1_Stream1;
 800c416:	6021      	str	r1, [r4, #0]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800c418:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800c41c:	6062      	str	r2, [r4, #4]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_MEDIUM;
 800c41e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c422:	60a3      	str	r3, [r4, #8]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800c424:	2304      	movs	r3, #4
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800c426:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c42a:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c42e:	e9c4 7004 	strd	r7, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800c432:	4620      	mov	r0, r4
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800c434:	e9c4 6106 	strd	r6, r1, [r4, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800c438:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800c43c:	f7f4 fe8e 	bl	800115c <HAL_DMA_Init>
 800c440:	bb18      	cbnz	r0, 800c48a <HAL_SAI_MspInit+0x13e>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800c442:	63a5      	str	r5, [r4, #56]	; 0x38
 800c444:	682b      	ldr	r3, [r5, #0]
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800c446:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
 800c44a:	e786      	b.n	800c35a <HAL_SAI_MspInit+0xe>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800c44c:	4918      	ldr	r1, [pc, #96]	; (800c4b0 <HAL_SAI_MspInit+0x164>)
 800c44e:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 800c452:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800c456:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 800c45a:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 800c45e:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800c462:	9102      	str	r1, [sp, #8]
 800c464:	9902      	ldr	r1, [sp, #8]
 800c466:	e781      	b.n	800c36c <HAL_SAI_MspInit+0x20>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800c468:	4911      	ldr	r1, [pc, #68]	; (800c4b0 <HAL_SAI_MspInit+0x164>)
 800c46a:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 800c46e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800c472:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 800c476:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 800c47a:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800c47e:	9101      	str	r1, [sp, #4]
 800c480:	9901      	ldr	r1, [sp, #4]
 800c482:	e7ae      	b.n	800c3e2 <HAL_SAI_MspInit+0x96>
      Error_Handler();
 800c484:	f7ff fe36 	bl	800c0f4 <Error_Handler>
 800c488:	e7a0      	b.n	800c3cc <HAL_SAI_MspInit+0x80>
      Error_Handler();
 800c48a:	f7ff fe33 	bl	800c0f4 <Error_Handler>
 800c48e:	e7d8      	b.n	800c442 <HAL_SAI_MspInit+0xf6>
 800c490:	40015804 	.word	0x40015804
 800c494:	40015824 	.word	0x40015824
 800c498:	20000334 	.word	0x20000334
 800c49c:	58021000 	.word	0x58021000
 800c4a0:	20019b00 	.word	0x20019b00
 800c4a4:	40020040 	.word	0x40020040
 800c4a8:	20019a88 	.word	0x20019a88
 800c4ac:	40020028 	.word	0x40020028
 800c4b0:	58024400 	.word	0x58024400

0800c4b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c4b4:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;  
 800c4b6:	4c0a      	ldr	r4, [pc, #40]	; (800c4e0 <SD_initialize+0x2c>)
 800c4b8:	2501      	movs	r5, #1
 800c4ba:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c4bc:	f7fe fefc 	bl	800b2b8 <BSP_SD_Init>
 800c4c0:	b108      	cbz	r0, 800c4c6 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c4c2:	7820      	ldrb	r0, [r4, #0]
}
 800c4c4:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800c4c6:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800c4c8:	f7fe feca 	bl	800b260 <BSP_SD_GetCardState>
 800c4cc:	b918      	cbnz	r0, 800c4d6 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800c4ce:	7823      	ldrb	r3, [r4, #0]
 800c4d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c4d4:	7023      	strb	r3, [r4, #0]
  return Stat;
 800c4d6:	7823      	ldrb	r3, [r4, #0]
 800c4d8:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800c4da:	7023      	strb	r3, [r4, #0]
  return Stat;
 800c4dc:	7820      	ldrb	r0, [r4, #0]
}
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	20000014 	.word	0x20000014

0800c4e4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c4e4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	4c05      	ldr	r4, [pc, #20]	; (800c500 <SD_status+0x1c>)
 800c4ea:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800c4ec:	f7fe feb8 	bl	800b260 <BSP_SD_GetCardState>
 800c4f0:	b918      	cbnz	r0, 800c4fa <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800c4f2:	7823      	ldrb	r3, [r4, #0]
 800c4f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c4f8:	7023      	strb	r3, [r4, #0]
  return Stat;
 800c4fa:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800c4fc:	bd10      	pop	{r4, pc}
 800c4fe:	bf00      	nop
 800c500:	20000014 	.word	0x20000014

0800c504 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c504:	b508      	push	{r3, lr}
 800c506:	4608      	mov	r0, r1
 800c508:	4611      	mov	r1, r2
 800c50a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c50c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c510:	f7fe fe82 	bl	800b218 <BSP_SD_ReadBlocks>
 800c514:	b920      	cbnz	r0, 800c520 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c516:	f7fe fea3 	bl	800b260 <BSP_SD_GetCardState>
 800c51a:	2800      	cmp	r0, #0
 800c51c:	d1fb      	bne.n	800c516 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800c51e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800c520:	2001      	movs	r0, #1
}
 800c522:	bd08      	pop	{r3, pc}

0800c524 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c524:	4b16      	ldr	r3, [pc, #88]	; (800c580 <SD_ioctl+0x5c>)
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	07db      	lsls	r3, r3, #31
 800c52a:	d408      	bmi.n	800c53e <SD_ioctl+0x1a>
{
 800c52c:	b510      	push	{r4, lr}
 800c52e:	4614      	mov	r4, r2
 800c530:	b08a      	sub	sp, #40	; 0x28

  switch (cmd)
 800c532:	2903      	cmp	r1, #3
 800c534:	d821      	bhi.n	800c57a <SD_ioctl+0x56>
 800c536:	e8df f001 	tbb	[pc, r1]
 800c53a:	0704      	.short	0x0704
 800c53c:	170f      	.short	0x170f
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c53e:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800c540:	4770      	bx	lr
    res = RES_OK;
 800c542:	2000      	movs	r0, #0
}
 800c544:	b00a      	add	sp, #40	; 0x28
 800c546:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800c548:	a801      	add	r0, sp, #4
 800c54a:	f7fe fe93 	bl	800b274 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c54e:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 800c550:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c552:	6023      	str	r3, [r4, #0]
}
 800c554:	b00a      	add	sp, #40	; 0x28
 800c556:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800c558:	a801      	add	r0, sp, #4
 800c55a:	f7fe fe8b 	bl	800b274 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c55e:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 800c560:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c562:	8023      	strh	r3, [r4, #0]
}
 800c564:	b00a      	add	sp, #40	; 0x28
 800c566:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800c568:	a801      	add	r0, sp, #4
 800c56a:	f7fe fe83 	bl	800b274 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c56e:	9b08      	ldr	r3, [sp, #32]
 800c570:	2000      	movs	r0, #0
 800c572:	0a5b      	lsrs	r3, r3, #9
 800c574:	6023      	str	r3, [r4, #0]
}
 800c576:	b00a      	add	sp, #40	; 0x28
 800c578:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 800c57a:	2004      	movs	r0, #4
}
 800c57c:	b00a      	add	sp, #40	; 0x28
 800c57e:	bd10      	pop	{r4, pc}
 800c580:	20000014 	.word	0x20000014

0800c584 <SD_write>:
{
 800c584:	b508      	push	{r3, lr}
 800c586:	4608      	mov	r0, r1
 800c588:	4611      	mov	r1, r2
 800c58a:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c58c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c590:	f7fe fe54 	bl	800b23c <BSP_SD_WriteBlocks>
 800c594:	b920      	cbnz	r0, 800c5a0 <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c596:	f7fe fe63 	bl	800b260 <BSP_SD_GetCardState>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d1fb      	bne.n	800c596 <SD_write+0x12>
}
 800c59e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800c5a0:	2001      	movs	r0, #1
}
 800c5a2:	bd08      	pop	{r3, pc}

0800c5a4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800c5a4:	b430      	push	{r4, r5}

  hsd1.Instance = SDMMC1;
 800c5a6:	4b08      	ldr	r3, [pc, #32]	; (800c5c8 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800c5a8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hsd1.Instance = SDMMC1;
 800c5ac:	4d07      	ldr	r5, [pc, #28]	; (800c5cc <MX_SDMMC1_SD_Init+0x28>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800c5ae:	2200      	movs	r2, #0
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 16;
 800c5b0:	2010      	movs	r0, #16
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800c5b2:	2101      	movs	r1, #1
  hsd1.Instance = SDMMC1;
 800c5b4:	601d      	str	r5, [r3, #0]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800c5b6:	60dc      	str	r4, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c5b8:	611a      	str	r2, [r3, #16]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800c5ba:	e9c3 0105 	strd	r0, r1, [r3, #20]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c5be:	e9c3 2201 	strd	r2, r2, [r3, #4]

}
 800c5c2:	bc30      	pop	{r4, r5}
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	20019c10 	.word	0x20019c10
 800c5cc:	52007000 	.word	0x52007000

0800c5d0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800c5d0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 800c5d2:	4b2b      	ldr	r3, [pc, #172]	; (800c680 <HAL_SD_MspInit+0xb0>)
{
 800c5d4:	b089      	sub	sp, #36	; 0x24
  if(sdHandle->Instance==SDMMC1)
 800c5d6:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5d8:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 800c5da:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5dc:	9407      	str	r4, [sp, #28]
 800c5de:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800c5e2:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(sdHandle->Instance==SDMMC1)
 800c5e6:	d001      	beq.n	800c5ec <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800c5e8:	b009      	add	sp, #36	; 0x24
 800c5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800c5ec:	4b25      	ldr	r3, [pc, #148]	; (800c684 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800c5ee:	260c      	movs	r6, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800c5f0:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c5f4:	2501      	movs	r5, #1
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800c5f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5fa:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c5fc:	eb0d 0106 	add.w	r1, sp, r6
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800c600:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c604:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800c608:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c60c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800c610:	9200      	str	r2, [sp, #0]
 800c612:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c614:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c618:	f042 0204 	orr.w	r2, r2, #4
 800c61c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800c620:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c624:	f002 0204 	and.w	r2, r2, #4
 800c628:	9201      	str	r2, [sp, #4]
 800c62a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c62c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c630:	f042 0208 	orr.w	r2, r2, #8
 800c634:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800c638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800c63c:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c63e:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c642:	4811      	ldr	r0, [pc, #68]	; (800c688 <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c644:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c646:	9302      	str	r3, [sp, #8]
 800c648:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800c64a:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c64c:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c650:	f7f6 f882 	bl	8002758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c654:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c656:	eb0d 0106 	add.w	r1, sp, r6
 800c65a:	480c      	ldr	r0, [pc, #48]	; (800c68c <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c65c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c65e:	e9cd 7504 	strd	r7, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800c662:	e9cd 5606 	strd	r5, r6, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c666:	f7f6 f877 	bl	8002758 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 800c66a:	4622      	mov	r2, r4
 800c66c:	2107      	movs	r1, #7
 800c66e:	2031      	movs	r0, #49	; 0x31
 800c670:	f7f4 fc50 	bl	8000f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800c674:	2031      	movs	r0, #49	; 0x31
 800c676:	f7f4 fc83 	bl	8000f80 <HAL_NVIC_EnableIRQ>
}
 800c67a:	b009      	add	sp, #36	; 0x24
 800c67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c67e:	bf00      	nop
 800c680:	52007000 	.word	0x52007000
 800c684:	58024400 	.word	0x58024400
 800c688:	58020800 	.word	0x58020800
 800c68c:	58020c00 	.word	0x58020c00

0800c690 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800c690:	b538      	push	{r3, r4, r5, lr}

  hspi1.Instance = SPI1;
 800c692:	4a14      	ldr	r2, [pc, #80]	; (800c6e4 <MX_SPI1_Init+0x54>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c694:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  hspi1.Instance = SPI1;
 800c698:	4b13      	ldr	r3, [pc, #76]	; (800c6e8 <MX_SPI1_Init+0x58>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c69a:	2507      	movs	r5, #7
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800c69c:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800c6a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hspi1.Instance = SPI1;
 800c6a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c6a6:	2200      	movs	r2, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c6a8:	6058      	str	r0, [r3, #4]
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c6aa:	4618      	mov	r0, r3
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c6ac:	60dd      	str	r5, [r3, #12]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c6ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800c6b0:	e9c3 4106 	strd	r4, r1, [r3, #24]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c6b4:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c6b8:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 800c6bc:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800c6c0:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c6c4:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800c6c8:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800c6cc:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800c6d0:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c6d4:	f7f9 fe28 	bl	8006328 <HAL_SPI_Init>
 800c6d8:	b900      	cbnz	r0, 800c6dc <MX_SPI1_Init+0x4c>
  {
    Error_Handler();
  }

}
 800c6da:	bd38      	pop	{r3, r4, r5, pc}
 800c6dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800c6e0:	f7ff bd08 	b.w	800c0f4 <Error_Handler>
 800c6e4:	40013000 	.word	0x40013000
 800c6e8:	20019d90 	.word	0x20019d90

0800c6ec <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800c6ec:	b538      	push	{r3, r4, r5, lr}

  hspi2.Instance = SPI2;
 800c6ee:	4b12      	ldr	r3, [pc, #72]	; (800c738 <MX_SPI2_Init+0x4c>)
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800c6f0:	2200      	movs	r2, #0
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800c6f2:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  hspi2.Instance = SPI2;
 800c6f6:	4d11      	ldr	r5, [pc, #68]	; (800c73c <MX_SPI2_Init+0x50>)
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800c6f8:	2107      	movs	r1, #7
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800c6fa:	4618      	mov	r0, r3
  hspi2.Instance = SPI2;
 800c6fc:	601d      	str	r5, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800c6fe:	605a      	str	r2, [r3, #4]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800c700:	619a      	str	r2, [r3, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800c702:	e9c3 4102 	strd	r4, r1, [r3, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c706:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800c70a:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi2.Init.CRCPolynomial = 0x0;
 800c70e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800c712:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c716:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800c71a:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800c71e:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800c722:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800c726:	f7f9 fdff 	bl	8006328 <HAL_SPI_Init>
 800c72a:	b900      	cbnz	r0, 800c72e <MX_SPI2_Init+0x42>
  {
    Error_Handler();
  }

}
 800c72c:	bd38      	pop	{r3, r4, r5, pc}
 800c72e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800c732:	f7ff bcdf 	b.w	800c0f4 <Error_Handler>
 800c736:	bf00      	nop
 800c738:	20019c90 	.word	0x20019c90
 800c73c:	40003800 	.word	0x40003800

0800c740 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800c740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800c744:	4a68      	ldr	r2, [pc, #416]	; (800c8e8 <HAL_SPI_MspInit+0x1a8>)
{
 800c746:	b08a      	sub	sp, #40	; 0x28
  if(spiHandle->Instance==SPI1)
 800c748:	6803      	ldr	r3, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c74a:	2400      	movs	r4, #0
{
 800c74c:	4606      	mov	r6, r0
  if(spiHandle->Instance==SPI1)
 800c74e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c750:	9409      	str	r4, [sp, #36]	; 0x24
 800c752:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800c756:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if(spiHandle->Instance==SPI1)
 800c75a:	d005      	beq.n	800c768 <HAL_SPI_MspInit+0x28>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 800c75c:	4a63      	ldr	r2, [pc, #396]	; (800c8ec <HAL_SPI_MspInit+0x1ac>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d071      	beq.n	800c846 <HAL_SPI_MspInit+0x106>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800c762:	b00a      	add	sp, #40	; 0x28
 800c764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c768:	4b61      	ldr	r3, [pc, #388]	; (800c8f0 <HAL_SPI_MspInit+0x1b0>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c76a:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c76c:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c76e:	f04f 0805 	mov.w	r8, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c772:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c776:	a905      	add	r1, sp, #20
    hdma_spi1_tx.Instance = DMA2_Stream0;
 800c778:	4d5e      	ldr	r5, [pc, #376]	; (800c8f4 <HAL_SPI_MspInit+0x1b4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c77a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c77e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800c782:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800c786:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c78a:	9200      	str	r2, [sp, #0]
 800c78c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c78e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c792:	f042 0208 	orr.w	r2, r2, #8
 800c796:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800c79a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c79e:	f002 0208 	and.w	r2, r2, #8
 800c7a2:	9201      	str	r2, [sp, #4]
 800c7a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c7a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c7aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7ae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800c7b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c7b6:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c7b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c7bc:	484e      	ldr	r0, [pc, #312]	; (800c8f8 <HAL_SPI_MspInit+0x1b8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7be:	9706      	str	r7, [sp, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c7c0:	9302      	str	r3, [sp, #8]
 800c7c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c7c4:	e9cd 7808 	strd	r7, r8, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c7c8:	f7f5 ffc6 	bl	8002758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c7cc:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c7d0:	a905      	add	r1, sp, #20
 800c7d2:	484a      	ldr	r0, [pc, #296]	; (800c8fc <HAL_SPI_MspInit+0x1bc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7d4:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c7d6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c7d8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7dc:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c7e0:	f7f5 ffba 	bl	8002758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c7e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c7e8:	a905      	add	r1, sp, #20
 800c7ea:	4844      	ldr	r0, [pc, #272]	; (800c8fc <HAL_SPI_MspInit+0x1bc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7ec:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c7ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c7f0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7f4:	e9cd 4707 	strd	r4, r7, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c7f8:	f7f5 ffae 	bl	8002758 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800c7fc:	2726      	movs	r7, #38	; 0x26
    hdma_spi1_tx.Instance = DMA2_Stream0;
 800c7fe:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800c90c <HAL_SPI_MspInit+0x1cc>
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c802:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c804:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800c808:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800c80c:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c80e:	60ec      	str	r4, [r5, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c810:	616c      	str	r4, [r5, #20]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c812:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c814:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c816:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800c818:	622b      	str	r3, [r5, #32]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800c81a:	e9c5 4406 	strd	r4, r4, [r5, #24]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800c81e:	e9c5 c700 	strd	ip, r7, [r5]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800c822:	f7f4 fc9b 	bl	800115c <HAL_DMA_Init>
 800c826:	b108      	cbz	r0, 800c82c <HAL_SPI_MspInit+0xec>
      Error_Handler();
 800c828:	f7ff fc64 	bl	800c0f4 <Error_Handler>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800c82c:	2200      	movs	r2, #0
 800c82e:	2102      	movs	r1, #2
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800c830:	67b5      	str	r5, [r6, #120]	; 0x78
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800c832:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800c834:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800c836:	f7f4 fb6d 	bl	8000f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800c83a:	2023      	movs	r0, #35	; 0x23
 800c83c:	f7f4 fba0 	bl	8000f80 <HAL_NVIC_EnableIRQ>
}
 800c840:	b00a      	add	sp, #40	; 0x28
 800c842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c846:	4b2a      	ldr	r3, [pc, #168]	; (800c8f0 <HAL_SPI_MspInit+0x1b0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c848:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800c84a:	f44f 4530 	mov.w	r5, #45056	; 0xb000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c84e:	a905      	add	r1, sp, #20
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c850:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800c854:	f44f 7780 	mov.w	r7, #256	; 0x100
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c858:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c85c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800c860:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800c864:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800c868:	9203      	str	r2, [sp, #12]
 800c86a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c86c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c870:	4302      	orrs	r2, r0
 800c872:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c876:	2205      	movs	r2, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c87c:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c87e:	4003      	ands	r3, r0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c880:	9008      	str	r0, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c882:	481f      	ldr	r0, [pc, #124]	; (800c900 <HAL_SPI_MspInit+0x1c0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c884:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800c886:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c888:	9b04      	ldr	r3, [sp, #16]
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800c88a:	4d1e      	ldr	r5, [pc, #120]	; (800c904 <HAL_SPI_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c88c:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c88e:	f7f5 ff63 	bl	8002758 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800c892:	4b1d      	ldr	r3, [pc, #116]	; (800c908 <HAL_SPI_MspInit+0x1c8>)
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c894:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800c898:	f04f 0c27 	mov.w	ip, #39	; 0x27
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800c89c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800c8a0:	2204      	movs	r2, #4
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800c8a2:	602b      	str	r3, [r5, #0]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800c8a4:	2301      	movs	r3, #1
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c8a6:	6128      	str	r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800c8a8:	4628      	mov	r0, r5
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c8aa:	60ac      	str	r4, [r5, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c8ac:	60ec      	str	r4, [r5, #12]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800c8ae:	f8c5 c004 	str.w	ip, [r5, #4]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c8b2:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800c8b6:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800c8ba:	e9c5 7107 	strd	r7, r1, [r5, #28]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800c8be:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800c8c2:	f7f4 fc4b 	bl	800115c <HAL_DMA_Init>
 800c8c6:	b960      	cbnz	r0, 800c8e2 <HAL_SPI_MspInit+0x1a2>
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	2103      	movs	r1, #3
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800c8cc:	67f5      	str	r5, [r6, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 800c8ce:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800c8d0:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 800c8d2:	f7f4 fb1f 	bl	8000f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800c8d6:	2024      	movs	r0, #36	; 0x24
 800c8d8:	f7f4 fb52 	bl	8000f80 <HAL_NVIC_EnableIRQ>
}
 800c8dc:	b00a      	add	sp, #40	; 0x28
 800c8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 800c8e2:	f7ff fc07 	bl	800c0f4 <Error_Handler>
 800c8e6:	e7ef      	b.n	800c8c8 <HAL_SPI_MspInit+0x188>
 800c8e8:	40013000 	.word	0x40013000
 800c8ec:	40003800 	.word	0x40003800
 800c8f0:	58024400 	.word	0x58024400
 800c8f4:	20019e18 	.word	0x20019e18
 800c8f8:	58020c00 	.word	0x58020c00
 800c8fc:	58021800 	.word	0x58021800
 800c900:	58020400 	.word	0x58020400
 800c904:	20019d18 	.word	0x20019d18
 800c908:	40020058 	.word	0x40020058
 800c90c:	40020410 	.word	0x40020410

0800c910 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c910:	4b07      	ldr	r3, [pc, #28]	; (800c930 <HAL_MspInit+0x20>)
{
 800c912:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c914:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800c918:	f042 0202 	orr.w	r2, r2, #2
 800c91c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800c920:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c924:	f003 0302 	and.w	r3, r3, #2
 800c928:	9301      	str	r3, [sp, #4]
 800c92a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c92c:	b002      	add	sp, #8
 800c92e:	4770      	bx	lr
 800c930:	58024400 	.word	0x58024400

0800c934 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop

0800c938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c938:	e7fe      	b.n	800c938 <HardFault_Handler>
 800c93a:	bf00      	nop

0800c93c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c93c:	e7fe      	b.n	800c93c <MemManage_Handler>
 800c93e:	bf00      	nop

0800c940 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c940:	e7fe      	b.n	800c940 <BusFault_Handler>
 800c942:	bf00      	nop

0800c944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c944:	e7fe      	b.n	800c944 <UsageFault_Handler>
 800c946:	bf00      	nop

0800c948 <SVC_Handler>:
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop

0800c94c <DebugMon_Handler>:
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop

0800c950 <PendSV_Handler>:
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop

0800c954 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c954:	f7f3 bd18 	b.w	8000388 <HAL_IncTick>

0800c958 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800c958:	4801      	ldr	r0, [pc, #4]	; (800c960 <DMA1_Stream0_IRQHandler+0x8>)
 800c95a:	f7f5 badd 	b.w	8001f18 <HAL_DMA_IRQHandler>
 800c95e:	bf00      	nop
 800c960:	200003a0 	.word	0x200003a0

0800c964 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800c964:	4801      	ldr	r0, [pc, #4]	; (800c96c <DMA1_Stream1_IRQHandler+0x8>)
 800c966:	f7f5 bad7 	b.w	8001f18 <HAL_DMA_IRQHandler>
 800c96a:	bf00      	nop
 800c96c:	20019a88 	.word	0x20019a88

0800c970 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800c970:	4801      	ldr	r0, [pc, #4]	; (800c978 <DMA1_Stream2_IRQHandler+0x8>)
 800c972:	f7f5 bad1 	b.w	8001f18 <HAL_DMA_IRQHandler>
 800c976:	bf00      	nop
 800c978:	20019b00 	.word	0x20019b00

0800c97c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800c97c:	4801      	ldr	r0, [pc, #4]	; (800c984 <DMA1_Stream3_IRQHandler+0x8>)
 800c97e:	f7f5 bacb 	b.w	8001f18 <HAL_DMA_IRQHandler>
 800c982:	bf00      	nop
 800c984:	20019d18 	.word	0x20019d18

0800c988 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800c988:	4801      	ldr	r0, [pc, #4]	; (800c990 <SPI1_IRQHandler+0x8>)
 800c98a:	f7fa b8f7 	b.w	8006b7c <HAL_SPI_IRQHandler>
 800c98e:	bf00      	nop
 800c990:	20019d90 	.word	0x20019d90

0800c994 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800c994:	4801      	ldr	r0, [pc, #4]	; (800c99c <SPI2_IRQHandler+0x8>)
 800c996:	f7fa b8f1 	b.w	8006b7c <HAL_SPI_IRQHandler>
 800c99a:	bf00      	nop
 800c99c:	20019c90 	.word	0x20019c90

0800c9a0 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800c9a0:	4801      	ldr	r0, [pc, #4]	; (800c9a8 <SDMMC1_IRQHandler+0x8>)
 800c9a2:	f7f9 bab3 	b.w	8005f0c <HAL_SD_IRQHandler>
 800c9a6:	bf00      	nop
 800c9a8:	20019c10 	.word	0x20019c10

0800c9ac <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800c9ac:	4801      	ldr	r0, [pc, #4]	; (800c9b4 <DMA2_Stream0_IRQHandler+0x8>)
 800c9ae:	f7f5 bab3 	b.w	8001f18 <HAL_DMA_IRQHandler>
 800c9b2:	bf00      	nop
 800c9b4:	20019e18 	.word	0x20019e18

0800c9b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800c9b8:	b430      	push	{r4, r5}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c9ba:	4c19      	ldr	r4, [pc, #100]	; (800ca20 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c9bc:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 800c9be:	4b19      	ldr	r3, [pc, #100]	; (800ca24 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c9c0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800c9c4:	4818      	ldr	r0, [pc, #96]	; (800ca28 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c9c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800c9ca:	4d18      	ldr	r5, [pc, #96]	; (800ca2c <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c9cc:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800c9d0:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800c9d2:	4917      	ldr	r1, [pc, #92]	; (800ca30 <SystemInit+0x78>)
  RCC->CR |= RCC_CR_HSION;
 800c9d4:	f044 0401 	orr.w	r4, r4, #1
 800c9d8:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 800c9da:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800c9dc:	681c      	ldr	r4, [r3, #0]
 800c9de:	4020      	ands	r0, r4
 800c9e0:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 800c9e2:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800c9e4:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800c9e6:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 800c9e8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 800c9ea:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 800c9ec:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800c9ee:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 800c9f0:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800c9f2:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 800c9f4:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 800c9f6:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800c9f8:	6818      	ldr	r0, [r3, #0]
 800c9fa:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800c9fe:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800ca00:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800ca02:	682b      	ldr	r3, [r5, #0]
 800ca04:	4019      	ands	r1, r3
 800ca06:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800ca0a:	d202      	bcs.n	800ca12 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800ca0c:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <SystemInit+0x7c>)
 800ca0e:	2201      	movs	r2, #1
 800ca10:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ca12:	4b03      	ldr	r3, [pc, #12]	; (800ca20 <SystemInit+0x68>)
 800ca14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ca18:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800ca1a:	bc30      	pop	{r4, r5}
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	e000ed00 	.word	0xe000ed00
 800ca24:	58024400 	.word	0x58024400
 800ca28:	eaf6ed7f 	.word	0xeaf6ed7f
 800ca2c:	5c001000 	.word	0x5c001000
 800ca30:	ffff0000 	.word	0xffff0000
 800ca34:	51008108 	.word	0x51008108

0800ca38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ca38:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ca70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ca3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ca3e:	e003      	b.n	800ca48 <LoopCopyDataInit>

0800ca40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ca40:	4b0c      	ldr	r3, [pc, #48]	; (800ca74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ca42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ca44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ca46:	3104      	adds	r1, #4

0800ca48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ca48:	480b      	ldr	r0, [pc, #44]	; (800ca78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ca4a:	4b0c      	ldr	r3, [pc, #48]	; (800ca7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ca4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ca4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ca50:	d3f6      	bcc.n	800ca40 <CopyDataInit>
  ldr  r2, =_sbss
 800ca52:	4a0b      	ldr	r2, [pc, #44]	; (800ca80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ca54:	e002      	b.n	800ca5c <LoopFillZerobss>

0800ca56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ca56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ca58:	f842 3b04 	str.w	r3, [r2], #4

0800ca5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ca5c:	4b09      	ldr	r3, [pc, #36]	; (800ca84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ca5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ca60:	d3f9      	bcc.n	800ca56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ca62:	f7ff ffa9 	bl	800c9b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ca66:	f000 fc85 	bl	800d374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ca6a:	f7fe fff3 	bl	800ba54 <main>
  bx  lr    
 800ca6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ca70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800ca74:	080106b8 	.word	0x080106b8
  ldr  r0, =_sdata
 800ca78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ca7c:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 800ca80:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 800ca84:	20019ed0 	.word	0x20019ed0

0800ca88 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ca88:	e7fe      	b.n	800ca88 <ADC3_IRQHandler>
 800ca8a:	0000      	movs	r0, r0
 800ca8c:	0000      	movs	r0, r0
	...

0800ca90 <tRingBufferInt_initToPool>:
{
    tRingBufferInt_initToPool(ring, size, &leaf.mempool);
}

void    tRingBufferInt_initToPool   (tRingBufferInt* const ring, int size, tMempool* const mempool)
{
 800ca90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tMempool* m = *mempool;
 800ca92:	6815      	ldr	r5, [r2, #0]
{
 800ca94:	460e      	mov	r6, r1
 800ca96:	4607      	mov	r7, r0
    _tRingBufferInt* r = *ring = (_tRingBufferInt*) mpool_alloc(sizeof(_tRingBufferInt), m);
 800ca98:	2014      	movs	r0, #20
 800ca9a:	4629      	mov	r1, r5
 800ca9c:	f000 fb76 	bl	800d18c <mpool_alloc>
    r->mempool = m;

    // Ensure size is a power of 2
    if (size <= 0) r->size = 1;
 800caa0:	2e00      	cmp	r6, #0
    _tRingBufferInt* r = *ring = (_tRingBufferInt*) mpool_alloc(sizeof(_tRingBufferInt), m);
 800caa2:	6038      	str	r0, [r7, #0]
 800caa4:	4604      	mov	r4, r0
    r->mempool = m;
 800caa6:	6005      	str	r5, [r0, #0]
    if (size <= 0) r->size = 1;
 800caa8:	dd1e      	ble.n	800cae8 <tRingBufferInt_initToPool+0x58>
    else r->size = pow(2, ceil(log2(size)));
 800caaa:	ee07 6a90 	vmov	s15, r6
 800caae:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800cab2:	f000 ffb5 	bl	800da20 <log>
 800cab6:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 800caf0 <tRingBufferInt_initToPool+0x60>
 800caba:	ee20 1b01 	vmul.f64	d1, d0, d1
 800cabe:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800cac2:	feba 1b41 	vrintp.f64	d1, d1
 800cac6:	f001 f81b 	bl	800db00 <pow>
 800caca:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 800cace:	ee17 3a90 	vmov	r3, s15
 800cad2:	1e5a      	subs	r2, r3, #1
 800cad4:	0098      	lsls	r0, r3, #2
 800cad6:	60a3      	str	r3, [r4, #8]
    r->mask = r->size - 1;

    r->buffer = (int*) mpool_calloc(sizeof(int) * r->size, m);
 800cad8:	4629      	mov	r1, r5
    r->mask = r->size - 1;
 800cada:	6122      	str	r2, [r4, #16]
    r->buffer = (int*) mpool_calloc(sizeof(int) * r->size, m);
 800cadc:	f000 fbb2 	bl	800d244 <mpool_calloc>
    r->pos = 0;
 800cae0:	2300      	movs	r3, #0
    r->buffer = (int*) mpool_calloc(sizeof(int) * r->size, m);
 800cae2:	6060      	str	r0, [r4, #4]
    r->pos = 0;
 800cae4:	60e3      	str	r3, [r4, #12]
}
 800cae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cae8:	2004      	movs	r0, #4
 800caea:	2200      	movs	r2, #0
    if (size <= 0) r->size = 1;
 800caec:	2301      	movs	r3, #1
 800caee:	e7f2      	b.n	800cad6 <tRingBufferInt_initToPool+0x46>
 800caf0:	652b82fe 	.word	0x652b82fe
 800caf4:	3ff71547 	.word	0x3ff71547

0800caf8 <tThreshold_init>:
}



void tThreshold_init (tThreshold* const th, float low, float high)
{
 800caf8:	b538      	push	{r3, r4, r5, lr}
	tThreshold_initToPool(th, low, high, &leaf.mempool);
}

void tThreshold_initToPool (tThreshold* const th, float low, float high, tMempool* const mp)
{
    _tMempool* m = *mp;
 800cafa:	4b0c      	ldr	r3, [pc, #48]	; (800cb2c <tThreshold_init+0x34>)
{
 800cafc:	4605      	mov	r5, r0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 800cafe:	2010      	movs	r0, #16
{
 800cb00:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800cb04:	699c      	ldr	r4, [r3, #24]
{
 800cb06:	eeb0 8a40 	vmov.f32	s16, s0
 800cb0a:	eef0 8a60 	vmov.f32	s17, s1
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 800cb0e:	4621      	mov	r1, r4
 800cb10:	f000 fb3c 	bl	800d18c <mpool_alloc>
    t->mempool = m;
    
    t->highThresh = high;
    t->lowThresh = low;

    t->currentValue = 0;
 800cb14:	2300      	movs	r3, #0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 800cb16:	6028      	str	r0, [r5, #0]
    t->mempool = m;
 800cb18:	6004      	str	r4, [r0, #0]
    t->highThresh = high;
 800cb1a:	edc0 8a01 	vstr	s17, [r0, #4]
    t->lowThresh = low;
 800cb1e:	ed80 8a02 	vstr	s16, [r0, #8]
    t->currentValue = 0;
 800cb22:	60c3      	str	r3, [r0, #12]
}
 800cb24:	ecbd 8b02 	vpop	{d8}
 800cb28:	bd38      	pop	{r3, r4, r5, pc}
 800cb2a:	bf00      	nop
 800cb2c:	20019e90 	.word	0x20019e90

0800cb30 <tThreshold_tick>:
    mpool_free((char*)t, t->mempool);
}

int tThreshold_tick(tThreshold* const th, float in)
{
    _tThreshold* t = *th;
 800cb30:	6803      	ldr	r3, [r0, #0]

    if (in >= t->highThresh)
 800cb32:	edd3 7a01 	vldr	s15, [r3, #4]
 800cb36:	eef4 7ac0 	vcmpe.f32	s15, s0
 800cb3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb3e:	d90c      	bls.n	800cb5a <tThreshold_tick+0x2a>
    {
    	t->currentValue = 1;
    }
    else if (in <= t->lowThresh)
 800cb40:	edd3 7a02 	vldr	s15, [r3, #8]
 800cb44:	eef4 7ac0 	vcmpe.f32	s15, s0
 800cb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb4c:	db03      	blt.n	800cb56 <tThreshold_tick+0x26>
	{
    	t->currentValue = 0;
 800cb4e:	2200      	movs	r2, #0
 800cb50:	4610      	mov	r0, r2
 800cb52:	60da      	str	r2, [r3, #12]
	}

    return t->currentValue;
}
 800cb54:	4770      	bx	lr
 800cb56:	68d8      	ldr	r0, [r3, #12]
 800cb58:	4770      	bx	lr
    	t->currentValue = 1;
 800cb5a:	2001      	movs	r0, #1
 800cb5c:	60d8      	str	r0, [r3, #12]
 800cb5e:	4770      	bx	lr

0800cb60 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide)
{
 800cb60:	b538      	push	{r3, r4, r5, lr}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf.mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 800cb62:	4b12      	ldr	r3, [pc, #72]	; (800cbac <tSlide_init+0x4c>)
{
 800cb64:	4605      	mov	r5, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800cb66:	201c      	movs	r0, #28
{
 800cb68:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800cb6c:	699c      	ldr	r4, [r3, #24]
{
 800cb6e:	eeb0 8a60 	vmov.f32	s16, s1
 800cb72:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800cb76:	4621      	mov	r1, r4
 800cb78:	f000 fb08 	bl	800d18c <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 800cb7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 800cb80:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800cb82:	6028      	str	r0, [r5, #0]
    s->mempool = m;
 800cb84:	6004      	str	r4, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 800cb86:	fec8 8aa7 	vmaxnm.f32	s17, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 800cb8a:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 800cb8e:	eec7 6aa8 	vdiv.f32	s13, s15, s17
    s->prevIn = 0.0f;
 800cb92:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 800cb94:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 800cb96:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 800cb98:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 800cb9a:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 800cb9e:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 800cba2:	ed80 7a05 	vstr	s14, [r0, #20]
}
 800cba6:	ecbd 8b02 	vpop	{d8}
 800cbaa:	bd38      	pop	{r3, r4, r5, pc}
 800cbac:	20019e90 	.word	0x20019e90

0800cbb0 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 800cbb0:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 800cbb2:	edd3 7a01 	vldr	s15, [r3, #4]
 800cbb6:	eef4 7ac0 	vcmpe.f32	s15, s0
 800cbba:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800cbc2:	bf94      	ite	ls
 800cbc4:	edd3 6a04 	vldrls	s13, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 800cbc8:	edd3 6a05 	vldrhi	s13, [r3, #20]
 800cbcc:	eee6 7a87 	vfma.f32	s15, s13, s14
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 800cbd0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800cc0c <tSlide_tick+0x5c>
 800cbd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbdc:	d50c      	bpl.n	800cbf8 <tSlide_tick+0x48>
 800cbde:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800cc10 <tSlide_tick+0x60>
#endif
    s->prevIn = in;
 800cbe2:	ed83 0a03 	vstr	s0, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 800cbe6:	eef0 7a47 	vmov.f32	s15, s14
 800cbea:	ed83 7a02 	vstr	s14, [r3, #8]
    s->prevOut = s->currentOut;
    return s->currentOut;
}
 800cbee:	eeb0 0a67 	vmov.f32	s0, s15
    s->prevOut = s->currentOut;
 800cbf2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800cbf6:	4770      	bx	lr
    s->prevIn = in;
 800cbf8:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800cbfc:	eeb0 0a67 	vmov.f32	s0, s15
 800cc00:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 800cc04:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800cc08:	4770      	bx	lr
 800cc0a:	bf00      	nop
 800cc0c:	006ce3ee 	.word	0x006ce3ee
 800cc10:	00000000 	.word	0x00000000

0800cc14 <tHighpass_init>:
    svf->a3 = svf->g * svf->a2;
}

/* Highpass */
void    tHighpass_init(tHighpass* const ft, float freq)
{
 800cc14:	b570      	push	{r4, r5, r6, lr}
    tHighpass_initToPool(ft, freq, &leaf.mempool);
}

void    tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 800cc16:	4c0e      	ldr	r4, [pc, #56]	; (800cc50 <tHighpass_init+0x3c>)
{
 800cc18:	4606      	mov	r6, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800cc1a:	2014      	movs	r0, #20
    _tMempool* m = *mp;
 800cc1c:	69a5      	ldr	r5, [r4, #24]
{
 800cc1e:	ed2d 8b02 	vpush	{d8}
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800cc22:	4629      	mov	r1, r5
{
 800cc24:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800cc28:	f000 fb0c 	bl	800d244 <mpool_calloc>
    f->mempool = m;
    
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 800cc2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800cc30:	6030      	str	r0, [r6, #0]
    f->ys = 0.0f;
 800cc32:	2300      	movs	r3, #0
    f->mempool = m;
 800cc34:	6005      	str	r5, [r0, #0]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 800cc36:	ed94 7a03 	vldr	s14, [r4, #12]
    f->xs = 0.0f;
    
    f->frequency = freq;
 800cc3a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 800cc3e:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->ys = 0.0f;
 800cc42:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 800cc44:	6043      	str	r3, [r0, #4]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 800cc46:	edc0 7a03 	vstr	s15, [r0, #12]
}
 800cc4a:	ecbd 8b02 	vpop	{d8}
 800cc4e:	bd70      	pop	{r4, r5, r6, pc}
 800cc50:	20019e90 	.word	0x20019e90

0800cc54 <tHighpass_tick>:
}

// From JOS DC Blocker
float   tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 800cc54:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 800cc56:	edd3 7a01 	vldr	s15, [r3, #4]
 800cc5a:	ed93 7a02 	vldr	s14, [r3, #8]
 800cc5e:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 800cc62:	ed83 0a01 	vstr	s0, [r3, #4]
    f->ys = x - f->xs + f->R * f->ys;
 800cc66:	eed6 7a87 	vfnms.f32	s15, s13, s14
 800cc6a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cc6e:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 800cc72:	4770      	bx	lr

0800cc74 <tVZFilter_init>:
}

/////

void    tVZFilter_init           (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth)
{
 800cc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf.mempool);
}

void    tVZFilter_initToPool     (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth, tMempool* const mp)
{
    _tMempool* m = *mp;
 800cc78:	4cc8      	ldr	r4, [pc, #800]	; (800cf9c <tVZFilter_init+0x328>)
{
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	4688      	mov	r8, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800cc7e:	2044      	movs	r0, #68	; 0x44
    f->mempool = m;
    
    f->fc   = freq;
    f->type = type;
    f->G    = ONE_OVER_SQRT2;
 800cc80:	4fc7      	ldr	r7, [pc, #796]	; (800cfa0 <tVZFilter_init+0x32c>)
{
 800cc82:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 800cc86:	69a6      	ldr	r6, [r4, #24]
{
 800cc88:	eef0 8a40 	vmov.f32	s17, s0
 800cc8c:	eeb0 8a60 	vmov.f32	s16, s1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800cc90:	4631      	mov	r1, r6
 800cc92:	f000 fa7b 	bl	800d18c <mpool_alloc>
    f->invG    = 1.0f/ONE_OVER_SQRT2;
    f->B    = bandWidth;
    f->m    = 0.0f;
 800cc96:	2300      	movs	r3, #0
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800cc98:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800cc9a:	6006      	str	r6, [r0, #0]
    f->type = type;
 800cc9c:	f880 8004 	strb.w	r8, [r0, #4]
    f->s1 = 0.0f;
    f->s2 = 0.0f;
    f->sr = leaf.sampleRate;
 800cca0:	6821      	ldr	r1, [r4, #0]
    f->inv_sr = leaf.invSampleRate;
 800cca2:	6862      	ldr	r2, [r4, #4]
    f->invG    = 1.0f/ONE_OVER_SQRT2;
 800cca4:	4ebf      	ldr	r6, [pc, #764]	; (800cfa4 <tVZFilter_init+0x330>)
    f->fc   = freq;
 800cca6:	edc0 8a0a 	vstr	s17, [r0, #40]	; 0x28
    f->m    = 0.0f;
 800ccaa:	6383      	str	r3, [r0, #56]	; 0x38
    f->s1 = 0.0f;
 800ccac:	6083      	str	r3, [r0, #8]
    f->s2 = 0.0f;
 800ccae:	60c3      	str	r3, [r0, #12]
    f->B    = bandWidth;
 800ccb0:	ed80 8a0d 	vstr	s16, [r0, #52]	; 0x34
    f->G    = ONE_OVER_SQRT2;
 800ccb4:	62c7      	str	r7, [r0, #44]	; 0x2c
    f->invG    = 1.0f/ONE_OVER_SQRT2;
 800ccb6:	6306      	str	r6, [r0, #48]	; 0x30
    f->sr = leaf.sampleRate;
 800ccb8:	63c1      	str	r1, [r0, #60]	; 0x3c
    f->inv_sr = leaf.invSampleRate;
 800ccba:	6402      	str	r2, [r0, #64]	; 0x40


void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{

    _tVZFilter* f = *vf;
 800ccbc:	682c      	ldr	r4, [r5, #0]
    f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 800ccbe:	eddf 7aba 	vldr	s15, [pc, #744]	; 800cfa8 <tVZFilter_init+0x334>
 800ccc2:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 800ccc6:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800ccca:	ee28 8a07 	vmul.f32	s16, s16, s14
 800ccce:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ccd2:	eeb0 0a48 	vmov.f32	s0, s16
 800ccd6:	f000 fe29 	bl	800d92c <tanf>

      switch( f->type )
 800ccda:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 800ccdc:	eef0 8a40 	vmov.f32	s17, s0
 800cce0:	ed84 0a04 	vstr	s0, [r4, #16]
      switch( f->type )
 800cce4:	2b0a      	cmp	r3, #10
 800cce6:	f200 81b5 	bhi.w	800d054 <tVZFilter_init+0x3e0>
 800ccea:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ccee:	0054      	.short	0x0054
 800ccf0:	006a005f 	.word	0x006a005f
 800ccf4:	00ac0075 	.word	0x00ac0075
 800ccf8:	011700e4 	.word	0x011700e4
 800ccfc:	01630137 	.word	0x01630137
 800cd00:	000b01a8 	.word	0x000b01a8
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800cd04:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800cd08:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800cd0c:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800cd0e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800cd12:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800cd16:	f000 fccb 	bl	800d6b0 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800cd1a:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800cd1e:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800cd22:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 800cfa8 <tVZFilter_init+0x334>
 800cd26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cd2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd2e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cd32:	f000 fdfb 	bl	800d92c <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800cd36:	ed95 7a04 	vldr	s14, [r5, #16]
                               // unwarped: r = pow(2, -B/2) -> approximation for low
                               // center-frequencies
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800cd3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800cd3e:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800cd42:	edc4 7a07 	vstr	s15, [r4, #28]
 800cd46:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800cd4a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800cd4e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cd52:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800cd56:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cd5a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cd5e:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800cd62:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800cd66:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800cd6a:	eeb1 7a67 	vneg.f32	s14, s15
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800cd6e:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800cd72:	ed84 7a08 	vstr	s14, [r4, #32]
      f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 800cd76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd7a:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800cd7e:	eef0 6a47 	vmov.f32	s13, s14
 800cd82:	eee7 6aa8 	vfma.f32	s13, s15, s17
 800cd86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd8a:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800cd8e:	ecbd 8b04 	vpop	{d8-d9}
 800cd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800cd96:	2300      	movs	r3, #0
 800cd98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800cd9c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800cda0:	6262      	str	r2, [r4, #36]	; 0x24
            f->R2 = f->invG;
 800cda2:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800cda6:	61e3      	str	r3, [r4, #28]
 800cda8:	6223      	str	r3, [r4, #32]
 800cdaa:	e7e4      	b.n	800cd76 <tVZFilter_init+0x102>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800cdac:	2300      	movs	r3, #0
 800cdae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800cdb2:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800cdb6:	61e2      	str	r2, [r4, #28]
            f->R2 = f->invG;
 800cdb8:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800cdbc:	6223      	str	r3, [r4, #32]
 800cdbe:	6263      	str	r3, [r4, #36]	; 0x24
 800cdc0:	e7d9      	b.n	800cd76 <tVZFilter_init+0x102>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800cdc8:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800cdcc:	6222      	str	r2, [r4, #32]
            f->R2 = f->invG;
 800cdce:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800cdd2:	61e3      	str	r3, [r4, #28]
 800cdd4:	6263      	str	r3, [r4, #36]	; 0x24
 800cdd6:	e7ce      	b.n	800cd76 <tVZFilter_init+0x102>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800cdd8:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800cddc:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800cde0:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800cde2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800cde6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800cdea:	f000 fc61 	bl	800d6b0 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800cdee:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800cdf2:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800cdf6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800cfa8 <tVZFilter_init+0x334>
 800cdfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cdfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce02:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ce06:	f000 fd91 	bl	800d92c <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800ce0a:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800ce0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800ce12:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800ce14:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800ce18:	61e3      	str	r3, [r4, #28]
 800ce1a:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800ce1c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800ce20:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ce24:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ce28:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ce2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ce30:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800ce34:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800ce38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ce3c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800ce40:	edc4 7a08 	vstr	s15, [r4, #32]
 800ce44:	e797      	b.n	800cd76 <tVZFilter_init+0x102>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800ce46:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800ce4a:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800ce4e:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800ce50:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ce54:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ce58:	f000 fc2a 	bl	800d6b0 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800ce5c:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800ce60:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800ce64:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800cfa8 <tVZFilter_init+0x334>
 800ce68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ce6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce70:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ce74:	f000 fd5a 	bl	800d92c <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800ce78:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800ce7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800ce80:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800ce82:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800ce86:	6223      	str	r3, [r4, #32]
 800ce88:	edc4 7a07 	vstr	s15, [r4, #28]
 800ce8c:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800ce90:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800ce94:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ce98:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ce9c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cea0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cea4:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800cea8:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800ceac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ceb0:	edc4 7a05 	vstr	s15, [r4, #20]
 800ceb4:	e75f      	b.n	800cd76 <tVZFilter_init+0x102>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800ceb6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800ceba:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 800cebe:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800cec2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800cec6:	f000 fbf3 	bl	800d6b0 <powf>
            float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800ceca:	ee28 0a00 	vmul.f32	s0, s16, s0
 800cece:	f000 fd2d 	bl	800d92c <tanf>
            float r  = f->g/wl;
 800ced2:	ee88 0a80 	vdiv.f32	s0, s17, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800ced6:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800ceda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cede:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cee2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800cee6:	edc4 7a07 	vstr	s15, [r4, #28]
 800ceea:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800ceee:	ee67 6a26 	vmul.f32	s13, s14, s13
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800cef2:	ee20 0a00 	vmul.f32	s0, s0, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800cef6:	eee0 7a00 	vfma.f32	s15, s0, s0
 800cefa:	ee87 6a80 	vdiv.f32	s12, s15, s0
 800cefe:	ee76 7a65 	vsub.f32	s15, s12, s11
 800cf02:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800cf06:	eef1 7ac6 	vsqrt.f32	s15, s12
 800cf0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800cf0e:	ee27 7a27 	vmul.f32	s14, s14, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800cf12:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800cf16:	ed84 7a08 	vstr	s14, [r4, #32]
 800cf1a:	e72c      	b.n	800cd76 <tVZFilter_init+0x102>
            float A = sqrtf(f->G);
 800cf1c:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
          f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800cf20:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800cf24:	eddf 7a21 	vldr	s15, [pc, #132]	; 800cfac <tVZFilter_init+0x338>
            float A = sqrtf(f->G);
 800cf28:	eeb1 8ac9 	vsqrt.f32	s16, s18
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800cf2c:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800cf30:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cf34:	eef1 7ac8 	vsqrt.f32	s15, s16
          f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800cf38:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 800cf3c:	edc4 8a04 	vstr	s17, [r4, #16]
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800cf40:	f000 ff7e 	bl	800de40 <sinhf>
 800cf44:	ee70 7a00 	vadd.f32	s15, s0, s0
          f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800cf48:	ed84 9a07 	vstr	s18, [r4, #28]
 800cf4c:	6265      	str	r5, [r4, #36]	; 0x24
 800cf4e:	ee28 8a27 	vmul.f32	s16, s16, s15
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800cf52:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800cf56:	ed84 8a08 	vstr	s16, [r4, #32]
 800cf5a:	e70c      	b.n	800cd76 <tVZFilter_init+0x102>
          float A = sqrtf(f->G);
 800cf5c:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800cf60:	eddf 7a12 	vldr	s15, [pc, #72]	; 800cfac <tVZFilter_init+0x338>
          float A = sqrtf(f->G);
 800cf64:	eeb1 8ac9 	vsqrt.f32	s16, s18
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800cf68:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800cf6c:	ee20 0a27 	vmul.f32	s0, s0, s15
          f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800cf70:	eef1 7ac8 	vsqrt.f32	s15, s16
 800cf74:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800cf78:	edc4 8a04 	vstr	s17, [r4, #16]
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800cf7c:	f000 ff60 	bl	800de40 <sinhf>
 800cf80:	ee70 7a00 	vadd.f32	s15, s0, s0
          f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800cf84:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cf88:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 800cf8c:	ee28 8a27 	vmul.f32	s16, s16, s15
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800cf90:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800cf94:	61e3      	str	r3, [r4, #28]
 800cf96:	ed84 8a08 	vstr	s16, [r4, #32]
 800cf9a:	e6ec      	b.n	800cd76 <tVZFilter_init+0x102>
 800cf9c:	20019e90 	.word	0x20019e90
 800cfa0:	3f3504f3 	.word	0x3f3504f3
 800cfa4:	3fb504f3 	.word	0x3fb504f3
 800cfa8:	40490fdb 	.word	0x40490fdb
 800cfac:	3eb17218 	.word	0x3eb17218
 800cfb0:	00000000 	.word	0x00000000
          float x  = 2.0f*f->m-1.0f;
 800cfb4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800cfb8:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 800cfbc:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
            f->R2 = f->invG;
 800cfc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800cfc2:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 800cfb0 <tVZFilter_init+0x33c>
            f->R2 = f->invG;
 800cfc6:	6163      	str	r3, [r4, #20]
          float x  = 2.0f*f->m-1.0f;
 800cfc8:	eea7 8a27 	vfma.f32	s16, s14, s15
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800cfcc:	eef1 8a48 	vneg.f32	s17, s16
 800cfd0:	eeb0 0a68 	vmov.f32	s0, s17
 800cfd4:	f000 f8ba 	bl	800d14c <maximum>
          f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800cfd8:	ed5f 0a0b 	vldr	s1, [pc, #-44]	; 800cfb0 <tVZFilter_init+0x33c>
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800cfdc:	ed84 0a07 	vstr	s0, [r4, #28]
          f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800cfe0:	eeb0 0a48 	vmov.f32	s0, s16
 800cfe4:	f000 f8b6 	bl	800d154 <minimum>
          f->cB = 1.0f-x*x;
 800cfe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
          float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800cfec:	edd4 6a07 	vldr	s13, [r4, #28]
 800cff0:	edd4 7a05 	vldr	s15, [r4, #20]
          f->cB = 1.0f-x*x;
 800cff4:	eea8 7a88 	vfma.f32	s14, s17, s16
          float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800cff8:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 800cffc:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800d000:	edd4 8a04 	vldr	s17, [r4, #16]
 800d004:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800d008:	ee27 6a07 	vmul.f32	s12, s14, s14
 800d00c:	eea6 6aa6 	vfma.f32	s12, s13, s13
 800d010:	eea0 6a00 	vfma.f32	s12, s0, s0
 800d014:	eea0 6a45 	vfms.f32	s12, s0, s10
 800d018:	ee84 5a86 	vdiv.f32	s10, s9, s12
 800d01c:	eeb1 6ac5 	vsqrt.f32	s12, s10
 800d020:	ee26 6a25 	vmul.f32	s12, s12, s11
          f->cL *= s; f->cB *= s; f->cH *= s;
 800d024:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d028:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d02c:	ee20 0a06 	vmul.f32	s0, s0, s12
 800d030:	edc4 6a07 	vstr	s13, [r4, #28]
 800d034:	ed84 7a08 	vstr	s14, [r4, #32]
 800d038:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 800d03c:	e69b      	b.n	800cd76 <tVZFilter_init+0x102>
          f->cL = 1.0f;
 800d03e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
          f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800d042:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
          f->cL = 1.0f;
 800d046:	61e3      	str	r3, [r4, #28]
          f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800d048:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cH = 1.0f;
 800d04c:	6263      	str	r3, [r4, #36]	; 0x24
          f->cB = f->R2;
 800d04e:	edc4 7a08 	vstr	s15, [r4, #32]
 800d052:	e690      	b.n	800cd76 <tVZFilter_init+0x102>
 800d054:	edd4 7a05 	vldr	s15, [r4, #20]
 800d058:	e68d      	b.n	800cd76 <tVZFilter_init+0x102>
 800d05a:	bf00      	nop

0800d05c <tVZFilter_tick>:
{
 800d05c:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 800d05e:	6804      	ldr	r4, [r0, #0]
{
 800d060:	ed2d 8b06 	vpush	{d8-d10}
    yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 800d064:	ed94 8a02 	vldr	s16, [r4, #8]
 800d068:	edd4 7a05 	vldr	s15, [r4, #20]
 800d06c:	ed94 9a04 	vldr	s18, [r4, #16]
 800d070:	eea7 0ac8 	vfms.f32	s0, s15, s16
 800d074:	edd4 9a03 	vldr	s19, [r4, #12]
 800d078:	edd4 7a06 	vldr	s15, [r4, #24]
 800d07c:	eea8 0a49 	vfms.f32	s0, s16, s18
 800d080:	ee70 8a69 	vsub.f32	s17, s0, s19
 800d084:	ee68 8aa7 	vmul.f32	s17, s17, s15
    yB = tanhf(f->g*yH) + f->s1;
 800d088:	ee29 aa28 	vmul.f32	s20, s18, s17
 800d08c:	eeb0 0a4a 	vmov.f32	s0, s20
 800d090:	f000 fc74 	bl	800d97c <tanhf>
 800d094:	ee38 8a00 	vadd.f32	s16, s16, s0
    yL = tanhf(f->g*yB) + f->s2;
 800d098:	ee29 9a08 	vmul.f32	s18, s18, s16
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 800d09c:	ee3a aa08 	vadd.f32	s20, s20, s16
    yL = tanhf(f->g*yB) + f->s2;
 800d0a0:	eeb0 0a49 	vmov.f32	s0, s18
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 800d0a4:	ed84 aa02 	vstr	s20, [r4, #8]
    yL = tanhf(f->g*yB) + f->s2;
 800d0a8:	f000 fc68 	bl	800d97c <tanhf>
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800d0ac:	edd4 7a08 	vldr	s15, [r4, #32]
    yL = tanhf(f->g*yB) + f->s2;
 800d0b0:	ee79 9a80 	vadd.f32	s19, s19, s0
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800d0b4:	ed94 7a07 	vldr	s14, [r4, #28]
 800d0b8:	ee28 0a27 	vmul.f32	s0, s16, s15
 800d0bc:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 800d0c0:	ee39 9a29 	vadd.f32	s18, s18, s19
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800d0c4:	eea7 0a29 	vfma.f32	s0, s14, s19
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 800d0c8:	ed84 9a03 	vstr	s18, [r4, #12]
}
 800d0cc:	eea7 0aa8 	vfma.f32	s0, s15, s17
 800d0d0:	ecbd 8b06 	vpop	{d8-d10}
 800d0d4:	bd10      	pop	{r4, pc}
 800d0d6:	bf00      	nop

0800d0d8 <LEAF_clip>:

float   LEAF_clip(float min, float val, float max)
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 800d0d8:	eeb4 0ac1 	vcmpe.f32	s0, s2
 800d0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e0:	dd05      	ble.n	800d0ee <LEAF_clip+0x16>
 800d0e2:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 800d0e6:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 800d0ea:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 800d0ee:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800d0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0f6:	dc01      	bgt.n	800d0fc <LEAF_clip+0x24>
 800d0f8:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop

0800d100 <LEAF_generate_atodb>:
    }
}

void LEAF_generate_atodb(float* buffer, int size)
{
    float increment = 1.0f / (float)size;
 800d100:	ee07 1a90 	vmov	s15, r1
 800d104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    for (int i = 0; i < size; i++)
 800d108:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)size;
 800d10a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 800d10e:	b538      	push	{r3, r4, r5, lr}
 800d110:	ed2d 8b04 	vpush	{d8-d9}
    float increment = 1.0f / (float)size;
 800d114:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 800d118:	dd12      	ble.n	800d140 <LEAF_generate_atodb+0x40>
 800d11a:	4604      	mov	r4, r0
    float x = 0.0f;
 800d11c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800d148 <LEAF_generate_atodb+0x48>
 800d120:	eb00 0581 	add.w	r5, r0, r1, lsl #2
}


float atodb(float a)
{
    return 20.0f*log10f(a);
 800d124:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 800d128:	eeb0 0a48 	vmov.f32	s0, s16
 800d12c:	f000 fe16 	bl	800dd5c <log10f>
 800d130:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 800d134:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 800d138:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 800d13c:	42a5      	cmp	r5, r4
 800d13e:	d1f3      	bne.n	800d128 <LEAF_generate_atodb+0x28>
}
 800d140:	ecbd 8b04 	vpop	{d8-d9}
 800d144:	bd38      	pop	{r3, r4, r5, pc}
 800d146:	bf00      	nop
 800d148:	00000000 	.word	0x00000000

0800d14c <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 800d14c:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop

0800d154 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 800d154:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 800d158:	4770      	bx	lr
 800d15a:	bf00      	nop

0800d15c <leaf_pool_init>:
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(char* memory, size_t size)
{
 800d15c:	b470      	push	{r4, r5, r6}
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 800d15e:	4b0a      	ldr	r3, [pc, #40]	; (800d188 <leaf_pool_init+0x2c>)
 800d160:	2610      	movs	r6, #16
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 800d162:	f1a1 0410 	sub.w	r4, r1, #16
    pool->usize  = 0;
 800d166:	2200      	movs	r2, #0
    pool->msize  = size;
 800d168:	6259      	str	r1, [r3, #36]	; 0x24
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + leaf.header_size;
 800d16a:	1985      	adds	r5, r0, r6
    leaf.mempool = &leaf._internal_mempool;
 800d16c:	f103 011c 	add.w	r1, r3, #28
    pool->mpool = (char*)memory;
 800d170:	61d8      	str	r0, [r3, #28]
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 800d172:	62de      	str	r6, [r3, #44]	; 0x2c
    pool->usize  = 0;
 800d174:	621a      	str	r2, [r3, #32]
    node->pool = block_location + leaf.header_size;
 800d176:	6005      	str	r5, [r0, #0]
    node->next = next;
    node->prev = prev;
    node->size = size;
 800d178:	60c4      	str	r4, [r0, #12]
    node->prev = prev;
 800d17a:	e9c0 2201 	strd	r2, r2, [r0, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 800d17e:	6298      	str	r0, [r3, #40]	; 0x28
    leaf.mempool = &leaf._internal_mempool;
 800d180:	6199      	str	r1, [r3, #24]
}
 800d182:	bc70      	pop	{r4, r5, r6}
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	20019e90 	.word	0x20019e90

0800d18c <mpool_alloc>:
{
 800d18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pool->head == NULL)
 800d18e:	68cb      	ldr	r3, [r1, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d038      	beq.n	800d206 <mpool_alloc+0x7a>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800d194:	1dc5      	adds	r5, r0, #7
 800d196:	f025 0507 	bic.w	r5, r5, #7
    while (node_to_alloc->size < size_to_alloc)
 800d19a:	e002      	b.n	800d1a2 <mpool_alloc+0x16>
        if (node_to_alloc == NULL)
 800d19c:	4623      	mov	r3, r4
 800d19e:	2c00      	cmp	r4, #0
 800d1a0:	d031      	beq.n	800d206 <mpool_alloc+0x7a>
    while (node_to_alloc->size < size_to_alloc)
 800d1a2:	68da      	ldr	r2, [r3, #12]
 800d1a4:	685c      	ldr	r4, [r3, #4]
 800d1a6:	42aa      	cmp	r2, r5
 800d1a8:	d3f8      	bcc.n	800d19c <mpool_alloc+0x10>
    if (leftover > leaf.header_size)
 800d1aa:	4e25      	ldr	r6, [pc, #148]	; (800d240 <mpool_alloc+0xb4>)
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800d1ac:	1b57      	subs	r7, r2, r5
    node_to_alloc->size = size_to_alloc;
 800d1ae:	60dd      	str	r5, [r3, #12]
    if (leftover > leaf.header_size)
 800d1b0:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800d1b2:	42b8      	cmp	r0, r7
 800d1b4:	d332      	bcc.n	800d21c <mpool_alloc+0x90>
        node_to_alloc->size += leftover;
 800d1b6:	46a4      	mov	ip, r4
 800d1b8:	60da      	str	r2, [r3, #12]
    if (pool->head == node_to_alloc)
 800d1ba:	68ca      	ldr	r2, [r1, #12]
 800d1bc:	429a      	cmp	r2, r3
        pool->head = new_node;
 800d1be:	bf08      	it	eq
 800d1c0:	f8c1 c00c 	streq.w	ip, [r1, #12]
 800d1c4:	e9d3 0201 	ldrd	r0, r2, [r3, #4]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 800d1c8:	b108      	cbz	r0, 800d1ce <mpool_alloc+0x42>
    {
        // Close the link
        node->next->prev = node->prev;
 800d1ca:	6082      	str	r2, [r0, #8]
 800d1cc:	689a      	ldr	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800d1ce:	b10a      	cbz	r2, 800d1d4 <mpool_alloc+0x48>
    {
        // Close the link
        node->prev->next = node->next;
 800d1d0:	6858      	ldr	r0, [r3, #4]
 800d1d2:	6050      	str	r0, [r2, #4]
    }
    
    node->next = NULL;
 800d1d4:	2200      	movs	r2, #0
    pool->usize += leaf.header_size + node_to_alloc->size;
 800d1d6:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 800d1d8:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 800d1dc:	6848      	ldr	r0, [r1, #4]
 800d1de:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 800d1e0:	4428      	add	r0, r5
 800d1e2:	4420      	add	r0, r4
 800d1e4:	6048      	str	r0, [r1, #4]
    if (leaf.clearOnAllocation > 0)
 800d1e6:	6971      	ldr	r1, [r6, #20]
 800d1e8:	4291      	cmp	r1, r2
 800d1ea:	dd0a      	ble.n	800d202 <mpool_alloc+0x76>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800d1ec:	68d9      	ldr	r1, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 800d1ee:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800d1f0:	b141      	cbz	r1, 800d204 <mpool_alloc+0x78>
 800d1f2:	3801      	subs	r0, #1
 800d1f4:	4614      	mov	r4, r2
 800d1f6:	f800 4f01 	strb.w	r4, [r0, #1]!
 800d1fa:	3201      	adds	r2, #1
 800d1fc:	68d9      	ldr	r1, [r3, #12]
 800d1fe:	4291      	cmp	r1, r2
 800d200:	d8f9      	bhi.n	800d1f6 <mpool_alloc+0x6a>
 800d202:	6818      	ldr	r0, [r3, #0]
}
 800d204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 800d206:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 800d20a:	1a9b      	subs	r3, r3, r2
 800d20c:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(LEAFMempoolFragmentation);
 800d20e:	bf8c      	ite	hi
 800d210:	2001      	movhi	r0, #1
            LEAF_internalErrorCallback(LEAFMempoolOverrun);
 800d212:	2000      	movls	r0, #0
 800d214:	f000 f89e 	bl	800d354 <LEAF_internalErrorCallback>
        return NULL;
 800d218:	2000      	movs	r0, #0
}
 800d21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800d21c:	680a      	ldr	r2, [r1, #0]
        offset += leaf.header_size + node_to_alloc->size;
 800d21e:	4405      	add	r5, r0
                               node_to_alloc->prev,
 800d220:	f8d3 e008 	ldr.w	lr, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 800d224:	1a3f      	subs	r7, r7, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800d226:	eba3 0c02 	sub.w	ip, r3, r2
        offset += leaf.header_size + node_to_alloc->size;
 800d22a:	4465      	add	r5, ip
        new_node = create_node(&pool->mpool[offset],
 800d22c:	eb02 0c05 	add.w	ip, r2, r5
    node->pool = block_location + leaf.header_size;
 800d230:	4460      	add	r0, ip
 800d232:	5150      	str	r0, [r2, r5]
    node->size = size;
 800d234:	f8cc 700c 	str.w	r7, [ip, #12]
    node->prev = prev;
 800d238:	e9cc 4e01 	strd	r4, lr, [ip, #4]
 800d23c:	e7bd      	b.n	800d1ba <mpool_alloc+0x2e>
 800d23e:	bf00      	nop
 800d240:	20019e90 	.word	0x20019e90

0800d244 <mpool_calloc>:
{
 800d244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pool->head == NULL)
 800d246:	68cb      	ldr	r3, [r1, #12]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d035      	beq.n	800d2b8 <mpool_calloc+0x74>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800d24c:	1dc5      	adds	r5, r0, #7
 800d24e:	f025 0507 	bic.w	r5, r5, #7
    while (node_to_alloc->size < size_to_alloc)
 800d252:	e002      	b.n	800d25a <mpool_calloc+0x16>
        if (node_to_alloc == NULL)
 800d254:	4623      	mov	r3, r4
 800d256:	2c00      	cmp	r4, #0
 800d258:	d02e      	beq.n	800d2b8 <mpool_calloc+0x74>
    while (node_to_alloc->size < size_to_alloc)
 800d25a:	68da      	ldr	r2, [r3, #12]
 800d25c:	685c      	ldr	r4, [r3, #4]
 800d25e:	42aa      	cmp	r2, r5
 800d260:	d3f8      	bcc.n	800d254 <mpool_calloc+0x10>
    if (leftover > leaf.header_size)
 800d262:	4f23      	ldr	r7, [pc, #140]	; (800d2f0 <mpool_calloc+0xac>)
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800d264:	1b56      	subs	r6, r2, r5
    node_to_alloc->size = size_to_alloc;
 800d266:	60dd      	str	r5, [r3, #12]
    if (leftover > leaf.header_size)
 800d268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d26a:	42b0      	cmp	r0, r6
 800d26c:	d32f      	bcc.n	800d2ce <mpool_calloc+0x8a>
        node_to_alloc->size += leftover;
 800d26e:	46a4      	mov	ip, r4
 800d270:	60da      	str	r2, [r3, #12]
    if (pool->head == node_to_alloc)
 800d272:	68ca      	ldr	r2, [r1, #12]
 800d274:	429a      	cmp	r2, r3
        pool->head = new_node;
 800d276:	bf08      	it	eq
 800d278:	f8c1 c00c 	streq.w	ip, [r1, #12]
 800d27c:	e9d3 0201 	ldrd	r0, r2, [r3, #4]
    if (node->next != NULL)
 800d280:	b108      	cbz	r0, 800d286 <mpool_calloc+0x42>
        node->next->prev = node->prev;
 800d282:	6082      	str	r2, [r0, #8]
 800d284:	689a      	ldr	r2, [r3, #8]
    if (node->prev != NULL)
 800d286:	b10a      	cbz	r2, 800d28c <mpool_calloc+0x48>
        node->prev->next = node->next;
 800d288:	6858      	ldr	r0, [r3, #4]
 800d28a:	6050      	str	r0, [r2, #4]
    node->next = NULL;
 800d28c:	2200      	movs	r2, #0
    pool->usize += leaf.header_size + node_to_alloc->size;
 800d28e:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 800d290:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 800d294:	6848      	ldr	r0, [r1, #4]
 800d296:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d298:	4428      	add	r0, r5
 800d29a:	4420      	add	r0, r4
 800d29c:	6048      	str	r0, [r1, #4]
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800d29e:	68d9      	ldr	r1, [r3, #12]
    char* new_pool = (char*)node_to_alloc->pool;
 800d2a0:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800d2a2:	b141      	cbz	r1, 800d2b6 <mpool_calloc+0x72>
 800d2a4:	3801      	subs	r0, #1
 800d2a6:	4614      	mov	r4, r2
 800d2a8:	f800 4f01 	strb.w	r4, [r0, #1]!
 800d2ac:	3201      	adds	r2, #1
 800d2ae:	68d9      	ldr	r1, [r3, #12]
 800d2b0:	4291      	cmp	r1, r2
 800d2b2:	d8f9      	bhi.n	800d2a8 <mpool_calloc+0x64>
 800d2b4:	6818      	ldr	r0, [r3, #0]
}
 800d2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 800d2b8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 800d2bc:	1a9b      	subs	r3, r3, r2
 800d2be:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(LEAFMempoolFragmentation);
 800d2c0:	bf8c      	ite	hi
 800d2c2:	2001      	movhi	r0, #1
            LEAF_internalErrorCallback(LEAFMempoolOverrun);
 800d2c4:	2000      	movls	r0, #0
 800d2c6:	f000 f845 	bl	800d354 <LEAF_internalErrorCallback>
        return NULL;
 800d2ca:	2000      	movs	r0, #0
}
 800d2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800d2ce:	680a      	ldr	r2, [r1, #0]
        offset += leaf.header_size + node_to_alloc->size;
 800d2d0:	4405      	add	r5, r0
                               node_to_alloc->prev,
 800d2d2:	f8d3 e008 	ldr.w	lr, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 800d2d6:	1a36      	subs	r6, r6, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800d2d8:	eba3 0c02 	sub.w	ip, r3, r2
        offset += leaf.header_size + node_to_alloc->size;
 800d2dc:	4465      	add	r5, ip
        new_node = create_node(&pool->mpool[offset],
 800d2de:	eb02 0c05 	add.w	ip, r2, r5
    node->pool = block_location + leaf.header_size;
 800d2e2:	4460      	add	r0, ip
 800d2e4:	5150      	str	r0, [r2, r5]
    node->size = size;
 800d2e6:	f8cc 600c 	str.w	r6, [ip, #12]
    node->prev = prev;
 800d2ea:	e9cc 4e01 	strd	r4, lr, [ip, #4]
 800d2ee:	e7c0      	b.n	800d272 <mpool_calloc+0x2e>
 800d2f0:	20019e90 	.word	0x20019e90

0800d2f4 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop

0800d2f8 <LEAF_init>:
{
 800d2f8:	b538      	push	{r3, r4, r5, lr}
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	4605      	mov	r5, r0
    leaf_pool_init(memory, memorysize);
 800d2fe:	4611      	mov	r1, r2
 800d300:	4620      	mov	r0, r4
{
 800d302:	461c      	mov	r4, r3
 800d304:	ed2d 8b02 	vpush	{d8}
 800d308:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(memory, memorysize);
 800d30c:	f7ff ff26 	bl	800d15c <leaf_pool_init>
    leaf.invSampleRate = 1.0f/sr;
 800d310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 800d314:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800d348 <LEAF_init+0x50>
    leaf.sampleRate = sr;
 800d318:	4a0c      	ldr	r2, [pc, #48]	; (800d34c <LEAF_init+0x54>)
    leaf.clearOnAllocation = 0;
 800d31a:	2100      	movs	r1, #0
    leaf.errorCallback = &LEAF_defaultErrorCallback;
 800d31c:	480c      	ldr	r0, [pc, #48]	; (800d350 <LEAF_init+0x58>)
    leaf.invSampleRate = 1.0f/sr;
 800d31e:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf.blockSize = blocksize;
 800d322:	6095      	str	r5, [r2, #8]
    leaf.sampleRate = sr;
 800d324:	ed82 8a00 	vstr	s16, [r2]
    leaf.random = random;
 800d328:	6114      	str	r4, [r2, #16]
    leaf.errorCallback = &LEAF_defaultErrorCallback;
 800d32a:	6310      	str	r0, [r2, #48]	; 0x30
    leaf.clearOnAllocation = 0;
 800d32c:	6151      	str	r1, [r2, #20]
        leaf.errorState[i] = 0;
 800d32e:	63d1      	str	r1, [r2, #60]	; 0x3c
 800d330:	e9c2 110d 	strd	r1, r1, [r2, #52]	; 0x34
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 800d334:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf.invSampleRate = 1.0f/sr;
 800d338:	ed82 7a01 	vstr	s14, [r2, #4]
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 800d33c:	edc2 7a03 	vstr	s15, [r2, #12]
}
 800d340:	ecbd 8b02 	vpop	{d8}
 800d344:	bd38      	pop	{r3, r4, r5, pc}
 800d346:	bf00      	nop
 800d348:	40c90fdb 	.word	0x40c90fdb
 800d34c:	20019e90 	.word	0x20019e90
 800d350:	0800d2f5 	.word	0x0800d2f5

0800d354 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAFErrorType whichone)
{
    leaf.errorState[whichone] = 1;
 800d354:	4b03      	ldr	r3, [pc, #12]	; (800d364 <LEAF_internalErrorCallback+0x10>)
 800d356:	2101      	movs	r1, #1
 800d358:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    leaf.errorCallback(whichone);
 800d35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    leaf.errorState[whichone] = 1;
 800d35e:	6351      	str	r1, [r2, #52]	; 0x34
    leaf.errorCallback(whichone);
 800d360:	4718      	bx	r3
 800d362:	bf00      	nop
 800d364:	20019e90 	.word	0x20019e90

0800d368 <__errno>:
 800d368:	4b01      	ldr	r3, [pc, #4]	; (800d370 <__errno+0x8>)
 800d36a:	6818      	ldr	r0, [r3, #0]
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	20000020 	.word	0x20000020

0800d374 <__libc_init_array>:
 800d374:	b570      	push	{r4, r5, r6, lr}
 800d376:	4e0d      	ldr	r6, [pc, #52]	; (800d3ac <__libc_init_array+0x38>)
 800d378:	4c0d      	ldr	r4, [pc, #52]	; (800d3b0 <__libc_init_array+0x3c>)
 800d37a:	1ba4      	subs	r4, r4, r6
 800d37c:	10a4      	asrs	r4, r4, #2
 800d37e:	2500      	movs	r5, #0
 800d380:	42a5      	cmp	r5, r4
 800d382:	d109      	bne.n	800d398 <__libc_init_array+0x24>
 800d384:	4e0b      	ldr	r6, [pc, #44]	; (800d3b4 <__libc_init_array+0x40>)
 800d386:	4c0c      	ldr	r4, [pc, #48]	; (800d3b8 <__libc_init_array+0x44>)
 800d388:	f002 fb26 	bl	800f9d8 <_init>
 800d38c:	1ba4      	subs	r4, r4, r6
 800d38e:	10a4      	asrs	r4, r4, #2
 800d390:	2500      	movs	r5, #0
 800d392:	42a5      	cmp	r5, r4
 800d394:	d105      	bne.n	800d3a2 <__libc_init_array+0x2e>
 800d396:	bd70      	pop	{r4, r5, r6, pc}
 800d398:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d39c:	4798      	blx	r3
 800d39e:	3501      	adds	r5, #1
 800d3a0:	e7ee      	b.n	800d380 <__libc_init_array+0xc>
 800d3a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d3a6:	4798      	blx	r3
 800d3a8:	3501      	adds	r5, #1
 800d3aa:	e7f2      	b.n	800d392 <__libc_init_array+0x1e>
 800d3ac:	080106b0 	.word	0x080106b0
 800d3b0:	080106b0 	.word	0x080106b0
 800d3b4:	080106b0 	.word	0x080106b0
 800d3b8:	080106b4 	.word	0x080106b4

0800d3bc <__itoa>:
 800d3bc:	1e93      	subs	r3, r2, #2
 800d3be:	2b22      	cmp	r3, #34	; 0x22
 800d3c0:	b510      	push	{r4, lr}
 800d3c2:	460c      	mov	r4, r1
 800d3c4:	d904      	bls.n	800d3d0 <__itoa+0x14>
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	700b      	strb	r3, [r1, #0]
 800d3ca:	461c      	mov	r4, r3
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	bd10      	pop	{r4, pc}
 800d3d0:	2a0a      	cmp	r2, #10
 800d3d2:	d109      	bne.n	800d3e8 <__itoa+0x2c>
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	da07      	bge.n	800d3e8 <__itoa+0x2c>
 800d3d8:	232d      	movs	r3, #45	; 0x2d
 800d3da:	700b      	strb	r3, [r1, #0]
 800d3dc:	4240      	negs	r0, r0
 800d3de:	2101      	movs	r1, #1
 800d3e0:	4421      	add	r1, r4
 800d3e2:	f000 f821 	bl	800d428 <__utoa>
 800d3e6:	e7f1      	b.n	800d3cc <__itoa+0x10>
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	e7f9      	b.n	800d3e0 <__itoa+0x24>

0800d3ec <itoa>:
 800d3ec:	f7ff bfe6 	b.w	800d3bc <__itoa>

0800d3f0 <memset>:
 800d3f0:	4402      	add	r2, r0
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d100      	bne.n	800d3fa <memset+0xa>
 800d3f8:	4770      	bx	lr
 800d3fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d3fe:	e7f9      	b.n	800d3f4 <memset+0x4>

0800d400 <strncat>:
 800d400:	b530      	push	{r4, r5, lr}
 800d402:	4603      	mov	r3, r0
 800d404:	781c      	ldrb	r4, [r3, #0]
 800d406:	1c5d      	adds	r5, r3, #1
 800d408:	b944      	cbnz	r4, 800d41c <strncat+0x1c>
 800d40a:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 800d40e:	d304      	bcc.n	800d41a <strncat+0x1a>
 800d410:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d414:	f803 4b01 	strb.w	r4, [r3], #1
 800d418:	b914      	cbnz	r4, 800d420 <strncat+0x20>
 800d41a:	bd30      	pop	{r4, r5, pc}
 800d41c:	462b      	mov	r3, r5
 800d41e:	e7f1      	b.n	800d404 <strncat+0x4>
 800d420:	2a00      	cmp	r2, #0
 800d422:	d1f2      	bne.n	800d40a <strncat+0xa>
 800d424:	701a      	strb	r2, [r3, #0]
 800d426:	e7f0      	b.n	800d40a <strncat+0xa>

0800d428 <__utoa>:
 800d428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d42a:	4b1d      	ldr	r3, [pc, #116]	; (800d4a0 <__utoa+0x78>)
 800d42c:	b08b      	sub	sp, #44	; 0x2c
 800d42e:	4605      	mov	r5, r0
 800d430:	460c      	mov	r4, r1
 800d432:	466e      	mov	r6, sp
 800d434:	f103 0c20 	add.w	ip, r3, #32
 800d438:	6818      	ldr	r0, [r3, #0]
 800d43a:	6859      	ldr	r1, [r3, #4]
 800d43c:	4637      	mov	r7, r6
 800d43e:	c703      	stmia	r7!, {r0, r1}
 800d440:	3308      	adds	r3, #8
 800d442:	4563      	cmp	r3, ip
 800d444:	463e      	mov	r6, r7
 800d446:	d1f7      	bne.n	800d438 <__utoa+0x10>
 800d448:	6818      	ldr	r0, [r3, #0]
 800d44a:	791b      	ldrb	r3, [r3, #4]
 800d44c:	713b      	strb	r3, [r7, #4]
 800d44e:	1e93      	subs	r3, r2, #2
 800d450:	2b22      	cmp	r3, #34	; 0x22
 800d452:	6038      	str	r0, [r7, #0]
 800d454:	f04f 0300 	mov.w	r3, #0
 800d458:	d904      	bls.n	800d464 <__utoa+0x3c>
 800d45a:	7023      	strb	r3, [r4, #0]
 800d45c:	461c      	mov	r4, r3
 800d45e:	4620      	mov	r0, r4
 800d460:	b00b      	add	sp, #44	; 0x2c
 800d462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d464:	1e66      	subs	r6, r4, #1
 800d466:	fbb5 f0f2 	udiv	r0, r5, r2
 800d46a:	af0a      	add	r7, sp, #40	; 0x28
 800d46c:	fb02 5510 	mls	r5, r2, r0, r5
 800d470:	443d      	add	r5, r7
 800d472:	1c59      	adds	r1, r3, #1
 800d474:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800d478:	f806 5f01 	strb.w	r5, [r6, #1]!
 800d47c:	4605      	mov	r5, r0
 800d47e:	b968      	cbnz	r0, 800d49c <__utoa+0x74>
 800d480:	5460      	strb	r0, [r4, r1]
 800d482:	4423      	add	r3, r4
 800d484:	4622      	mov	r2, r4
 800d486:	1b19      	subs	r1, r3, r4
 800d488:	1b10      	subs	r0, r2, r4
 800d48a:	4281      	cmp	r1, r0
 800d48c:	dde7      	ble.n	800d45e <__utoa+0x36>
 800d48e:	7811      	ldrb	r1, [r2, #0]
 800d490:	7818      	ldrb	r0, [r3, #0]
 800d492:	f802 0b01 	strb.w	r0, [r2], #1
 800d496:	f803 1901 	strb.w	r1, [r3], #-1
 800d49a:	e7f4      	b.n	800d486 <__utoa+0x5e>
 800d49c:	460b      	mov	r3, r1
 800d49e:	e7e2      	b.n	800d466 <__utoa+0x3e>
 800d4a0:	0800fe70 	.word	0x0800fe70

0800d4a4 <expf>:
 800d4a4:	ee10 2a10 	vmov	r2, s0
 800d4a8:	f240 412a 	movw	r1, #1066	; 0x42a
 800d4ac:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800d4b0:	428b      	cmp	r3, r1
 800d4b2:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 800d4b6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800d4ba:	d92e      	bls.n	800d51a <expf+0x76>
 800d4bc:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800d4c0:	d061      	beq.n	800d586 <expf+0xe2>
 800d4c2:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800d4c6:	d304      	bcc.n	800d4d2 <expf+0x2e>
 800d4c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d4cc:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800d4d0:	4770      	bx	lr
 800d4d2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800d58c <expf+0xe8>
 800d4d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4de:	dd04      	ble.n	800d4ea <expf+0x46>
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800d4e6:	f001 bf39 	b.w	800f35c <__math_oflowf>
 800d4ea:	eddf 7a29 	vldr	s15, [pc, #164]	; 800d590 <expf+0xec>
 800d4ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f6:	d504      	bpl.n	800d502 <expf+0x5e>
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800d4fe:	f001 bf21 	b.w	800f344 <__math_uflowf>
 800d502:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d594 <expf+0xf0>
 800d506:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d50e:	d504      	bpl.n	800d51a <expf+0x76>
 800d510:	2000      	movs	r0, #0
 800d512:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800d516:	f001 bf1b 	b.w	800f350 <__math_may_uflowf>
 800d51a:	491f      	ldr	r1, [pc, #124]	; (800d598 <expf+0xf4>)
 800d51c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d520:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 800d524:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 800d528:	eeb0 4b47 	vmov.f64	d4, d7
 800d52c:	eea5 4b06 	vfma.f64	d4, d5, d6
 800d530:	ec55 4b14 	vmov	r4, r5, d4
 800d534:	ee34 7b47 	vsub.f64	d7, d4, d7
 800d538:	f004 021f 	and.w	r2, r4, #31
 800d53c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800d540:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d544:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 800d548:	e9d2 4500 	ldrd	r4, r5, [r2]
 800d54c:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d550:	ee14 0a10 	vmov	r0, s8
 800d554:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 800d558:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 800d55c:	f04f 0b00 	mov.w	fp, #0
 800d560:	eb1b 0204 	adds.w	r2, fp, r4
 800d564:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 800d568:	eb4c 0305 	adc.w	r3, ip, r5
 800d56c:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d570:	ee27 7b07 	vmul.f64	d7, d7, d7
 800d574:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d578:	ec43 2b17 	vmov	d7, r2, r3
 800d57c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d580:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d584:	e7a2      	b.n	800d4cc <expf+0x28>
 800d586:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800d59c <expf+0xf8>
 800d58a:	e79f      	b.n	800d4cc <expf+0x28>
 800d58c:	42b17217 	.word	0x42b17217
 800d590:	c2cff1b4 	.word	0xc2cff1b4
 800d594:	c2ce8ecf 	.word	0xc2ce8ecf
 800d598:	0800fef8 	.word	0x0800fef8
 800d59c:	00000000 	.word	0x00000000

0800d5a0 <fabsf>:
 800d5a0:	ee10 3a10 	vmov	r3, s0
 800d5a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5a8:	ee00 3a10 	vmov	s0, r3
 800d5ac:	4770      	bx	lr
	...

0800d5b0 <logf>:
 800d5b0:	ee10 3a10 	vmov	r3, s0
 800d5b4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d5b8:	b410      	push	{r4}
 800d5ba:	d057      	beq.n	800d66c <logf+0xbc>
 800d5bc:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800d5c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800d5c4:	d31a      	bcc.n	800d5fc <logf+0x4c>
 800d5c6:	005a      	lsls	r2, r3, #1
 800d5c8:	d104      	bne.n	800d5d4 <logf+0x24>
 800d5ca:	2001      	movs	r0, #1
 800d5cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5d0:	f001 beca 	b.w	800f368 <__math_divzerof>
 800d5d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d5d8:	d045      	beq.n	800d666 <logf+0xb6>
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	db02      	blt.n	800d5e4 <logf+0x34>
 800d5de:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800d5e2:	d303      	bcc.n	800d5ec <logf+0x3c>
 800d5e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5e8:	f001 bece 	b.w	800f388 <__math_invalidf>
 800d5ec:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d674 <logf+0xc4>
 800d5f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d5f4:	ee10 3a10 	vmov	r3, s0
 800d5f8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800d5fc:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800d600:	491d      	ldr	r1, [pc, #116]	; (800d678 <logf+0xc8>)
 800d602:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d606:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800d60a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800d60e:	0dd4      	lsrs	r4, r2, #23
 800d610:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800d614:	05e4      	lsls	r4, r4, #23
 800d616:	ed90 5b00 	vldr	d5, [r0]
 800d61a:	1b1b      	subs	r3, r3, r4
 800d61c:	ee07 3a90 	vmov	s15, r3
 800d620:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d624:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d628:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800d62c:	ee26 3b06 	vmul.f64	d3, d6, d6
 800d630:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800d634:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d638:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800d63c:	15d2      	asrs	r2, r2, #23
 800d63e:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 800d642:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d646:	eeb0 5b47 	vmov.f64	d5, d7
 800d64a:	ed90 0b02 	vldr	d0, [r0, #8]
 800d64e:	ee07 2a90 	vmov	s15, r2
 800d652:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d656:	eea7 0b04 	vfma.f64	d0, d7, d4
 800d65a:	ee30 0b06 	vadd.f64	d0, d0, d6
 800d65e:	eea3 0b05 	vfma.f64	d0, d3, d5
 800d662:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d66a:	4770      	bx	lr
 800d66c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d67c <logf+0xcc>
 800d670:	e7f9      	b.n	800d666 <logf+0xb6>
 800d672:	bf00      	nop
 800d674:	4b000000 	.word	0x4b000000
 800d678:	08010040 	.word	0x08010040
 800d67c:	00000000 	.word	0x00000000

0800d680 <checkint>:
 800d680:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d684:	2b7e      	cmp	r3, #126	; 0x7e
 800d686:	dd10      	ble.n	800d6aa <checkint+0x2a>
 800d688:	2b96      	cmp	r3, #150	; 0x96
 800d68a:	dc0c      	bgt.n	800d6a6 <checkint+0x26>
 800d68c:	2201      	movs	r2, #1
 800d68e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d692:	fa02 f303 	lsl.w	r3, r2, r3
 800d696:	1e5a      	subs	r2, r3, #1
 800d698:	4202      	tst	r2, r0
 800d69a:	d106      	bne.n	800d6aa <checkint+0x2a>
 800d69c:	4203      	tst	r3, r0
 800d69e:	bf0c      	ite	eq
 800d6a0:	2002      	moveq	r0, #2
 800d6a2:	2001      	movne	r0, #1
 800d6a4:	4770      	bx	lr
 800d6a6:	2002      	movs	r0, #2
 800d6a8:	4770      	bx	lr
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	4770      	bx	lr
	...

0800d6b0 <powf>:
 800d6b0:	ee10 1a10 	vmov	r1, s0
 800d6b4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800d6b8:	ee10 4a90 	vmov	r4, s1
 800d6bc:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800d6c0:	0062      	lsls	r2, r4, #1
 800d6c2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d6c6:	eef0 4a60 	vmov.f32	s9, s1
 800d6ca:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800d6ce:	4b92      	ldr	r3, [pc, #584]	; (800d918 <powf+0x268>)
 800d6d0:	d255      	bcs.n	800d77e <powf+0xce>
 800d6d2:	4298      	cmp	r0, r3
 800d6d4:	d855      	bhi.n	800d782 <powf+0xd2>
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800d6dc:	4a8f      	ldr	r2, [pc, #572]	; (800d91c <powf+0x26c>)
 800d6de:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 800d6e2:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 800d6e6:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800d6ea:	0ddb      	lsrs	r3, r3, #23
 800d6ec:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800d6f0:	05db      	lsls	r3, r3, #23
 800d6f2:	ed94 6b00 	vldr	d6, [r4]
 800d6f6:	1ac9      	subs	r1, r1, r3
 800d6f8:	ee07 1a90 	vmov	s15, r1
 800d6fc:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 800d700:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d704:	eea6 2b07 	vfma.f64	d2, d6, d7
 800d708:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 800d70c:	ee22 6b02 	vmul.f64	d6, d2, d2
 800d710:	eea2 7b05 	vfma.f64	d7, d2, d5
 800d714:	15db      	asrs	r3, r3, #23
 800d716:	ed94 5b02 	vldr	d5, [r4, #8]
 800d71a:	ee00 3a10 	vmov	s0, r3
 800d71e:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800d722:	ee30 0b05 	vadd.f64	d0, d0, d5
 800d726:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 800d72a:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 800d72e:	eea2 0b05 	vfma.f64	d0, d2, d5
 800d732:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 800d736:	eea2 5b03 	vfma.f64	d5, d2, d3
 800d73a:	eea6 0b05 	vfma.f64	d0, d6, d5
 800d73e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800d742:	eea7 0b06 	vfma.f64	d0, d7, d6
 800d746:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 800d74a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d74e:	ee10 3a90 	vmov	r3, s1
 800d752:	2500      	movs	r5, #0
 800d754:	0bda      	lsrs	r2, r3, #15
 800d756:	2300      	movs	r3, #0
 800d758:	b292      	uxth	r2, r2
 800d75a:	f248 04be 	movw	r4, #32958	; 0x80be
 800d75e:	429d      	cmp	r5, r3
 800d760:	bf08      	it	eq
 800d762:	4294      	cmpeq	r4, r2
 800d764:	f080 8094 	bcs.w	800d890 <powf+0x1e0>
 800d768:	ed9f 7b65 	vldr	d7, [pc, #404]	; 800d900 <powf+0x250>
 800d76c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d774:	dd76      	ble.n	800d864 <powf+0x1b4>
 800d776:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800d77a:	f001 bdef 	b.w	800f35c <__math_oflowf>
 800d77e:	4298      	cmp	r0, r3
 800d780:	d92d      	bls.n	800d7de <powf+0x12e>
 800d782:	b952      	cbnz	r2, 800d79a <powf+0xea>
 800d784:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800d788:	005b      	lsls	r3, r3, #1
 800d78a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800d78e:	f240 80ae 	bls.w	800d8ee <powf+0x23e>
 800d792:	ee30 0a24 	vadd.f32	s0, s0, s9
 800d796:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800d79a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800d79e:	d105      	bne.n	800d7ac <powf+0xfc>
 800d7a0:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800d7a4:	0064      	lsls	r4, r4, #1
 800d7a6:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800d7aa:	e7f0      	b.n	800d78e <powf+0xde>
 800d7ac:	004b      	lsls	r3, r1, #1
 800d7ae:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800d7b2:	d8ee      	bhi.n	800d792 <powf+0xe2>
 800d7b4:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800d7b8:	d1eb      	bne.n	800d792 <powf+0xe2>
 800d7ba:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d7be:	f000 8096 	beq.w	800d8ee <powf+0x23e>
 800d7c2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d7c6:	ea6f 0404 	mvn.w	r4, r4
 800d7ca:	bf34      	ite	cc
 800d7cc:	2300      	movcc	r3, #0
 800d7ce:	2301      	movcs	r3, #1
 800d7d0:	0fe4      	lsrs	r4, r4, #31
 800d7d2:	42a3      	cmp	r3, r4
 800d7d4:	f040 808e 	bne.w	800d8f4 <powf+0x244>
 800d7d8:	ee24 0aa4 	vmul.f32	s0, s9, s9
 800d7dc:	e7db      	b.n	800d796 <powf+0xe6>
 800d7de:	004d      	lsls	r5, r1, #1
 800d7e0:	1e6a      	subs	r2, r5, #1
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d91b      	bls.n	800d81e <powf+0x16e>
 800d7e6:	2900      	cmp	r1, #0
 800d7e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d7ec:	da0e      	bge.n	800d80c <powf+0x15c>
 800d7ee:	ee10 0a90 	vmov	r0, s1
 800d7f2:	f7ff ff45 	bl	800d680 <checkint>
 800d7f6:	2801      	cmp	r0, #1
 800d7f8:	d108      	bne.n	800d80c <powf+0x15c>
 800d7fa:	eeb1 0a40 	vneg.f32	s0, s0
 800d7fe:	b93d      	cbnz	r5, 800d810 <powf+0x160>
 800d800:	2c00      	cmp	r4, #0
 800d802:	dac8      	bge.n	800d796 <powf+0xe6>
 800d804:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800d808:	f001 bdae 	b.w	800f368 <__math_divzerof>
 800d80c:	2000      	movs	r0, #0
 800d80e:	e7f6      	b.n	800d7fe <powf+0x14e>
 800d810:	2c00      	cmp	r4, #0
 800d812:	dac0      	bge.n	800d796 <powf+0xe6>
 800d814:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d818:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d81c:	e7bb      	b.n	800d796 <powf+0xe6>
 800d81e:	2900      	cmp	r1, #0
 800d820:	da1e      	bge.n	800d860 <powf+0x1b0>
 800d822:	ee10 0a90 	vmov	r0, s1
 800d826:	f7ff ff2b 	bl	800d680 <checkint>
 800d82a:	b918      	cbnz	r0, 800d834 <powf+0x184>
 800d82c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800d830:	f001 bdaa 	b.w	800f388 <__math_invalidf>
 800d834:	2801      	cmp	r0, #1
 800d836:	bf0c      	ite	eq
 800d838:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800d83c:	2000      	movne	r0, #0
 800d83e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d842:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800d846:	f4bf af47 	bcs.w	800d6d8 <powf+0x28>
 800d84a:	eddf 0a35 	vldr	s1, [pc, #212]	; 800d920 <powf+0x270>
 800d84e:	ee20 0a20 	vmul.f32	s0, s0, s1
 800d852:	ee10 3a10 	vmov	r3, s0
 800d856:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d85a:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800d85e:	e73b      	b.n	800d6d8 <powf+0x28>
 800d860:	2000      	movs	r0, #0
 800d862:	e7ee      	b.n	800d842 <powf+0x192>
 800d864:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800d908 <powf+0x258>
 800d868:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d870:	d803      	bhi.n	800d87a <powf+0x1ca>
 800d872:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800d876:	f001 bd65 	b.w	800f344 <__math_uflowf>
 800d87a:	ed9f 7b25 	vldr	d7, [pc, #148]	; 800d910 <powf+0x260>
 800d87e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d886:	d503      	bpl.n	800d890 <powf+0x1e0>
 800d888:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800d88c:	f001 bd60 	b.w	800f350 <__math_may_uflowf>
 800d890:	4924      	ldr	r1, [pc, #144]	; (800d924 <powf+0x274>)
 800d892:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 800d896:	ee30 6b07 	vadd.f64	d6, d0, d7
 800d89a:	ec55 4b16 	vmov	r4, r5, d6
 800d89e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d8a2:	f004 021f 	and.w	r2, r4, #31
 800d8a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d8aa:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 800d8ae:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d8b2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d8b6:	e9d2 6700 	ldrd	r6, r7, [r2]
 800d8ba:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d8be:	1824      	adds	r4, r4, r0
 800d8c0:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800d8c4:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	1982      	adds	r2, r0, r6
 800d8cc:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 800d8d0:	eb41 0307 	adc.w	r3, r1, r7
 800d8d4:	eea0 6b05 	vfma.f64	d6, d0, d5
 800d8d8:	ee20 0b00 	vmul.f64	d0, d0, d0
 800d8dc:	eea6 7b00 	vfma.f64	d7, d6, d0
 800d8e0:	ec43 2b16 	vmov	d6, r2, r3
 800d8e4:	ee27 0b06 	vmul.f64	d0, d7, d6
 800d8e8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d8ec:	e753      	b.n	800d796 <powf+0xe6>
 800d8ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d8f2:	e750      	b.n	800d796 <powf+0xe6>
 800d8f4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d928 <powf+0x278>
 800d8f8:	e74d      	b.n	800d796 <powf+0xe6>
 800d8fa:	bf00      	nop
 800d8fc:	f3af 8000 	nop.w
 800d900:	ffd1d571 	.word	0xffd1d571
 800d904:	405fffff 	.word	0x405fffff
 800d908:	00000000 	.word	0x00000000
 800d90c:	c062c000 	.word	0xc062c000
 800d910:	00000000 	.word	0x00000000
 800d914:	c062a000 	.word	0xc062a000
 800d918:	fefffffe 	.word	0xfefffffe
 800d91c:	08010160 	.word	0x08010160
 800d920:	4b000000 	.word	0x4b000000
 800d924:	0800fef8 	.word	0x0800fef8
 800d928:	00000000 	.word	0x00000000

0800d92c <tanf>:
 800d92c:	ee10 3a10 	vmov	r3, s0
 800d930:	b507      	push	{r0, r1, r2, lr}
 800d932:	4a10      	ldr	r2, [pc, #64]	; (800d974 <tanf+0x48>)
 800d934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d938:	4293      	cmp	r3, r2
 800d93a:	dc05      	bgt.n	800d948 <tanf+0x1c>
 800d93c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800d978 <tanf+0x4c>
 800d940:	2001      	movs	r0, #1
 800d942:	f001 fc01 	bl	800f148 <__kernel_tanf>
 800d946:	e004      	b.n	800d952 <tanf+0x26>
 800d948:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d94c:	db04      	blt.n	800d958 <tanf+0x2c>
 800d94e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d952:	b003      	add	sp, #12
 800d954:	f85d fb04 	ldr.w	pc, [sp], #4
 800d958:	4668      	mov	r0, sp
 800d95a:	f000 ffd9 	bl	800e910 <__ieee754_rem_pio2f>
 800d95e:	0040      	lsls	r0, r0, #1
 800d960:	f000 0002 	and.w	r0, r0, #2
 800d964:	f1c0 0001 	rsb	r0, r0, #1
 800d968:	eddd 0a01 	vldr	s1, [sp, #4]
 800d96c:	ed9d 0a00 	vldr	s0, [sp]
 800d970:	e7e7      	b.n	800d942 <tanf+0x16>
 800d972:	bf00      	nop
 800d974:	3f490fda 	.word	0x3f490fda
 800d978:	00000000 	.word	0x00000000

0800d97c <tanhf>:
 800d97c:	b510      	push	{r4, lr}
 800d97e:	ee10 4a10 	vmov	r4, s0
 800d982:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d986:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d98a:	ed2d 8b02 	vpush	{d8}
 800d98e:	eef0 7a40 	vmov.f32	s15, s0
 800d992:	db0c      	blt.n	800d9ae <tanhf+0x32>
 800d994:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d998:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d99c:	2c00      	cmp	r4, #0
 800d99e:	bfac      	ite	ge
 800d9a0:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800d9a4:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800d9a8:	ecbd 8b02 	vpop	{d8}
 800d9ac:	bd10      	pop	{r4, pc}
 800d9ae:	4a1b      	ldr	r2, [pc, #108]	; (800da1c <tanhf+0xa0>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	dc30      	bgt.n	800da16 <tanhf+0x9a>
 800d9b4:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800d9b8:	da06      	bge.n	800d9c8 <tanhf+0x4c>
 800d9ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d9be:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d9c2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d9c6:	e7ef      	b.n	800d9a8 <tanhf+0x2c>
 800d9c8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d9cc:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800d9d0:	db12      	blt.n	800d9f8 <tanhf+0x7c>
 800d9d2:	f7ff fde5 	bl	800d5a0 <fabsf>
 800d9d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d9da:	f001 fe0b 	bl	800f5f4 <expm1f>
 800d9de:	ee30 0a08 	vadd.f32	s0, s0, s16
 800d9e2:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800d9e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d9ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d9ee:	2c00      	cmp	r4, #0
 800d9f0:	bfb8      	it	lt
 800d9f2:	eeb1 0a40 	vneglt.f32	s0, s0
 800d9f6:	e7d7      	b.n	800d9a8 <tanhf+0x2c>
 800d9f8:	f7ff fdd2 	bl	800d5a0 <fabsf>
 800d9fc:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800da00:	ee20 0a27 	vmul.f32	s0, s0, s15
 800da04:	f001 fdf6 	bl	800f5f4 <expm1f>
 800da08:	ee70 7a08 	vadd.f32	s15, s0, s16
 800da0c:	eeb1 7a40 	vneg.f32	s14, s0
 800da10:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800da14:	e7eb      	b.n	800d9ee <tanhf+0x72>
 800da16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800da1a:	e7e8      	b.n	800d9ee <tanhf+0x72>
 800da1c:	41afffff 	.word	0x41afffff

0800da20 <log>:
 800da20:	b500      	push	{lr}
 800da22:	ed2d 8b02 	vpush	{d8}
 800da26:	eeb0 8b40 	vmov.f64	d8, d0
 800da2a:	b08b      	sub	sp, #44	; 0x2c
 800da2c:	f000 fa74 	bl	800df18 <__ieee754_log>
 800da30:	4b2d      	ldr	r3, [pc, #180]	; (800dae8 <log+0xc8>)
 800da32:	f993 3000 	ldrsb.w	r3, [r3]
 800da36:	1c5a      	adds	r2, r3, #1
 800da38:	d051      	beq.n	800dade <log+0xbe>
 800da3a:	eeb4 8b48 	vcmp.f64	d8, d8
 800da3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da42:	d64c      	bvs.n	800dade <log+0xbe>
 800da44:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800da48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4c:	dc47      	bgt.n	800dade <log+0xbe>
 800da4e:	4a27      	ldr	r2, [pc, #156]	; (800daec <log+0xcc>)
 800da50:	9201      	str	r2, [sp, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	9208      	str	r2, [sp, #32]
 800da56:	ed8d 8b02 	vstr	d8, [sp, #8]
 800da5a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800da5e:	b993      	cbnz	r3, 800da86 <log+0x66>
 800da60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800da64:	4922      	ldr	r1, [pc, #136]	; (800daf0 <log+0xd0>)
 800da66:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800da6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800da72:	d025      	beq.n	800dac0 <log+0xa0>
 800da74:	2201      	movs	r2, #1
 800da76:	2b02      	cmp	r3, #2
 800da78:	9200      	str	r2, [sp, #0]
 800da7a:	d116      	bne.n	800daaa <log+0x8a>
 800da7c:	f7ff fc74 	bl	800d368 <__errno>
 800da80:	2321      	movs	r3, #33	; 0x21
 800da82:	6003      	str	r3, [r0, #0]
 800da84:	e016      	b.n	800dab4 <log+0x94>
 800da86:	491b      	ldr	r1, [pc, #108]	; (800daf4 <log+0xd4>)
 800da88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800da8c:	2000      	movs	r0, #0
 800da8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800da96:	d1ed      	bne.n	800da74 <log+0x54>
 800da98:	2202      	movs	r2, #2
 800da9a:	4293      	cmp	r3, r2
 800da9c:	9200      	str	r2, [sp, #0]
 800da9e:	d111      	bne.n	800dac4 <log+0xa4>
 800daa0:	f7ff fc62 	bl	800d368 <__errno>
 800daa4:	2322      	movs	r3, #34	; 0x22
 800daa6:	6003      	str	r3, [r0, #0]
 800daa8:	e011      	b.n	800dace <log+0xae>
 800daaa:	4668      	mov	r0, sp
 800daac:	f001 fc8c 	bl	800f3c8 <matherr>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d0e3      	beq.n	800da7c <log+0x5c>
 800dab4:	4810      	ldr	r0, [pc, #64]	; (800daf8 <log+0xd8>)
 800dab6:	f001 fc8b 	bl	800f3d0 <nan>
 800daba:	ed8d 0b06 	vstr	d0, [sp, #24]
 800dabe:	e006      	b.n	800dace <log+0xae>
 800dac0:	2302      	movs	r3, #2
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	4668      	mov	r0, sp
 800dac6:	f001 fc7f 	bl	800f3c8 <matherr>
 800daca:	2800      	cmp	r0, #0
 800dacc:	d0e8      	beq.n	800daa0 <log+0x80>
 800dace:	9b08      	ldr	r3, [sp, #32]
 800dad0:	b11b      	cbz	r3, 800dada <log+0xba>
 800dad2:	f7ff fc49 	bl	800d368 <__errno>
 800dad6:	9b08      	ldr	r3, [sp, #32]
 800dad8:	6003      	str	r3, [r0, #0]
 800dada:	ed9d 0b06 	vldr	d0, [sp, #24]
 800dade:	b00b      	add	sp, #44	; 0x2c
 800dae0:	ecbd 8b02 	vpop	{d8}
 800dae4:	f85d fb04 	ldr.w	pc, [sp], #4
 800dae8:	20000084 	.word	0x20000084
 800daec:	08010288 	.word	0x08010288
 800daf0:	c7efffff 	.word	0xc7efffff
 800daf4:	fff00000 	.word	0xfff00000
 800daf8:	08010296 	.word	0x08010296
 800dafc:	00000000 	.word	0x00000000

0800db00 <pow>:
 800db00:	b570      	push	{r4, r5, r6, lr}
 800db02:	ed2d 8b0a 	vpush	{d8-d12}
 800db06:	eeb0 9b40 	vmov.f64	d9, d0
 800db0a:	eeb0 8b41 	vmov.f64	d8, d1
 800db0e:	4c8c      	ldr	r4, [pc, #560]	; (800dd40 <pow+0x240>)
 800db10:	b08a      	sub	sp, #40	; 0x28
 800db12:	f000 fb1d 	bl	800e150 <__ieee754_pow>
 800db16:	f994 3000 	ldrsb.w	r3, [r4]
 800db1a:	eeb0 ab40 	vmov.f64	d10, d0
 800db1e:	1c5a      	adds	r2, r3, #1
 800db20:	4626      	mov	r6, r4
 800db22:	d04b      	beq.n	800dbbc <pow+0xbc>
 800db24:	eeb4 8b48 	vcmp.f64	d8, d8
 800db28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db2c:	d646      	bvs.n	800dbbc <pow+0xbc>
 800db2e:	eeb4 9b49 	vcmp.f64	d9, d9
 800db32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db36:	d719      	bvc.n	800db6c <pow+0x6c>
 800db38:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800db3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db40:	d13c      	bne.n	800dbbc <pow+0xbc>
 800db42:	2201      	movs	r2, #1
 800db44:	9200      	str	r2, [sp, #0]
 800db46:	497f      	ldr	r1, [pc, #508]	; (800dd44 <pow+0x244>)
 800db48:	4a7f      	ldr	r2, [pc, #508]	; (800dd48 <pow+0x248>)
 800db4a:	9201      	str	r2, [sp, #4]
 800db4c:	2000      	movs	r0, #0
 800db4e:	2200      	movs	r2, #0
 800db50:	2b02      	cmp	r3, #2
 800db52:	9208      	str	r2, [sp, #32]
 800db54:	ed8d 9b02 	vstr	d9, [sp, #8]
 800db58:	ed8d 8b04 	vstr	d8, [sp, #16]
 800db5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800db60:	d02a      	beq.n	800dbb8 <pow+0xb8>
 800db62:	4668      	mov	r0, sp
 800db64:	f001 fc30 	bl	800f3c8 <matherr>
 800db68:	bb00      	cbnz	r0, 800dbac <pow+0xac>
 800db6a:	e04e      	b.n	800dc0a <pow+0x10a>
 800db6c:	ed9f bb72 	vldr	d11, [pc, #456]	; 800dd38 <pow+0x238>
 800db70:	eeb4 9b4b 	vcmp.f64	d9, d11
 800db74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db78:	eeb0 cb4b 	vmov.f64	d12, d11
 800db7c:	d14a      	bne.n	800dc14 <pow+0x114>
 800db7e:	eeb4 8b4b 	vcmp.f64	d8, d11
 800db82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db86:	d11f      	bne.n	800dbc8 <pow+0xc8>
 800db88:	2201      	movs	r2, #1
 800db8a:	9200      	str	r2, [sp, #0]
 800db8c:	4a6e      	ldr	r2, [pc, #440]	; (800dd48 <pow+0x248>)
 800db8e:	9201      	str	r2, [sp, #4]
 800db90:	2200      	movs	r2, #0
 800db92:	9208      	str	r2, [sp, #32]
 800db94:	ed8d 9b02 	vstr	d9, [sp, #8]
 800db98:	ed8d 8b04 	vstr	d8, [sp, #16]
 800db9c:	ed8d bb06 	vstr	d11, [sp, #24]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d0de      	beq.n	800db62 <pow+0x62>
 800dba4:	4b67      	ldr	r3, [pc, #412]	; (800dd44 <pow+0x244>)
 800dba6:	2200      	movs	r2, #0
 800dba8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dbac:	9b08      	ldr	r3, [sp, #32]
 800dbae:	b11b      	cbz	r3, 800dbb8 <pow+0xb8>
 800dbb0:	f7ff fbda 	bl	800d368 <__errno>
 800dbb4:	9b08      	ldr	r3, [sp, #32]
 800dbb6:	6003      	str	r3, [r0, #0]
 800dbb8:	ed9d ab06 	vldr	d10, [sp, #24]
 800dbbc:	eeb0 0b4a 	vmov.f64	d0, d10
 800dbc0:	b00a      	add	sp, #40	; 0x28
 800dbc2:	ecbd 8b0a 	vpop	{d8-d12}
 800dbc6:	bd70      	pop	{r4, r5, r6, pc}
 800dbc8:	eeb0 0b48 	vmov.f64	d0, d8
 800dbcc:	f001 fbf4 	bl	800f3b8 <finite>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d0f3      	beq.n	800dbbc <pow+0xbc>
 800dbd4:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800dbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbdc:	d5ee      	bpl.n	800dbbc <pow+0xbc>
 800dbde:	2301      	movs	r3, #1
 800dbe0:	9300      	str	r3, [sp, #0]
 800dbe2:	4b59      	ldr	r3, [pc, #356]	; (800dd48 <pow+0x248>)
 800dbe4:	9301      	str	r3, [sp, #4]
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	9308      	str	r3, [sp, #32]
 800dbea:	f994 3000 	ldrsb.w	r3, [r4]
 800dbee:	ed8d 9b02 	vstr	d9, [sp, #8]
 800dbf2:	ed8d 8b04 	vstr	d8, [sp, #16]
 800dbf6:	b913      	cbnz	r3, 800dbfe <pow+0xfe>
 800dbf8:	ed8d bb06 	vstr	d11, [sp, #24]
 800dbfc:	e7b1      	b.n	800db62 <pow+0x62>
 800dbfe:	4953      	ldr	r1, [pc, #332]	; (800dd4c <pow+0x24c>)
 800dc00:	2000      	movs	r0, #0
 800dc02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dc06:	2b02      	cmp	r3, #2
 800dc08:	d1ab      	bne.n	800db62 <pow+0x62>
 800dc0a:	f7ff fbad 	bl	800d368 <__errno>
 800dc0e:	2321      	movs	r3, #33	; 0x21
 800dc10:	6003      	str	r3, [r0, #0]
 800dc12:	e7cb      	b.n	800dbac <pow+0xac>
 800dc14:	f001 fbd0 	bl	800f3b8 <finite>
 800dc18:	4605      	mov	r5, r0
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d164      	bne.n	800dce8 <pow+0x1e8>
 800dc1e:	eeb0 0b49 	vmov.f64	d0, d9
 800dc22:	f001 fbc9 	bl	800f3b8 <finite>
 800dc26:	2800      	cmp	r0, #0
 800dc28:	d05e      	beq.n	800dce8 <pow+0x1e8>
 800dc2a:	eeb0 0b48 	vmov.f64	d0, d8
 800dc2e:	f001 fbc3 	bl	800f3b8 <finite>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d058      	beq.n	800dce8 <pow+0x1e8>
 800dc36:	eeb4 ab4a 	vcmp.f64	d10, d10
 800dc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc3e:	f994 3000 	ldrsb.w	r3, [r4]
 800dc42:	4a41      	ldr	r2, [pc, #260]	; (800dd48 <pow+0x248>)
 800dc44:	d70e      	bvc.n	800dc64 <pow+0x164>
 800dc46:	2101      	movs	r1, #1
 800dc48:	e9cd 1200 	strd	r1, r2, [sp]
 800dc4c:	9508      	str	r5, [sp, #32]
 800dc4e:	ed8d 9b02 	vstr	d9, [sp, #8]
 800dc52:	ed8d 8b04 	vstr	d8, [sp, #16]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d0ce      	beq.n	800dbf8 <pow+0xf8>
 800dc5a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800dc5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dc62:	e7d0      	b.n	800dc06 <pow+0x106>
 800dc64:	2103      	movs	r1, #3
 800dc66:	ed8d 8b04 	vstr	d8, [sp, #16]
 800dc6a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dc6e:	ee28 8b07 	vmul.f64	d8, d8, d7
 800dc72:	e9cd 1200 	strd	r1, r2, [sp]
 800dc76:	9508      	str	r5, [sp, #32]
 800dc78:	ed8d 9b02 	vstr	d9, [sp, #8]
 800dc7c:	b9fb      	cbnz	r3, 800dcbe <pow+0x1be>
 800dc7e:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800dc82:	4b33      	ldr	r3, [pc, #204]	; (800dd50 <pow+0x250>)
 800dc84:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800dc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dc90:	d54b      	bpl.n	800dd2a <pow+0x22a>
 800dc92:	eeb0 0b48 	vmov.f64	d0, d8
 800dc96:	f001 fba3 	bl	800f3e0 <rint>
 800dc9a:	eeb4 0b48 	vcmp.f64	d0, d8
 800dc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dca2:	d004      	beq.n	800dcae <pow+0x1ae>
 800dca4:	4b2b      	ldr	r3, [pc, #172]	; (800dd54 <pow+0x254>)
 800dca6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800dcaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dcae:	f996 3000 	ldrsb.w	r3, [r6]
 800dcb2:	2b02      	cmp	r3, #2
 800dcb4:	d139      	bne.n	800dd2a <pow+0x22a>
 800dcb6:	f7ff fb57 	bl	800d368 <__errno>
 800dcba:	2322      	movs	r3, #34	; 0x22
 800dcbc:	e7a8      	b.n	800dc10 <pow+0x110>
 800dcbe:	4b26      	ldr	r3, [pc, #152]	; (800dd58 <pow+0x258>)
 800dcc0:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dcce:	d5ee      	bpl.n	800dcae <pow+0x1ae>
 800dcd0:	eeb0 0b48 	vmov.f64	d0, d8
 800dcd4:	f001 fb84 	bl	800f3e0 <rint>
 800dcd8:	eeb4 0b48 	vcmp.f64	d0, d8
 800dcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce0:	d0e5      	beq.n	800dcae <pow+0x1ae>
 800dce2:	2200      	movs	r2, #0
 800dce4:	4b19      	ldr	r3, [pc, #100]	; (800dd4c <pow+0x24c>)
 800dce6:	e7e0      	b.n	800dcaa <pow+0x1aa>
 800dce8:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800dcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf0:	f47f af64 	bne.w	800dbbc <pow+0xbc>
 800dcf4:	eeb0 0b49 	vmov.f64	d0, d9
 800dcf8:	f001 fb5e 	bl	800f3b8 <finite>
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	f43f af5d 	beq.w	800dbbc <pow+0xbc>
 800dd02:	eeb0 0b48 	vmov.f64	d0, d8
 800dd06:	f001 fb57 	bl	800f3b8 <finite>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	f43f af56 	beq.w	800dbbc <pow+0xbc>
 800dd10:	2304      	movs	r3, #4
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	4b0c      	ldr	r3, [pc, #48]	; (800dd48 <pow+0x248>)
 800dd16:	9301      	str	r3, [sp, #4]
 800dd18:	2300      	movs	r3, #0
 800dd1a:	9308      	str	r3, [sp, #32]
 800dd1c:	ed8d 9b02 	vstr	d9, [sp, #8]
 800dd20:	ed8d 8b04 	vstr	d8, [sp, #16]
 800dd24:	ed8d cb06 	vstr	d12, [sp, #24]
 800dd28:	e7c1      	b.n	800dcae <pow+0x1ae>
 800dd2a:	4668      	mov	r0, sp
 800dd2c:	f001 fb4c 	bl	800f3c8 <matherr>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	f47f af3b 	bne.w	800dbac <pow+0xac>
 800dd36:	e7be      	b.n	800dcb6 <pow+0x1b6>
	...
 800dd40:	20000084 	.word	0x20000084
 800dd44:	3ff00000 	.word	0x3ff00000
 800dd48:	0801028c 	.word	0x0801028c
 800dd4c:	fff00000 	.word	0xfff00000
 800dd50:	47efffff 	.word	0x47efffff
 800dd54:	c7efffff 	.word	0xc7efffff
 800dd58:	7ff00000 	.word	0x7ff00000

0800dd5c <log10f>:
 800dd5c:	b500      	push	{lr}
 800dd5e:	ed2d 8b02 	vpush	{d8}
 800dd62:	b08b      	sub	sp, #44	; 0x2c
 800dd64:	eeb0 8a40 	vmov.f32	s16, s0
 800dd68:	f000 fd7c 	bl	800e864 <__ieee754_log10f>
 800dd6c:	4b2f      	ldr	r3, [pc, #188]	; (800de2c <log10f+0xd0>)
 800dd6e:	f993 3000 	ldrsb.w	r3, [r3]
 800dd72:	1c5a      	adds	r2, r3, #1
 800dd74:	d055      	beq.n	800de22 <log10f+0xc6>
 800dd76:	eeb4 8a48 	vcmp.f32	s16, s16
 800dd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd7e:	d650      	bvs.n	800de22 <log10f+0xc6>
 800dd80:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dd84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd88:	d84b      	bhi.n	800de22 <log10f+0xc6>
 800dd8a:	4a29      	ldr	r2, [pc, #164]	; (800de30 <log10f+0xd4>)
 800dd8c:	9201      	str	r2, [sp, #4]
 800dd8e:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 800dd92:	2200      	movs	r2, #0
 800dd94:	9208      	str	r2, [sp, #32]
 800dd96:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dd9a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dd9e:	b993      	cbnz	r3, 800ddc6 <log10f+0x6a>
 800dda0:	4924      	ldr	r1, [pc, #144]	; (800de34 <log10f+0xd8>)
 800dda2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800dda6:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800ddaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ddb2:	d025      	beq.n	800de00 <log10f+0xa4>
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	9200      	str	r2, [sp, #0]
 800ddba:	d116      	bne.n	800ddea <log10f+0x8e>
 800ddbc:	f7ff fad4 	bl	800d368 <__errno>
 800ddc0:	2321      	movs	r3, #33	; 0x21
 800ddc2:	6003      	str	r3, [r0, #0]
 800ddc4:	e016      	b.n	800ddf4 <log10f+0x98>
 800ddc6:	491c      	ldr	r1, [pc, #112]	; (800de38 <log10f+0xdc>)
 800ddc8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ddcc:	2000      	movs	r0, #0
 800ddce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddd2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ddd6:	d1ed      	bne.n	800ddb4 <log10f+0x58>
 800ddd8:	2202      	movs	r2, #2
 800ddda:	4293      	cmp	r3, r2
 800dddc:	9200      	str	r2, [sp, #0]
 800ddde:	d111      	bne.n	800de04 <log10f+0xa8>
 800dde0:	f7ff fac2 	bl	800d368 <__errno>
 800dde4:	2322      	movs	r3, #34	; 0x22
 800dde6:	6003      	str	r3, [r0, #0]
 800dde8:	e011      	b.n	800de0e <log10f+0xb2>
 800ddea:	4668      	mov	r0, sp
 800ddec:	f001 faec 	bl	800f3c8 <matherr>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d0e3      	beq.n	800ddbc <log10f+0x60>
 800ddf4:	4811      	ldr	r0, [pc, #68]	; (800de3c <log10f+0xe0>)
 800ddf6:	f001 faeb 	bl	800f3d0 <nan>
 800ddfa:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ddfe:	e006      	b.n	800de0e <log10f+0xb2>
 800de00:	2302      	movs	r3, #2
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	4668      	mov	r0, sp
 800de06:	f001 fadf 	bl	800f3c8 <matherr>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	d0e8      	beq.n	800dde0 <log10f+0x84>
 800de0e:	9b08      	ldr	r3, [sp, #32]
 800de10:	b11b      	cbz	r3, 800de1a <log10f+0xbe>
 800de12:	f7ff faa9 	bl	800d368 <__errno>
 800de16:	9b08      	ldr	r3, [sp, #32]
 800de18:	6003      	str	r3, [r0, #0]
 800de1a:	ed9d 0b06 	vldr	d0, [sp, #24]
 800de1e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800de22:	b00b      	add	sp, #44	; 0x2c
 800de24:	ecbd 8b02 	vpop	{d8}
 800de28:	f85d fb04 	ldr.w	pc, [sp], #4
 800de2c:	20000084 	.word	0x20000084
 800de30:	08010290 	.word	0x08010290
 800de34:	c7efffff 	.word	0xc7efffff
 800de38:	fff00000 	.word	0xfff00000
 800de3c:	08010296 	.word	0x08010296

0800de40 <sinhf>:
 800de40:	b530      	push	{r4, r5, lr}
 800de42:	ed2d 8b02 	vpush	{d8}
 800de46:	4c32      	ldr	r4, [pc, #200]	; (800df10 <sinhf+0xd0>)
 800de48:	b08b      	sub	sp, #44	; 0x2c
 800de4a:	eef0 8a40 	vmov.f32	s17, s0
 800de4e:	f000 fe8b 	bl	800eb68 <__ieee754_sinhf>
 800de52:	f994 3000 	ldrsb.w	r3, [r4]
 800de56:	3301      	adds	r3, #1
 800de58:	eeb0 8a40 	vmov.f32	s16, s0
 800de5c:	d030      	beq.n	800dec0 <sinhf+0x80>
 800de5e:	f001 fcf3 	bl	800f848 <finitef>
 800de62:	4605      	mov	r5, r0
 800de64:	bb60      	cbnz	r0, 800dec0 <sinhf+0x80>
 800de66:	eeb0 0a68 	vmov.f32	s0, s17
 800de6a:	f001 fced 	bl	800f848 <finitef>
 800de6e:	b338      	cbz	r0, 800dec0 <sinhf+0x80>
 800de70:	2303      	movs	r3, #3
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	4b27      	ldr	r3, [pc, #156]	; (800df14 <sinhf+0xd4>)
 800de76:	9301      	str	r3, [sp, #4]
 800de78:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 800de7c:	f994 3000 	ldrsb.w	r3, [r4]
 800de80:	9508      	str	r5, [sp, #32]
 800de82:	ed8d 7b04 	vstr	d7, [sp, #16]
 800de86:	ed8d 7b02 	vstr	d7, [sp, #8]
 800de8a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800de8e:	b9eb      	cbnz	r3, 800decc <sinhf+0x8c>
 800de90:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800def0 <sinhf+0xb0>
 800de94:	ed9f 6b18 	vldr	d6, [pc, #96]	; 800def8 <sinhf+0xb8>
 800de98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de9c:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800dea0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dea4:	4668      	mov	r0, sp
 800dea6:	f001 fa8f 	bl	800f3c8 <matherr>
 800deaa:	b1d8      	cbz	r0, 800dee4 <sinhf+0xa4>
 800deac:	9b08      	ldr	r3, [sp, #32]
 800deae:	b11b      	cbz	r3, 800deb8 <sinhf+0x78>
 800deb0:	f7ff fa5a 	bl	800d368 <__errno>
 800deb4:	9b08      	ldr	r3, [sp, #32]
 800deb6:	6003      	str	r3, [r0, #0]
 800deb8:	ed9d 8b06 	vldr	d8, [sp, #24]
 800debc:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 800dec0:	eeb0 0a48 	vmov.f32	s0, s16
 800dec4:	b00b      	add	sp, #44	; 0x2c
 800dec6:	ecbd 8b02 	vpop	{d8}
 800deca:	bd30      	pop	{r4, r5, pc}
 800decc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800df00 <sinhf+0xc0>
 800ded0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800df08 <sinhf+0xc8>
 800ded4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ded8:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800dedc:	2b02      	cmp	r3, #2
 800dede:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dee2:	d1df      	bne.n	800dea4 <sinhf+0x64>
 800dee4:	f7ff fa40 	bl	800d368 <__errno>
 800dee8:	2322      	movs	r3, #34	; 0x22
 800deea:	6003      	str	r3, [r0, #0]
 800deec:	e7de      	b.n	800deac <sinhf+0x6c>
 800deee:	bf00      	nop
 800def0:	e0000000 	.word	0xe0000000
 800def4:	47efffff 	.word	0x47efffff
 800def8:	e0000000 	.word	0xe0000000
 800defc:	c7efffff 	.word	0xc7efffff
 800df00:	00000000 	.word	0x00000000
 800df04:	7ff00000 	.word	0x7ff00000
 800df08:	00000000 	.word	0x00000000
 800df0c:	fff00000 	.word	0xfff00000
 800df10:	20000084 	.word	0x20000084
 800df14:	08010297 	.word	0x08010297

0800df18 <__ieee754_log>:
 800df18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df1a:	ed8d 0b00 	vstr	d0, [sp]
 800df1e:	9a01      	ldr	r2, [sp, #4]
 800df20:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800df24:	da26      	bge.n	800df74 <__ieee754_log+0x5c>
 800df26:	9900      	ldr	r1, [sp, #0]
 800df28:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800df2c:	430b      	orrs	r3, r1
 800df2e:	d107      	bne.n	800df40 <__ieee754_log+0x28>
 800df30:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800e0e0 <__ieee754_log+0x1c8>
 800df34:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 800e0e8 <__ieee754_log+0x1d0>
 800df38:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800df3c:	b003      	add	sp, #12
 800df3e:	bd30      	pop	{r4, r5, pc}
 800df40:	2a00      	cmp	r2, #0
 800df42:	da04      	bge.n	800df4e <__ieee754_log+0x36>
 800df44:	ed9d 7b00 	vldr	d7, [sp]
 800df48:	ee37 6b47 	vsub.f64	d6, d7, d7
 800df4c:	e7f2      	b.n	800df34 <__ieee754_log+0x1c>
 800df4e:	ed9d 6b00 	vldr	d6, [sp]
 800df52:	ed9f 7b67 	vldr	d7, [pc, #412]	; 800e0f0 <__ieee754_log+0x1d8>
 800df56:	ee26 7b07 	vmul.f64	d7, d6, d7
 800df5a:	ed8d 7b00 	vstr	d7, [sp]
 800df5e:	9a01      	ldr	r2, [sp, #4]
 800df60:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800df64:	4b78      	ldr	r3, [pc, #480]	; (800e148 <__ieee754_log+0x230>)
 800df66:	429a      	cmp	r2, r3
 800df68:	dd06      	ble.n	800df78 <__ieee754_log+0x60>
 800df6a:	ed9d 7b00 	vldr	d7, [sp]
 800df6e:	ee37 0b07 	vadd.f64	d0, d7, d7
 800df72:	e7e3      	b.n	800df3c <__ieee754_log+0x24>
 800df74:	2100      	movs	r1, #0
 800df76:	e7f5      	b.n	800df64 <__ieee754_log+0x4c>
 800df78:	1513      	asrs	r3, r2, #20
 800df7a:	f3c2 0013 	ubfx	r0, r2, #0, #20
 800df7e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800df82:	4419      	add	r1, r3
 800df84:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 800df88:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800df8c:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 800df90:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 800df94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df98:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800df9c:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 800dfa0:	ea45 0300 	orr.w	r3, r5, r0
 800dfa4:	ec43 2b10 	vmov	d0, r2, r3
 800dfa8:	1c82      	adds	r2, r0, #2
 800dfaa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800dfae:	2a02      	cmp	r2, #2
 800dfb0:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 800dfb4:	ee30 0b47 	vsub.f64	d0, d0, d7
 800dfb8:	dc31      	bgt.n	800e01e <__ieee754_log+0x106>
 800dfba:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800dfbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfc2:	d10f      	bne.n	800dfe4 <__ieee754_log+0xcc>
 800dfc4:	2c00      	cmp	r4, #0
 800dfc6:	f000 8086 	beq.w	800e0d6 <__ieee754_log+0x1be>
 800dfca:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e0f8 <__ieee754_log+0x1e0>
 800dfce:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 800e100 <__ieee754_log+0x1e8>
 800dfd2:	ee07 4a90 	vmov	s15, r4
 800dfd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dfda:	ee27 0b00 	vmul.f64	d0, d7, d0
 800dfde:	eea7 0b06 	vfma.f64	d0, d7, d6
 800dfe2:	e7ab      	b.n	800df3c <__ieee754_log+0x24>
 800dfe4:	ed9f 7b48 	vldr	d7, [pc, #288]	; 800e108 <__ieee754_log+0x1f0>
 800dfe8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800dfec:	eea0 6b47 	vfms.f64	d6, d0, d7
 800dff0:	ee20 7b00 	vmul.f64	d7, d0, d0
 800dff4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dff8:	b914      	cbnz	r4, 800e000 <__ieee754_log+0xe8>
 800dffa:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dffe:	e79d      	b.n	800df3c <__ieee754_log+0x24>
 800e000:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 800e0f8 <__ieee754_log+0x1e0>
 800e004:	ee07 4a90 	vmov	s15, r4
 800e008:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e00c:	eea7 6b45 	vfms.f64	d6, d7, d5
 800e010:	ee36 0b40 	vsub.f64	d0, d6, d0
 800e014:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800e100 <__ieee754_log+0x1e8>
 800e018:	ee97 0b06 	vfnms.f64	d0, d7, d6
 800e01c:	e78e      	b.n	800df3c <__ieee754_log+0x24>
 800e01e:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e022:	ee30 7b07 	vadd.f64	d7, d0, d7
 800e026:	ee80 4b07 	vdiv.f64	d4, d0, d7
 800e02a:	ee07 4a90 	vmov	s15, r4
 800e02e:	ee24 2b04 	vmul.f64	d2, d4, d4
 800e032:	ed9f 3b37 	vldr	d3, [pc, #220]	; 800e110 <__ieee754_log+0x1f8>
 800e036:	ee22 5b02 	vmul.f64	d5, d2, d2
 800e03a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e03e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800e118 <__ieee754_log+0x200>
 800e042:	eea5 7b03 	vfma.f64	d7, d5, d3
 800e046:	ed9f 3b36 	vldr	d3, [pc, #216]	; 800e120 <__ieee754_log+0x208>
 800e04a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800e128 <__ieee754_log+0x210>
 800e04e:	eea7 3b05 	vfma.f64	d3, d7, d5
 800e052:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800e130 <__ieee754_log+0x218>
 800e056:	eea5 7b01 	vfma.f64	d7, d5, d1
 800e05a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800e138 <__ieee754_log+0x220>
 800e05e:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 800e062:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 800e066:	eea7 1b05 	vfma.f64	d1, d7, d5
 800e06a:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 800e06e:	ed9f 7b34 	vldr	d7, [pc, #208]	; 800e140 <__ieee754_log+0x228>
 800e072:	3251      	adds	r2, #81	; 0x51
 800e074:	430a      	orrs	r2, r1
 800e076:	2a00      	cmp	r2, #0
 800e078:	eea1 7b05 	vfma.f64	d7, d1, d5
 800e07c:	ee27 7b02 	vmul.f64	d7, d7, d2
 800e080:	eea3 7b05 	vfma.f64	d7, d3, d5
 800e084:	dd1c      	ble.n	800e0c0 <__ieee754_log+0x1a8>
 800e086:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e08a:	ee20 5b05 	vmul.f64	d5, d0, d5
 800e08e:	ee25 5b00 	vmul.f64	d5, d5, d0
 800e092:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e096:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e09a:	b924      	cbnz	r4, 800e0a6 <__ieee754_log+0x18e>
 800e09c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e0a0:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e0a4:	e74a      	b.n	800df3c <__ieee754_log+0x24>
 800e0a6:	ed9f 4b14 	vldr	d4, [pc, #80]	; 800e0f8 <__ieee754_log+0x1e0>
 800e0aa:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e0ae:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e0b2:	ee37 0b40 	vsub.f64	d0, d7, d0
 800e0b6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800e100 <__ieee754_log+0x1e8>
 800e0ba:	ee96 0b07 	vfnms.f64	d0, d6, d7
 800e0be:	e73d      	b.n	800df3c <__ieee754_log+0x24>
 800e0c0:	ee30 7b47 	vsub.f64	d7, d0, d7
 800e0c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e0c8:	2c00      	cmp	r4, #0
 800e0ca:	d0e9      	beq.n	800e0a0 <__ieee754_log+0x188>
 800e0cc:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 800e0f8 <__ieee754_log+0x1e0>
 800e0d0:	eea6 7b45 	vfms.f64	d7, d6, d5
 800e0d4:	e7ed      	b.n	800e0b2 <__ieee754_log+0x19a>
 800e0d6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 800e0e8 <__ieee754_log+0x1d0>
 800e0da:	e72f      	b.n	800df3c <__ieee754_log+0x24>
 800e0dc:	f3af 8000 	nop.w
 800e0e0:	00000000 	.word	0x00000000
 800e0e4:	c3500000 	.word	0xc3500000
	...
 800e0f4:	43500000 	.word	0x43500000
 800e0f8:	35793c76 	.word	0x35793c76
 800e0fc:	3dea39ef 	.word	0x3dea39ef
 800e100:	fee00000 	.word	0xfee00000
 800e104:	3fe62e42 	.word	0x3fe62e42
 800e108:	55555555 	.word	0x55555555
 800e10c:	3fd55555 	.word	0x3fd55555
 800e110:	d078c69f 	.word	0xd078c69f
 800e114:	3fc39a09 	.word	0x3fc39a09
 800e118:	1d8e78af 	.word	0x1d8e78af
 800e11c:	3fcc71c5 	.word	0x3fcc71c5
 800e120:	9997fa04 	.word	0x9997fa04
 800e124:	3fd99999 	.word	0x3fd99999
 800e128:	df3e5244 	.word	0xdf3e5244
 800e12c:	3fc2f112 	.word	0x3fc2f112
 800e130:	96cb03de 	.word	0x96cb03de
 800e134:	3fc74664 	.word	0x3fc74664
 800e138:	94229359 	.word	0x94229359
 800e13c:	3fd24924 	.word	0x3fd24924
 800e140:	55555593 	.word	0x55555593
 800e144:	3fe55555 	.word	0x3fe55555
 800e148:	7fefffff 	.word	0x7fefffff
 800e14c:	00000000 	.word	0x00000000

0800e150 <__ieee754_pow>:
 800e150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	ec57 6b11 	vmov	r6, r7, d1
 800e158:	ed2d 8b02 	vpush	{d8}
 800e15c:	eeb0 8b40 	vmov.f64	d8, d0
 800e160:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e164:	ea58 0306 	orrs.w	r3, r8, r6
 800e168:	b085      	sub	sp, #20
 800e16a:	46b9      	mov	r9, r7
 800e16c:	ee11 2a10 	vmov	r2, s2
 800e170:	f000 8306 	beq.w	800e780 <__ieee754_pow+0x630>
 800e174:	ee18 aa90 	vmov	sl, s17
 800e178:	4bb9      	ldr	r3, [pc, #740]	; (800e460 <__ieee754_pow+0x310>)
 800e17a:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800e17e:	429c      	cmp	r4, r3
 800e180:	ee10 ba10 	vmov	fp, s0
 800e184:	dc0b      	bgt.n	800e19e <__ieee754_pow+0x4e>
 800e186:	d105      	bne.n	800e194 <__ieee754_pow+0x44>
 800e188:	f1bb 0f00 	cmp.w	fp, #0
 800e18c:	d107      	bne.n	800e19e <__ieee754_pow+0x4e>
 800e18e:	45a0      	cmp	r8, r4
 800e190:	dc0d      	bgt.n	800e1ae <__ieee754_pow+0x5e>
 800e192:	e001      	b.n	800e198 <__ieee754_pow+0x48>
 800e194:	4598      	cmp	r8, r3
 800e196:	dc02      	bgt.n	800e19e <__ieee754_pow+0x4e>
 800e198:	4598      	cmp	r8, r3
 800e19a:	d110      	bne.n	800e1be <__ieee754_pow+0x6e>
 800e19c:	b17a      	cbz	r2, 800e1be <__ieee754_pow+0x6e>
 800e19e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e1a2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e1a6:	ea54 030b 	orrs.w	r3, r4, fp
 800e1aa:	f000 82e9 	beq.w	800e780 <__ieee754_pow+0x630>
 800e1ae:	48ad      	ldr	r0, [pc, #692]	; (800e464 <__ieee754_pow+0x314>)
 800e1b0:	b005      	add	sp, #20
 800e1b2:	ecbd 8b02 	vpop	{d8}
 800e1b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ba:	f001 b909 	b.w	800f3d0 <nan>
 800e1be:	f1ba 0f00 	cmp.w	sl, #0
 800e1c2:	da4e      	bge.n	800e262 <__ieee754_pow+0x112>
 800e1c4:	4ba8      	ldr	r3, [pc, #672]	; (800e468 <__ieee754_pow+0x318>)
 800e1c6:	4598      	cmp	r8, r3
 800e1c8:	dc49      	bgt.n	800e25e <__ieee754_pow+0x10e>
 800e1ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e1ce:	4598      	cmp	r8, r3
 800e1d0:	dd47      	ble.n	800e262 <__ieee754_pow+0x112>
 800e1d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e1d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e1da:	2b14      	cmp	r3, #20
 800e1dc:	dd24      	ble.n	800e228 <__ieee754_pow+0xd8>
 800e1de:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e1e2:	fa22 f503 	lsr.w	r5, r2, r3
 800e1e6:	fa05 f303 	lsl.w	r3, r5, r3
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d139      	bne.n	800e262 <__ieee754_pow+0x112>
 800e1ee:	f005 0501 	and.w	r5, r5, #1
 800e1f2:	f1c5 0502 	rsb	r5, r5, #2
 800e1f6:	2a00      	cmp	r2, #0
 800e1f8:	d15a      	bne.n	800e2b0 <__ieee754_pow+0x160>
 800e1fa:	4b99      	ldr	r3, [pc, #612]	; (800e460 <__ieee754_pow+0x310>)
 800e1fc:	4598      	cmp	r8, r3
 800e1fe:	d122      	bne.n	800e246 <__ieee754_pow+0xf6>
 800e200:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e204:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e208:	ea53 030b 	orrs.w	r3, r3, fp
 800e20c:	f000 82b8 	beq.w	800e780 <__ieee754_pow+0x630>
 800e210:	4b96      	ldr	r3, [pc, #600]	; (800e46c <__ieee754_pow+0x31c>)
 800e212:	429c      	cmp	r4, r3
 800e214:	dd27      	ble.n	800e266 <__ieee754_pow+0x116>
 800e216:	f1b9 0f00 	cmp.w	r9, #0
 800e21a:	f280 82b4 	bge.w	800e786 <__ieee754_pow+0x636>
 800e21e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 800e430 <__ieee754_pow+0x2e0>
 800e222:	ed8d 7b00 	vstr	d7, [sp]
 800e226:	e026      	b.n	800e276 <__ieee754_pow+0x126>
 800e228:	2a00      	cmp	r2, #0
 800e22a:	d140      	bne.n	800e2ae <__ieee754_pow+0x15e>
 800e22c:	f1c3 0314 	rsb	r3, r3, #20
 800e230:	fa48 f503 	asr.w	r5, r8, r3
 800e234:	fa05 f303 	lsl.w	r3, r5, r3
 800e238:	4543      	cmp	r3, r8
 800e23a:	f040 82aa 	bne.w	800e792 <__ieee754_pow+0x642>
 800e23e:	f005 0501 	and.w	r5, r5, #1
 800e242:	f1c5 0502 	rsb	r5, r5, #2
 800e246:	4b8a      	ldr	r3, [pc, #552]	; (800e470 <__ieee754_pow+0x320>)
 800e248:	4598      	cmp	r8, r3
 800e24a:	d11b      	bne.n	800e284 <__ieee754_pow+0x134>
 800e24c:	f1b9 0f00 	cmp.w	r9, #0
 800e250:	f280 829c 	bge.w	800e78c <__ieee754_pow+0x63c>
 800e254:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e258:	ee87 7b08 	vdiv.f64	d7, d7, d8
 800e25c:	e7e1      	b.n	800e222 <__ieee754_pow+0xd2>
 800e25e:	2502      	movs	r5, #2
 800e260:	e7c9      	b.n	800e1f6 <__ieee754_pow+0xa6>
 800e262:	2500      	movs	r5, #0
 800e264:	e7c7      	b.n	800e1f6 <__ieee754_pow+0xa6>
 800e266:	f1b9 0f00 	cmp.w	r9, #0
 800e26a:	dad8      	bge.n	800e21e <__ieee754_pow+0xce>
 800e26c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 800e270:	4633      	mov	r3, r6
 800e272:	e9cd 3400 	strd	r3, r4, [sp]
 800e276:	ed9d 0b00 	vldr	d0, [sp]
 800e27a:	b005      	add	sp, #20
 800e27c:	ecbd 8b02 	vpop	{d8}
 800e280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e284:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e288:	d102      	bne.n	800e290 <__ieee754_pow+0x140>
 800e28a:	ee28 7b08 	vmul.f64	d7, d8, d8
 800e28e:	e7c8      	b.n	800e222 <__ieee754_pow+0xd2>
 800e290:	4b78      	ldr	r3, [pc, #480]	; (800e474 <__ieee754_pow+0x324>)
 800e292:	4599      	cmp	r9, r3
 800e294:	d10c      	bne.n	800e2b0 <__ieee754_pow+0x160>
 800e296:	f1ba 0f00 	cmp.w	sl, #0
 800e29a:	db09      	blt.n	800e2b0 <__ieee754_pow+0x160>
 800e29c:	eeb0 0b48 	vmov.f64	d0, d8
 800e2a0:	b005      	add	sp, #20
 800e2a2:	ecbd 8b02 	vpop	{d8}
 800e2a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2aa:	f000 bad7 	b.w	800e85c <__ieee754_sqrt>
 800e2ae:	2500      	movs	r5, #0
 800e2b0:	eeb0 0b48 	vmov.f64	d0, d8
 800e2b4:	f001 f877 	bl	800f3a6 <fabs>
 800e2b8:	ed8d 0b00 	vstr	d0, [sp]
 800e2bc:	f1bb 0f00 	cmp.w	fp, #0
 800e2c0:	d128      	bne.n	800e314 <__ieee754_pow+0x1c4>
 800e2c2:	b124      	cbz	r4, 800e2ce <__ieee754_pow+0x17e>
 800e2c4:	4b6a      	ldr	r3, [pc, #424]	; (800e470 <__ieee754_pow+0x320>)
 800e2c6:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d122      	bne.n	800e314 <__ieee754_pow+0x1c4>
 800e2ce:	f1b9 0f00 	cmp.w	r9, #0
 800e2d2:	da07      	bge.n	800e2e4 <__ieee754_pow+0x194>
 800e2d4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e2d8:	ed9d 6b00 	vldr	d6, [sp]
 800e2dc:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800e2e0:	ed8d 7b00 	vstr	d7, [sp]
 800e2e4:	f1ba 0f00 	cmp.w	sl, #0
 800e2e8:	dac5      	bge.n	800e276 <__ieee754_pow+0x126>
 800e2ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e2ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e2f2:	ea54 0305 	orrs.w	r3, r4, r5
 800e2f6:	d106      	bne.n	800e306 <__ieee754_pow+0x1b6>
 800e2f8:	ed9d 7b00 	vldr	d7, [sp]
 800e2fc:	ee37 7b47 	vsub.f64	d7, d7, d7
 800e300:	ee87 7b07 	vdiv.f64	d7, d7, d7
 800e304:	e78d      	b.n	800e222 <__ieee754_pow+0xd2>
 800e306:	2d01      	cmp	r5, #1
 800e308:	d1b5      	bne.n	800e276 <__ieee754_pow+0x126>
 800e30a:	ed9d 7b00 	vldr	d7, [sp]
 800e30e:	eeb1 7b47 	vneg.f64	d7, d7
 800e312:	e786      	b.n	800e222 <__ieee754_pow+0xd2>
 800e314:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800e318:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e31c:	ea55 030a 	orrs.w	r3, r5, sl
 800e320:	d104      	bne.n	800e32c <__ieee754_pow+0x1dc>
 800e322:	ee38 8b48 	vsub.f64	d8, d8, d8
 800e326:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800e32a:	e77a      	b.n	800e222 <__ieee754_pow+0xd2>
 800e32c:	4b52      	ldr	r3, [pc, #328]	; (800e478 <__ieee754_pow+0x328>)
 800e32e:	4598      	cmp	r8, r3
 800e330:	f340 80a8 	ble.w	800e484 <__ieee754_pow+0x334>
 800e334:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e338:	4598      	cmp	r8, r3
 800e33a:	dd0b      	ble.n	800e354 <__ieee754_pow+0x204>
 800e33c:	4b4b      	ldr	r3, [pc, #300]	; (800e46c <__ieee754_pow+0x31c>)
 800e33e:	429c      	cmp	r4, r3
 800e340:	dc0e      	bgt.n	800e360 <__ieee754_pow+0x210>
 800e342:	f1b9 0f00 	cmp.w	r9, #0
 800e346:	f6bf af6a 	bge.w	800e21e <__ieee754_pow+0xce>
 800e34a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800e438 <__ieee754_pow+0x2e8>
 800e34e:	ee27 7b07 	vmul.f64	d7, d7, d7
 800e352:	e766      	b.n	800e222 <__ieee754_pow+0xd2>
 800e354:	4b49      	ldr	r3, [pc, #292]	; (800e47c <__ieee754_pow+0x32c>)
 800e356:	429c      	cmp	r4, r3
 800e358:	ddf3      	ble.n	800e342 <__ieee754_pow+0x1f2>
 800e35a:	4b45      	ldr	r3, [pc, #276]	; (800e470 <__ieee754_pow+0x320>)
 800e35c:	429c      	cmp	r4, r3
 800e35e:	dd03      	ble.n	800e368 <__ieee754_pow+0x218>
 800e360:	f1b9 0f00 	cmp.w	r9, #0
 800e364:	dcf1      	bgt.n	800e34a <__ieee754_pow+0x1fa>
 800e366:	e75a      	b.n	800e21e <__ieee754_pow+0xce>
 800e368:	ed9d 7b00 	vldr	d7, [sp]
 800e36c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e370:	ed9f 5b33 	vldr	d5, [pc, #204]	; 800e440 <__ieee754_pow+0x2f0>
 800e374:	ee37 6b46 	vsub.f64	d6, d7, d6
 800e378:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 800e37c:	eeb1 3b46 	vneg.f64	d3, d6
 800e380:	eea3 5b07 	vfma.f64	d5, d3, d7
 800e384:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e388:	eea5 7b46 	vfms.f64	d7, d5, d6
 800e38c:	ee26 5b06 	vmul.f64	d5, d6, d6
 800e390:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e394:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800e448 <__ieee754_pow+0x2f8>
 800e398:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e39c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e450 <__ieee754_pow+0x300>
 800e3a0:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e3a4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e458 <__ieee754_pow+0x308>
 800e3a8:	eeb0 4b47 	vmov.f64	d4, d7
 800e3ac:	eea6 4b05 	vfma.f64	d4, d6, d5
 800e3b0:	ec53 2b14 	vmov	r2, r3, d4
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	ec43 2b14 	vmov	d4, r2, r3
 800e3ba:	eeb0 6b44 	vmov.f64	d6, d4
 800e3be:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e3c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e3c6:	3d01      	subs	r5, #1
 800e3c8:	ea55 030a 	orrs.w	r3, r5, sl
 800e3cc:	f04f 0200 	mov.w	r2, #0
 800e3d0:	463b      	mov	r3, r7
 800e3d2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e3d6:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800e3da:	ec47 6b15 	vmov	d5, r6, r7
 800e3de:	fe06 8b08 	vseleq.f64	d8, d6, d8
 800e3e2:	ec47 6b13 	vmov	d3, r6, r7
 800e3e6:	ec43 2b16 	vmov	d6, r2, r3
 800e3ea:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e3ee:	ee35 5b46 	vsub.f64	d5, d5, d6
 800e3f2:	4b23      	ldr	r3, [pc, #140]	; (800e480 <__ieee754_pow+0x330>)
 800e3f4:	eea5 7b04 	vfma.f64	d7, d5, d4
 800e3f8:	ee24 6b06 	vmul.f64	d6, d4, d6
 800e3fc:	ee37 5b06 	vadd.f64	d5, d7, d6
 800e400:	ee15 1a90 	vmov	r1, s11
 800e404:	4299      	cmp	r1, r3
 800e406:	ee15 2a10 	vmov	r2, s10
 800e40a:	f340 819b 	ble.w	800e744 <__ieee754_pow+0x5f4>
 800e40e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e412:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e416:	4313      	orrs	r3, r2
 800e418:	f000 810a 	beq.w	800e630 <__ieee754_pow+0x4e0>
 800e41c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800e438 <__ieee754_pow+0x2e8>
 800e420:	ee28 8b07 	vmul.f64	d8, d8, d7
 800e424:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e428:	e6fb      	b.n	800e222 <__ieee754_pow+0xd2>
 800e42a:	bf00      	nop
 800e42c:	f3af 8000 	nop.w
	...
 800e438:	8800759c 	.word	0x8800759c
 800e43c:	7e37e43c 	.word	0x7e37e43c
 800e440:	55555555 	.word	0x55555555
 800e444:	3fd55555 	.word	0x3fd55555
 800e448:	652b82fe 	.word	0x652b82fe
 800e44c:	3ff71547 	.word	0x3ff71547
 800e450:	f85ddf44 	.word	0xf85ddf44
 800e454:	3e54ae0b 	.word	0x3e54ae0b
 800e458:	60000000 	.word	0x60000000
 800e45c:	3ff71547 	.word	0x3ff71547
 800e460:	7ff00000 	.word	0x7ff00000
 800e464:	08010296 	.word	0x08010296
 800e468:	433fffff 	.word	0x433fffff
 800e46c:	3fefffff 	.word	0x3fefffff
 800e470:	3ff00000 	.word	0x3ff00000
 800e474:	3fe00000 	.word	0x3fe00000
 800e478:	41e00000 	.word	0x41e00000
 800e47c:	3feffffe 	.word	0x3feffffe
 800e480:	408fffff 	.word	0x408fffff
 800e484:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e488:	f280 80ce 	bge.w	800e628 <__ieee754_pow+0x4d8>
 800e48c:	ed9d 6b00 	vldr	d6, [sp]
 800e490:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 800e798 <__ieee754_pow+0x648>
 800e494:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e498:	ed8d 7b00 	vstr	d7, [sp]
 800e49c:	9c01      	ldr	r4, [sp, #4]
 800e49e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800e4a2:	1521      	asrs	r1, r4, #20
 800e4a4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e4a8:	4419      	add	r1, r3
 800e4aa:	4be3      	ldr	r3, [pc, #908]	; (800e838 <__ieee754_pow+0x6e8>)
 800e4ac:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e4b0:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 800e4b4:	429c      	cmp	r4, r3
 800e4b6:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800e4ba:	dd06      	ble.n	800e4ca <__ieee754_pow+0x37a>
 800e4bc:	4bdf      	ldr	r3, [pc, #892]	; (800e83c <__ieee754_pow+0x6ec>)
 800e4be:	429c      	cmp	r4, r3
 800e4c0:	f340 80b4 	ble.w	800e62c <__ieee754_pow+0x4dc>
 800e4c4:	3101      	adds	r1, #1
 800e4c6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800e4ca:	2400      	movs	r4, #0
 800e4cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4d0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	ec43 2b17 	vmov	d7, r2, r3
 800e4da:	4bd9      	ldr	r3, [pc, #868]	; (800e840 <__ieee754_pow+0x6f0>)
 800e4dc:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 800e4e0:	4463      	add	r3, ip
 800e4e2:	ed93 5b00 	vldr	d5, [r3]
 800e4e6:	1040      	asrs	r0, r0, #1
 800e4e8:	ee37 2b45 	vsub.f64	d2, d7, d5
 800e4ec:	ee35 6b07 	vadd.f64	d6, d5, d7
 800e4f0:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800e4f4:	ee22 6b01 	vmul.f64	d6, d2, d1
 800e4f8:	ed8d 6b00 	vstr	d6, [sp]
 800e4fc:	e9dd 8900 	ldrd	r8, r9, [sp]
 800e500:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800e504:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 800e508:	f04f 0800 	mov.w	r8, #0
 800e50c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 800e510:	2200      	movs	r2, #0
 800e512:	ec49 8b14 	vmov	d4, r8, r9
 800e516:	ec43 2b16 	vmov	d6, r2, r3
 800e51a:	eeb1 3b44 	vneg.f64	d3, d4
 800e51e:	eea3 2b06 	vfma.f64	d2, d3, d6
 800e522:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e526:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e52a:	eea3 2b07 	vfma.f64	d2, d3, d7
 800e52e:	ed9d 7b00 	vldr	d7, [sp]
 800e532:	ee22 2b01 	vmul.f64	d2, d2, d1
 800e536:	ee27 5b07 	vmul.f64	d5, d7, d7
 800e53a:	ee37 6b04 	vadd.f64	d6, d7, d4
 800e53e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 800e7a0 <__ieee754_pow+0x650>
 800e542:	ee25 0b05 	vmul.f64	d0, d5, d5
 800e546:	ee26 6b02 	vmul.f64	d6, d6, d2
 800e54a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800e7a8 <__ieee754_pow+0x658>
 800e54e:	eea5 7b01 	vfma.f64	d7, d5, d1
 800e552:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800e7b0 <__ieee754_pow+0x660>
 800e556:	eea7 1b05 	vfma.f64	d1, d7, d5
 800e55a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800e7b8 <__ieee754_pow+0x668>
 800e55e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800e562:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800e7c0 <__ieee754_pow+0x670>
 800e566:	eea7 1b05 	vfma.f64	d1, d7, d5
 800e56a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800e7c8 <__ieee754_pow+0x678>
 800e56e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800e572:	eea0 6b07 	vfma.f64	d6, d0, d7
 800e576:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 800e57a:	eeb0 5b47 	vmov.f64	d5, d7
 800e57e:	eea4 5b04 	vfma.f64	d5, d4, d4
 800e582:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e586:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e58a:	f8cd 8008 	str.w	r8, [sp, #8]
 800e58e:	ed9d 5b02 	vldr	d5, [sp, #8]
 800e592:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e596:	eea3 7b04 	vfma.f64	d7, d3, d4
 800e59a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e59e:	ed9d 6b00 	vldr	d6, [sp]
 800e5a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e5a6:	eea2 7b05 	vfma.f64	d7, d2, d5
 800e5aa:	eeb0 6b47 	vmov.f64	d6, d7
 800e5ae:	eea4 6b05 	vfma.f64	d6, d4, d5
 800e5b2:	ed8d 6b00 	vstr	d6, [sp]
 800e5b6:	f8cd 8000 	str.w	r8, [sp]
 800e5ba:	ed9d 2b00 	vldr	d2, [sp]
 800e5be:	eeb0 6b42 	vmov.f64	d6, d2
 800e5c2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e5c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e5ca:	ed9f 6b81 	vldr	d6, [pc, #516]	; 800e7d0 <__ieee754_pow+0x680>
 800e5ce:	4b9d      	ldr	r3, [pc, #628]	; (800e844 <__ieee754_pow+0x6f4>)
 800e5d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e5d4:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800e7d8 <__ieee754_pow+0x688>
 800e5d8:	4463      	add	r3, ip
 800e5da:	eea2 7b06 	vfma.f64	d7, d2, d6
 800e5de:	ed93 6b00 	vldr	d6, [r3]
 800e5e2:	4b99      	ldr	r3, [pc, #612]	; (800e848 <__ieee754_pow+0x6f8>)
 800e5e4:	ee37 6b06 	vadd.f64	d6, d7, d6
 800e5e8:	449c      	add	ip, r3
 800e5ea:	ed9c 1b00 	vldr	d1, [ip]
 800e5ee:	eeb0 4b46 	vmov.f64	d4, d6
 800e5f2:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 800e7e0 <__ieee754_pow+0x690>
 800e5f6:	ee07 1a90 	vmov	s15, r1
 800e5fa:	eea2 4b03 	vfma.f64	d4, d2, d3
 800e5fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e602:	ee34 4b01 	vadd.f64	d4, d4, d1
 800e606:	ee34 5b07 	vadd.f64	d5, d4, d7
 800e60a:	ed8d 5b00 	vstr	d5, [sp]
 800e60e:	f8cd 8000 	str.w	r8, [sp]
 800e612:	ed9d 4b00 	vldr	d4, [sp]
 800e616:	ee34 7b47 	vsub.f64	d7, d4, d7
 800e61a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800e61e:	eea2 7b43 	vfms.f64	d7, d2, d3
 800e622:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e626:	e6ce      	b.n	800e3c6 <__ieee754_pow+0x276>
 800e628:	2300      	movs	r3, #0
 800e62a:	e73a      	b.n	800e4a2 <__ieee754_pow+0x352>
 800e62c:	2401      	movs	r4, #1
 800e62e:	e74d      	b.n	800e4cc <__ieee754_pow+0x37c>
 800e630:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800e7e8 <__ieee754_pow+0x698>
 800e634:	ee35 5b46 	vsub.f64	d5, d5, d6
 800e638:	ee37 4b04 	vadd.f64	d4, d7, d4
 800e63c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800e640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e644:	f73f aeea 	bgt.w	800e41c <__ieee754_pow+0x2cc>
 800e648:	4a80      	ldr	r2, [pc, #512]	; (800e84c <__ieee754_pow+0x6fc>)
 800e64a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e64e:	4293      	cmp	r3, r2
 800e650:	f340 808e 	ble.w	800e770 <__ieee754_pow+0x620>
 800e654:	151b      	asrs	r3, r3, #20
 800e656:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 800e65a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e65e:	4103      	asrs	r3, r0
 800e660:	440b      	add	r3, r1
 800e662:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e666:	487a      	ldr	r0, [pc, #488]	; (800e850 <__ieee754_pow+0x700>)
 800e668:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e66c:	4110      	asrs	r0, r2
 800e66e:	ea23 0500 	bic.w	r5, r3, r0
 800e672:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800e676:	2400      	movs	r4, #0
 800e678:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800e67c:	f1c2 0214 	rsb	r2, r2, #20
 800e680:	ec45 4b15 	vmov	d5, r4, r5
 800e684:	4110      	asrs	r0, r2
 800e686:	2900      	cmp	r1, #0
 800e688:	bfb8      	it	lt
 800e68a:	4240      	neglt	r0, r0
 800e68c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e690:	ee36 5b07 	vadd.f64	d5, d6, d7
 800e694:	ec53 2b15 	vmov	r2, r3, d5
 800e698:	2200      	movs	r2, #0
 800e69a:	ec43 2b15 	vmov	d5, r2, r3
 800e69e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800e7f0 <__ieee754_pow+0x6a0>
 800e6a2:	ee35 6b46 	vsub.f64	d6, d5, d6
 800e6a6:	ee37 6b46 	vsub.f64	d6, d7, d6
 800e6aa:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800e7f8 <__ieee754_pow+0x6a8>
 800e6ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e6b2:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e6b6:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800e800 <__ieee754_pow+0x6b0>
 800e6ba:	eeb0 4b47 	vmov.f64	d4, d7
 800e6be:	eea5 4b06 	vfma.f64	d4, d5, d6
 800e6c2:	eeb0 3b44 	vmov.f64	d3, d4
 800e6c6:	eea5 3b46 	vfms.f64	d3, d5, d6
 800e6ca:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 800e808 <__ieee754_pow+0x6b8>
 800e6ce:	ee37 7b43 	vsub.f64	d7, d7, d3
 800e6d2:	ee24 6b04 	vmul.f64	d6, d4, d4
 800e6d6:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 800e810 <__ieee754_pow+0x6c0>
 800e6da:	eea4 7b07 	vfma.f64	d7, d4, d7
 800e6de:	eea6 3b05 	vfma.f64	d3, d6, d5
 800e6e2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800e818 <__ieee754_pow+0x6c8>
 800e6e6:	eea3 5b06 	vfma.f64	d5, d3, d6
 800e6ea:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800e820 <__ieee754_pow+0x6d0>
 800e6ee:	eea5 3b06 	vfma.f64	d3, d5, d6
 800e6f2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800e828 <__ieee754_pow+0x6d8>
 800e6f6:	eea3 5b06 	vfma.f64	d5, d3, d6
 800e6fa:	eeb0 3b44 	vmov.f64	d3, d4
 800e6fe:	eea5 3b46 	vfms.f64	d3, d5, d6
 800e702:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e706:	eeb0 6b43 	vmov.f64	d6, d3
 800e70a:	ee24 3b03 	vmul.f64	d3, d4, d3
 800e70e:	ee36 5b45 	vsub.f64	d5, d6, d5
 800e712:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800e716:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e71a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e71e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e722:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e726:	ed8d 7b00 	vstr	d7, [sp]
 800e72a:	9901      	ldr	r1, [sp, #4]
 800e72c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 800e730:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e734:	da1e      	bge.n	800e774 <__ieee754_pow+0x624>
 800e736:	eeb0 0b47 	vmov.f64	d0, d7
 800e73a:	f000 fedd 	bl	800f4f8 <scalbn>
 800e73e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800e742:	e56e      	b.n	800e222 <__ieee754_pow+0xd2>
 800e744:	4b43      	ldr	r3, [pc, #268]	; (800e854 <__ieee754_pow+0x704>)
 800e746:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800e74a:	4298      	cmp	r0, r3
 800e74c:	f77f af7c 	ble.w	800e648 <__ieee754_pow+0x4f8>
 800e750:	4b41      	ldr	r3, [pc, #260]	; (800e858 <__ieee754_pow+0x708>)
 800e752:	440b      	add	r3, r1
 800e754:	4313      	orrs	r3, r2
 800e756:	d002      	beq.n	800e75e <__ieee754_pow+0x60e>
 800e758:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800e830 <__ieee754_pow+0x6e0>
 800e75c:	e660      	b.n	800e420 <__ieee754_pow+0x2d0>
 800e75e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800e762:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e76a:	f6ff af6d 	blt.w	800e648 <__ieee754_pow+0x4f8>
 800e76e:	e7f3      	b.n	800e758 <__ieee754_pow+0x608>
 800e770:	2000      	movs	r0, #0
 800e772:	e78d      	b.n	800e690 <__ieee754_pow+0x540>
 800e774:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e778:	460b      	mov	r3, r1
 800e77a:	ec43 2b10 	vmov	d0, r2, r3
 800e77e:	e7de      	b.n	800e73e <__ieee754_pow+0x5ee>
 800e780:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e784:	e54d      	b.n	800e222 <__ieee754_pow+0xd2>
 800e786:	e9cd 6700 	strd	r6, r7, [sp]
 800e78a:	e574      	b.n	800e276 <__ieee754_pow+0x126>
 800e78c:	ed8d 8b00 	vstr	d8, [sp]
 800e790:	e571      	b.n	800e276 <__ieee754_pow+0x126>
 800e792:	4615      	mov	r5, r2
 800e794:	e557      	b.n	800e246 <__ieee754_pow+0xf6>
 800e796:	bf00      	nop
 800e798:	00000000 	.word	0x00000000
 800e79c:	43400000 	.word	0x43400000
 800e7a0:	4a454eef 	.word	0x4a454eef
 800e7a4:	3fca7e28 	.word	0x3fca7e28
 800e7a8:	93c9db65 	.word	0x93c9db65
 800e7ac:	3fcd864a 	.word	0x3fcd864a
 800e7b0:	a91d4101 	.word	0xa91d4101
 800e7b4:	3fd17460 	.word	0x3fd17460
 800e7b8:	518f264d 	.word	0x518f264d
 800e7bc:	3fd55555 	.word	0x3fd55555
 800e7c0:	db6fabff 	.word	0xdb6fabff
 800e7c4:	3fdb6db6 	.word	0x3fdb6db6
 800e7c8:	33333303 	.word	0x33333303
 800e7cc:	3fe33333 	.word	0x3fe33333
 800e7d0:	dc3a03fd 	.word	0xdc3a03fd
 800e7d4:	3feec709 	.word	0x3feec709
 800e7d8:	145b01f5 	.word	0x145b01f5
 800e7dc:	be3e2fe0 	.word	0xbe3e2fe0
 800e7e0:	e0000000 	.word	0xe0000000
 800e7e4:	3feec709 	.word	0x3feec709
 800e7e8:	652b82fe 	.word	0x652b82fe
 800e7ec:	3c971547 	.word	0x3c971547
 800e7f0:	fefa39ef 	.word	0xfefa39ef
 800e7f4:	3fe62e42 	.word	0x3fe62e42
 800e7f8:	0ca86c39 	.word	0x0ca86c39
 800e7fc:	be205c61 	.word	0xbe205c61
 800e800:	00000000 	.word	0x00000000
 800e804:	3fe62e43 	.word	0x3fe62e43
 800e808:	72bea4d0 	.word	0x72bea4d0
 800e80c:	3e663769 	.word	0x3e663769
 800e810:	c5d26bf1 	.word	0xc5d26bf1
 800e814:	bebbbd41 	.word	0xbebbbd41
 800e818:	af25de2c 	.word	0xaf25de2c
 800e81c:	3f11566a 	.word	0x3f11566a
 800e820:	16bebd93 	.word	0x16bebd93
 800e824:	bf66c16c 	.word	0xbf66c16c
 800e828:	5555553e 	.word	0x5555553e
 800e82c:	3fc55555 	.word	0x3fc55555
 800e830:	c2f8f359 	.word	0xc2f8f359
 800e834:	01a56e1f 	.word	0x01a56e1f
 800e838:	0003988e 	.word	0x0003988e
 800e83c:	000bb679 	.word	0x000bb679
 800e840:	080102a0 	.word	0x080102a0
 800e844:	080102c0 	.word	0x080102c0
 800e848:	080102b0 	.word	0x080102b0
 800e84c:	3fe00000 	.word	0x3fe00000
 800e850:	000fffff 	.word	0x000fffff
 800e854:	4090cbff 	.word	0x4090cbff
 800e858:	3f6f3400 	.word	0x3f6f3400

0800e85c <__ieee754_sqrt>:
 800e85c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800e860:	4770      	bx	lr
	...

0800e864 <__ieee754_log10f>:
 800e864:	b508      	push	{r3, lr}
 800e866:	ee10 2a10 	vmov	r2, s0
 800e86a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800e86e:	ed2d 8b02 	vpush	{d8}
 800e872:	d108      	bne.n	800e886 <__ieee754_log10f+0x22>
 800e874:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800e8f8 <__ieee754_log10f+0x94>
 800e878:	eddf 7a20 	vldr	s15, [pc, #128]	; 800e8fc <__ieee754_log10f+0x98>
 800e87c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800e880:	ecbd 8b02 	vpop	{d8}
 800e884:	bd08      	pop	{r3, pc}
 800e886:	2a00      	cmp	r2, #0
 800e888:	da02      	bge.n	800e890 <__ieee754_log10f+0x2c>
 800e88a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800e88e:	e7f3      	b.n	800e878 <__ieee754_log10f+0x14>
 800e890:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e894:	db02      	blt.n	800e89c <__ieee754_log10f+0x38>
 800e896:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e89a:	e7f1      	b.n	800e880 <__ieee754_log10f+0x1c>
 800e89c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800e8a0:	bfbf      	itttt	lt
 800e8a2:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 800e900 <__ieee754_log10f+0x9c>
 800e8a6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e8aa:	f06f 0118 	mvnlt.w	r1, #24
 800e8ae:	ee17 2a90 	vmovlt	r2, s15
 800e8b2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800e8b6:	bfa8      	it	ge
 800e8b8:	2100      	movge	r1, #0
 800e8ba:	3b7f      	subs	r3, #127	; 0x7f
 800e8bc:	440b      	add	r3, r1
 800e8be:	0fd9      	lsrs	r1, r3, #31
 800e8c0:	440b      	add	r3, r1
 800e8c2:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800e8c6:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 800e8ca:	ee07 3a90 	vmov	s15, r3
 800e8ce:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 800e8d2:	ee00 3a10 	vmov	s0, r3
 800e8d6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800e8da:	f7fe fe69 	bl	800d5b0 <logf>
 800e8de:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e904 <__ieee754_log10f+0xa0>
 800e8e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e8e6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e908 <__ieee754_log10f+0xa4>
 800e8ea:	eea8 0a27 	vfma.f32	s0, s16, s15
 800e8ee:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e90c <__ieee754_log10f+0xa8>
 800e8f2:	eea8 0a27 	vfma.f32	s0, s16, s15
 800e8f6:	e7c3      	b.n	800e880 <__ieee754_log10f+0x1c>
 800e8f8:	cc000000 	.word	0xcc000000
 800e8fc:	00000000 	.word	0x00000000
 800e900:	4c000000 	.word	0x4c000000
 800e904:	3ede5bd9 	.word	0x3ede5bd9
 800e908:	355427db 	.word	0x355427db
 800e90c:	3e9a2080 	.word	0x3e9a2080

0800e910 <__ieee754_rem_pio2f>:
 800e910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e912:	ee10 6a10 	vmov	r6, s0
 800e916:	4b86      	ldr	r3, [pc, #536]	; (800eb30 <__ieee754_rem_pio2f+0x220>)
 800e918:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800e91c:	429c      	cmp	r4, r3
 800e91e:	b087      	sub	sp, #28
 800e920:	4605      	mov	r5, r0
 800e922:	dc05      	bgt.n	800e930 <__ieee754_rem_pio2f+0x20>
 800e924:	2300      	movs	r3, #0
 800e926:	ed85 0a00 	vstr	s0, [r5]
 800e92a:	6043      	str	r3, [r0, #4]
 800e92c:	2000      	movs	r0, #0
 800e92e:	e020      	b.n	800e972 <__ieee754_rem_pio2f+0x62>
 800e930:	4b80      	ldr	r3, [pc, #512]	; (800eb34 <__ieee754_rem_pio2f+0x224>)
 800e932:	429c      	cmp	r4, r3
 800e934:	dc38      	bgt.n	800e9a8 <__ieee754_rem_pio2f+0x98>
 800e936:	2e00      	cmp	r6, #0
 800e938:	f024 040f 	bic.w	r4, r4, #15
 800e93c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800eb38 <__ieee754_rem_pio2f+0x228>
 800e940:	4b7e      	ldr	r3, [pc, #504]	; (800eb3c <__ieee754_rem_pio2f+0x22c>)
 800e942:	dd18      	ble.n	800e976 <__ieee754_rem_pio2f+0x66>
 800e944:	429c      	cmp	r4, r3
 800e946:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e94a:	bf09      	itett	eq
 800e94c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800eb40 <__ieee754_rem_pio2f+0x230>
 800e950:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800eb44 <__ieee754_rem_pio2f+0x234>
 800e954:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e958:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800eb48 <__ieee754_rem_pio2f+0x238>
 800e95c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e960:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e964:	edc0 6a00 	vstr	s13, [r0]
 800e968:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e96c:	edc0 7a01 	vstr	s15, [r0, #4]
 800e970:	2001      	movs	r0, #1
 800e972:	b007      	add	sp, #28
 800e974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e976:	429c      	cmp	r4, r3
 800e978:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e97c:	bf09      	itett	eq
 800e97e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800eb40 <__ieee754_rem_pio2f+0x230>
 800e982:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800eb44 <__ieee754_rem_pio2f+0x234>
 800e986:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e98a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800eb48 <__ieee754_rem_pio2f+0x238>
 800e98e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e992:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e996:	edc0 6a00 	vstr	s13, [r0]
 800e99a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e99e:	edc0 7a01 	vstr	s15, [r0, #4]
 800e9a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9a6:	e7e4      	b.n	800e972 <__ieee754_rem_pio2f+0x62>
 800e9a8:	4b68      	ldr	r3, [pc, #416]	; (800eb4c <__ieee754_rem_pio2f+0x23c>)
 800e9aa:	429c      	cmp	r4, r3
 800e9ac:	dc71      	bgt.n	800ea92 <__ieee754_rem_pio2f+0x182>
 800e9ae:	f7fe fdf7 	bl	800d5a0 <fabsf>
 800e9b2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800eb50 <__ieee754_rem_pio2f+0x240>
 800e9b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e9ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e9be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e9c2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800e9c6:	ee17 0a90 	vmov	r0, s15
 800e9ca:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800eb38 <__ieee754_rem_pio2f+0x228>
 800e9ce:	eeb1 7a46 	vneg.f32	s14, s12
 800e9d2:	eea7 0a27 	vfma.f32	s0, s14, s15
 800e9d6:	281f      	cmp	r0, #31
 800e9d8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800eb44 <__ieee754_rem_pio2f+0x234>
 800e9dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e9e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e9e4:	ee16 3a90 	vmov	r3, s13
 800e9e8:	dc1c      	bgt.n	800ea24 <__ieee754_rem_pio2f+0x114>
 800e9ea:	1e47      	subs	r7, r0, #1
 800e9ec:	4959      	ldr	r1, [pc, #356]	; (800eb54 <__ieee754_rem_pio2f+0x244>)
 800e9ee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800e9f2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800e9f6:	428a      	cmp	r2, r1
 800e9f8:	d014      	beq.n	800ea24 <__ieee754_rem_pio2f+0x114>
 800e9fa:	602b      	str	r3, [r5, #0]
 800e9fc:	ed95 7a00 	vldr	s14, [r5]
 800ea00:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ea04:	2e00      	cmp	r6, #0
 800ea06:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ea0a:	ed85 0a01 	vstr	s0, [r5, #4]
 800ea0e:	dab0      	bge.n	800e972 <__ieee754_rem_pio2f+0x62>
 800ea10:	eeb1 7a47 	vneg.f32	s14, s14
 800ea14:	eeb1 0a40 	vneg.f32	s0, s0
 800ea18:	ed85 7a00 	vstr	s14, [r5]
 800ea1c:	ed85 0a01 	vstr	s0, [r5, #4]
 800ea20:	4240      	negs	r0, r0
 800ea22:	e7a6      	b.n	800e972 <__ieee754_rem_pio2f+0x62>
 800ea24:	15e4      	asrs	r4, r4, #23
 800ea26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ea2a:	1aa2      	subs	r2, r4, r2
 800ea2c:	2a08      	cmp	r2, #8
 800ea2e:	dde4      	ble.n	800e9fa <__ieee754_rem_pio2f+0xea>
 800ea30:	eddf 7a43 	vldr	s15, [pc, #268]	; 800eb40 <__ieee754_rem_pio2f+0x230>
 800ea34:	eef0 6a40 	vmov.f32	s13, s0
 800ea38:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ea3c:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ea40:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ea44:	eddf 7a40 	vldr	s15, [pc, #256]	; 800eb48 <__ieee754_rem_pio2f+0x238>
 800ea48:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800ea4c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800ea50:	eef0 7a40 	vmov.f32	s15, s0
 800ea54:	ee15 3a90 	vmov	r3, s11
 800ea58:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ea5c:	1aa4      	subs	r4, r4, r2
 800ea5e:	2c19      	cmp	r4, #25
 800ea60:	dc04      	bgt.n	800ea6c <__ieee754_rem_pio2f+0x15c>
 800ea62:	edc5 5a00 	vstr	s11, [r5]
 800ea66:	eeb0 0a66 	vmov.f32	s0, s13
 800ea6a:	e7c7      	b.n	800e9fc <__ieee754_rem_pio2f+0xec>
 800ea6c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800eb58 <__ieee754_rem_pio2f+0x248>
 800ea70:	eeb0 0a66 	vmov.f32	s0, s13
 800ea74:	eea7 0a25 	vfma.f32	s0, s14, s11
 800ea78:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ea7c:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ea80:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800eb5c <__ieee754_rem_pio2f+0x24c>
 800ea84:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800ea88:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ea8c:	ed85 7a00 	vstr	s14, [r5]
 800ea90:	e7b4      	b.n	800e9fc <__ieee754_rem_pio2f+0xec>
 800ea92:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ea96:	db06      	blt.n	800eaa6 <__ieee754_rem_pio2f+0x196>
 800ea98:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ea9c:	edc0 7a01 	vstr	s15, [r0, #4]
 800eaa0:	edc0 7a00 	vstr	s15, [r0]
 800eaa4:	e742      	b.n	800e92c <__ieee754_rem_pio2f+0x1c>
 800eaa6:	15e2      	asrs	r2, r4, #23
 800eaa8:	3a86      	subs	r2, #134	; 0x86
 800eaaa:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800eaae:	ee07 3a90 	vmov	s15, r3
 800eab2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800eab6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800eb60 <__ieee754_rem_pio2f+0x250>
 800eaba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eabe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eac2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800eac6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800eaca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800eace:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ead2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ead6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800eada:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800eade:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae6:	edcd 7a05 	vstr	s15, [sp, #20]
 800eaea:	d11e      	bne.n	800eb2a <__ieee754_rem_pio2f+0x21a>
 800eaec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800eaf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf4:	bf0c      	ite	eq
 800eaf6:	2301      	moveq	r3, #1
 800eaf8:	2302      	movne	r3, #2
 800eafa:	491a      	ldr	r1, [pc, #104]	; (800eb64 <__ieee754_rem_pio2f+0x254>)
 800eafc:	9101      	str	r1, [sp, #4]
 800eafe:	2102      	movs	r1, #2
 800eb00:	9100      	str	r1, [sp, #0]
 800eb02:	a803      	add	r0, sp, #12
 800eb04:	4629      	mov	r1, r5
 800eb06:	f000 f89d 	bl	800ec44 <__kernel_rem_pio2f>
 800eb0a:	2e00      	cmp	r6, #0
 800eb0c:	f6bf af31 	bge.w	800e972 <__ieee754_rem_pio2f+0x62>
 800eb10:	edd5 7a00 	vldr	s15, [r5]
 800eb14:	eef1 7a67 	vneg.f32	s15, s15
 800eb18:	edc5 7a00 	vstr	s15, [r5]
 800eb1c:	edd5 7a01 	vldr	s15, [r5, #4]
 800eb20:	eef1 7a67 	vneg.f32	s15, s15
 800eb24:	edc5 7a01 	vstr	s15, [r5, #4]
 800eb28:	e77a      	b.n	800ea20 <__ieee754_rem_pio2f+0x110>
 800eb2a:	2303      	movs	r3, #3
 800eb2c:	e7e5      	b.n	800eafa <__ieee754_rem_pio2f+0x1ea>
 800eb2e:	bf00      	nop
 800eb30:	3f490fd8 	.word	0x3f490fd8
 800eb34:	4016cbe3 	.word	0x4016cbe3
 800eb38:	3fc90f80 	.word	0x3fc90f80
 800eb3c:	3fc90fd0 	.word	0x3fc90fd0
 800eb40:	37354400 	.word	0x37354400
 800eb44:	37354443 	.word	0x37354443
 800eb48:	2e85a308 	.word	0x2e85a308
 800eb4c:	43490f80 	.word	0x43490f80
 800eb50:	3f22f984 	.word	0x3f22f984
 800eb54:	080102d0 	.word	0x080102d0
 800eb58:	2e85a300 	.word	0x2e85a300
 800eb5c:	248d3132 	.word	0x248d3132
 800eb60:	43800000 	.word	0x43800000
 800eb64:	08010350 	.word	0x08010350

0800eb68 <__ieee754_sinhf>:
 800eb68:	b510      	push	{r4, lr}
 800eb6a:	ee10 3a10 	vmov	r3, s0
 800eb6e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800eb72:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800eb76:	ed2d 8b02 	vpush	{d8}
 800eb7a:	eef0 7a40 	vmov.f32	s15, s0
 800eb7e:	db06      	blt.n	800eb8e <__ieee754_sinhf+0x26>
 800eb80:	ee70 7a00 	vadd.f32	s15, s0, s0
 800eb84:	ecbd 8b02 	vpop	{d8}
 800eb88:	eeb0 0a67 	vmov.f32	s0, s15
 800eb8c:	bd10      	pop	{r4, pc}
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	4b28      	ldr	r3, [pc, #160]	; (800ec34 <__ieee754_sinhf+0xcc>)
 800eb92:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800eb96:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800eb9a:	fe28 8a88 	vselge.f32	s16, s17, s16
 800eb9e:	429c      	cmp	r4, r3
 800eba0:	dc2a      	bgt.n	800ebf8 <__ieee754_sinhf+0x90>
 800eba2:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 800eba6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ebaa:	da08      	bge.n	800ebbe <__ieee754_sinhf+0x56>
 800ebac:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800ec38 <__ieee754_sinhf+0xd0>
 800ebb0:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ebb4:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800ebb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebbc:	dce2      	bgt.n	800eb84 <__ieee754_sinhf+0x1c>
 800ebbe:	eeb0 0a67 	vmov.f32	s0, s15
 800ebc2:	f7fe fced 	bl	800d5a0 <fabsf>
 800ebc6:	f000 fd15 	bl	800f5f4 <expm1f>
 800ebca:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ebce:	bfbb      	ittet	lt
 800ebd0:	ee20 7a00 	vmullt.f32	s14, s0, s0
 800ebd4:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 800ebd8:	ee70 8a28 	vaddge.f32	s17, s0, s17
 800ebdc:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 800ebe0:	bfad      	iteet	ge
 800ebe2:	eec0 7a28 	vdivge.f32	s15, s0, s17
 800ebe6:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 800ebea:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 800ebee:	ee77 7a80 	vaddge.f32	s15, s15, s0
 800ebf2:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ebf6:	e7c5      	b.n	800eb84 <__ieee754_sinhf+0x1c>
 800ebf8:	4b10      	ldr	r3, [pc, #64]	; (800ec3c <__ieee754_sinhf+0xd4>)
 800ebfa:	429c      	cmp	r4, r3
 800ebfc:	dc06      	bgt.n	800ec0c <__ieee754_sinhf+0xa4>
 800ebfe:	f7fe fccf 	bl	800d5a0 <fabsf>
 800ec02:	f7fe fc4f 	bl	800d4a4 <expf>
 800ec06:	ee60 7a08 	vmul.f32	s15, s0, s16
 800ec0a:	e7bb      	b.n	800eb84 <__ieee754_sinhf+0x1c>
 800ec0c:	4b0c      	ldr	r3, [pc, #48]	; (800ec40 <__ieee754_sinhf+0xd8>)
 800ec0e:	429c      	cmp	r4, r3
 800ec10:	dc0a      	bgt.n	800ec28 <__ieee754_sinhf+0xc0>
 800ec12:	f7fe fcc5 	bl	800d5a0 <fabsf>
 800ec16:	ee20 0a28 	vmul.f32	s0, s0, s17
 800ec1a:	f7fe fc43 	bl	800d4a4 <expf>
 800ec1e:	ee68 7a00 	vmul.f32	s15, s16, s0
 800ec22:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ec26:	e7ad      	b.n	800eb84 <__ieee754_sinhf+0x1c>
 800ec28:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800ec38 <__ieee754_sinhf+0xd0>
 800ec2c:	ee60 7a07 	vmul.f32	s15, s0, s14
 800ec30:	e7a8      	b.n	800eb84 <__ieee754_sinhf+0x1c>
 800ec32:	bf00      	nop
 800ec34:	41afffff 	.word	0x41afffff
 800ec38:	7cf0bdc2 	.word	0x7cf0bdc2
 800ec3c:	42b17217 	.word	0x42b17217
 800ec40:	42b2d4fc 	.word	0x42b2d4fc

0800ec44 <__kernel_rem_pio2f>:
 800ec44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec48:	ed2d 8b04 	vpush	{d8-d9}
 800ec4c:	b0d7      	sub	sp, #348	; 0x15c
 800ec4e:	469b      	mov	fp, r3
 800ec50:	460e      	mov	r6, r1
 800ec52:	4bbe      	ldr	r3, [pc, #760]	; (800ef4c <__kernel_rem_pio2f+0x308>)
 800ec54:	9964      	ldr	r1, [sp, #400]	; 0x190
 800ec56:	9002      	str	r0, [sp, #8]
 800ec58:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800ec5c:	9865      	ldr	r0, [sp, #404]	; 0x194
 800ec5e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800ef5c <__kernel_rem_pio2f+0x318>
 800ec62:	1ed1      	subs	r1, r2, #3
 800ec64:	2308      	movs	r3, #8
 800ec66:	fb91 f1f3 	sdiv	r1, r1, r3
 800ec6a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800ec6e:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800ec72:	1c4c      	adds	r4, r1, #1
 800ec74:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800ec78:	eba1 050a 	sub.w	r5, r1, sl
 800ec7c:	aa1a      	add	r2, sp, #104	; 0x68
 800ec7e:	eb09 070a 	add.w	r7, r9, sl
 800ec82:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800ec86:	4696      	mov	lr, r2
 800ec88:	2300      	movs	r3, #0
 800ec8a:	42bb      	cmp	r3, r7
 800ec8c:	dd0f      	ble.n	800ecae <__kernel_rem_pio2f+0x6a>
 800ec8e:	af42      	add	r7, sp, #264	; 0x108
 800ec90:	2200      	movs	r2, #0
 800ec92:	454a      	cmp	r2, r9
 800ec94:	dc27      	bgt.n	800ece6 <__kernel_rem_pio2f+0xa2>
 800ec96:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800ec9a:	eb0b 0302 	add.w	r3, fp, r2
 800ec9e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800eca2:	9d02      	ldr	r5, [sp, #8]
 800eca4:	eddf 7aad 	vldr	s15, [pc, #692]	; 800ef5c <__kernel_rem_pio2f+0x318>
 800eca8:	f04f 0c00 	mov.w	ip, #0
 800ecac:	e015      	b.n	800ecda <__kernel_rem_pio2f+0x96>
 800ecae:	42dd      	cmn	r5, r3
 800ecb0:	bf5d      	ittte	pl
 800ecb2:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800ecb6:	ee07 2a90 	vmovpl	s15, r2
 800ecba:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ecbe:	eef0 7a47 	vmovmi.f32	s15, s14
 800ecc2:	ecee 7a01 	vstmia	lr!, {s15}
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	e7df      	b.n	800ec8a <__kernel_rem_pio2f+0x46>
 800ecca:	ecf5 6a01 	vldmia	r5!, {s13}
 800ecce:	ed33 7a01 	vldmdb	r3!, {s14}
 800ecd2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ecd6:	f10c 0c01 	add.w	ip, ip, #1
 800ecda:	45d4      	cmp	ip, sl
 800ecdc:	ddf5      	ble.n	800ecca <__kernel_rem_pio2f+0x86>
 800ecde:	ece7 7a01 	vstmia	r7!, {s15}
 800ece2:	3201      	adds	r2, #1
 800ece4:	e7d5      	b.n	800ec92 <__kernel_rem_pio2f+0x4e>
 800ece6:	ab06      	add	r3, sp, #24
 800ece8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800ecec:	9304      	str	r3, [sp, #16]
 800ecee:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800ef58 <__kernel_rem_pio2f+0x314>
 800ecf2:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800ef54 <__kernel_rem_pio2f+0x310>
 800ecf6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800ecfa:	9303      	str	r3, [sp, #12]
 800ecfc:	464d      	mov	r5, r9
 800ecfe:	ab56      	add	r3, sp, #344	; 0x158
 800ed00:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800ed04:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800ed08:	3f01      	subs	r7, #1
 800ed0a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800ed0e:	00bf      	lsls	r7, r7, #2
 800ed10:	ab56      	add	r3, sp, #344	; 0x158
 800ed12:	19da      	adds	r2, r3, r7
 800ed14:	3a4c      	subs	r2, #76	; 0x4c
 800ed16:	2300      	movs	r3, #0
 800ed18:	1ae9      	subs	r1, r5, r3
 800ed1a:	2900      	cmp	r1, #0
 800ed1c:	dc4c      	bgt.n	800edb8 <__kernel_rem_pio2f+0x174>
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f000 fdde 	bl	800f8e0 <scalbnf>
 800ed24:	eeb0 8a40 	vmov.f32	s16, s0
 800ed28:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ed2c:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ed30:	f000 fd94 	bl	800f85c <floorf>
 800ed34:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ed38:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ed3c:	2c00      	cmp	r4, #0
 800ed3e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ed42:	edcd 7a01 	vstr	s15, [sp, #4]
 800ed46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed4a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ed4e:	dd48      	ble.n	800ede2 <__kernel_rem_pio2f+0x19e>
 800ed50:	1e69      	subs	r1, r5, #1
 800ed52:	ab06      	add	r3, sp, #24
 800ed54:	f1c4 0008 	rsb	r0, r4, #8
 800ed58:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800ed5c:	9a01      	ldr	r2, [sp, #4]
 800ed5e:	fa4c f300 	asr.w	r3, ip, r0
 800ed62:	441a      	add	r2, r3
 800ed64:	4083      	lsls	r3, r0
 800ed66:	9201      	str	r2, [sp, #4]
 800ed68:	ebac 0203 	sub.w	r2, ip, r3
 800ed6c:	ab06      	add	r3, sp, #24
 800ed6e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800ed72:	f1c4 0307 	rsb	r3, r4, #7
 800ed76:	fa42 f803 	asr.w	r8, r2, r3
 800ed7a:	f1b8 0f00 	cmp.w	r8, #0
 800ed7e:	dd41      	ble.n	800ee04 <__kernel_rem_pio2f+0x1c0>
 800ed80:	9b01      	ldr	r3, [sp, #4]
 800ed82:	2000      	movs	r0, #0
 800ed84:	3301      	adds	r3, #1
 800ed86:	9301      	str	r3, [sp, #4]
 800ed88:	4601      	mov	r1, r0
 800ed8a:	4285      	cmp	r5, r0
 800ed8c:	dc6d      	bgt.n	800ee6a <__kernel_rem_pio2f+0x226>
 800ed8e:	2c00      	cmp	r4, #0
 800ed90:	dd04      	ble.n	800ed9c <__kernel_rem_pio2f+0x158>
 800ed92:	2c01      	cmp	r4, #1
 800ed94:	d07e      	beq.n	800ee94 <__kernel_rem_pio2f+0x250>
 800ed96:	2c02      	cmp	r4, #2
 800ed98:	f000 8086 	beq.w	800eea8 <__kernel_rem_pio2f+0x264>
 800ed9c:	f1b8 0f02 	cmp.w	r8, #2
 800eda0:	d130      	bne.n	800ee04 <__kernel_rem_pio2f+0x1c0>
 800eda2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800eda6:	ee30 8a48 	vsub.f32	s16, s0, s16
 800edaa:	b359      	cbz	r1, 800ee04 <__kernel_rem_pio2f+0x1c0>
 800edac:	4620      	mov	r0, r4
 800edae:	f000 fd97 	bl	800f8e0 <scalbnf>
 800edb2:	ee38 8a40 	vsub.f32	s16, s16, s0
 800edb6:	e025      	b.n	800ee04 <__kernel_rem_pio2f+0x1c0>
 800edb8:	ee60 7a28 	vmul.f32	s15, s0, s17
 800edbc:	a806      	add	r0, sp, #24
 800edbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edc6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800edca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800edce:	ee10 1a10 	vmov	r1, s0
 800edd2:	ed32 0a01 	vldmdb	r2!, {s0}
 800edd6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800edda:	ee37 0a80 	vadd.f32	s0, s15, s0
 800edde:	3301      	adds	r3, #1
 800ede0:	e79a      	b.n	800ed18 <__kernel_rem_pio2f+0xd4>
 800ede2:	d106      	bne.n	800edf2 <__kernel_rem_pio2f+0x1ae>
 800ede4:	1e6b      	subs	r3, r5, #1
 800ede6:	aa06      	add	r2, sp, #24
 800ede8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800edec:	ea4f 2822 	mov.w	r8, r2, asr #8
 800edf0:	e7c3      	b.n	800ed7a <__kernel_rem_pio2f+0x136>
 800edf2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800edf6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800edfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edfe:	da31      	bge.n	800ee64 <__kernel_rem_pio2f+0x220>
 800ee00:	f04f 0800 	mov.w	r8, #0
 800ee04:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ee08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee0c:	f040 80a8 	bne.w	800ef60 <__kernel_rem_pio2f+0x31c>
 800ee10:	1e6b      	subs	r3, r5, #1
 800ee12:	4618      	mov	r0, r3
 800ee14:	2200      	movs	r2, #0
 800ee16:	4548      	cmp	r0, r9
 800ee18:	da4d      	bge.n	800eeb6 <__kernel_rem_pio2f+0x272>
 800ee1a:	2a00      	cmp	r2, #0
 800ee1c:	f000 8087 	beq.w	800ef2e <__kernel_rem_pio2f+0x2ea>
 800ee20:	aa06      	add	r2, sp, #24
 800ee22:	3c08      	subs	r4, #8
 800ee24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ee28:	2900      	cmp	r1, #0
 800ee2a:	f000 808d 	beq.w	800ef48 <__kernel_rem_pio2f+0x304>
 800ee2e:	4620      	mov	r0, r4
 800ee30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ee34:	9302      	str	r3, [sp, #8]
 800ee36:	f000 fd53 	bl	800f8e0 <scalbnf>
 800ee3a:	9b02      	ldr	r3, [sp, #8]
 800ee3c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ef58 <__kernel_rem_pio2f+0x314>
 800ee40:	0099      	lsls	r1, r3, #2
 800ee42:	aa42      	add	r2, sp, #264	; 0x108
 800ee44:	1850      	adds	r0, r2, r1
 800ee46:	1d05      	adds	r5, r0, #4
 800ee48:	461c      	mov	r4, r3
 800ee4a:	2c00      	cmp	r4, #0
 800ee4c:	f280 80b8 	bge.w	800efc0 <__kernel_rem_pio2f+0x37c>
 800ee50:	2500      	movs	r5, #0
 800ee52:	1b5c      	subs	r4, r3, r5
 800ee54:	2c00      	cmp	r4, #0
 800ee56:	f2c0 80d8 	blt.w	800f00a <__kernel_rem_pio2f+0x3c6>
 800ee5a:	4f3d      	ldr	r7, [pc, #244]	; (800ef50 <__kernel_rem_pio2f+0x30c>)
 800ee5c:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800ef5c <__kernel_rem_pio2f+0x318>
 800ee60:	2400      	movs	r4, #0
 800ee62:	e0c6      	b.n	800eff2 <__kernel_rem_pio2f+0x3ae>
 800ee64:	f04f 0802 	mov.w	r8, #2
 800ee68:	e78a      	b.n	800ed80 <__kernel_rem_pio2f+0x13c>
 800ee6a:	ab06      	add	r3, sp, #24
 800ee6c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ee70:	b949      	cbnz	r1, 800ee86 <__kernel_rem_pio2f+0x242>
 800ee72:	b12b      	cbz	r3, 800ee80 <__kernel_rem_pio2f+0x23c>
 800ee74:	aa06      	add	r2, sp, #24
 800ee76:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800ee7a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800ee7e:	2301      	movs	r3, #1
 800ee80:	3001      	adds	r0, #1
 800ee82:	4619      	mov	r1, r3
 800ee84:	e781      	b.n	800ed8a <__kernel_rem_pio2f+0x146>
 800ee86:	aa06      	add	r2, sp, #24
 800ee88:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800ee8c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800ee90:	460b      	mov	r3, r1
 800ee92:	e7f5      	b.n	800ee80 <__kernel_rem_pio2f+0x23c>
 800ee94:	1e68      	subs	r0, r5, #1
 800ee96:	ab06      	add	r3, sp, #24
 800ee98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ee9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eea0:	aa06      	add	r2, sp, #24
 800eea2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800eea6:	e779      	b.n	800ed9c <__kernel_rem_pio2f+0x158>
 800eea8:	1e68      	subs	r0, r5, #1
 800eeaa:	ab06      	add	r3, sp, #24
 800eeac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800eeb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eeb4:	e7f4      	b.n	800eea0 <__kernel_rem_pio2f+0x25c>
 800eeb6:	a906      	add	r1, sp, #24
 800eeb8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800eebc:	3801      	subs	r0, #1
 800eebe:	430a      	orrs	r2, r1
 800eec0:	e7a9      	b.n	800ee16 <__kernel_rem_pio2f+0x1d2>
 800eec2:	f10c 0c01 	add.w	ip, ip, #1
 800eec6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800eeca:	2a00      	cmp	r2, #0
 800eecc:	d0f9      	beq.n	800eec2 <__kernel_rem_pio2f+0x27e>
 800eece:	eb0b 0305 	add.w	r3, fp, r5
 800eed2:	aa1a      	add	r2, sp, #104	; 0x68
 800eed4:	009b      	lsls	r3, r3, #2
 800eed6:	1898      	adds	r0, r3, r2
 800eed8:	3004      	adds	r0, #4
 800eeda:	1c69      	adds	r1, r5, #1
 800eedc:	3704      	adds	r7, #4
 800eede:	2200      	movs	r2, #0
 800eee0:	4465      	add	r5, ip
 800eee2:	9005      	str	r0, [sp, #20]
 800eee4:	428d      	cmp	r5, r1
 800eee6:	f6ff af0a 	blt.w	800ecfe <__kernel_rem_pio2f+0xba>
 800eeea:	a81a      	add	r0, sp, #104	; 0x68
 800eeec:	eb02 0c03 	add.w	ip, r2, r3
 800eef0:	4484      	add	ip, r0
 800eef2:	9803      	ldr	r0, [sp, #12]
 800eef4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800eef8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800eefc:	9001      	str	r0, [sp, #4]
 800eefe:	ee07 0a90 	vmov	s15, r0
 800ef02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef06:	9805      	ldr	r0, [sp, #20]
 800ef08:	edcc 7a00 	vstr	s15, [ip]
 800ef0c:	eddf 7a13 	vldr	s15, [pc, #76]	; 800ef5c <__kernel_rem_pio2f+0x318>
 800ef10:	eb00 0802 	add.w	r8, r0, r2
 800ef14:	f04f 0c00 	mov.w	ip, #0
 800ef18:	45d4      	cmp	ip, sl
 800ef1a:	dd0c      	ble.n	800ef36 <__kernel_rem_pio2f+0x2f2>
 800ef1c:	eb02 0c07 	add.w	ip, r2, r7
 800ef20:	a842      	add	r0, sp, #264	; 0x108
 800ef22:	4484      	add	ip, r0
 800ef24:	edcc 7a01 	vstr	s15, [ip, #4]
 800ef28:	3101      	adds	r1, #1
 800ef2a:	3204      	adds	r2, #4
 800ef2c:	e7da      	b.n	800eee4 <__kernel_rem_pio2f+0x2a0>
 800ef2e:	9b04      	ldr	r3, [sp, #16]
 800ef30:	f04f 0c01 	mov.w	ip, #1
 800ef34:	e7c7      	b.n	800eec6 <__kernel_rem_pio2f+0x282>
 800ef36:	ecfe 6a01 	vldmia	lr!, {s13}
 800ef3a:	ed38 7a01 	vldmdb	r8!, {s14}
 800ef3e:	f10c 0c01 	add.w	ip, ip, #1
 800ef42:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ef46:	e7e7      	b.n	800ef18 <__kernel_rem_pio2f+0x2d4>
 800ef48:	3b01      	subs	r3, #1
 800ef4a:	e769      	b.n	800ee20 <__kernel_rem_pio2f+0x1dc>
 800ef4c:	08010694 	.word	0x08010694
 800ef50:	08010668 	.word	0x08010668
 800ef54:	43800000 	.word	0x43800000
 800ef58:	3b800000 	.word	0x3b800000
 800ef5c:	00000000 	.word	0x00000000
 800ef60:	4260      	negs	r0, r4
 800ef62:	eeb0 0a48 	vmov.f32	s0, s16
 800ef66:	f000 fcbb 	bl	800f8e0 <scalbnf>
 800ef6a:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800ef54 <__kernel_rem_pio2f+0x310>
 800ef6e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ef72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef76:	db1a      	blt.n	800efae <__kernel_rem_pio2f+0x36a>
 800ef78:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ef58 <__kernel_rem_pio2f+0x314>
 800ef7c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ef80:	aa06      	add	r2, sp, #24
 800ef82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef86:	a906      	add	r1, sp, #24
 800ef88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef8c:	3408      	adds	r4, #8
 800ef8e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ef92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef96:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ef9a:	ee10 3a10 	vmov	r3, s0
 800ef9e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800efa2:	1c6b      	adds	r3, r5, #1
 800efa4:	ee17 2a90 	vmov	r2, s15
 800efa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800efac:	e73f      	b.n	800ee2e <__kernel_rem_pio2f+0x1ea>
 800efae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800efb2:	aa06      	add	r2, sp, #24
 800efb4:	ee10 3a10 	vmov	r3, s0
 800efb8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800efbc:	462b      	mov	r3, r5
 800efbe:	e736      	b.n	800ee2e <__kernel_rem_pio2f+0x1ea>
 800efc0:	aa06      	add	r2, sp, #24
 800efc2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800efc6:	9202      	str	r2, [sp, #8]
 800efc8:	ee07 2a90 	vmov	s15, r2
 800efcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efd0:	3c01      	subs	r4, #1
 800efd2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800efd6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800efda:	ed65 7a01 	vstmdb	r5!, {s15}
 800efde:	e734      	b.n	800ee4a <__kernel_rem_pio2f+0x206>
 800efe0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800efe4:	ecf7 6a01 	vldmia	r7!, {s13}
 800efe8:	ed9c 7a00 	vldr	s14, [ip]
 800efec:	eee6 7a87 	vfma.f32	s15, s13, s14
 800eff0:	3401      	adds	r4, #1
 800eff2:	454c      	cmp	r4, r9
 800eff4:	dc01      	bgt.n	800effa <__kernel_rem_pio2f+0x3b6>
 800eff6:	42a5      	cmp	r5, r4
 800eff8:	daf2      	bge.n	800efe0 <__kernel_rem_pio2f+0x39c>
 800effa:	aa56      	add	r2, sp, #344	; 0x158
 800effc:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800f000:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800f004:	3501      	adds	r5, #1
 800f006:	3804      	subs	r0, #4
 800f008:	e723      	b.n	800ee52 <__kernel_rem_pio2f+0x20e>
 800f00a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f00c:	2a03      	cmp	r2, #3
 800f00e:	d84d      	bhi.n	800f0ac <__kernel_rem_pio2f+0x468>
 800f010:	e8df f002 	tbb	[pc, r2]
 800f014:	021f1f3e 	.word	0x021f1f3e
 800f018:	aa56      	add	r2, sp, #344	; 0x158
 800f01a:	4411      	add	r1, r2
 800f01c:	399c      	subs	r1, #156	; 0x9c
 800f01e:	4608      	mov	r0, r1
 800f020:	461c      	mov	r4, r3
 800f022:	2c00      	cmp	r4, #0
 800f024:	dc5f      	bgt.n	800f0e6 <__kernel_rem_pio2f+0x4a2>
 800f026:	4608      	mov	r0, r1
 800f028:	461c      	mov	r4, r3
 800f02a:	2c01      	cmp	r4, #1
 800f02c:	dc6b      	bgt.n	800f106 <__kernel_rem_pio2f+0x4c2>
 800f02e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800ef5c <__kernel_rem_pio2f+0x318>
 800f032:	2b01      	cmp	r3, #1
 800f034:	dc77      	bgt.n	800f126 <__kernel_rem_pio2f+0x4e2>
 800f036:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800f03a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800f03e:	f1b8 0f00 	cmp.w	r8, #0
 800f042:	d176      	bne.n	800f132 <__kernel_rem_pio2f+0x4ee>
 800f044:	edc6 6a00 	vstr	s13, [r6]
 800f048:	ed86 7a01 	vstr	s14, [r6, #4]
 800f04c:	edc6 7a02 	vstr	s15, [r6, #8]
 800f050:	e02c      	b.n	800f0ac <__kernel_rem_pio2f+0x468>
 800f052:	aa56      	add	r2, sp, #344	; 0x158
 800f054:	4411      	add	r1, r2
 800f056:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800ef5c <__kernel_rem_pio2f+0x318>
 800f05a:	399c      	subs	r1, #156	; 0x9c
 800f05c:	4618      	mov	r0, r3
 800f05e:	2800      	cmp	r0, #0
 800f060:	da32      	bge.n	800f0c8 <__kernel_rem_pio2f+0x484>
 800f062:	f1b8 0f00 	cmp.w	r8, #0
 800f066:	d035      	beq.n	800f0d4 <__kernel_rem_pio2f+0x490>
 800f068:	eef1 7a47 	vneg.f32	s15, s14
 800f06c:	edc6 7a00 	vstr	s15, [r6]
 800f070:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800f074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f078:	a82f      	add	r0, sp, #188	; 0xbc
 800f07a:	2101      	movs	r1, #1
 800f07c:	428b      	cmp	r3, r1
 800f07e:	da2c      	bge.n	800f0da <__kernel_rem_pio2f+0x496>
 800f080:	f1b8 0f00 	cmp.w	r8, #0
 800f084:	d001      	beq.n	800f08a <__kernel_rem_pio2f+0x446>
 800f086:	eef1 7a67 	vneg.f32	s15, s15
 800f08a:	edc6 7a01 	vstr	s15, [r6, #4]
 800f08e:	e00d      	b.n	800f0ac <__kernel_rem_pio2f+0x468>
 800f090:	aa56      	add	r2, sp, #344	; 0x158
 800f092:	4411      	add	r1, r2
 800f094:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800ef5c <__kernel_rem_pio2f+0x318>
 800f098:	399c      	subs	r1, #156	; 0x9c
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	da0e      	bge.n	800f0bc <__kernel_rem_pio2f+0x478>
 800f09e:	f1b8 0f00 	cmp.w	r8, #0
 800f0a2:	d001      	beq.n	800f0a8 <__kernel_rem_pio2f+0x464>
 800f0a4:	eef1 7a67 	vneg.f32	s15, s15
 800f0a8:	edc6 7a00 	vstr	s15, [r6]
 800f0ac:	9b01      	ldr	r3, [sp, #4]
 800f0ae:	f003 0007 	and.w	r0, r3, #7
 800f0b2:	b057      	add	sp, #348	; 0x15c
 800f0b4:	ecbd 8b04 	vpop	{d8-d9}
 800f0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0bc:	ed31 7a01 	vldmdb	r1!, {s14}
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f0c6:	e7e8      	b.n	800f09a <__kernel_rem_pio2f+0x456>
 800f0c8:	ed71 7a01 	vldmdb	r1!, {s15}
 800f0cc:	3801      	subs	r0, #1
 800f0ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f0d2:	e7c4      	b.n	800f05e <__kernel_rem_pio2f+0x41a>
 800f0d4:	eef0 7a47 	vmov.f32	s15, s14
 800f0d8:	e7c8      	b.n	800f06c <__kernel_rem_pio2f+0x428>
 800f0da:	ecb0 7a01 	vldmia	r0!, {s14}
 800f0de:	3101      	adds	r1, #1
 800f0e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f0e4:	e7ca      	b.n	800f07c <__kernel_rem_pio2f+0x438>
 800f0e6:	ed50 7a02 	vldr	s15, [r0, #-8]
 800f0ea:	ed70 6a01 	vldmdb	r0!, {s13}
 800f0ee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f0f2:	3c01      	subs	r4, #1
 800f0f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f0f8:	ed00 7a01 	vstr	s14, [r0, #-4]
 800f0fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f100:	edc0 7a00 	vstr	s15, [r0]
 800f104:	e78d      	b.n	800f022 <__kernel_rem_pio2f+0x3de>
 800f106:	ed50 7a02 	vldr	s15, [r0, #-8]
 800f10a:	ed70 6a01 	vldmdb	r0!, {s13}
 800f10e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f112:	3c01      	subs	r4, #1
 800f114:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f118:	ed00 7a01 	vstr	s14, [r0, #-4]
 800f11c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f120:	edc0 7a00 	vstr	s15, [r0]
 800f124:	e781      	b.n	800f02a <__kernel_rem_pio2f+0x3e6>
 800f126:	ed31 7a01 	vldmdb	r1!, {s14}
 800f12a:	3b01      	subs	r3, #1
 800f12c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f130:	e77f      	b.n	800f032 <__kernel_rem_pio2f+0x3ee>
 800f132:	eef1 6a66 	vneg.f32	s13, s13
 800f136:	eeb1 7a47 	vneg.f32	s14, s14
 800f13a:	edc6 6a00 	vstr	s13, [r6]
 800f13e:	ed86 7a01 	vstr	s14, [r6, #4]
 800f142:	eef1 7a67 	vneg.f32	s15, s15
 800f146:	e781      	b.n	800f04c <__kernel_rem_pio2f+0x408>

0800f148 <__kernel_tanf>:
 800f148:	b508      	push	{r3, lr}
 800f14a:	ee10 3a10 	vmov	r3, s0
 800f14e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f152:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800f156:	eef0 7a40 	vmov.f32	s15, s0
 800f15a:	da17      	bge.n	800f18c <__kernel_tanf+0x44>
 800f15c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800f160:	ee17 1a10 	vmov	r1, s14
 800f164:	bb41      	cbnz	r1, 800f1b8 <__kernel_tanf+0x70>
 800f166:	1c43      	adds	r3, r0, #1
 800f168:	4313      	orrs	r3, r2
 800f16a:	d108      	bne.n	800f17e <__kernel_tanf+0x36>
 800f16c:	f7fe fa18 	bl	800d5a0 <fabsf>
 800f170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f174:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f178:	eeb0 0a67 	vmov.f32	s0, s15
 800f17c:	bd08      	pop	{r3, pc}
 800f17e:	2801      	cmp	r0, #1
 800f180:	d0fa      	beq.n	800f178 <__kernel_tanf+0x30>
 800f182:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f186:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f18a:	e7f5      	b.n	800f178 <__kernel_tanf+0x30>
 800f18c:	494e      	ldr	r1, [pc, #312]	; (800f2c8 <__kernel_tanf+0x180>)
 800f18e:	428a      	cmp	r2, r1
 800f190:	dd12      	ble.n	800f1b8 <__kernel_tanf+0x70>
 800f192:	2b00      	cmp	r3, #0
 800f194:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f2cc <__kernel_tanf+0x184>
 800f198:	bfb8      	it	lt
 800f19a:	eef1 7a40 	vneglt.f32	s15, s0
 800f19e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1a2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800f2d0 <__kernel_tanf+0x188>
 800f1a6:	bfb8      	it	lt
 800f1a8:	eef1 0a60 	vneglt.f32	s1, s1
 800f1ac:	ee77 0a60 	vsub.f32	s1, s14, s1
 800f1b0:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800f1b4:	eddf 0a47 	vldr	s1, [pc, #284]	; 800f2d4 <__kernel_tanf+0x18c>
 800f1b8:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800f2d8 <__kernel_tanf+0x190>
 800f1bc:	eddf 5a47 	vldr	s11, [pc, #284]	; 800f2dc <__kernel_tanf+0x194>
 800f1c0:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800f2e0 <__kernel_tanf+0x198>
 800f1c4:	4940      	ldr	r1, [pc, #256]	; (800f2c8 <__kernel_tanf+0x180>)
 800f1c6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800f1ca:	428a      	cmp	r2, r1
 800f1cc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f1d0:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800f1d4:	eee7 5a06 	vfma.f32	s11, s14, s12
 800f1d8:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800f2e4 <__kernel_tanf+0x19c>
 800f1dc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f1e0:	eddf 5a41 	vldr	s11, [pc, #260]	; 800f2e8 <__kernel_tanf+0x1a0>
 800f1e4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f1e8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800f2ec <__kernel_tanf+0x1a4>
 800f1ec:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f1f0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800f2f0 <__kernel_tanf+0x1a8>
 800f1f4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f1f8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800f2f4 <__kernel_tanf+0x1ac>
 800f1fc:	eea7 6a05 	vfma.f32	s12, s14, s10
 800f200:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800f2f8 <__kernel_tanf+0x1b0>
 800f204:	eea6 5a07 	vfma.f32	s10, s12, s14
 800f208:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800f2fc <__kernel_tanf+0x1b4>
 800f20c:	eea5 6a07 	vfma.f32	s12, s10, s14
 800f210:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800f300 <__kernel_tanf+0x1b8>
 800f214:	eea6 5a07 	vfma.f32	s10, s12, s14
 800f218:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800f304 <__kernel_tanf+0x1bc>
 800f21c:	eea5 6a07 	vfma.f32	s12, s10, s14
 800f220:	eeb0 7a46 	vmov.f32	s14, s12
 800f224:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f228:	eeb0 6a60 	vmov.f32	s12, s1
 800f22c:	eea7 6a24 	vfma.f32	s12, s14, s9
 800f230:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800f308 <__kernel_tanf+0x1c0>
 800f234:	eee6 0a26 	vfma.f32	s1, s12, s13
 800f238:	eee4 0a87 	vfma.f32	s1, s9, s14
 800f23c:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800f240:	dd1d      	ble.n	800f27e <__kernel_tanf+0x136>
 800f242:	ee07 0a10 	vmov	s14, r0
 800f246:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f24a:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800f24e:	ee76 6a87 	vadd.f32	s13, s13, s14
 800f252:	179b      	asrs	r3, r3, #30
 800f254:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800f258:	f003 0302 	and.w	r3, r3, #2
 800f25c:	f1c3 0301 	rsb	r3, r3, #1
 800f260:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f264:	ee76 0a60 	vsub.f32	s1, s12, s1
 800f268:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f26c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f270:	ee07 3a90 	vmov	s15, r3
 800f274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f27c:	e77c      	b.n	800f178 <__kernel_tanf+0x30>
 800f27e:	2801      	cmp	r0, #1
 800f280:	d01f      	beq.n	800f2c2 <__kernel_tanf+0x17a>
 800f282:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f286:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800f28a:	4b20      	ldr	r3, [pc, #128]	; (800f30c <__kernel_tanf+0x1c4>)
 800f28c:	ee16 2a90 	vmov	r2, s13
 800f290:	401a      	ands	r2, r3
 800f292:	ee06 2a10 	vmov	s12, r2
 800f296:	ee15 2a90 	vmov	r2, s11
 800f29a:	4013      	ands	r3, r2
 800f29c:	ee07 3a10 	vmov	s14, r3
 800f2a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2a4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f2a8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f2ac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f2b0:	eef0 7a66 	vmov.f32	s15, s13
 800f2b4:	eee7 7a20 	vfma.f32	s15, s14, s1
 800f2b8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f2bc:	eef0 7a47 	vmov.f32	s15, s14
 800f2c0:	e75a      	b.n	800f178 <__kernel_tanf+0x30>
 800f2c2:	eef0 7a66 	vmov.f32	s15, s13
 800f2c6:	e757      	b.n	800f178 <__kernel_tanf+0x30>
 800f2c8:	3f2ca13f 	.word	0x3f2ca13f
 800f2cc:	3f490fda 	.word	0x3f490fda
 800f2d0:	33222168 	.word	0x33222168
 800f2d4:	00000000 	.word	0x00000000
 800f2d8:	37d95384 	.word	0x37d95384
 800f2dc:	3895c07a 	.word	0x3895c07a
 800f2e0:	b79bae5f 	.word	0xb79bae5f
 800f2e4:	398137b9 	.word	0x398137b9
 800f2e8:	3abede48 	.word	0x3abede48
 800f2ec:	3c11371f 	.word	0x3c11371f
 800f2f0:	3d5d0dd1 	.word	0x3d5d0dd1
 800f2f4:	38a3f445 	.word	0x38a3f445
 800f2f8:	3a1a26c8 	.word	0x3a1a26c8
 800f2fc:	3b6b6916 	.word	0x3b6b6916
 800f300:	3cb327a4 	.word	0x3cb327a4
 800f304:	3e088889 	.word	0x3e088889
 800f308:	3eaaaaab 	.word	0x3eaaaaab
 800f30c:	fffff000 	.word	0xfffff000

0800f310 <with_errnof>:
 800f310:	b510      	push	{r4, lr}
 800f312:	ed2d 8b02 	vpush	{d8}
 800f316:	eeb0 8a40 	vmov.f32	s16, s0
 800f31a:	4604      	mov	r4, r0
 800f31c:	f7fe f824 	bl	800d368 <__errno>
 800f320:	eeb0 0a48 	vmov.f32	s0, s16
 800f324:	ecbd 8b02 	vpop	{d8}
 800f328:	6004      	str	r4, [r0, #0]
 800f32a:	bd10      	pop	{r4, pc}

0800f32c <xflowf>:
 800f32c:	b130      	cbz	r0, 800f33c <xflowf+0x10>
 800f32e:	eef1 7a40 	vneg.f32	s15, s0
 800f332:	2022      	movs	r0, #34	; 0x22
 800f334:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f338:	f7ff bfea 	b.w	800f310 <with_errnof>
 800f33c:	eef0 7a40 	vmov.f32	s15, s0
 800f340:	e7f7      	b.n	800f332 <xflowf+0x6>
	...

0800f344 <__math_uflowf>:
 800f344:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f34c <__math_uflowf+0x8>
 800f348:	f7ff bff0 	b.w	800f32c <xflowf>
 800f34c:	10000000 	.word	0x10000000

0800f350 <__math_may_uflowf>:
 800f350:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f358 <__math_may_uflowf+0x8>
 800f354:	f7ff bfea 	b.w	800f32c <xflowf>
 800f358:	1a200000 	.word	0x1a200000

0800f35c <__math_oflowf>:
 800f35c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f364 <__math_oflowf+0x8>
 800f360:	f7ff bfe4 	b.w	800f32c <xflowf>
 800f364:	70000000 	.word	0x70000000

0800f368 <__math_divzerof>:
 800f368:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f36c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800f370:	2800      	cmp	r0, #0
 800f372:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800f376:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800f384 <__math_divzerof+0x1c>
 800f37a:	2022      	movs	r0, #34	; 0x22
 800f37c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800f380:	f7ff bfc6 	b.w	800f310 <with_errnof>
 800f384:	00000000 	.word	0x00000000

0800f388 <__math_invalidf>:
 800f388:	eef0 7a40 	vmov.f32	s15, s0
 800f38c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f390:	eef4 7a67 	vcmp.f32	s15, s15
 800f394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f398:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800f39c:	d602      	bvs.n	800f3a4 <__math_invalidf+0x1c>
 800f39e:	2021      	movs	r0, #33	; 0x21
 800f3a0:	f7ff bfb6 	b.w	800f310 <with_errnof>
 800f3a4:	4770      	bx	lr

0800f3a6 <fabs>:
 800f3a6:	ec51 0b10 	vmov	r0, r1, d0
 800f3aa:	ee10 2a10 	vmov	r2, s0
 800f3ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f3b2:	ec43 2b10 	vmov	d0, r2, r3
 800f3b6:	4770      	bx	lr

0800f3b8 <finite>:
 800f3b8:	ee10 3a90 	vmov	r3, s1
 800f3bc:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800f3c0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f3c4:	0fc0      	lsrs	r0, r0, #31
 800f3c6:	4770      	bx	lr

0800f3c8 <matherr>:
 800f3c8:	2000      	movs	r0, #0
 800f3ca:	4770      	bx	lr
 800f3cc:	0000      	movs	r0, r0
	...

0800f3d0 <nan>:
 800f3d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f3d8 <nan+0x8>
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop
 800f3d8:	00000000 	.word	0x00000000
 800f3dc:	7ff80000 	.word	0x7ff80000

0800f3e0 <rint>:
 800f3e0:	b530      	push	{r4, r5, lr}
 800f3e2:	b085      	sub	sp, #20
 800f3e4:	ed8d 0b00 	vstr	d0, [sp]
 800f3e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3ec:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800f3f0:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 800f3f4:	2813      	cmp	r0, #19
 800f3f6:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800f3fa:	dc5a      	bgt.n	800f4b2 <rint+0xd2>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	da2f      	bge.n	800f460 <rint+0x80>
 800f400:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f404:	4311      	orrs	r1, r2
 800f406:	d027      	beq.n	800f458 <rint+0x78>
 800f408:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800f40c:	4315      	orrs	r5, r2
 800f40e:	426a      	negs	r2, r5
 800f410:	432a      	orrs	r2, r5
 800f412:	0b12      	lsrs	r2, r2, #12
 800f414:	0c5b      	lsrs	r3, r3, #17
 800f416:	045b      	lsls	r3, r3, #17
 800f418:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800f41c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f420:	ea42 0103 	orr.w	r1, r2, r3
 800f424:	4b31      	ldr	r3, [pc, #196]	; (800f4ec <rint+0x10c>)
 800f426:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f42a:	ed93 6b00 	vldr	d6, [r3]
 800f42e:	ec41 0b17 	vmov	d7, r0, r1
 800f432:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f436:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f43a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f43e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f442:	ed8d 7b00 	vstr	d7, [sp]
 800f446:	9b01      	ldr	r3, [sp, #4]
 800f448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f44c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f450:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800f454:	e9cd 0100 	strd	r0, r1, [sp]
 800f458:	ed9d 0b00 	vldr	d0, [sp]
 800f45c:	b005      	add	sp, #20
 800f45e:	bd30      	pop	{r4, r5, pc}
 800f460:	4923      	ldr	r1, [pc, #140]	; (800f4f0 <rint+0x110>)
 800f462:	4101      	asrs	r1, r0
 800f464:	ea03 0501 	and.w	r5, r3, r1
 800f468:	4315      	orrs	r5, r2
 800f46a:	d0f5      	beq.n	800f458 <rint+0x78>
 800f46c:	0849      	lsrs	r1, r1, #1
 800f46e:	ea03 0501 	and.w	r5, r3, r1
 800f472:	432a      	orrs	r2, r5
 800f474:	d00b      	beq.n	800f48e <rint+0xae>
 800f476:	ea23 0101 	bic.w	r1, r3, r1
 800f47a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f47e:	2813      	cmp	r0, #19
 800f480:	fa43 f300 	asr.w	r3, r3, r0
 800f484:	bf0c      	ite	eq
 800f486:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800f48a:	2200      	movne	r2, #0
 800f48c:	430b      	orrs	r3, r1
 800f48e:	4619      	mov	r1, r3
 800f490:	4b16      	ldr	r3, [pc, #88]	; (800f4ec <rint+0x10c>)
 800f492:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f496:	ed94 6b00 	vldr	d6, [r4]
 800f49a:	4610      	mov	r0, r2
 800f49c:	ec41 0b17 	vmov	d7, r0, r1
 800f4a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f4a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f4a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f4b0:	e008      	b.n	800f4c4 <rint+0xe4>
 800f4b2:	2833      	cmp	r0, #51	; 0x33
 800f4b4:	dd09      	ble.n	800f4ca <rint+0xea>
 800f4b6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800f4ba:	d1cd      	bne.n	800f458 <rint+0x78>
 800f4bc:	ed9d 7b00 	vldr	d7, [sp]
 800f4c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f4c4:	ed8d 7b00 	vstr	d7, [sp]
 800f4c8:	e7c6      	b.n	800f458 <rint+0x78>
 800f4ca:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 800f4ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f4d2:	40c1      	lsrs	r1, r0
 800f4d4:	420a      	tst	r2, r1
 800f4d6:	d0bf      	beq.n	800f458 <rint+0x78>
 800f4d8:	0849      	lsrs	r1, r1, #1
 800f4da:	420a      	tst	r2, r1
 800f4dc:	bf1f      	itttt	ne
 800f4de:	ea22 0101 	bicne.w	r1, r2, r1
 800f4e2:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800f4e6:	4102      	asrne	r2, r0
 800f4e8:	430a      	orrne	r2, r1
 800f4ea:	e7d0      	b.n	800f48e <rint+0xae>
 800f4ec:	080106a0 	.word	0x080106a0
 800f4f0:	000fffff 	.word	0x000fffff
 800f4f4:	00000000 	.word	0x00000000

0800f4f8 <scalbn>:
 800f4f8:	b500      	push	{lr}
 800f4fa:	ed2d 8b02 	vpush	{d8}
 800f4fe:	b083      	sub	sp, #12
 800f500:	ed8d 0b00 	vstr	d0, [sp]
 800f504:	9b01      	ldr	r3, [sp, #4]
 800f506:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f50a:	b9a2      	cbnz	r2, 800f536 <scalbn+0x3e>
 800f50c:	9a00      	ldr	r2, [sp, #0]
 800f50e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f512:	4313      	orrs	r3, r2
 800f514:	d03a      	beq.n	800f58c <scalbn+0x94>
 800f516:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f5d0 <scalbn+0xd8>
 800f51a:	4b35      	ldr	r3, [pc, #212]	; (800f5f0 <scalbn+0xf8>)
 800f51c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f520:	4298      	cmp	r0, r3
 800f522:	ed8d 7b00 	vstr	d7, [sp]
 800f526:	da11      	bge.n	800f54c <scalbn+0x54>
 800f528:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800f5d8 <scalbn+0xe0>
 800f52c:	ed9d 6b00 	vldr	d6, [sp]
 800f530:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f534:	e007      	b.n	800f546 <scalbn+0x4e>
 800f536:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f53a:	428a      	cmp	r2, r1
 800f53c:	d10a      	bne.n	800f554 <scalbn+0x5c>
 800f53e:	ed9d 7b00 	vldr	d7, [sp]
 800f542:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f546:	ed8d 7b00 	vstr	d7, [sp]
 800f54a:	e01f      	b.n	800f58c <scalbn+0x94>
 800f54c:	9b01      	ldr	r3, [sp, #4]
 800f54e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f552:	3a36      	subs	r2, #54	; 0x36
 800f554:	4402      	add	r2, r0
 800f556:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f55a:	428a      	cmp	r2, r1
 800f55c:	dd0a      	ble.n	800f574 <scalbn+0x7c>
 800f55e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800f5e0 <scalbn+0xe8>
 800f562:	eeb0 0b48 	vmov.f64	d0, d8
 800f566:	ed9d 1b00 	vldr	d1, [sp]
 800f56a:	f000 fa19 	bl	800f9a0 <copysign>
 800f56e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800f572:	e7e8      	b.n	800f546 <scalbn+0x4e>
 800f574:	2a00      	cmp	r2, #0
 800f576:	dd10      	ble.n	800f59a <scalbn+0xa2>
 800f578:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f57c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f580:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f584:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f588:	e9cd 0100 	strd	r0, r1, [sp]
 800f58c:	ed9d 0b00 	vldr	d0, [sp]
 800f590:	b003      	add	sp, #12
 800f592:	ecbd 8b02 	vpop	{d8}
 800f596:	f85d fb04 	ldr.w	pc, [sp], #4
 800f59a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f59e:	da06      	bge.n	800f5ae <scalbn+0xb6>
 800f5a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f5a4:	4298      	cmp	r0, r3
 800f5a6:	dcda      	bgt.n	800f55e <scalbn+0x66>
 800f5a8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800f5d8 <scalbn+0xe0>
 800f5ac:	e7d9      	b.n	800f562 <scalbn+0x6a>
 800f5ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f5b6:	3236      	adds	r2, #54	; 0x36
 800f5b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f5bc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f5c0:	ec41 0b17 	vmov	d7, r0, r1
 800f5c4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800f5e8 <scalbn+0xf0>
 800f5c8:	e7b2      	b.n	800f530 <scalbn+0x38>
 800f5ca:	bf00      	nop
 800f5cc:	f3af 8000 	nop.w
 800f5d0:	00000000 	.word	0x00000000
 800f5d4:	43500000 	.word	0x43500000
 800f5d8:	c2f8f359 	.word	0xc2f8f359
 800f5dc:	01a56e1f 	.word	0x01a56e1f
 800f5e0:	8800759c 	.word	0x8800759c
 800f5e4:	7e37e43c 	.word	0x7e37e43c
 800f5e8:	00000000 	.word	0x00000000
 800f5ec:	3c900000 	.word	0x3c900000
 800f5f0:	ffff3cb0 	.word	0xffff3cb0

0800f5f4 <expm1f>:
 800f5f4:	ee10 2a10 	vmov	r2, s0
 800f5f8:	4984      	ldr	r1, [pc, #528]	; (800f80c <expm1f+0x218>)
 800f5fa:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800f5fe:	428b      	cmp	r3, r1
 800f600:	d923      	bls.n	800f64a <expm1f+0x56>
 800f602:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f606:	d902      	bls.n	800f60e <expm1f+0x1a>
 800f608:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f60c:	4770      	bx	lr
 800f60e:	d105      	bne.n	800f61c <expm1f+0x28>
 800f610:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800f614:	2a00      	cmp	r2, #0
 800f616:	fe20 0a27 	vselge.f32	s0, s0, s15
 800f61a:	4770      	bx	lr
 800f61c:	2a00      	cmp	r2, #0
 800f61e:	db08      	blt.n	800f632 <expm1f+0x3e>
 800f620:	4a7b      	ldr	r2, [pc, #492]	; (800f810 <expm1f+0x21c>)
 800f622:	4293      	cmp	r3, r2
 800f624:	f240 80ea 	bls.w	800f7fc <expm1f+0x208>
 800f628:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800f814 <expm1f+0x220>
 800f62c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f630:	4770      	bx	lr
 800f632:	eddf 7a79 	vldr	s15, [pc, #484]	; 800f818 <expm1f+0x224>
 800f636:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f63a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f642:	d554      	bpl.n	800f6ee <expm1f+0xfa>
 800f644:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f648:	4770      	bx	lr
 800f64a:	4974      	ldr	r1, [pc, #464]	; (800f81c <expm1f+0x228>)
 800f64c:	428b      	cmp	r3, r1
 800f64e:	d96c      	bls.n	800f72a <expm1f+0x136>
 800f650:	4973      	ldr	r1, [pc, #460]	; (800f820 <expm1f+0x22c>)
 800f652:	428b      	cmp	r3, r1
 800f654:	d84b      	bhi.n	800f6ee <expm1f+0xfa>
 800f656:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800f824 <expm1f+0x230>
 800f65a:	2a00      	cmp	r2, #0
 800f65c:	bfa7      	ittee	ge
 800f65e:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800f662:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800f828 <expm1f+0x234>
 800f666:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800f82c <expm1f+0x238>
 800f66a:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800f66e:	bfac      	ite	ge
 800f670:	2301      	movge	r3, #1
 800f672:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f676:	ee37 0a67 	vsub.f32	s0, s14, s15
 800f67a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800f67e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f682:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800f686:	ee20 5a25 	vmul.f32	s10, s0, s11
 800f68a:	eddf 6a69 	vldr	s13, [pc, #420]	; 800f830 <expm1f+0x23c>
 800f68e:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800f834 <expm1f+0x240>
 800f692:	ee20 7a05 	vmul.f32	s14, s0, s10
 800f696:	eea7 6a26 	vfma.f32	s12, s14, s13
 800f69a:	eddf 6a67 	vldr	s13, [pc, #412]	; 800f838 <expm1f+0x244>
 800f69e:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f6a2:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800f83c <expm1f+0x248>
 800f6a6:	eea6 6a87 	vfma.f32	s12, s13, s14
 800f6aa:	eddf 6a65 	vldr	s13, [pc, #404]	; 800f840 <expm1f+0x24c>
 800f6ae:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f6b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f6b6:	eef0 4a46 	vmov.f32	s9, s12
 800f6ba:	eee6 4a87 	vfma.f32	s9, s13, s14
 800f6be:	eef0 6a64 	vmov.f32	s13, s9
 800f6c2:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800f6c6:	eee5 4a66 	vfms.f32	s9, s10, s13
 800f6ca:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800f6ce:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800f6d2:	eee0 6a64 	vfms.f32	s13, s0, s9
 800f6d6:	eef0 4a66 	vmov.f32	s9, s13
 800f6da:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800f6de:	ee66 6a87 	vmul.f32	s13, s13, s14
 800f6e2:	bb83      	cbnz	r3, 800f746 <expm1f+0x152>
 800f6e4:	eef0 7a47 	vmov.f32	s15, s14
 800f6e8:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800f6ec:	e026      	b.n	800f73c <expm1f+0x148>
 800f6ee:	eddf 7a55 	vldr	s15, [pc, #340]	; 800f844 <expm1f+0x250>
 800f6f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f6f6:	ee20 7a27 	vmul.f32	s14, s0, s15
 800f6fa:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800f6fe:	2a00      	cmp	r2, #0
 800f700:	fe66 7aa7 	vselge.f32	s15, s13, s15
 800f704:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f708:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f824 <expm1f+0x230>
 800f70c:	eddf 6a46 	vldr	s13, [pc, #280]	; 800f828 <expm1f+0x234>
 800f710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f714:	ee17 3a90 	vmov	r3, s15
 800f718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f71c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f720:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f724:	eeb0 7a40 	vmov.f32	s14, s0
 800f728:	e7a5      	b.n	800f676 <expm1f+0x82>
 800f72a:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800f72e:	d208      	bcs.n	800f742 <expm1f+0x14e>
 800f730:	eddf 7a38 	vldr	s15, [pc, #224]	; 800f814 <expm1f+0x220>
 800f734:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f738:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800f73c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f740:	4770      	bx	lr
 800f742:	2300      	movs	r3, #0
 800f744:	e79d      	b.n	800f682 <expm1f+0x8e>
 800f746:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f74a:	1c5a      	adds	r2, r3, #1
 800f74c:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800f750:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f754:	d106      	bne.n	800f764 <expm1f+0x170>
 800f756:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f75a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800f75e:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800f762:	4770      	bx	lr
 800f764:	2b01      	cmp	r3, #1
 800f766:	d118      	bne.n	800f79a <expm1f+0x1a6>
 800f768:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800f76c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f774:	bf41      	itttt	mi
 800f776:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800f77a:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800f77e:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800f782:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800f786:	bf5f      	itttt	pl
 800f788:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800f78c:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800f790:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800f794:	eeb0 0a46 	vmovpl.f32	s0, s12
 800f798:	4770      	bx	lr
 800f79a:	1c5a      	adds	r2, r3, #1
 800f79c:	2a39      	cmp	r2, #57	; 0x39
 800f79e:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800f7a2:	d90b      	bls.n	800f7bc <expm1f+0x1c8>
 800f7a4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f7a8:	ee36 0a40 	vsub.f32	s0, s12, s0
 800f7ac:	ee10 3a10 	vmov	r3, s0
 800f7b0:	440b      	add	r3, r1
 800f7b2:	ee00 3a10 	vmov	s0, r3
 800f7b6:	ee30 0a46 	vsub.f32	s0, s0, s12
 800f7ba:	4770      	bx	lr
 800f7bc:	2b16      	cmp	r3, #22
 800f7be:	dc11      	bgt.n	800f7e4 <expm1f+0x1f0>
 800f7c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f7c4:	fa42 f303 	asr.w	r3, r2, r3
 800f7c8:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800f7cc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f7d0:	ee07 3a90 	vmov	s15, r3
 800f7d4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f7d8:	ee10 3a10 	vmov	r3, s0
 800f7dc:	440b      	add	r3, r1
 800f7de:	ee00 3a10 	vmov	s0, r3
 800f7e2:	4770      	bx	lr
 800f7e4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800f7e8:	05db      	lsls	r3, r3, #23
 800f7ea:	ee07 3a10 	vmov	s14, r3
 800f7ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f7f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f7f6:	ee30 0a06 	vadd.f32	s0, s0, s12
 800f7fa:	e7ed      	b.n	800f7d8 <expm1f+0x1e4>
 800f7fc:	eddf 7a11 	vldr	s15, [pc, #68]	; 800f844 <expm1f+0x250>
 800f800:	ee20 7a27 	vmul.f32	s14, s0, s15
 800f804:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f808:	e77c      	b.n	800f704 <expm1f+0x110>
 800f80a:	bf00      	nop
 800f80c:	4195b843 	.word	0x4195b843
 800f810:	42b17217 	.word	0x42b17217
 800f814:	7149f2ca 	.word	0x7149f2ca
 800f818:	0da24260 	.word	0x0da24260
 800f81c:	3eb17218 	.word	0x3eb17218
 800f820:	3f851591 	.word	0x3f851591
 800f824:	3f317180 	.word	0x3f317180
 800f828:	3717f7d1 	.word	0x3717f7d1
 800f82c:	b717f7d1 	.word	0xb717f7d1
 800f830:	b457edbb 	.word	0xb457edbb
 800f834:	36867e54 	.word	0x36867e54
 800f838:	b8a670cd 	.word	0xb8a670cd
 800f83c:	3ad00d01 	.word	0x3ad00d01
 800f840:	bd088889 	.word	0xbd088889
 800f844:	3fb8aa3b 	.word	0x3fb8aa3b

0800f848 <finitef>:
 800f848:	ee10 3a10 	vmov	r3, s0
 800f84c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800f850:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800f854:	bfac      	ite	ge
 800f856:	2000      	movge	r0, #0
 800f858:	2001      	movlt	r0, #1
 800f85a:	4770      	bx	lr

0800f85c <floorf>:
 800f85c:	ee10 3a10 	vmov	r3, s0
 800f860:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f864:	0dca      	lsrs	r2, r1, #23
 800f866:	3a7f      	subs	r2, #127	; 0x7f
 800f868:	2a16      	cmp	r2, #22
 800f86a:	dc2a      	bgt.n	800f8c2 <floorf+0x66>
 800f86c:	2a00      	cmp	r2, #0
 800f86e:	da11      	bge.n	800f894 <floorf+0x38>
 800f870:	eddf 7a18 	vldr	s15, [pc, #96]	; 800f8d4 <floorf+0x78>
 800f874:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f878:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f880:	dd05      	ble.n	800f88e <floorf+0x32>
 800f882:	2b00      	cmp	r3, #0
 800f884:	da23      	bge.n	800f8ce <floorf+0x72>
 800f886:	4a14      	ldr	r2, [pc, #80]	; (800f8d8 <floorf+0x7c>)
 800f888:	2900      	cmp	r1, #0
 800f88a:	bf18      	it	ne
 800f88c:	4613      	movne	r3, r2
 800f88e:	ee00 3a10 	vmov	s0, r3
 800f892:	4770      	bx	lr
 800f894:	4911      	ldr	r1, [pc, #68]	; (800f8dc <floorf+0x80>)
 800f896:	4111      	asrs	r1, r2
 800f898:	420b      	tst	r3, r1
 800f89a:	d0fa      	beq.n	800f892 <floorf+0x36>
 800f89c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f8d4 <floorf+0x78>
 800f8a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f8a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ac:	ddef      	ble.n	800f88e <floorf+0x32>
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	bfbe      	ittt	lt
 800f8b2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800f8b6:	fa40 f202 	asrlt.w	r2, r0, r2
 800f8ba:	189b      	addlt	r3, r3, r2
 800f8bc:	ea23 0301 	bic.w	r3, r3, r1
 800f8c0:	e7e5      	b.n	800f88e <floorf+0x32>
 800f8c2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f8c6:	d3e4      	bcc.n	800f892 <floorf+0x36>
 800f8c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f8cc:	4770      	bx	lr
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	e7dd      	b.n	800f88e <floorf+0x32>
 800f8d2:	bf00      	nop
 800f8d4:	7149f2ca 	.word	0x7149f2ca
 800f8d8:	bf800000 	.word	0xbf800000
 800f8dc:	007fffff 	.word	0x007fffff

0800f8e0 <scalbnf>:
 800f8e0:	b508      	push	{r3, lr}
 800f8e2:	ee10 2a10 	vmov	r2, s0
 800f8e6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800f8ea:	ed2d 8b02 	vpush	{d8}
 800f8ee:	eef0 0a40 	vmov.f32	s1, s0
 800f8f2:	d004      	beq.n	800f8fe <scalbnf+0x1e>
 800f8f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f8f8:	d306      	bcc.n	800f908 <scalbnf+0x28>
 800f8fa:	ee70 0a00 	vadd.f32	s1, s0, s0
 800f8fe:	ecbd 8b02 	vpop	{d8}
 800f902:	eeb0 0a60 	vmov.f32	s0, s1
 800f906:	bd08      	pop	{r3, pc}
 800f908:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f90c:	d21c      	bcs.n	800f948 <scalbnf+0x68>
 800f90e:	4b1f      	ldr	r3, [pc, #124]	; (800f98c <scalbnf+0xac>)
 800f910:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f990 <scalbnf+0xb0>
 800f914:	4298      	cmp	r0, r3
 800f916:	ee60 0a27 	vmul.f32	s1, s0, s15
 800f91a:	db10      	blt.n	800f93e <scalbnf+0x5e>
 800f91c:	ee10 2a90 	vmov	r2, s1
 800f920:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800f924:	3b19      	subs	r3, #25
 800f926:	4403      	add	r3, r0
 800f928:	2bfe      	cmp	r3, #254	; 0xfe
 800f92a:	dd0f      	ble.n	800f94c <scalbnf+0x6c>
 800f92c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800f994 <scalbnf+0xb4>
 800f930:	eeb0 0a48 	vmov.f32	s0, s16
 800f934:	f000 f843 	bl	800f9be <copysignf>
 800f938:	ee60 0a08 	vmul.f32	s1, s0, s16
 800f93c:	e7df      	b.n	800f8fe <scalbnf+0x1e>
 800f93e:	eddf 7a16 	vldr	s15, [pc, #88]	; 800f998 <scalbnf+0xb8>
 800f942:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f946:	e7da      	b.n	800f8fe <scalbnf+0x1e>
 800f948:	0ddb      	lsrs	r3, r3, #23
 800f94a:	e7ec      	b.n	800f926 <scalbnf+0x46>
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	dd06      	ble.n	800f95e <scalbnf+0x7e>
 800f950:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f954:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f958:	ee00 3a90 	vmov	s1, r3
 800f95c:	e7cf      	b.n	800f8fe <scalbnf+0x1e>
 800f95e:	f113 0f16 	cmn.w	r3, #22
 800f962:	da06      	bge.n	800f972 <scalbnf+0x92>
 800f964:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f968:	4298      	cmp	r0, r3
 800f96a:	dcdf      	bgt.n	800f92c <scalbnf+0x4c>
 800f96c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800f998 <scalbnf+0xb8>
 800f970:	e7de      	b.n	800f930 <scalbnf+0x50>
 800f972:	3319      	adds	r3, #25
 800f974:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f978:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f97c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f99c <scalbnf+0xbc>
 800f980:	ee07 3a10 	vmov	s14, r3
 800f984:	ee67 0a27 	vmul.f32	s1, s14, s15
 800f988:	e7b9      	b.n	800f8fe <scalbnf+0x1e>
 800f98a:	bf00      	nop
 800f98c:	ffff3cb0 	.word	0xffff3cb0
 800f990:	4c000000 	.word	0x4c000000
 800f994:	7149f2ca 	.word	0x7149f2ca
 800f998:	0da24260 	.word	0x0da24260
 800f99c:	33000000 	.word	0x33000000

0800f9a0 <copysign>:
 800f9a0:	ec51 0b10 	vmov	r0, r1, d0
 800f9a4:	ee11 0a90 	vmov	r0, s3
 800f9a8:	ee10 2a10 	vmov	r2, s0
 800f9ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f9b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800f9b4:	ea41 0300 	orr.w	r3, r1, r0
 800f9b8:	ec43 2b10 	vmov	d0, r2, r3
 800f9bc:	4770      	bx	lr

0800f9be <copysignf>:
 800f9be:	ee10 3a10 	vmov	r3, s0
 800f9c2:	ee10 2a90 	vmov	r2, s1
 800f9c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	ee00 3a10 	vmov	s0, r3
 800f9d4:	4770      	bx	lr
	...

0800f9d8 <_init>:
 800f9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9da:	bf00      	nop
 800f9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9de:	bc08      	pop	{r3}
 800f9e0:	469e      	mov	lr, r3
 800f9e2:	4770      	bx	lr

0800f9e4 <_fini>:
 800f9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9e6:	bf00      	nop
 800f9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9ea:	bc08      	pop	{r3}
 800f9ec:	469e      	mov	lr, r3
 800f9ee:	4770      	bx	lr


cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c3c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08010ed4  08010ed4  00020ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113b0  080113b0  00030018  2**0
                  CONTENTS
  4 .ARM          00000000  080113b0  080113b0  00030018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080113b0  080113b0  00030018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080113b0  080113b0  000213b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080113b4  080113b4  000213b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080113b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d84c  20000018  080113d0  00030018  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  2000d864  080113d0  0003d864  2**0
                  ALLOC
 11 .RAM_D2       00003840  30000000  30000000  00040000  2**5
                  ALLOC
 12 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030018  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003b9f4  00000000  00000000  00030046  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006100  00000000  00000000  0006ba3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001d40  00000000  00000000  00071b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ae0  00000000  00000000  00073880  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003e8a0  00000000  00000000  00075360  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000223f3  00000000  00000000  000b3c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001766b1  00000000  00000000  000d5ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0024c6a4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007a24  00000000  00000000  0024c720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000018 	.word	0x20000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010ebc 	.word	0x08010ebc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000001c 	.word	0x2000001c
 80002d4:	08010ebc 	.word	0x08010ebc

080002d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002de:	2003      	movs	r0, #3
 80002e0:	f001 fd9c 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80002e4:	f005 fa4c 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 80002e8:	4601      	mov	r1, r0
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <HAL_Init+0x68>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	f003 030f 	and.w	r3, r3, #15
 80002f4:	4a13      	ldr	r2, [pc, #76]	; (8000344 <HAL_Init+0x6c>)
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	f003 031f 	and.w	r3, r3, #31
 80002fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000300:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_Init+0x68>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 030f 	and.w	r3, r3, #15
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_Init+0x6c>)
 800030c:	5cd3      	ldrb	r3, [r2, r3]
 800030e:	f003 031f 	and.w	r3, r3, #31
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	fa22 f303 	lsr.w	r3, r2, r3
 8000318:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <HAL_Init+0x70>)
 800031a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800031c:	4a0b      	ldr	r2, [pc, #44]	; (800034c <HAL_Init+0x74>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f814 	bl	8000350 <HAL_InitTick>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800032e:	2301      	movs	r3, #1
 8000330:	e002      	b.n	8000338 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000332:	f010 fbfd 	bl	8010b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000336:	2300      	movs	r3, #0
}
 8000338:	4618      	mov	r0, r3
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	58024400 	.word	0x58024400
 8000344:	08011378 	.word	0x08011378
 8000348:	20000014 	.word	0x20000014
 800034c:	20000010 	.word	0x20000010

08000350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <HAL_InitTick+0x60>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d101      	bne.n	8000364 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000360:	2301      	movs	r3, #1
 8000362:	e021      	b.n	80003a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <HAL_InitTick+0x64>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <HAL_InitTick+0x60>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	4619      	mov	r1, r3
 800036e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000372:	fbb3 f3f1 	udiv	r3, r3, r1
 8000376:	fbb2 f3f3 	udiv	r3, r2, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f001 fd81 	bl	8001e82 <HAL_SYSTICK_Config>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000386:	2301      	movs	r3, #1
 8000388:	e00e      	b.n	80003a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b0f      	cmp	r3, #15
 800038e:	d80a      	bhi.n	80003a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000390:	2200      	movs	r2, #0
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000398:	f001 fd4b 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800039c:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <HAL_InitTick+0x68>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003a2:	2300      	movs	r3, #0
 80003a4:	e000      	b.n	80003a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80003a6:	2301      	movs	r3, #1
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000004 	.word	0x20000004
 80003b4:	20000010 	.word	0x20000010
 80003b8:	20000000 	.word	0x20000000

080003bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <HAL_IncTick+0x20>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_IncTick+0x24>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4413      	add	r3, r2
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <HAL_IncTick+0x24>)
 80003ce:	6013      	str	r3, [r2, #0]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000004 	.word	0x20000004
 80003e0:	2000028c 	.word	0x2000028c

080003e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  return uwTick;
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <HAL_GetTick+0x14>)
 80003ea:	681b      	ldr	r3, [r3, #0]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	2000028c 	.word	0x2000028c

080003fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000404:	f7ff ffee 	bl	80003e4 <HAL_GetTick>
 8000408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000414:	d005      	beq.n	8000422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <HAL_Delay+0x40>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	461a      	mov	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4413      	add	r3, r2
 8000420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000422:	bf00      	nop
 8000424:	f7ff ffde 	bl	80003e4 <HAL_GetTick>
 8000428:	4602      	mov	r2, r0
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	429a      	cmp	r2, r3
 8000432:	d8f7      	bhi.n	8000424 <HAL_Delay+0x28>
  {
  }
}
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000004 	.word	0x20000004

08000440 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <HAL_GetREVID+0x14>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	0c1b      	lsrs	r3, r3, #16
}
 800044a:	4618      	mov	r0, r3
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	5c001000 	.word	0x5c001000

08000458 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <HAL_SetFMCMemorySwappingConfig+0x24>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8000468:	4904      	ldr	r1, [pc, #16]	; (800047c <HAL_SetFMCMemorySwappingConfig+0x24>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4313      	orrs	r3, r2
 800046e:	600b      	str	r3, [r1, #0]
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	52004000 	.word	0x52004000

08000480 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	431a      	orrs	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	609a      	str	r2, [r3, #8]
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b083      	sub	sp, #12
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
 80004ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	431a      	orrs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	609a      	str	r2, [r3, #8]
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80004dc:	4618      	mov	r0, r3
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80004e8:	b490      	push	{r4, r7}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
 80004f4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	3360      	adds	r3, #96	; 0x60
 80004fa:	461a      	mov	r2, r3
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	4413      	add	r3, r2
 8000502:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000504:	6823      	ldr	r3, [r4, #0]
 8000506:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	430b      	orrs	r3, r1
 8000514:	4313      	orrs	r3, r2
 8000516:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bc90      	pop	{r4, r7}
 8000520:	4770      	bx	lr

08000522 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000522:	b480      	push	{r7}
 8000524:	b085      	sub	sp, #20
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	f003 031f 	and.w	r3, r3, #31
 800053c:	6879      	ldr	r1, [r7, #4]
 800053e:	fa01 f303 	lsl.w	r3, r1, r3
 8000542:	431a      	orrs	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	611a      	str	r2, [r3, #16]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000554:	b490      	push	{r4, r7}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3360      	adds	r3, #96	; 0x60
 8000564:	461a      	mov	r2, r3
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4313      	orrs	r3, r2
 8000578:	6023      	str	r3, [r4, #0]
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bc90      	pop	{r4, r7}
 8000582:	4770      	bx	lr

08000584 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000594:	2b00      	cmp	r3, #0
 8000596:	d101      	bne.n	800059c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000598:	2301      	movs	r3, #1
 800059a:	e000      	b.n	800059e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80005aa:	b490      	push	{r4, r7}
 80005ac:	b084      	sub	sp, #16
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	3330      	adds	r3, #48	; 0x30
 80005ba:	461a      	mov	r2, r3
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	0a1b      	lsrs	r3, r3, #8
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	f003 030c 	and.w	r3, r3, #12
 80005c6:	4413      	add	r3, r2
 80005c8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80005ca:	6822      	ldr	r2, [r4, #0]
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	f003 031f 	and.w	r3, r3, #31
 80005d2:	211f      	movs	r1, #31
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	43db      	mvns	r3, r3
 80005da:	401a      	ands	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	0e9b      	lsrs	r3, r3, #26
 80005e0:	f003 011f 	and.w	r1, r3, #31
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	f003 031f 	and.w	r3, r3, #31
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	4313      	orrs	r3, r2
 80005f0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc90      	pop	{r4, r7}
 80005fa:	4770      	bx	lr

080005fc <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	f023 0203 	bic.w	r2, r3, #3
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	431a      	orrs	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60da      	str	r2, [r3, #12]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000622:	b490      	push	{r4, r7}
 8000624:	b084      	sub	sp, #16
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3314      	adds	r3, #20
 8000632:	461a      	mov	r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	0e5b      	lsrs	r3, r3, #25
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	4413      	add	r3, r2
 8000640:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000642:	6822      	ldr	r2, [r4, #0]
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	0d1b      	lsrs	r3, r3, #20
 8000648:	f003 031f 	and.w	r3, r3, #31
 800064c:	2107      	movs	r1, #7
 800064e:	fa01 f303 	lsl.w	r3, r1, r3
 8000652:	43db      	mvns	r3, r3
 8000654:	401a      	ands	r2, r3
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	0d1b      	lsrs	r3, r3, #20
 800065a:	f003 031f 	and.w	r3, r3, #31
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	fa01 f303 	lsl.w	r3, r1, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bc90      	pop	{r4, r7}
 8000670:	4770      	bx	lr
	...

08000674 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800068c:	43db      	mvns	r3, r3
 800068e:	401a      	ands	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f003 0318 	and.w	r3, r3, #24
 8000696:	4908      	ldr	r1, [pc, #32]	; (80006b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000698:	40d9      	lsrs	r1, r3
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	400b      	ands	r3, r1
 800069e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80006a2:	431a      	orrs	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	000fffff 	.word	0x000fffff

080006bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	f003 031f 	and.w	r3, r3, #31
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	689a      	ldr	r2, [r3, #8]
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	6093      	str	r3, [r2, #8]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	5fffffc0 	.word	0x5fffffc0

080006fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800070c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000710:	d101      	bne.n	8000716 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000712:	2301      	movs	r3, #1
 8000714:	e000      	b.n	8000718 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	689a      	ldr	r2, [r3, #8]
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <LL_ADC_EnableInternalRegulator+0x24>)
 8000732:	4013      	ands	r3, r2
 8000734:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	6fffffc0 	.word	0x6fffffc0

0800074c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000760:	d101      	bne.n	8000766 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <LL_ADC_Enable+0x24>)
 8000782:	4013      	ands	r3, r2
 8000784:	f043 0201 	orr.w	r2, r3, #1
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	7fffffc0 	.word	0x7fffffc0

0800079c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <LL_ADC_Disable+0x24>)
 80007aa:	4013      	ands	r3, r2
 80007ac:	f043 0202 	orr.w	r2, r3, #2
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	7fffffc0 	.word	0x7fffffc0

080007c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d101      	bne.n	80007dc <LL_ADC_IsEnabled+0x18>
 80007d8:	2301      	movs	r3, #1
 80007da:	e000      	b.n	80007de <LL_ADC_IsEnabled+0x1a>
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d101      	bne.n	8000802 <LL_ADC_IsDisableOngoing+0x18>
 80007fe:	2301      	movs	r3, #1
 8000800:	e000      	b.n	8000804 <LL_ADC_IsDisableOngoing+0x1a>
 8000802:	2300      	movs	r3, #0
}
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <LL_ADC_REG_StartConversion+0x24>)
 800081e:	4013      	ands	r3, r2
 8000820:	f043 0204 	orr.w	r2, r3, #4
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	7fffffc0 	.word	0x7fffffc0

08000838 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	689a      	ldr	r2, [r3, #8]
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <LL_ADC_REG_StopConversion+0x24>)
 8000846:	4013      	ands	r3, r2
 8000848:	f043 0210 	orr.w	r2, r3, #16
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	7fffffc0 	.word	0x7fffffc0

08000860 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	2b04      	cmp	r3, #4
 8000872:	d101      	bne.n	8000878 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000874:	2301      	movs	r3, #1
 8000876:	e000      	b.n	800087a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <LL_ADC_INJ_StopConversion+0x24>)
 8000896:	4013      	ands	r3, r2
 8000898:	f043 0220 	orr.w	r2, r3, #32
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	7fffffc0 	.word	0x7fffffc0

080008b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	2b08      	cmp	r3, #8
 80008c2:	d101      	bne.n	80008c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80008c4:	2301      	movs	r3, #1
 80008c6:	e000      	b.n	80008ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b089      	sub	sp, #36	; 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008e0:	2300      	movs	r3, #0
 80008e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d101      	bne.n	80008f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e18e      	b.n	8000c10 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d109      	bne.n	8000914 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f00e fa23 	bl	800ed4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff feef 	bl	80006fc <LL_ADC_IsDeepPowerDownEnabled>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d004      	beq.n	800092e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fed5 	bl	80006d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff0a 	bl	800074c <LL_ADC_IsInternalRegulatorEnabled>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d113      	bne.n	8000966 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff feee 	bl	8000724 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000948:	4b9a      	ldr	r3, [pc, #616]	; (8000bb4 <HAL_ADC_Init+0x2dc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	099b      	lsrs	r3, r3, #6
 800094e:	4a9a      	ldr	r2, [pc, #616]	; (8000bb8 <HAL_ADC_Init+0x2e0>)
 8000950:	fba2 2303 	umull	r2, r3, r2, r3
 8000954:	099b      	lsrs	r3, r3, #6
 8000956:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000958:	e002      	b.n	8000960 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	3b01      	subs	r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1f9      	bne.n	800095a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff feee 	bl	800074c <LL_ADC_IsInternalRegulatorEnabled>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10d      	bne.n	8000992 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800097a:	f043 0210 	orr.w	r2, r3, #16
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	f043 0201 	orr.w	r2, r3, #1
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff62 	bl	8000860 <LL_ADC_REG_IsConversionOngoing>
 800099c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009a2:	f003 0310 	and.w	r3, r3, #16
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8129 	bne.w	8000bfe <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f040 8125 	bne.w	8000bfe <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80009bc:	f043 0202 	orr.w	r2, r3, #2
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fefb 	bl	80007c4 <LL_ADC_IsEnabled>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d136      	bne.n	8000a42 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a78      	ldr	r2, [pc, #480]	; (8000bbc <HAL_ADC_Init+0x2e4>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d004      	beq.n	80009e8 <HAL_ADC_Init+0x110>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a77      	ldr	r2, [pc, #476]	; (8000bc0 <HAL_ADC_Init+0x2e8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d10e      	bne.n	8000a06 <HAL_ADC_Init+0x12e>
 80009e8:	4874      	ldr	r0, [pc, #464]	; (8000bbc <HAL_ADC_Init+0x2e4>)
 80009ea:	f7ff feeb 	bl	80007c4 <LL_ADC_IsEnabled>
 80009ee:	4604      	mov	r4, r0
 80009f0:	4873      	ldr	r0, [pc, #460]	; (8000bc0 <HAL_ADC_Init+0x2e8>)
 80009f2:	f7ff fee7 	bl	80007c4 <LL_ADC_IsEnabled>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4323      	orrs	r3, r4
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bf0c      	ite	eq
 80009fe:	2301      	moveq	r3, #1
 8000a00:	2300      	movne	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	e008      	b.n	8000a18 <HAL_ADC_Init+0x140>
 8000a06:	486f      	ldr	r0, [pc, #444]	; (8000bc4 <HAL_ADC_Init+0x2ec>)
 8000a08:	f7ff fedc 	bl	80007c4 <LL_ADC_IsEnabled>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf0c      	ite	eq
 8000a12:	2301      	moveq	r3, #1
 8000a14:	2300      	movne	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d012      	beq.n	8000a42 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a66      	ldr	r2, [pc, #408]	; (8000bbc <HAL_ADC_Init+0x2e4>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d004      	beq.n	8000a30 <HAL_ADC_Init+0x158>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a65      	ldr	r2, [pc, #404]	; (8000bc0 <HAL_ADC_Init+0x2e8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d101      	bne.n	8000a34 <HAL_ADC_Init+0x15c>
 8000a30:	4a65      	ldr	r2, [pc, #404]	; (8000bc8 <HAL_ADC_Init+0x2f0>)
 8000a32:	e000      	b.n	8000a36 <HAL_ADC_Init+0x15e>
 8000a34:	4a65      	ldr	r2, [pc, #404]	; (8000bcc <HAL_ADC_Init+0x2f4>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	f7ff fd1f 	bl	8000480 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000a42:	f7ff fcfd 	bl	8000440 <HAL_GetREVID>
 8000a46:	4602      	mov	r2, r0
 8000a48:	f241 0303 	movw	r3, #4099	; 0x1003
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d914      	bls.n	8000a7a <HAL_ADC_Init+0x1a2>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	2b10      	cmp	r3, #16
 8000a56:	d110      	bne.n	8000a7a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7d5b      	ldrb	r3, [r3, #21]
 8000a5c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000a62:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000a68:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7f1b      	ldrb	r3, [r3, #28]
 8000a6e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000a70:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000a72:	f043 030c 	orr.w	r3, r3, #12
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	e00d      	b.n	8000a96 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7d5b      	ldrb	r3, [r3, #21]
 8000a7e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000a84:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000a8a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7f1b      	ldrb	r3, [r3, #28]
 8000a90:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000a92:	4313      	orrs	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7f1b      	ldrb	r3, [r3, #28]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d106      	bne.n	8000aac <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	045b      	lsls	r3, r3, #17
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d009      	beq.n	8000ac8 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	68da      	ldr	r2, [r3, #12]
 8000ace:	4b40      	ldr	r3, [pc, #256]	; (8000bd0 <HAL_ADC_Init+0x2f8>)
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	69b9      	ldr	r1, [r7, #24]
 8000ad8:	430b      	orrs	r3, r1
 8000ada:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff febd 	bl	8000860 <LL_ADC_REG_IsConversionOngoing>
 8000ae6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fedf 	bl	80008b0 <LL_ADC_INJ_IsConversionOngoing>
 8000af2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14a      	bne.n	8000b90 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d147      	bne.n	8000b90 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	7d1b      	ldrb	r3, [r3, #20]
 8000b04:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <HAL_ADC_Init+0x2fc>)
 8000b16:	4013      	ands	r3, r2
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	69b9      	ldr	r1, [r7, #24]
 8000b1e:	430b      	orrs	r3, r1
 8000b20:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d11b      	bne.n	8000b64 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b30:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	691a      	ldr	r2, [r3, #16]
 8000b38:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <HAL_ADC_Init+0x300>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000b40:	3a01      	subs	r2, #1
 8000b42:	0411      	lsls	r1, r2, #16
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b48:	4311      	orrs	r1, r2
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b4e:	4311      	orrs	r1, r2
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000b54:	430a      	orrs	r2, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f042 0201 	orr.w	r2, r2, #1
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	e007      	b.n	8000b74 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	691a      	ldr	r2, [r3, #16]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0201 	bic.w	r2, r2, #1
 8000b72:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	430a      	orrs	r2, r1
 8000b88:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fe7e 	bl	800188c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d121      	bne.n	8000bdc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f023 010f 	bic.w	r1, r3, #15
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	1e5a      	subs	r2, r3, #1
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	430a      	orrs	r2, r1
 8000bae:	631a      	str	r2, [r3, #48]	; 0x30
 8000bb0:	e01c      	b.n	8000bec <HAL_ADC_Init+0x314>
 8000bb2:	bf00      	nop
 8000bb4:	20000010 	.word	0x20000010
 8000bb8:	053e2d63 	.word	0x053e2d63
 8000bbc:	40022000 	.word	0x40022000
 8000bc0:	40022100 	.word	0x40022100
 8000bc4:	58026000 	.word	0x58026000
 8000bc8:	40022300 	.word	0x40022300
 8000bcc:	58026300 	.word	0x58026300
 8000bd0:	fff0c003 	.word	0xfff0c003
 8000bd4:	ffffbffc 	.word	0xffffbffc
 8000bd8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f022 020f 	bic.w	r2, r2, #15
 8000bea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bf0:	f023 0303 	bic.w	r3, r3, #3
 8000bf4:	f043 0201 	orr.w	r2, r3, #1
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	655a      	str	r2, [r3, #84]	; 0x54
 8000bfc:	e007      	b.n	8000c0e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c02:	f043 0210 	orr.w	r2, r3, #16
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000c0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3724      	adds	r7, #36	; 0x24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd90      	pop	{r4, r7, pc}

08000c18 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d101      	bne.n	8000c2e <HAL_ADC_Stop+0x16>
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	e021      	b.n	8000c72 <HAL_ADC_Stop+0x5a>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000c36:	2103      	movs	r1, #3
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 fc03 	bl	8001444 <ADC_ConversionStop>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10f      	bne.n	8000c68 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 fd33 	bl	80016b4 <ADC_Disable>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d107      	bne.n	8000c68 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <HAL_ADC_Stop+0x64>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	f043 0201 	orr.w	r2, r3, #1
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	ffffeefe 	.word	0xffffeefe

08000c80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a55      	ldr	r2, [pc, #340]	; (8000de8 <HAL_ADC_Start_DMA+0x168>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d004      	beq.n	8000ca0 <HAL_ADC_Start_DMA+0x20>
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a54      	ldr	r2, [pc, #336]	; (8000dec <HAL_ADC_Start_DMA+0x16c>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d101      	bne.n	8000ca4 <HAL_ADC_Start_DMA+0x24>
 8000ca0:	4b53      	ldr	r3, [pc, #332]	; (8000df0 <HAL_ADC_Start_DMA+0x170>)
 8000ca2:	e000      	b.n	8000ca6 <HAL_ADC_Start_DMA+0x26>
 8000ca4:	4b53      	ldr	r3, [pc, #332]	; (8000df4 <HAL_ADC_Start_DMA+0x174>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fd08 	bl	80006bc <LL_ADC_GetMultimode>
 8000cac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fdd4 	bl	8000860 <LL_ADC_REG_IsConversionOngoing>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f040 808c 	bne.w	8000dd8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d101      	bne.n	8000cce <HAL_ADC_Start_DMA+0x4e>
 8000cca:	2302      	movs	r3, #2
 8000ccc:	e087      	b.n	8000dde <HAL_ADC_Start_DMA+0x15e>
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d005      	beq.n	8000ce8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2b05      	cmp	r3, #5
 8000ce0:	d002      	beq.n	8000ce8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	2b09      	cmp	r3, #9
 8000ce6:	d170      	bne.n	8000dca <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f000 fc5f 	bl	80015ac <ADC_Enable>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000cf2:	7dfb      	ldrb	r3, [r7, #23]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d163      	bne.n	8000dc0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000cfc:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <HAL_ADC_Start_DMA+0x178>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a37      	ldr	r2, [pc, #220]	; (8000dec <HAL_ADC_Start_DMA+0x16c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d002      	beq.n	8000d18 <HAL_ADC_Start_DMA+0x98>
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	e000      	b.n	8000d1a <HAL_ADC_Start_DMA+0x9a>
 8000d18:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <HAL_ADC_Start_DMA+0x168>)
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	6812      	ldr	r2, [r2, #0]
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d002      	beq.n	8000d28 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d105      	bne.n	8000d34 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d44:	f023 0206 	bic.w	r2, r3, #6
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	659a      	str	r2, [r3, #88]	; 0x58
 8000d4c:	e002      	b.n	8000d54 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2200      	movs	r2, #0
 8000d52:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d58:	4a28      	ldr	r2, [pc, #160]	; (8000dfc <HAL_ADC_Start_DMA+0x17c>)
 8000d5a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d60:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <HAL_ADC_Start_DMA+0x180>)
 8000d62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	4a26      	ldr	r2, [pc, #152]	; (8000e04 <HAL_ADC_Start_DMA+0x184>)
 8000d6a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	221c      	movs	r2, #28
 8000d72:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 0210 	orr.w	r2, r2, #16
 8000d8a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d94:	4619      	mov	r1, r3
 8000d96:	4610      	mov	r0, r2
 8000d98:	f7ff fc30 	bl	80005fc <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3340      	adds	r3, #64	; 0x40
 8000da6:	4619      	mov	r1, r3
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f001 fc4a 	bl	8002644 <HAL_DMA_Start_IT>
 8000db0:	4603      	mov	r3, r0
 8000db2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fd29 	bl	8000810 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8000dbe:	e00d      	b.n	8000ddc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8000dc8:	e008      	b.n	8000ddc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000dd6:	e001      	b.n	8000ddc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40022000 	.word	0x40022000
 8000dec:	40022100 	.word	0x40022100
 8000df0:	40022300 	.word	0x40022300
 8000df4:	58026300 	.word	0x58026300
 8000df8:	fffff0fe 	.word	0xfffff0fe
 8000dfc:	08001765 	.word	0x08001765
 8000e00:	0800183d 	.word	0x0800183d
 8000e04:	08001859 	.word	0x08001859

08000e08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b099      	sub	sp, #100	; 0x64
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	4a99      	ldr	r2, [pc, #612]	; (800109c <HAL_ADC_ConfigChannel+0x280>)
 8000e36:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_ConfigChannel+0x2a>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e2e6      	b.n	8001414 <HAL_ADC_ConfigChannel+0x5f8>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fd04 	bl	8000860 <LL_ADC_REG_IsConversionOngoing>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 82cb 	bne.w	80013f6 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d108      	bne.n	8000e7e <HAL_ADC_ConfigChannel+0x62>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	0e9b      	lsrs	r3, r3, #26
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	2201      	movs	r2, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	e00f      	b.n	8000e9e <HAL_ADC_ConfigChannel+0x82>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e86:	fa93 f3a3 	rbit	r3, r3
 8000e8a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e8e:	fab3 f383 	clz	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f003 031f 	and.w	r3, r3, #31
 8000e98:	2201      	movs	r2, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	69d1      	ldr	r1, [r2, #28]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	430b      	orrs	r3, r1
 8000eaa:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	6859      	ldr	r1, [r3, #4]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	f7ff fb76 	bl	80005aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fccc 	bl	8000860 <LL_ADC_REG_IsConversionOngoing>
 8000ec8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fcee 	bl	80008b0 <LL_ADC_INJ_IsConversionOngoing>
 8000ed4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f040 80b3 	bne.w	8001044 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f040 80af 	bne.w	8001044 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	6819      	ldr	r1, [r3, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f7ff fb95 	bl	8000622 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000ef8:	4b69      	ldr	r3, [pc, #420]	; (80010a0 <HAL_ADC_ConfigChannel+0x284>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000f00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f04:	d10b      	bne.n	8000f1e <HAL_ADC_ConfigChannel+0x102>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	695a      	ldr	r2, [r3, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	e01d      	b.n	8000f5a <HAL_ADC_ConfigChannel+0x13e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10b      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x128>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	695a      	ldr	r2, [r3, #20]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	e00a      	b.n	8000f5a <HAL_ADC_ConfigChannel+0x13e>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	695a      	ldr	r2, [r3, #20]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d027      	beq.n	8000fb4 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	6919      	ldr	r1, [r3, #16]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f72:	f7ff fab9 	bl	80004e8 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	6919      	ldr	r1, [r3, #16]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	7e5b      	ldrb	r3, [r3, #25]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d102      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x170>
 8000f86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000f8a:	e000      	b.n	8000f8e <HAL_ADC_ConfigChannel+0x172>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	f7ff fae0 	bl	8000554 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	6919      	ldr	r1, [r3, #16]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	7e1b      	ldrb	r3, [r3, #24]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d102      	bne.n	8000faa <HAL_ADC_ConfigChannel+0x18e>
 8000fa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fa8:	e000      	b.n	8000fac <HAL_ADC_ConfigChannel+0x190>
 8000faa:	2300      	movs	r3, #0
 8000fac:	461a      	mov	r2, r3
 8000fae:	f7ff fab8 	bl	8000522 <LL_ADC_SetDataRightShift>
 8000fb2:	e047      	b.n	8001044 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	069b      	lsls	r3, r3, #26
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d107      	bne.n	8000fd8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fd6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	069b      	lsls	r3, r3, #26
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d107      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ffa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001002:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	069b      	lsls	r3, r3, #26
 800100c:	429a      	cmp	r2, r3
 800100e:	d107      	bne.n	8001020 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800101e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001026:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	069b      	lsls	r3, r3, #26
 8001030:	429a      	cmp	r2, r3
 8001032:	d107      	bne.n	8001044 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001042:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fbbb 	bl	80007c4 <LL_ADC_IsEnabled>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	f040 81d9 	bne.w	8001408 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	6819      	ldr	r1, [r3, #0]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	461a      	mov	r2, r3
 8001064:	f7ff fb06 	bl	8000674 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <HAL_ADC_ConfigChannel+0x280>)
 800106e:	4293      	cmp	r3, r2
 8001070:	f040 8101 	bne.w	8001276 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10f      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x288>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	0e9b      	lsrs	r3, r3, #26
 800108a:	3301      	adds	r3, #1
 800108c:	f003 031f 	and.w	r3, r3, #31
 8001090:	2b09      	cmp	r3, #9
 8001092:	bf94      	ite	ls
 8001094:	2301      	movls	r3, #1
 8001096:	2300      	movhi	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	e016      	b.n	80010ca <HAL_ADC_ConfigChannel+0x2ae>
 800109c:	47ff0000 	.word	0x47ff0000
 80010a0:	5c001000 	.word	0x5c001000
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80010b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010b4:	fab3 f383 	clz	r3, r3
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	3301      	adds	r3, #1
 80010bc:	f003 031f 	and.w	r3, r3, #31
 80010c0:	2b09      	cmp	r3, #9
 80010c2:	bf94      	ite	ls
 80010c4:	2301      	movls	r3, #1
 80010c6:	2300      	movhi	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d064      	beq.n	8001198 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d107      	bne.n	80010ea <HAL_ADC_ConfigChannel+0x2ce>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	0e9b      	lsrs	r3, r3, #26
 80010e0:	3301      	adds	r3, #1
 80010e2:	069b      	lsls	r3, r3, #26
 80010e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010e8:	e00e      	b.n	8001108 <HAL_ADC_ConfigChannel+0x2ec>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80010f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fa:	fab3 f383 	clz	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	3301      	adds	r3, #1
 8001102:	069b      	lsls	r3, r3, #26
 8001104:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001110:	2b00      	cmp	r3, #0
 8001112:	d109      	bne.n	8001128 <HAL_ADC_ConfigChannel+0x30c>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	0e9b      	lsrs	r3, r3, #26
 800111a:	3301      	adds	r3, #1
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	2101      	movs	r1, #1
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	e010      	b.n	800114a <HAL_ADC_ConfigChannel+0x32e>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001130:	fa93 f3a3 	rbit	r3, r3
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	fab3 f383 	clz	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3301      	adds	r3, #1
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	2101      	movs	r1, #1
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	ea42 0103 	orr.w	r1, r2, r3
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10a      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x354>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	0e9b      	lsrs	r3, r3, #26
 8001160:	3301      	adds	r3, #1
 8001162:	f003 021f 	and.w	r2, r3, #31
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	051b      	lsls	r3, r3, #20
 800116e:	e011      	b.n	8001194 <HAL_ADC_ConfigChannel+0x378>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	fab3 f383 	clz	r3, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	3301      	adds	r3, #1
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001194:	430b      	orrs	r3, r1
 8001196:	e069      	b.n	800126c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d107      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x398>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	0e9b      	lsrs	r3, r3, #26
 80011aa:	3301      	adds	r3, #1
 80011ac:	069b      	lsls	r3, r3, #26
 80011ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011b2:	e00e      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x3b6>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	61fb      	str	r3, [r7, #28]
  return result;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fab3 f383 	clz	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	3301      	adds	r3, #1
 80011cc:	069b      	lsls	r3, r3, #26
 80011ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x3d6>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	0e9b      	lsrs	r3, r3, #26
 80011e4:	3301      	adds	r3, #1
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	e010      	b.n	8001214 <HAL_ADC_ConfigChannel+0x3f8>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa93 f3a3 	rbit	r3, r3
 80011fe:	617b      	str	r3, [r7, #20]
  return result;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fab3 f383 	clz	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	3301      	adds	r3, #1
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	ea42 0103 	orr.w	r1, r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10d      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x424>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0e9b      	lsrs	r3, r3, #26
 800122a:	3301      	adds	r3, #1
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	3b1e      	subs	r3, #30
 8001238:	051b      	lsls	r3, r3, #20
 800123a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800123e:	e014      	b.n	800126a <HAL_ADC_ConfigChannel+0x44e>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	60fb      	str	r3, [r7, #12]
  return result;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	fab3 f383 	clz	r3, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	3301      	adds	r3, #1
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	3b1e      	subs	r3, #30
 8001264:	051b      	lsls	r3, r3, #20
 8001266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800126a:	430b      	orrs	r3, r1
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	6892      	ldr	r2, [r2, #8]
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff f9d6 	bl	8000622 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f280 80c4 	bge.w	8001408 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a65      	ldr	r2, [pc, #404]	; (800141c <HAL_ADC_ConfigChannel+0x600>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d004      	beq.n	8001294 <HAL_ADC_ConfigChannel+0x478>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a64      	ldr	r2, [pc, #400]	; (8001420 <HAL_ADC_ConfigChannel+0x604>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d101      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x47c>
 8001294:	4b63      	ldr	r3, [pc, #396]	; (8001424 <HAL_ADC_ConfigChannel+0x608>)
 8001296:	e000      	b.n	800129a <HAL_ADC_ConfigChannel+0x47e>
 8001298:	4b63      	ldr	r3, [pc, #396]	; (8001428 <HAL_ADC_ConfigChannel+0x60c>)
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f916 	bl	80004cc <LL_ADC_GetCommonPathInternalCh>
 80012a0:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a5d      	ldr	r2, [pc, #372]	; (800141c <HAL_ADC_ConfigChannel+0x600>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d004      	beq.n	80012b6 <HAL_ADC_ConfigChannel+0x49a>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a5b      	ldr	r2, [pc, #364]	; (8001420 <HAL_ADC_ConfigChannel+0x604>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d10e      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x4b8>
 80012b6:	4859      	ldr	r0, [pc, #356]	; (800141c <HAL_ADC_ConfigChannel+0x600>)
 80012b8:	f7ff fa84 	bl	80007c4 <LL_ADC_IsEnabled>
 80012bc:	4604      	mov	r4, r0
 80012be:	4858      	ldr	r0, [pc, #352]	; (8001420 <HAL_ADC_ConfigChannel+0x604>)
 80012c0:	f7ff fa80 	bl	80007c4 <LL_ADC_IsEnabled>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4323      	orrs	r3, r4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	e008      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x4ca>
 80012d4:	4855      	ldr	r0, [pc, #340]	; (800142c <HAL_ADC_ConfigChannel+0x610>)
 80012d6:	f7ff fa75 	bl	80007c4 <LL_ADC_IsEnabled>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bf0c      	ite	eq
 80012e0:	2301      	moveq	r3, #1
 80012e2:	2300      	movne	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d07b      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a50      	ldr	r2, [pc, #320]	; (8001430 <HAL_ADC_ConfigChannel+0x614>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d12e      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x536>
 80012f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d129      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a4a      	ldr	r2, [pc, #296]	; (800142c <HAL_ADC_ConfigChannel+0x610>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d17f      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a43      	ldr	r2, [pc, #268]	; (800141c <HAL_ADC_ConfigChannel+0x600>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d004      	beq.n	800131c <HAL_ADC_ConfigChannel+0x500>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a42      	ldr	r2, [pc, #264]	; (8001420 <HAL_ADC_ConfigChannel+0x604>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d101      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x504>
 800131c:	4a41      	ldr	r2, [pc, #260]	; (8001424 <HAL_ADC_ConfigChannel+0x608>)
 800131e:	e000      	b.n	8001322 <HAL_ADC_ConfigChannel+0x506>
 8001320:	4a41      	ldr	r2, [pc, #260]	; (8001428 <HAL_ADC_ConfigChannel+0x60c>)
 8001322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001324:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001328:	4619      	mov	r1, r3
 800132a:	4610      	mov	r0, r2
 800132c:	f7ff f8bb 	bl	80004a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001330:	4b40      	ldr	r3, [pc, #256]	; (8001434 <HAL_ADC_ConfigChannel+0x618>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	099b      	lsrs	r3, r3, #6
 8001336:	4a40      	ldr	r2, [pc, #256]	; (8001438 <HAL_ADC_ConfigChannel+0x61c>)
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	099b      	lsrs	r3, r3, #6
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001342:	e002      	b.n	800134a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	3b01      	subs	r3, #1
 8001348:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f9      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001350:	e05a      	b.n	8001408 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a39      	ldr	r2, [pc, #228]	; (800143c <HAL_ADC_ConfigChannel+0x620>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d11e      	bne.n	800139a <HAL_ADC_ConfigChannel+0x57e>
 800135c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800135e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d119      	bne.n	800139a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a30      	ldr	r2, [pc, #192]	; (800142c <HAL_ADC_ConfigChannel+0x610>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d14b      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a29      	ldr	r2, [pc, #164]	; (800141c <HAL_ADC_ConfigChannel+0x600>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d004      	beq.n	8001384 <HAL_ADC_ConfigChannel+0x568>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a28      	ldr	r2, [pc, #160]	; (8001420 <HAL_ADC_ConfigChannel+0x604>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x56c>
 8001384:	4a27      	ldr	r2, [pc, #156]	; (8001424 <HAL_ADC_ConfigChannel+0x608>)
 8001386:	e000      	b.n	800138a <HAL_ADC_ConfigChannel+0x56e>
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <HAL_ADC_ConfigChannel+0x60c>)
 800138a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800138c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f7ff f887 	bl	80004a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001398:	e036      	b.n	8001408 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a28      	ldr	r2, [pc, #160]	; (8001440 <HAL_ADC_ConfigChannel+0x624>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d131      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x5ec>
 80013a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d12c      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <HAL_ADC_ConfigChannel+0x610>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d127      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a17      	ldr	r2, [pc, #92]	; (800141c <HAL_ADC_ConfigChannel+0x600>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d004      	beq.n	80013cc <HAL_ADC_ConfigChannel+0x5b0>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a16      	ldr	r2, [pc, #88]	; (8001420 <HAL_ADC_ConfigChannel+0x604>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d101      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x5b4>
 80013cc:	4a15      	ldr	r2, [pc, #84]	; (8001424 <HAL_ADC_ConfigChannel+0x608>)
 80013ce:	e000      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x5b6>
 80013d0:	4a15      	ldr	r2, [pc, #84]	; (8001428 <HAL_ADC_ConfigChannel+0x60c>)
 80013d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d8:	4619      	mov	r1, r3
 80013da:	4610      	mov	r0, r2
 80013dc:	f7ff f863 	bl	80004a6 <LL_ADC_SetCommonPathInternalCh>
 80013e0:	e012      	b.n	8001408 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e6:	f043 0220 	orr.w	r2, r3, #32
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80013f4:	e008      	b.n	8001408 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fa:	f043 0220 	orr.w	r2, r3, #32
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001410:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8001414:	4618      	mov	r0, r3
 8001416:	3764      	adds	r7, #100	; 0x64
 8001418:	46bd      	mov	sp, r7
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	40022000 	.word	0x40022000
 8001420:	40022100 	.word	0x40022100
 8001424:	40022300 	.word	0x40022300
 8001428:	58026300 	.word	0x58026300
 800142c:	58026000 	.word	0x58026000
 8001430:	cb840000 	.word	0xcb840000
 8001434:	20000010 	.word	0x20000010
 8001438:	053e2d63 	.word	0x053e2d63
 800143c:	c7520000 	.word	0xc7520000
 8001440:	cfb80000 	.word	0xcfb80000

08001444 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fa00 	bl	8000860 <LL_ADC_REG_IsConversionOngoing>
 8001460:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fa22 	bl	80008b0 <LL_ADC_INJ_IsConversionOngoing>
 800146c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d103      	bne.n	800147c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8090 	beq.w	800159c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d02a      	beq.n	80014e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7d5b      	ldrb	r3, [r3, #21]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d126      	bne.n	80014e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7d1b      	ldrb	r3, [r3, #20]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d122      	bne.n	80014e0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800149e:	e014      	b.n	80014ca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	4a41      	ldr	r2, [pc, #260]	; (80015a8 <ADC_ConversionStop+0x164>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d90d      	bls.n	80014c4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ac:	f043 0210 	orr.w	r2, r3, #16
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	f043 0201 	orr.w	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e06c      	b.n	800159e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	3301      	adds	r3, #1
 80014c8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d4:	2b40      	cmp	r3, #64	; 0x40
 80014d6:	d1e3      	bne.n	80014a0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2240      	movs	r2, #64	; 0x40
 80014de:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d014      	beq.n	8001510 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f9b8 	bl	8000860 <LL_ADC_REG_IsConversionOngoing>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00c      	beq.n	8001510 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f975 	bl	80007ea <LL_ADC_IsDisableOngoing>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d104      	bne.n	8001510 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f994 	bl	8000838 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d014      	beq.n	8001540 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f9c8 	bl	80008b0 <LL_ADC_INJ_IsConversionOngoing>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00c      	beq.n	8001540 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f95d 	bl	80007ea <LL_ADC_IsDisableOngoing>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d104      	bne.n	8001540 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f9a4 	bl	8000888 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d004      	beq.n	8001550 <ADC_ConversionStop+0x10c>
 8001546:	2b03      	cmp	r3, #3
 8001548:	d105      	bne.n	8001556 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800154a:	230c      	movs	r3, #12
 800154c:	617b      	str	r3, [r7, #20]
        break;
 800154e:	e005      	b.n	800155c <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001550:	2308      	movs	r3, #8
 8001552:	617b      	str	r3, [r7, #20]
        break;
 8001554:	e002      	b.n	800155c <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001556:	2304      	movs	r3, #4
 8001558:	617b      	str	r3, [r7, #20]
        break;
 800155a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800155c:	f7fe ff42 	bl	80003e4 <HAL_GetTick>
 8001560:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001562:	e014      	b.n	800158e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001564:	f7fe ff3e 	bl	80003e4 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b05      	cmp	r3, #5
 8001570:	d90d      	bls.n	800158e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f043 0210 	orr.w	r2, r3, #16
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	f043 0201 	orr.w	r2, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e007      	b.n	800159e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e3      	bne.n	8001564 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	000cdbff 	.word	0x000cdbff

080015ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff f903 	bl	80007c4 <LL_ADC_IsEnabled>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d167      	bne.n	8001694 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <ADC_Enable+0xf4>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00d      	beq.n	80015ee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d6:	f043 0210 	orr.w	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	f043 0201 	orr.w	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e053      	b.n	8001696 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff f8be 	bl	8000774 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80015f8:	f7fe fef4 	bl	80003e4 <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a28      	ldr	r2, [pc, #160]	; (80016a4 <ADC_Enable+0xf8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d004      	beq.n	8001612 <ADC_Enable+0x66>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <ADC_Enable+0xfc>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d101      	bne.n	8001616 <ADC_Enable+0x6a>
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <ADC_Enable+0x100>)
 8001614:	e000      	b.n	8001618 <ADC_Enable+0x6c>
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <ADC_Enable+0x104>)
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff f84f 	bl	80006bc <LL_ADC_GetMultimode>
 800161e:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a20      	ldr	r2, [pc, #128]	; (80016a8 <ADC_Enable+0xfc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d002      	beq.n	8001630 <ADC_Enable+0x84>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	e000      	b.n	8001632 <ADC_Enable+0x86>
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <ADC_Enable+0xf8>)
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	4293      	cmp	r3, r2
 8001638:	d025      	beq.n	8001686 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d129      	bne.n	8001694 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001640:	e021      	b.n	8001686 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f8bc 	bl	80007c4 <LL_ADC_IsEnabled>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d104      	bne.n	800165c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff f88c 	bl	8000774 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800165c:	f7fe fec2 	bl	80003e4 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d90d      	bls.n	8001686 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166e:	f043 0210 	orr.w	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	f043 0201 	orr.w	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e007      	b.n	8001696 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b01      	cmp	r3, #1
 8001692:	d1d6      	bne.n	8001642 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	8000003f 	.word	0x8000003f
 80016a4:	40022000 	.word	0x40022000
 80016a8:	40022100 	.word	0x40022100
 80016ac:	40022300 	.word	0x40022300
 80016b0:	58026300 	.word	0x58026300

080016b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff f892 	bl	80007ea <LL_ADC_IsDisableOngoing>
 80016c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff f879 	bl	80007c4 <LL_ADC_IsEnabled>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d040      	beq.n	800175a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d13d      	bne.n	800175a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 030d 	and.w	r3, r3, #13
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d10c      	bne.n	8001706 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff f853 	bl	800079c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2203      	movs	r2, #3
 80016fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016fe:	f7fe fe71 	bl	80003e4 <HAL_GetTick>
 8001702:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001704:	e022      	b.n	800174c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170a:	f043 0210 	orr.w	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e01c      	b.n	800175c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001722:	f7fe fe5f 	bl	80003e4 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d90d      	bls.n	800174c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001734:	f043 0210 	orr.w	r2, r3, #16
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e007      	b.n	800175c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1e3      	bne.n	8001722 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001770:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001776:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800177a:	2b00      	cmp	r3, #0
 800177c:	d14b      	bne.n	8001816 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001782:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d021      	beq.n	80017dc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fef1 	bl	8000584 <LL_ADC_REG_IsTriggerSourceSWStart>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d032      	beq.n	800180e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d12b      	bne.n	800180e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d11f      	bne.n	800180e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	f043 0201 	orr.w	r2, r3, #1
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54
 80017da:	e018      	b.n	800180e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d111      	bne.n	800180e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f00e fc44 	bl	801009c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001814:	e00e      	b.n	8001834 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff faf0 	bl	8000e08 <HAL_ADC_ErrorCallback>
}
 8001828:	e004      	b.n	8001834 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
}
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001848:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f00e fc31 	bl	80100b2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001864:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	f043 0204 	orr.w	r2, r3, #4
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f7ff fac2 	bl	8000e08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a70      	ldr	r2, [pc, #448]	; (8001a5c <ADC_ConfigureBoostMode+0x1d0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d004      	beq.n	80018a8 <ADC_ConfigureBoostMode+0x1c>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6f      	ldr	r2, [pc, #444]	; (8001a60 <ADC_ConfigureBoostMode+0x1d4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d109      	bne.n	80018bc <ADC_ConfigureBoostMode+0x30>
 80018a8:	4b6e      	ldr	r3, [pc, #440]	; (8001a64 <ADC_ConfigureBoostMode+0x1d8>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	e008      	b.n	80018ce <ADC_ConfigureBoostMode+0x42>
 80018bc:	4b6a      	ldr	r3, [pc, #424]	; (8001a68 <ADC_ConfigureBoostMode+0x1dc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01a      	beq.n	8001908 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80018d2:	f004 f8c7 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 80018d6:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018e0:	d006      	beq.n	80018f0 <ADC_ConfigureBoostMode+0x64>
 80018e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80018e6:	d00b      	beq.n	8001900 <ADC_ConfigureBoostMode+0x74>
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	d000      	beq.n	80018f0 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80018ee:	e05d      	b.n	80019ac <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fc:	60fb      	str	r3, [r7, #12]
        break;
 80018fe:	e055      	b.n	80019ac <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	60fb      	str	r3, [r7, #12]
        break;
 8001906:	e051      	b.n	80019ac <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001908:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800190c:	f004 ffb8 	bl	8006880 <HAL_RCCEx_GetPeriphCLKFreq>
 8001910:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800191a:	d02a      	beq.n	8001972 <ADC_ConfigureBoostMode+0xe6>
 800191c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001920:	d813      	bhi.n	800194a <ADC_ConfigureBoostMode+0xbe>
 8001922:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001926:	d024      	beq.n	8001972 <ADC_ConfigureBoostMode+0xe6>
 8001928:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800192c:	d806      	bhi.n	800193c <ADC_ConfigureBoostMode+0xb0>
 800192e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001932:	d01e      	beq.n	8001972 <ADC_ConfigureBoostMode+0xe6>
 8001934:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001938:	d01b      	beq.n	8001972 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800193a:	e037      	b.n	80019ac <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800193c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001940:	d017      	beq.n	8001972 <ADC_ConfigureBoostMode+0xe6>
 8001942:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001946:	d014      	beq.n	8001972 <ADC_ConfigureBoostMode+0xe6>
        break;
 8001948:	e030      	b.n	80019ac <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800194a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800194e:	d021      	beq.n	8001994 <ADC_ConfigureBoostMode+0x108>
 8001950:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001954:	d806      	bhi.n	8001964 <ADC_ConfigureBoostMode+0xd8>
 8001956:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800195a:	d013      	beq.n	8001984 <ADC_ConfigureBoostMode+0xf8>
 800195c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001960:	d014      	beq.n	800198c <ADC_ConfigureBoostMode+0x100>
        break;
 8001962:	e023      	b.n	80019ac <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001964:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001968:	d018      	beq.n	800199c <ADC_ConfigureBoostMode+0x110>
 800196a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800196e:	d019      	beq.n	80019a4 <ADC_ConfigureBoostMode+0x118>
        break;
 8001970:	e01c      	b.n	80019ac <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	0c9b      	lsrs	r3, r3, #18
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001980:	60fb      	str	r3, [r7, #12]
        break;
 8001982:	e013      	b.n	80019ac <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	60fb      	str	r3, [r7, #12]
      break;
 800198a:	e00f      	b.n	80019ac <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	60fb      	str	r3, [r7, #12]
        break;
 8001992:	e00b      	b.n	80019ac <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	099b      	lsrs	r3, r3, #6
 8001998:	60fb      	str	r3, [r7, #12]
        break;
 800199a:	e007      	b.n	80019ac <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	09db      	lsrs	r3, r3, #7
 80019a0:	60fb      	str	r3, [r7, #12]
        break;
 80019a2:	e003      	b.n	80019ac <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	0a1b      	lsrs	r3, r3, #8
 80019a8:	60fb      	str	r3, [r7, #12]
        break;
 80019aa:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80019ac:	f7fe fd48 	bl	8000440 <HAL_GetREVID>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d815      	bhi.n	80019e6 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4a2b      	ldr	r2, [pc, #172]	; (8001a6c <ADC_ConfigureBoostMode+0x1e0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d908      	bls.n	80019d4 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019d0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80019d2:	e03e      	b.n	8001a52 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019e2:	609a      	str	r2, [r3, #8]
}
 80019e4:	e035      	b.n	8001a52 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a20      	ldr	r2, [pc, #128]	; (8001a70 <ADC_ConfigureBoostMode+0x1e4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d808      	bhi.n	8001a06 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a02:	609a      	str	r2, [r3, #8]
}
 8001a04:	e025      	b.n	8001a52 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4a1a      	ldr	r2, [pc, #104]	; (8001a74 <ADC_ConfigureBoostMode+0x1e8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d80a      	bhi.n	8001a24 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a20:	609a      	str	r2, [r3, #8]
}
 8001a22:	e016      	b.n	8001a52 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <ADC_ConfigureBoostMode+0x1ec>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d80a      	bhi.n	8001a42 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a3e:	609a      	str	r2, [r3, #8]
}
 8001a40:	e007      	b.n	8001a52 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001a50:	609a      	str	r2, [r3, #8]
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40022000 	.word	0x40022000
 8001a60:	40022100 	.word	0x40022100
 8001a64:	40022300 	.word	0x40022300
 8001a68:	58026300 	.word	0x58026300
 8001a6c:	01312d00 	.word	0x01312d00
 8001a70:	005f5e10 	.word	0x005f5e10
 8001a74:	00bebc20 	.word	0x00bebc20
 8001a78:	017d7840 	.word	0x017d7840

08001a7c <LL_ADC_IsEnabled>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <LL_ADC_IsEnabled+0x18>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <LL_ADC_IsEnabled+0x1a>
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d101      	bne.n	8001aba <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b09f      	sub	sp, #124	; 0x7c
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e0ba      	b.n	8001c5c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5c      	ldr	r2, [pc, #368]	; (8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d102      	bne.n	8001afe <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001af8:	4b5b      	ldr	r3, [pc, #364]	; (8001c68 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	e001      	b.n	8001b02 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10b      	bne.n	8001b20 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	f043 0220 	orr.w	r2, r3, #32
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e09d      	b.n	8001c5c <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ffbd 	bl	8001aa2 <LL_ADC_REG_IsConversionOngoing>
 8001b28:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ffb7 	bl	8001aa2 <LL_ADC_REG_IsConversionOngoing>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d17f      	bne.n	8001c3a <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d17c      	bne.n	8001c3a <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a47      	ldr	r2, [pc, #284]	; (8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d004      	beq.n	8001b54 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a46      	ldr	r2, [pc, #280]	; (8001c68 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d101      	bne.n	8001b58 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8001b54:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001b56:	e000      	b.n	8001b5a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8001b58:	4b45      	ldr	r3, [pc, #276]	; (8001c70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001b5a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d039      	beq.n	8001bd8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b74:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a3a      	ldr	r2, [pc, #232]	; (8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d004      	beq.n	8001b8a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a38      	ldr	r2, [pc, #224]	; (8001c68 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10e      	bne.n	8001ba8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8001b8a:	4836      	ldr	r0, [pc, #216]	; (8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001b8c:	f7ff ff76 	bl	8001a7c <LL_ADC_IsEnabled>
 8001b90:	4604      	mov	r4, r0
 8001b92:	4835      	ldr	r0, [pc, #212]	; (8001c68 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001b94:	f7ff ff72 	bl	8001a7c <LL_ADC_IsEnabled>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4323      	orrs	r3, r4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf0c      	ite	eq
 8001ba0:	2301      	moveq	r3, #1
 8001ba2:	2300      	movne	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	e008      	b.n	8001bba <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8001ba8:	4832      	ldr	r0, [pc, #200]	; (8001c74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001baa:	f7ff ff67 	bl	8001a7c <LL_ADC_IsEnabled>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d047      	beq.n	8001c4e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	6811      	ldr	r1, [r2, #0]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	6892      	ldr	r2, [r2, #8]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bd4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bd6:	e03a      	b.n	8001c4e <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001be2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d004      	beq.n	8001bf8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d10e      	bne.n	8001c16 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8001bf8:	481a      	ldr	r0, [pc, #104]	; (8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001bfa:	f7ff ff3f 	bl	8001a7c <LL_ADC_IsEnabled>
 8001bfe:	4604      	mov	r4, r0
 8001c00:	4819      	ldr	r0, [pc, #100]	; (8001c68 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001c02:	f7ff ff3b 	bl	8001a7c <LL_ADC_IsEnabled>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4323      	orrs	r3, r4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bf0c      	ite	eq
 8001c0e:	2301      	moveq	r3, #1
 8001c10:	2300      	movne	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	e008      	b.n	8001c28 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8001c16:	4817      	ldr	r0, [pc, #92]	; (8001c74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001c18:	f7ff ff30 	bl	8001a7c <LL_ADC_IsEnabled>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	bf0c      	ite	eq
 8001c22:	2301      	moveq	r3, #1
 8001c24:	2300      	movne	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d010      	beq.n	8001c4e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c36:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c38:	e009      	b.n	8001c4e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	f043 0220 	orr.w	r2, r3, #32
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001c4c:	e000      	b.n	8001c50 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c4e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c58:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	377c      	adds	r7, #124	; 0x7c
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd90      	pop	{r4, r7, pc}
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40022100 	.word	0x40022100
 8001c6c:	40022300 	.word	0x40022300
 8001c70:	58026300 	.word	0x58026300
 8001c74:	58026000 	.word	0x58026000
 8001c78:	fffff0e0 	.word	0xfffff0e0

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <__NVIC_SetPriorityGrouping+0x40>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <__NVIC_SetPriorityGrouping+0x40>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00
 8001cc0:	05fa0000 	.word	0x05fa0000

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4907      	ldr	r1, [pc, #28]	; (8001d18 <__NVIC_EnableIRQ+0x38>)
 8001cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff29 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff40 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff90 	bl	8001d70 <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5f 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff33 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffa4 	bl	8001dd8 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001ea0:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_MPU_Disable+0x24>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <HAL_MPU_Disable+0x24>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eae:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <HAL_MPU_Disable+0x28>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	605a      	str	r2, [r3, #4]
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00
 8001ec4:	e000ed90 	.word	0xe000ed90

08001ec8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <HAL_MPU_Enable+0x34>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_MPU_Enable+0x38>)
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <HAL_MPU_Enable+0x38>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ee6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001eea:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed90 	.word	0xe000ed90
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	785a      	ldrb	r2, [r3, #1]
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <HAL_MPU_ConfigRegion+0x84>)
 8001f12:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d029      	beq.n	8001f70 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001f1c:	4a1a      	ldr	r2, [pc, #104]	; (8001f88 <HAL_MPU_ConfigRegion+0x84>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7b1b      	ldrb	r3, [r3, #12]
 8001f28:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7adb      	ldrb	r3, [r3, #11]
 8001f2e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7a9b      	ldrb	r3, [r3, #10]
 8001f36:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7b5b      	ldrb	r3, [r3, #13]
 8001f3e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7b9b      	ldrb	r3, [r3, #14]
 8001f46:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7bdb      	ldrb	r3, [r3, #15]
 8001f4e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7a5b      	ldrb	r3, [r3, #9]
 8001f56:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7a1b      	ldrb	r3, [r3, #8]
 8001f5e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f60:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	7812      	ldrb	r2, [r2, #0]
 8001f66:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f68:	4a07      	ldr	r2, [pc, #28]	; (8001f88 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f6a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f6c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001f6e:	e005      	b.n	8001f7c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_MPU_ConfigRegion+0x84>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <HAL_MPU_ConfigRegion+0x84>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed90 	.word	0xe000ed90

08001f8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7fe fa26 	bl	80003e4 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e316      	b.n	80025d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a66      	ldr	r2, [pc, #408]	; (8002144 <HAL_DMA_Init+0x1b8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d04a      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a65      	ldr	r2, [pc, #404]	; (8002148 <HAL_DMA_Init+0x1bc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d045      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a63      	ldr	r2, [pc, #396]	; (800214c <HAL_DMA_Init+0x1c0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d040      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a62      	ldr	r2, [pc, #392]	; (8002150 <HAL_DMA_Init+0x1c4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d03b      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a60      	ldr	r2, [pc, #384]	; (8002154 <HAL_DMA_Init+0x1c8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d036      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a5f      	ldr	r2, [pc, #380]	; (8002158 <HAL_DMA_Init+0x1cc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d031      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a5d      	ldr	r2, [pc, #372]	; (800215c <HAL_DMA_Init+0x1d0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d02c      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a5c      	ldr	r2, [pc, #368]	; (8002160 <HAL_DMA_Init+0x1d4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d027      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a5a      	ldr	r2, [pc, #360]	; (8002164 <HAL_DMA_Init+0x1d8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d022      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a59      	ldr	r2, [pc, #356]	; (8002168 <HAL_DMA_Init+0x1dc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d01d      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a57      	ldr	r2, [pc, #348]	; (800216c <HAL_DMA_Init+0x1e0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d018      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a56      	ldr	r2, [pc, #344]	; (8002170 <HAL_DMA_Init+0x1e4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a54      	ldr	r2, [pc, #336]	; (8002174 <HAL_DMA_Init+0x1e8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00e      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a53      	ldr	r2, [pc, #332]	; (8002178 <HAL_DMA_Init+0x1ec>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d009      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a51      	ldr	r2, [pc, #324]	; (800217c <HAL_DMA_Init+0x1f0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_DMA_Init+0xb8>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a50      	ldr	r2, [pc, #320]	; (8002180 <HAL_DMA_Init+0x1f4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d101      	bne.n	8002048 <HAL_DMA_Init+0xbc>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_DMA_Init+0xbe>
 8002048:	2300      	movs	r3, #0
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 813b 	beq.w	80022c6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a37      	ldr	r2, [pc, #220]	; (8002144 <HAL_DMA_Init+0x1b8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d04a      	beq.n	8002100 <HAL_DMA_Init+0x174>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a36      	ldr	r2, [pc, #216]	; (8002148 <HAL_DMA_Init+0x1bc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d045      	beq.n	8002100 <HAL_DMA_Init+0x174>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a34      	ldr	r2, [pc, #208]	; (800214c <HAL_DMA_Init+0x1c0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d040      	beq.n	8002100 <HAL_DMA_Init+0x174>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a33      	ldr	r2, [pc, #204]	; (8002150 <HAL_DMA_Init+0x1c4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d03b      	beq.n	8002100 <HAL_DMA_Init+0x174>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a31      	ldr	r2, [pc, #196]	; (8002154 <HAL_DMA_Init+0x1c8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d036      	beq.n	8002100 <HAL_DMA_Init+0x174>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a30      	ldr	r2, [pc, #192]	; (8002158 <HAL_DMA_Init+0x1cc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d031      	beq.n	8002100 <HAL_DMA_Init+0x174>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2e      	ldr	r2, [pc, #184]	; (800215c <HAL_DMA_Init+0x1d0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d02c      	beq.n	8002100 <HAL_DMA_Init+0x174>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a2d      	ldr	r2, [pc, #180]	; (8002160 <HAL_DMA_Init+0x1d4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d027      	beq.n	8002100 <HAL_DMA_Init+0x174>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2b      	ldr	r2, [pc, #172]	; (8002164 <HAL_DMA_Init+0x1d8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d022      	beq.n	8002100 <HAL_DMA_Init+0x174>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a2a      	ldr	r2, [pc, #168]	; (8002168 <HAL_DMA_Init+0x1dc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d01d      	beq.n	8002100 <HAL_DMA_Init+0x174>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_DMA_Init+0x1e0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d018      	beq.n	8002100 <HAL_DMA_Init+0x174>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a27      	ldr	r2, [pc, #156]	; (8002170 <HAL_DMA_Init+0x1e4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <HAL_DMA_Init+0x174>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a25      	ldr	r2, [pc, #148]	; (8002174 <HAL_DMA_Init+0x1e8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00e      	beq.n	8002100 <HAL_DMA_Init+0x174>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a24      	ldr	r2, [pc, #144]	; (8002178 <HAL_DMA_Init+0x1ec>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_DMA_Init+0x174>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a22      	ldr	r2, [pc, #136]	; (800217c <HAL_DMA_Init+0x1f0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d004      	beq.n	8002100 <HAL_DMA_Init+0x174>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a21      	ldr	r2, [pc, #132]	; (8002180 <HAL_DMA_Init+0x1f4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d108      	bne.n	8002112 <HAL_DMA_Init+0x186>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e007      	b.n	8002122 <HAL_DMA_Init+0x196>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002122:	e02f      	b.n	8002184 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002124:	f7fe f95e 	bl	80003e4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b05      	cmp	r3, #5
 8002130:	d928      	bls.n	8002184 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2220      	movs	r2, #32
 8002136:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2203      	movs	r2, #3
 800213c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e246      	b.n	80025d2 <HAL_DMA_Init+0x646>
 8002144:	40020010 	.word	0x40020010
 8002148:	40020028 	.word	0x40020028
 800214c:	40020040 	.word	0x40020040
 8002150:	40020058 	.word	0x40020058
 8002154:	40020070 	.word	0x40020070
 8002158:	40020088 	.word	0x40020088
 800215c:	400200a0 	.word	0x400200a0
 8002160:	400200b8 	.word	0x400200b8
 8002164:	40020410 	.word	0x40020410
 8002168:	40020428 	.word	0x40020428
 800216c:	40020440 	.word	0x40020440
 8002170:	40020458 	.word	0x40020458
 8002174:	40020470 	.word	0x40020470
 8002178:	40020488 	.word	0x40020488
 800217c:	400204a0 	.word	0x400204a0
 8002180:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1c8      	bne.n	8002124 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4b83      	ldr	r3, [pc, #524]	; (80023ac <HAL_DMA_Init+0x420>)
 800219e:	4013      	ands	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80021aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d107      	bne.n	80021e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4313      	orrs	r3, r2
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80021e8:	4b71      	ldr	r3, [pc, #452]	; (80023b0 <HAL_DMA_Init+0x424>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b71      	ldr	r3, [pc, #452]	; (80023b4 <HAL_DMA_Init+0x428>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021f4:	d328      	bcc.n	8002248 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b28      	cmp	r3, #40	; 0x28
 80021fc:	d903      	bls.n	8002206 <HAL_DMA_Init+0x27a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b2e      	cmp	r3, #46	; 0x2e
 8002204:	d917      	bls.n	8002236 <HAL_DMA_Init+0x2aa>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b3e      	cmp	r3, #62	; 0x3e
 800220c:	d903      	bls.n	8002216 <HAL_DMA_Init+0x28a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b42      	cmp	r3, #66	; 0x42
 8002214:	d90f      	bls.n	8002236 <HAL_DMA_Init+0x2aa>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b46      	cmp	r3, #70	; 0x46
 800221c:	d903      	bls.n	8002226 <HAL_DMA_Init+0x29a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b48      	cmp	r3, #72	; 0x48
 8002224:	d907      	bls.n	8002236 <HAL_DMA_Init+0x2aa>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b4e      	cmp	r3, #78	; 0x4e
 800222c:	d905      	bls.n	800223a <HAL_DMA_Init+0x2ae>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b52      	cmp	r3, #82	; 0x52
 8002234:	d801      	bhi.n	800223a <HAL_DMA_Init+0x2ae>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_DMA_Init+0x2b0>
 800223a:	2300      	movs	r3, #0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002246:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f023 0307 	bic.w	r3, r3, #7
 800225e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	2b04      	cmp	r3, #4
 8002270:	d117      	bne.n	80022a2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00e      	beq.n	80022a2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f002 f81f 	bl	80042c8 <DMA_CheckFifoParam>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2240      	movs	r2, #64	; 0x40
 8002294:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e197      	b.n	80025d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f001 ff5a 	bl	8004164 <DMA_CalcBaseAndBitshift>
 80022b0:	4603      	mov	r3, r0
 80022b2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	223f      	movs	r2, #63	; 0x3f
 80022be:	409a      	lsls	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	e0cd      	b.n	8002462 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a3b      	ldr	r2, [pc, #236]	; (80023b8 <HAL_DMA_Init+0x42c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <HAL_DMA_Init+0x38a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a39      	ldr	r2, [pc, #228]	; (80023bc <HAL_DMA_Init+0x430>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01d      	beq.n	8002316 <HAL_DMA_Init+0x38a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a38      	ldr	r2, [pc, #224]	; (80023c0 <HAL_DMA_Init+0x434>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d018      	beq.n	8002316 <HAL_DMA_Init+0x38a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a36      	ldr	r2, [pc, #216]	; (80023c4 <HAL_DMA_Init+0x438>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_DMA_Init+0x38a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a35      	ldr	r2, [pc, #212]	; (80023c8 <HAL_DMA_Init+0x43c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_DMA_Init+0x38a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a33      	ldr	r2, [pc, #204]	; (80023cc <HAL_DMA_Init+0x440>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_DMA_Init+0x38a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a32      	ldr	r2, [pc, #200]	; (80023d0 <HAL_DMA_Init+0x444>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_DMA_Init+0x38a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a30      	ldr	r2, [pc, #192]	; (80023d4 <HAL_DMA_Init+0x448>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_DMA_Init+0x38e>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_DMA_Init+0x390>
 800231a:	2300      	movs	r3, #0
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8097 	beq.w	8002450 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a24      	ldr	r2, [pc, #144]	; (80023b8 <HAL_DMA_Init+0x42c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d021      	beq.n	8002370 <HAL_DMA_Init+0x3e4>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a22      	ldr	r2, [pc, #136]	; (80023bc <HAL_DMA_Init+0x430>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01c      	beq.n	8002370 <HAL_DMA_Init+0x3e4>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a21      	ldr	r2, [pc, #132]	; (80023c0 <HAL_DMA_Init+0x434>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d017      	beq.n	8002370 <HAL_DMA_Init+0x3e4>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a1f      	ldr	r2, [pc, #124]	; (80023c4 <HAL_DMA_Init+0x438>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d012      	beq.n	8002370 <HAL_DMA_Init+0x3e4>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <HAL_DMA_Init+0x43c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00d      	beq.n	8002370 <HAL_DMA_Init+0x3e4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_DMA_Init+0x440>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d008      	beq.n	8002370 <HAL_DMA_Init+0x3e4>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <HAL_DMA_Init+0x444>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d003      	beq.n	8002370 <HAL_DMA_Init+0x3e4>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <HAL_DMA_Init+0x448>)
 800236e:	4293      	cmp	r3, r2
 8002370:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2202      	movs	r2, #2
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_DMA_Init+0x44c>)
 800238e:	4013      	ands	r3, r2
 8002390:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d020      	beq.n	80023dc <HAL_DMA_Init+0x450>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b80      	cmp	r3, #128	; 0x80
 80023a0:	d102      	bne.n	80023a8 <HAL_DMA_Init+0x41c>
 80023a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023a6:	e01a      	b.n	80023de <HAL_DMA_Init+0x452>
 80023a8:	2300      	movs	r3, #0
 80023aa:	e018      	b.n	80023de <HAL_DMA_Init+0x452>
 80023ac:	fe10803f 	.word	0xfe10803f
 80023b0:	5c001000 	.word	0x5c001000
 80023b4:	ffff0000 	.word	0xffff0000
 80023b8:	58025408 	.word	0x58025408
 80023bc:	5802541c 	.word	0x5802541c
 80023c0:	58025430 	.word	0x58025430
 80023c4:	58025444 	.word	0x58025444
 80023c8:	58025458 	.word	0x58025458
 80023cc:	5802546c 	.word	0x5802546c
 80023d0:	58025480 	.word	0x58025480
 80023d4:	58025494 	.word	0x58025494
 80023d8:	fffe000f 	.word	0xfffe000f
 80023dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68d2      	ldr	r2, [r2, #12]
 80023e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002404:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800240c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	4b6e      	ldr	r3, [pc, #440]	; (80025dc <HAL_DMA_Init+0x650>)
 8002424:	4413      	add	r3, r2
 8002426:	4a6e      	ldr	r2, [pc, #440]	; (80025e0 <HAL_DMA_Init+0x654>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	009a      	lsls	r2, r3, #2
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f001 fe95 	bl	8004164 <DMA_CalcBaseAndBitshift>
 800243a:	4603      	mov	r3, r0
 800243c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	2201      	movs	r2, #1
 8002448:	409a      	lsls	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	e008      	b.n	8002462 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2240      	movs	r2, #64	; 0x40
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2203      	movs	r2, #3
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e0b7      	b.n	80025d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a5f      	ldr	r2, [pc, #380]	; (80025e4 <HAL_DMA_Init+0x658>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d072      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a5d      	ldr	r2, [pc, #372]	; (80025e8 <HAL_DMA_Init+0x65c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d06d      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a5c      	ldr	r2, [pc, #368]	; (80025ec <HAL_DMA_Init+0x660>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d068      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a5a      	ldr	r2, [pc, #360]	; (80025f0 <HAL_DMA_Init+0x664>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d063      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a59      	ldr	r2, [pc, #356]	; (80025f4 <HAL_DMA_Init+0x668>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d05e      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a57      	ldr	r2, [pc, #348]	; (80025f8 <HAL_DMA_Init+0x66c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d059      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a56      	ldr	r2, [pc, #344]	; (80025fc <HAL_DMA_Init+0x670>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d054      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a54      	ldr	r2, [pc, #336]	; (8002600 <HAL_DMA_Init+0x674>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d04f      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a53      	ldr	r2, [pc, #332]	; (8002604 <HAL_DMA_Init+0x678>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d04a      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a51      	ldr	r2, [pc, #324]	; (8002608 <HAL_DMA_Init+0x67c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d045      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a50      	ldr	r2, [pc, #320]	; (800260c <HAL_DMA_Init+0x680>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d040      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a4e      	ldr	r2, [pc, #312]	; (8002610 <HAL_DMA_Init+0x684>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d03b      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a4d      	ldr	r2, [pc, #308]	; (8002614 <HAL_DMA_Init+0x688>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d036      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a4b      	ldr	r2, [pc, #300]	; (8002618 <HAL_DMA_Init+0x68c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d031      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a4a      	ldr	r2, [pc, #296]	; (800261c <HAL_DMA_Init+0x690>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d02c      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a48      	ldr	r2, [pc, #288]	; (8002620 <HAL_DMA_Init+0x694>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d027      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a47      	ldr	r2, [pc, #284]	; (8002624 <HAL_DMA_Init+0x698>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d022      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a45      	ldr	r2, [pc, #276]	; (8002628 <HAL_DMA_Init+0x69c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01d      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a44      	ldr	r2, [pc, #272]	; (800262c <HAL_DMA_Init+0x6a0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d018      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a42      	ldr	r2, [pc, #264]	; (8002630 <HAL_DMA_Init+0x6a4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a41      	ldr	r2, [pc, #260]	; (8002634 <HAL_DMA_Init+0x6a8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00e      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a3f      	ldr	r2, [pc, #252]	; (8002638 <HAL_DMA_Init+0x6ac>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d009      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a3e      	ldr	r2, [pc, #248]	; (800263c <HAL_DMA_Init+0x6b0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d004      	beq.n	8002552 <HAL_DMA_Init+0x5c6>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a3c      	ldr	r2, [pc, #240]	; (8002640 <HAL_DMA_Init+0x6b4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_DMA_Init+0x5ca>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_DMA_Init+0x5cc>
 8002556:	2300      	movs	r3, #0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d032      	beq.n	80025c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f001 ff2f 	bl	80043c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b80      	cmp	r3, #128	; 0x80
 8002568:	d102      	bne.n	8002570 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002584:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d010      	beq.n	80025b0 <HAL_DMA_Init+0x624>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b08      	cmp	r3, #8
 8002594:	d80c      	bhi.n	80025b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f001 ffac 	bl	80044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	e008      	b.n	80025c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	a7fdabf8 	.word	0xa7fdabf8
 80025e0:	cccccccd 	.word	0xcccccccd
 80025e4:	40020010 	.word	0x40020010
 80025e8:	40020028 	.word	0x40020028
 80025ec:	40020040 	.word	0x40020040
 80025f0:	40020058 	.word	0x40020058
 80025f4:	40020070 	.word	0x40020070
 80025f8:	40020088 	.word	0x40020088
 80025fc:	400200a0 	.word	0x400200a0
 8002600:	400200b8 	.word	0x400200b8
 8002604:	40020410 	.word	0x40020410
 8002608:	40020428 	.word	0x40020428
 800260c:	40020440 	.word	0x40020440
 8002610:	40020458 	.word	0x40020458
 8002614:	40020470 	.word	0x40020470
 8002618:	40020488 	.word	0x40020488
 800261c:	400204a0 	.word	0x400204a0
 8002620:	400204b8 	.word	0x400204b8
 8002624:	58025408 	.word	0x58025408
 8002628:	5802541c 	.word	0x5802541c
 800262c:	58025430 	.word	0x58025430
 8002630:	58025444 	.word	0x58025444
 8002634:	58025458 	.word	0x58025458
 8002638:	5802546c 	.word	0x5802546c
 800263c:	58025480 	.word	0x58025480
 8002640:	58025494 	.word	0x58025494

08002644 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e226      	b.n	8002aae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_DMA_Start_IT+0x2a>
 800266a:	2302      	movs	r3, #2
 800266c:	e21f      	b.n	8002aae <HAL_DMA_Start_IT+0x46a>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b01      	cmp	r3, #1
 8002680:	f040 820a 	bne.w	8002a98 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a68      	ldr	r2, [pc, #416]	; (8002838 <HAL_DMA_Start_IT+0x1f4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d04a      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a66      	ldr	r2, [pc, #408]	; (800283c <HAL_DMA_Start_IT+0x1f8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d045      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a65      	ldr	r2, [pc, #404]	; (8002840 <HAL_DMA_Start_IT+0x1fc>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d040      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a63      	ldr	r2, [pc, #396]	; (8002844 <HAL_DMA_Start_IT+0x200>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d03b      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a62      	ldr	r2, [pc, #392]	; (8002848 <HAL_DMA_Start_IT+0x204>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d036      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a60      	ldr	r2, [pc, #384]	; (800284c <HAL_DMA_Start_IT+0x208>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d031      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a5f      	ldr	r2, [pc, #380]	; (8002850 <HAL_DMA_Start_IT+0x20c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d02c      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5d      	ldr	r2, [pc, #372]	; (8002854 <HAL_DMA_Start_IT+0x210>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d027      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a5c      	ldr	r2, [pc, #368]	; (8002858 <HAL_DMA_Start_IT+0x214>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d022      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a5a      	ldr	r2, [pc, #360]	; (800285c <HAL_DMA_Start_IT+0x218>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01d      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a59      	ldr	r2, [pc, #356]	; (8002860 <HAL_DMA_Start_IT+0x21c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d018      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_DMA_Start_IT+0x220>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a56      	ldr	r2, [pc, #344]	; (8002868 <HAL_DMA_Start_IT+0x224>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00e      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a54      	ldr	r2, [pc, #336]	; (800286c <HAL_DMA_Start_IT+0x228>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d009      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a53      	ldr	r2, [pc, #332]	; (8002870 <HAL_DMA_Start_IT+0x22c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d004      	beq.n	8002732 <HAL_DMA_Start_IT+0xee>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a51      	ldr	r2, [pc, #324]	; (8002874 <HAL_DMA_Start_IT+0x230>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d108      	bne.n	8002744 <HAL_DMA_Start_IT+0x100>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e007      	b.n	8002754 <HAL_DMA_Start_IT+0x110>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f001 fb56 	bl	8003e0c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a34      	ldr	r2, [pc, #208]	; (8002838 <HAL_DMA_Start_IT+0x1f4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d04a      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a33      	ldr	r2, [pc, #204]	; (800283c <HAL_DMA_Start_IT+0x1f8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d045      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a31      	ldr	r2, [pc, #196]	; (8002840 <HAL_DMA_Start_IT+0x1fc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d040      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a30      	ldr	r2, [pc, #192]	; (8002844 <HAL_DMA_Start_IT+0x200>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d03b      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2e      	ldr	r2, [pc, #184]	; (8002848 <HAL_DMA_Start_IT+0x204>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d036      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2d      	ldr	r2, [pc, #180]	; (800284c <HAL_DMA_Start_IT+0x208>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d031      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a2b      	ldr	r2, [pc, #172]	; (8002850 <HAL_DMA_Start_IT+0x20c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d02c      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a2a      	ldr	r2, [pc, #168]	; (8002854 <HAL_DMA_Start_IT+0x210>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d027      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a28      	ldr	r2, [pc, #160]	; (8002858 <HAL_DMA_Start_IT+0x214>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d022      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a27      	ldr	r2, [pc, #156]	; (800285c <HAL_DMA_Start_IT+0x218>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d01d      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a25      	ldr	r2, [pc, #148]	; (8002860 <HAL_DMA_Start_IT+0x21c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d018      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a24      	ldr	r2, [pc, #144]	; (8002864 <HAL_DMA_Start_IT+0x220>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d013      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a22      	ldr	r2, [pc, #136]	; (8002868 <HAL_DMA_Start_IT+0x224>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00e      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a21      	ldr	r2, [pc, #132]	; (800286c <HAL_DMA_Start_IT+0x228>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d009      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <HAL_DMA_Start_IT+0x22c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d004      	beq.n	8002800 <HAL_DMA_Start_IT+0x1bc>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1e      	ldr	r2, [pc, #120]	; (8002874 <HAL_DMA_Start_IT+0x230>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_DMA_Start_IT+0x1c0>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_DMA_Start_IT+0x1c2>
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d036      	beq.n	8002878 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 021e 	bic.w	r2, r3, #30
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0216 	orr.w	r2, r2, #22
 800281c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d03e      	beq.n	80028a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0208 	orr.w	r2, r2, #8
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e035      	b.n	80028a4 <HAL_DMA_Start_IT+0x260>
 8002838:	40020010 	.word	0x40020010
 800283c:	40020028 	.word	0x40020028
 8002840:	40020040 	.word	0x40020040
 8002844:	40020058 	.word	0x40020058
 8002848:	40020070 	.word	0x40020070
 800284c:	40020088 	.word	0x40020088
 8002850:	400200a0 	.word	0x400200a0
 8002854:	400200b8 	.word	0x400200b8
 8002858:	40020410 	.word	0x40020410
 800285c:	40020428 	.word	0x40020428
 8002860:	40020440 	.word	0x40020440
 8002864:	40020458 	.word	0x40020458
 8002868:	40020470 	.word	0x40020470
 800286c:	40020488 	.word	0x40020488
 8002870:	400204a0 	.word	0x400204a0
 8002874:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 020e 	bic.w	r2, r3, #14
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 020a 	orr.w	r2, r2, #10
 800288a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0204 	orr.w	r2, r2, #4
 80028a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a83      	ldr	r2, [pc, #524]	; (8002ab8 <HAL_DMA_Start_IT+0x474>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d072      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a82      	ldr	r2, [pc, #520]	; (8002abc <HAL_DMA_Start_IT+0x478>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d06d      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a80      	ldr	r2, [pc, #512]	; (8002ac0 <HAL_DMA_Start_IT+0x47c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d068      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7f      	ldr	r2, [pc, #508]	; (8002ac4 <HAL_DMA_Start_IT+0x480>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d063      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a7d      	ldr	r2, [pc, #500]	; (8002ac8 <HAL_DMA_Start_IT+0x484>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d05e      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a7c      	ldr	r2, [pc, #496]	; (8002acc <HAL_DMA_Start_IT+0x488>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d059      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a7a      	ldr	r2, [pc, #488]	; (8002ad0 <HAL_DMA_Start_IT+0x48c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d054      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a79      	ldr	r2, [pc, #484]	; (8002ad4 <HAL_DMA_Start_IT+0x490>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d04f      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a77      	ldr	r2, [pc, #476]	; (8002ad8 <HAL_DMA_Start_IT+0x494>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d04a      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a76      	ldr	r2, [pc, #472]	; (8002adc <HAL_DMA_Start_IT+0x498>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d045      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a74      	ldr	r2, [pc, #464]	; (8002ae0 <HAL_DMA_Start_IT+0x49c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d040      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a73      	ldr	r2, [pc, #460]	; (8002ae4 <HAL_DMA_Start_IT+0x4a0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d03b      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a71      	ldr	r2, [pc, #452]	; (8002ae8 <HAL_DMA_Start_IT+0x4a4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d036      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a70      	ldr	r2, [pc, #448]	; (8002aec <HAL_DMA_Start_IT+0x4a8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d031      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_DMA_Start_IT+0x4ac>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d02c      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a6d      	ldr	r2, [pc, #436]	; (8002af4 <HAL_DMA_Start_IT+0x4b0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d027      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a6b      	ldr	r2, [pc, #428]	; (8002af8 <HAL_DMA_Start_IT+0x4b4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d022      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a6a      	ldr	r2, [pc, #424]	; (8002afc <HAL_DMA_Start_IT+0x4b8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d01d      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a68      	ldr	r2, [pc, #416]	; (8002b00 <HAL_DMA_Start_IT+0x4bc>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d018      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a67      	ldr	r2, [pc, #412]	; (8002b04 <HAL_DMA_Start_IT+0x4c0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d013      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a65      	ldr	r2, [pc, #404]	; (8002b08 <HAL_DMA_Start_IT+0x4c4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00e      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a64      	ldr	r2, [pc, #400]	; (8002b0c <HAL_DMA_Start_IT+0x4c8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d009      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a62      	ldr	r2, [pc, #392]	; (8002b10 <HAL_DMA_Start_IT+0x4cc>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d004      	beq.n	8002994 <HAL_DMA_Start_IT+0x350>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a61      	ldr	r2, [pc, #388]	; (8002b14 <HAL_DMA_Start_IT+0x4d0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d101      	bne.n	8002998 <HAL_DMA_Start_IT+0x354>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_DMA_Start_IT+0x356>
 8002998:	2300      	movs	r3, #0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01a      	beq.n	80029d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a37      	ldr	r2, [pc, #220]	; (8002ab8 <HAL_DMA_Start_IT+0x474>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d04a      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a36      	ldr	r2, [pc, #216]	; (8002abc <HAL_DMA_Start_IT+0x478>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d045      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a34      	ldr	r2, [pc, #208]	; (8002ac0 <HAL_DMA_Start_IT+0x47c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d040      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a33      	ldr	r2, [pc, #204]	; (8002ac4 <HAL_DMA_Start_IT+0x480>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d03b      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a31      	ldr	r2, [pc, #196]	; (8002ac8 <HAL_DMA_Start_IT+0x484>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d036      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a30      	ldr	r2, [pc, #192]	; (8002acc <HAL_DMA_Start_IT+0x488>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d031      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2e      	ldr	r2, [pc, #184]	; (8002ad0 <HAL_DMA_Start_IT+0x48c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d02c      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2d      	ldr	r2, [pc, #180]	; (8002ad4 <HAL_DMA_Start_IT+0x490>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d027      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a2b      	ldr	r2, [pc, #172]	; (8002ad8 <HAL_DMA_Start_IT+0x494>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d022      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2a      	ldr	r2, [pc, #168]	; (8002adc <HAL_DMA_Start_IT+0x498>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d01d      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a28      	ldr	r2, [pc, #160]	; (8002ae0 <HAL_DMA_Start_IT+0x49c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d018      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a27      	ldr	r2, [pc, #156]	; (8002ae4 <HAL_DMA_Start_IT+0x4a0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <HAL_DMA_Start_IT+0x4a4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00e      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a24      	ldr	r2, [pc, #144]	; (8002aec <HAL_DMA_Start_IT+0x4a8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <HAL_DMA_Start_IT+0x4ac>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_DMA_Start_IT+0x430>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <HAL_DMA_Start_IT+0x4b0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d108      	bne.n	8002a86 <HAL_DMA_Start_IT+0x442>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	e012      	b.n	8002aac <HAL_DMA_Start_IT+0x468>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e009      	b.n	8002aac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aa6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40020010 	.word	0x40020010
 8002abc:	40020028 	.word	0x40020028
 8002ac0:	40020040 	.word	0x40020040
 8002ac4:	40020058 	.word	0x40020058
 8002ac8:	40020070 	.word	0x40020070
 8002acc:	40020088 	.word	0x40020088
 8002ad0:	400200a0 	.word	0x400200a0
 8002ad4:	400200b8 	.word	0x400200b8
 8002ad8:	40020410 	.word	0x40020410
 8002adc:	40020428 	.word	0x40020428
 8002ae0:	40020440 	.word	0x40020440
 8002ae4:	40020458 	.word	0x40020458
 8002ae8:	40020470 	.word	0x40020470
 8002aec:	40020488 	.word	0x40020488
 8002af0:	400204a0 	.word	0x400204a0
 8002af4:	400204b8 	.word	0x400204b8
 8002af8:	58025408 	.word	0x58025408
 8002afc:	5802541c 	.word	0x5802541c
 8002b00:	58025430 	.word	0x58025430
 8002b04:	58025444 	.word	0x58025444
 8002b08:	58025458 	.word	0x58025458
 8002b0c:	5802546c 	.word	0x5802546c
 8002b10:	58025480 	.word	0x58025480
 8002b14:	58025494 	.word	0x58025494

08002b18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e205      	b.n	8002f36 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d004      	beq.n	8002b40 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2280      	movs	r2, #128	; 0x80
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e1fa      	b.n	8002f36 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a8c      	ldr	r2, [pc, #560]	; (8002d78 <HAL_DMA_Abort_IT+0x260>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d04a      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a8b      	ldr	r2, [pc, #556]	; (8002d7c <HAL_DMA_Abort_IT+0x264>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d045      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a89      	ldr	r2, [pc, #548]	; (8002d80 <HAL_DMA_Abort_IT+0x268>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d040      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a88      	ldr	r2, [pc, #544]	; (8002d84 <HAL_DMA_Abort_IT+0x26c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d03b      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a86      	ldr	r2, [pc, #536]	; (8002d88 <HAL_DMA_Abort_IT+0x270>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d036      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a85      	ldr	r2, [pc, #532]	; (8002d8c <HAL_DMA_Abort_IT+0x274>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d031      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a83      	ldr	r2, [pc, #524]	; (8002d90 <HAL_DMA_Abort_IT+0x278>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d02c      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a82      	ldr	r2, [pc, #520]	; (8002d94 <HAL_DMA_Abort_IT+0x27c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d027      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a80      	ldr	r2, [pc, #512]	; (8002d98 <HAL_DMA_Abort_IT+0x280>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d022      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a7f      	ldr	r2, [pc, #508]	; (8002d9c <HAL_DMA_Abort_IT+0x284>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d01d      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a7d      	ldr	r2, [pc, #500]	; (8002da0 <HAL_DMA_Abort_IT+0x288>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d018      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7c      	ldr	r2, [pc, #496]	; (8002da4 <HAL_DMA_Abort_IT+0x28c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a7a      	ldr	r2, [pc, #488]	; (8002da8 <HAL_DMA_Abort_IT+0x290>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00e      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a79      	ldr	r2, [pc, #484]	; (8002dac <HAL_DMA_Abort_IT+0x294>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d009      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a77      	ldr	r2, [pc, #476]	; (8002db0 <HAL_DMA_Abort_IT+0x298>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a76      	ldr	r2, [pc, #472]	; (8002db4 <HAL_DMA_Abort_IT+0x29c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d101      	bne.n	8002be4 <HAL_DMA_Abort_IT+0xcc>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_DMA_Abort_IT+0xce>
 8002be4:	2300      	movs	r3, #0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d065      	beq.n	8002cb6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2204      	movs	r2, #4
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a60      	ldr	r2, [pc, #384]	; (8002d78 <HAL_DMA_Abort_IT+0x260>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04a      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a5e      	ldr	r2, [pc, #376]	; (8002d7c <HAL_DMA_Abort_IT+0x264>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d045      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a5d      	ldr	r2, [pc, #372]	; (8002d80 <HAL_DMA_Abort_IT+0x268>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d040      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a5b      	ldr	r2, [pc, #364]	; (8002d84 <HAL_DMA_Abort_IT+0x26c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d03b      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a5a      	ldr	r2, [pc, #360]	; (8002d88 <HAL_DMA_Abort_IT+0x270>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d036      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <HAL_DMA_Abort_IT+0x274>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a57      	ldr	r2, [pc, #348]	; (8002d90 <HAL_DMA_Abort_IT+0x278>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d02c      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a55      	ldr	r2, [pc, #340]	; (8002d94 <HAL_DMA_Abort_IT+0x27c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d027      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a54      	ldr	r2, [pc, #336]	; (8002d98 <HAL_DMA_Abort_IT+0x280>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a52      	ldr	r2, [pc, #328]	; (8002d9c <HAL_DMA_Abort_IT+0x284>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01d      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a51      	ldr	r2, [pc, #324]	; (8002da0 <HAL_DMA_Abort_IT+0x288>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a4f      	ldr	r2, [pc, #316]	; (8002da4 <HAL_DMA_Abort_IT+0x28c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a4e      	ldr	r2, [pc, #312]	; (8002da8 <HAL_DMA_Abort_IT+0x290>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a4c      	ldr	r2, [pc, #304]	; (8002dac <HAL_DMA_Abort_IT+0x294>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a4b      	ldr	r2, [pc, #300]	; (8002db0 <HAL_DMA_Abort_IT+0x298>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a49      	ldr	r2, [pc, #292]	; (8002db4 <HAL_DMA_Abort_IT+0x29c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <HAL_DMA_Abort_IT+0x18c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e147      	b.n	8002f34 <HAL_DMA_Abort_IT+0x41c>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e13e      	b.n	8002f34 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 020e 	bic.w	r2, r2, #14
 8002cc4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2b      	ldr	r2, [pc, #172]	; (8002d78 <HAL_DMA_Abort_IT+0x260>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d04a      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a29      	ldr	r2, [pc, #164]	; (8002d7c <HAL_DMA_Abort_IT+0x264>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d045      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a28      	ldr	r2, [pc, #160]	; (8002d80 <HAL_DMA_Abort_IT+0x268>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d040      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <HAL_DMA_Abort_IT+0x26c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d03b      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <HAL_DMA_Abort_IT+0x270>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d036      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a23      	ldr	r2, [pc, #140]	; (8002d8c <HAL_DMA_Abort_IT+0x274>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d031      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <HAL_DMA_Abort_IT+0x278>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d02c      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <HAL_DMA_Abort_IT+0x27c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d027      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_DMA_Abort_IT+0x280>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d022      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <HAL_DMA_Abort_IT+0x284>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01d      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_DMA_Abort_IT+0x288>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d018      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1a      	ldr	r2, [pc, #104]	; (8002da4 <HAL_DMA_Abort_IT+0x28c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_DMA_Abort_IT+0x290>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00e      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a17      	ldr	r2, [pc, #92]	; (8002dac <HAL_DMA_Abort_IT+0x294>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d009      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a16      	ldr	r2, [pc, #88]	; (8002db0 <HAL_DMA_Abort_IT+0x298>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d004      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <HAL_DMA_Abort_IT+0x29c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d128      	bne.n	8002db8 <HAL_DMA_Abort_IT+0x2a0>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e027      	b.n	8002dc8 <HAL_DMA_Abort_IT+0x2b0>
 8002d78:	40020010 	.word	0x40020010
 8002d7c:	40020028 	.word	0x40020028
 8002d80:	40020040 	.word	0x40020040
 8002d84:	40020058 	.word	0x40020058
 8002d88:	40020070 	.word	0x40020070
 8002d8c:	40020088 	.word	0x40020088
 8002d90:	400200a0 	.word	0x400200a0
 8002d94:	400200b8 	.word	0x400200b8
 8002d98:	40020410 	.word	0x40020410
 8002d9c:	40020428 	.word	0x40020428
 8002da0:	40020440 	.word	0x40020440
 8002da4:	40020458 	.word	0x40020458
 8002da8:	40020470 	.word	0x40020470
 8002dac:	40020488 	.word	0x40020488
 8002db0:	400204a0 	.word	0x400204a0
 8002db4:	400204b8 	.word	0x400204b8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5c      	ldr	r2, [pc, #368]	; (8002f40 <HAL_DMA_Abort_IT+0x428>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d072      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a5b      	ldr	r2, [pc, #364]	; (8002f44 <HAL_DMA_Abort_IT+0x42c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d06d      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a59      	ldr	r2, [pc, #356]	; (8002f48 <HAL_DMA_Abort_IT+0x430>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d068      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <HAL_DMA_Abort_IT+0x434>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d063      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a56      	ldr	r2, [pc, #344]	; (8002f50 <HAL_DMA_Abort_IT+0x438>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d05e      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a55      	ldr	r2, [pc, #340]	; (8002f54 <HAL_DMA_Abort_IT+0x43c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d059      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a53      	ldr	r2, [pc, #332]	; (8002f58 <HAL_DMA_Abort_IT+0x440>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d054      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_DMA_Abort_IT+0x444>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d04f      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a50      	ldr	r2, [pc, #320]	; (8002f60 <HAL_DMA_Abort_IT+0x448>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d04a      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <HAL_DMA_Abort_IT+0x44c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d045      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a4d      	ldr	r2, [pc, #308]	; (8002f68 <HAL_DMA_Abort_IT+0x450>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d040      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a4c      	ldr	r2, [pc, #304]	; (8002f6c <HAL_DMA_Abort_IT+0x454>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d03b      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a4a      	ldr	r2, [pc, #296]	; (8002f70 <HAL_DMA_Abort_IT+0x458>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d036      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a49      	ldr	r2, [pc, #292]	; (8002f74 <HAL_DMA_Abort_IT+0x45c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d031      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a47      	ldr	r2, [pc, #284]	; (8002f78 <HAL_DMA_Abort_IT+0x460>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d02c      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a46      	ldr	r2, [pc, #280]	; (8002f7c <HAL_DMA_Abort_IT+0x464>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d027      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a44      	ldr	r2, [pc, #272]	; (8002f80 <HAL_DMA_Abort_IT+0x468>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d022      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a43      	ldr	r2, [pc, #268]	; (8002f84 <HAL_DMA_Abort_IT+0x46c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d01d      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a41      	ldr	r2, [pc, #260]	; (8002f88 <HAL_DMA_Abort_IT+0x470>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d018      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a40      	ldr	r2, [pc, #256]	; (8002f8c <HAL_DMA_Abort_IT+0x474>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d013      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a3e      	ldr	r2, [pc, #248]	; (8002f90 <HAL_DMA_Abort_IT+0x478>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00e      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a3d      	ldr	r2, [pc, #244]	; (8002f94 <HAL_DMA_Abort_IT+0x47c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d009      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a3b      	ldr	r2, [pc, #236]	; (8002f98 <HAL_DMA_Abort_IT+0x480>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d004      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a3a      	ldr	r2, [pc, #232]	; (8002f9c <HAL_DMA_Abort_IT+0x484>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d101      	bne.n	8002ebc <HAL_DMA_Abort_IT+0x3a4>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <HAL_DMA_Abort_IT+0x3a6>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d028      	beq.n	8002f14 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ef0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40020010 	.word	0x40020010
 8002f44:	40020028 	.word	0x40020028
 8002f48:	40020040 	.word	0x40020040
 8002f4c:	40020058 	.word	0x40020058
 8002f50:	40020070 	.word	0x40020070
 8002f54:	40020088 	.word	0x40020088
 8002f58:	400200a0 	.word	0x400200a0
 8002f5c:	400200b8 	.word	0x400200b8
 8002f60:	40020410 	.word	0x40020410
 8002f64:	40020428 	.word	0x40020428
 8002f68:	40020440 	.word	0x40020440
 8002f6c:	40020458 	.word	0x40020458
 8002f70:	40020470 	.word	0x40020470
 8002f74:	40020488 	.word	0x40020488
 8002f78:	400204a0 	.word	0x400204a0
 8002f7c:	400204b8 	.word	0x400204b8
 8002f80:	58025408 	.word	0x58025408
 8002f84:	5802541c 	.word	0x5802541c
 8002f88:	58025430 	.word	0x58025430
 8002f8c:	58025444 	.word	0x58025444
 8002f90:	58025458 	.word	0x58025458
 8002f94:	5802546c 	.word	0x5802546c
 8002f98:	58025480 	.word	0x58025480
 8002f9c:	58025494 	.word	0x58025494

08002fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fac:	4b67      	ldr	r3, [pc, #412]	; (800314c <HAL_DMA_IRQHandler+0x1ac>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a67      	ldr	r2, [pc, #412]	; (8003150 <HAL_DMA_IRQHandler+0x1b0>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0a9b      	lsrs	r3, r3, #10
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a5f      	ldr	r2, [pc, #380]	; (8003154 <HAL_DMA_IRQHandler+0x1b4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d04a      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a5d      	ldr	r2, [pc, #372]	; (8003158 <HAL_DMA_IRQHandler+0x1b8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d045      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a5c      	ldr	r2, [pc, #368]	; (800315c <HAL_DMA_IRQHandler+0x1bc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d040      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a5a      	ldr	r2, [pc, #360]	; (8003160 <HAL_DMA_IRQHandler+0x1c0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d03b      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a59      	ldr	r2, [pc, #356]	; (8003164 <HAL_DMA_IRQHandler+0x1c4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d036      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a57      	ldr	r2, [pc, #348]	; (8003168 <HAL_DMA_IRQHandler+0x1c8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d031      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a56      	ldr	r2, [pc, #344]	; (800316c <HAL_DMA_IRQHandler+0x1cc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d02c      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a54      	ldr	r2, [pc, #336]	; (8003170 <HAL_DMA_IRQHandler+0x1d0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d027      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a53      	ldr	r2, [pc, #332]	; (8003174 <HAL_DMA_IRQHandler+0x1d4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d022      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a51      	ldr	r2, [pc, #324]	; (8003178 <HAL_DMA_IRQHandler+0x1d8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01d      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a50      	ldr	r2, [pc, #320]	; (800317c <HAL_DMA_IRQHandler+0x1dc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d018      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a4e      	ldr	r2, [pc, #312]	; (8003180 <HAL_DMA_IRQHandler+0x1e0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a4d      	ldr	r2, [pc, #308]	; (8003184 <HAL_DMA_IRQHandler+0x1e4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a4b      	ldr	r2, [pc, #300]	; (8003188 <HAL_DMA_IRQHandler+0x1e8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d009      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a4a      	ldr	r2, [pc, #296]	; (800318c <HAL_DMA_IRQHandler+0x1ec>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a48      	ldr	r2, [pc, #288]	; (8003190 <HAL_DMA_IRQHandler+0x1f0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_DMA_IRQHandler+0xd6>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_DMA_IRQHandler+0xd8>
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 842b 	beq.w	80038d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	2208      	movs	r2, #8
 8003088:	409a      	lsls	r2, r3
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80a2 	beq.w	80031d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2e      	ldr	r2, [pc, #184]	; (8003154 <HAL_DMA_IRQHandler+0x1b4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d04a      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a2d      	ldr	r2, [pc, #180]	; (8003158 <HAL_DMA_IRQHandler+0x1b8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d045      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a2b      	ldr	r2, [pc, #172]	; (800315c <HAL_DMA_IRQHandler+0x1bc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d040      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <HAL_DMA_IRQHandler+0x1c0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d03b      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a28      	ldr	r2, [pc, #160]	; (8003164 <HAL_DMA_IRQHandler+0x1c4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d036      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a27      	ldr	r2, [pc, #156]	; (8003168 <HAL_DMA_IRQHandler+0x1c8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d031      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a25      	ldr	r2, [pc, #148]	; (800316c <HAL_DMA_IRQHandler+0x1cc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02c      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a24      	ldr	r2, [pc, #144]	; (8003170 <HAL_DMA_IRQHandler+0x1d0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d027      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a22      	ldr	r2, [pc, #136]	; (8003174 <HAL_DMA_IRQHandler+0x1d4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d022      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a21      	ldr	r2, [pc, #132]	; (8003178 <HAL_DMA_IRQHandler+0x1d8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d01d      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_DMA_IRQHandler+0x1dc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d018      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1e      	ldr	r2, [pc, #120]	; (8003180 <HAL_DMA_IRQHandler+0x1e0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d013      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <HAL_DMA_IRQHandler+0x1e4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00e      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <HAL_DMA_IRQHandler+0x1e8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d009      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a19      	ldr	r2, [pc, #100]	; (800318c <HAL_DMA_IRQHandler+0x1ec>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <HAL_DMA_IRQHandler+0x1f0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d12f      	bne.n	8003194 <HAL_DMA_IRQHandler+0x1f4>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	e02e      	b.n	80031a8 <HAL_DMA_IRQHandler+0x208>
 800314a:	bf00      	nop
 800314c:	20000010 	.word	0x20000010
 8003150:	1b4e81b5 	.word	0x1b4e81b5
 8003154:	40020010 	.word	0x40020010
 8003158:	40020028 	.word	0x40020028
 800315c:	40020040 	.word	0x40020040
 8003160:	40020058 	.word	0x40020058
 8003164:	40020070 	.word	0x40020070
 8003168:	40020088 	.word	0x40020088
 800316c:	400200a0 	.word	0x400200a0
 8003170:	400200b8 	.word	0x400200b8
 8003174:	40020410 	.word	0x40020410
 8003178:	40020428 	.word	0x40020428
 800317c:	40020440 	.word	0x40020440
 8003180:	40020458 	.word	0x40020458
 8003184:	40020470 	.word	0x40020470
 8003188:	40020488 	.word	0x40020488
 800318c:	400204a0 	.word	0x400204a0
 8003190:	400204b8 	.word	0x400204b8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	bf14      	ite	ne
 80031a2:	2301      	movne	r3, #1
 80031a4:	2300      	moveq	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0204 	bic.w	r2, r2, #4
 80031ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	2208      	movs	r2, #8
 80031c6:	409a      	lsls	r2, r3
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d0:	f043 0201 	orr.w	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	fa22 f303 	lsr.w	r3, r2, r3
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d06e      	beq.n	80032cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a69      	ldr	r2, [pc, #420]	; (8003398 <HAL_DMA_IRQHandler+0x3f8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d04a      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a67      	ldr	r2, [pc, #412]	; (800339c <HAL_DMA_IRQHandler+0x3fc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d045      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a66      	ldr	r2, [pc, #408]	; (80033a0 <HAL_DMA_IRQHandler+0x400>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d040      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a64      	ldr	r2, [pc, #400]	; (80033a4 <HAL_DMA_IRQHandler+0x404>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d03b      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a63      	ldr	r2, [pc, #396]	; (80033a8 <HAL_DMA_IRQHandler+0x408>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d036      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a61      	ldr	r2, [pc, #388]	; (80033ac <HAL_DMA_IRQHandler+0x40c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d031      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a60      	ldr	r2, [pc, #384]	; (80033b0 <HAL_DMA_IRQHandler+0x410>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d02c      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a5e      	ldr	r2, [pc, #376]	; (80033b4 <HAL_DMA_IRQHandler+0x414>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d027      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a5d      	ldr	r2, [pc, #372]	; (80033b8 <HAL_DMA_IRQHandler+0x418>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d022      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a5b      	ldr	r2, [pc, #364]	; (80033bc <HAL_DMA_IRQHandler+0x41c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01d      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5a      	ldr	r2, [pc, #360]	; (80033c0 <HAL_DMA_IRQHandler+0x420>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d018      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a58      	ldr	r2, [pc, #352]	; (80033c4 <HAL_DMA_IRQHandler+0x424>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a57      	ldr	r2, [pc, #348]	; (80033c8 <HAL_DMA_IRQHandler+0x428>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00e      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a55      	ldr	r2, [pc, #340]	; (80033cc <HAL_DMA_IRQHandler+0x42c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d009      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a54      	ldr	r2, [pc, #336]	; (80033d0 <HAL_DMA_IRQHandler+0x430>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a52      	ldr	r2, [pc, #328]	; (80033d4 <HAL_DMA_IRQHandler+0x434>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10a      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x304>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf14      	ite	ne
 800329c:	2301      	movne	r3, #1
 800329e:	2300      	moveq	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e003      	b.n	80032ac <HAL_DMA_IRQHandler+0x30c>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2300      	movs	r3, #0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2201      	movs	r2, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c4:	f043 0202 	orr.w	r2, r3, #2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	2204      	movs	r2, #4
 80032d6:	409a      	lsls	r2, r3
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 808f 	beq.w	8003400 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2c      	ldr	r2, [pc, #176]	; (8003398 <HAL_DMA_IRQHandler+0x3f8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d04a      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2a      	ldr	r2, [pc, #168]	; (800339c <HAL_DMA_IRQHandler+0x3fc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d045      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <HAL_DMA_IRQHandler+0x400>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d040      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a27      	ldr	r2, [pc, #156]	; (80033a4 <HAL_DMA_IRQHandler+0x404>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d03b      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a26      	ldr	r2, [pc, #152]	; (80033a8 <HAL_DMA_IRQHandler+0x408>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d036      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a24      	ldr	r2, [pc, #144]	; (80033ac <HAL_DMA_IRQHandler+0x40c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d031      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a23      	ldr	r2, [pc, #140]	; (80033b0 <HAL_DMA_IRQHandler+0x410>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d02c      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <HAL_DMA_IRQHandler+0x414>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d027      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <HAL_DMA_IRQHandler+0x418>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d022      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <HAL_DMA_IRQHandler+0x41c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01d      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <HAL_DMA_IRQHandler+0x420>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d018      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <HAL_DMA_IRQHandler+0x424>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <HAL_DMA_IRQHandler+0x428>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00e      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_DMA_IRQHandler+0x42c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <HAL_DMA_IRQHandler+0x430>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <HAL_DMA_IRQHandler+0x434>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d12a      	bne.n	80033d8 <HAL_DMA_IRQHandler+0x438>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf14      	ite	ne
 8003390:	2301      	movne	r3, #1
 8003392:	2300      	moveq	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e023      	b.n	80033e0 <HAL_DMA_IRQHandler+0x440>
 8003398:	40020010 	.word	0x40020010
 800339c:	40020028 	.word	0x40020028
 80033a0:	40020040 	.word	0x40020040
 80033a4:	40020058 	.word	0x40020058
 80033a8:	40020070 	.word	0x40020070
 80033ac:	40020088 	.word	0x40020088
 80033b0:	400200a0 	.word	0x400200a0
 80033b4:	400200b8 	.word	0x400200b8
 80033b8:	40020410 	.word	0x40020410
 80033bc:	40020428 	.word	0x40020428
 80033c0:	40020440 	.word	0x40020440
 80033c4:	40020458 	.word	0x40020458
 80033c8:	40020470 	.word	0x40020470
 80033cc:	40020488 	.word	0x40020488
 80033d0:	400204a0 	.word	0x400204a0
 80033d4:	400204b8 	.word	0x400204b8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2204      	movs	r2, #4
 80033ee:	409a      	lsls	r2, r3
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	f043 0204 	orr.w	r2, r3, #4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2210      	movs	r2, #16
 800340a:	409a      	lsls	r2, r3
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80a6 	beq.w	8003562 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a85      	ldr	r2, [pc, #532]	; (8003630 <HAL_DMA_IRQHandler+0x690>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d04a      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a83      	ldr	r2, [pc, #524]	; (8003634 <HAL_DMA_IRQHandler+0x694>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d045      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a82      	ldr	r2, [pc, #520]	; (8003638 <HAL_DMA_IRQHandler+0x698>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d040      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a80      	ldr	r2, [pc, #512]	; (800363c <HAL_DMA_IRQHandler+0x69c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d03b      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a7f      	ldr	r2, [pc, #508]	; (8003640 <HAL_DMA_IRQHandler+0x6a0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d036      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a7d      	ldr	r2, [pc, #500]	; (8003644 <HAL_DMA_IRQHandler+0x6a4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d031      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a7c      	ldr	r2, [pc, #496]	; (8003648 <HAL_DMA_IRQHandler+0x6a8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d02c      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a7a      	ldr	r2, [pc, #488]	; (800364c <HAL_DMA_IRQHandler+0x6ac>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d027      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a79      	ldr	r2, [pc, #484]	; (8003650 <HAL_DMA_IRQHandler+0x6b0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d022      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a77      	ldr	r2, [pc, #476]	; (8003654 <HAL_DMA_IRQHandler+0x6b4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01d      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a76      	ldr	r2, [pc, #472]	; (8003658 <HAL_DMA_IRQHandler+0x6b8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d018      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a74      	ldr	r2, [pc, #464]	; (800365c <HAL_DMA_IRQHandler+0x6bc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a73      	ldr	r2, [pc, #460]	; (8003660 <HAL_DMA_IRQHandler+0x6c0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00e      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a71      	ldr	r2, [pc, #452]	; (8003664 <HAL_DMA_IRQHandler+0x6c4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a70      	ldr	r2, [pc, #448]	; (8003668 <HAL_DMA_IRQHandler+0x6c8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a6e      	ldr	r2, [pc, #440]	; (800366c <HAL_DMA_IRQHandler+0x6cc>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d10a      	bne.n	80034cc <HAL_DMA_IRQHandler+0x52c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e009      	b.n	80034e0 <HAL_DMA_IRQHandler+0x540>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bf14      	ite	ne
 80034da:	2301      	movne	r3, #1
 80034dc:	2300      	moveq	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d03e      	beq.n	8003562 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2210      	movs	r2, #16
 80034ee:	409a      	lsls	r2, r3
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d018      	beq.n	8003534 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d108      	bne.n	8003522 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d024      	beq.n	8003562 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
 8003520:	e01f      	b.n	8003562 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01b      	beq.n	8003562 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
 8003532:	e016      	b.n	8003562 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d107      	bne.n	8003552 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0208 	bic.w	r2, r2, #8
 8003550:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2220      	movs	r2, #32
 800356c:	409a      	lsls	r2, r3
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8110 	beq.w	8003798 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a2c      	ldr	r2, [pc, #176]	; (8003630 <HAL_DMA_IRQHandler+0x690>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d04a      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a2b      	ldr	r2, [pc, #172]	; (8003634 <HAL_DMA_IRQHandler+0x694>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d045      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a29      	ldr	r2, [pc, #164]	; (8003638 <HAL_DMA_IRQHandler+0x698>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d040      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a28      	ldr	r2, [pc, #160]	; (800363c <HAL_DMA_IRQHandler+0x69c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d03b      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a26      	ldr	r2, [pc, #152]	; (8003640 <HAL_DMA_IRQHandler+0x6a0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d036      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a25      	ldr	r2, [pc, #148]	; (8003644 <HAL_DMA_IRQHandler+0x6a4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d031      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a23      	ldr	r2, [pc, #140]	; (8003648 <HAL_DMA_IRQHandler+0x6a8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d02c      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a22      	ldr	r2, [pc, #136]	; (800364c <HAL_DMA_IRQHandler+0x6ac>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d027      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a20      	ldr	r2, [pc, #128]	; (8003650 <HAL_DMA_IRQHandler+0x6b0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d022      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1f      	ldr	r2, [pc, #124]	; (8003654 <HAL_DMA_IRQHandler+0x6b4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d01d      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <HAL_DMA_IRQHandler+0x6b8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d018      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1c      	ldr	r2, [pc, #112]	; (800365c <HAL_DMA_IRQHandler+0x6bc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d013      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1a      	ldr	r2, [pc, #104]	; (8003660 <HAL_DMA_IRQHandler+0x6c0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00e      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a19      	ldr	r2, [pc, #100]	; (8003664 <HAL_DMA_IRQHandler+0x6c4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d009      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a17      	ldr	r2, [pc, #92]	; (8003668 <HAL_DMA_IRQHandler+0x6c8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d004      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a16      	ldr	r2, [pc, #88]	; (800366c <HAL_DMA_IRQHandler+0x6cc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d12b      	bne.n	8003670 <HAL_DMA_IRQHandler+0x6d0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	bf14      	ite	ne
 8003626:	2301      	movne	r3, #1
 8003628:	2300      	moveq	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e02a      	b.n	8003684 <HAL_DMA_IRQHandler+0x6e4>
 800362e:	bf00      	nop
 8003630:	40020010 	.word	0x40020010
 8003634:	40020028 	.word	0x40020028
 8003638:	40020040 	.word	0x40020040
 800363c:	40020058 	.word	0x40020058
 8003640:	40020070 	.word	0x40020070
 8003644:	40020088 	.word	0x40020088
 8003648:	400200a0 	.word	0x400200a0
 800364c:	400200b8 	.word	0x400200b8
 8003650:	40020410 	.word	0x40020410
 8003654:	40020428 	.word	0x40020428
 8003658:	40020440 	.word	0x40020440
 800365c:	40020458 	.word	0x40020458
 8003660:	40020470 	.word	0x40020470
 8003664:	40020488 	.word	0x40020488
 8003668:	400204a0 	.word	0x400204a0
 800366c:	400204b8 	.word	0x400204b8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8087 	beq.w	8003798 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2220      	movs	r2, #32
 8003694:	409a      	lsls	r2, r3
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d139      	bne.n	800371a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0216 	bic.w	r2, r2, #22
 80036b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <HAL_DMA_IRQHandler+0x736>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0208 	bic.w	r2, r2, #8
 80036e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	223f      	movs	r2, #63	; 0x3f
 80036f0:	409a      	lsls	r2, r3
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 834a 	beq.w	8003da4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
          }
          return;
 8003718:	e344      	b.n	8003da4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d018      	beq.n	800375a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	2b00      	cmp	r3, #0
 800373c:	d02c      	beq.n	8003798 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
 8003746:	e027      	b.n	8003798 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d023      	beq.n	8003798 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
 8003758:	e01e      	b.n	8003798 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10f      	bne.n	8003788 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0210 	bic.w	r2, r2, #16
 8003776:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8306 	beq.w	8003dae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8088 	beq.w	80038c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2204      	movs	r2, #4
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a7a      	ldr	r2, [pc, #488]	; (80039a8 <HAL_DMA_IRQHandler+0xa08>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d04a      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a79      	ldr	r2, [pc, #484]	; (80039ac <HAL_DMA_IRQHandler+0xa0c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d045      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a77      	ldr	r2, [pc, #476]	; (80039b0 <HAL_DMA_IRQHandler+0xa10>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d040      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a76      	ldr	r2, [pc, #472]	; (80039b4 <HAL_DMA_IRQHandler+0xa14>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d03b      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a74      	ldr	r2, [pc, #464]	; (80039b8 <HAL_DMA_IRQHandler+0xa18>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d036      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a73      	ldr	r2, [pc, #460]	; (80039bc <HAL_DMA_IRQHandler+0xa1c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d031      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a71      	ldr	r2, [pc, #452]	; (80039c0 <HAL_DMA_IRQHandler+0xa20>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d02c      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a70      	ldr	r2, [pc, #448]	; (80039c4 <HAL_DMA_IRQHandler+0xa24>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d027      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a6e      	ldr	r2, [pc, #440]	; (80039c8 <HAL_DMA_IRQHandler+0xa28>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d022      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6d      	ldr	r2, [pc, #436]	; (80039cc <HAL_DMA_IRQHandler+0xa2c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d01d      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a6b      	ldr	r2, [pc, #428]	; (80039d0 <HAL_DMA_IRQHandler+0xa30>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d018      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a6a      	ldr	r2, [pc, #424]	; (80039d4 <HAL_DMA_IRQHandler+0xa34>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a68      	ldr	r2, [pc, #416]	; (80039d8 <HAL_DMA_IRQHandler+0xa38>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00e      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a67      	ldr	r2, [pc, #412]	; (80039dc <HAL_DMA_IRQHandler+0xa3c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a65      	ldr	r2, [pc, #404]	; (80039e0 <HAL_DMA_IRQHandler+0xa40>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d004      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a64      	ldr	r2, [pc, #400]	; (80039e4 <HAL_DMA_IRQHandler+0xa44>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d108      	bne.n	800386a <HAL_DMA_IRQHandler+0x8ca>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e007      	b.n	800387a <HAL_DMA_IRQHandler+0x8da>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	429a      	cmp	r2, r3
 8003884:	d307      	bcc.n	8003896 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f2      	bne.n	800387a <HAL_DMA_IRQHandler+0x8da>
 8003894:	e000      	b.n	8003898 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003896:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2203      	movs	r2, #3
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80038b6:	e003      	b.n	80038c0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8272 	beq.w	8003dae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
 80038d2:	e26c      	b.n	8003dae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a43      	ldr	r2, [pc, #268]	; (80039e8 <HAL_DMA_IRQHandler+0xa48>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d022      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a42      	ldr	r2, [pc, #264]	; (80039ec <HAL_DMA_IRQHandler+0xa4c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d01d      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a40      	ldr	r2, [pc, #256]	; (80039f0 <HAL_DMA_IRQHandler+0xa50>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d018      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a3f      	ldr	r2, [pc, #252]	; (80039f4 <HAL_DMA_IRQHandler+0xa54>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a3d      	ldr	r2, [pc, #244]	; (80039f8 <HAL_DMA_IRQHandler+0xa58>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00e      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a3c      	ldr	r2, [pc, #240]	; (80039fc <HAL_DMA_IRQHandler+0xa5c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a3a      	ldr	r2, [pc, #232]	; (8003a00 <HAL_DMA_IRQHandler+0xa60>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a39      	ldr	r2, [pc, #228]	; (8003a04 <HAL_DMA_IRQHandler+0xa64>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <HAL_DMA_IRQHandler+0x988>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_DMA_IRQHandler+0x98a>
 8003928:	2300      	movs	r3, #0
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 823f 	beq.w	8003dae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	2204      	movs	r2, #4
 8003942:	409a      	lsls	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80cd 	beq.w	8003ae8 <HAL_DMA_IRQHandler+0xb48>
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80c7 	beq.w	8003ae8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	2204      	movs	r2, #4
 8003964:	409a      	lsls	r2, r3
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d049      	beq.n	8003a08 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 8210 	beq.w	8003da8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003990:	e20a      	b.n	8003da8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8206 	beq.w	8003da8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039a4:	e200      	b.n	8003da8 <HAL_DMA_IRQHandler+0xe08>
 80039a6:	bf00      	nop
 80039a8:	40020010 	.word	0x40020010
 80039ac:	40020028 	.word	0x40020028
 80039b0:	40020040 	.word	0x40020040
 80039b4:	40020058 	.word	0x40020058
 80039b8:	40020070 	.word	0x40020070
 80039bc:	40020088 	.word	0x40020088
 80039c0:	400200a0 	.word	0x400200a0
 80039c4:	400200b8 	.word	0x400200b8
 80039c8:	40020410 	.word	0x40020410
 80039cc:	40020428 	.word	0x40020428
 80039d0:	40020440 	.word	0x40020440
 80039d4:	40020458 	.word	0x40020458
 80039d8:	40020470 	.word	0x40020470
 80039dc:	40020488 	.word	0x40020488
 80039e0:	400204a0 	.word	0x400204a0
 80039e4:	400204b8 	.word	0x400204b8
 80039e8:	58025408 	.word	0x58025408
 80039ec:	5802541c 	.word	0x5802541c
 80039f0:	58025430 	.word	0x58025430
 80039f4:	58025444 	.word	0x58025444
 80039f8:	58025458 	.word	0x58025458
 80039fc:	5802546c 	.word	0x5802546c
 8003a00:	58025480 	.word	0x58025480
 8003a04:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d160      	bne.n	8003ad4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a8c      	ldr	r2, [pc, #560]	; (8003c48 <HAL_DMA_IRQHandler+0xca8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d04a      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a8a      	ldr	r2, [pc, #552]	; (8003c4c <HAL_DMA_IRQHandler+0xcac>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d045      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a89      	ldr	r2, [pc, #548]	; (8003c50 <HAL_DMA_IRQHandler+0xcb0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d040      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a87      	ldr	r2, [pc, #540]	; (8003c54 <HAL_DMA_IRQHandler+0xcb4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d03b      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a86      	ldr	r2, [pc, #536]	; (8003c58 <HAL_DMA_IRQHandler+0xcb8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d036      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a84      	ldr	r2, [pc, #528]	; (8003c5c <HAL_DMA_IRQHandler+0xcbc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d031      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a83      	ldr	r2, [pc, #524]	; (8003c60 <HAL_DMA_IRQHandler+0xcc0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d02c      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a81      	ldr	r2, [pc, #516]	; (8003c64 <HAL_DMA_IRQHandler+0xcc4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d027      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a80      	ldr	r2, [pc, #512]	; (8003c68 <HAL_DMA_IRQHandler+0xcc8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d022      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a7e      	ldr	r2, [pc, #504]	; (8003c6c <HAL_DMA_IRQHandler+0xccc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01d      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7d      	ldr	r2, [pc, #500]	; (8003c70 <HAL_DMA_IRQHandler+0xcd0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d018      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a7b      	ldr	r2, [pc, #492]	; (8003c74 <HAL_DMA_IRQHandler+0xcd4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a7a      	ldr	r2, [pc, #488]	; (8003c78 <HAL_DMA_IRQHandler+0xcd8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00e      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a78      	ldr	r2, [pc, #480]	; (8003c7c <HAL_DMA_IRQHandler+0xcdc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a77      	ldr	r2, [pc, #476]	; (8003c80 <HAL_DMA_IRQHandler+0xce0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d004      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a75      	ldr	r2, [pc, #468]	; (8003c84 <HAL_DMA_IRQHandler+0xce4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d108      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0xb24>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0208 	bic.w	r2, r2, #8
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e007      	b.n	8003ad4 <HAL_DMA_IRQHandler+0xb34>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0204 	bic.w	r2, r2, #4
 8003ad2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8165 	beq.w	8003da8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ae6:	e15f      	b.n	8003da8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2202      	movs	r2, #2
 8003af2:	409a      	lsls	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80c5 	beq.w	8003c88 <HAL_DMA_IRQHandler+0xce8>
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80bf 	beq.w	8003c88 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	2202      	movs	r2, #2
 8003b14:	409a      	lsls	r2, r3
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d018      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 813a 	beq.w	8003dac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b40:	e134      	b.n	8003dac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8130 	beq.w	8003dac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b54:	e12a      	b.n	8003dac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d168      	bne.n	8003c32 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a38      	ldr	r2, [pc, #224]	; (8003c48 <HAL_DMA_IRQHandler+0xca8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d04a      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a37      	ldr	r2, [pc, #220]	; (8003c4c <HAL_DMA_IRQHandler+0xcac>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d045      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a35      	ldr	r2, [pc, #212]	; (8003c50 <HAL_DMA_IRQHandler+0xcb0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d040      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a34      	ldr	r2, [pc, #208]	; (8003c54 <HAL_DMA_IRQHandler+0xcb4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d03b      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a32      	ldr	r2, [pc, #200]	; (8003c58 <HAL_DMA_IRQHandler+0xcb8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d036      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a31      	ldr	r2, [pc, #196]	; (8003c5c <HAL_DMA_IRQHandler+0xcbc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d031      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2f      	ldr	r2, [pc, #188]	; (8003c60 <HAL_DMA_IRQHandler+0xcc0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d02c      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2e      	ldr	r2, [pc, #184]	; (8003c64 <HAL_DMA_IRQHandler+0xcc4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d027      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <HAL_DMA_IRQHandler+0xcc8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d022      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a2b      	ldr	r2, [pc, #172]	; (8003c6c <HAL_DMA_IRQHandler+0xccc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d01d      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a29      	ldr	r2, [pc, #164]	; (8003c70 <HAL_DMA_IRQHandler+0xcd0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d018      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a28      	ldr	r2, [pc, #160]	; (8003c74 <HAL_DMA_IRQHandler+0xcd4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a26      	ldr	r2, [pc, #152]	; (8003c78 <HAL_DMA_IRQHandler+0xcd8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00e      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a25      	ldr	r2, [pc, #148]	; (8003c7c <HAL_DMA_IRQHandler+0xcdc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d009      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <HAL_DMA_IRQHandler+0xce0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <HAL_DMA_IRQHandler+0xce4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d108      	bne.n	8003c12 <HAL_DMA_IRQHandler+0xc72>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0214 	bic.w	r2, r2, #20
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e007      	b.n	8003c22 <HAL_DMA_IRQHandler+0xc82>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 020a 	bic.w	r2, r2, #10
 8003c20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80b8 	beq.w	8003dac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c44:	e0b2      	b.n	8003dac <HAL_DMA_IRQHandler+0xe0c>
 8003c46:	bf00      	nop
 8003c48:	40020010 	.word	0x40020010
 8003c4c:	40020028 	.word	0x40020028
 8003c50:	40020040 	.word	0x40020040
 8003c54:	40020058 	.word	0x40020058
 8003c58:	40020070 	.word	0x40020070
 8003c5c:	40020088 	.word	0x40020088
 8003c60:	400200a0 	.word	0x400200a0
 8003c64:	400200b8 	.word	0x400200b8
 8003c68:	40020410 	.word	0x40020410
 8003c6c:	40020428 	.word	0x40020428
 8003c70:	40020440 	.word	0x40020440
 8003c74:	40020458 	.word	0x40020458
 8003c78:	40020470 	.word	0x40020470
 8003c7c:	40020488 	.word	0x40020488
 8003c80:	400204a0 	.word	0x400204a0
 8003c84:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	2208      	movs	r2, #8
 8003c92:	409a      	lsls	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8088 	beq.w	8003dae <HAL_DMA_IRQHandler+0xe0e>
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8082 	beq.w	8003dae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a41      	ldr	r2, [pc, #260]	; (8003db4 <HAL_DMA_IRQHandler+0xe14>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d04a      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a3f      	ldr	r2, [pc, #252]	; (8003db8 <HAL_DMA_IRQHandler+0xe18>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d045      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a3e      	ldr	r2, [pc, #248]	; (8003dbc <HAL_DMA_IRQHandler+0xe1c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d040      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a3c      	ldr	r2, [pc, #240]	; (8003dc0 <HAL_DMA_IRQHandler+0xe20>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d03b      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a3b      	ldr	r2, [pc, #236]	; (8003dc4 <HAL_DMA_IRQHandler+0xe24>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d036      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a39      	ldr	r2, [pc, #228]	; (8003dc8 <HAL_DMA_IRQHandler+0xe28>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d031      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a38      	ldr	r2, [pc, #224]	; (8003dcc <HAL_DMA_IRQHandler+0xe2c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d02c      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a36      	ldr	r2, [pc, #216]	; (8003dd0 <HAL_DMA_IRQHandler+0xe30>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d027      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a35      	ldr	r2, [pc, #212]	; (8003dd4 <HAL_DMA_IRQHandler+0xe34>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d022      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a33      	ldr	r2, [pc, #204]	; (8003dd8 <HAL_DMA_IRQHandler+0xe38>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d01d      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a32      	ldr	r2, [pc, #200]	; (8003ddc <HAL_DMA_IRQHandler+0xe3c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d018      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a30      	ldr	r2, [pc, #192]	; (8003de0 <HAL_DMA_IRQHandler+0xe40>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2f      	ldr	r2, [pc, #188]	; (8003de4 <HAL_DMA_IRQHandler+0xe44>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2d      	ldr	r2, [pc, #180]	; (8003de8 <HAL_DMA_IRQHandler+0xe48>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d009      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2c      	ldr	r2, [pc, #176]	; (8003dec <HAL_DMA_IRQHandler+0xe4c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a2a      	ldr	r2, [pc, #168]	; (8003df0 <HAL_DMA_IRQHandler+0xe50>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d108      	bne.n	8003d5c <HAL_DMA_IRQHandler+0xdbc>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 021c 	bic.w	r2, r2, #28
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e007      	b.n	8003d6c <HAL_DMA_IRQHandler+0xdcc>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 020e 	bic.w	r2, r2, #14
 8003d6a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	2201      	movs	r2, #1
 8003d76:	409a      	lsls	r2, r3
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
 8003da2:	e004      	b.n	8003dae <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003da4:	bf00      	nop
 8003da6:	e002      	b.n	8003dae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dae:	3728      	adds	r7, #40	; 0x28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40020010 	.word	0x40020010
 8003db8:	40020028 	.word	0x40020028
 8003dbc:	40020040 	.word	0x40020040
 8003dc0:	40020058 	.word	0x40020058
 8003dc4:	40020070 	.word	0x40020070
 8003dc8:	40020088 	.word	0x40020088
 8003dcc:	400200a0 	.word	0x400200a0
 8003dd0:	400200b8 	.word	0x400200b8
 8003dd4:	40020410 	.word	0x40020410
 8003dd8:	40020428 	.word	0x40020428
 8003ddc:	40020440 	.word	0x40020440
 8003de0:	40020458 	.word	0x40020458
 8003de4:	40020470 	.word	0x40020470
 8003de8:	40020488 	.word	0x40020488
 8003dec:	400204a0 	.word	0x400204a0
 8003df0:	400204b8 	.word	0x400204b8

08003df4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a84      	ldr	r2, [pc, #528]	; (800403c <DMA_SetConfig+0x230>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d072      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a82      	ldr	r2, [pc, #520]	; (8004040 <DMA_SetConfig+0x234>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d06d      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a81      	ldr	r2, [pc, #516]	; (8004044 <DMA_SetConfig+0x238>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d068      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a7f      	ldr	r2, [pc, #508]	; (8004048 <DMA_SetConfig+0x23c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d063      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a7e      	ldr	r2, [pc, #504]	; (800404c <DMA_SetConfig+0x240>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d05e      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a7c      	ldr	r2, [pc, #496]	; (8004050 <DMA_SetConfig+0x244>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d059      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a7b      	ldr	r2, [pc, #492]	; (8004054 <DMA_SetConfig+0x248>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d054      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a79      	ldr	r2, [pc, #484]	; (8004058 <DMA_SetConfig+0x24c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d04f      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a78      	ldr	r2, [pc, #480]	; (800405c <DMA_SetConfig+0x250>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d04a      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a76      	ldr	r2, [pc, #472]	; (8004060 <DMA_SetConfig+0x254>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d045      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a75      	ldr	r2, [pc, #468]	; (8004064 <DMA_SetConfig+0x258>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d040      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a73      	ldr	r2, [pc, #460]	; (8004068 <DMA_SetConfig+0x25c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d03b      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a72      	ldr	r2, [pc, #456]	; (800406c <DMA_SetConfig+0x260>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d036      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a70      	ldr	r2, [pc, #448]	; (8004070 <DMA_SetConfig+0x264>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d031      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a6f      	ldr	r2, [pc, #444]	; (8004074 <DMA_SetConfig+0x268>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d02c      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a6d      	ldr	r2, [pc, #436]	; (8004078 <DMA_SetConfig+0x26c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d027      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a6c      	ldr	r2, [pc, #432]	; (800407c <DMA_SetConfig+0x270>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d022      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6a      	ldr	r2, [pc, #424]	; (8004080 <DMA_SetConfig+0x274>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01d      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a69      	ldr	r2, [pc, #420]	; (8004084 <DMA_SetConfig+0x278>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d018      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a67      	ldr	r2, [pc, #412]	; (8004088 <DMA_SetConfig+0x27c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a66      	ldr	r2, [pc, #408]	; (800408c <DMA_SetConfig+0x280>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a64      	ldr	r2, [pc, #400]	; (8004090 <DMA_SetConfig+0x284>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d009      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a63      	ldr	r2, [pc, #396]	; (8004094 <DMA_SetConfig+0x288>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a61      	ldr	r2, [pc, #388]	; (8004098 <DMA_SetConfig+0x28c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <DMA_SetConfig+0x10e>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <DMA_SetConfig+0x110>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00d      	beq.n	8003f3c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f28:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d004      	beq.n	8003f3c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f3a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3e      	ldr	r2, [pc, #248]	; (800403c <DMA_SetConfig+0x230>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d04a      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a3d      	ldr	r2, [pc, #244]	; (8004040 <DMA_SetConfig+0x234>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d045      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3b      	ldr	r2, [pc, #236]	; (8004044 <DMA_SetConfig+0x238>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d040      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a3a      	ldr	r2, [pc, #232]	; (8004048 <DMA_SetConfig+0x23c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d03b      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a38      	ldr	r2, [pc, #224]	; (800404c <DMA_SetConfig+0x240>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d036      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a37      	ldr	r2, [pc, #220]	; (8004050 <DMA_SetConfig+0x244>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d031      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a35      	ldr	r2, [pc, #212]	; (8004054 <DMA_SetConfig+0x248>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d02c      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a34      	ldr	r2, [pc, #208]	; (8004058 <DMA_SetConfig+0x24c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d027      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a32      	ldr	r2, [pc, #200]	; (800405c <DMA_SetConfig+0x250>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d022      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a31      	ldr	r2, [pc, #196]	; (8004060 <DMA_SetConfig+0x254>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d01d      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2f      	ldr	r2, [pc, #188]	; (8004064 <DMA_SetConfig+0x258>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d018      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2e      	ldr	r2, [pc, #184]	; (8004068 <DMA_SetConfig+0x25c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d013      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2c      	ldr	r2, [pc, #176]	; (800406c <DMA_SetConfig+0x260>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00e      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2b      	ldr	r2, [pc, #172]	; (8004070 <DMA_SetConfig+0x264>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d009      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a29      	ldr	r2, [pc, #164]	; (8004074 <DMA_SetConfig+0x268>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a28      	ldr	r2, [pc, #160]	; (8004078 <DMA_SetConfig+0x26c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d101      	bne.n	8003fe0 <DMA_SetConfig+0x1d4>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <DMA_SetConfig+0x1d6>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d05a      	beq.n	800409c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	223f      	movs	r2, #63	; 0x3f
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004004:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d108      	bne.n	8004028 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004026:	e087      	b.n	8004138 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	60da      	str	r2, [r3, #12]
}
 8004038:	e07e      	b.n	8004138 <DMA_SetConfig+0x32c>
 800403a:	bf00      	nop
 800403c:	40020010 	.word	0x40020010
 8004040:	40020028 	.word	0x40020028
 8004044:	40020040 	.word	0x40020040
 8004048:	40020058 	.word	0x40020058
 800404c:	40020070 	.word	0x40020070
 8004050:	40020088 	.word	0x40020088
 8004054:	400200a0 	.word	0x400200a0
 8004058:	400200b8 	.word	0x400200b8
 800405c:	40020410 	.word	0x40020410
 8004060:	40020428 	.word	0x40020428
 8004064:	40020440 	.word	0x40020440
 8004068:	40020458 	.word	0x40020458
 800406c:	40020470 	.word	0x40020470
 8004070:	40020488 	.word	0x40020488
 8004074:	400204a0 	.word	0x400204a0
 8004078:	400204b8 	.word	0x400204b8
 800407c:	58025408 	.word	0x58025408
 8004080:	5802541c 	.word	0x5802541c
 8004084:	58025430 	.word	0x58025430
 8004088:	58025444 	.word	0x58025444
 800408c:	58025458 	.word	0x58025458
 8004090:	5802546c 	.word	0x5802546c
 8004094:	58025480 	.word	0x58025480
 8004098:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a28      	ldr	r2, [pc, #160]	; (8004144 <DMA_SetConfig+0x338>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d022      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a27      	ldr	r2, [pc, #156]	; (8004148 <DMA_SetConfig+0x33c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d01d      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a25      	ldr	r2, [pc, #148]	; (800414c <DMA_SetConfig+0x340>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d018      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a24      	ldr	r2, [pc, #144]	; (8004150 <DMA_SetConfig+0x344>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d013      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a22      	ldr	r2, [pc, #136]	; (8004154 <DMA_SetConfig+0x348>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00e      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a21      	ldr	r2, [pc, #132]	; (8004158 <DMA_SetConfig+0x34c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d009      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1f      	ldr	r2, [pc, #124]	; (800415c <DMA_SetConfig+0x350>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d004      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <DMA_SetConfig+0x354>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d101      	bne.n	80040f0 <DMA_SetConfig+0x2e4>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <DMA_SetConfig+0x2e6>
 80040f0:	2300      	movs	r3, #0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d020      	beq.n	8004138 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	2201      	movs	r2, #1
 8004100:	409a      	lsls	r2, r3
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	d108      	bne.n	8004128 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	60da      	str	r2, [r3, #12]
}
 8004126:	e007      	b.n	8004138 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	60da      	str	r2, [r3, #12]
}
 8004138:	bf00      	nop
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	58025408 	.word	0x58025408
 8004148:	5802541c 	.word	0x5802541c
 800414c:	58025430 	.word	0x58025430
 8004150:	58025444 	.word	0x58025444
 8004154:	58025458 	.word	0x58025458
 8004158:	5802546c 	.word	0x5802546c
 800415c:	58025480 	.word	0x58025480
 8004160:	58025494 	.word	0x58025494

08004164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a42      	ldr	r2, [pc, #264]	; (800427c <DMA_CalcBaseAndBitshift+0x118>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d04a      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a41      	ldr	r2, [pc, #260]	; (8004280 <DMA_CalcBaseAndBitshift+0x11c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d045      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a3f      	ldr	r2, [pc, #252]	; (8004284 <DMA_CalcBaseAndBitshift+0x120>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d040      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a3e      	ldr	r2, [pc, #248]	; (8004288 <DMA_CalcBaseAndBitshift+0x124>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d03b      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a3c      	ldr	r2, [pc, #240]	; (800428c <DMA_CalcBaseAndBitshift+0x128>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d036      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a3b      	ldr	r2, [pc, #236]	; (8004290 <DMA_CalcBaseAndBitshift+0x12c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d031      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a39      	ldr	r2, [pc, #228]	; (8004294 <DMA_CalcBaseAndBitshift+0x130>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d02c      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a38      	ldr	r2, [pc, #224]	; (8004298 <DMA_CalcBaseAndBitshift+0x134>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d027      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a36      	ldr	r2, [pc, #216]	; (800429c <DMA_CalcBaseAndBitshift+0x138>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d022      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a35      	ldr	r2, [pc, #212]	; (80042a0 <DMA_CalcBaseAndBitshift+0x13c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d01d      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a33      	ldr	r2, [pc, #204]	; (80042a4 <DMA_CalcBaseAndBitshift+0x140>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d018      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a32      	ldr	r2, [pc, #200]	; (80042a8 <DMA_CalcBaseAndBitshift+0x144>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d013      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a30      	ldr	r2, [pc, #192]	; (80042ac <DMA_CalcBaseAndBitshift+0x148>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00e      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2f      	ldr	r2, [pc, #188]	; (80042b0 <DMA_CalcBaseAndBitshift+0x14c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d009      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a2d      	ldr	r2, [pc, #180]	; (80042b4 <DMA_CalcBaseAndBitshift+0x150>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d004      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a2c      	ldr	r2, [pc, #176]	; (80042b8 <DMA_CalcBaseAndBitshift+0x154>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d101      	bne.n	8004210 <DMA_CalcBaseAndBitshift+0xac>
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <DMA_CalcBaseAndBitshift+0xae>
 8004210:	2300      	movs	r3, #0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d024      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	3b10      	subs	r3, #16
 800421e:	4a27      	ldr	r2, [pc, #156]	; (80042bc <DMA_CalcBaseAndBitshift+0x158>)
 8004220:	fba2 2303 	umull	r2, r3, r2, r3
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	4a24      	ldr	r2, [pc, #144]	; (80042c0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004230:	5cd3      	ldrb	r3, [r2, r3]
 8004232:	461a      	mov	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b03      	cmp	r3, #3
 800423c:	d908      	bls.n	8004250 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <DMA_CalcBaseAndBitshift+0x160>)
 8004246:	4013      	ands	r3, r2
 8004248:	1d1a      	adds	r2, r3, #4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	659a      	str	r2, [r3, #88]	; 0x58
 800424e:	e00d      	b.n	800426c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <DMA_CalcBaseAndBitshift+0x160>)
 8004258:	4013      	ands	r3, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6593      	str	r3, [r2, #88]	; 0x58
 800425e:	e005      	b.n	800426c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40020010 	.word	0x40020010
 8004280:	40020028 	.word	0x40020028
 8004284:	40020040 	.word	0x40020040
 8004288:	40020058 	.word	0x40020058
 800428c:	40020070 	.word	0x40020070
 8004290:	40020088 	.word	0x40020088
 8004294:	400200a0 	.word	0x400200a0
 8004298:	400200b8 	.word	0x400200b8
 800429c:	40020410 	.word	0x40020410
 80042a0:	40020428 	.word	0x40020428
 80042a4:	40020440 	.word	0x40020440
 80042a8:	40020458 	.word	0x40020458
 80042ac:	40020470 	.word	0x40020470
 80042b0:	40020488 	.word	0x40020488
 80042b4:	400204a0 	.word	0x400204a0
 80042b8:	400204b8 	.word	0x400204b8
 80042bc:	aaaaaaab 	.word	0xaaaaaaab
 80042c0:	08010f1c 	.word	0x08010f1c
 80042c4:	fffffc00 	.word	0xfffffc00

080042c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d120      	bne.n	800431e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d858      	bhi.n	8004396 <DMA_CheckFifoParam+0xce>
 80042e4:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <DMA_CheckFifoParam+0x24>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	0800430f 	.word	0x0800430f
 80042f4:	080042fd 	.word	0x080042fd
 80042f8:	08004397 	.word	0x08004397
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d048      	beq.n	800439a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800430c:	e045      	b.n	800439a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004316:	d142      	bne.n	800439e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800431c:	e03f      	b.n	800439e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004326:	d123      	bne.n	8004370 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	2b03      	cmp	r3, #3
 800432e:	d838      	bhi.n	80043a2 <DMA_CheckFifoParam+0xda>
 8004330:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <DMA_CheckFifoParam+0x70>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	08004349 	.word	0x08004349
 800433c:	0800434f 	.word	0x0800434f
 8004340:	08004349 	.word	0x08004349
 8004344:	08004361 	.word	0x08004361
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
        break;
 800434c:	e030      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d025      	beq.n	80043a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800435e:	e022      	b.n	80043a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004368:	d11f      	bne.n	80043aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800436e:	e01c      	b.n	80043aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	2b02      	cmp	r3, #2
 8004376:	d902      	bls.n	800437e <DMA_CheckFifoParam+0xb6>
 8004378:	2b03      	cmp	r3, #3
 800437a:	d003      	beq.n	8004384 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800437c:	e018      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
        break;
 8004382:	e015      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00e      	beq.n	80043ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
    break;
 8004394:	e00b      	b.n	80043ae <DMA_CheckFifoParam+0xe6>
        break;
 8004396:	bf00      	nop
 8004398:	e00a      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        break;
 800439a:	bf00      	nop
 800439c:	e008      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        break;
 800439e:	bf00      	nop
 80043a0:	e006      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        break;
 80043a2:	bf00      	nop
 80043a4:	e004      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        break;
 80043a6:	bf00      	nop
 80043a8:	e002      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        break;
 80043aa:	bf00      	nop
 80043ac:	e000      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
    break;
 80043ae:	bf00      	nop
    }
  }

  return status;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop

080043c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a38      	ldr	r2, [pc, #224]	; (80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d022      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a36      	ldr	r2, [pc, #216]	; (80044b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01d      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a35      	ldr	r2, [pc, #212]	; (80044bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d018      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a33      	ldr	r2, [pc, #204]	; (80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a32      	ldr	r2, [pc, #200]	; (80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00e      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a30      	ldr	r2, [pc, #192]	; (80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d009      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a2f      	ldr	r2, [pc, #188]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a2d      	ldr	r2, [pc, #180]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d101      	bne.n	8004422 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004422:	2300      	movs	r3, #0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01a      	beq.n	800445e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	3b08      	subs	r3, #8
 8004430:	4a28      	ldr	r2, [pc, #160]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a24      	ldr	r2, [pc, #144]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800444c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2201      	movs	r2, #1
 8004456:	409a      	lsls	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800445c:	e024      	b.n	80044a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	3b10      	subs	r3, #16
 8004466:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004468:	fba2 2303 	umull	r2, r3, r2, r3
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d806      	bhi.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4a1b      	ldr	r2, [pc, #108]	; (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d902      	bls.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3308      	adds	r3, #8
 8004484:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4b18      	ldr	r3, [pc, #96]	; (80044ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	461a      	mov	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004498:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2201      	movs	r2, #1
 80044a2:	409a      	lsls	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	58025408 	.word	0x58025408
 80044b8:	5802541c 	.word	0x5802541c
 80044bc:	58025430 	.word	0x58025430
 80044c0:	58025444 	.word	0x58025444
 80044c4:	58025458 	.word	0x58025458
 80044c8:	5802546c 	.word	0x5802546c
 80044cc:	58025480 	.word	0x58025480
 80044d0:	58025494 	.word	0x58025494
 80044d4:	cccccccd 	.word	0xcccccccd
 80044d8:	16009600 	.word	0x16009600
 80044dc:	58025880 	.word	0x58025880
 80044e0:	aaaaaaab 	.word	0xaaaaaaab
 80044e4:	400204b8 	.word	0x400204b8
 80044e8:	4002040f 	.word	0x4002040f
 80044ec:	10008200 	.word	0x10008200
 80044f0:	40020880 	.word	0x40020880

080044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04a      	beq.n	80045a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d847      	bhi.n	80045a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a25      	ldr	r2, [pc, #148]	; (80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d022      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a24      	ldr	r2, [pc, #144]	; (80045b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d01d      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a22      	ldr	r2, [pc, #136]	; (80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d018      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a21      	ldr	r2, [pc, #132]	; (80045b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d013      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1f      	ldr	r2, [pc, #124]	; (80045bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00e      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d009      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1c      	ldr	r2, [pc, #112]	; (80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d004      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1b      	ldr	r2, [pc, #108]	; (80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d101      	bne.n	8004564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004564:	2300      	movs	r3, #0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4b17      	ldr	r3, [pc, #92]	; (80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	461a      	mov	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800457c:	671a      	str	r2, [r3, #112]	; 0x70
 800457e:	e009      	b.n	8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	461a      	mov	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a11      	ldr	r2, [pc, #68]	; (80045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004592:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3b01      	subs	r3, #1
 8004598:	2201      	movs	r2, #1
 800459a:	409a      	lsls	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	58025408 	.word	0x58025408
 80045b0:	5802541c 	.word	0x5802541c
 80045b4:	58025430 	.word	0x58025430
 80045b8:	58025444 	.word	0x58025444
 80045bc:	58025458 	.word	0x58025458
 80045c0:	5802546c 	.word	0x5802546c
 80045c4:	58025480 	.word	0x58025480
 80045c8:	58025494 	.word	0x58025494
 80045cc:	1600963f 	.word	0x1600963f
 80045d0:	58025940 	.word	0x58025940
 80045d4:	1000823f 	.word	0x1000823f
 80045d8:	40020940 	.word	0x40020940

080045dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045dc:	b480      	push	{r7}
 80045de:	b089      	sub	sp, #36	; 0x24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045ea:	4b89      	ldr	r3, [pc, #548]	; (8004810 <HAL_GPIO_Init+0x234>)
 80045ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045ee:	e194      	b.n	800491a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	2101      	movs	r1, #1
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8186 	beq.w	8004914 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d00b      	beq.n	8004628 <HAL_GPIO_Init+0x4c>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d007      	beq.n	8004628 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800461c:	2b11      	cmp	r3, #17
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b12      	cmp	r3, #18
 8004626:	d130      	bne.n	800468a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	2203      	movs	r2, #3
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800465e:	2201      	movs	r2, #1
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	f003 0201 	and.w	r2, r3, #1
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_Init+0xee>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b12      	cmp	r3, #18
 80046c8:	d123      	bne.n	8004712 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	08da      	lsrs	r2, r3, #3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3208      	adds	r2, #8
 80046d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	220f      	movs	r2, #15
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4313      	orrs	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	08da      	lsrs	r2, r3, #3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3208      	adds	r2, #8
 800470c:	69b9      	ldr	r1, [r7, #24]
 800470e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	2203      	movs	r2, #3
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 0203 	and.w	r2, r3, #3
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4313      	orrs	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80e0 	beq.w	8004914 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004754:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <HAL_GPIO_Init+0x238>)
 8004756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800475a:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <HAL_GPIO_Init+0x238>)
 800475c:	f043 0302 	orr.w	r3, r3, #2
 8004760:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004764:	4b2b      	ldr	r3, [pc, #172]	; (8004814 <HAL_GPIO_Init+0x238>)
 8004766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004772:	4a29      	ldr	r2, [pc, #164]	; (8004818 <HAL_GPIO_Init+0x23c>)
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	089b      	lsrs	r3, r3, #2
 8004778:	3302      	adds	r3, #2
 800477a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	220f      	movs	r2, #15
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a20      	ldr	r2, [pc, #128]	; (800481c <HAL_GPIO_Init+0x240>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d052      	beq.n	8004844 <HAL_GPIO_Init+0x268>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <HAL_GPIO_Init+0x244>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d031      	beq.n	800480a <HAL_GPIO_Init+0x22e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <HAL_GPIO_Init+0x248>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02b      	beq.n	8004806 <HAL_GPIO_Init+0x22a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <HAL_GPIO_Init+0x24c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d025      	beq.n	8004802 <HAL_GPIO_Init+0x226>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1c      	ldr	r2, [pc, #112]	; (800482c <HAL_GPIO_Init+0x250>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01f      	beq.n	80047fe <HAL_GPIO_Init+0x222>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <HAL_GPIO_Init+0x254>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d019      	beq.n	80047fa <HAL_GPIO_Init+0x21e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <HAL_GPIO_Init+0x258>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_GPIO_Init+0x21a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a19      	ldr	r2, [pc, #100]	; (8004838 <HAL_GPIO_Init+0x25c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00d      	beq.n	80047f2 <HAL_GPIO_Init+0x216>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a18      	ldr	r2, [pc, #96]	; (800483c <HAL_GPIO_Init+0x260>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d007      	beq.n	80047ee <HAL_GPIO_Init+0x212>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a17      	ldr	r2, [pc, #92]	; (8004840 <HAL_GPIO_Init+0x264>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_GPIO_Init+0x20e>
 80047e6:	2309      	movs	r3, #9
 80047e8:	e02d      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 80047ea:	230a      	movs	r3, #10
 80047ec:	e02b      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 80047ee:	2308      	movs	r3, #8
 80047f0:	e029      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 80047f2:	2307      	movs	r3, #7
 80047f4:	e027      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 80047f6:	2306      	movs	r3, #6
 80047f8:	e025      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 80047fa:	2305      	movs	r3, #5
 80047fc:	e023      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 80047fe:	2304      	movs	r3, #4
 8004800:	e021      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 8004802:	2303      	movs	r3, #3
 8004804:	e01f      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 8004806:	2302      	movs	r3, #2
 8004808:	e01d      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 800480a:	2301      	movs	r3, #1
 800480c:	e01b      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 800480e:	bf00      	nop
 8004810:	58000080 	.word	0x58000080
 8004814:	58024400 	.word	0x58024400
 8004818:	58000400 	.word	0x58000400
 800481c:	58020000 	.word	0x58020000
 8004820:	58020400 	.word	0x58020400
 8004824:	58020800 	.word	0x58020800
 8004828:	58020c00 	.word	0x58020c00
 800482c:	58021000 	.word	0x58021000
 8004830:	58021400 	.word	0x58021400
 8004834:	58021800 	.word	0x58021800
 8004838:	58021c00 	.word	0x58021c00
 800483c:	58022000 	.word	0x58022000
 8004840:	58022400 	.word	0x58022400
 8004844:	2300      	movs	r3, #0
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	f002 0203 	and.w	r2, r2, #3
 800484c:	0092      	lsls	r2, r2, #2
 800484e:	4093      	lsls	r3, r2
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4313      	orrs	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004856:	4938      	ldr	r1, [pc, #224]	; (8004938 <HAL_GPIO_Init+0x35c>)
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	089b      	lsrs	r3, r3, #2
 800485c:	3302      	adds	r3, #2
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	43db      	mvns	r3, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4013      	ands	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800490c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	3301      	adds	r3, #1
 8004918:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	f47f ae63 	bne.w	80045f0 <HAL_GPIO_Init+0x14>
  }
}
 800492a:	bf00      	nop
 800492c:	3724      	adds	r7, #36	; 0x24
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	58000400 	.word	0x58000400

0800493c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	887b      	ldrh	r3, [r7, #2]
 800494e:	4013      	ands	r3, r2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
 8004958:	e001      	b.n	800495e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800495a:	2300      	movs	r3, #0
 800495c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800495e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	807b      	strh	r3, [r7, #2]
 8004978:	4613      	mov	r3, r2
 800497a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800497c:	787b      	ldrb	r3, [r7, #1]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004982:	887a      	ldrh	r2, [r7, #2]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004988:	e003      	b.n	8004992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800498a:	887b      	ldrh	r3, [r7, #2]
 800498c:	041a      	lsls	r2, r3, #16
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	619a      	str	r2, [r3, #24]
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e07f      	b.n	8004ab2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f00a fdf2 	bl	800f5b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	; 0x24
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d107      	bne.n	8004a1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a16:	609a      	str	r2, [r3, #8]
 8004a18:	e006      	b.n	8004a28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d104      	bne.n	8004a3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6859      	ldr	r1, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <HAL_I2C_Init+0x11c>)
 8004a46:	430b      	orrs	r3, r1
 8004a48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	ea42 0103 	orr.w	r1, r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	021a      	lsls	r2, r3, #8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69d9      	ldr	r1, [r3, #28]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1a      	ldr	r2, [r3, #32]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	02008000 	.word	0x02008000

08004ac0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d138      	bne.n	8004b48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e032      	b.n	8004b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	; 0x24
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6819      	ldr	r1, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e000      	b.n	8004b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b48:	2302      	movs	r3, #2
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d139      	bne.n	8004be0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e033      	b.n	8004be2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2224      	movs	r2, #36	; 0x24
 8004b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0201 	bic.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ba8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e000      	b.n	8004be2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004be0:	2302      	movs	r3, #2
  }
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <HAL_PWREx_ConfigSupply+0x70>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d00a      	beq.n	8004c1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c04:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <HAL_PWREx_ConfigSupply+0x70>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d001      	beq.n	8004c16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e01f      	b.n	8004c56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e01d      	b.n	8004c56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c1a:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <HAL_PWREx_ConfigSupply+0x70>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f023 0207 	bic.w	r2, r3, #7
 8004c22:	490f      	ldr	r1, [pc, #60]	; (8004c60 <HAL_PWREx_ConfigSupply+0x70>)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c2a:	f7fb fbdb 	bl	80003e4 <HAL_GetTick>
 8004c2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c30:	e009      	b.n	8004c46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c32:	f7fb fbd7 	bl	80003e4 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c40:	d901      	bls.n	8004c46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e007      	b.n	8004c56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c46:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <HAL_PWREx_ConfigSupply+0x70>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c52:	d1ee      	bne.n	8004c32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	58024800 	.word	0x58024800

08004c64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08c      	sub	sp, #48	; 0x30
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e3c4      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 8087 	beq.w	8004d92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c84:	4ba2      	ldr	r3, [pc, #648]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c8e:	4ba0      	ldr	r3, [pc, #640]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c96:	2b10      	cmp	r3, #16
 8004c98:	d007      	beq.n	8004caa <HAL_RCC_OscConfig+0x46>
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	2b18      	cmp	r3, #24
 8004c9e:	d110      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x5e>
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d10b      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004caa:	4b99      	ldr	r3, [pc, #612]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d06c      	beq.n	8004d90 <HAL_RCC_OscConfig+0x12c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d168      	bne.n	8004d90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e39e      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x76>
 8004ccc:	4b90      	ldr	r3, [pc, #576]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a8f      	ldr	r2, [pc, #572]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	e02e      	b.n	8004d38 <HAL_RCC_OscConfig+0xd4>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x98>
 8004ce2:	4b8b      	ldr	r3, [pc, #556]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a8a      	ldr	r2, [pc, #552]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b88      	ldr	r3, [pc, #544]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a87      	ldr	r2, [pc, #540]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e01d      	b.n	8004d38 <HAL_RCC_OscConfig+0xd4>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0xbc>
 8004d06:	4b82      	ldr	r3, [pc, #520]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a81      	ldr	r2, [pc, #516]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b7f      	ldr	r3, [pc, #508]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a7e      	ldr	r2, [pc, #504]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0xd4>
 8004d20:	4b7b      	ldr	r3, [pc, #492]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a7a      	ldr	r2, [pc, #488]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b78      	ldr	r3, [pc, #480]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a77      	ldr	r2, [pc, #476]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fb fb50 	bl	80003e4 <HAL_GetTick>
 8004d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fb fb4c 	bl	80003e4 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e352      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d5a:	4b6d      	ldr	r3, [pc, #436]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0xe4>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fb fb3c 	bl	80003e4 <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d70:	f7fb fb38 	bl	80003e4 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e33e      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d82:	4b63      	ldr	r3, [pc, #396]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x10c>
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 8092 	beq.w	8004ec4 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004da0:	4b5b      	ldr	r3, [pc, #364]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004da8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004daa:	4b59      	ldr	r3, [pc, #356]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x162>
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	2b18      	cmp	r3, #24
 8004dba:	d12d      	bne.n	8004e18 <HAL_RCC_OscConfig+0x1b4>
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d128      	bne.n	8004e18 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc6:	4b52      	ldr	r3, [pc, #328]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_RCC_OscConfig+0x17a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e310      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	f7fb fb2f 	bl	8000440 <HAL_GetREVID>
 8004de2:	4602      	mov	r2, r0
 8004de4:	f241 0303 	movw	r3, #4099	; 0x1003
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d80a      	bhi.n	8004e02 <HAL_RCC_OscConfig+0x19e>
 8004dec:	4b48      	ldr	r3, [pc, #288]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	031b      	lsls	r3, r3, #12
 8004dfa:	4945      	ldr	r1, [pc, #276]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e00:	e060      	b.n	8004ec4 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e02:	4b43      	ldr	r3, [pc, #268]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	493f      	ldr	r1, [pc, #252]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e16:	e055      	b.n	8004ec4 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d038      	beq.n	8004e92 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e20:	4b3b      	ldr	r3, [pc, #236]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f023 0219 	bic.w	r2, r3, #25
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4938      	ldr	r1, [pc, #224]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e32:	f7fb fad7 	bl	80003e4 <HAL_GetTick>
 8004e36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e3a:	f7fb fad3 	bl	80003e4 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e2d9      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e4c:	4b30      	ldr	r3, [pc, #192]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e58:	f7fb faf2 	bl	8000440 <HAL_GetREVID>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d80a      	bhi.n	8004e7c <HAL_RCC_OscConfig+0x218>
 8004e66:	4b2a      	ldr	r3, [pc, #168]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	031b      	lsls	r3, r3, #12
 8004e74:	4926      	ldr	r1, [pc, #152]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	604b      	str	r3, [r1, #4]
 8004e7a:	e023      	b.n	8004ec4 <HAL_RCC_OscConfig+0x260>
 8004e7c:	4b24      	ldr	r3, [pc, #144]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	061b      	lsls	r3, r3, #24
 8004e8a:	4921      	ldr	r1, [pc, #132]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	604b      	str	r3, [r1, #4]
 8004e90:	e018      	b.n	8004ec4 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e92:	4b1f      	ldr	r3, [pc, #124]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9e:	f7fb faa1 	bl	80003e4 <HAL_GetTick>
 8004ea2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ea6:	f7fb fa9d 	bl	80003e4 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e2a3      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004eb8:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f0      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8091 	beq.w	8004ff4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eda:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d007      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x294>
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b18      	cmp	r3, #24
 8004eec:	d12f      	bne.n	8004f4e <HAL_RCC_OscConfig+0x2ea>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d12a      	bne.n	8004f4e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_RCC_OscConfig+0x2ac>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d007      	beq.n	8004f14 <HAL_RCC_OscConfig+0x2b0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	2b80      	cmp	r3, #128	; 0x80
 8004f0a:	d003      	beq.n	8004f14 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e277      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
 8004f10:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f14:	f7fb fa94 	bl	8000440 <HAL_GetREVID>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	f241 0303 	movw	r3, #4099	; 0x1003
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d80a      	bhi.n	8004f38 <HAL_RCC_OscConfig+0x2d4>
 8004f22:	4ba2      	ldr	r3, [pc, #648]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	069b      	lsls	r3, r3, #26
 8004f30:	499e      	ldr	r1, [pc, #632]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f36:	e05d      	b.n	8004ff4 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f38:	4b9c      	ldr	r3, [pc, #624]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	4999      	ldr	r1, [pc, #612]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f4c:	e052      	b.n	8004ff4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d035      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f56:	4b95      	ldr	r3, [pc, #596]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a94      	ldr	r2, [pc, #592]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f62:	f7fb fa3f 	bl	80003e4 <HAL_GetTick>
 8004f66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f6a:	f7fb fa3b 	bl	80003e4 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e241      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f7c:	4b8b      	ldr	r3, [pc, #556]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0f0      	beq.n	8004f6a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f88:	f7fb fa5a 	bl	8000440 <HAL_GetREVID>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d80a      	bhi.n	8004fac <HAL_RCC_OscConfig+0x348>
 8004f96:	4b85      	ldr	r3, [pc, #532]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	069b      	lsls	r3, r3, #26
 8004fa4:	4981      	ldr	r1, [pc, #516]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]
 8004faa:	e023      	b.n	8004ff4 <HAL_RCC_OscConfig+0x390>
 8004fac:	4b7f      	ldr	r3, [pc, #508]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	061b      	lsls	r3, r3, #24
 8004fba:	497c      	ldr	r1, [pc, #496]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60cb      	str	r3, [r1, #12]
 8004fc0:	e018      	b.n	8004ff4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fc2:	4b7a      	ldr	r3, [pc, #488]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a79      	ldr	r2, [pc, #484]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fce:	f7fb fa09 	bl	80003e4 <HAL_GetTick>
 8004fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004fd6:	f7fb fa05 	bl	80003e4 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e20b      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fe8:	4b70      	ldr	r3, [pc, #448]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1f0      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d036      	beq.n	800506e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d019      	beq.n	800503c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005008:	4b68      	ldr	r3, [pc, #416]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 800500a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500c:	4a67      	ldr	r2, [pc, #412]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 800500e:	f043 0301 	orr.w	r3, r3, #1
 8005012:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005014:	f7fb f9e6 	bl	80003e4 <HAL_GetTick>
 8005018:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800501c:	f7fb f9e2 	bl	80003e4 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e1e8      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800502e:	4b5f      	ldr	r3, [pc, #380]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0f0      	beq.n	800501c <HAL_RCC_OscConfig+0x3b8>
 800503a:	e018      	b.n	800506e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800503c:	4b5b      	ldr	r3, [pc, #364]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 800503e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005040:	4a5a      	ldr	r2, [pc, #360]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005042:	f023 0301 	bic.w	r3, r3, #1
 8005046:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005048:	f7fb f9cc 	bl	80003e4 <HAL_GetTick>
 800504c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005050:	f7fb f9c8 	bl	80003e4 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e1ce      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005062:	4b52      	ldr	r3, [pc, #328]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d036      	beq.n	80050e8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d019      	beq.n	80050b6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005082:	4b4a      	ldr	r3, [pc, #296]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a49      	ldr	r2, [pc, #292]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005088:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800508c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800508e:	f7fb f9a9 	bl	80003e4 <HAL_GetTick>
 8005092:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005096:	f7fb f9a5 	bl	80003e4 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e1ab      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050a8:	4b40      	ldr	r3, [pc, #256]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x432>
 80050b4:	e018      	b.n	80050e8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050b6:	4b3d      	ldr	r3, [pc, #244]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a3c      	ldr	r2, [pc, #240]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 80050bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050c2:	f7fb f98f 	bl	80003e4 <HAL_GetTick>
 80050c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050ca:	f7fb f98b 	bl	80003e4 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e191      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050dc:	4b33      	ldr	r3, [pc, #204]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f0      	bne.n	80050ca <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8086 	beq.w	8005202 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050f6:	4b2e      	ldr	r3, [pc, #184]	; (80051b0 <HAL_RCC_OscConfig+0x54c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a2d      	ldr	r2, [pc, #180]	; (80051b0 <HAL_RCC_OscConfig+0x54c>)
 80050fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005100:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005102:	f7fb f96f 	bl	80003e4 <HAL_GetTick>
 8005106:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800510a:	f7fb f96b 	bl	80003e4 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b64      	cmp	r3, #100	; 0x64
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e171      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800511c:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <HAL_RCC_OscConfig+0x54c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d106      	bne.n	800513e <HAL_RCC_OscConfig+0x4da>
 8005130:	4b1e      	ldr	r3, [pc, #120]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005134:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	6713      	str	r3, [r2, #112]	; 0x70
 800513c:	e02d      	b.n	800519a <HAL_RCC_OscConfig+0x536>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10c      	bne.n	8005160 <HAL_RCC_OscConfig+0x4fc>
 8005146:	4b19      	ldr	r3, [pc, #100]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	4a18      	ldr	r2, [pc, #96]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	6713      	str	r3, [r2, #112]	; 0x70
 8005152:	4b16      	ldr	r3, [pc, #88]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005156:	4a15      	ldr	r2, [pc, #84]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005158:	f023 0304 	bic.w	r3, r3, #4
 800515c:	6713      	str	r3, [r2, #112]	; 0x70
 800515e:	e01c      	b.n	800519a <HAL_RCC_OscConfig+0x536>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b05      	cmp	r3, #5
 8005166:	d10c      	bne.n	8005182 <HAL_RCC_OscConfig+0x51e>
 8005168:	4b10      	ldr	r3, [pc, #64]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	4a0f      	ldr	r2, [pc, #60]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 800516e:	f043 0304 	orr.w	r3, r3, #4
 8005172:	6713      	str	r3, [r2, #112]	; 0x70
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	4a0c      	ldr	r2, [pc, #48]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	6713      	str	r3, [r2, #112]	; 0x70
 8005180:	e00b      	b.n	800519a <HAL_RCC_OscConfig+0x536>
 8005182:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	4a09      	ldr	r2, [pc, #36]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	6713      	str	r3, [r2, #112]	; 0x70
 800518e:	4b07      	ldr	r3, [pc, #28]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005192:	4a06      	ldr	r2, [pc, #24]	; (80051ac <HAL_RCC_OscConfig+0x548>)
 8005194:	f023 0304 	bic.w	r3, r3, #4
 8005198:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01a      	beq.n	80051d8 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a2:	f7fb f91f 	bl	80003e4 <HAL_GetTick>
 80051a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051a8:	e00f      	b.n	80051ca <HAL_RCC_OscConfig+0x566>
 80051aa:	bf00      	nop
 80051ac:	58024400 	.word	0x58024400
 80051b0:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051b4:	f7fb f916 	bl	80003e4 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e11a      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051ca:	4b8f      	ldr	r3, [pc, #572]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0ee      	beq.n	80051b4 <HAL_RCC_OscConfig+0x550>
 80051d6:	e014      	b.n	8005202 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fb f904 	bl	80003e4 <HAL_GetTick>
 80051dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e0:	f7fb f900 	bl	80003e4 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e104      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051f6:	4b84      	ldr	r3, [pc, #528]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80051f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1ee      	bne.n	80051e0 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80f9 	beq.w	80053fe <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800520c:	4b7e      	ldr	r3, [pc, #504]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005214:	2b18      	cmp	r3, #24
 8005216:	f000 80b4 	beq.w	8005382 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	2b02      	cmp	r3, #2
 8005220:	f040 8095 	bne.w	800534e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005224:	4b78      	ldr	r3, [pc, #480]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a77      	ldr	r2, [pc, #476]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 800522a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800522e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fb f8d8 	bl	80003e4 <HAL_GetTick>
 8005234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005238:	f7fb f8d4 	bl	80003e4 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e0da      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800524a:	4b6f      	ldr	r3, [pc, #444]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005256:	4b6c      	ldr	r3, [pc, #432]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 8005258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800525a:	4b6c      	ldr	r3, [pc, #432]	; (800540c <HAL_RCC_OscConfig+0x7a8>)
 800525c:	4013      	ands	r3, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005266:	0112      	lsls	r2, r2, #4
 8005268:	430a      	orrs	r2, r1
 800526a:	4967      	ldr	r1, [pc, #412]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 800526c:	4313      	orrs	r3, r2
 800526e:	628b      	str	r3, [r1, #40]	; 0x28
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005274:	3b01      	subs	r3, #1
 8005276:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	3b01      	subs	r3, #1
 8005280:	025b      	lsls	r3, r3, #9
 8005282:	b29b      	uxth	r3, r3
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	3b01      	subs	r3, #1
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005298:	3b01      	subs	r3, #1
 800529a:	061b      	lsls	r3, r3, #24
 800529c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052a0:	4959      	ldr	r1, [pc, #356]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80052a6:	4b58      	ldr	r3, [pc, #352]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	4a57      	ldr	r2, [pc, #348]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052b2:	4b55      	ldr	r3, [pc, #340]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80052b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b6:	4b56      	ldr	r3, [pc, #344]	; (8005410 <HAL_RCC_OscConfig+0x7ac>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052be:	00d2      	lsls	r2, r2, #3
 80052c0:	4951      	ldr	r1, [pc, #324]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80052c6:	4b50      	ldr	r3, [pc, #320]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	f023 020c 	bic.w	r2, r3, #12
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	494d      	ldr	r1, [pc, #308]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052d8:	4b4b      	ldr	r3, [pc, #300]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	f023 0202 	bic.w	r2, r3, #2
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	4948      	ldr	r1, [pc, #288]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052ea:	4b47      	ldr	r3, [pc, #284]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	4a46      	ldr	r2, [pc, #280]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80052f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f6:	4b44      	ldr	r3, [pc, #272]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	4a43      	ldr	r2, [pc, #268]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 80052fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005300:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005302:	4b41      	ldr	r3, [pc, #260]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	4a40      	ldr	r2, [pc, #256]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 8005308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800530c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800530e:	4b3e      	ldr	r3, [pc, #248]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	4a3d      	ldr	r2, [pc, #244]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800531a:	4b3b      	ldr	r3, [pc, #236]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a3a      	ldr	r2, [pc, #232]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 8005320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fb f85d 	bl	80003e4 <HAL_GetTick>
 800532a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532e:	f7fb f859 	bl	80003e4 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e05f      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005340:	4b31      	ldr	r3, [pc, #196]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x6ca>
 800534c:	e057      	b.n	80053fe <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534e:	4b2e      	ldr	r3, [pc, #184]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a2d      	ldr	r2, [pc, #180]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 8005354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535a:	f7fb f843 	bl	80003e4 <HAL_GetTick>
 800535e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005362:	f7fb f83f 	bl	80003e4 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e045      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005374:	4b24      	ldr	r3, [pc, #144]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1f0      	bne.n	8005362 <HAL_RCC_OscConfig+0x6fe>
 8005380:	e03d      	b.n	80053fe <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005382:	4b21      	ldr	r3, [pc, #132]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005388:	4b1f      	ldr	r3, [pc, #124]	; (8005408 <HAL_RCC_OscConfig+0x7a4>)
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2b01      	cmp	r3, #1
 8005394:	d031      	beq.n	80053fa <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f003 0203 	and.w	r2, r3, #3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d12a      	bne.n	80053fa <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	091b      	lsrs	r3, r3, #4
 80053a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d122      	bne.n	80053fa <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d11a      	bne.n	80053fa <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	0a5b      	lsrs	r3, r3, #9
 80053c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d111      	bne.n	80053fa <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	0c1b      	lsrs	r3, r3, #16
 80053da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d108      	bne.n	80053fa <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	0e1b      	lsrs	r3, r3, #24
 80053ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d001      	beq.n	80053fe <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3730      	adds	r7, #48	; 0x30
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	58024400 	.word	0x58024400
 800540c:	fffffc0c 	.word	0xfffffc0c
 8005410:	ffff0007 	.word	0xffff0007

08005414 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e19c      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005428:	4b8a      	ldr	r3, [pc, #552]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d910      	bls.n	8005458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005436:	4b87      	ldr	r3, [pc, #540]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 020f 	bic.w	r2, r3, #15
 800543e:	4985      	ldr	r1, [pc, #532]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	4313      	orrs	r3, r2
 8005444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005446:	4b83      	ldr	r3, [pc, #524]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e184      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d010      	beq.n	8005486 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	4b7b      	ldr	r3, [pc, #492]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005470:	429a      	cmp	r2, r3
 8005472:	d908      	bls.n	8005486 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005474:	4b78      	ldr	r3, [pc, #480]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	4975      	ldr	r1, [pc, #468]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005482:	4313      	orrs	r3, r2
 8005484:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d010      	beq.n	80054b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695a      	ldr	r2, [r3, #20]
 8005496:	4b70      	ldr	r3, [pc, #448]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800549e:	429a      	cmp	r2, r3
 80054a0:	d908      	bls.n	80054b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054a2:	4b6d      	ldr	r3, [pc, #436]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	496a      	ldr	r1, [pc, #424]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d010      	beq.n	80054e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	4b64      	ldr	r3, [pc, #400]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d908      	bls.n	80054e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054d0:	4b61      	ldr	r3, [pc, #388]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	495e      	ldr	r1, [pc, #376]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d010      	beq.n	8005510 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	4b59      	ldr	r3, [pc, #356]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d908      	bls.n	8005510 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80054fe:	4b56      	ldr	r3, [pc, #344]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	4953      	ldr	r1, [pc, #332]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 800550c:	4313      	orrs	r3, r2
 800550e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d010      	beq.n	800553e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	4b4d      	ldr	r3, [pc, #308]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	429a      	cmp	r2, r3
 800552a:	d908      	bls.n	800553e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800552c:	4b4a      	ldr	r3, [pc, #296]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f023 020f 	bic.w	r2, r3, #15
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	4947      	ldr	r1, [pc, #284]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 800553a:	4313      	orrs	r3, r2
 800553c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d055      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800554a:	4b43      	ldr	r3, [pc, #268]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	4940      	ldr	r1, [pc, #256]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005558:	4313      	orrs	r3, r2
 800555a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d107      	bne.n	8005574 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005564:	4b3c      	ldr	r3, [pc, #240]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d121      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0f6      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d107      	bne.n	800558c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800557c:	4b36      	ldr	r3, [pc, #216]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d115      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0ea      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d107      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005594:	4b30      	ldr	r3, [pc, #192]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0de      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055a4:	4b2c      	ldr	r3, [pc, #176]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e0d6      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055b4:	4b28      	ldr	r3, [pc, #160]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f023 0207 	bic.w	r2, r3, #7
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4925      	ldr	r1, [pc, #148]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c6:	f7fa ff0d 	bl	80003e4 <HAL_GetTick>
 80055ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055cc:	e00a      	b.n	80055e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ce:	f7fa ff09 	bl	80003e4 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055dc:	4293      	cmp	r3, r2
 80055de:	d901      	bls.n	80055e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e0be      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e4:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d1eb      	bne.n	80055ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d010      	beq.n	8005624 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	429a      	cmp	r2, r3
 8005610:	d208      	bcs.n	8005624 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005612:	4b11      	ldr	r3, [pc, #68]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f023 020f 	bic.w	r2, r3, #15
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	490e      	ldr	r1, [pc, #56]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005620:	4313      	orrs	r3, r2
 8005622:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d214      	bcs.n	800565c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005632:	4b08      	ldr	r3, [pc, #32]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f023 020f 	bic.w	r2, r3, #15
 800563a:	4906      	ldr	r1, [pc, #24]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	4313      	orrs	r3, r2
 8005640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005642:	4b04      	ldr	r3, [pc, #16]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d005      	beq.n	800565c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e086      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
 8005654:	52002000 	.word	0x52002000
 8005658:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d010      	beq.n	800568a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	4b3f      	ldr	r3, [pc, #252]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005674:	429a      	cmp	r2, r3
 8005676:	d208      	bcs.n	800568a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005678:	4b3c      	ldr	r3, [pc, #240]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	4939      	ldr	r1, [pc, #228]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 8005686:	4313      	orrs	r3, r2
 8005688:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d010      	beq.n	80056b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	4b34      	ldr	r3, [pc, #208]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d208      	bcs.n	80056b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056a6:	4b31      	ldr	r3, [pc, #196]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	492e      	ldr	r1, [pc, #184]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d010      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	699a      	ldr	r2, [r3, #24]
 80056c8:	4b28      	ldr	r3, [pc, #160]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d208      	bcs.n	80056e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056d4:	4b25      	ldr	r3, [pc, #148]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	4922      	ldr	r1, [pc, #136]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d010      	beq.n	8005714 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69da      	ldr	r2, [r3, #28]
 80056f6:	4b1d      	ldr	r3, [pc, #116]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056fe:	429a      	cmp	r2, r3
 8005700:	d208      	bcs.n	8005714 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005702:	4b1a      	ldr	r3, [pc, #104]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	4917      	ldr	r1, [pc, #92]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 8005710:	4313      	orrs	r3, r2
 8005712:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005714:	f000 f834 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 8005718:	4601      	mov	r1, r0
 800571a:	4b14      	ldr	r3, [pc, #80]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	0a1b      	lsrs	r3, r3, #8
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	4a12      	ldr	r2, [pc, #72]	; (8005770 <HAL_RCC_ClockConfig+0x35c>)
 8005726:	5cd3      	ldrb	r3, [r2, r3]
 8005728:	f003 031f 	and.w	r3, r3, #31
 800572c:	fa21 f303 	lsr.w	r3, r1, r3
 8005730:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005732:	4b0e      	ldr	r3, [pc, #56]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	4a0d      	ldr	r2, [pc, #52]	; (8005770 <HAL_RCC_ClockConfig+0x35c>)
 800573c:	5cd3      	ldrb	r3, [r2, r3]
 800573e:	f003 031f 	and.w	r3, r3, #31
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	fa22 f303 	lsr.w	r3, r2, r3
 8005748:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <HAL_RCC_ClockConfig+0x360>)
 800574a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800574c:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <HAL_RCC_ClockConfig+0x364>)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005752:	4b0a      	ldr	r3, [pc, #40]	; (800577c <HAL_RCC_ClockConfig+0x368>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f7fa fdfa 	bl	8000350 <HAL_InitTick>
 800575c:	4603      	mov	r3, r0
 800575e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	58024400 	.word	0x58024400
 8005770:	08011378 	.word	0x08011378
 8005774:	20000014 	.word	0x20000014
 8005778:	20000010 	.word	0x20000010
 800577c:	20000000 	.word	0x20000000

08005780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005780:	b480      	push	{r7}
 8005782:	b089      	sub	sp, #36	; 0x24
 8005784:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005786:	4baf      	ldr	r3, [pc, #700]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800578e:	2b18      	cmp	r3, #24
 8005790:	f200 814e 	bhi.w	8005a30 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	08005801 	.word	0x08005801
 80057a0:	08005a31 	.word	0x08005a31
 80057a4:	08005a31 	.word	0x08005a31
 80057a8:	08005a31 	.word	0x08005a31
 80057ac:	08005a31 	.word	0x08005a31
 80057b0:	08005a31 	.word	0x08005a31
 80057b4:	08005a31 	.word	0x08005a31
 80057b8:	08005a31 	.word	0x08005a31
 80057bc:	08005827 	.word	0x08005827
 80057c0:	08005a31 	.word	0x08005a31
 80057c4:	08005a31 	.word	0x08005a31
 80057c8:	08005a31 	.word	0x08005a31
 80057cc:	08005a31 	.word	0x08005a31
 80057d0:	08005a31 	.word	0x08005a31
 80057d4:	08005a31 	.word	0x08005a31
 80057d8:	08005a31 	.word	0x08005a31
 80057dc:	0800582d 	.word	0x0800582d
 80057e0:	08005a31 	.word	0x08005a31
 80057e4:	08005a31 	.word	0x08005a31
 80057e8:	08005a31 	.word	0x08005a31
 80057ec:	08005a31 	.word	0x08005a31
 80057f0:	08005a31 	.word	0x08005a31
 80057f4:	08005a31 	.word	0x08005a31
 80057f8:	08005a31 	.word	0x08005a31
 80057fc:	08005833 	.word	0x08005833
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005800:	4b90      	ldr	r3, [pc, #576]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800580c:	4b8d      	ldr	r3, [pc, #564]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	08db      	lsrs	r3, r3, #3
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	4a8c      	ldr	r2, [pc, #560]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
 800581c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800581e:	e10a      	b.n	8005a36 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005820:	4b89      	ldr	r3, [pc, #548]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005822:	61bb      	str	r3, [r7, #24]
    break;
 8005824:	e107      	b.n	8005a36 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005826:	4b89      	ldr	r3, [pc, #548]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005828:	61bb      	str	r3, [r7, #24]
    break;
 800582a:	e104      	b.n	8005a36 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800582c:	4b88      	ldr	r3, [pc, #544]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800582e:	61bb      	str	r3, [r7, #24]
    break;
 8005830:	e101      	b.n	8005a36 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005832:	4b84      	ldr	r3, [pc, #528]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800583c:	4b81      	ldr	r3, [pc, #516]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005846:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005848:	4b7e      	ldr	r3, [pc, #504]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005852:	4b7c      	ldr	r3, [pc, #496]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005856:	08db      	lsrs	r3, r3, #3
 8005858:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	fb02 f303 	mul.w	r3, r2, r3
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80da 	beq.w	8005a2a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d05a      	beq.n	8005932 <HAL_RCC_GetSysClockFreq+0x1b2>
 800587c:	2b01      	cmp	r3, #1
 800587e:	d302      	bcc.n	8005886 <HAL_RCC_GetSysClockFreq+0x106>
 8005880:	2b02      	cmp	r3, #2
 8005882:	d078      	beq.n	8005976 <HAL_RCC_GetSysClockFreq+0x1f6>
 8005884:	e099      	b.n	80059ba <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005886:	4b6f      	ldr	r3, [pc, #444]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d02d      	beq.n	80058ee <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005892:	4b6c      	ldr	r3, [pc, #432]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	08db      	lsrs	r3, r3, #3
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	4a6a      	ldr	r2, [pc, #424]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800589e:	fa22 f303 	lsr.w	r3, r2, r3
 80058a2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	ee07 3a90 	vmov	s15, r3
 80058b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058bc:	4b61      	ldr	r3, [pc, #388]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c4:	ee07 3a90 	vmov	s15, r3
 80058c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80058d0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>
 80058d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80058ec:	e087      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	ee07 3a90 	vmov	s15, r3
 80058f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005a58 <HAL_RCC_GetSysClockFreq+0x2d8>
 80058fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005900:	4b50      	ldr	r3, [pc, #320]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005908:	ee07 3a90 	vmov	s15, r3
 800590c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005910:	ed97 6a02 	vldr	s12, [r7, #8]
 8005914:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005930:	e065      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	ee07 3a90 	vmov	s15, r3
 8005938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005a5c <HAL_RCC_GetSysClockFreq+0x2dc>
 8005940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005944:	4b3f      	ldr	r3, [pc, #252]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594c:	ee07 3a90 	vmov	s15, r3
 8005950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005954:	ed97 6a02 	vldr	s12, [r7, #8]
 8005958:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>
 800595c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005970:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005974:	e043      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	ee07 3a90 	vmov	s15, r3
 800597c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005980:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005a60 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005988:	4b2e      	ldr	r3, [pc, #184]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005990:	ee07 3a90 	vmov	s15, r3
 8005994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005998:	ed97 6a02 	vldr	s12, [r7, #8]
 800599c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>
 80059a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059b8:	e021      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	ee07 3a90 	vmov	s15, r3
 80059c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005a5c <HAL_RCC_GetSysClockFreq+0x2dc>
 80059c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059cc:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80059ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d4:	ee07 3a90 	vmov	s15, r3
 80059d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80059e0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>
 80059e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059fc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80059fe:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	0a5b      	lsrs	r3, r3, #9
 8005a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a08:	3301      	adds	r3, #1
 8005a0a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a22:	ee17 3a90 	vmov	r3, s15
 8005a26:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005a28:	e005      	b.n	8005a36 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61bb      	str	r3, [r7, #24]
    break;
 8005a2e:	e002      	b.n	8005a36 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005a32:	61bb      	str	r3, [r7, #24]
    break;
 8005a34:	bf00      	nop
  }

  return sysclockfreq;
 8005a36:	69bb      	ldr	r3, [r7, #24]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3724      	adds	r7, #36	; 0x24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	58024400 	.word	0x58024400
 8005a48:	03d09000 	.word	0x03d09000
 8005a4c:	003d0900 	.word	0x003d0900
 8005a50:	017d7840 	.word	0x017d7840
 8005a54:	46000000 	.word	0x46000000
 8005a58:	4c742400 	.word	0x4c742400
 8005a5c:	4a742400 	.word	0x4a742400
 8005a60:	4bbebc20 	.word	0x4bbebc20

08005a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a6a:	f7ff fe89 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 8005a6e:	4601      	mov	r1, r0
 8005a70:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	4a0f      	ldr	r2, [pc, #60]	; (8005ab8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a7c:	5cd3      	ldrb	r3, [r2, r3]
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	fa21 f303 	lsr.w	r3, r1, r3
 8005a86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a88:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	4a09      	ldr	r2, [pc, #36]	; (8005ab8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a92:	5cd3      	ldrb	r3, [r2, r3]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9e:	4a07      	ldr	r2, [pc, #28]	; (8005abc <HAL_RCC_GetHCLKFreq+0x58>)
 8005aa0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005aa2:	4a07      	ldr	r2, [pc, #28]	; (8005ac0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005aa8:	4b04      	ldr	r3, [pc, #16]	; (8005abc <HAL_RCC_GetHCLKFreq+0x58>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	58024400 	.word	0x58024400
 8005ab8:	08011378 	.word	0x08011378
 8005abc:	20000014 	.word	0x20000014
 8005ac0:	20000010 	.word	0x20000010

08005ac4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005acc:	2300      	movs	r3, #0
 8005ace:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d03d      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ae8:	d013      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aee:	d802      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005af4:	e01f      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005afa:	d013      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005afc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b00:	d01c      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005b02:	e018      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b04:	4baf      	ldr	r3, [pc, #700]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	4aae      	ldr	r2, [pc, #696]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b10:	e015      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3304      	adds	r3, #4
 8005b16:	2102      	movs	r1, #2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f001 fd23 	bl	8007564 <RCCEx_PLL2_Config>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b22:	e00c      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3324      	adds	r3, #36	; 0x24
 8005b28:	2102      	movs	r1, #2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f001 fdcc 	bl	80076c8 <RCCEx_PLL3_Config>
 8005b30:	4603      	mov	r3, r0
 8005b32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b34:	e003      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	75fb      	strb	r3, [r7, #23]
      break;
 8005b3a:	e000      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d109      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b44:	4b9f      	ldr	r3, [pc, #636]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b50:	499c      	ldr	r1, [pc, #624]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	650b      	str	r3, [r1, #80]	; 0x50
 8005b56:	e001      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
 8005b5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d03d      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d826      	bhi.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005b70:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8005b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b76:	bf00      	nop
 8005b78:	08005b8d 	.word	0x08005b8d
 8005b7c:	08005b9b 	.word	0x08005b9b
 8005b80:	08005bad 	.word	0x08005bad
 8005b84:	08005bc5 	.word	0x08005bc5
 8005b88:	08005bc5 	.word	0x08005bc5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b8c:	4b8d      	ldr	r3, [pc, #564]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b90:	4a8c      	ldr	r2, [pc, #560]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b98:	e015      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 fcdf 	bl	8007564 <RCCEx_PLL2_Config>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005baa:	e00c      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3324      	adds	r3, #36	; 0x24
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 fd88 	bl	80076c8 <RCCEx_PLL3_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bbc:	e003      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc2:	e000      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bcc:	4b7d      	ldr	r3, [pc, #500]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd0:	f023 0207 	bic.w	r2, r3, #7
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd8:	497a      	ldr	r1, [pc, #488]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	650b      	str	r3, [r1, #80]	; 0x50
 8005bde:	e001      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
 8005be2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d03e      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf4:	2b80      	cmp	r3, #128	; 0x80
 8005bf6:	d01c      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005bf8:	2b80      	cmp	r3, #128	; 0x80
 8005bfa:	d804      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d008      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	d00d      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005c04:	e01e      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005c06:	2bc0      	cmp	r3, #192	; 0xc0
 8005c08:	d01f      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c0e:	d01e      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005c10:	e018      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c12:	4b6c      	ldr	r3, [pc, #432]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	4a6b      	ldr	r2, [pc, #428]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c1e:	e017      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3304      	adds	r3, #4
 8005c24:	2100      	movs	r1, #0
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 fc9c 	bl	8007564 <RCCEx_PLL2_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c30:	e00e      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3324      	adds	r3, #36	; 0x24
 8005c36:	2100      	movs	r1, #0
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 fd45 	bl	80076c8 <RCCEx_PLL3_Config>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c42:	e005      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	75fb      	strb	r3, [r7, #23]
      break;
 8005c48:	e002      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005c4a:	bf00      	nop
 8005c4c:	e000      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c50:	7dfb      	ldrb	r3, [r7, #23]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c56:	4b5b      	ldr	r3, [pc, #364]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c5a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c62:	4958      	ldr	r1, [pc, #352]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	650b      	str	r3, [r1, #80]	; 0x50
 8005c68:	e001      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d044      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c84:	d01f      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c8a:	d805      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c94:	d00e      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005c96:	e01f      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005c98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c9c:	d01f      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005c9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ca2:	d01e      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005ca4:	e018      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca6:	4b47      	ldr	r3, [pc, #284]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	4a46      	ldr	r2, [pc, #280]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cb2:	e017      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	2100      	movs	r1, #0
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 fc52 	bl	8007564 <RCCEx_PLL2_Config>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005cc4:	e00e      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3324      	adds	r3, #36	; 0x24
 8005cca:	2100      	movs	r1, #0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 fcfb 	bl	80076c8 <RCCEx_PLL3_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cd6:	e005      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	75fb      	strb	r3, [r7, #23]
      break;
 8005cdc:	e002      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005cde:	bf00      	nop
 8005ce0:	e000      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cea:	4b36      	ldr	r3, [pc, #216]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cf8:	4932      	ldr	r1, [pc, #200]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	658b      	str	r3, [r1, #88]	; 0x58
 8005cfe:	e001      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d044      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d1a:	d01f      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d20:	d805      	bhi.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005d26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d2a:	d00e      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005d2c:	e01f      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005d2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d32:	d01f      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005d34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d38:	d01e      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005d3a:	e018      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d3c:	4b21      	ldr	r3, [pc, #132]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	4a20      	ldr	r2, [pc, #128]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d48:	e017      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 fc07 	bl	8007564 <RCCEx_PLL2_Config>
 8005d56:	4603      	mov	r3, r0
 8005d58:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d5a:	e00e      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3324      	adds	r3, #36	; 0x24
 8005d60:	2100      	movs	r1, #0
 8005d62:	4618      	mov	r0, r3
 8005d64:	f001 fcb0 	bl	80076c8 <RCCEx_PLL3_Config>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d6c:	e005      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	75fb      	strb	r3, [r7, #23]
      break;
 8005d72:	e002      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005d74:	bf00      	nop
 8005d76:	e000      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d80:	4b10      	ldr	r3, [pc, #64]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d84:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d8e:	490d      	ldr	r1, [pc, #52]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	658b      	str	r3, [r1, #88]	; 0x58
 8005d94:	e001      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d035      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005daa:	2b10      	cmp	r3, #16
 8005dac:	d00c      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005dae:	2b10      	cmp	r3, #16
 8005db0:	d802      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d01b      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005db6:	e017      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	d00c      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005dbc:	2b30      	cmp	r3, #48	; 0x30
 8005dbe:	d018      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005dc0:	e012      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005dc2:	bf00      	nop
 8005dc4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc8:	4baf      	ldr	r3, [pc, #700]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	4aae      	ldr	r2, [pc, #696]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005dd4:	e00e      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	2102      	movs	r1, #2
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 fbc1 	bl	8007564 <RCCEx_PLL2_Config>
 8005de2:	4603      	mov	r3, r0
 8005de4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005de6:	e005      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	75fb      	strb	r3, [r7, #23]
      break;
 8005dec:	e002      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005dee:	bf00      	nop
 8005df0:	e000      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005dfa:	4ba3      	ldr	r3, [pc, #652]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e06:	49a0      	ldr	r1, [pc, #640]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e0c:	e001      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
 8005e10:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d042      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e26:	d01f      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e2c:	d805      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e36:	d00e      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005e38:	e01f      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005e3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e3e:	d01f      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e44:	d01e      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005e46:	e018      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e48:	4b8f      	ldr	r3, [pc, #572]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	4a8e      	ldr	r2, [pc, #568]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e54:	e017      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 fb81 	bl	8007564 <RCCEx_PLL2_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e66:	e00e      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3324      	adds	r3, #36	; 0x24
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 fc2a 	bl	80076c8 <RCCEx_PLL3_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e78:	e005      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e7e:	e002      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005e80:	bf00      	nop
 8005e82:	e000      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d109      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e8c:	4b7e      	ldr	r3, [pc, #504]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e90:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e98:	497b      	ldr	r1, [pc, #492]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	650b      	str	r3, [r1, #80]	; 0x50
 8005e9e:	e001      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
 8005ea2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d042      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eb8:	d01b      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ebe:	d805      	bhi.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d022      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec8:	d00a      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005eca:	e01b      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005ecc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ed0:	d01d      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005ed2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ed6:	d01c      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005ed8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005edc:	d01b      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005ede:	e011      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fb3c 	bl	8007564 <RCCEx_PLL2_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005ef0:	e012      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3324      	adds	r3, #36	; 0x24
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f001 fbe5 	bl	80076c8 <RCCEx_PLL3_Config>
 8005efe:	4603      	mov	r3, r0
 8005f00:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f02:	e009      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	75fb      	strb	r3, [r7, #23]
      break;
 8005f08:	e006      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005f0a:	bf00      	nop
 8005f0c:	e004      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005f0e:	bf00      	nop
 8005f10:	e002      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005f12:	bf00      	nop
 8005f14:	e000      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d109      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f1e:	4b5a      	ldr	r3, [pc, #360]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f22:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f2a:	4957      	ldr	r1, [pc, #348]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	650b      	str	r3, [r1, #80]	; 0x50
 8005f30:	e001      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
 8005f34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d044      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f4c:	d01b      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f52:	d805      	bhi.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d022      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f5c:	d00a      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005f5e:	e01b      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f64:	d01d      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f6a:	d01c      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005f6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f70:	d01b      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005f72:	e011      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3304      	adds	r3, #4
 8005f78:	2101      	movs	r1, #1
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 faf2 	bl	8007564 <RCCEx_PLL2_Config>
 8005f80:	4603      	mov	r3, r0
 8005f82:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f84:	e012      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3324      	adds	r3, #36	; 0x24
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 fb9b 	bl	80076c8 <RCCEx_PLL3_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f96:	e009      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f9c:	e006      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005f9e:	bf00      	nop
 8005fa0:	e004      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005fa2:	bf00      	nop
 8005fa4:	e002      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005fa6:	bf00      	nop
 8005fa8:	e000      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10a      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005fb2:	4b35      	ldr	r3, [pc, #212]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fc0:	4931      	ldr	r1, [pc, #196]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	658b      	str	r3, [r1, #88]	; 0x58
 8005fc6:	e001      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
 8005fca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d02d      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fe0:	d005      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fe6:	d009      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d013      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005fec:	e00f      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fee:	4b26      	ldr	r3, [pc, #152]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	4a25      	ldr	r2, [pc, #148]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ffa:	e00c      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3304      	adds	r3, #4
 8006000:	2101      	movs	r1, #1
 8006002:	4618      	mov	r0, r3
 8006004:	f001 faae 	bl	8007564 <RCCEx_PLL2_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800600c:	e003      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	75fb      	strb	r3, [r7, #23]
      break;
 8006012:	e000      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d109      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800601c:	4b1a      	ldr	r3, [pc, #104]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800601e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006020:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006028:	4917      	ldr	r1, [pc, #92]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800602a:	4313      	orrs	r3, r2
 800602c:	650b      	str	r3, [r1, #80]	; 0x50
 800602e:	e001      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006030:	7dfb      	ldrb	r3, [r7, #23]
 8006032:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d035      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006044:	2b03      	cmp	r3, #3
 8006046:	d81b      	bhi.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006048:	a201      	add	r2, pc, #4	; (adr r2, 8006050 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800604a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604e:	bf00      	nop
 8006050:	0800608d 	.word	0x0800608d
 8006054:	08006061 	.word	0x08006061
 8006058:	0800606f 	.word	0x0800606f
 800605c:	0800608d 	.word	0x0800608d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006060:	4b09      	ldr	r3, [pc, #36]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	4a08      	ldr	r2, [pc, #32]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800606a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800606c:	e00f      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3304      	adds	r3, #4
 8006072:	2102      	movs	r1, #2
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fa75 	bl	8007564 <RCCEx_PLL2_Config>
 800607a:	4603      	mov	r3, r0
 800607c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800607e:	e006      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	75fb      	strb	r3, [r7, #23]
      break;
 8006084:	e003      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006086:	bf00      	nop
 8006088:	58024400 	.word	0x58024400
      break;
 800608c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d109      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006094:	4bba      	ldr	r3, [pc, #744]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006098:	f023 0203 	bic.w	r2, r3, #3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a0:	49b7      	ldr	r1, [pc, #732]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80060a6:	e001      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
 80060aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8086 	beq.w	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060ba:	4bb2      	ldr	r3, [pc, #712]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4ab1      	ldr	r2, [pc, #708]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80060c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060c6:	f7fa f98d 	bl	80003e4 <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060cc:	e009      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ce:	f7fa f989 	bl	80003e4 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b64      	cmp	r3, #100	; 0x64
 80060da:	d902      	bls.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	75fb      	strb	r3, [r7, #23]
        break;
 80060e0:	e005      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060e2:	4ba8      	ldr	r3, [pc, #672]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0ef      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d166      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80060f4:	4ba2      	ldr	r3, [pc, #648]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80060f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060fe:	4053      	eors	r3, r2
 8006100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006104:	2b00      	cmp	r3, #0
 8006106:	d013      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006108:	4b9d      	ldr	r3, [pc, #628]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006110:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006112:	4b9b      	ldr	r3, [pc, #620]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006116:	4a9a      	ldr	r2, [pc, #616]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800611c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800611e:	4b98      	ldr	r3, [pc, #608]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006122:	4a97      	ldr	r2, [pc, #604]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006128:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800612a:	4a95      	ldr	r2, [pc, #596]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800613a:	d115      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613c:	f7fa f952 	bl	80003e4 <HAL_GetTick>
 8006140:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006142:	e00b      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006144:	f7fa f94e 	bl	80003e4 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006152:	4293      	cmp	r3, r2
 8006154:	d902      	bls.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	75fb      	strb	r3, [r7, #23]
            break;
 800615a:	e005      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800615c:	4b88      	ldr	r3, [pc, #544]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800615e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0ed      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006168:	7dfb      	ldrb	r3, [r7, #23]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d126      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800617c:	d10d      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800617e:	4b80      	ldr	r3, [pc, #512]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800618c:	0919      	lsrs	r1, r3, #4
 800618e:	4b7e      	ldr	r3, [pc, #504]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006190:	400b      	ands	r3, r1
 8006192:	497b      	ldr	r1, [pc, #492]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006194:	4313      	orrs	r3, r2
 8006196:	610b      	str	r3, [r1, #16]
 8006198:	e005      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800619a:	4b79      	ldr	r3, [pc, #484]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	4a78      	ldr	r2, [pc, #480]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80061a4:	6113      	str	r3, [r2, #16]
 80061a6:	4b76      	ldr	r3, [pc, #472]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061b4:	4972      	ldr	r1, [pc, #456]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	670b      	str	r3, [r1, #112]	; 0x70
 80061ba:	e004      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	75bb      	strb	r3, [r7, #22]
 80061c0:	e001      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d07d      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061d6:	2b28      	cmp	r3, #40	; 0x28
 80061d8:	d866      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80061da:	a201      	add	r2, pc, #4	; (adr r2, 80061e0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e0:	080062af 	.word	0x080062af
 80061e4:	080062a9 	.word	0x080062a9
 80061e8:	080062a9 	.word	0x080062a9
 80061ec:	080062a9 	.word	0x080062a9
 80061f0:	080062a9 	.word	0x080062a9
 80061f4:	080062a9 	.word	0x080062a9
 80061f8:	080062a9 	.word	0x080062a9
 80061fc:	080062a9 	.word	0x080062a9
 8006200:	08006285 	.word	0x08006285
 8006204:	080062a9 	.word	0x080062a9
 8006208:	080062a9 	.word	0x080062a9
 800620c:	080062a9 	.word	0x080062a9
 8006210:	080062a9 	.word	0x080062a9
 8006214:	080062a9 	.word	0x080062a9
 8006218:	080062a9 	.word	0x080062a9
 800621c:	080062a9 	.word	0x080062a9
 8006220:	08006297 	.word	0x08006297
 8006224:	080062a9 	.word	0x080062a9
 8006228:	080062a9 	.word	0x080062a9
 800622c:	080062a9 	.word	0x080062a9
 8006230:	080062a9 	.word	0x080062a9
 8006234:	080062a9 	.word	0x080062a9
 8006238:	080062a9 	.word	0x080062a9
 800623c:	080062a9 	.word	0x080062a9
 8006240:	080062af 	.word	0x080062af
 8006244:	080062a9 	.word	0x080062a9
 8006248:	080062a9 	.word	0x080062a9
 800624c:	080062a9 	.word	0x080062a9
 8006250:	080062a9 	.word	0x080062a9
 8006254:	080062a9 	.word	0x080062a9
 8006258:	080062a9 	.word	0x080062a9
 800625c:	080062a9 	.word	0x080062a9
 8006260:	080062af 	.word	0x080062af
 8006264:	080062a9 	.word	0x080062a9
 8006268:	080062a9 	.word	0x080062a9
 800626c:	080062a9 	.word	0x080062a9
 8006270:	080062a9 	.word	0x080062a9
 8006274:	080062a9 	.word	0x080062a9
 8006278:	080062a9 	.word	0x080062a9
 800627c:	080062a9 	.word	0x080062a9
 8006280:	080062af 	.word	0x080062af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3304      	adds	r3, #4
 8006288:	2101      	movs	r1, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f001 f96a 	bl	8007564 <RCCEx_PLL2_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006294:	e00c      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3324      	adds	r3, #36	; 0x24
 800629a:	2101      	movs	r1, #1
 800629c:	4618      	mov	r0, r3
 800629e:	f001 fa13 	bl	80076c8 <RCCEx_PLL3_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80062a6:	e003      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	75fb      	strb	r3, [r7, #23]
      break;
 80062ac:	e000      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80062ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062b6:	4b32      	ldr	r3, [pc, #200]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062c2:	492f      	ldr	r1, [pc, #188]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	654b      	str	r3, [r1, #84]	; 0x54
 80062c8:	e001      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d037      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062de:	2b05      	cmp	r3, #5
 80062e0:	d820      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80062e2:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	0800632b 	.word	0x0800632b
 80062ec:	08006301 	.word	0x08006301
 80062f0:	08006313 	.word	0x08006313
 80062f4:	0800632b 	.word	0x0800632b
 80062f8:	0800632b 	.word	0x0800632b
 80062fc:	0800632b 	.word	0x0800632b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3304      	adds	r3, #4
 8006304:	2101      	movs	r1, #1
 8006306:	4618      	mov	r0, r3
 8006308:	f001 f92c 	bl	8007564 <RCCEx_PLL2_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006310:	e00c      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3324      	adds	r3, #36	; 0x24
 8006316:	2101      	movs	r1, #1
 8006318:	4618      	mov	r0, r3
 800631a:	f001 f9d5 	bl	80076c8 <RCCEx_PLL3_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006322:	e003      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	75fb      	strb	r3, [r7, #23]
      break;
 8006328:	e000      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800632a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800632c:	7dfb      	ldrb	r3, [r7, #23]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d109      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006332:	4b13      	ldr	r3, [pc, #76]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006336:	f023 0207 	bic.w	r2, r3, #7
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800633e:	4910      	ldr	r1, [pc, #64]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006340:	4313      	orrs	r3, r2
 8006342:	654b      	str	r3, [r1, #84]	; 0x54
 8006344:	e001      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006346:	7dfb      	ldrb	r3, [r7, #23]
 8006348:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b00      	cmp	r3, #0
 8006354:	d040      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635c:	2b05      	cmp	r3, #5
 800635e:	d827      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006360:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	080063b7 	.word	0x080063b7
 800636c:	0800638d 	.word	0x0800638d
 8006370:	0800639f 	.word	0x0800639f
 8006374:	080063b7 	.word	0x080063b7
 8006378:	080063b7 	.word	0x080063b7
 800637c:	080063b7 	.word	0x080063b7
 8006380:	58024400 	.word	0x58024400
 8006384:	58024800 	.word	0x58024800
 8006388:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3304      	adds	r3, #4
 8006390:	2101      	movs	r1, #1
 8006392:	4618      	mov	r0, r3
 8006394:	f001 f8e6 	bl	8007564 <RCCEx_PLL2_Config>
 8006398:	4603      	mov	r3, r0
 800639a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800639c:	e00c      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3324      	adds	r3, #36	; 0x24
 80063a2:	2101      	movs	r1, #1
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 f98f 	bl	80076c8 <RCCEx_PLL3_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80063ae:	e003      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	75fb      	strb	r3, [r7, #23]
      break;
 80063b4:	e000      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80063b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063be:	4bb2      	ldr	r3, [pc, #712]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80063c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c2:	f023 0207 	bic.w	r2, r3, #7
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063cc:	49ae      	ldr	r1, [pc, #696]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	658b      	str	r3, [r1, #88]	; 0x58
 80063d2:	e001      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
 80063d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d044      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ee:	d01b      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80063f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f4:	d805      	bhi.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d022      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80063fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063fe:	d00a      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006400:	e01b      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006406:	d01d      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800640c:	d01c      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800640e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006412:	d01b      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006414:	e011      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3304      	adds	r3, #4
 800641a:	2100      	movs	r1, #0
 800641c:	4618      	mov	r0, r3
 800641e:	f001 f8a1 	bl	8007564 <RCCEx_PLL2_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006426:	e012      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3324      	adds	r3, #36	; 0x24
 800642c:	2102      	movs	r1, #2
 800642e:	4618      	mov	r0, r3
 8006430:	f001 f94a 	bl	80076c8 <RCCEx_PLL3_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006438:	e009      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	75fb      	strb	r3, [r7, #23]
      break;
 800643e:	e006      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006440:	bf00      	nop
 8006442:	e004      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006444:	bf00      	nop
 8006446:	e002      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006448:	bf00      	nop
 800644a:	e000      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800644c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006454:	4b8c      	ldr	r3, [pc, #560]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006458:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006462:	4989      	ldr	r1, [pc, #548]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006464:	4313      	orrs	r3, r2
 8006466:	654b      	str	r3, [r1, #84]	; 0x54
 8006468:	e001      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d044      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006484:	d01b      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800648a:	d805      	bhi.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d022      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006494:	d00a      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006496:	e01b      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649c:	d01d      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800649e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80064a2:	d01c      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80064a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064a8:	d01b      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80064aa:	e011      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3304      	adds	r3, #4
 80064b0:	2100      	movs	r1, #0
 80064b2:	4618      	mov	r0, r3
 80064b4:	f001 f856 	bl	8007564 <RCCEx_PLL2_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80064bc:	e012      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3324      	adds	r3, #36	; 0x24
 80064c2:	2102      	movs	r1, #2
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 f8ff 	bl	80076c8 <RCCEx_PLL3_Config>
 80064ca:	4603      	mov	r3, r0
 80064cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80064ce:	e009      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	75fb      	strb	r3, [r7, #23]
      break;
 80064d4:	e006      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80064d6:	bf00      	nop
 80064d8:	e004      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80064da:	bf00      	nop
 80064dc:	e002      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80064de:	bf00      	nop
 80064e0:	e000      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80064e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064ea:	4b67      	ldr	r3, [pc, #412]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80064ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064f8:	4963      	ldr	r1, [pc, #396]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	658b      	str	r3, [r1, #88]	; 0x58
 80064fe:	e001      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650c:	2b00      	cmp	r3, #0
 800650e:	d044      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800651a:	d01b      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800651c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006520:	d805      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d022      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800652a:	d00a      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800652c:	e01b      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800652e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006532:	d01d      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006534:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006538:	d01c      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800653a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800653e:	d01b      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006540:	e011      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3304      	adds	r3, #4
 8006546:	2100      	movs	r1, #0
 8006548:	4618      	mov	r0, r3
 800654a:	f001 f80b 	bl	8007564 <RCCEx_PLL2_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006552:	e012      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3324      	adds	r3, #36	; 0x24
 8006558:	2102      	movs	r1, #2
 800655a:	4618      	mov	r0, r3
 800655c:	f001 f8b4 	bl	80076c8 <RCCEx_PLL3_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006564:	e009      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	75fb      	strb	r3, [r7, #23]
      break;
 800656a:	e006      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800656c:	bf00      	nop
 800656e:	e004      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006570:	bf00      	nop
 8006572:	e002      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006574:	bf00      	nop
 8006576:	e000      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006580:	4b41      	ldr	r3, [pc, #260]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006584:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800658e:	493e      	ldr	r1, [pc, #248]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006590:	4313      	orrs	r3, r2
 8006592:	658b      	str	r3, [r1, #88]	; 0x58
 8006594:	e001      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d01a      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b0:	d10a      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3324      	adds	r3, #36	; 0x24
 80065b6:	2102      	movs	r1, #2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 f885 	bl	80076c8 <RCCEx_PLL3_Config>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80065c8:	4b2f      	ldr	r3, [pc, #188]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80065ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065d6:	492c      	ldr	r1, [pc, #176]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01a      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f2:	d10a      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3324      	adds	r3, #36	; 0x24
 80065f8:	2102      	movs	r1, #2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 f864 	bl	80076c8 <RCCEx_PLL3_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800660a:	4b1f      	ldr	r3, [pc, #124]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800660c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800660e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006618:	491b      	ldr	r1, [pc, #108]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800661a:	4313      	orrs	r3, r2
 800661c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d032      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006634:	d00d      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800663a:	d016      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800663c:	2b00      	cmp	r3, #0
 800663e:	d111      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3304      	adds	r3, #4
 8006644:	2100      	movs	r1, #0
 8006646:	4618      	mov	r0, r3
 8006648:	f000 ff8c 	bl	8007564 <RCCEx_PLL2_Config>
 800664c:	4603      	mov	r3, r0
 800664e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006650:	e00c      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3324      	adds	r3, #36	; 0x24
 8006656:	2102      	movs	r1, #2
 8006658:	4618      	mov	r0, r3
 800665a:	f001 f835 	bl	80076c8 <RCCEx_PLL3_Config>
 800665e:	4603      	mov	r3, r0
 8006660:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006662:	e003      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	75fb      	strb	r3, [r7, #23]
      break;
 8006668:	e000      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800666a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800666c:	7dfb      	ldrb	r3, [r7, #23]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10c      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006672:	4b05      	ldr	r3, [pc, #20]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006676:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006680:	4901      	ldr	r1, [pc, #4]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006682:	4313      	orrs	r3, r2
 8006684:	658b      	str	r3, [r1, #88]	; 0x58
 8006686:	e003      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006688:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668c:	7dfb      	ldrb	r3, [r7, #23]
 800668e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d02f      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066a6:	d00c      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80066a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066ac:	d015      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80066ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066b2:	d10f      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b4:	4b71      	ldr	r3, [pc, #452]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	4a70      	ldr	r2, [pc, #448]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80066ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80066c0:	e00c      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3324      	adds	r3, #36	; 0x24
 80066c6:	2101      	movs	r1, #1
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fffd 	bl	80076c8 <RCCEx_PLL3_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80066d2:	e003      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	75fb      	strb	r3, [r7, #23]
      break;
 80066d8:	e000      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80066da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066e2:	4b66      	ldr	r3, [pc, #408]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80066e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066f0:	4962      	ldr	r1, [pc, #392]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	654b      	str	r3, [r1, #84]	; 0x54
 80066f6:	e001      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d029      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006714:	d007      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006716:	e00f      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006718:	4b58      	ldr	r3, [pc, #352]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	4a57      	ldr	r2, [pc, #348]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800671e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006722:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006724:	e00b      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3304      	adds	r3, #4
 800672a:	2102      	movs	r1, #2
 800672c:	4618      	mov	r0, r3
 800672e:	f000 ff19 	bl	8007564 <RCCEx_PLL2_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006736:	e002      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	75fb      	strb	r3, [r7, #23]
      break;
 800673c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800673e:	7dfb      	ldrb	r3, [r7, #23]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006744:	4b4d      	ldr	r3, [pc, #308]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006750:	494a      	ldr	r1, [pc, #296]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006752:	4313      	orrs	r3, r2
 8006754:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006756:	e001      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3324      	adds	r3, #36	; 0x24
 800676c:	2102      	movs	r1, #2
 800676e:	4618      	mov	r0, r3
 8006770:	f000 ffaa 	bl	80076c8 <RCCEx_PLL3_Config>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d02f      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800678e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006792:	d00c      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006798:	d802      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d011      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800679e:	e00d      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a4:	d00f      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80067a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067aa:	d00e      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80067ac:	e006      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ae:	4b33      	ldr	r3, [pc, #204]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	4a32      	ldr	r2, [pc, #200]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80067b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80067ba:	e007      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	75fb      	strb	r3, [r7, #23]
      break;
 80067c0:	e004      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80067c2:	bf00      	nop
 80067c4:	e002      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80067c6:	bf00      	nop
 80067c8:	e000      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80067ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067d2:	4b2a      	ldr	r3, [pc, #168]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067de:	4927      	ldr	r1, [pc, #156]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	654b      	str	r3, [r1, #84]	; 0x54
 80067e4:	e001      	b.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80067f6:	4b21      	ldr	r3, [pc, #132]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80067f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	491e      	ldr	r1, [pc, #120]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006804:	4313      	orrs	r3, r2
 8006806:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d008      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006814:	4b19      	ldr	r3, [pc, #100]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006818:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006820:	4916      	ldr	r1, [pc, #88]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006822:	4313      	orrs	r3, r2
 8006824:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00d      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006832:	4b12      	ldr	r3, [pc, #72]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	4a11      	ldr	r2, [pc, #68]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006838:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800683c:	6113      	str	r3, [r2, #16]
 800683e:	4b0f      	ldr	r3, [pc, #60]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006848:	490c      	ldr	r1, [pc, #48]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800684a:	4313      	orrs	r3, r2
 800684c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	da08      	bge.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006856:	4b09      	ldr	r3, [pc, #36]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006862:	4906      	ldr	r1, [pc, #24]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006864:	4313      	orrs	r3, r2
 8006866:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006868:	7dbb      	ldrb	r3, [r7, #22]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	e000      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	58024400 	.word	0x58024400

08006880 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b090      	sub	sp, #64	; 0x40
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688e:	d150      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006890:	4ba1      	ldr	r3, [pc, #644]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	2b04      	cmp	r3, #4
 800689e:	d844      	bhi.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80068a0:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80068a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a6:	bf00      	nop
 80068a8:	080068bd 	.word	0x080068bd
 80068ac:	080068cd 	.word	0x080068cd
 80068b0:	080068dd 	.word	0x080068dd
 80068b4:	08006925 	.word	0x08006925
 80068b8:	080068ed 	.word	0x080068ed
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fd03 	bl	80072cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068ca:	e241      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068cc:	f107 0318 	add.w	r3, r7, #24
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fa63 	bl	8006d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068da:	e239      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068dc:	f107 030c 	add.w	r3, r7, #12
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fba7 	bl	8007034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068ea:	e231      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068ec:	4b8a      	ldr	r3, [pc, #552]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80068ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068f4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80068f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d102      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80068fc:	4b87      	ldr	r3, [pc, #540]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80068fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006900:	e226      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006908:	d102      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800690a:	4b85      	ldr	r3, [pc, #532]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800690e:	e21f      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006916:	d102      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006918:	4b82      	ldr	r3, [pc, #520]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800691c:	e218      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006922:	e215      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006924:	4b80      	ldr	r3, [pc, #512]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006928:	e212      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800692e:	bf00      	nop
 8006930:	e20e      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006938:	d14f      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800693a:	4b77      	ldr	r3, [pc, #476]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800693c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006942:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	2b80      	cmp	r3, #128	; 0x80
 8006948:	d01c      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800694a:	2b80      	cmp	r3, #128	; 0x80
 800694c:	d804      	bhi.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d008      	beq.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006952:	2b40      	cmp	r3, #64	; 0x40
 8006954:	d00e      	beq.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006956:	e03c      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006958:	2bc0      	cmp	r3, #192	; 0xc0
 800695a:	d037      	beq.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800695c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006960:	d018      	beq.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006962:	e036      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fcaf 	bl	80072cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006972:	e1ed      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006974:	f107 0318 	add.w	r3, r7, #24
 8006978:	4618      	mov	r0, r3
 800697a:	f000 fa0f 	bl	8006d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006982:	e1e5      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006984:	f107 030c 	add.w	r3, r7, #12
 8006988:	4618      	mov	r0, r3
 800698a:	f000 fb53 	bl	8007034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006992:	e1dd      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006994:	4b60      	ldr	r3, [pc, #384]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006998:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800699c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800699e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80069a4:	4b5d      	ldr	r3, [pc, #372]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80069a8:	e1d2      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80069aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069b0:	d102      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80069b2:	4b5b      	ldr	r3, [pc, #364]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80069b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069b6:	e1cb      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80069b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069be:	d102      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80069c0:	4b58      	ldr	r3, [pc, #352]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069c4:	e1c4      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069ca:	e1c1      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80069cc:	4b56      	ldr	r3, [pc, #344]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069d0:	e1be      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069d6:	bf00      	nop
 80069d8:	e1ba      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e0:	d153      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80069e2:	4b4d      	ldr	r3, [pc, #308]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80069e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80069ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069f2:	d01f      	beq.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80069f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069f8:	d805      	bhi.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80069fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a02:	d00f      	beq.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006a04:	e03d      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006a06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a0a:	d037      	beq.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006a0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a10:	d018      	beq.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8006a12:	e036      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fc57 	bl	80072cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a22:	e195      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a24:	f107 0318 	add.w	r3, r7, #24
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 f9b7 	bl	8006d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a32:	e18d      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a34:	f107 030c 	add.w	r3, r7, #12
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fafb 	bl	8007034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a42:	e185      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a44:	4b34      	ldr	r3, [pc, #208]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a4c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d102      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006a54:	4b31      	ldr	r3, [pc, #196]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a56:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006a58:	e17a      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a60:	d102      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8006a62:	4b2f      	ldr	r3, [pc, #188]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a66:	e173      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a6e:	d102      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8006a70:	4b2c      	ldr	r3, [pc, #176]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a74:	e16c      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a7a:	e169      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a7c:	4b2a      	ldr	r3, [pc, #168]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a80:	e166      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a86:	bf00      	nop
 8006a88:	e162      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a90:	d15d      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006a92:	4b21      	ldr	r3, [pc, #132]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a96:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006a9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006aa2:	d01f      	beq.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006aa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006aa8:	d805      	bhi.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00a      	beq.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006aae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ab2:	d00f      	beq.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8006ab4:	e047      	b.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8006ab6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006aba:	d041      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8006abc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ac0:	d018      	beq.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8006ac2:	e040      	b.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fbff 	bl	80072cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ad2:	e13d      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ad4:	f107 0318 	add.w	r3, r7, #24
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 f95f 	bl	8006d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ae2:	e135      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ae4:	f107 030c 	add.w	r3, r7, #12
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 faa3 	bl	8007034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006af2:	e12d      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006af4:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006afc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006b04:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006b08:	e122      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b10:	d10c      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8006b12:	4b03      	ldr	r3, [pc, #12]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b16:	e11b      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006b18:	58024400 	.word	0x58024400
 8006b1c:	03d09000 	.word	0x03d09000
 8006b20:	003d0900 	.word	0x003d0900
 8006b24:	017d7840 	.word	0x017d7840
 8006b28:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b32:	d102      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8006b34:	4b89      	ldr	r3, [pc, #548]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b38:	e10a      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b3e:	e107      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b40:	4b87      	ldr	r3, [pc, #540]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8006b42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b44:	e104      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b4a:	bf00      	nop
 8006b4c:	e100      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b54:	d153      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006b56:	4b83      	ldr	r3, [pc, #524]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006b5e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b66:	d01f      	beq.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b6c:	d805      	bhi.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8006b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b76:	d00f      	beq.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006b78:	e03d      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8006b7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b7e:	d037      	beq.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8006b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b84:	d018      	beq.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006b86:	e036      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fb9d 	bl	80072cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b96:	e0db      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b98:	f107 0318 	add.w	r3, r7, #24
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 f8fd 	bl	8006d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ba6:	e0d3      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ba8:	f107 030c 	add.w	r3, r7, #12
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fa41 	bl	8007034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bb6:	e0cb      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006bb8:	4b6a      	ldr	r3, [pc, #424]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bc0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d102      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006bc8:	4b67      	ldr	r3, [pc, #412]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006bcc:	e0c0      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bd4:	d102      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8006bd6:	4b65      	ldr	r3, [pc, #404]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bda:	e0b9      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be2:	d102      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8006be4:	4b5d      	ldr	r3, [pc, #372]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006be8:	e0b2      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bee:	e0af      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006bf0:	4b5b      	ldr	r3, [pc, #364]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8006bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bf4:	e0ac      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bfa:	bf00      	nop
 8006bfc:	e0a8      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c04:	d13d      	bne.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006c06:	4b57      	ldr	r3, [pc, #348]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c0e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c16:	d00c      	beq.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c1c:	d011      	beq.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d12b      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c22:	f107 0318 	add.w	r3, r7, #24
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 f8b8 	bl	8006d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c30:	e08e      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c32:	f107 030c 	add.w	r3, r7, #12
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 f9fc 	bl	8007034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c40:	e086      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006c42:	4b48      	ldr	r3, [pc, #288]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c4a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d102      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006c52:	4b45      	ldr	r3, [pc, #276]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006c54:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006c56:	e07b      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c5e:	d102      	bne.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8006c60:	4b42      	ldr	r3, [pc, #264]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006c62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c64:	e074      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c6c:	d102      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8006c6e:	4b3b      	ldr	r3, [pc, #236]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006c70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c72:	e06d      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c78:	e06a      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c7e:	bf00      	nop
 8006c80:	e066      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c88:	d11f      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006c8a:	4b36      	ldr	r3, [pc, #216]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c92:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c9e:	d008      	beq.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006ca0:	e00f      	b.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fb10 	bl	80072cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cb0:	e04e      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb2:	f107 0318 	add.w	r3, r7, #24
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 f870 	bl	8006d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cc0:	e046      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cc6:	bf00      	nop
 8006cc8:	e042      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cd0:	d13c      	bne.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006cd2:	4b24      	ldr	r3, [pc, #144]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006cda:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce2:	d01e      	beq.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8006ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce8:	d805      	bhi.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00d      	beq.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf2:	d00e      	beq.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8006cf4:	e026      	b.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8006cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cfa:	d01d      	beq.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8006cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d00:	d01d      	beq.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d06:	d014      	beq.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006d08:	e01c      	b.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006d0a:	f000 f831 	bl	8006d70 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d0e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006d10:	e01e      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d12:	f107 0318 	add.w	r3, r7, #24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 f840 	bl	8006d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d20:	e016      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d22:	f107 030c 	add.w	r3, r7, #12
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 f984 	bl	8007034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d30:	e00e      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8006d32:	4b0d      	ldr	r3, [pc, #52]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006d34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d36:	e00b      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8006d38:	4b0c      	ldr	r3, [pc, #48]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d3c:	e008      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8006d3e:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d42:	e005      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d48:	bf00      	nop
 8006d4a:	e001      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3740      	adds	r7, #64	; 0x40
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	017d7840 	.word	0x017d7840
 8006d60:	00bb8000 	.word	0x00bb8000
 8006d64:	58024400 	.word	0x58024400
 8006d68:	03d09000 	.word	0x03d09000
 8006d6c:	003d0900 	.word	0x003d0900

08006d70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006d74:	f7fe fe76 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8006d78:	4601      	mov	r1, r0
 8006d7a:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	091b      	lsrs	r3, r3, #4
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	4a04      	ldr	r2, [pc, #16]	; (8006d98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006d86:	5cd3      	ldrb	r3, [r2, r3]
 8006d88:	f003 031f 	and.w	r3, r3, #31
 8006d8c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	58024400 	.word	0x58024400
 8006d98:	08011378 	.word	0x08011378

08006d9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b089      	sub	sp, #36	; 0x24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006da4:	4b9d      	ldr	r3, [pc, #628]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006dae:	4b9b      	ldr	r3, [pc, #620]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	0b1b      	lsrs	r3, r3, #12
 8006db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006db8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006dba:	4b98      	ldr	r3, [pc, #608]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	091b      	lsrs	r3, r3, #4
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006dc6:	4b95      	ldr	r3, [pc, #596]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dca:	08db      	lsrs	r3, r3, #3
 8006dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	fb02 f303 	mul.w	r3, r2, r3
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 810a 	beq.w	8006ffe <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d05a      	beq.n	8006ea6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d302      	bcc.n	8006dfa <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d078      	beq.n	8006eea <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006df8:	e099      	b.n	8006f2e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dfa:	4b88      	ldr	r3, [pc, #544]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d02d      	beq.n	8006e62 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e06:	4b85      	ldr	r3, [pc, #532]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	08db      	lsrs	r3, r3, #3
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	4a83      	ldr	r2, [pc, #524]	; (8007020 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006e12:	fa22 f303 	lsr.w	r3, r2, r3
 8006e16:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	ee07 3a90 	vmov	s15, r3
 8006e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e30:	4b7a      	ldr	r3, [pc, #488]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e40:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e44:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e60:	e087      	b.n	8006f72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	ee07 3a90 	vmov	s15, r3
 8006e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007028 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e74:	4b69      	ldr	r3, [pc, #420]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7c:	ee07 3a90 	vmov	s15, r3
 8006e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e84:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e88:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ea4:	e065      	b.n	8006f72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	ee07 3a90 	vmov	s15, r3
 8006eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800702c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb8:	4b58      	ldr	r3, [pc, #352]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec0:	ee07 3a90 	vmov	s15, r3
 8006ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ecc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ee8:	e043      	b.n	8006f72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	ee07 3a90 	vmov	s15, r3
 8006ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007030 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efc:	4b47      	ldr	r3, [pc, #284]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f04:	ee07 3a90 	vmov	s15, r3
 8006f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f10:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f2c:	e021      	b.n	8006f72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	ee07 3a90 	vmov	s15, r3
 8006f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f38:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800702c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006f3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f40:	4b36      	ldr	r3, [pc, #216]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f48:	ee07 3a90 	vmov	s15, r3
 8006f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f50:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f54:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006f58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f70:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006f72:	4b2a      	ldr	r3, [pc, #168]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	0a5b      	lsrs	r3, r3, #9
 8006f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f7c:	ee07 3a90 	vmov	s15, r3
 8006f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f98:	ee17 2a90 	vmov	r2, s15
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006fa0:	4b1e      	ldr	r3, [pc, #120]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	0c1b      	lsrs	r3, r3, #16
 8006fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fba:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fc6:	ee17 2a90 	vmov	r2, s15
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006fce:	4b13      	ldr	r3, [pc, #76]	; (800701c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	0e1b      	lsrs	r3, r3, #24
 8006fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd8:	ee07 3a90 	vmov	s15, r3
 8006fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fe8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff4:	ee17 2a90 	vmov	r2, s15
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006ffc:	e008      	b.n	8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	609a      	str	r2, [r3, #8]
}
 8007010:	bf00      	nop
 8007012:	3724      	adds	r7, #36	; 0x24
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	58024400 	.word	0x58024400
 8007020:	03d09000 	.word	0x03d09000
 8007024:	46000000 	.word	0x46000000
 8007028:	4c742400 	.word	0x4c742400
 800702c:	4a742400 	.word	0x4a742400
 8007030:	4bbebc20 	.word	0x4bbebc20

08007034 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007034:	b480      	push	{r7}
 8007036:	b089      	sub	sp, #36	; 0x24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800703c:	4b9d      	ldr	r3, [pc, #628]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	f003 0303 	and.w	r3, r3, #3
 8007044:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007046:	4b9b      	ldr	r3, [pc, #620]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704a:	0d1b      	lsrs	r3, r3, #20
 800704c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007050:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007052:	4b98      	ldr	r3, [pc, #608]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	0a1b      	lsrs	r3, r3, #8
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800705e:	4b95      	ldr	r3, [pc, #596]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007062:	08db      	lsrs	r3, r3, #3
 8007064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	fb02 f303 	mul.w	r3, r2, r3
 800706e:	ee07 3a90 	vmov	s15, r3
 8007072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007076:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 810a 	beq.w	8007296 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d05a      	beq.n	800713e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007088:	2b01      	cmp	r3, #1
 800708a:	d302      	bcc.n	8007092 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800708c:	2b02      	cmp	r3, #2
 800708e:	d078      	beq.n	8007182 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007090:	e099      	b.n	80071c6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007092:	4b88      	ldr	r3, [pc, #544]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b00      	cmp	r3, #0
 800709c:	d02d      	beq.n	80070fa <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800709e:	4b85      	ldr	r3, [pc, #532]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	08db      	lsrs	r3, r3, #3
 80070a4:	f003 0303 	and.w	r3, r3, #3
 80070a8:	4a83      	ldr	r2, [pc, #524]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80070aa:	fa22 f303 	lsr.w	r3, r2, r3
 80070ae:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	ee07 3a90 	vmov	s15, r3
 80070c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c8:	4b7a      	ldr	r3, [pc, #488]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d0:	ee07 3a90 	vmov	s15, r3
 80070d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80070dc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80070e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070f8:	e087      	b.n	800720a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	ee07 3a90 	vmov	s15, r3
 8007100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007104:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710c:	4b69      	ldr	r3, [pc, #420]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007114:	ee07 3a90 	vmov	s15, r3
 8007118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007120:	eddf 5a66 	vldr	s11, [pc, #408]	; 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007138:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800713c:	e065      	b.n	800720a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007148:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800714c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007150:	4b58      	ldr	r3, [pc, #352]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007160:	ed97 6a03 	vldr	s12, [r7, #12]
 8007164:	eddf 5a55 	vldr	s11, [pc, #340]	; 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007180:	e043      	b.n	800720a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007194:	4b47      	ldr	r3, [pc, #284]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719c:	ee07 3a90 	vmov	s15, r3
 80071a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80071ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071c4:	e021      	b.n	800720a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	ee07 3a90 	vmov	s15, r3
 80071cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80071d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d8:	4b36      	ldr	r3, [pc, #216]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80071da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e0:	ee07 3a90 	vmov	s15, r3
 80071e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ec:	eddf 5a33 	vldr	s11, [pc, #204]	; 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80071f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007204:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007208:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800720a:	4b2a      	ldr	r3, [pc, #168]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	0a5b      	lsrs	r3, r3, #9
 8007210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007214:	ee07 3a90 	vmov	s15, r3
 8007218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007224:	edd7 6a07 	vldr	s13, [r7, #28]
 8007228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800722c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007230:	ee17 2a90 	vmov	r2, s15
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007238:	4b1e      	ldr	r3, [pc, #120]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	0c1b      	lsrs	r3, r3, #16
 800723e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800724e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007252:	edd7 6a07 	vldr	s13, [r7, #28]
 8007256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800725a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800725e:	ee17 2a90 	vmov	r2, s15
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007266:	4b13      	ldr	r3, [pc, #76]	; (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	0e1b      	lsrs	r3, r3, #24
 800726c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007270:	ee07 3a90 	vmov	s15, r3
 8007274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800727c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007280:	edd7 6a07 	vldr	s13, [r7, #28]
 8007284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800728c:	ee17 2a90 	vmov	r2, s15
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007294:	e008      	b.n	80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	609a      	str	r2, [r3, #8]
}
 80072a8:	bf00      	nop
 80072aa:	3724      	adds	r7, #36	; 0x24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	58024400 	.word	0x58024400
 80072b8:	03d09000 	.word	0x03d09000
 80072bc:	46000000 	.word	0x46000000
 80072c0:	4c742400 	.word	0x4c742400
 80072c4:	4a742400 	.word	0x4a742400
 80072c8:	4bbebc20 	.word	0x4bbebc20

080072cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b089      	sub	sp, #36	; 0x24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072d4:	4b9d      	ldr	r3, [pc, #628]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80072d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80072de:	4b9b      	ldr	r3, [pc, #620]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80072e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e2:	091b      	lsrs	r3, r3, #4
 80072e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072e8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80072ea:	4b98      	ldr	r3, [pc, #608]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80072f4:	4b95      	ldr	r3, [pc, #596]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80072f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f8:	08db      	lsrs	r3, r3, #3
 80072fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	fb02 f303 	mul.w	r3, r2, r3
 8007304:	ee07 3a90 	vmov	s15, r3
 8007308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 810a 	beq.w	800752c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d05a      	beq.n	80073d4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800731e:	2b01      	cmp	r3, #1
 8007320:	d302      	bcc.n	8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007322:	2b02      	cmp	r3, #2
 8007324:	d078      	beq.n	8007418 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007326:	e099      	b.n	800745c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007328:	4b88      	ldr	r3, [pc, #544]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0320 	and.w	r3, r3, #32
 8007330:	2b00      	cmp	r3, #0
 8007332:	d02d      	beq.n	8007390 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007334:	4b85      	ldr	r3, [pc, #532]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	08db      	lsrs	r3, r3, #3
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	4a84      	ldr	r2, [pc, #528]	; (8007550 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007340:	fa22 f303 	lsr.w	r3, r2, r3
 8007344:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	ee07 3a90 	vmov	s15, r3
 800734c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800735e:	4b7b      	ldr	r3, [pc, #492]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800736e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007372:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007554 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800737e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800738e:	e087      	b.n	80074a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007558 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800739e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a2:	4b6a      	ldr	r3, [pc, #424]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80073a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007554 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80073ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073d2:	e065      	b.n	80074a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800755c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80073e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e6:	4b59      	ldr	r3, [pc, #356]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007554 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80073fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800740a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800740e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007412:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007416:	e043      	b.n	80074a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007422:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007560 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742a:	4b48      	ldr	r3, [pc, #288]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800742c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743a:	ed97 6a03 	vldr	s12, [r7, #12]
 800743e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007554 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800744e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800745a:	e021      	b.n	80074a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007466:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800755c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800746a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800746e:	4b37      	ldr	r3, [pc, #220]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007482:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007554 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800749e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80074a0:	4b2a      	ldr	r3, [pc, #168]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	0a5b      	lsrs	r3, r3, #9
 80074a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80074be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c6:	ee17 2a90 	vmov	r2, s15
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80074ce:	4b1f      	ldr	r3, [pc, #124]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	0c1b      	lsrs	r3, r3, #16
 80074d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d8:	ee07 3a90 	vmov	s15, r3
 80074dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074f4:	ee17 2a90 	vmov	r2, s15
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80074fc:	4b13      	ldr	r3, [pc, #76]	; (800754c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80074fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007500:	0e1b      	lsrs	r3, r3, #24
 8007502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007512:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007516:	edd7 6a07 	vldr	s13, [r7, #28]
 800751a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800751e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007522:	ee17 2a90 	vmov	r2, s15
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800752a:	e008      	b.n	800753e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	609a      	str	r2, [r3, #8]
}
 800753e:	bf00      	nop
 8007540:	3724      	adds	r7, #36	; 0x24
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	58024400 	.word	0x58024400
 8007550:	03d09000 	.word	0x03d09000
 8007554:	46000000 	.word	0x46000000
 8007558:	4c742400 	.word	0x4c742400
 800755c:	4a742400 	.word	0x4a742400
 8007560:	4bbebc20 	.word	0x4bbebc20

08007564 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007572:	4b53      	ldr	r3, [pc, #332]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	2b03      	cmp	r3, #3
 800757c:	d101      	bne.n	8007582 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e099      	b.n	80076b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007582:	4b4f      	ldr	r3, [pc, #316]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a4e      	ldr	r2, [pc, #312]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007588:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800758c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800758e:	f7f8 ff29 	bl	80003e4 <HAL_GetTick>
 8007592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007594:	e008      	b.n	80075a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007596:	f7f8 ff25 	bl	80003e4 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d901      	bls.n	80075a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e086      	b.n	80076b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075a8:	4b45      	ldr	r3, [pc, #276]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1f0      	bne.n	8007596 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80075b4:	4b42      	ldr	r3, [pc, #264]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	031b      	lsls	r3, r3, #12
 80075c2:	493f      	ldr	r1, [pc, #252]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	628b      	str	r3, [r1, #40]	; 0x28
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	025b      	lsls	r3, r3, #9
 80075da:	b29b      	uxth	r3, r3
 80075dc:	431a      	orrs	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	041b      	lsls	r3, r3, #16
 80075e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	3b01      	subs	r3, #1
 80075f2:	061b      	lsls	r3, r3, #24
 80075f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075f8:	4931      	ldr	r1, [pc, #196]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80075fe:	4b30      	ldr	r3, [pc, #192]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	492d      	ldr	r1, [pc, #180]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 800760c:	4313      	orrs	r3, r2
 800760e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007610:	4b2b      	ldr	r3, [pc, #172]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	f023 0220 	bic.w	r2, r3, #32
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	4928      	ldr	r1, [pc, #160]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 800761e:	4313      	orrs	r3, r2
 8007620:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007622:	4b27      	ldr	r3, [pc, #156]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	4a26      	ldr	r2, [pc, #152]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007628:	f023 0310 	bic.w	r3, r3, #16
 800762c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800762e:	4b24      	ldr	r3, [pc, #144]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007632:	4b24      	ldr	r3, [pc, #144]	; (80076c4 <RCCEx_PLL2_Config+0x160>)
 8007634:	4013      	ands	r3, r2
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	69d2      	ldr	r2, [r2, #28]
 800763a:	00d2      	lsls	r2, r2, #3
 800763c:	4920      	ldr	r1, [pc, #128]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 800763e:	4313      	orrs	r3, r2
 8007640:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007642:	4b1f      	ldr	r3, [pc, #124]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	4a1e      	ldr	r2, [pc, #120]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007648:	f043 0310 	orr.w	r3, r3, #16
 800764c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d106      	bne.n	8007662 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007654:	4b1a      	ldr	r3, [pc, #104]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	4a19      	ldr	r2, [pc, #100]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 800765a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800765e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007660:	e00f      	b.n	8007682 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d106      	bne.n	8007676 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007668:	4b15      	ldr	r3, [pc, #84]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	4a14      	ldr	r2, [pc, #80]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 800766e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007672:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007674:	e005      	b.n	8007682 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007676:	4b12      	ldr	r3, [pc, #72]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767a:	4a11      	ldr	r2, [pc, #68]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 800767c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007680:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007682:	4b0f      	ldr	r3, [pc, #60]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a0e      	ldr	r2, [pc, #56]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 8007688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800768c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800768e:	f7f8 fea9 	bl	80003e4 <HAL_GetTick>
 8007692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007694:	e008      	b.n	80076a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007696:	f7f8 fea5 	bl	80003e4 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d901      	bls.n	80076a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e006      	b.n	80076b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076a8:	4b05      	ldr	r3, [pc, #20]	; (80076c0 <RCCEx_PLL2_Config+0x15c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0f0      	beq.n	8007696 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	58024400 	.word	0x58024400
 80076c4:	ffff0007 	.word	0xffff0007

080076c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076d6:	4b53      	ldr	r3, [pc, #332]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d101      	bne.n	80076e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e099      	b.n	800781a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076e6:	4b4f      	ldr	r3, [pc, #316]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a4e      	ldr	r2, [pc, #312]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80076ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076f2:	f7f8 fe77 	bl	80003e4 <HAL_GetTick>
 80076f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076f8:	e008      	b.n	800770c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80076fa:	f7f8 fe73 	bl	80003e4 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	2b02      	cmp	r3, #2
 8007706:	d901      	bls.n	800770c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e086      	b.n	800781a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800770c:	4b45      	ldr	r3, [pc, #276]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1f0      	bne.n	80076fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007718:	4b42      	ldr	r3, [pc, #264]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 800771a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	051b      	lsls	r3, r3, #20
 8007726:	493f      	ldr	r1, [pc, #252]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 8007728:	4313      	orrs	r3, r2
 800772a:	628b      	str	r3, [r1, #40]	; 0x28
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	3b01      	subs	r3, #1
 8007732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	3b01      	subs	r3, #1
 800773c:	025b      	lsls	r3, r3, #9
 800773e:	b29b      	uxth	r3, r3
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	3b01      	subs	r3, #1
 8007748:	041b      	lsls	r3, r3, #16
 800774a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	3b01      	subs	r3, #1
 8007756:	061b      	lsls	r3, r3, #24
 8007758:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800775c:	4931      	ldr	r1, [pc, #196]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 800775e:	4313      	orrs	r3, r2
 8007760:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007762:	4b30      	ldr	r3, [pc, #192]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	492d      	ldr	r1, [pc, #180]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 8007770:	4313      	orrs	r3, r2
 8007772:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007774:	4b2b      	ldr	r3, [pc, #172]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	4928      	ldr	r1, [pc, #160]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 8007782:	4313      	orrs	r3, r2
 8007784:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007786:	4b27      	ldr	r3, [pc, #156]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 8007788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778a:	4a26      	ldr	r2, [pc, #152]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 800778c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007790:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007792:	4b24      	ldr	r3, [pc, #144]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 8007794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007796:	4b24      	ldr	r3, [pc, #144]	; (8007828 <RCCEx_PLL3_Config+0x160>)
 8007798:	4013      	ands	r3, r2
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	69d2      	ldr	r2, [r2, #28]
 800779e:	00d2      	lsls	r2, r2, #3
 80077a0:	4920      	ldr	r1, [pc, #128]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077a6:	4b1f      	ldr	r3, [pc, #124]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	4a1e      	ldr	r2, [pc, #120]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80077ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077b8:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	4a19      	ldr	r2, [pc, #100]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80077be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077c4:	e00f      	b.n	80077e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d106      	bne.n	80077da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077cc:	4b15      	ldr	r3, [pc, #84]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	4a14      	ldr	r2, [pc, #80]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80077d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077d8:	e005      	b.n	80077e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077da:	4b12      	ldr	r3, [pc, #72]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80077dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077de:	4a11      	ldr	r2, [pc, #68]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80077e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077e6:	4b0f      	ldr	r3, [pc, #60]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a0e      	ldr	r2, [pc, #56]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 80077ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077f2:	f7f8 fdf7 	bl	80003e4 <HAL_GetTick>
 80077f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077f8:	e008      	b.n	800780c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077fa:	f7f8 fdf3 	bl	80003e4 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e006      	b.n	800781a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800780c:	4b05      	ldr	r3, [pc, #20]	; (8007824 <RCCEx_PLL3_Config+0x15c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0f0      	beq.n	80077fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	58024400 	.word	0x58024400
 8007828:	ffff0007 	.word	0xffff0007

0800782c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e04d      	b.n	80078da <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	7a5b      	ldrb	r3, [r3, #9]
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d105      	bne.n	8007854 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f008 fc58 	bl	8010104 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2202      	movs	r2, #2
 8007858:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f023 0120 	bic.w	r1, r3, #32
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0204 	orr.w	r2, r2, #4
 800787e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788a:	2b40      	cmp	r3, #64	; 0x40
 800788c:	d104      	bne.n	8007898 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2204      	movs	r2, #4
 8007892:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e020      	b.n	80078da <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8007898:	f7f8 fda4 	bl	80003e4 <HAL_GetTick>
 800789c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800789e:	e00e      	b.n	80078be <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80078a0:	f7f8 fda0 	bl	80003e4 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d907      	bls.n	80078be <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2204      	movs	r2, #4
 80078b2:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e00d      	b.n	80078da <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d0e9      	beq.n	80078a0 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	7a1b      	ldrb	r3, [r3, #8]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_RNG_GenerateRandomNumber+0x1a>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e03d      	b.n	8007978 <HAL_RNG_GenerateRandomNumber+0x96>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	7a5b      	ldrb	r3, [r3, #9]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	d12c      	bne.n	8007966 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007912:	f7f8 fd67 	bl	80003e4 <HAL_GetTick>
 8007916:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007918:	e011      	b.n	800793e <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800791a:	f7f8 fd63 	bl	80003e4 <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d90a      	bls.n	800793e <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2202      	movs	r2, #2
 8007932:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e01c      	b.n	8007978 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	2b01      	cmp	r3, #1
 800794a:	d1e6      	bne.n	800791a <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689a      	ldr	r2, [r3, #8]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691a      	ldr	r2, [r3, #16]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	725a      	strb	r2, [r3, #9]
 8007964:	e004      	b.n	8007970 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2204      	movs	r2, #4
 800796a:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	721a      	strb	r2, [r3, #8]

  return status;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b04      	cmp	r3, #4
 8007992:	d81f      	bhi.n	80079d4 <HAL_SAI_InitProtocol+0x54>
 8007994:	a201      	add	r2, pc, #4	; (adr r2, 800799c <HAL_SAI_InitProtocol+0x1c>)
 8007996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799a:	bf00      	nop
 800799c:	080079b1 	.word	0x080079b1
 80079a0:	080079b1 	.word	0x080079b1
 80079a4:	080079b1 	.word	0x080079b1
 80079a8:	080079c3 	.word	0x080079c3
 80079ac:	080079c3 	.word	0x080079c3
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 fc1c 	bl	80081f4 <SAI_InitI2S>
 80079bc:	4603      	mov	r3, r0
 80079be:	75fb      	strb	r3, [r7, #23]
      break;
 80079c0:	e00b      	b.n	80079da <HAL_SAI_InitProtocol+0x5a>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	68b9      	ldr	r1, [r7, #8]
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 fcc5 	bl	8008358 <SAI_InitPCM>
 80079ce:	4603      	mov	r3, r0
 80079d0:	75fb      	strb	r3, [r7, #23]
      break;
 80079d2:	e002      	b.n	80079da <HAL_SAI_InitProtocol+0x5a>
    default :
      status = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	75fb      	strb	r3, [r7, #23]
      break;
 80079d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80079da:	7dfb      	ldrb	r3, [r7, #23]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <HAL_SAI_InitProtocol+0x6a>
  {
    status = HAL_SAI_Init(hsai);
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 f807 	bl	80079f4 <HAL_SAI_Init>
 80079e6:	4603      	mov	r3, r0
 80079e8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08a      	sub	sp, #40	; 0x28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e268      	b.n	8007ed8 <HAL_SAI_Init+0x4e4>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007a06:	f7f8 fd1b 	bl	8000440 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d113      	bne.n	8007a3c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a8b      	ldr	r2, [pc, #556]	; (8007c48 <HAL_SAI_Init+0x254>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d004      	beq.n	8007a28 <HAL_SAI_Init+0x34>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a8a      	ldr	r2, [pc, #552]	; (8007c4c <HAL_SAI_Init+0x258>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d107      	bne.n	8007a38 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d103      	bne.n	8007a38 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e24d      	b.n	8007ed8 <HAL_SAI_Init+0x4e4>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a81      	ldr	r2, [pc, #516]	; (8007c48 <HAL_SAI_Init+0x254>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d004      	beq.n	8007a50 <HAL_SAI_Init+0x5c>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a81      	ldr	r2, [pc, #516]	; (8007c50 <HAL_SAI_Init+0x25c>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d102      	bne.n	8007a56 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007a50:	4b80      	ldr	r3, [pc, #512]	; (8007c54 <HAL_SAI_Init+0x260>)
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	e028      	b.n	8007aa8 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a7f      	ldr	r2, [pc, #508]	; (8007c58 <HAL_SAI_Init+0x264>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d004      	beq.n	8007a6a <HAL_SAI_Init+0x76>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a7d      	ldr	r2, [pc, #500]	; (8007c5c <HAL_SAI_Init+0x268>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d102      	bne.n	8007a70 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007a6a:	4b7d      	ldr	r3, [pc, #500]	; (8007c60 <HAL_SAI_Init+0x26c>)
 8007a6c:	61bb      	str	r3, [r7, #24]
 8007a6e:	e01b      	b.n	8007aa8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a7b      	ldr	r2, [pc, #492]	; (8007c64 <HAL_SAI_Init+0x270>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d004      	beq.n	8007a84 <HAL_SAI_Init+0x90>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a7a      	ldr	r2, [pc, #488]	; (8007c68 <HAL_SAI_Init+0x274>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d102      	bne.n	8007a8a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007a84:	4b79      	ldr	r3, [pc, #484]	; (8007c6c <HAL_SAI_Init+0x278>)
 8007a86:	61bb      	str	r3, [r7, #24]
 8007a88:	e00e      	b.n	8007aa8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a6f      	ldr	r2, [pc, #444]	; (8007c4c <HAL_SAI_Init+0x258>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d004      	beq.n	8007a9e <HAL_SAI_Init+0xaa>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a75      	ldr	r2, [pc, #468]	; (8007c70 <HAL_SAI_Init+0x27c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d102      	bne.n	8007aa4 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8007a9e:	4b75      	ldr	r3, [pc, #468]	; (8007c74 <HAL_SAI_Init+0x280>)
 8007aa0:	61bb      	str	r3, [r7, #24]
 8007aa2:	e001      	b.n	8007aa8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e217      	b.n	8007ed8 <HAL_SAI_Init+0x4e4>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d106      	bne.n	8007ac2 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f008 fba3 	bl	8010208 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fd02 	bl	80084cc <SAI_Disable>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e202      	b.n	8007ed8 <HAL_SAI_Init+0x4e4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d007      	beq.n	8007af2 <HAL_SAI_Init+0xfe>
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d302      	bcc.n	8007aec <HAL_SAI_Init+0xf8>
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d006      	beq.n	8007af8 <HAL_SAI_Init+0x104>
 8007aea:	e008      	b.n	8007afe <HAL_SAI_Init+0x10a>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007af0:	e008      	b.n	8007b04 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007af2:	2310      	movs	r3, #16
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007af6:	e005      	b.n	8007b04 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007af8:	2320      	movs	r3, #32
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007afc:	e002      	b.n	8007b04 <HAL_SAI_Init+0x110>
    default:
      tmpregisterGCR = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b02:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b05      	cmp	r3, #5
 8007b0a:	d832      	bhi.n	8007b72 <HAL_SAI_Init+0x17e>
 8007b0c:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <HAL_SAI_Init+0x120>)
 8007b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b12:	bf00      	nop
 8007b14:	08007b2d 	.word	0x08007b2d
 8007b18:	08007b33 	.word	0x08007b33
 8007b1c:	08007b3b 	.word	0x08007b3b
 8007b20:	08007b43 	.word	0x08007b43
 8007b24:	08007b53 	.word	0x08007b53
 8007b28:	08007b63 	.word	0x08007b63
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61fb      	str	r3, [r7, #28]
      break;
 8007b30:	e022      	b.n	8007b78 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b36:	61fb      	str	r3, [r7, #28]
      break;
 8007b38:	e01e      	b.n	8007b78 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b3e:	61fb      	str	r3, [r7, #28]
      break;
 8007b40:	e01a      	b.n	8007b78 <HAL_SAI_Init+0x184>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b46:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	f043 0301 	orr.w	r3, r3, #1
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b50:	e012      	b.n	8007b78 <HAL_SAI_Init+0x184>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b56:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	f043 0302 	orr.w	r3, r3, #2
 8007b5e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b60:	e00a      	b.n	8007b78 <HAL_SAI_Init+0x184>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b66:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	f043 0303 	orr.w	r3, r3, #3
 8007b6e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b70:	e002      	b.n	8007b78 <HAL_SAI_Init+0x184>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	61fb      	str	r3, [r7, #28]
      break;
 8007b76:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b7c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 80a1 	beq.w	8007cca <HAL_SAI_Init+0x2d6>
  {
    uint32_t freq = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a2d      	ldr	r2, [pc, #180]	; (8007c48 <HAL_SAI_Init+0x254>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d004      	beq.n	8007ba0 <HAL_SAI_Init+0x1ac>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a2d      	ldr	r2, [pc, #180]	; (8007c50 <HAL_SAI_Init+0x25c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d104      	bne.n	8007baa <HAL_SAI_Init+0x1b6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007ba0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007ba4:	f7fe fe6c 	bl	8006880 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ba8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a2a      	ldr	r2, [pc, #168]	; (8007c58 <HAL_SAI_Init+0x264>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d004      	beq.n	8007bbe <HAL_SAI_Init+0x1ca>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a28      	ldr	r2, [pc, #160]	; (8007c5c <HAL_SAI_Init+0x268>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d104      	bne.n	8007bc8 <HAL_SAI_Init+0x1d4>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007bbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007bc2:	f7fe fe5d 	bl	8006880 <HAL_RCCEx_GetPeriphCLKFreq>
 8007bc6:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a25      	ldr	r2, [pc, #148]	; (8007c64 <HAL_SAI_Init+0x270>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d004      	beq.n	8007bdc <HAL_SAI_Init+0x1e8>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a24      	ldr	r2, [pc, #144]	; (8007c68 <HAL_SAI_Init+0x274>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d104      	bne.n	8007be6 <HAL_SAI_Init+0x1f2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8007bdc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007be0:	f7fe fe4e 	bl	8006880 <HAL_RCCEx_GetPeriphCLKFreq>
 8007be4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a18      	ldr	r2, [pc, #96]	; (8007c4c <HAL_SAI_Init+0x258>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d104      	bne.n	8007bfa <HAL_SAI_Init+0x206>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007bf0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007bf4:	f7fe fe44 	bl	8006880 <HAL_RCCEx_GetPeriphCLKFreq>
 8007bf8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a1c      	ldr	r2, [pc, #112]	; (8007c70 <HAL_SAI_Init+0x27c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d104      	bne.n	8007c0e <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007c04:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c08:	f7fe fe3a 	bl	8006880 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c0c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c16:	d10f      	bne.n	8007c38 <HAL_SAI_Init+0x244>
    {
      /* NODIV = 1 */
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	4619      	mov	r1, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007c2c:	fb02 f303 	mul.w	r3, r2, r3
 8007c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c34:	613b      	str	r3, [r7, #16]
 8007c36:	e030      	b.n	8007c9a <HAL_SAI_Init+0x2a6>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c40:	d11a      	bne.n	8007c78 <HAL_SAI_Init+0x284>
 8007c42:	2302      	movs	r3, #2
 8007c44:	e019      	b.n	8007c7a <HAL_SAI_Init+0x286>
 8007c46:	bf00      	nop
 8007c48:	40015804 	.word	0x40015804
 8007c4c:	58005404 	.word	0x58005404
 8007c50:	40015824 	.word	0x40015824
 8007c54:	40015800 	.word	0x40015800
 8007c58:	40015c04 	.word	0x40015c04
 8007c5c:	40015c24 	.word	0x40015c24
 8007c60:	40015c00 	.word	0x40015c00
 8007c64:	40016004 	.word	0x40016004
 8007c68:	40016024 	.word	0x40016024
 8007c6c:	40016000 	.word	0x40016000
 8007c70:	58005424 	.word	0x58005424
 8007c74:	58005400 	.word	0x58005400
 8007c78:	2301      	movs	r3, #1
 8007c7a:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	4619      	mov	r1, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	fb02 f303 	mul.w	r3, r2, r3
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c98:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	4a90      	ldr	r2, [pc, #576]	; (8007ee0 <HAL_SAI_Init+0x4ec>)
 8007c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca2:	08da      	lsrs	r2, r3, #3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007ca8:	6939      	ldr	r1, [r7, #16]
 8007caa:	4b8d      	ldr	r3, [pc, #564]	; (8007ee0 <HAL_SAI_Init+0x4ec>)
 8007cac:	fba3 2301 	umull	r2, r3, r3, r1
 8007cb0:	08da      	lsrs	r2, r3, #3
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	1aca      	subs	r2, r1, r3
 8007cbc:	2a08      	cmp	r2, #8
 8007cbe:	d904      	bls.n	8007cca <HAL_SAI_Init+0x2d6>
    {
      hsai->Init.Mckdiv += 1U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_SAI_Init+0x2e6>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d109      	bne.n	8007cee <HAL_SAI_Init+0x2fa>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <HAL_SAI_Init+0x2f2>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e001      	b.n	8007cea <HAL_SAI_Init+0x2f6>
 8007ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cea:	623b      	str	r3, [r7, #32]
 8007cec:	e008      	b.n	8007d00 <HAL_SAI_Init+0x30c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d102      	bne.n	8007cfc <HAL_SAI_Init+0x308>
 8007cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cfa:	e000      	b.n	8007cfe <HAL_SAI_Init+0x30a>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007d00:	f7f8 fb9e 	bl	8000440 <HAL_GetREVID>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d0a:	d331      	bcc.n	8007d70 <HAL_SAI_Init+0x37c>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6819      	ldr	r1, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	4b73      	ldr	r3, [pc, #460]	; (8007ee4 <HAL_SAI_Init+0x4f0>)
 8007d18:	400b      	ands	r3, r1
 8007d1a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6819      	ldr	r1, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d30:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d36:	431a      	orrs	r2, r3
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007d44:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d50:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	051b      	lsls	r3, r3, #20
 8007d58:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007d5e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	e02d      	b.n	8007dcc <HAL_SAI_Init+0x3d8>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4b5b      	ldr	r3, [pc, #364]	; (8007ee8 <HAL_SAI_Init+0x4f4>)
 8007d7c:	400b      	ands	r3, r1
 8007d7e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6819      	ldr	r1, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d94:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007da8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007db4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	051b      	lsls	r3, r3, #20
 8007dbc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007dc2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6859      	ldr	r1, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4b45      	ldr	r3, [pc, #276]	; (8007eec <HAL_SAI_Init+0x4f8>)
 8007dd8:	400b      	ands	r3, r1
 8007dda:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6859      	ldr	r1, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69da      	ldr	r2, [r3, #28]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dea:	431a      	orrs	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df0:	431a      	orrs	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6899      	ldr	r1, [r3, #8]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	4b3a      	ldr	r3, [pc, #232]	; (8007ef0 <HAL_SAI_Init+0x4fc>)
 8007e06:	400b      	ands	r3, r1
 8007e08:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6899      	ldr	r1, [r3, #8]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e14:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e1a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8007e20:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007e26:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007e30:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68d9      	ldr	r1, [r3, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007e48:	400b      	ands	r3, r1
 8007e4a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68d9      	ldr	r1, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e5a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e60:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e62:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a1e      	ldr	r2, [pc, #120]	; (8007ef4 <HAL_SAI_Init+0x500>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d004      	beq.n	8007e8a <HAL_SAI_Init+0x496>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a1c      	ldr	r2, [pc, #112]	; (8007ef8 <HAL_SAI_Init+0x504>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d119      	bne.n	8007ebe <HAL_SAI_Init+0x4ca>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8e:	f023 0201 	bic.w	r2, r3, #1
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d10e      	bne.n	8007ebe <HAL_SAI_Init+0x4ca>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007eac:	431a      	orrs	r2, r3
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb6:	f043 0201 	orr.w	r2, r3, #1
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3728      	adds	r7, #40	; 0x28
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	cccccccd 	.word	0xcccccccd
 8007ee4:	f005c010 	.word	0xf005c010
 8007ee8:	f805c010 	.word	0xf805c010
 8007eec:	ffff1ff0 	.word	0xffff1ff0
 8007ef0:	fff88000 	.word	0xfff88000
 8007ef4:	40015804 	.word	0x40015804
 8007ef8:	58005404 	.word	0x58005404

08007efc <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007f0a:	f7f8 fa6b 	bl	80003e4 <HAL_GetTick>
 8007f0e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <HAL_SAI_Transmit_DMA+0x20>
 8007f16:	88fb      	ldrh	r3, [r7, #6]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e098      	b.n	8008052 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	f040 8091 	bne.w	8008050 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <HAL_SAI_Transmit_DMA+0x40>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e08a      	b.n	8008052 <HAL_SAI_Transmit_DMA+0x156>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	88fa      	ldrh	r2, [r7, #6]
 8007f4e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	88fa      	ldrh	r2, [r7, #6]
 8007f56:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2212      	movs	r2, #18
 8007f66:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f70:	4a3a      	ldr	r2, [pc, #232]	; (800805c <HAL_SAI_Transmit_DMA+0x160>)
 8007f72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f7a:	4a39      	ldr	r2, [pc, #228]	; (8008060 <HAL_SAI_Transmit_DMA+0x164>)
 8007f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f84:	4a37      	ldr	r2, [pc, #220]	; (8008064 <HAL_SAI_Transmit_DMA+0x168>)
 8007f86:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f8e:	2200      	movs	r2, #0
 8007f90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	331c      	adds	r3, #28
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007fac:	f7fa fb4a 	bl	8002644 <HAL_DMA_Start_IT>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d005      	beq.n	8007fc2 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e047      	b.n	8008052 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 fa49 	bl	800845c <SAI_InterruptFlag>
 8007fca:	4601      	mov	r1, r0
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	691a      	ldr	r2, [r3, #16]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007fe8:	601a      	str	r2, [r3, #0]

    /* Wait untill FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007fea:	e015      	b.n	8008018 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007fec:	f7f8 f9fa 	bl	80003e4 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ffa:	d90d      	bls.n	8008018 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e01c      	b.n	8008052 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0e2      	beq.n	8007fec <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d107      	bne.n	8008044 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008042:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	e000      	b.n	8008052 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8008050:	2302      	movs	r3, #2
  }
}
 8008052:	4618      	mov	r0, r3
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	08008595 	.word	0x08008595
 8008060:	08008535 	.word	0x08008535
 8008064:	0800862d 	.word	0x0800862d

08008068 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <HAL_SAI_Receive_DMA+0x1a>
 800807c:	88fb      	ldrh	r3, [r7, #6]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e079      	b.n	800817a <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b01      	cmp	r3, #1
 8008090:	d172      	bne.n	8008178 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008098:	2b01      	cmp	r3, #1
 800809a:	d101      	bne.n	80080a0 <HAL_SAI_Receive_DMA+0x38>
 800809c:	2302      	movs	r3, #2
 800809e:	e06c      	b.n	800817a <HAL_SAI_Receive_DMA+0x112>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	88fa      	ldrh	r2, [r7, #6]
 80080b2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	88fa      	ldrh	r2, [r7, #6]
 80080ba:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2222      	movs	r2, #34	; 0x22
 80080ca:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d4:	4a2b      	ldr	r2, [pc, #172]	; (8008184 <HAL_SAI_Receive_DMA+0x11c>)
 80080d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080de:	4a2a      	ldr	r2, [pc, #168]	; (8008188 <HAL_SAI_Receive_DMA+0x120>)
 80080e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080e8:	4a28      	ldr	r2, [pc, #160]	; (800818c <HAL_SAI_Receive_DMA+0x124>)
 80080ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f2:	2200      	movs	r2, #0
 80080f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	331c      	adds	r3, #28
 8008102:	4619      	mov	r1, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008108:	461a      	mov	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8008110:	f7fa fa98 	bl	8002644 <HAL_DMA_Start_IT>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e029      	b.n	800817a <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008126:	2100      	movs	r1, #0
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 f997 	bl	800845c <SAI_InterruptFlag>
 800812e:	4601      	mov	r1, r0
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691a      	ldr	r2, [r3, #16]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800814c:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d107      	bne.n	800816c <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800816a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	e000      	b.n	800817a <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008178:	2302      	movs	r3, #2
  }
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	08008611 	.word	0x08008611
 8008188:	080085b1 	.word	0x080085b1
 800818c:	0800862d 	.word	0x0800862d

08008190 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
 8008200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <SAI_InitI2S+0x2e>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2b02      	cmp	r3, #2
 8008220:	d103      	bne.n	800822a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	651a      	str	r2, [r3, #80]	; 0x50
 8008228:	e002      	b.n	8008230 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2201      	movs	r2, #1
 800822e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008236:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800823e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e077      	b.n	800834a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d107      	bne.n	8008270 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800826c:	665a      	str	r2, [r3, #100]	; 0x64
 800826e:	e006      	b.n	800827e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008276:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b03      	cmp	r3, #3
 8008282:	d84f      	bhi.n	8008324 <SAI_InitI2S+0x130>
 8008284:	a201      	add	r2, pc, #4	; (adr r2, 800828c <SAI_InitI2S+0x98>)
 8008286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828a:	bf00      	nop
 800828c:	0800829d 	.word	0x0800829d
 8008290:	080082bf 	.word	0x080082bf
 8008294:	080082e1 	.word	0x080082e1
 8008298:	08008303 	.word	0x08008303
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2280      	movs	r2, #128	; 0x80
 80082a0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	085b      	lsrs	r3, r3, #1
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	085b      	lsrs	r3, r3, #1
 80082b0:	011a      	lsls	r2, r3, #4
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2240      	movs	r2, #64	; 0x40
 80082ba:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80082bc:	e035      	b.n	800832a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2280      	movs	r2, #128	; 0x80
 80082c2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	085b      	lsrs	r3, r3, #1
 80082c8:	019a      	lsls	r2, r3, #6
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	085b      	lsrs	r3, r3, #1
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2280      	movs	r2, #128	; 0x80
 80082dc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80082de:	e024      	b.n	800832a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	22c0      	movs	r2, #192	; 0xc0
 80082e4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	085b      	lsrs	r3, r3, #1
 80082ea:	019a      	lsls	r2, r3, #6
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	085b      	lsrs	r3, r3, #1
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2280      	movs	r2, #128	; 0x80
 80082fe:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008300:	e013      	b.n	800832a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	22e0      	movs	r2, #224	; 0xe0
 8008306:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	085b      	lsrs	r3, r3, #1
 800830c:	019a      	lsls	r2, r3, #6
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	085b      	lsrs	r3, r3, #1
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2280      	movs	r2, #128	; 0x80
 8008320:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008322:	e002      	b.n	800832a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	75fb      	strb	r3, [r7, #23]
      break;
 8008328:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b02      	cmp	r3, #2
 800832e:	d10b      	bne.n	8008348 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d102      	bne.n	800833c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2210      	movs	r2, #16
 800833a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b02      	cmp	r3, #2
 8008340:	d102      	bne.n	8008348 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2208      	movs	r2, #8
 8008346:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8008348:	7dfb      	ldrb	r3, [r7, #23]
}
 800834a:	4618      	mov	r0, r3
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop

08008358 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <SAI_InitPCM+0x2e>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b02      	cmp	r3, #2
 8008384:	d103      	bne.n	800838e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2201      	movs	r2, #1
 800838a:	651a      	str	r2, [r3, #80]	; 0x50
 800838c:	e002      	b.n	8008394 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80083a0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80083a8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083bc:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d103      	bne.n	80083cc <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2201      	movs	r2, #1
 80083c8:	659a      	str	r2, [r3, #88]	; 0x58
 80083ca:	e002      	b.n	80083d2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	220d      	movs	r2, #13
 80083d0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d837      	bhi.n	8008448 <SAI_InitPCM+0xf0>
 80083d8:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <SAI_InitPCM+0x88>)
 80083da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083de:	bf00      	nop
 80083e0:	080083f1 	.word	0x080083f1
 80083e4:	08008407 	.word	0x08008407
 80083e8:	0800841d 	.word	0x0800841d
 80083ec:	08008433 	.word	0x08008433
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2280      	movs	r2, #128	; 0x80
 80083f4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	011a      	lsls	r2, r3, #4
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2240      	movs	r2, #64	; 0x40
 8008402:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008404:	e023      	b.n	800844e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2280      	movs	r2, #128	; 0x80
 800840a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2280      	movs	r2, #128	; 0x80
 8008418:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800841a:	e018      	b.n	800844e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	22c0      	movs	r2, #192	; 0xc0
 8008420:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2280      	movs	r2, #128	; 0x80
 800842e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008430:	e00d      	b.n	800844e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	22e0      	movs	r2, #224	; 0xe0
 8008436:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2280      	movs	r2, #128	; 0x80
 8008444:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008446:	e002      	b.n	800844e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	75fb      	strb	r3, [r7, #23]
      break;
 800844c:	bf00      	nop
  }

  return status;
 800844e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008450:	4618      	mov	r0, r3
 8008452:	371c      	adds	r7, #28
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	460b      	mov	r3, r1
 8008466:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008468:	2301      	movs	r3, #1
 800846a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800846c:	78fb      	ldrb	r3, [r7, #3]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d103      	bne.n	800847a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f043 0308 	orr.w	r3, r3, #8
 8008478:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800847e:	2b08      	cmp	r3, #8
 8008480:	d10b      	bne.n	800849a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008486:	2b03      	cmp	r3, #3
 8008488:	d003      	beq.n	8008492 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d103      	bne.n	800849a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f043 0310 	orr.w	r3, r3, #16
 8008498:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d003      	beq.n	80084aa <SAI_InterruptFlag+0x4e>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d104      	bne.n	80084b4 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	e003      	b.n	80084bc <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f043 0304 	orr.w	r3, r3, #4
 80084ba:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80084bc:	68fb      	ldr	r3, [r7, #12]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
	...

080084cc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80084cc:	b490      	push	{r4, r7}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80084d4:	4b15      	ldr	r3, [pc, #84]	; (800852c <SAI_Disable+0x60>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a15      	ldr	r2, [pc, #84]	; (8008530 <SAI_Disable+0x64>)
 80084da:	fba2 2303 	umull	r2, r3, r2, r3
 80084de:	0b1b      	lsrs	r3, r3, #12
 80084e0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80084f4:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80084f6:	2c00      	cmp	r4, #0
 80084f8:	d10a      	bne.n	8008510 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008500:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	73fb      	strb	r3, [r7, #15]
      break;
 800850e:	e007      	b.n	8008520 <SAI_Disable+0x54>
    }
    count--;
 8008510:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1ea      	bne.n	80084f6 <SAI_Disable+0x2a>

  return status;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bc90      	pop	{r4, r7}
 800852a:	4770      	bx	lr
 800852c:	20000010 	.word	0x20000010
 8008530:	95cbec1b 	.word	0x95cbec1b

08008534 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854a:	d01c      	beq.n	8008586 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008562:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008564:	2100      	movs	r1, #0
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f7ff ff78 	bl	800845c <SAI_InterruptFlag>
 800856c:	4603      	mov	r3, r0
 800856e:	43d9      	mvns	r1, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	691a      	ldr	r2, [r3, #16]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	400a      	ands	r2, r1
 800857c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f7ff fe02 	bl	8008190 <HAL_SAI_TxCpltCallback>
#endif
}
 800858c:	bf00      	nop
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7ff fdfe 	bl	80081a4 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80085a8:	bf00      	nop
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c6:	d01c      	beq.n	8008602 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80085d6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80085e0:	2100      	movs	r1, #0
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff ff3a 	bl	800845c <SAI_InterruptFlag>
 80085e8:	4603      	mov	r3, r0
 80085ea:	43d9      	mvns	r1, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691a      	ldr	r2, [r3, #16]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	400a      	ands	r2, r1
 80085f8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f7ff fdd8 	bl	80081b8 <HAL_SAI_RxCpltCallback>
#endif
}
 8008608:	bf00      	nop
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f7ff fdd4 	bl	80081cc <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008624:	bf00      	nop
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7fb fbda 	bl	8003df4 <HAL_DMA_GetError>
 8008640:	4603      	mov	r3, r0
 8008642:	2b02      	cmp	r3, #2
 8008644:	d01d      	beq.n	8008682 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800864c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008664:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f7ff ff30 	bl	80084cc <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff fdaf 	bl	80081e0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8008682:	bf00      	nop
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b08a      	sub	sp, #40	; 0x28
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e07c      	b.n	8008796 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10c      	bne.n	80086c2 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d102      	bne.n	80086bc <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2202      	movs	r2, #2
 80086ba:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f007 ffa1 	bl	8010604 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2203      	movs	r2, #3
 80086c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f868 	bl	80087a0 <HAL_SD_InitCard>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e05d      	b.n	8008796 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80086da:	f107 0308 	add.w	r3, r7, #8
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 ff79 	bl	80095d8 <HAL_SD_GetCardStatus>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e052      	b.n	8008796 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80086f0:	7e3b      	ldrb	r3, [r7, #24]
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80086f6:	7e7b      	ldrb	r3, [r7, #25]
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008700:	2b01      	cmp	r3, #1
 8008702:	d10a      	bne.n	800871a <HAL_SD_Init+0x90>
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	2b00      	cmp	r3, #0
 8008708:	d102      	bne.n	8008710 <HAL_SD_Init+0x86>
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d004      	beq.n	800871a <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008716:	65da      	str	r2, [r3, #92]	; 0x5c
 8008718:	e00b      	b.n	8008732 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871e:	2b01      	cmp	r3, #1
 8008720:	d104      	bne.n	800872c <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008728:	65da      	str	r2, [r3, #92]	; 0x5c
 800872a:	e002      	b.n	8008732 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 f82f 	bl	800979c <HAL_SD_ConfigWideBusOperation>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e026      	b.n	8008796 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008748:	f7f7 fe4c 	bl	80003e4 <HAL_GetTick>
 800874c:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800874e:	e011      	b.n	8008774 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008750:	f7f7 fe48 	bl	80003e4 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800875e:	d109      	bne.n	8008774 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008766:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e010      	b.n	8008796 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f001 f8bb 	bl	80098f0 <HAL_SD_GetCardState>
 800877a:	4603      	mov	r3, r0
 800877c:	2b04      	cmp	r3, #4
 800877e:	d1e7      	bne.n	8008750 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3728      	adds	r7, #40	; 0x28
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80087a0:	b5b0      	push	{r4, r5, r7, lr}
 80087a2:	b08e      	sub	sp, #56	; 0x38
 80087a4:	af04      	add	r7, sp, #16
 80087a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80087a8:	2300      	movs	r3, #0
 80087aa:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80087b0:	2300      	movs	r3, #0
 80087b2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80087b4:	2300      	movs	r3, #0
 80087b6:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80087b8:	23fa      	movs	r3, #250	; 0xfa
 80087ba:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d107      	bne.n	80087d4 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0210 	orr.w	r2, r2, #16
 80087d2:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681d      	ldr	r5, [r3, #0]
 80087d8:	466c      	mov	r4, sp
 80087da:	f107 0314 	add.w	r3, r7, #20
 80087de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80087e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80087e6:	f107 0308 	add.w	r3, r7, #8
 80087ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087ec:	4628      	mov	r0, r5
 80087ee:	f002 fd53 	bl	800b298 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f002 fd96 	bl	800b328 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 80087fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008800:	f7fe f83e 	bl	8006880 <HAL_RCCEx_GetPeriphCLKFreq>
 8008804:	4602      	mov	r2, r0
 8008806:	4b2d      	ldr	r3, [pc, #180]	; (80088bc <HAL_SD_InitCard+0x11c>)
 8008808:	fba3 2302 	umull	r2, r3, r3, r2
 800880c:	095b      	lsrs	r3, r3, #5
 800880e:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	2b00      	cmp	r3, #0
 8008814:	d008      	beq.n	8008828 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008816:	4a2a      	ldr	r2, [pc, #168]	; (80088c0 <HAL_SD_InitCard+0x120>)
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	fbb2 f3f3 	udiv	r3, r2, r3
 800881e:	3301      	adds	r3, #1
 8008820:	4618      	mov	r0, r3
 8008822:	f7f7 fdeb 	bl	80003fc <HAL_Delay>
 8008826:	e002      	b.n	800882e <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 8008828:	2002      	movs	r0, #2
 800882a:	f7f7 fde7 	bl	80003fc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 f93c 	bl	8009aac <SD_PowerON>
 8008834:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00b      	beq.n	8008854 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	431a      	orrs	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e02e      	b.n	80088b2 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f001 f86b 	bl	8009930 <SD_InitCard>
 800885a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	431a      	orrs	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e01b      	b.n	80088b2 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008882:	4618      	mov	r0, r3
 8008884:	f002 fde6 	bl	800b454 <SDMMC_CmdBlockLength>
 8008888:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00f      	beq.n	80088b0 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a0b      	ldr	r2, [pc, #44]	; (80088c4 <HAL_SD_InitCard+0x124>)
 8008896:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e000      	b.n	80088b2 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3728      	adds	r7, #40	; 0x28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bdb0      	pop	{r4, r5, r7, pc}
 80088ba:	bf00      	nop
 80088bc:	10624dd3 	.word	0x10624dd3
 80088c0:	00012110 	.word	0x00012110
 80088c4:	1fe00fff 	.word	0x1fe00fff

080088c8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b092      	sub	sp, #72	; 0x48
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088d6:	f7f7 fd85 	bl	80003e4 <HAL_GetTick>
 80088da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d107      	bne.n	80088fa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e167      	b.n	8008bca <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b01      	cmp	r3, #1
 8008904:	f040 815a 	bne.w	8008bbc <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800890e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	441a      	add	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008918:	429a      	cmp	r2, r3
 800891a:	d907      	bls.n	800892c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008920:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e14e      	b.n	8008bca <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2203      	movs	r2, #3
 8008930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2200      	movs	r2, #0
 800893a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008940:	2b01      	cmp	r3, #1
 8008942:	d002      	beq.n	800894a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	025b      	lsls	r3, r3, #9
 8008948:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800894a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800894e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	025b      	lsls	r3, r3, #9
 8008954:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008956:	2390      	movs	r3, #144	; 0x90
 8008958:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800895a:	2302      	movs	r3, #2
 800895c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800895e:	2300      	movs	r3, #0
 8008960:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008962:	2300      	movs	r3, #0
 8008964:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f107 0214 	add.w	r2, r7, #20
 800896e:	4611      	mov	r1, r2
 8008970:	4618      	mov	r0, r3
 8008972:	f002 fd43 	bl	800b3fc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008984:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d90a      	bls.n	80089a2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2202      	movs	r2, #2
 8008990:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008998:	4618      	mov	r0, r3
 800899a:	f002 fda1 	bl	800b4e0 <SDMMC_CmdReadMultiBlock>
 800899e:	6478      	str	r0, [r7, #68]	; 0x44
 80089a0:	e009      	b.n	80089b6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2201      	movs	r2, #1
 80089a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089ae:	4618      	mov	r0, r3
 80089b0:	f002 fd73 	bl	800b49a <SDMMC_CmdReadSingleBlock>
 80089b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80089b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d012      	beq.n	80089e2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a84      	ldr	r2, [pc, #528]	; (8008bd4 <HAL_SD_ReadBlocks+0x30c>)
 80089c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ca:	431a      	orrs	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e0f3      	b.n	8008bca <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80089e6:	e058      	b.n	8008a9a <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d033      	beq.n	8008a5e <HAL_SD_ReadBlocks+0x196>
 80089f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f8:	2b1f      	cmp	r3, #31
 80089fa:	d930      	bls.n	8008a5e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80089fc:	2300      	movs	r3, #0
 80089fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008a00:	e027      	b.n	8008a52 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f002 fc70 	bl	800b2ec <SDMMC_ReadFIFO>
 8008a0c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a14:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a18:	3301      	adds	r3, #1
 8008a1a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1e:	0a1b      	lsrs	r3, r3, #8
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a28:	3301      	adds	r3, #1
 8008a2a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2e:	0c1b      	lsrs	r3, r3, #16
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a34:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a38:	3301      	adds	r3, #1
 8008a3a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3e:	0e1b      	lsrs	r3, r3, #24
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a44:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a48:	3301      	adds	r3, #1
 8008a4a:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8008a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a4e:	3301      	adds	r3, #1
 8008a50:	643b      	str	r3, [r7, #64]	; 0x40
 8008a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a54:	2b07      	cmp	r3, #7
 8008a56:	d9d4      	bls.n	8008a02 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5a:	3b20      	subs	r3, #32
 8008a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008a5e:	f7f7 fcc1 	bl	80003e4 <HAL_GetTick>
 8008a62:	4602      	mov	r2, r0
 8008a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d902      	bls.n	8008a74 <HAL_SD_ReadBlocks+0x1ac>
 8008a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d112      	bne.n	8008a9a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a56      	ldr	r2, [pc, #344]	; (8008bd4 <HAL_SD_ReadBlocks+0x30c>)
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e097      	b.n	8008bca <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d09f      	beq.n	80089e8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68da      	ldr	r2, [r3, #12]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ab6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d022      	beq.n	8008b0c <HAL_SD_ReadBlocks+0x244>
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d91f      	bls.n	8008b0c <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	d01b      	beq.n	8008b0c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f002 fd6b 	bl	800b5b4 <SDMMC_CmdStopTransfer>
 8008ade:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d012      	beq.n	8008b0c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a3a      	ldr	r2, [pc, #232]	; (8008bd4 <HAL_SD_ReadBlocks+0x30c>)
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af4:	431a      	orrs	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e05e      	b.n	8008bca <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b12:	f003 0308 	and.w	r3, r3, #8
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d012      	beq.n	8008b40 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a2d      	ldr	r2, [pc, #180]	; (8008bd4 <HAL_SD_ReadBlocks+0x30c>)
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b26:	f043 0208 	orr.w	r2, r3, #8
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e044      	b.n	8008bca <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d012      	beq.n	8008b74 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a20      	ldr	r2, [pc, #128]	; (8008bd4 <HAL_SD_ReadBlocks+0x30c>)
 8008b54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5a:	f043 0202 	orr.w	r2, r3, #2
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e02a      	b.n	8008bca <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7a:	f003 0320 	and.w	r3, r3, #32
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d012      	beq.n	8008ba8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a13      	ldr	r2, [pc, #76]	; (8008bd4 <HAL_SD_ReadBlocks+0x30c>)
 8008b88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8e:	f043 0220 	orr.w	r2, r3, #32
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e010      	b.n	8008bca <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a0a      	ldr	r2, [pc, #40]	; (8008bd8 <HAL_SD_ReadBlocks+0x310>)
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e006      	b.n	8008bca <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
  }
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3748      	adds	r7, #72	; 0x48
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	1fe00fff 	.word	0x1fe00fff
 8008bd8:	18000f3a 	.word	0x18000f3a

08008bdc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b092      	sub	sp, #72	; 0x48
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008bea:	f7f7 fbfb 	bl	80003e4 <HAL_GetTick>
 8008bee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d107      	bne.n	8008c0e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e16b      	b.n	8008ee6 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	f040 815e 	bne.w	8008ed8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	441a      	add	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d907      	bls.n	8008c40 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e152      	b.n	8008ee6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2203      	movs	r2, #3
 8008c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d002      	beq.n	8008c5e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5a:	025b      	lsls	r3, r3, #9
 8008c5c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c62:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	025b      	lsls	r3, r3, #9
 8008c68:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008c6a:	2390      	movs	r3, #144	; 0x90
 8008c6c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008c76:	2300      	movs	r3, #0
 8008c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f107 0218 	add.w	r2, r7, #24
 8008c82:	4611      	mov	r1, r2
 8008c84:	4618      	mov	r0, r3
 8008c86:	f002 fbb9 	bl	800b3fc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68da      	ldr	r2, [r3, #12]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c98:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d90a      	bls.n	8008cb6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cac:	4618      	mov	r0, r3
 8008cae:	f002 fc5d 	bl	800b56c <SDMMC_CmdWriteMultiBlock>
 8008cb2:	6478      	str	r0, [r7, #68]	; 0x44
 8008cb4:	e009      	b.n	8008cca <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2210      	movs	r2, #16
 8008cba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f002 fc2f 	bl	800b526 <SDMMC_CmdWriteSingleBlock>
 8008cc8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d012      	beq.n	8008cf6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a86      	ldr	r2, [pc, #536]	; (8008ef0 <HAL_SD_WriteBlocks+0x314>)
 8008cd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cde:	431a      	orrs	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e0f7      	b.n	8008ee6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008cfa:	e05c      	b.n	8008db6 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d037      	beq.n	8008d7a <HAL_SD_WriteBlocks+0x19e>
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0c:	2b1f      	cmp	r3, #31
 8008d0e:	d934      	bls.n	8008d7a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008d10:	2300      	movs	r3, #0
 8008d12:	643b      	str	r3, [r7, #64]	; 0x40
 8008d14:	e02b      	b.n	8008d6e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1e:	3301      	adds	r3, #1
 8008d20:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	021a      	lsls	r2, r3, #8
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d30:	3301      	adds	r3, #1
 8008d32:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	041a      	lsls	r2, r3, #16
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d42:	3301      	adds	r3, #1
 8008d44:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	061a      	lsls	r2, r3, #24
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d54:	3301      	adds	r3, #1
 8008d56:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f107 0214 	add.w	r2, r7, #20
 8008d60:	4611      	mov	r1, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f002 facf 	bl	800b306 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8008d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d70:	2b07      	cmp	r3, #7
 8008d72:	d9d0      	bls.n	8008d16 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d76:	3b20      	subs	r3, #32
 8008d78:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008d7a:	f7f7 fb33 	bl	80003e4 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d902      	bls.n	8008d90 <HAL_SD_WriteBlocks+0x1b4>
 8008d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d112      	bne.n	8008db6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a56      	ldr	r2, [pc, #344]	; (8008ef0 <HAL_SD_WriteBlocks+0x314>)
 8008d96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d9e:	431a      	orrs	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e097      	b.n	8008ee6 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbc:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d09b      	beq.n	8008cfc <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dd2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d022      	beq.n	8008e28 <HAL_SD_WriteBlocks+0x24c>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d91f      	bls.n	8008e28 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d01b      	beq.n	8008e28 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f002 fbdd 	bl	800b5b4 <SDMMC_CmdStopTransfer>
 8008dfa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d012      	beq.n	8008e28 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a3a      	ldr	r2, [pc, #232]	; (8008ef0 <HAL_SD_WriteBlocks+0x314>)
 8008e08:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e10:	431a      	orrs	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e05e      	b.n	8008ee6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e2e:	f003 0308 	and.w	r3, r3, #8
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d012      	beq.n	8008e5c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a2d      	ldr	r2, [pc, #180]	; (8008ef0 <HAL_SD_WriteBlocks+0x314>)
 8008e3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	f043 0208 	orr.w	r2, r3, #8
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e044      	b.n	8008ee6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d012      	beq.n	8008e90 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a20      	ldr	r2, [pc, #128]	; (8008ef0 <HAL_SD_WriteBlocks+0x314>)
 8008e70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	f043 0202 	orr.w	r2, r3, #2
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e02a      	b.n	8008ee6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e96:	f003 0310 	and.w	r3, r3, #16
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d012      	beq.n	8008ec4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a13      	ldr	r2, [pc, #76]	; (8008ef0 <HAL_SD_WriteBlocks+0x314>)
 8008ea4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eaa:	f043 0210 	orr.w	r2, r3, #16
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e010      	b.n	8008ee6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a0a      	ldr	r2, [pc, #40]	; (8008ef4 <HAL_SD_WriteBlocks+0x318>)
 8008eca:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	e006      	b.n	8008ee6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
  }
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3748      	adds	r7, #72	; 0x48
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	1fe00fff 	.word	0x1fe00fff
 8008ef4:	18000f3a 	.word	0x18000f3a

08008ef8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f04:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d008      	beq.n	8008f26 <HAL_SD_IRQHandler+0x2e>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f003 0308 	and.w	r3, r3, #8
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 f92a 	bl	800a178 <SD_Read_IT>
 8008f24:	e19a      	b.n	800925c <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 80ac 	beq.w	800908e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f3e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	4b9d      	ldr	r3, [pc, #628]	; (80091c0 <HAL_SD_IRQHandler+0x2c8>)
 8008f4c:	400b      	ands	r3, r1
 8008f4e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008f5e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f6e:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f003 0308 	and.w	r3, r3, #8
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d038      	beq.n	8008fec <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f003 0302 	and.w	r3, r3, #2
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d104      	bne.n	8008f8e <HAL_SD_IRQHandler+0x96>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f003 0320 	and.w	r3, r3, #32
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d011      	beq.n	8008fb2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f002 fb0e 	bl	800b5b4 <SDMMC_CmdStopTransfer>
 8008f98:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d008      	beq.n	8008fb2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f959 	bl	8009264 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a83      	ldr	r2, [pc, #524]	; (80091c4 <HAL_SD_IRQHandler+0x2cc>)
 8008fb8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d104      	bne.n	8008fdc <HAL_SD_IRQHandler+0xe4>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d003      	beq.n	8008fe4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f005 ffdf 	bl	800efa0 <HAL_SD_RxCpltCallback>
 8008fe2:	e13b      	b.n	800925c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f005 ffd1 	bl	800ef8c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008fea:	e137      	b.n	800925c <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 8132 	beq.w	800925c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2200      	movs	r2, #0
 8009006:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2200      	movs	r2, #0
 800900e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d104      	bne.n	8009024 <HAL_SD_IRQHandler+0x12c>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	d011      	beq.n	8009048 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	f002 fac3 	bl	800b5b4 <SDMMC_CmdStopTransfer>
 800902e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d008      	beq.n	8009048 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	431a      	orrs	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f90e 	bl	8009264 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f003 0310 	and.w	r3, r3, #16
 800905c:	2b00      	cmp	r3, #0
 800905e:	d104      	bne.n	800906a <HAL_SD_IRQHandler+0x172>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f003 0320 	and.w	r3, r3, #32
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f005 ff8e 	bl	800ef8c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d105      	bne.n	8009086 <HAL_SD_IRQHandler+0x18e>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f003 0302 	and.w	r3, r3, #2
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 80eb 	beq.w	800925c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f005 ff8a 	bl	800efa0 <HAL_SD_RxCpltCallback>
}
 800908c:	e0e6      	b.n	800925c <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d008      	beq.n	80090ae <HAL_SD_IRQHandler+0x1b6>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f003 0308 	and.w	r3, r3, #8
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f001 f8ac 	bl	800a204 <SD_Write_IT>
 80090ac:	e0d6      	b.n	800925c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 80a2 	beq.w	8009202 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d0:	f043 0202 	orr.w	r2, r3, #2
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090de:	f003 0308 	and.w	r3, r3, #8
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d005      	beq.n	80090f2 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ea:	f043 0208 	orr.w	r2, r3, #8
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d005      	beq.n	800910c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009104:	f043 0220 	orr.w	r2, r3, #32
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009112:	f003 0310 	and.w	r3, r3, #16
 8009116:	2b00      	cmp	r3, #0
 8009118:	d005      	beq.n	8009126 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	f043 0210 	orr.w	r2, r3, #16
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a26      	ldr	r2, [pc, #152]	; (80091c4 <HAL_SD_IRQHandler+0x2cc>)
 800912c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800913c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68da      	ldr	r2, [r3, #12]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800914c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800915c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800916c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4618      	mov	r0, r3
 8009174:	f002 fa1e 	bl	800b5b4 <SDMMC_CmdStopTransfer>
 8009178:	4602      	mov	r2, r0
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	431a      	orrs	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68da      	ldr	r2, [r3, #12]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009192:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800919c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f003 0308 	and.w	r3, r3, #8
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00f      	beq.n	80091c8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f854 	bl	8009264 <HAL_SD_ErrorCallback>
}
 80091bc:	e04e      	b.n	800925c <HAL_SD_IRQHandler+0x364>
 80091be:	bf00      	nop
 80091c0:	ffff3ec5 	.word	0xffff3ec5
 80091c4:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d044      	beq.n	800925c <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d040      	beq.n	800925c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80091e8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2200      	movs	r2, #0
 80091f0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f832 	bl	8009264 <HAL_SD_ErrorCallback>
}
 8009200:	e02c      	b.n	800925c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d025      	beq.n	800925c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009218:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10c      	bne.n	8009242 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f003 0320 	and.w	r3, r3, #32
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 f84e 	bl	800a2d4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009238:	e010      	b.n	800925c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f001 f836 	bl	800a2ac <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009240:	e00c      	b.n	800925c <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f003 0320 	and.w	r3, r3, #32
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f001 f837 	bl	800a2c0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009252:	e003      	b.n	800925c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 f81f 	bl	800a298 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800925a:	e7ff      	b.n	800925c <HAL_SD_IRQHandler+0x364>
 800925c:	bf00      	nop
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
	...

08009290 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800929e:	0f9b      	lsrs	r3, r3, #30
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092aa:	0e9b      	lsrs	r3, r3, #26
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	f003 030f 	and.w	r3, r3, #15
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092bc:	0e1b      	lsrs	r3, r3, #24
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	f003 0303 	and.w	r3, r3, #3
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ce:	0c1b      	lsrs	r3, r3, #16
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092da:	0a1b      	lsrs	r3, r3, #8
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f0:	0d1b      	lsrs	r3, r3, #20
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092fc:	0c1b      	lsrs	r3, r3, #16
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	f003 030f 	and.w	r3, r3, #15
 8009304:	b2da      	uxtb	r2, r3
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800930e:	0bdb      	lsrs	r3, r3, #15
 8009310:	b2db      	uxtb	r3, r3
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	b2da      	uxtb	r2, r3
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009320:	0b9b      	lsrs	r3, r3, #14
 8009322:	b2db      	uxtb	r3, r3
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	b2da      	uxtb	r2, r3
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009332:	0b5b      	lsrs	r3, r3, #13
 8009334:	b2db      	uxtb	r3, r3
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	b2da      	uxtb	r2, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009344:	0b1b      	lsrs	r3, r3, #12
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	b2da      	uxtb	r2, r3
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	2200      	movs	r2, #0
 8009356:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800935c:	2b00      	cmp	r3, #0
 800935e:	d163      	bne.n	8009428 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009364:	009a      	lsls	r2, r3, #2
 8009366:	f640 73fc 	movw	r3, #4092	; 0xffc
 800936a:	4013      	ands	r3, r2
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009370:	0f92      	lsrs	r2, r2, #30
 8009372:	431a      	orrs	r2, r3
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800937c:	0edb      	lsrs	r3, r3, #27
 800937e:	b2db      	uxtb	r3, r3
 8009380:	f003 0307 	and.w	r3, r3, #7
 8009384:	b2da      	uxtb	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800938e:	0e1b      	lsrs	r3, r3, #24
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	b2da      	uxtb	r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093a0:	0d5b      	lsrs	r3, r3, #21
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	f003 0307 	and.w	r3, r3, #7
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093b2:	0c9b      	lsrs	r3, r3, #18
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	f003 0307 	and.w	r3, r3, #7
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093c4:	0bdb      	lsrs	r3, r3, #15
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	f003 0307 	and.w	r3, r3, #7
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	7e1b      	ldrb	r3, [r3, #24]
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	f003 0307 	and.w	r3, r3, #7
 80093e6:	3302      	adds	r3, #2
 80093e8:	2201      	movs	r2, #1
 80093ea:	fa02 f303 	lsl.w	r3, r2, r3
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80093f2:	fb02 f203 	mul.w	r2, r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	7a1b      	ldrb	r3, [r3, #8]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	f003 030f 	and.w	r3, r3, #15
 8009404:	2201      	movs	r2, #1
 8009406:	409a      	lsls	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009414:	0a52      	lsrs	r2, r2, #9
 8009416:	fb02 f203 	mul.w	r2, r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009424:	659a      	str	r2, [r3, #88]	; 0x58
 8009426:	e031      	b.n	800948c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800942c:	2b01      	cmp	r3, #1
 800942e:	d11d      	bne.n	800946c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009434:	041b      	lsls	r3, r3, #16
 8009436:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800943e:	0c1b      	lsrs	r3, r3, #16
 8009440:	431a      	orrs	r2, r3
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	3301      	adds	r3, #1
 800944c:	029a      	lsls	r2, r3, #10
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009460:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	659a      	str	r2, [r3, #88]	; 0x58
 800946a:	e00f      	b.n	800948c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a58      	ldr	r2, [pc, #352]	; (80095d4 <HAL_SD_GetCardCSD+0x344>)
 8009472:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e09d      	b.n	80095c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009490:	0b9b      	lsrs	r3, r3, #14
 8009492:	b2db      	uxtb	r3, r3
 8009494:	f003 0301 	and.w	r3, r3, #1
 8009498:	b2da      	uxtb	r2, r3
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094a2:	09db      	lsrs	r3, r3, #7
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c4:	0fdb      	lsrs	r3, r3, #31
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094d0:	0f5b      	lsrs	r3, r3, #29
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	f003 0303 	and.w	r3, r3, #3
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094e2:	0e9b      	lsrs	r3, r3, #26
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	f003 0307 	and.w	r3, r3, #7
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f4:	0d9b      	lsrs	r3, r3, #22
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	f003 030f 	and.w	r3, r3, #15
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009506:	0d5b      	lsrs	r3, r3, #21
 8009508:	b2db      	uxtb	r3, r3
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	b2da      	uxtb	r2, r3
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009522:	0c1b      	lsrs	r3, r3, #16
 8009524:	b2db      	uxtb	r3, r3
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	b2da      	uxtb	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009536:	0bdb      	lsrs	r3, r3, #15
 8009538:	b2db      	uxtb	r3, r3
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	b2da      	uxtb	r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800954a:	0b9b      	lsrs	r3, r3, #14
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	b2da      	uxtb	r2, r3
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800955e:	0b5b      	lsrs	r3, r3, #13
 8009560:	b2db      	uxtb	r3, r3
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	b2da      	uxtb	r2, r3
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009572:	0b1b      	lsrs	r3, r3, #12
 8009574:	b2db      	uxtb	r3, r3
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	b2da      	uxtb	r2, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009586:	0a9b      	lsrs	r3, r3, #10
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 0303 	and.w	r3, r3, #3
 800958e:	b2da      	uxtb	r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800959a:	0a1b      	lsrs	r3, r3, #8
 800959c:	b2db      	uxtb	r3, r3
 800959e:	f003 0303 	and.w	r3, r3, #3
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ae:	085b      	lsrs	r3, r3, #1
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	1fe00fff 	.word	0x1fe00fff

080095d8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b094      	sub	sp, #80	; 0x50
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80095e8:	f107 0308 	add.w	r3, r7, #8
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fb64 	bl	8009cbc <SD_SendSDStatus>
 80095f4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80095f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d011      	beq.n	8009620 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a4f      	ldr	r2, [pc, #316]	; (8009740 <HAL_SD_GetCardStatus+0x168>)
 8009602:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800960a:	431a      	orrs	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800961e:	e070      	b.n	8009702 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	099b      	lsrs	r3, r3, #6
 8009624:	b2db      	uxtb	r3, r3
 8009626:	f003 0303 	and.w	r3, r3, #3
 800962a:	b2da      	uxtb	r2, r3
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	095b      	lsrs	r3, r3, #5
 8009634:	b2db      	uxtb	r3, r3
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	b2da      	uxtb	r2, r3
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	0a1b      	lsrs	r3, r3, #8
 8009644:	b29b      	uxth	r3, r3
 8009646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800964a:	b29a      	uxth	r2, r3
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	0e1b      	lsrs	r3, r3, #24
 8009650:	b29b      	uxth	r3, r3
 8009652:	4313      	orrs	r3, r2
 8009654:	b29a      	uxth	r2, r3
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	061a      	lsls	r2, r3, #24
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	021b      	lsls	r3, r3, #8
 8009662:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009666:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	0a1b      	lsrs	r3, r3, #8
 800966c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009670:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	0e1b      	lsrs	r3, r3, #24
 8009676:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	b2da      	uxtb	r2, r3
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	0a1b      	lsrs	r3, r3, #8
 8009688:	b2da      	uxtb	r2, r3
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	0d1b      	lsrs	r3, r3, #20
 8009692:	b2db      	uxtb	r3, r3
 8009694:	f003 030f 	and.w	r3, r3, #15
 8009698:	b2da      	uxtb	r2, r3
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	0c1b      	lsrs	r3, r3, #16
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	4313      	orrs	r3, r2
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	0a9b      	lsrs	r3, r3, #10
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	0a1b      	lsrs	r3, r3, #8
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	f003 0303 	and.w	r3, r3, #3
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	091b      	lsrs	r3, r3, #4
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 030f 	and.w	r3, r3, #15
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	f003 030f 	and.w	r3, r3, #15
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	0e1b      	lsrs	r3, r3, #24
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800970a:	4618      	mov	r0, r3
 800970c:	f001 fea2 	bl	800b454 <SDMMC_CmdBlockLength>
 8009710:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00d      	beq.n	8009734 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a08      	ldr	r2, [pc, #32]	; (8009740 <HAL_SD_GetCardStatus+0x168>)
 800971e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009724:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2201      	movs	r2, #1
 800972a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009734:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009738:	4618      	mov	r0, r3
 800973a:	3750      	adds	r7, #80	; 0x50
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	1fe00fff 	.word	0x1fe00fff

08009744 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800979c:	b5b0      	push	{r4, r5, r7, lr}
 800979e:	b08e      	sub	sp, #56	; 0x38
 80097a0:	af04      	add	r7, sp, #16
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2203      	movs	r2, #3
 80097b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d02e      	beq.n	800981a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097c2:	d106      	bne.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	639a      	str	r2, [r3, #56]	; 0x38
 80097d0:	e029      	b.n	8009826 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097d8:	d10a      	bne.n	80097f0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fb66 	bl	8009eac <SD_WideBus_Enable>
 80097e0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	431a      	orrs	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	639a      	str	r2, [r3, #56]	; 0x38
 80097ee:	e01a      	b.n	8009826 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10a      	bne.n	800980c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fba3 	bl	8009f42 <SD_WideBus_Disable>
 80097fc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009802:	6a3b      	ldr	r3, [r7, #32]
 8009804:	431a      	orrs	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	639a      	str	r2, [r3, #56]	; 0x38
 800980a:	e00c      	b.n	8009826 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009810:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	639a      	str	r2, [r3, #56]	; 0x38
 8009818:	e005      	b.n	8009826 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982a:	2b00      	cmp	r3, #0
 800982c:	d007      	beq.n	800983e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a2e      	ldr	r2, [pc, #184]	; (80098ec <HAL_SD_ConfigWideBusOperation+0x150>)
 8009834:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800983c:	e034      	b.n	80098a8 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	2b03      	cmp	r3, #3
 800985a:	d903      	bls.n	8009864 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	61bb      	str	r3, [r7, #24]
 8009862:	e012      	b.n	800988a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800986c:	d103      	bne.n	8009876 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	61bb      	str	r3, [r7, #24]
 8009874:	e009      	b.n	800988a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800987a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800987e:	d102      	bne.n	8009886 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8009880:	2302      	movs	r3, #2
 8009882:	61bb      	str	r3, [r7, #24]
 8009884:	e001      	b.n	800988a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8009886:	2304      	movs	r3, #4
 8009888:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681d      	ldr	r5, [r3, #0]
 800988e:	466c      	mov	r4, sp
 8009890:	f107 0314 	add.w	r3, r7, #20
 8009894:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009898:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800989c:	f107 0308 	add.w	r3, r7, #8
 80098a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098a2:	4628      	mov	r0, r5
 80098a4:	f001 fcf8 	bl	800b298 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80098b0:	4618      	mov	r0, r3
 80098b2:	f001 fdcf 	bl	800b454 <SDMMC_CmdBlockLength>
 80098b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00c      	beq.n	80098d8 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a0a      	ldr	r2, [pc, #40]	; (80098ec <HAL_SD_ConfigWideBusOperation+0x150>)
 80098c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	431a      	orrs	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80098e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3728      	adds	r7, #40	; 0x28
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bdb0      	pop	{r4, r5, r7, pc}
 80098ec:	1fe00fff 	.word	0x1fe00fff

080098f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80098fc:	f107 030c 	add.w	r3, r7, #12
 8009900:	4619      	mov	r1, r3
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 faaa 	bl	8009e5c <SD_SendStatus>
 8009908:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d005      	beq.n	800991c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	431a      	orrs	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	0a5b      	lsrs	r3, r3, #9
 8009920:	f003 030f 	and.w	r3, r3, #15
 8009924:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009926:	693b      	ldr	r3, [r7, #16]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3718      	adds	r7, #24
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009930:	b590      	push	{r4, r7, lr}
 8009932:	b091      	sub	sp, #68	; 0x44
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009938:	2301      	movs	r3, #1
 800993a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4618      	mov	r0, r3
 8009942:	f001 fd02 	bl	800b34a <SDMMC_GetPowerState>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d102      	bne.n	8009952 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800994c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009950:	e0a8      	b.n	8009aa4 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009956:	2b03      	cmp	r3, #3
 8009958:	d02e      	beq.n	80099b8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4618      	mov	r0, r3
 8009960:	f001 ff4e 	bl	800b800 <SDMMC_CmdSendCID>
 8009964:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <SD_InitCard+0x40>
    {
      return errorstate;
 800996c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800996e:	e099      	b.n	8009aa4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2100      	movs	r1, #0
 8009976:	4618      	mov	r0, r3
 8009978:	f001 fd2d 	bl	800b3d6 <SDMMC_GetResponse>
 800997c:	4602      	mov	r2, r0
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2104      	movs	r1, #4
 8009988:	4618      	mov	r0, r3
 800998a:	f001 fd24 	bl	800b3d6 <SDMMC_GetResponse>
 800998e:	4602      	mov	r2, r0
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2108      	movs	r1, #8
 800999a:	4618      	mov	r0, r3
 800999c:	f001 fd1b 	bl	800b3d6 <SDMMC_GetResponse>
 80099a0:	4602      	mov	r2, r0
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	210c      	movs	r1, #12
 80099ac:	4618      	mov	r0, r3
 80099ae:	f001 fd12 	bl	800b3d6 <SDMMC_GetResponse>
 80099b2:	4602      	mov	r2, r0
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d00d      	beq.n	80099dc <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f107 020e 	add.w	r2, r7, #14
 80099c8:	4611      	mov	r1, r2
 80099ca:	4618      	mov	r0, r3
 80099cc:	f001 ff57 	bl	800b87e <SDMMC_CmdSetRelAdd>
 80099d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <SD_InitCard+0xac>
    {
      return errorstate;
 80099d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099da:	e063      	b.n	8009aa4 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d036      	beq.n	8009a52 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80099e4:	89fb      	ldrh	r3, [r7, #14]
 80099e6:	461a      	mov	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099f4:	041b      	lsls	r3, r3, #16
 80099f6:	4619      	mov	r1, r3
 80099f8:	4610      	mov	r0, r2
 80099fa:	f001 ff20 	bl	800b83e <SDMMC_CmdSendCSD>
 80099fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <SD_InitCard+0xda>
    {
      return errorstate;
 8009a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a08:	e04c      	b.n	8009aa4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2100      	movs	r1, #0
 8009a10:	4618      	mov	r0, r3
 8009a12:	f001 fce0 	bl	800b3d6 <SDMMC_GetResponse>
 8009a16:	4602      	mov	r2, r0
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2104      	movs	r1, #4
 8009a22:	4618      	mov	r0, r3
 8009a24:	f001 fcd7 	bl	800b3d6 <SDMMC_GetResponse>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2108      	movs	r1, #8
 8009a34:	4618      	mov	r0, r3
 8009a36:	f001 fcce 	bl	800b3d6 <SDMMC_GetResponse>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	210c      	movs	r1, #12
 8009a46:	4618      	mov	r0, r3
 8009a48:	f001 fcc5 	bl	800b3d6 <SDMMC_GetResponse>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2104      	movs	r1, #4
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f001 fcbc 	bl	800b3d6 <SDMMC_GetResponse>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	0d1a      	lsrs	r2, r3, #20
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009a66:	f107 0310 	add.w	r3, r7, #16
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7ff fc0f 	bl	8009290 <HAL_SD_GetCardCSD>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a7c:	e012      	b.n	8009aa4 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6819      	ldr	r1, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a86:	041b      	lsls	r3, r3, #16
 8009a88:	f04f 0400 	mov.w	r4, #0
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	4623      	mov	r3, r4
 8009a90:	4608      	mov	r0, r1
 8009a92:	f001 fdcb 	bl	800b62c <SDMMC_CmdSelDesel>
 8009a96:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <SD_InitCard+0x172>
  {
    return errorstate;
 8009a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aa0:	e000      	b.n	8009aa4 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3744      	adds	r7, #68	; 0x44
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd90      	pop	{r4, r7, pc}

08009aac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	61fb      	str	r3, [r7, #28]
 8009abc:	2300      	movs	r3, #0
 8009abe:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8009ac0:	f7f6 fc90 	bl	80003e4 <HAL_GetTick>
 8009ac4:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f001 fdd2 	bl	800b674 <SDMMC_CmdGoIdleState>
 8009ad0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <SD_PowerON+0x30>
  {
    return errorstate;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	e0e9      	b.n	8009cb0 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f001 fde5 	bl	800b6b0 <SDMMC_CmdOperCond>
 8009ae6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00d      	beq.n	8009b0a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f001 fdbb 	bl	800b674 <SDMMC_CmdGoIdleState>
 8009afe:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d004      	beq.n	8009b10 <SD_PowerON+0x64>
    {
      return errorstate;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	e0d2      	b.n	8009cb0 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d137      	bne.n	8009b88 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f001 fde6 	bl	800b6f0 <SDMMC_CmdAppCommand>
 8009b24:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d02d      	beq.n	8009b88 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b30:	e0be      	b.n	8009cb0 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2100      	movs	r1, #0
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f001 fdd9 	bl	800b6f0 <SDMMC_CmdAppCommand>
 8009b3e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <SD_PowerON+0x9e>
    {
      return errorstate;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	e0b2      	b.n	8009cb0 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	495a      	ldr	r1, [pc, #360]	; (8009cb8 <SD_PowerON+0x20c>)
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 fdf0 	bl	800b736 <SDMMC_CmdAppOperCommand>
 8009b56:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d002      	beq.n	8009b64 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b62:	e0a5      	b.n	8009cb0 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f001 fc33 	bl	800b3d6 <SDMMC_GetResponse>
 8009b70:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	0fdb      	lsrs	r3, r3, #31
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d101      	bne.n	8009b7e <SD_PowerON+0xd2>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e000      	b.n	8009b80 <SD_PowerON+0xd4>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	61bb      	str	r3, [r7, #24]

    count++;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3301      	adds	r3, #1
 8009b86:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d802      	bhi.n	8009b98 <SD_PowerON+0xec>
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d0cc      	beq.n	8009b32 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d902      	bls.n	8009ba8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009ba2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ba6:	e083      	b.n	8009cb0 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d07d      	beq.n	8009cae <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d176      	bne.n	8009cae <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d071      	beq.n	8009cae <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bd0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f042 0208 	orr.w	r2, r2, #8
 8009be0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f001 feb0 	bl	800b94c <SDMMC_CmdVoltageSwitch>
 8009bec:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00c      	beq.n	8009c0e <SD_PowerON+0x162>
        {
          return errorstate;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	e05b      	b.n	8009cb0 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009bf8:	f7f6 fbf4 	bl	80003e4 <HAL_GetTick>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c06:	d102      	bne.n	8009c0e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8009c08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c0c:	e050      	b.n	8009cb0 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c1c:	d1ec      	bne.n	8009bf8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009c26:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c36:	d002      	beq.n	8009c3e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009c38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c3c:	e038      	b.n	8009cb0 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8009c3e:	2001      	movs	r0, #1
 8009c40:	f7ff fb1a 	bl	8009278 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f042 0204 	orr.w	r2, r2, #4
 8009c52:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009c54:	e00a      	b.n	8009c6c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c56:	f7f6 fbc5 	bl	80003e4 <HAL_GetTick>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c64:	d102      	bne.n	8009c6c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009c66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c6a:	e021      	b.n	8009cb0 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c7a:	d1ec      	bne.n	8009c56 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c84:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c94:	d102      	bne.n	8009c9c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009c96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c9a:	e009      	b.n	8009cb0 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2213      	movs	r2, #19
 8009ca2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cac:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3720      	adds	r7, #32
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	c1100000 	.word	0xc1100000

08009cbc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08c      	sub	sp, #48	; 0x30
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009cc6:	f7f6 fb8d 	bl	80003e4 <HAL_GetTick>
 8009cca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f001 fb7d 	bl	800b3d6 <SDMMC_GetResponse>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ce2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ce6:	d102      	bne.n	8009cee <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ce8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cec:	e0b0      	b.n	8009e50 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2140      	movs	r1, #64	; 0x40
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f001 fbad 	bl	800b454 <SDMMC_CmdBlockLength>
 8009cfa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d005      	beq.n	8009d0e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	e0a0      	b.n	8009e50 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d16:	041b      	lsls	r3, r3, #16
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	f001 fce8 	bl	800b6f0 <SDMMC_CmdAppCommand>
 8009d20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d22:	6a3b      	ldr	r3, [r7, #32]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d005      	beq.n	8009d34 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009d30:	6a3b      	ldr	r3, [r7, #32]
 8009d32:	e08d      	b.n	8009e50 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d38:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009d3a:	2340      	movs	r3, #64	; 0x40
 8009d3c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009d3e:	2360      	movs	r3, #96	; 0x60
 8009d40:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d42:	2302      	movs	r3, #2
 8009d44:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f107 0208 	add.w	r2, r7, #8
 8009d56:	4611      	mov	r1, r2
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f001 fb4f 	bl	800b3fc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f001 fdd0 	bl	800b908 <SDMMC_CmdStatusRegister>
 8009d68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d02b      	beq.n	8009dc8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009d78:	6a3b      	ldr	r3, [r7, #32]
 8009d7a:	e069      	b.n	8009e50 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d013      	beq.n	8009db2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d8e:	e00d      	b.n	8009dac <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f001 faa9 	bl	800b2ec <SDMMC_ReadFIFO>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9e:	601a      	str	r2, [r3, #0]
        pData++;
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	3304      	adds	r3, #4
 8009da4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	3301      	adds	r3, #1
 8009daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dae:	2b07      	cmp	r3, #7
 8009db0:	d9ee      	bls.n	8009d90 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009db2:	f7f6 fb17 	bl	80003e4 <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dc0:	d102      	bne.n	8009dc8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009dc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dc6:	e043      	b.n	8009e50 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dce:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0d2      	beq.n	8009d7c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ddc:	f003 0308 	and.w	r3, r3, #8
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009de4:	2308      	movs	r3, #8
 8009de6:	e033      	b.n	8009e50 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dee:	f003 0302 	and.w	r3, r3, #2
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d001      	beq.n	8009dfa <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009df6:	2302      	movs	r3, #2
 8009df8:	e02a      	b.n	8009e50 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e00:	f003 0320 	and.w	r3, r3, #32
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d017      	beq.n	8009e38 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009e08:	2320      	movs	r3, #32
 8009e0a:	e021      	b.n	8009e50 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f001 fa6b 	bl	800b2ec <SDMMC_ReadFIFO>
 8009e16:	4602      	mov	r2, r0
 8009e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1a:	601a      	str	r2, [r3, #0]
    pData++;
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	3304      	adds	r3, #4
 8009e20:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e22:	f7f6 fadf 	bl	80003e4 <HAL_GetTick>
 8009e26:	4602      	mov	r2, r0
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e30:	d102      	bne.n	8009e38 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e36:	e00b      	b.n	8009e50 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1e2      	bne.n	8009e0c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a03      	ldr	r2, [pc, #12]	; (8009e58 <SD_SendSDStatus+0x19c>)
 8009e4c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3730      	adds	r7, #48	; 0x30
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	18000f3a 	.word	0x18000f3a

08009e5c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d102      	bne.n	8009e72 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009e6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e70:	e018      	b.n	8009ea4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e7a:	041b      	lsls	r3, r3, #16
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f001 fd1f 	bl	800b8c2 <SDMMC_CmdSendStatus>
 8009e84:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	e009      	b.n	8009ea4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2100      	movs	r1, #0
 8009e96:	4618      	mov	r0, r3
 8009e98:	f001 fa9d 	bl	800b3d6 <SDMMC_GetResponse>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	60fb      	str	r3, [r7, #12]
 8009eb8:	2300      	movs	r3, #0
 8009eba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 fa87 	bl	800b3d6 <SDMMC_GetResponse>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ed2:	d102      	bne.n	8009eda <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ed4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ed8:	e02f      	b.n	8009f3a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009eda:	f107 030c 	add.w	r3, r7, #12
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f879 	bl	8009fd8 <SD_FindSCR>
 8009ee6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	e023      	b.n	8009f3a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d01c      	beq.n	8009f36 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f04:	041b      	lsls	r3, r3, #16
 8009f06:	4619      	mov	r1, r3
 8009f08:	4610      	mov	r0, r2
 8009f0a:	f001 fbf1 	bl	800b6f0 <SDMMC_CmdAppCommand>
 8009f0e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	e00f      	b.n	8009f3a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2102      	movs	r1, #2
 8009f20:	4618      	mov	r0, r3
 8009f22:	f001 fc28 	bl	800b776 <SDMMC_CmdBusWidth>
 8009f26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	e003      	b.n	8009f3a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f32:	2300      	movs	r3, #0
 8009f34:	e001      	b.n	8009f3a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b086      	sub	sp, #24
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	2300      	movs	r3, #0
 8009f50:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f001 fa3c 	bl	800b3d6 <SDMMC_GetResponse>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f68:	d102      	bne.n	8009f70 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f6e:	e02f      	b.n	8009fd0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f70:	f107 030c 	add.w	r3, r7, #12
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 f82e 	bl	8009fd8 <SD_FindSCR>
 8009f7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	e023      	b.n	8009fd0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d01c      	beq.n	8009fcc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f9a:	041b      	lsls	r3, r3, #16
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	f001 fba6 	bl	800b6f0 <SDMMC_CmdAppCommand>
 8009fa4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	e00f      	b.n	8009fd0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f001 fbdd 	bl	800b776 <SDMMC_CmdBusWidth>
 8009fbc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	e003      	b.n	8009fd0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	e001      	b.n	8009fd0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3718      	adds	r7, #24
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b08e      	sub	sp, #56	; 0x38
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009fe2:	f7f6 f9ff 	bl	80003e4 <HAL_GetTick>
 8009fe6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009fec:	2300      	movs	r3, #0
 8009fee:	60bb      	str	r3, [r7, #8]
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2108      	movs	r1, #8
 8009ffe:	4618      	mov	r0, r3
 800a000:	f001 fa28 	bl	800b454 <SDMMC_CmdBlockLength>
 800a004:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00e:	e0ad      	b.n	800a16c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a018:	041b      	lsls	r3, r3, #16
 800a01a:	4619      	mov	r1, r3
 800a01c:	4610      	mov	r0, r2
 800a01e:	f001 fb67 	bl	800b6f0 <SDMMC_CmdAppCommand>
 800a022:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	e09e      	b.n	800a16c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a02e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a032:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a034:	2308      	movs	r3, #8
 800a036:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a038:	2330      	movs	r3, #48	; 0x30
 800a03a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a03c:	2302      	movs	r3, #2
 800a03e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a040:	2300      	movs	r3, #0
 800a042:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a044:	2301      	movs	r3, #1
 800a046:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f107 0210 	add.w	r2, r7, #16
 800a050:	4611      	mov	r1, r2
 800a052:	4618      	mov	r0, r3
 800a054:	f001 f9d2 	bl	800b3fc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f001 fbad 	bl	800b7bc <SDMMC_CmdSendSCR>
 800a062:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	2b00      	cmp	r3, #0
 800a068:	d027      	beq.n	800a0ba <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06c:	e07e      	b.n	800a16c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d113      	bne.n	800a0a4 <SD_FindSCR+0xcc>
 800a07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d110      	bne.n	800a0a4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4618      	mov	r0, r3
 800a088:	f001 f930 	bl	800b2ec <SDMMC_ReadFIFO>
 800a08c:	4603      	mov	r3, r0
 800a08e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4618      	mov	r0, r3
 800a096:	f001 f929 	bl	800b2ec <SDMMC_ReadFIFO>
 800a09a:	4603      	mov	r3, r0
 800a09c:	60fb      	str	r3, [r7, #12]
      index++;
 800a09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a0a4:	f7f6 f99e 	bl	80003e4 <HAL_GetTick>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0b2:	d102      	bne.n	800a0ba <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a0b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0b8:	e058      	b.n	800a16c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0c0:	f240 532a 	movw	r3, #1322	; 0x52a
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0d1      	beq.n	800a06e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d0:	f003 0308 	and.w	r3, r3, #8
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d005      	beq.n	800a0e4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2208      	movs	r2, #8
 800a0de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a0e0:	2308      	movs	r3, #8
 800a0e2:	e043      	b.n	800a16c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d005      	beq.n	800a0fe <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	e036      	b.n	800a16c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a104:	f003 0320 	and.w	r3, r3, #32
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d005      	beq.n	800a118 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2220      	movs	r2, #32
 800a112:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a114:	2320      	movs	r3, #32
 800a116:	e029      	b.n	800a16c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a15      	ldr	r2, [pc, #84]	; (800a174 <SD_FindSCR+0x19c>)
 800a11e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	061a      	lsls	r2, r3, #24
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	021b      	lsls	r3, r3, #8
 800a128:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a12c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	0a1b      	lsrs	r3, r3, #8
 800a132:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a136:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	0e1b      	lsrs	r3, r3, #24
 800a13c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a140:	601a      	str	r2, [r3, #0]
    scr++;
 800a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a144:	3304      	adds	r3, #4
 800a146:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	061a      	lsls	r2, r3, #24
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	021b      	lsls	r3, r3, #8
 800a150:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a154:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	0a1b      	lsrs	r3, r3, #8
 800a15a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a15e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	0e1b      	lsrs	r3, r3, #24
 800a164:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a168:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3738      	adds	r7, #56	; 0x38
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	18000f3a 	.word	0x18000f3a

0800a178 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a184:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18a:	2b1f      	cmp	r3, #31
 800a18c:	d936      	bls.n	800a1fc <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a18e:	2300      	movs	r3, #0
 800a190:	617b      	str	r3, [r7, #20]
 800a192:	e027      	b.n	800a1e4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4618      	mov	r0, r3
 800a19a:	f001 f8a7 	bl	800b2ec <SDMMC_ReadFIFO>
 800a19e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	b2da      	uxtb	r2, r3
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	0a1b      	lsrs	r3, r3, #8
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	0c1b      	lsrs	r3, r3, #16
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	0e1b      	lsrs	r3, r3, #24
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	617b      	str	r3, [r7, #20]
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	2b07      	cmp	r3, #7
 800a1e8:	d9d4      	bls.n	800a194 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f4:	f1a3 0220 	sub.w	r2, r3, #32
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a1fc:	bf00      	nop
 800a1fe:	3718      	adds	r7, #24
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a216:	2b1f      	cmp	r3, #31
 800a218:	d93a      	bls.n	800a290 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a21a:	2300      	movs	r3, #0
 800a21c:	617b      	str	r3, [r7, #20]
 800a21e:	e02b      	b.n	800a278 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	3301      	adds	r3, #1
 800a22a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	021a      	lsls	r2, r3, #8
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	4313      	orrs	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	3301      	adds	r3, #1
 800a23c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	041a      	lsls	r2, r3, #16
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	3301      	adds	r3, #1
 800a24e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	061a      	lsls	r2, r3, #24
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	4313      	orrs	r3, r2
 800a25a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	3301      	adds	r3, #1
 800a260:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f107 020c 	add.w	r2, r7, #12
 800a26a:	4611      	mov	r1, r2
 800a26c:	4618      	mov	r0, r3
 800a26e:	f001 f84a 	bl	800b306 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	3301      	adds	r3, #1
 800a276:	617b      	str	r3, [r7, #20]
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	2b07      	cmp	r3, #7
 800a27c:	d9d0      	bls.n	800a220 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	693a      	ldr	r2, [r7, #16]
 800a282:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a288:	f1a3 0220 	sub.w	r2, r3, #32
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a290:	bf00      	nop
 800a292:	3718      	adds	r7, #24
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d101      	bne.n	800a2fc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e02b      	b.n	800a354 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	d106      	bne.n	800a316 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f004 ffc9 	bl	800f2a8 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2202      	movs	r2, #2
 800a31a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	3304      	adds	r3, #4
 800a326:	4619      	mov	r1, r3
 800a328:	4610      	mov	r0, r2
 800a32a:	f000 feb7 	bl	800b09c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	461a      	mov	r2, r3
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	f000 ff0b 	bl	800b154 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a33e:	4b07      	ldr	r3, [pc, #28]	; (800a35c <HAL_SDRAM_Init+0x74>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a06      	ldr	r2, [pc, #24]	; (800a35c <HAL_SDRAM_Init+0x74>)
 800a344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a348:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	52004000 	.word	0x52004000

0800a360 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a372:	75fb      	strb	r3, [r7, #23]
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	2b02      	cmp	r3, #2
 800a378:	d101      	bne.n	800a37e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a37a:	2302      	movs	r3, #2
 800a37c:	e021      	b.n	800a3c2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a37e:	7dfb      	ldrb	r3, [r7, #23]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d002      	beq.n	800a38a <HAL_SDRAM_SendCommand+0x2a>
 800a384:	7dfb      	ldrb	r3, [r7, #23]
 800a386:	2b05      	cmp	r3, #5
 800a388:	d118      	bne.n	800a3bc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2202      	movs	r2, #2
 800a38e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	68b9      	ldr	r1, [r7, #8]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 ff44 	bl	800b228 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d104      	bne.n	800a3b2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2205      	movs	r2, #5
 800a3ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a3b0:	e006      	b.n	800a3c0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a3ba:	e001      	b.n	800a3c0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e000      	b.n	800a3c2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b082      	sub	sp, #8
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	d101      	bne.n	800a3e4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	e016      	b.n	800a412 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d10f      	bne.n	800a410 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 ff32 	bl	800b268 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	e000      	b.n	800a412 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
}
 800a412:	4618      	mov	r0, r3
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
	...

0800a41c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800a424:	2300      	movs	r3, #0
 800a426:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e0e2      	b.n	800a5f8 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a70      	ldr	r2, [pc, #448]	; (800a600 <HAL_SPI_Init+0x1e4>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d00f      	beq.n	800a462 <HAL_SPI_Init+0x46>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a6f      	ldr	r2, [pc, #444]	; (800a604 <HAL_SPI_Init+0x1e8>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d00a      	beq.n	800a462 <HAL_SPI_Init+0x46>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a6d      	ldr	r2, [pc, #436]	; (800a608 <HAL_SPI_Init+0x1ec>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d005      	beq.n	800a462 <HAL_SPI_Init+0x46>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	2b0f      	cmp	r3, #15
 800a45c:	d901      	bls.n	800a462 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e0ca      	b.n	800a5f8 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fdfe 	bl	800b064 <SPI_GetPacketSize>
 800a468:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a64      	ldr	r2, [pc, #400]	; (800a600 <HAL_SPI_Init+0x1e4>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d00c      	beq.n	800a48e <HAL_SPI_Init+0x72>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a62      	ldr	r2, [pc, #392]	; (800a604 <HAL_SPI_Init+0x1e8>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d007      	beq.n	800a48e <HAL_SPI_Init+0x72>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a61      	ldr	r2, [pc, #388]	; (800a608 <HAL_SPI_Init+0x1ec>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d002      	beq.n	800a48e <HAL_SPI_Init+0x72>
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2b08      	cmp	r3, #8
 800a48c:	d811      	bhi.n	800a4b2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a492:	4a5b      	ldr	r2, [pc, #364]	; (800a600 <HAL_SPI_Init+0x1e4>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d009      	beq.n	800a4ac <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a59      	ldr	r2, [pc, #356]	; (800a604 <HAL_SPI_Init+0x1e8>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d004      	beq.n	800a4ac <HAL_SPI_Init+0x90>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a58      	ldr	r2, [pc, #352]	; (800a608 <HAL_SPI_Init+0x1ec>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d104      	bne.n	800a4b6 <HAL_SPI_Init+0x9a>
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2b10      	cmp	r3, #16
 800a4b0:	d901      	bls.n	800a4b6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e0a0      	b.n	800a5f8 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d106      	bne.n	800a4d0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f006 f9b6 	bl	801083c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f022 0201 	bic.w	r2, r2, #1
 800a4e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a4f0:	d110      	bne.n	800a514 <HAL_SPI_Init+0xf8>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4fa:	d10b      	bne.n	800a514 <HAL_SPI_Init+0xf8>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a500:	2b00      	cmp	r3, #0
 800a502:	d107      	bne.n	800a514 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a512:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	69da      	ldr	r2, [r3, #28]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51c:	431a      	orrs	r2, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	431a      	orrs	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a526:	ea42 0103 	orr.w	r1, r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53e:	431a      	orrs	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a544:	431a      	orrs	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	431a      	orrs	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	431a      	orrs	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	431a      	orrs	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	431a      	orrs	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	431a      	orrs	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a568:	431a      	orrs	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	431a      	orrs	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a574:	ea42 0103 	orr.w	r1, r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	430a      	orrs	r2, r1
 800a582:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d113      	bne.n	800a5b4 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a59e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a5b2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f022 0201 	bic.w	r2, r2, #1
 800a5c2:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00a      	beq.n	800a5e6 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	40013000 	.word	0x40013000
 800a604:	40003800 	.word	0x40003800
 800a608:	40003c00 	.word	0x40003c00

0800a60c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a624:	2b01      	cmp	r3, #1
 800a626:	d101      	bne.n	800a62c <HAL_SPI_TransmitReceive_DMA+0x20>
 800a628:	2302      	movs	r3, #2
 800a62a:	e1ac      	b.n	800a986 <HAL_SPI_TransmitReceive_DMA+0x37a>
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a63a:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	613b      	str	r3, [r7, #16]

  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a648:	d106      	bne.n	800a658 <HAL_SPI_TransmitReceive_DMA+0x4c>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d102      	bne.n	800a658 <HAL_SPI_TransmitReceive_DMA+0x4c>
 800a652:	7dbb      	ldrb	r3, [r7, #22]
 800a654:	2b04      	cmp	r3, #4
 800a656:	d00a      	beq.n	800a66e <HAL_SPI_TransmitReceive_DMA+0x62>
 800a658:	7dbb      	ldrb	r3, [r7, #22]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d007      	beq.n	800a66e <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 800a65e:	2302      	movs	r3, #2
 800a660:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a66a:	7dfb      	ldrb	r3, [r7, #23]
 800a66c:	e18b      	b.n	800a986 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d005      	beq.n	800a680 <HAL_SPI_TransmitReceive_DMA+0x74>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d002      	beq.n	800a680 <HAL_SPI_TransmitReceive_DMA+0x74>
 800a67a:	887b      	ldrh	r3, [r7, #2]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d107      	bne.n	800a690 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a68c:	7dfb      	ldrb	r3, [r7, #23]
 800a68e:	e17a      	b.n	800a986 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b04      	cmp	r3, #4
 800a69a:	d003      	beq.n	800a6a4 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2205      	movs	r2, #5
 800a6a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	887a      	ldrh	r2, [r7, #2]
 800a6b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	887a      	ldrh	r2, [r7, #2]
 800a6be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	887a      	ldrh	r2, [r7, #2]
 800a6cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	887a      	ldrh	r2, [r7, #2]
 800a6d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689a      	ldr	r2, [r3, #8]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a6f2:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	2b0f      	cmp	r3, #15
 800a6fa:	d905      	bls.n	800a708 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a706:	d10f      	bne.n	800a728 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a70c:	2b07      	cmp	r3, #7
 800a70e:	d913      	bls.n	800a738 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a71a:	d00d      	beq.n	800a738 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a720:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a722:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a726:	d007      	beq.n	800a738 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	75fb      	strb	r3, [r7, #23]
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a734:	7dfb      	ldrb	r3, [r7, #23]
 800a736:	e126      	b.n	800a986 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	2b07      	cmp	r3, #7
 800a73e:	d840      	bhi.n	800a7c2 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a74a:	d109      	bne.n	800a760 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a752:	b29b      	uxth	r3, r3
 800a754:	3301      	adds	r3, #1
 800a756:	105b      	asrs	r3, r3, #1
 800a758:	b29a      	uxth	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a76a:	d109      	bne.n	800a780 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a772:	b29b      	uxth	r3, r3
 800a774:	3303      	adds	r3, #3
 800a776:	109b      	asrs	r3, r3, #2
 800a778:	b29a      	uxth	r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a78a:	d109      	bne.n	800a7a0 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a792:	b29b      	uxth	r3, r3
 800a794:	3301      	adds	r3, #1
 800a796:	105b      	asrs	r3, r3, #1
 800a798:	b29a      	uxth	r2, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7aa:	d12e      	bne.n	800a80a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	3303      	adds	r3, #3
 800a7b6:	109b      	asrs	r3, r3, #2
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a7c0:	e023      	b.n	800a80a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	2b0f      	cmp	r3, #15
 800a7c8:	d81f      	bhi.n	800a80a <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7d4:	d109      	bne.n	800a7ea <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	3301      	adds	r3, #1
 800a7e0:	105b      	asrs	r3, r3, #1
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7ee:	699b      	ldr	r3, [r3, #24]
 800a7f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7f4:	d109      	bne.n	800a80a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	3301      	adds	r3, #1
 800a800:	105b      	asrs	r3, r3, #1
 800a802:	b29a      	uxth	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a810:	b2db      	uxtb	r3, r3
 800a812:	2b04      	cmp	r3, #4
 800a814:	d108      	bne.n	800a828 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a81a:	4a5d      	ldr	r2, [pc, #372]	; (800a990 <HAL_SPI_TransmitReceive_DMA+0x384>)
 800a81c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a822:	4a5c      	ldr	r2, [pc, #368]	; (800a994 <HAL_SPI_TransmitReceive_DMA+0x388>)
 800a824:	63da      	str	r2, [r3, #60]	; 0x3c
 800a826:	e007      	b.n	800a838 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a82c:	4a5a      	ldr	r2, [pc, #360]	; (800a998 <HAL_SPI_TransmitReceive_DMA+0x38c>)
 800a82e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a834:	4a59      	ldr	r2, [pc, #356]	; (800a99c <HAL_SPI_TransmitReceive_DMA+0x390>)
 800a836:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a83c:	4a58      	ldr	r2, [pc, #352]	; (800a9a0 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800a83e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a844:	2200      	movs	r2, #0
 800a846:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	3330      	adds	r3, #48	; 0x30
 800a852:	4619      	mov	r1, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a858:	461a      	mov	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a860:	b29b      	uxth	r3, r3
 800a862:	f7f7 feef 	bl	8002644 <HAL_DMA_Start_IT>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00f      	beq.n	800a88c <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a872:	f043 0210 	orr.w	r2, r3, #16
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 800a888:	7dfb      	ldrb	r3, [r7, #23]
 800a88a:	e07c      	b.n	800a986 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689a      	ldr	r2, [r3, #8]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a89a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3320      	adds	r3, #32
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	f7f7 feb5 	bl	8002644 <HAL_DMA_Start_IT>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00f      	beq.n	800a900 <HAL_SPI_TransmitReceive_DMA+0x2f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8e6:	f043 0210 	orr.w	r2, r3, #16
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
 800a8fe:	e042      	b.n	800a986 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a904:	69db      	ldr	r3, [r3, #28]
 800a906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a90a:	d108      	bne.n	800a91e <HAL_SPI_TransmitReceive_DMA+0x312>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6859      	ldr	r1, [r3, #4]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	4b23      	ldr	r3, [pc, #140]	; (800a9a4 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800a918:	400b      	ands	r3, r1
 800a91a:	6053      	str	r3, [r2, #4]
 800a91c:	e009      	b.n	800a932 <HAL_SPI_TransmitReceive_DMA+0x326>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	4b1f      	ldr	r3, [pc, #124]	; (800a9a4 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800a926:	4013      	ands	r3, r2
 800a928:	8879      	ldrh	r1, [r7, #2]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	6812      	ldr	r2, [r2, #0]
 800a92e:	430b      	orrs	r3, r1
 800a930:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	689a      	ldr	r2, [r3, #8]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a940:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	691a      	ldr	r2, [r3, #16]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800a950:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f042 0201 	orr.w	r2, r2, #1
 800a960:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a96a:	d107      	bne.n	800a97c <HAL_SPI_TransmitReceive_DMA+0x370>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a97a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800a984:	7dfb      	ldrb	r3, [r7, #23]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3718      	adds	r7, #24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	0800ae71 	.word	0x0800ae71
 800a994:	0800ade5 	.word	0x0800ade5
 800a998:	0800ae8d 	.word	0x0800ae8d
 800a99c:	0800ae2b 	.word	0x0800ae2b
 800a9a0:	0800aea9 	.word	0x0800aea9
 800a9a4:	ffff0000 	.word	0xffff0000

0800a9a8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b08a      	sub	sp, #40	; 0x28
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a9c0:	6a3a      	ldr	r2, [r7, #32]
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a9da:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3330      	adds	r3, #48	; 0x30
 800a9e2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d113      	bne.n	800aa16 <HAL_SPI_IRQHandler+0x6e>
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	f003 0320 	and.w	r3, r3, #32
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10e      	bne.n	800aa16 <HAL_SPI_IRQHandler+0x6e>
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	f003 0304 	and.w	r3, r3, #4
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d009      	beq.n	800aa16 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	4798      	blx	r3
    hspi->RxISR(hspi);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	4798      	blx	r3
    handled = 1UL;
 800aa12:	2301      	movs	r3, #1
 800aa14:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10f      	bne.n	800aa40 <HAL_SPI_IRQHandler+0x98>
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00a      	beq.n	800aa40 <HAL_SPI_IRQHandler+0x98>
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	f003 0304 	and.w	r3, r3, #4
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d105      	bne.n	800aa40 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	4798      	blx	r3
    handled = 1UL;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	f003 0320 	and.w	r3, r3, #32
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d10f      	bne.n	800aa6a <HAL_SPI_IRQHandler+0xc2>
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	f003 0302 	and.w	r3, r3, #2
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00a      	beq.n	800aa6a <HAL_SPI_IRQHandler+0xc2>
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	f003 0304 	and.w	r3, r3, #4
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d105      	bne.n	800aa6a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	4798      	blx	r3
    handled = 1UL;
 800aa66:	2301      	movs	r3, #1
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f040 8170 	bne.w	800ad52 <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	f003 0308 	and.w	r3, r3, #8
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 80a0 	beq.w	800abbe <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	699a      	ldr	r2, [r3, #24]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f042 0208 	orr.w	r2, r2, #8
 800aa8c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	699a      	ldr	r2, [r3, #24]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f042 0210 	orr.w	r2, r2, #16
 800aa9c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	699a      	ldr	r2, [r3, #24]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aaac:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	691a      	ldr	r2, [r3, #16]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f022 0208 	bic.w	r2, r2, #8
 800aabc:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00f      	beq.n	800aae8 <HAL_SPI_IRQHandler+0x140>
 800aac8:	7cfb      	ldrb	r3, [r7, #19]
 800aaca:	2b04      	cmp	r3, #4
 800aacc:	d004      	beq.n	800aad8 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aad2:	69db      	ldr	r3, [r3, #28]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d007      	beq.n	800aae8 <HAL_SPI_IRQHandler+0x140>
 800aad8:	7cfb      	ldrb	r3, [r7, #19]
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d059      	beq.n	800ab92 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aae2:	69db      	ldr	r3, [r3, #28]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d154      	bne.n	800ab92 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d13d      	bne.n	800ab72 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800aaf6:	e036      	b.n	800ab66 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	2b0f      	cmp	r3, #15
 800aafe:	d90b      	bls.n	800ab18 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ab0a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab10:	1d1a      	adds	r2, r3, #4
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	665a      	str	r2, [r3, #100]	; 0x64
 800ab16:	e01d      	b.n	800ab54 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	2b07      	cmp	r3, #7
 800ab1e:	d90b      	bls.n	800ab38 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	8812      	ldrh	r2, [r2, #0]
 800ab28:	b292      	uxth	r2, r2
 800ab2a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab30:	1c9a      	adds	r2, r3, #2
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	665a      	str	r2, [r3, #100]	; 0x64
 800ab36:	e00d      	b.n	800ab54 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab44:	7812      	ldrb	r2, [r2, #0]
 800ab46:	b2d2      	uxtb	r2, r2
 800ab48:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1c2      	bne.n	800aaf8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f9d6 	bl	800af24 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d003      	beq.n	800ab92 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f920 	bl	800add0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800ab90:	e0e4      	b.n	800ad5c <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ab92:	7cfb      	ldrb	r3, [r7, #19]
 800ab94:	2b05      	cmp	r3, #5
 800ab96:	d103      	bne.n	800aba0 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f8fb 	bl	800ad94 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 800ab9e:	e0da      	b.n	800ad56 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800aba0:	7cfb      	ldrb	r3, [r7, #19]
 800aba2:	2b04      	cmp	r3, #4
 800aba4:	d103      	bne.n	800abae <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 f8ea 	bl	800ad80 <HAL_SPI_RxCpltCallback>
    return;
 800abac:	e0d3      	b.n	800ad56 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800abae:	7cfb      	ldrb	r3, [r7, #19]
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	f040 80d0 	bne.w	800ad56 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f8d8 	bl	800ad6c <HAL_SPI_TxCpltCallback>
    return;
 800abbc:	e0cb      	b.n	800ad56 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00d      	beq.n	800abe4 <HAL_SPI_IRQHandler+0x23c>
 800abc8:	6a3b      	ldr	r3, [r7, #32]
 800abca:	f003 0308 	and.w	r3, r3, #8
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d008      	beq.n	800abe4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	699a      	ldr	r2, [r3, #24]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abe0:	619a      	str	r2, [r3, #24]

    return;
 800abe2:	e0bb      	b.n	800ad5c <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800abea:	2b00      	cmp	r3, #0
 800abec:	f000 80b6 	beq.w	800ad5c <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00f      	beq.n	800ac1a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac00:	f043 0204 	orr.w	r2, r3, #4
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	699a      	ldr	r2, [r3, #24]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac18:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00f      	beq.n	800ac44 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac2a:	f043 0201 	orr.w	r2, r3, #1
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	699a      	ldr	r2, [r3, #24]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac42:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00f      	beq.n	800ac6e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac54:	f043 0208 	orr.w	r2, r3, #8
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	699a      	ldr	r2, [r3, #24]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac6c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	f003 0320 	and.w	r3, r3, #32
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00f      	beq.n	800ac98 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac7e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	699a      	ldr	r2, [r3, #24]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f042 0220 	orr.w	r2, r2, #32
 800ac96:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d05b      	beq.n	800ad5a <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f022 0201 	bic.w	r2, r2, #1
 800acb0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6919      	ldr	r1, [r3, #16]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	4b29      	ldr	r3, [pc, #164]	; (800ad64 <HAL_SPI_IRQHandler+0x3bc>)
 800acbe:	400b      	ands	r3, r1
 800acc0:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800acc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800accc:	d138      	bne.n	800ad40 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	689a      	ldr	r2, [r3, #8]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800acdc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d013      	beq.n	800ad0e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acea:	4a1f      	ldr	r2, [pc, #124]	; (800ad68 <HAL_SPI_IRQHandler+0x3c0>)
 800acec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7f7 ff10 	bl	8002b18 <HAL_DMA_Abort_IT>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d007      	beq.n	800ad0e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d021      	beq.n	800ad5a <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad1a:	4a13      	ldr	r2, [pc, #76]	; (800ad68 <HAL_SPI_IRQHandler+0x3c0>)
 800ad1c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7f7 fef8 	bl	8002b18 <HAL_DMA_Abort_IT>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d015      	beq.n	800ad5a <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ad3e:	e00c      	b.n	800ad5a <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f841 	bl	800add0 <HAL_SPI_ErrorCallback>
    return;
 800ad4e:	bf00      	nop
 800ad50:	e003      	b.n	800ad5a <HAL_SPI_IRQHandler+0x3b2>
    return;
 800ad52:	bf00      	nop
 800ad54:	e002      	b.n	800ad5c <HAL_SPI_IRQHandler+0x3b4>
    return;
 800ad56:	bf00      	nop
 800ad58:	e000      	b.n	800ad5c <HAL_SPI_IRQHandler+0x3b4>
    return;
 800ad5a:	bf00      	nop
  }
}
 800ad5c:	3728      	adds	r7, #40	; 0x28
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	fffffc94 	.word	0xfffffc94
 800ad68:	0800aeef 	.word	0x0800aeef

0800ad6c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ad88:	bf00      	nop
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	2b07      	cmp	r3, #7
 800adfc:	d011      	beq.n	800ae22 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae02:	69db      	ldr	r3, [r3, #28]
 800ae04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae08:	d103      	bne.n	800ae12 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f7ff ffb8 	bl	800ad80 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800ae10:	e007      	b.n	800ae22 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	691a      	ldr	r2, [r3, #16]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f042 0208 	orr.w	r2, r2, #8
 800ae20:	611a      	str	r2, [r3, #16]
}
 800ae22:	bf00      	nop
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b084      	sub	sp, #16
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae36:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	2b07      	cmp	r3, #7
 800ae42:	d011      	beq.n	800ae68 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae48:	69db      	ldr	r3, [r3, #28]
 800ae4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae4e:	d103      	bne.n	800ae58 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f7ff ff9f 	bl	800ad94 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800ae56:	e007      	b.n	800ae68 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	691a      	ldr	r2, [r3, #16]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f042 0208 	orr.w	r2, r2, #8
 800ae66:	611a      	str	r2, [r3, #16]
}
 800ae68:	bf00      	nop
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f7ff ff92 	bl	800ada8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae84:	bf00      	nop
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae98:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f7ff ff8e 	bl	800adbc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aea0:	bf00      	nop
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb4:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7f8 ff9c 	bl	8003df4 <HAL_DMA_GetError>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	d011      	beq.n	800aee6 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 f82e 	bl	800af24 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aece:	f043 0210 	orr.w	r2, r3, #16
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f7ff ff75 	bl	800add0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800aee6:	bf00      	nop
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefa:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f7ff ff5b 	bl	800add0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af1a:	bf00      	nop
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
	...

0800af24 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	699a      	ldr	r2, [r3, #24]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f042 0208 	orr.w	r2, r2, #8
 800af42:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	699a      	ldr	r2, [r3, #24]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f042 0210 	orr.w	r2, r2, #16
 800af52:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f022 0201 	bic.w	r2, r2, #1
 800af62:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6919      	ldr	r1, [r3, #16]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	4b3c      	ldr	r3, [pc, #240]	; (800b060 <SPI_CloseTransfer+0x13c>)
 800af70:	400b      	ands	r3, r1
 800af72:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	689a      	ldr	r2, [r3, #8]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800af82:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b04      	cmp	r3, #4
 800af8e:	d014      	beq.n	800afba <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f003 0320 	and.w	r3, r3, #32
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00f      	beq.n	800afba <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afa0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	699a      	ldr	r2, [r3, #24]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f042 0220 	orr.w	r2, r2, #32
 800afb8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d014      	beq.n	800aff0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00f      	beq.n	800aff0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afd6:	f043 0204 	orr.w	r2, r3, #4
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	699a      	ldr	r2, [r3, #24]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00f      	beq.n	800b01a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b000:	f043 0201 	orr.w	r2, r3, #1
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	699a      	ldr	r2, [r3, #24]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b018:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00f      	beq.n	800b044 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b02a:	f043 0208 	orr.w	r2, r3, #8
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	699a      	ldr	r2, [r3, #24]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b042:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b054:	bf00      	nop
 800b056:	3714      	adds	r7, #20
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	fffffc90 	.word	0xfffffc90

0800b064 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b070:	095b      	lsrs	r3, r3, #5
 800b072:	3301      	adds	r3, #1
 800b074:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	3301      	adds	r3, #1
 800b07c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	3307      	adds	r3, #7
 800b082:	08db      	lsrs	r3, r3, #3
 800b084:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
	...

0800b09c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d121      	bne.n	800b0f2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	4b27      	ldr	r3, [pc, #156]	; (800b150 <FMC_SDRAM_Init+0xb4>)
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	683a      	ldr	r2, [r7, #0]
 800b0b8:	6851      	ldr	r1, [r2, #4]
 800b0ba:	683a      	ldr	r2, [r7, #0]
 800b0bc:	6892      	ldr	r2, [r2, #8]
 800b0be:	4311      	orrs	r1, r2
 800b0c0:	683a      	ldr	r2, [r7, #0]
 800b0c2:	68d2      	ldr	r2, [r2, #12]
 800b0c4:	4311      	orrs	r1, r2
 800b0c6:	683a      	ldr	r2, [r7, #0]
 800b0c8:	6912      	ldr	r2, [r2, #16]
 800b0ca:	4311      	orrs	r1, r2
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	6952      	ldr	r2, [r2, #20]
 800b0d0:	4311      	orrs	r1, r2
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	6992      	ldr	r2, [r2, #24]
 800b0d6:	4311      	orrs	r1, r2
 800b0d8:	683a      	ldr	r2, [r7, #0]
 800b0da:	69d2      	ldr	r2, [r2, #28]
 800b0dc:	4311      	orrs	r1, r2
 800b0de:	683a      	ldr	r2, [r7, #0]
 800b0e0:	6a12      	ldr	r2, [r2, #32]
 800b0e2:	4311      	orrs	r1, r2
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b0e8:	430a      	orrs	r2, r1
 800b0ea:	431a      	orrs	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	e026      	b.n	800b140 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	69d9      	ldr	r1, [r3, #28]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	4319      	orrs	r1, r3
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b108:	430b      	orrs	r3, r1
 800b10a:	431a      	orrs	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	4b0e      	ldr	r3, [pc, #56]	; (800b150 <FMC_SDRAM_Init+0xb4>)
 800b116:	4013      	ands	r3, r2
 800b118:	683a      	ldr	r2, [r7, #0]
 800b11a:	6851      	ldr	r1, [r2, #4]
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	6892      	ldr	r2, [r2, #8]
 800b120:	4311      	orrs	r1, r2
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	68d2      	ldr	r2, [r2, #12]
 800b126:	4311      	orrs	r1, r2
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	6912      	ldr	r2, [r2, #16]
 800b12c:	4311      	orrs	r1, r2
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	6952      	ldr	r2, [r2, #20]
 800b132:	4311      	orrs	r1, r2
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	6992      	ldr	r2, [r2, #24]
 800b138:	430a      	orrs	r2, r1
 800b13a:	431a      	orrs	r2, r3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	ffff8000 	.word	0xffff8000

0800b154 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d128      	bne.n	800b1b8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	1e59      	subs	r1, r3, #1
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	3b01      	subs	r3, #1
 800b17a:	011b      	lsls	r3, r3, #4
 800b17c:	4319      	orrs	r1, r3
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	3b01      	subs	r3, #1
 800b184:	021b      	lsls	r3, r3, #8
 800b186:	4319      	orrs	r1, r3
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	3b01      	subs	r3, #1
 800b18e:	031b      	lsls	r3, r3, #12
 800b190:	4319      	orrs	r1, r3
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	3b01      	subs	r3, #1
 800b198:	041b      	lsls	r3, r3, #16
 800b19a:	4319      	orrs	r1, r3
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	695b      	ldr	r3, [r3, #20]
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	051b      	lsls	r3, r3, #20
 800b1a4:	4319      	orrs	r1, r3
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	699b      	ldr	r3, [r3, #24]
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	061b      	lsls	r3, r3, #24
 800b1ae:	430b      	orrs	r3, r1
 800b1b0:	431a      	orrs	r2, r3
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	609a      	str	r2, [r3, #8]
 800b1b6:	e02d      	b.n	800b214 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	689a      	ldr	r2, [r3, #8]
 800b1bc:	4b19      	ldr	r3, [pc, #100]	; (800b224 <FMC_SDRAM_Timing_Init+0xd0>)
 800b1be:	4013      	ands	r3, r2
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	68d2      	ldr	r2, [r2, #12]
 800b1c4:	3a01      	subs	r2, #1
 800b1c6:	0311      	lsls	r1, r2, #12
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	6952      	ldr	r2, [r2, #20]
 800b1cc:	3a01      	subs	r2, #1
 800b1ce:	0512      	lsls	r2, r2, #20
 800b1d0:	430a      	orrs	r2, r1
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	1e59      	subs	r1, r3, #1
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	011b      	lsls	r3, r3, #4
 800b1ee:	4319      	orrs	r1, r3
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	021b      	lsls	r3, r3, #8
 800b1f8:	4319      	orrs	r1, r3
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	3b01      	subs	r3, #1
 800b200:	041b      	lsls	r3, r3, #16
 800b202:	4319      	orrs	r1, r3
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	699b      	ldr	r3, [r3, #24]
 800b208:	3b01      	subs	r3, #1
 800b20a:	061b      	lsls	r3, r3, #24
 800b20c:	430b      	orrs	r3, r1
 800b20e:	431a      	orrs	r2, r3
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	ff0f0fff 	.word	0xff0f0fff

0800b228 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	691a      	ldr	r2, [r3, #16]
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	6819      	ldr	r1, [r3, #0]
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	4319      	orrs	r1, r3
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	3b01      	subs	r3, #1
 800b248:	015b      	lsls	r3, r3, #5
 800b24a:	4319      	orrs	r1, r3
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	025b      	lsls	r3, r3, #9
 800b252:	430b      	orrs	r3, r1
 800b254:	431a      	orrs	r2, r3
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	611a      	str	r2, [r3, #16]
                          (Command->CommandTarget)                                               |
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	695a      	ldr	r2, [r3, #20]
 800b276:	4b07      	ldr	r3, [pc, #28]	; (800b294 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b278:	4013      	ands	r3, r2
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	0052      	lsls	r2, r2, #1
 800b27e:	431a      	orrs	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	ffffc001 	.word	0xffffc001

0800b298 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b298:	b084      	sub	sp, #16
 800b29a:	b480      	push	{r7}
 800b29c:	b085      	sub	sp, #20
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	f107 001c 	add.w	r0, r7, #28
 800b2a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b2ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b2b2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b2b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b2ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b2be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	685a      	ldr	r2, [r3, #4]
 800b2ca:	4b07      	ldr	r3, [pc, #28]	; (800b2e8 <SDMMC_Init+0x50>)
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	431a      	orrs	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	b004      	add	sp, #16
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	ffc02c00 	.word	0xffc02c00

0800b2ec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b306:	b480      	push	{r7}
 800b308:	b083      	sub	sp, #12
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f043 0203 	orr.w	r2, r3, #3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b34a:	b480      	push	{r7}
 800b34c:	b083      	sub	sp, #12
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 0303 	and.w	r3, r3, #3
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
	...

0800b368 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b386:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b38c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b392:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	4313      	orrs	r3, r2
 800b398:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68da      	ldr	r2, [r3, #12]
 800b39e:	4b06      	ldr	r3, [pc, #24]	; (800b3b8 <SDMMC_SendCommand+0x50>)
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	431a      	orrs	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr
 800b3b8:	fffee0c0 	.word	0xfffee0c0

0800b3bc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	b2db      	uxtb	r3, r3
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b085      	sub	sp, #20
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	3314      	adds	r3, #20
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b406:	2300      	movs	r3, #0
 800b408:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	685a      	ldr	r2, [r3, #4]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b422:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b428:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b42e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	4313      	orrs	r3, r2
 800b434:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	431a      	orrs	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b446:	2300      	movs	r3, #0

}
 800b448:	4618      	mov	r0, r3
 800b44a:	3714      	adds	r7, #20
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b088      	sub	sp, #32
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b462:	2310      	movs	r3, #16
 800b464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b46a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b46c:	2300      	movs	r3, #0
 800b46e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b474:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b476:	f107 0308 	add.w	r3, r7, #8
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff ff73 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b482:	f241 3288 	movw	r2, #5000	; 0x1388
 800b486:	2110      	movs	r1, #16
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 faab 	bl	800b9e4 <SDMMC_GetCmdResp1>
 800b48e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b490:	69fb      	ldr	r3, [r7, #28]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3720      	adds	r7, #32
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b088      	sub	sp, #32
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b4a8:	2311      	movs	r3, #17
 800b4aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4bc:	f107 0308 	add.w	r3, r7, #8
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7ff ff50 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b4c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4cc:	2111      	movs	r1, #17
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fa88 	bl	800b9e4 <SDMMC_GetCmdResp1>
 800b4d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4d6:	69fb      	ldr	r3, [r7, #28]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3720      	adds	r7, #32
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b088      	sub	sp, #32
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b4ee:	2312      	movs	r3, #18
 800b4f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b500:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b502:	f107 0308 	add.w	r3, r7, #8
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7ff ff2d 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b50e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b512:	2112      	movs	r1, #18
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fa65 	bl	800b9e4 <SDMMC_GetCmdResp1>
 800b51a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b51c:	69fb      	ldr	r3, [r7, #28]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3720      	adds	r7, #32
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b088      	sub	sp, #32
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b534:	2318      	movs	r3, #24
 800b536:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b53c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b53e:	2300      	movs	r3, #0
 800b540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b546:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b548:	f107 0308 	add.w	r3, r7, #8
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f7ff ff0a 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b554:	f241 3288 	movw	r2, #5000	; 0x1388
 800b558:	2118      	movs	r1, #24
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fa42 	bl	800b9e4 <SDMMC_GetCmdResp1>
 800b560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b562:	69fb      	ldr	r3, [r7, #28]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3720      	adds	r7, #32
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b57a:	2319      	movs	r3, #25
 800b57c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b57e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b584:	2300      	movs	r3, #0
 800b586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b58c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b58e:	f107 0308 	add.w	r3, r7, #8
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7ff fee7 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b59a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b59e:	2119      	movs	r1, #25
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 fa1f 	bl	800b9e4 <SDMMC_GetCmdResp1>
 800b5a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5a8:	69fb      	ldr	r3, [r7, #28]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3720      	adds	r7, #32
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
	...

0800b5b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b088      	sub	sp, #32
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b5c0:	230c      	movs	r3, #12
 800b5c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5d2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5ec:	f107 0308 	add.w	r3, r7, #8
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7ff feb8 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b5f8:	4a0b      	ldr	r2, [pc, #44]	; (800b628 <SDMMC_CmdStopTransfer+0x74>)
 800b5fa:	210c      	movs	r1, #12
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 f9f1 	bl	800b9e4 <SDMMC_GetCmdResp1>
 800b602:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b616:	d101      	bne.n	800b61c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b618:	2300      	movs	r3, #0
 800b61a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b61c:	69fb      	ldr	r3, [r7, #28]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3720      	adds	r7, #32
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	05f5e100 	.word	0x05f5e100

0800b62c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b08a      	sub	sp, #40	; 0x28
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b63c:	2307      	movs	r3, #7
 800b63e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b640:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b644:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b646:	2300      	movs	r3, #0
 800b648:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b64a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b64e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b650:	f107 0310 	add.w	r3, r7, #16
 800b654:	4619      	mov	r1, r3
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f7ff fe86 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b65c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b660:	2107      	movs	r1, #7
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f000 f9be 	bl	800b9e4 <SDMMC_GetCmdResp1>
 800b668:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3728      	adds	r7, #40	; 0x28
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b67c:	2300      	movs	r3, #0
 800b67e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b680:	2300      	movs	r3, #0
 800b682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b684:	2300      	movs	r3, #0
 800b686:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b688:	2300      	movs	r3, #0
 800b68a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b68c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b690:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b692:	f107 0308 	add.w	r3, r7, #8
 800b696:	4619      	mov	r1, r3
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7ff fe65 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 f976 	bl	800b990 <SDMMC_GetCmdError>
 800b6a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6a6:	69fb      	ldr	r3, [r7, #28]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3720      	adds	r7, #32
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b6b8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b6bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b6be:	2308      	movs	r3, #8
 800b6c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6d2:	f107 0308 	add.w	r3, r7, #8
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7ff fe45 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 fb6a 	bl	800bdb8 <SDMMC_GetCmdResp7>
 800b6e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6e6:	69fb      	ldr	r3, [r7, #28]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3720      	adds	r7, #32
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b088      	sub	sp, #32
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b6fe:	2337      	movs	r3, #55	; 0x37
 800b700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b702:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b708:	2300      	movs	r3, #0
 800b70a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b70c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b710:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b712:	f107 0308 	add.w	r3, r7, #8
 800b716:	4619      	mov	r1, r3
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7ff fe25 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b71e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b722:	2137      	movs	r1, #55	; 0x37
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f95d 	bl	800b9e4 <SDMMC_GetCmdResp1>
 800b72a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b72c:	69fb      	ldr	r3, [r7, #28]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3720      	adds	r7, #32
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b088      	sub	sp, #32
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b744:	2329      	movs	r3, #41	; 0x29
 800b746:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b74c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b74e:	2300      	movs	r3, #0
 800b750:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b756:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b758:	f107 0308 	add.w	r3, r7, #8
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7ff fe02 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fa75 	bl	800bc54 <SDMMC_GetCmdResp3>
 800b76a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b76c:	69fb      	ldr	r3, [r7, #28]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3720      	adds	r7, #32
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b088      	sub	sp, #32
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b784:	2306      	movs	r3, #6
 800b786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b78c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b78e:	2300      	movs	r3, #0
 800b790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b796:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b798:	f107 0308 	add.w	r3, r7, #8
 800b79c:	4619      	mov	r1, r3
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7ff fde2 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b7a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7a8:	2106      	movs	r1, #6
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 f91a 	bl	800b9e4 <SDMMC_GetCmdResp1>
 800b7b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7b2:	69fb      	ldr	r3, [r7, #28]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3720      	adds	r7, #32
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b088      	sub	sp, #32
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b7c8:	2333      	movs	r3, #51	; 0x33
 800b7ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7dc:	f107 0308 	add.w	r3, r7, #8
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f7ff fdc0 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b7e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7ec:	2133      	movs	r1, #51	; 0x33
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f8f8 	bl	800b9e4 <SDMMC_GetCmdResp1>
 800b7f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7f6:	69fb      	ldr	r3, [r7, #28]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3720      	adds	r7, #32
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b088      	sub	sp, #32
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b808:	2300      	movs	r3, #0
 800b80a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b80c:	2302      	movs	r3, #2
 800b80e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b810:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b816:	2300      	movs	r3, #0
 800b818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b81a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b81e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b820:	f107 0308 	add.w	r3, r7, #8
 800b824:	4619      	mov	r1, r3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f7ff fd9e 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 f9c9 	bl	800bbc4 <SDMMC_GetCmdResp2>
 800b832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b834:	69fb      	ldr	r3, [r7, #28]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3720      	adds	r7, #32
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b088      	sub	sp, #32
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b84c:	2309      	movs	r3, #9
 800b84e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b850:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b856:	2300      	movs	r3, #0
 800b858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b85a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b85e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b860:	f107 0308 	add.w	r3, r7, #8
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7ff fd7e 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f9a9 	bl	800bbc4 <SDMMC_GetCmdResp2>
 800b872:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b874:	69fb      	ldr	r3, [r7, #28]
}
 800b876:	4618      	mov	r0, r3
 800b878:	3720      	adds	r7, #32
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b088      	sub	sp, #32
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b888:	2300      	movs	r3, #0
 800b88a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b88c:	2303      	movs	r3, #3
 800b88e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b890:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b896:	2300      	movs	r3, #0
 800b898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b89a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b89e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8a0:	f107 0308 	add.w	r3, r7, #8
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7ff fd5e 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b8ac:	683a      	ldr	r2, [r7, #0]
 800b8ae:	2103      	movs	r1, #3
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 fa0b 	bl	800bccc <SDMMC_GetCmdResp6>
 800b8b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8b8:	69fb      	ldr	r3, [r7, #28]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3720      	adds	r7, #32
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b088      	sub	sp, #32
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b8d0:	230d      	movs	r3, #13
 800b8d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8e4:	f107 0308 	add.w	r3, r7, #8
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7ff fd3c 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b8f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8f4:	210d      	movs	r1, #13
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 f874 	bl	800b9e4 <SDMMC_GetCmdResp1>
 800b8fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8fe:	69fb      	ldr	r3, [r7, #28]
}
 800b900:	4618      	mov	r0, r3
 800b902:	3720      	adds	r7, #32
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b088      	sub	sp, #32
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b910:	2300      	movs	r3, #0
 800b912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b914:	230d      	movs	r3, #13
 800b916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b91c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b91e:	2300      	movs	r3, #0
 800b920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b926:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b928:	f107 0308 	add.w	r3, r7, #8
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7ff fd1a 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b934:	f241 3288 	movw	r2, #5000	; 0x1388
 800b938:	210d      	movs	r1, #13
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f852 	bl	800b9e4 <SDMMC_GetCmdResp1>
 800b940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b942:	69fb      	ldr	r3, [r7, #28]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3720      	adds	r7, #32
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b088      	sub	sp, #32
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b954:	2300      	movs	r3, #0
 800b956:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b958:	230b      	movs	r3, #11
 800b95a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b95c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b962:	2300      	movs	r3, #0
 800b964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b96a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b96c:	f107 0308 	add.w	r3, r7, #8
 800b970:	4619      	mov	r1, r3
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7ff fcf8 	bl	800b368 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b978:	f241 3288 	movw	r2, #5000	; 0x1388
 800b97c:	210b      	movs	r1, #11
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 f830 	bl	800b9e4 <SDMMC_GetCmdResp1>
 800b984:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b986:	69fb      	ldr	r3, [r7, #28]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3720      	adds	r7, #32
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b990:	b490      	push	{r4, r7}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b998:	4b0f      	ldr	r3, [pc, #60]	; (800b9d8 <SDMMC_GetCmdError+0x48>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a0f      	ldr	r2, [pc, #60]	; (800b9dc <SDMMC_GetCmdError+0x4c>)
 800b99e:	fba2 2303 	umull	r2, r3, r2, r3
 800b9a2:	0a5b      	lsrs	r3, r3, #9
 800b9a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9a8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b9ac:	4623      	mov	r3, r4
 800b9ae:	1e5c      	subs	r4, r3, #1
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d102      	bne.n	800b9ba <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9b8:	e009      	b.n	800b9ce <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0f2      	beq.n	800b9ac <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a05      	ldr	r2, [pc, #20]	; (800b9e0 <SDMMC_GetCmdError+0x50>)
 800b9ca:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bc90      	pop	{r4, r7}
 800b9d6:	4770      	bx	lr
 800b9d8:	20000010 	.word	0x20000010
 800b9dc:	10624dd3 	.word	0x10624dd3
 800b9e0:	002000c5 	.word	0x002000c5

0800b9e4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b9e4:	b590      	push	{r4, r7, lr}
 800b9e6:	b087      	sub	sp, #28
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b9f2:	4b6f      	ldr	r3, [pc, #444]	; (800bbb0 <SDMMC_GetCmdResp1+0x1cc>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a6f      	ldr	r2, [pc, #444]	; (800bbb4 <SDMMC_GetCmdResp1+0x1d0>)
 800b9f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b9fc:	0a5b      	lsrs	r3, r3, #9
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800ba04:	4623      	mov	r3, r4
 800ba06:	1e5c      	subs	r4, r3, #1
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d102      	bne.n	800ba12 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba10:	e0c9      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba16:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ba18:	697a      	ldr	r2, [r7, #20]
 800ba1a:	4b67      	ldr	r3, [pc, #412]	; (800bbb8 <SDMMC_GetCmdResp1+0x1d4>)
 800ba1c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d0f0      	beq.n	800ba04 <SDMMC_GetCmdResp1+0x20>
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1eb      	bne.n	800ba04 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba30:	f003 0304 	and.w	r3, r3, #4
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d004      	beq.n	800ba42 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2204      	movs	r2, #4
 800ba3c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba3e:	2304      	movs	r3, #4
 800ba40:	e0b1      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba46:	f003 0301 	and.w	r3, r3, #1
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d004      	beq.n	800ba58 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2201      	movs	r2, #1
 800ba52:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba54:	2301      	movs	r3, #1
 800ba56:	e0a6      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	4a58      	ldr	r2, [pc, #352]	; (800bbbc <SDMMC_GetCmdResp1+0x1d8>)
 800ba5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f7ff fcac 	bl	800b3bc <SDMMC_GetCommandResponse>
 800ba64:	4603      	mov	r3, r0
 800ba66:	461a      	mov	r2, r3
 800ba68:	7afb      	ldrb	r3, [r7, #11]
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d001      	beq.n	800ba72 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e099      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba72:	2100      	movs	r1, #0
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f7ff fcae 	bl	800b3d6 <SDMMC_GetResponse>
 800ba7a:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	4b50      	ldr	r3, [pc, #320]	; (800bbc0 <SDMMC_GetCmdResp1+0x1dc>)
 800ba80:	4013      	ands	r3, r2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800ba86:	2300      	movs	r3, #0
 800ba88:	e08d      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	da02      	bge.n	800ba96 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ba90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba94:	e087      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d001      	beq.n	800baa4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800baa0:	2340      	movs	r3, #64	; 0x40
 800baa2:	e080      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800baae:	2380      	movs	r3, #128	; 0x80
 800bab0:	e079      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d002      	beq.n	800bac2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800babc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bac0:	e071      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d002      	beq.n	800bad2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bacc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bad0:	e069      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d002      	beq.n	800bae2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800badc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bae0:	e061      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d002      	beq.n	800baf2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800baec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800baf0:	e059      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d002      	beq.n	800bb02 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bafc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb00:	e051      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb10:	e049      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d002      	beq.n	800bb22 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb20:	e041      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bb2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb30:	e039      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bb40:	e031      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb50:	e029      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb60:	e021      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d002      	beq.n	800bb72 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bb70:	e019      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d002      	beq.n	800bb82 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bb80:	e011      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d002      	beq.n	800bb92 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bb8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bb90:	e009      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	f003 0308 	and.w	r3, r3, #8
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bb9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bba0:	e001      	b.n	800bba6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	371c      	adds	r7, #28
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd90      	pop	{r4, r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20000010 	.word	0x20000010
 800bbb4:	10624dd3 	.word	0x10624dd3
 800bbb8:	00200045 	.word	0x00200045
 800bbbc:	002000c5 	.word	0x002000c5
 800bbc0:	fdffe008 	.word	0xfdffe008

0800bbc4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bbc4:	b490      	push	{r4, r7}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbcc:	4b1e      	ldr	r3, [pc, #120]	; (800bc48 <SDMMC_GetCmdResp2+0x84>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4a1e      	ldr	r2, [pc, #120]	; (800bc4c <SDMMC_GetCmdResp2+0x88>)
 800bbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbd6:	0a5b      	lsrs	r3, r3, #9
 800bbd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbdc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bbe0:	4623      	mov	r3, r4
 800bbe2:	1e5c      	subs	r4, r3, #1
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d102      	bne.n	800bbee <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbe8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbec:	e026      	b.n	800bc3c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d0f0      	beq.n	800bbe0 <SDMMC_GetCmdResp2+0x1c>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1eb      	bne.n	800bbe0 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc0c:	f003 0304 	and.w	r3, r3, #4
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d004      	beq.n	800bc1e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2204      	movs	r2, #4
 800bc18:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc1a:	2304      	movs	r3, #4
 800bc1c:	e00e      	b.n	800bc3c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc22:	f003 0301 	and.w	r3, r3, #1
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d004      	beq.n	800bc34 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e003      	b.n	800bc3c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a06      	ldr	r2, [pc, #24]	; (800bc50 <SDMMC_GetCmdResp2+0x8c>)
 800bc38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bc90      	pop	{r4, r7}
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	20000010 	.word	0x20000010
 800bc4c:	10624dd3 	.word	0x10624dd3
 800bc50:	002000c5 	.word	0x002000c5

0800bc54 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bc54:	b490      	push	{r4, r7}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc5c:	4b18      	ldr	r3, [pc, #96]	; (800bcc0 <SDMMC_GetCmdResp3+0x6c>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a18      	ldr	r2, [pc, #96]	; (800bcc4 <SDMMC_GetCmdResp3+0x70>)
 800bc62:	fba2 2303 	umull	r2, r3, r2, r3
 800bc66:	0a5b      	lsrs	r3, r3, #9
 800bc68:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc6c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bc70:	4623      	mov	r3, r4
 800bc72:	1e5c      	subs	r4, r3, #1
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d102      	bne.n	800bc7e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc7c:	e01b      	b.n	800bcb6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc82:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d0f0      	beq.n	800bc70 <SDMMC_GetCmdResp3+0x1c>
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1eb      	bne.n	800bc70 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9c:	f003 0304 	and.w	r3, r3, #4
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d004      	beq.n	800bcae <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2204      	movs	r2, #4
 800bca8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcaa:	2304      	movs	r3, #4
 800bcac:	e003      	b.n	800bcb6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a05      	ldr	r2, [pc, #20]	; (800bcc8 <SDMMC_GetCmdResp3+0x74>)
 800bcb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bc90      	pop	{r4, r7}
 800bcbe:	4770      	bx	lr
 800bcc0:	20000010 	.word	0x20000010
 800bcc4:	10624dd3 	.word	0x10624dd3
 800bcc8:	002000c5 	.word	0x002000c5

0800bccc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bccc:	b590      	push	{r4, r7, lr}
 800bcce:	b087      	sub	sp, #28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bcda:	4b34      	ldr	r3, [pc, #208]	; (800bdac <SDMMC_GetCmdResp6+0xe0>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a34      	ldr	r2, [pc, #208]	; (800bdb0 <SDMMC_GetCmdResp6+0xe4>)
 800bce0:	fba2 2303 	umull	r2, r3, r2, r3
 800bce4:	0a5b      	lsrs	r3, r3, #9
 800bce6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcea:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bcee:	4623      	mov	r3, r4
 800bcf0:	1e5c      	subs	r4, r3, #1
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d102      	bne.n	800bcfc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcf6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcfa:	e052      	b.n	800bda2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd00:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d0f0      	beq.n	800bcee <SDMMC_GetCmdResp6+0x22>
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1eb      	bne.n	800bcee <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1a:	f003 0304 	and.w	r3, r3, #4
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d004      	beq.n	800bd2c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2204      	movs	r2, #4
 800bd26:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd28:	2304      	movs	r3, #4
 800bd2a:	e03a      	b.n	800bda2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd30:	f003 0301 	and.w	r3, r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d004      	beq.n	800bd42 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e02f      	b.n	800bda2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f7ff fb3a 	bl	800b3bc <SDMMC_GetCommandResponse>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	7afb      	ldrb	r3, [r7, #11]
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d001      	beq.n	800bd56 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd52:	2301      	movs	r3, #1
 800bd54:	e025      	b.n	800bda2 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	4a16      	ldr	r2, [pc, #88]	; (800bdb4 <SDMMC_GetCmdResp6+0xe8>)
 800bd5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bd5c:	2100      	movs	r1, #0
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f7ff fb39 	bl	800b3d6 <SDMMC_GetResponse>
 800bd64:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d106      	bne.n	800bd7e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	0c1b      	lsrs	r3, r3, #16
 800bd74:	b29a      	uxth	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	e011      	b.n	800bda2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d002      	beq.n	800bd8e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd8c:	e009      	b.n	800bda2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d002      	beq.n	800bd9e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd9c:	e001      	b.n	800bda2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bd9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	371c      	adds	r7, #28
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd90      	pop	{r4, r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	20000010 	.word	0x20000010
 800bdb0:	10624dd3 	.word	0x10624dd3
 800bdb4:	002000c5 	.word	0x002000c5

0800bdb8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bdb8:	b490      	push	{r4, r7}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdc0:	4b21      	ldr	r3, [pc, #132]	; (800be48 <SDMMC_GetCmdResp7+0x90>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a21      	ldr	r2, [pc, #132]	; (800be4c <SDMMC_GetCmdResp7+0x94>)
 800bdc6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdca:	0a5b      	lsrs	r3, r3, #9
 800bdcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdd0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bdd4:	4623      	mov	r3, r4
 800bdd6:	1e5c      	subs	r4, r3, #1
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d102      	bne.n	800bde2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bddc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bde0:	e02c      	b.n	800be3c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0f0      	beq.n	800bdd4 <SDMMC_GetCmdResp7+0x1c>
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1eb      	bne.n	800bdd4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be00:	f003 0304 	and.w	r3, r3, #4
 800be04:	2b00      	cmp	r3, #0
 800be06:	d004      	beq.n	800be12 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2204      	movs	r2, #4
 800be0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be0e:	2304      	movs	r3, #4
 800be10:	e014      	b.n	800be3c <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be16:	f003 0301 	and.w	r3, r3, #1
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d004      	beq.n	800be28 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2201      	movs	r2, #1
 800be22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be24:	2301      	movs	r3, #1
 800be26:	e009      	b.n	800be3c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be30:	2b00      	cmp	r3, #0
 800be32:	d002      	beq.n	800be3a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2240      	movs	r2, #64	; 0x40
 800be38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800be3a:	2300      	movs	r3, #0

}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bc90      	pop	{r4, r7}
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	20000010 	.word	0x20000010
 800be4c:	10624dd3 	.word	0x10624dd3

0800be50 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	4603      	mov	r3, r0
 800be58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800be5a:	79fb      	ldrb	r3, [r7, #7]
 800be5c:	4a08      	ldr	r2, [pc, #32]	; (800be80 <disk_status+0x30>)
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	4413      	add	r3, r2
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	79fa      	ldrb	r2, [r7, #7]
 800be68:	4905      	ldr	r1, [pc, #20]	; (800be80 <disk_status+0x30>)
 800be6a:	440a      	add	r2, r1
 800be6c:	7a12      	ldrb	r2, [r2, #8]
 800be6e:	4610      	mov	r0, r2
 800be70:	4798      	blx	r3
 800be72:	4603      	mov	r3, r0
 800be74:	73fb      	strb	r3, [r7, #15]
  return stat;
 800be76:	7bfb      	ldrb	r3, [r7, #15]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	2000025c 	.word	0x2000025c

0800be84 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	4603      	mov	r3, r0
 800be8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800be92:	79fb      	ldrb	r3, [r7, #7]
 800be94:	4a0d      	ldr	r2, [pc, #52]	; (800becc <disk_initialize+0x48>)
 800be96:	5cd3      	ldrb	r3, [r2, r3]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d111      	bne.n	800bec0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800be9c:	79fb      	ldrb	r3, [r7, #7]
 800be9e:	4a0b      	ldr	r2, [pc, #44]	; (800becc <disk_initialize+0x48>)
 800bea0:	2101      	movs	r1, #1
 800bea2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bea4:	79fb      	ldrb	r3, [r7, #7]
 800bea6:	4a09      	ldr	r2, [pc, #36]	; (800becc <disk_initialize+0x48>)
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	79fa      	ldrb	r2, [r7, #7]
 800beb2:	4906      	ldr	r1, [pc, #24]	; (800becc <disk_initialize+0x48>)
 800beb4:	440a      	add	r2, r1
 800beb6:	7a12      	ldrb	r2, [r2, #8]
 800beb8:	4610      	mov	r0, r2
 800beba:	4798      	blx	r3
 800bebc:	4603      	mov	r3, r0
 800bebe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	2000025c 	.word	0x2000025c

0800bed0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bed0:	b590      	push	{r4, r7, lr}
 800bed2:	b087      	sub	sp, #28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60b9      	str	r1, [r7, #8]
 800bed8:	607a      	str	r2, [r7, #4]
 800beda:	603b      	str	r3, [r7, #0]
 800bedc:	4603      	mov	r3, r0
 800bede:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
 800bee2:	4a0a      	ldr	r2, [pc, #40]	; (800bf0c <disk_read+0x3c>)
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	4413      	add	r3, r2
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	689c      	ldr	r4, [r3, #8]
 800beec:	7bfb      	ldrb	r3, [r7, #15]
 800beee:	4a07      	ldr	r2, [pc, #28]	; (800bf0c <disk_read+0x3c>)
 800bef0:	4413      	add	r3, r2
 800bef2:	7a18      	ldrb	r0, [r3, #8]
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	68b9      	ldr	r1, [r7, #8]
 800befa:	47a0      	blx	r4
 800befc:	4603      	mov	r3, r0
 800befe:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf00:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	371c      	adds	r7, #28
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd90      	pop	{r4, r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	2000025c 	.word	0x2000025c

0800bf10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bf10:	b590      	push	{r4, r7, lr}
 800bf12:	b087      	sub	sp, #28
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	607a      	str	r2, [r7, #4]
 800bf1a:	603b      	str	r3, [r7, #0]
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
 800bf22:	4a0a      	ldr	r2, [pc, #40]	; (800bf4c <disk_write+0x3c>)
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4413      	add	r3, r2
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	68dc      	ldr	r4, [r3, #12]
 800bf2c:	7bfb      	ldrb	r3, [r7, #15]
 800bf2e:	4a07      	ldr	r2, [pc, #28]	; (800bf4c <disk_write+0x3c>)
 800bf30:	4413      	add	r3, r2
 800bf32:	7a18      	ldrb	r0, [r3, #8]
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	68b9      	ldr	r1, [r7, #8]
 800bf3a:	47a0      	blx	r4
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf40:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	371c      	adds	r7, #28
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd90      	pop	{r4, r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	2000025c 	.word	0x2000025c

0800bf50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	4603      	mov	r3, r0
 800bf58:	603a      	str	r2, [r7, #0]
 800bf5a:	71fb      	strb	r3, [r7, #7]
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bf60:	79fb      	ldrb	r3, [r7, #7]
 800bf62:	4a09      	ldr	r2, [pc, #36]	; (800bf88 <disk_ioctl+0x38>)
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4413      	add	r3, r2
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	79fa      	ldrb	r2, [r7, #7]
 800bf6e:	4906      	ldr	r1, [pc, #24]	; (800bf88 <disk_ioctl+0x38>)
 800bf70:	440a      	add	r2, r1
 800bf72:	7a10      	ldrb	r0, [r2, #8]
 800bf74:	79b9      	ldrb	r1, [r7, #6]
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	4798      	blx	r3
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	73fb      	strb	r3, [r7, #15]
  return res;
 800bf7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	2000025c 	.word	0x2000025c

0800bf8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	3301      	adds	r3, #1
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bf9c:	89fb      	ldrh	r3, [r7, #14]
 800bf9e:	021b      	lsls	r3, r3, #8
 800bfa0:	b21a      	sxth	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	b21b      	sxth	r3, r3
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	b21b      	sxth	r3, r3
 800bfac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bfae:	89fb      	ldrh	r3, [r7, #14]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3714      	adds	r7, #20
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	3303      	adds	r3, #3
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	021b      	lsls	r3, r3, #8
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	3202      	adds	r2, #2
 800bfd4:	7812      	ldrb	r2, [r2, #0]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	021b      	lsls	r3, r3, #8
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	3201      	adds	r2, #1
 800bfe2:	7812      	ldrb	r2, [r2, #0]
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	021b      	lsls	r3, r3, #8
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	7812      	ldrb	r2, [r2, #0]
 800bff0:	4313      	orrs	r3, r2
 800bff2:	60fb      	str	r3, [r7, #12]
	return rv;
 800bff4:	68fb      	ldr	r3, [r7, #12]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3714      	adds	r7, #20
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr

0800c002 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c002:	b480      	push	{r7}
 800c004:	b083      	sub	sp, #12
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	460b      	mov	r3, r1
 800c00c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	1c5a      	adds	r2, r3, #1
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	887a      	ldrh	r2, [r7, #2]
 800c016:	b2d2      	uxtb	r2, r2
 800c018:	701a      	strb	r2, [r3, #0]
 800c01a:	887b      	ldrh	r3, [r7, #2]
 800c01c:	0a1b      	lsrs	r3, r3, #8
 800c01e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	1c5a      	adds	r2, r3, #1
 800c024:	607a      	str	r2, [r7, #4]
 800c026:	887a      	ldrh	r2, [r7, #2]
 800c028:	b2d2      	uxtb	r2, r2
 800c02a:	701a      	strb	r2, [r3, #0]
}
 800c02c:	bf00      	nop
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	1c5a      	adds	r2, r3, #1
 800c046:	607a      	str	r2, [r7, #4]
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	b2d2      	uxtb	r2, r2
 800c04c:	701a      	strb	r2, [r3, #0]
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	0a1b      	lsrs	r3, r3, #8
 800c052:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	1c5a      	adds	r2, r3, #1
 800c058:	607a      	str	r2, [r7, #4]
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	b2d2      	uxtb	r2, r2
 800c05e:	701a      	strb	r2, [r3, #0]
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	0a1b      	lsrs	r3, r3, #8
 800c064:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	1c5a      	adds	r2, r3, #1
 800c06a:	607a      	str	r2, [r7, #4]
 800c06c:	683a      	ldr	r2, [r7, #0]
 800c06e:	b2d2      	uxtb	r2, r2
 800c070:	701a      	strb	r2, [r3, #0]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	0a1b      	lsrs	r3, r3, #8
 800c076:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	1c5a      	adds	r2, r3, #1
 800c07c:	607a      	str	r2, [r7, #4]
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	b2d2      	uxtb	r2, r2
 800c082:	701a      	strb	r2, [r3, #0]
}
 800c084:	bf00      	nop
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c090:	b480      	push	{r7}
 800c092:	b087      	sub	sp, #28
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00d      	beq.n	800c0c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	1c53      	adds	r3, r2, #1
 800c0ae:	613b      	str	r3, [r7, #16]
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	1c59      	adds	r1, r3, #1
 800c0b4:	6179      	str	r1, [r7, #20]
 800c0b6:	7812      	ldrb	r2, [r2, #0]
 800c0b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	607b      	str	r3, [r7, #4]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1f1      	bne.n	800c0aa <mem_cpy+0x1a>
	}
}
 800c0c6:	bf00      	nop
 800c0c8:	371c      	adds	r7, #28
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c0d2:	b480      	push	{r7}
 800c0d4:	b087      	sub	sp, #28
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	60f8      	str	r0, [r7, #12]
 800c0da:	60b9      	str	r1, [r7, #8]
 800c0dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	1c5a      	adds	r2, r3, #1
 800c0e6:	617a      	str	r2, [r7, #20]
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	b2d2      	uxtb	r2, r2
 800c0ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	607b      	str	r3, [r7, #4]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1f3      	bne.n	800c0e2 <mem_set+0x10>
}
 800c0fa:	bf00      	nop
 800c0fc:	371c      	adds	r7, #28
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c106:	b480      	push	{r7}
 800c108:	b089      	sub	sp, #36	; 0x24
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	60f8      	str	r0, [r7, #12]
 800c10e:	60b9      	str	r1, [r7, #8]
 800c110:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	61fb      	str	r3, [r7, #28]
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c11a:	2300      	movs	r3, #0
 800c11c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	61fa      	str	r2, [r7, #28]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	4619      	mov	r1, r3
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	1c5a      	adds	r2, r3, #1
 800c12c:	61ba      	str	r2, [r7, #24]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	1acb      	subs	r3, r1, r3
 800c132:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	3b01      	subs	r3, #1
 800c138:	607b      	str	r3, [r7, #4]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <mem_cmp+0x40>
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d0eb      	beq.n	800c11e <mem_cmp+0x18>

	return r;
 800c146:	697b      	ldr	r3, [r7, #20]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3724      	adds	r7, #36	; 0x24
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c15e:	e002      	b.n	800c166 <chk_chr+0x12>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	3301      	adds	r3, #1
 800c164:	607b      	str	r3, [r7, #4]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d005      	beq.n	800c17a <chk_chr+0x26>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	461a      	mov	r2, r3
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	4293      	cmp	r3, r2
 800c178:	d1f2      	bne.n	800c160 <chk_chr+0xc>
	return *str;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	781b      	ldrb	r3, [r3, #0]
}
 800c17e:	4618      	mov	r0, r3
 800c180:	370c      	adds	r7, #12
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr
	...

0800c18c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c196:	2300      	movs	r3, #0
 800c198:	60bb      	str	r3, [r7, #8]
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	60fb      	str	r3, [r7, #12]
 800c19e:	e029      	b.n	800c1f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c1a0:	4a27      	ldr	r2, [pc, #156]	; (800c240 <chk_lock+0xb4>)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	011b      	lsls	r3, r3, #4
 800c1a6:	4413      	add	r3, r2
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d01d      	beq.n	800c1ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1ae:	4a24      	ldr	r2, [pc, #144]	; (800c240 <chk_lock+0xb4>)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	011b      	lsls	r3, r3, #4
 800c1b4:	4413      	add	r3, r2
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d116      	bne.n	800c1ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c1c0:	4a1f      	ldr	r2, [pc, #124]	; (800c240 <chk_lock+0xb4>)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	011b      	lsls	r3, r3, #4
 800c1c6:	4413      	add	r3, r2
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d10c      	bne.n	800c1ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c1d4:	4a1a      	ldr	r2, [pc, #104]	; (800c240 <chk_lock+0xb4>)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	011b      	lsls	r3, r3, #4
 800c1da:	4413      	add	r3, r2
 800c1dc:	3308      	adds	r3, #8
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d102      	bne.n	800c1ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c1e8:	e007      	b.n	800c1fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d9d2      	bls.n	800c1a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d109      	bne.n	800c214 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d102      	bne.n	800c20c <chk_lock+0x80>
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d101      	bne.n	800c210 <chk_lock+0x84>
 800c20c:	2300      	movs	r3, #0
 800c20e:	e010      	b.n	800c232 <chk_lock+0xa6>
 800c210:	2312      	movs	r3, #18
 800c212:	e00e      	b.n	800c232 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d108      	bne.n	800c22c <chk_lock+0xa0>
 800c21a:	4a09      	ldr	r2, [pc, #36]	; (800c240 <chk_lock+0xb4>)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	011b      	lsls	r3, r3, #4
 800c220:	4413      	add	r3, r2
 800c222:	330c      	adds	r3, #12
 800c224:	881b      	ldrh	r3, [r3, #0]
 800c226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c22a:	d101      	bne.n	800c230 <chk_lock+0xa4>
 800c22c:	2310      	movs	r3, #16
 800c22e:	e000      	b.n	800c232 <chk_lock+0xa6>
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3714      	adds	r7, #20
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	2000003c 	.word	0x2000003c

0800c244 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c24a:	2300      	movs	r3, #0
 800c24c:	607b      	str	r3, [r7, #4]
 800c24e:	e002      	b.n	800c256 <enq_lock+0x12>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	3301      	adds	r3, #1
 800c254:	607b      	str	r3, [r7, #4]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d806      	bhi.n	800c26a <enq_lock+0x26>
 800c25c:	4a09      	ldr	r2, [pc, #36]	; (800c284 <enq_lock+0x40>)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	011b      	lsls	r3, r3, #4
 800c262:	4413      	add	r3, r2
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1f2      	bne.n	800c250 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	bf14      	ite	ne
 800c270:	2301      	movne	r3, #1
 800c272:	2300      	moveq	r3, #0
 800c274:	b2db      	uxtb	r3, r3
}
 800c276:	4618      	mov	r0, r3
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	2000003c 	.word	0x2000003c

0800c288 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c292:	2300      	movs	r3, #0
 800c294:	60fb      	str	r3, [r7, #12]
 800c296:	e01f      	b.n	800c2d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c298:	4a41      	ldr	r2, [pc, #260]	; (800c3a0 <inc_lock+0x118>)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	011b      	lsls	r3, r3, #4
 800c29e:	4413      	add	r3, r2
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d113      	bne.n	800c2d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c2aa:	4a3d      	ldr	r2, [pc, #244]	; (800c3a0 <inc_lock+0x118>)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	011b      	lsls	r3, r3, #4
 800c2b0:	4413      	add	r3, r2
 800c2b2:	3304      	adds	r3, #4
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d109      	bne.n	800c2d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c2be:	4a38      	ldr	r2, [pc, #224]	; (800c3a0 <inc_lock+0x118>)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	011b      	lsls	r3, r3, #4
 800c2c4:	4413      	add	r3, r2
 800c2c6:	3308      	adds	r3, #8
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d006      	beq.n	800c2e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	60fb      	str	r3, [r7, #12]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d9dc      	bls.n	800c298 <inc_lock+0x10>
 800c2de:	e000      	b.n	800c2e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c2e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d132      	bne.n	800c34e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	60fb      	str	r3, [r7, #12]
 800c2ec:	e002      	b.n	800c2f4 <inc_lock+0x6c>
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	60fb      	str	r3, [r7, #12]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d806      	bhi.n	800c308 <inc_lock+0x80>
 800c2fa:	4a29      	ldr	r2, [pc, #164]	; (800c3a0 <inc_lock+0x118>)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	011b      	lsls	r3, r3, #4
 800c300:	4413      	add	r3, r2
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1f2      	bne.n	800c2ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d101      	bne.n	800c312 <inc_lock+0x8a>
 800c30e:	2300      	movs	r3, #0
 800c310:	e040      	b.n	800c394 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	4922      	ldr	r1, [pc, #136]	; (800c3a0 <inc_lock+0x118>)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	011b      	lsls	r3, r3, #4
 800c31c:	440b      	add	r3, r1
 800c31e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	689a      	ldr	r2, [r3, #8]
 800c324:	491e      	ldr	r1, [pc, #120]	; (800c3a0 <inc_lock+0x118>)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	011b      	lsls	r3, r3, #4
 800c32a:	440b      	add	r3, r1
 800c32c:	3304      	adds	r3, #4
 800c32e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	695a      	ldr	r2, [r3, #20]
 800c334:	491a      	ldr	r1, [pc, #104]	; (800c3a0 <inc_lock+0x118>)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	011b      	lsls	r3, r3, #4
 800c33a:	440b      	add	r3, r1
 800c33c:	3308      	adds	r3, #8
 800c33e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c340:	4a17      	ldr	r2, [pc, #92]	; (800c3a0 <inc_lock+0x118>)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	011b      	lsls	r3, r3, #4
 800c346:	4413      	add	r3, r2
 800c348:	330c      	adds	r3, #12
 800c34a:	2200      	movs	r2, #0
 800c34c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d009      	beq.n	800c368 <inc_lock+0xe0>
 800c354:	4a12      	ldr	r2, [pc, #72]	; (800c3a0 <inc_lock+0x118>)
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	011b      	lsls	r3, r3, #4
 800c35a:	4413      	add	r3, r2
 800c35c:	330c      	adds	r3, #12
 800c35e:	881b      	ldrh	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d001      	beq.n	800c368 <inc_lock+0xe0>
 800c364:	2300      	movs	r3, #0
 800c366:	e015      	b.n	800c394 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d108      	bne.n	800c380 <inc_lock+0xf8>
 800c36e:	4a0c      	ldr	r2, [pc, #48]	; (800c3a0 <inc_lock+0x118>)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	011b      	lsls	r3, r3, #4
 800c374:	4413      	add	r3, r2
 800c376:	330c      	adds	r3, #12
 800c378:	881b      	ldrh	r3, [r3, #0]
 800c37a:	3301      	adds	r3, #1
 800c37c:	b29a      	uxth	r2, r3
 800c37e:	e001      	b.n	800c384 <inc_lock+0xfc>
 800c380:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c384:	4906      	ldr	r1, [pc, #24]	; (800c3a0 <inc_lock+0x118>)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	011b      	lsls	r3, r3, #4
 800c38a:	440b      	add	r3, r1
 800c38c:	330c      	adds	r3, #12
 800c38e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	3301      	adds	r3, #1
}
 800c394:	4618      	mov	r0, r3
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	2000003c 	.word	0x2000003c

0800c3a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	607b      	str	r3, [r7, #4]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d825      	bhi.n	800c404 <dec_lock+0x60>
		n = Files[i].ctr;
 800c3b8:	4a17      	ldr	r2, [pc, #92]	; (800c418 <dec_lock+0x74>)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	011b      	lsls	r3, r3, #4
 800c3be:	4413      	add	r3, r2
 800c3c0:	330c      	adds	r3, #12
 800c3c2:	881b      	ldrh	r3, [r3, #0]
 800c3c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c3c6:	89fb      	ldrh	r3, [r7, #14]
 800c3c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3cc:	d101      	bne.n	800c3d2 <dec_lock+0x2e>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c3d2:	89fb      	ldrh	r3, [r7, #14]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d002      	beq.n	800c3de <dec_lock+0x3a>
 800c3d8:	89fb      	ldrh	r3, [r7, #14]
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c3de:	4a0e      	ldr	r2, [pc, #56]	; (800c418 <dec_lock+0x74>)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	011b      	lsls	r3, r3, #4
 800c3e4:	4413      	add	r3, r2
 800c3e6:	330c      	adds	r3, #12
 800c3e8:	89fa      	ldrh	r2, [r7, #14]
 800c3ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c3ec:	89fb      	ldrh	r3, [r7, #14]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d105      	bne.n	800c3fe <dec_lock+0x5a>
 800c3f2:	4a09      	ldr	r2, [pc, #36]	; (800c418 <dec_lock+0x74>)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	011b      	lsls	r3, r3, #4
 800c3f8:	4413      	add	r3, r2
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	737b      	strb	r3, [r7, #13]
 800c402:	e001      	b.n	800c408 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c404:	2302      	movs	r3, #2
 800c406:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c408:	7b7b      	ldrb	r3, [r7, #13]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	2000003c 	.word	0x2000003c

0800c41c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c424:	2300      	movs	r3, #0
 800c426:	60fb      	str	r3, [r7, #12]
 800c428:	e010      	b.n	800c44c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c42a:	4a0d      	ldr	r2, [pc, #52]	; (800c460 <clear_lock+0x44>)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	011b      	lsls	r3, r3, #4
 800c430:	4413      	add	r3, r2
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	429a      	cmp	r2, r3
 800c438:	d105      	bne.n	800c446 <clear_lock+0x2a>
 800c43a:	4a09      	ldr	r2, [pc, #36]	; (800c460 <clear_lock+0x44>)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	011b      	lsls	r3, r3, #4
 800c440:	4413      	add	r3, r2
 800c442:	2200      	movs	r2, #0
 800c444:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3301      	adds	r3, #1
 800c44a:	60fb      	str	r3, [r7, #12]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d9eb      	bls.n	800c42a <clear_lock+0xe>
	}
}
 800c452:	bf00      	nop
 800c454:	3714      	adds	r7, #20
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	2000003c 	.word	0x2000003c

0800c464 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	78db      	ldrb	r3, [r3, #3]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d034      	beq.n	800c4e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c47c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	7858      	ldrb	r0, [r3, #1]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c488:	2301      	movs	r3, #1
 800c48a:	697a      	ldr	r2, [r7, #20]
 800c48c:	f7ff fd40 	bl	800bf10 <disk_write>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d002      	beq.n	800c49c <sync_window+0x38>
			res = FR_DISK_ERR;
 800c496:	2301      	movs	r3, #1
 800c498:	73fb      	strb	r3, [r7, #15]
 800c49a:	e022      	b.n	800c4e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	1ad2      	subs	r2, r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	69db      	ldr	r3, [r3, #28]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d217      	bcs.n	800c4e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	789b      	ldrb	r3, [r3, #2]
 800c4b6:	613b      	str	r3, [r7, #16]
 800c4b8:	e010      	b.n	800c4dc <sync_window+0x78>
					wsect += fs->fsize;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	69db      	ldr	r3, [r3, #28]
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	7858      	ldrb	r0, [r3, #1]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	697a      	ldr	r2, [r7, #20]
 800c4d2:	f7ff fd1d 	bl	800bf10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	613b      	str	r3, [r7, #16]
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d8eb      	bhi.n	800c4ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3718      	adds	r7, #24
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4fe:	683a      	ldr	r2, [r7, #0]
 800c500:	429a      	cmp	r2, r3
 800c502:	d01b      	beq.n	800c53c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f7ff ffad 	bl	800c464 <sync_window>
 800c50a:	4603      	mov	r3, r0
 800c50c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c50e:	7bfb      	ldrb	r3, [r7, #15]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d113      	bne.n	800c53c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	7858      	ldrb	r0, [r3, #1]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c51e:	2301      	movs	r3, #1
 800c520:	683a      	ldr	r2, [r7, #0]
 800c522:	f7ff fcd5 	bl	800bed0 <disk_read>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d004      	beq.n	800c536 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c52c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c530:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c532:	2301      	movs	r3, #1
 800c534:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	683a      	ldr	r2, [r7, #0]
 800c53a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
	...

0800c548 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7ff ff87 	bl	800c464 <sync_window>
 800c556:	4603      	mov	r3, r0
 800c558:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c55a:	7bfb      	ldrb	r3, [r7, #15]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d158      	bne.n	800c612 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	2b03      	cmp	r3, #3
 800c566:	d148      	bne.n	800c5fa <sync_fs+0xb2>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	791b      	ldrb	r3, [r3, #4]
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d144      	bne.n	800c5fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	3334      	adds	r3, #52	; 0x34
 800c574:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c578:	2100      	movs	r1, #0
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7ff fda9 	bl	800c0d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	3334      	adds	r3, #52	; 0x34
 800c584:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c588:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff fd38 	bl	800c002 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	3334      	adds	r3, #52	; 0x34
 800c596:	4921      	ldr	r1, [pc, #132]	; (800c61c <sync_fs+0xd4>)
 800c598:	4618      	mov	r0, r3
 800c59a:	f7ff fd4d 	bl	800c038 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	3334      	adds	r3, #52	; 0x34
 800c5a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c5a6:	491e      	ldr	r1, [pc, #120]	; (800c620 <sync_fs+0xd8>)
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7ff fd45 	bl	800c038 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	3334      	adds	r3, #52	; 0x34
 800c5b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	695b      	ldr	r3, [r3, #20]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	4610      	mov	r0, r2
 800c5be:	f7ff fd3b 	bl	800c038 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	3334      	adds	r3, #52	; 0x34
 800c5c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	4610      	mov	r0, r2
 800c5d2:	f7ff fd31 	bl	800c038 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	1c5a      	adds	r2, r3, #1
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	7858      	ldrb	r0, [r3, #1]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	f7ff fc8e 	bl	800bf10 <disk_write>
			fs->fsi_flag = 0;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	785b      	ldrb	r3, [r3, #1]
 800c5fe:	2200      	movs	r2, #0
 800c600:	2100      	movs	r1, #0
 800c602:	4618      	mov	r0, r3
 800c604:	f7ff fca4 	bl	800bf50 <disk_ioctl>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d001      	beq.n	800c612 <sync_fs+0xca>
 800c60e:	2301      	movs	r3, #1
 800c610:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c612:	7bfb      	ldrb	r3, [r7, #15]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	41615252 	.word	0x41615252
 800c620:	61417272 	.word	0x61417272

0800c624 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	3b02      	subs	r3, #2
 800c632:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	699b      	ldr	r3, [r3, #24]
 800c638:	3b02      	subs	r3, #2
 800c63a:	683a      	ldr	r2, [r7, #0]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d301      	bcc.n	800c644 <clust2sect+0x20>
 800c640:	2300      	movs	r3, #0
 800c642:	e008      	b.n	800c656 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	895b      	ldrh	r3, [r3, #10]
 800c648:	461a      	mov	r2, r3
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	fb03 f202 	mul.w	r2, r3, r2
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c654:	4413      	add	r3, r2
}
 800c656:	4618      	mov	r0, r3
 800c658:	370c      	adds	r7, #12
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr

0800c662 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b086      	sub	sp, #24
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
 800c66a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	2b01      	cmp	r3, #1
 800c676:	d904      	bls.n	800c682 <get_fat+0x20>
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	699b      	ldr	r3, [r3, #24]
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d302      	bcc.n	800c688 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c682:	2301      	movs	r3, #1
 800c684:	617b      	str	r3, [r7, #20]
 800c686:	e08c      	b.n	800c7a2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c68c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	2b02      	cmp	r3, #2
 800c694:	d045      	beq.n	800c722 <get_fat+0xc0>
 800c696:	2b03      	cmp	r3, #3
 800c698:	d05d      	beq.n	800c756 <get_fat+0xf4>
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d177      	bne.n	800c78e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	60fb      	str	r3, [r7, #12]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	085b      	lsrs	r3, r3, #1
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	0a5b      	lsrs	r3, r3, #9
 800c6b4:	4413      	add	r3, r2
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	6938      	ldr	r0, [r7, #16]
 800c6ba:	f7ff ff17 	bl	800c4ec <move_window>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d167      	bne.n	800c794 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	1c5a      	adds	r2, r3, #1
 800c6c8:	60fa      	str	r2, [r7, #12]
 800c6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c6d6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	0a5b      	lsrs	r3, r3, #9
 800c6e0:	4413      	add	r3, r2
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	6938      	ldr	r0, [r7, #16]
 800c6e6:	f7ff ff01 	bl	800c4ec <move_window>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d153      	bne.n	800c798 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6f6:	693a      	ldr	r2, [r7, #16]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c6fe:	021b      	lsls	r3, r3, #8
 800c700:	461a      	mov	r2, r3
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	4313      	orrs	r3, r2
 800c706:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	f003 0301 	and.w	r3, r3, #1
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d002      	beq.n	800c718 <get_fat+0xb6>
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	091b      	lsrs	r3, r3, #4
 800c716:	e002      	b.n	800c71e <get_fat+0xbc>
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c71e:	617b      	str	r3, [r7, #20]
			break;
 800c720:	e03f      	b.n	800c7a2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	0a1b      	lsrs	r3, r3, #8
 800c72a:	4413      	add	r3, r2
 800c72c:	4619      	mov	r1, r3
 800c72e:	6938      	ldr	r0, [r7, #16]
 800c730:	f7ff fedc 	bl	800c4ec <move_window>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d130      	bne.n	800c79c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	005b      	lsls	r3, r3, #1
 800c744:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c748:	4413      	add	r3, r2
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7ff fc1e 	bl	800bf8c <ld_word>
 800c750:	4603      	mov	r3, r0
 800c752:	617b      	str	r3, [r7, #20]
			break;
 800c754:	e025      	b.n	800c7a2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	09db      	lsrs	r3, r3, #7
 800c75e:	4413      	add	r3, r2
 800c760:	4619      	mov	r1, r3
 800c762:	6938      	ldr	r0, [r7, #16]
 800c764:	f7ff fec2 	bl	800c4ec <move_window>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d118      	bne.n	800c7a0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c77c:	4413      	add	r3, r2
 800c77e:	4618      	mov	r0, r3
 800c780:	f7ff fc1c 	bl	800bfbc <ld_dword>
 800c784:	4603      	mov	r3, r0
 800c786:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c78a:	617b      	str	r3, [r7, #20]
			break;
 800c78c:	e009      	b.n	800c7a2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c78e:	2301      	movs	r3, #1
 800c790:	617b      	str	r3, [r7, #20]
 800c792:	e006      	b.n	800c7a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c794:	bf00      	nop
 800c796:	e004      	b.n	800c7a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c798:	bf00      	nop
 800c79a:	e002      	b.n	800c7a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c79c:	bf00      	nop
 800c79e:	e000      	b.n	800c7a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7a0:	bf00      	nop
		}
	}

	return val;
 800c7a2:	697b      	ldr	r3, [r7, #20]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3718      	adds	r7, #24
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c7ac:	b590      	push	{r4, r7, lr}
 800c7ae:	b089      	sub	sp, #36	; 0x24
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	f240 80d6 	bls.w	800c970 <put_fat+0x1c4>
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	699b      	ldr	r3, [r3, #24]
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	f080 80d0 	bcs.w	800c970 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	d073      	beq.n	800c8c0 <put_fat+0x114>
 800c7d8:	2b03      	cmp	r3, #3
 800c7da:	f000 8091 	beq.w	800c900 <put_fat+0x154>
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	f040 80c6 	bne.w	800c970 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	61bb      	str	r3, [r7, #24]
 800c7e8:	69bb      	ldr	r3, [r7, #24]
 800c7ea:	085b      	lsrs	r3, r3, #1
 800c7ec:	69ba      	ldr	r2, [r7, #24]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	0a5b      	lsrs	r3, r3, #9
 800c7fa:	4413      	add	r3, r2
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	68f8      	ldr	r0, [r7, #12]
 800c800:	f7ff fe74 	bl	800c4ec <move_window>
 800c804:	4603      	mov	r3, r0
 800c806:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c808:	7ffb      	ldrb	r3, [r7, #31]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f040 80a9 	bne.w	800c962 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	1c59      	adds	r1, r3, #1
 800c81a:	61b9      	str	r1, [r7, #24]
 800c81c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c820:	4413      	add	r3, r2
 800c822:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	f003 0301 	and.w	r3, r3, #1
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00d      	beq.n	800c84a <put_fat+0x9e>
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	b25b      	sxtb	r3, r3
 800c834:	f003 030f 	and.w	r3, r3, #15
 800c838:	b25a      	sxtb	r2, r3
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	011b      	lsls	r3, r3, #4
 800c840:	b25b      	sxtb	r3, r3
 800c842:	4313      	orrs	r3, r2
 800c844:	b25b      	sxtb	r3, r3
 800c846:	b2db      	uxtb	r3, r3
 800c848:	e001      	b.n	800c84e <put_fat+0xa2>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	697a      	ldr	r2, [r7, #20]
 800c850:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2201      	movs	r2, #1
 800c856:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	0a5b      	lsrs	r3, r3, #9
 800c860:	4413      	add	r3, r2
 800c862:	4619      	mov	r1, r3
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f7ff fe41 	bl	800c4ec <move_window>
 800c86a:	4603      	mov	r3, r0
 800c86c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c86e:	7ffb      	ldrb	r3, [r7, #31]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d178      	bne.n	800c966 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c880:	4413      	add	r3, r2
 800c882:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d003      	beq.n	800c896 <put_fat+0xea>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	091b      	lsrs	r3, r3, #4
 800c892:	b2db      	uxtb	r3, r3
 800c894:	e00e      	b.n	800c8b4 <put_fat+0x108>
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	b25b      	sxtb	r3, r3
 800c89c:	f023 030f 	bic.w	r3, r3, #15
 800c8a0:	b25a      	sxtb	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	0a1b      	lsrs	r3, r3, #8
 800c8a6:	b25b      	sxtb	r3, r3
 800c8a8:	f003 030f 	and.w	r3, r3, #15
 800c8ac:	b25b      	sxtb	r3, r3
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	b25b      	sxtb	r3, r3
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	697a      	ldr	r2, [r7, #20]
 800c8b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	70da      	strb	r2, [r3, #3]
			break;
 800c8be:	e057      	b.n	800c970 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	0a1b      	lsrs	r3, r3, #8
 800c8c8:	4413      	add	r3, r2
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f7ff fe0d 	bl	800c4ec <move_window>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8d6:	7ffb      	ldrb	r3, [r7, #31]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d146      	bne.n	800c96a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c8ea:	4413      	add	r3, r2
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	b292      	uxth	r2, r2
 800c8f0:	4611      	mov	r1, r2
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7ff fb85 	bl	800c002 <st_word>
			fs->wflag = 1;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	70da      	strb	r2, [r3, #3]
			break;
 800c8fe:	e037      	b.n	800c970 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	09db      	lsrs	r3, r3, #7
 800c908:	4413      	add	r3, r2
 800c90a:	4619      	mov	r1, r3
 800c90c:	68f8      	ldr	r0, [r7, #12]
 800c90e:	f7ff fded 	bl	800c4ec <move_window>
 800c912:	4603      	mov	r3, r0
 800c914:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c916:	7ffb      	ldrb	r3, [r7, #31]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d128      	bne.n	800c96e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c930:	4413      	add	r3, r2
 800c932:	4618      	mov	r0, r3
 800c934:	f7ff fb42 	bl	800bfbc <ld_dword>
 800c938:	4603      	mov	r3, r0
 800c93a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c93e:	4323      	orrs	r3, r4
 800c940:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c950:	4413      	add	r3, r2
 800c952:	6879      	ldr	r1, [r7, #4]
 800c954:	4618      	mov	r0, r3
 800c956:	f7ff fb6f 	bl	800c038 <st_dword>
			fs->wflag = 1;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2201      	movs	r2, #1
 800c95e:	70da      	strb	r2, [r3, #3]
			break;
 800c960:	e006      	b.n	800c970 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c962:	bf00      	nop
 800c964:	e004      	b.n	800c970 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c966:	bf00      	nop
 800c968:	e002      	b.n	800c970 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c96a:	bf00      	nop
 800c96c:	e000      	b.n	800c970 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c96e:	bf00      	nop
		}
	}
	return res;
 800c970:	7ffb      	ldrb	r3, [r7, #31]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3724      	adds	r7, #36	; 0x24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd90      	pop	{r4, r7, pc}

0800c97a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b088      	sub	sp, #32
 800c97e:	af00      	add	r7, sp, #0
 800c980:	60f8      	str	r0, [r7, #12]
 800c982:	60b9      	str	r1, [r7, #8]
 800c984:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c986:	2300      	movs	r3, #0
 800c988:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	2b01      	cmp	r3, #1
 800c994:	d904      	bls.n	800c9a0 <remove_chain+0x26>
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	699b      	ldr	r3, [r3, #24]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d301      	bcc.n	800c9a4 <remove_chain+0x2a>
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	e04b      	b.n	800ca3c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00c      	beq.n	800c9c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c9aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9ae:	6879      	ldr	r1, [r7, #4]
 800c9b0:	69b8      	ldr	r0, [r7, #24]
 800c9b2:	f7ff fefb 	bl	800c7ac <put_fat>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c9ba:	7ffb      	ldrb	r3, [r7, #31]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d001      	beq.n	800c9c4 <remove_chain+0x4a>
 800c9c0:	7ffb      	ldrb	r3, [r7, #31]
 800c9c2:	e03b      	b.n	800ca3c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c9c4:	68b9      	ldr	r1, [r7, #8]
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	f7ff fe4b 	bl	800c662 <get_fat>
 800c9cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d031      	beq.n	800ca38 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d101      	bne.n	800c9de <remove_chain+0x64>
 800c9da:	2302      	movs	r3, #2
 800c9dc:	e02e      	b.n	800ca3c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9e4:	d101      	bne.n	800c9ea <remove_chain+0x70>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e028      	b.n	800ca3c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	68b9      	ldr	r1, [r7, #8]
 800c9ee:	69b8      	ldr	r0, [r7, #24]
 800c9f0:	f7ff fedc 	bl	800c7ac <put_fat>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c9f8:	7ffb      	ldrb	r3, [r7, #31]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <remove_chain+0x88>
 800c9fe:	7ffb      	ldrb	r3, [r7, #31]
 800ca00:	e01c      	b.n	800ca3c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	695a      	ldr	r2, [r3, #20]
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	699b      	ldr	r3, [r3, #24]
 800ca0a:	3b02      	subs	r3, #2
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d20b      	bcs.n	800ca28 <remove_chain+0xae>
			fs->free_clst++;
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	695b      	ldr	r3, [r3, #20]
 800ca14:	1c5a      	adds	r2, r3, #1
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	791b      	ldrb	r3, [r3, #4]
 800ca1e:	f043 0301 	orr.w	r3, r3, #1
 800ca22:	b2da      	uxtb	r2, r3
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	699b      	ldr	r3, [r3, #24]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d3c6      	bcc.n	800c9c4 <remove_chain+0x4a>
 800ca36:	e000      	b.n	800ca3a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ca38:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3720      	adds	r7, #32
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b088      	sub	sp, #32
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d10d      	bne.n	800ca76 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d004      	beq.n	800ca70 <create_chain+0x2c>
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	69ba      	ldr	r2, [r7, #24]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d31b      	bcc.n	800caa8 <create_chain+0x64>
 800ca70:	2301      	movs	r3, #1
 800ca72:	61bb      	str	r3, [r7, #24]
 800ca74:	e018      	b.n	800caa8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7ff fdf2 	bl	800c662 <get_fat>
 800ca7e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d801      	bhi.n	800ca8a <create_chain+0x46>
 800ca86:	2301      	movs	r3, #1
 800ca88:	e070      	b.n	800cb6c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca90:	d101      	bne.n	800ca96 <create_chain+0x52>
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	e06a      	b.n	800cb6c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	699b      	ldr	r3, [r3, #24]
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d201      	bcs.n	800caa4 <create_chain+0x60>
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	e063      	b.n	800cb6c <create_chain+0x128>
		scl = clst;
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800caa8:	69bb      	ldr	r3, [r7, #24]
 800caaa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	3301      	adds	r3, #1
 800cab0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	699b      	ldr	r3, [r3, #24]
 800cab6:	69fa      	ldr	r2, [r7, #28]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d307      	bcc.n	800cacc <create_chain+0x88>
				ncl = 2;
 800cabc:	2302      	movs	r3, #2
 800cabe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cac0:	69fa      	ldr	r2, [r7, #28]
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d901      	bls.n	800cacc <create_chain+0x88>
 800cac8:	2300      	movs	r3, #0
 800caca:	e04f      	b.n	800cb6c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cacc:	69f9      	ldr	r1, [r7, #28]
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7ff fdc7 	bl	800c662 <get_fat>
 800cad4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00e      	beq.n	800cafa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2b01      	cmp	r3, #1
 800cae0:	d003      	beq.n	800caea <create_chain+0xa6>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cae8:	d101      	bne.n	800caee <create_chain+0xaa>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	e03e      	b.n	800cb6c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800caee:	69fa      	ldr	r2, [r7, #28]
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d1da      	bne.n	800caac <create_chain+0x68>
 800caf6:	2300      	movs	r3, #0
 800caf8:	e038      	b.n	800cb6c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cafa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cafc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb00:	69f9      	ldr	r1, [r7, #28]
 800cb02:	6938      	ldr	r0, [r7, #16]
 800cb04:	f7ff fe52 	bl	800c7ac <put_fat>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cb0c:	7dfb      	ldrb	r3, [r7, #23]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d109      	bne.n	800cb26 <create_chain+0xe2>
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d006      	beq.n	800cb26 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cb18:	69fa      	ldr	r2, [r7, #28]
 800cb1a:	6839      	ldr	r1, [r7, #0]
 800cb1c:	6938      	ldr	r0, [r7, #16]
 800cb1e:	f7ff fe45 	bl	800c7ac <put_fat>
 800cb22:	4603      	mov	r3, r0
 800cb24:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cb26:	7dfb      	ldrb	r3, [r7, #23]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d116      	bne.n	800cb5a <create_chain+0x116>
		fs->last_clst = ncl;
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	69fa      	ldr	r2, [r7, #28]
 800cb30:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	695a      	ldr	r2, [r3, #20]
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	699b      	ldr	r3, [r3, #24]
 800cb3a:	3b02      	subs	r3, #2
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d804      	bhi.n	800cb4a <create_chain+0x106>
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	695b      	ldr	r3, [r3, #20]
 800cb44:	1e5a      	subs	r2, r3, #1
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	791b      	ldrb	r3, [r3, #4]
 800cb4e:	f043 0301 	orr.w	r3, r3, #1
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	711a      	strb	r2, [r3, #4]
 800cb58:	e007      	b.n	800cb6a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cb5a:	7dfb      	ldrb	r3, [r7, #23]
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d102      	bne.n	800cb66 <create_chain+0x122>
 800cb60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb64:	e000      	b.n	800cb68 <create_chain+0x124>
 800cb66:	2301      	movs	r3, #1
 800cb68:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cb6a:	69fb      	ldr	r3, [r7, #28]
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3720      	adds	r7, #32
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b087      	sub	sp, #28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb88:	3304      	adds	r3, #4
 800cb8a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	0a5b      	lsrs	r3, r3, #9
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	8952      	ldrh	r2, [r2, #10]
 800cb94:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb98:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	1d1a      	adds	r2, r3, #4
 800cb9e:	613a      	str	r2, [r7, #16]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d101      	bne.n	800cbae <clmt_clust+0x3a>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	e010      	b.n	800cbd0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cbae:	697a      	ldr	r2, [r7, #20]
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d307      	bcc.n	800cbc6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cbb6:	697a      	ldr	r2, [r7, #20]
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	1ad3      	subs	r3, r2, r3
 800cbbc:	617b      	str	r3, [r7, #20]
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	3304      	adds	r3, #4
 800cbc2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cbc4:	e7e9      	b.n	800cb9a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cbc6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	4413      	add	r3, r2
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	371c      	adds	r7, #28
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b086      	sub	sp, #24
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cbf2:	d204      	bcs.n	800cbfe <dir_sdi+0x22>
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	f003 031f 	and.w	r3, r3, #31
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d001      	beq.n	800cc02 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cbfe:	2302      	movs	r3, #2
 800cc00:	e063      	b.n	800ccca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	683a      	ldr	r2, [r7, #0]
 800cc06:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d106      	bne.n	800cc22 <dir_sdi+0x46>
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d902      	bls.n	800cc22 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc20:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d10c      	bne.n	800cc42 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	095b      	lsrs	r3, r3, #5
 800cc2c:	693a      	ldr	r2, [r7, #16]
 800cc2e:	8912      	ldrh	r2, [r2, #8]
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d301      	bcc.n	800cc38 <dir_sdi+0x5c>
 800cc34:	2302      	movs	r3, #2
 800cc36:	e048      	b.n	800ccca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	61da      	str	r2, [r3, #28]
 800cc40:	e029      	b.n	800cc96 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	895b      	ldrh	r3, [r3, #10]
 800cc46:	025b      	lsls	r3, r3, #9
 800cc48:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cc4a:	e019      	b.n	800cc80 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6979      	ldr	r1, [r7, #20]
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7ff fd06 	bl	800c662 <get_fat>
 800cc56:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc5e:	d101      	bne.n	800cc64 <dir_sdi+0x88>
 800cc60:	2301      	movs	r3, #1
 800cc62:	e032      	b.n	800ccca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d904      	bls.n	800cc74 <dir_sdi+0x98>
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	699b      	ldr	r3, [r3, #24]
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d301      	bcc.n	800cc78 <dir_sdi+0x9c>
 800cc74:	2302      	movs	r3, #2
 800cc76:	e028      	b.n	800ccca <dir_sdi+0xee>
			ofs -= csz;
 800cc78:	683a      	ldr	r2, [r7, #0]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	1ad3      	subs	r3, r2, r3
 800cc7e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cc80:	683a      	ldr	r2, [r7, #0]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d2e1      	bcs.n	800cc4c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cc88:	6979      	ldr	r1, [r7, #20]
 800cc8a:	6938      	ldr	r0, [r7, #16]
 800cc8c:	f7ff fcca 	bl	800c624 <clust2sect>
 800cc90:	4602      	mov	r2, r0
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	697a      	ldr	r2, [r7, #20]
 800cc9a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	69db      	ldr	r3, [r3, #28]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d101      	bne.n	800cca8 <dir_sdi+0xcc>
 800cca4:	2302      	movs	r3, #2
 800cca6:	e010      	b.n	800ccca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	69da      	ldr	r2, [r3, #28]
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	0a5b      	lsrs	r3, r3, #9
 800ccb0:	441a      	add	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccc2:	441a      	add	r2, r3
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3718      	adds	r7, #24
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b086      	sub	sp, #24
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	3320      	adds	r3, #32
 800cce8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	69db      	ldr	r3, [r3, #28]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d003      	beq.n	800ccfa <dir_next+0x28>
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ccf8:	d301      	bcc.n	800ccfe <dir_next+0x2c>
 800ccfa:	2304      	movs	r3, #4
 800ccfc:	e0aa      	b.n	800ce54 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	f040 8098 	bne.w	800ce3a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	69db      	ldr	r3, [r3, #28]
 800cd0e:	1c5a      	adds	r2, r3, #1
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	699b      	ldr	r3, [r3, #24]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d10b      	bne.n	800cd34 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	095b      	lsrs	r3, r3, #5
 800cd20:	68fa      	ldr	r2, [r7, #12]
 800cd22:	8912      	ldrh	r2, [r2, #8]
 800cd24:	4293      	cmp	r3, r2
 800cd26:	f0c0 8088 	bcc.w	800ce3a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	61da      	str	r2, [r3, #28]
 800cd30:	2304      	movs	r3, #4
 800cd32:	e08f      	b.n	800ce54 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	0a5b      	lsrs	r3, r3, #9
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	8952      	ldrh	r2, [r2, #10]
 800cd3c:	3a01      	subs	r2, #1
 800cd3e:	4013      	ands	r3, r2
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d17a      	bne.n	800ce3a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	699b      	ldr	r3, [r3, #24]
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	f7ff fc88 	bl	800c662 <get_fat>
 800cd52:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d801      	bhi.n	800cd5e <dir_next+0x8c>
 800cd5a:	2302      	movs	r3, #2
 800cd5c:	e07a      	b.n	800ce54 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd64:	d101      	bne.n	800cd6a <dir_next+0x98>
 800cd66:	2301      	movs	r3, #1
 800cd68:	e074      	b.n	800ce54 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	699b      	ldr	r3, [r3, #24]
 800cd6e:	697a      	ldr	r2, [r7, #20]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d358      	bcc.n	800ce26 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d104      	bne.n	800cd84 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	61da      	str	r2, [r3, #28]
 800cd80:	2304      	movs	r3, #4
 800cd82:	e067      	b.n	800ce54 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	4610      	mov	r0, r2
 800cd8e:	f7ff fe59 	bl	800ca44 <create_chain>
 800cd92:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d101      	bne.n	800cd9e <dir_next+0xcc>
 800cd9a:	2307      	movs	r3, #7
 800cd9c:	e05a      	b.n	800ce54 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d101      	bne.n	800cda8 <dir_next+0xd6>
 800cda4:	2302      	movs	r3, #2
 800cda6:	e055      	b.n	800ce54 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdae:	d101      	bne.n	800cdb4 <dir_next+0xe2>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e04f      	b.n	800ce54 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f7ff fb55 	bl	800c464 <sync_window>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d001      	beq.n	800cdc4 <dir_next+0xf2>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e047      	b.n	800ce54 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	3334      	adds	r3, #52	; 0x34
 800cdc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdcc:	2100      	movs	r1, #0
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7ff f97f 	bl	800c0d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	613b      	str	r3, [r7, #16]
 800cdd8:	6979      	ldr	r1, [r7, #20]
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	f7ff fc22 	bl	800c624 <clust2sect>
 800cde0:	4602      	mov	r2, r0
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	631a      	str	r2, [r3, #48]	; 0x30
 800cde6:	e012      	b.n	800ce0e <dir_next+0x13c>
						fs->wflag = 1;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2201      	movs	r2, #1
 800cdec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f7ff fb38 	bl	800c464 <sync_window>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <dir_next+0x12c>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e02a      	b.n	800ce54 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	3301      	adds	r3, #1
 800ce02:	613b      	str	r3, [r7, #16]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce08:	1c5a      	adds	r2, r3, #1
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	631a      	str	r2, [r3, #48]	; 0x30
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	895b      	ldrh	r3, [r3, #10]
 800ce12:	461a      	mov	r2, r3
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d3e6      	bcc.n	800cde8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	1ad2      	subs	r2, r2, r3
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	697a      	ldr	r2, [r7, #20]
 800ce2a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ce2c:	6979      	ldr	r1, [r7, #20]
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f7ff fbf8 	bl	800c624 <clust2sect>
 800ce34:	4602      	mov	r2, r0
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce4c:	441a      	add	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ce52:	2300      	movs	r3, #0
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3718      	adds	r7, #24
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b086      	sub	sp, #24
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7ff feb4 	bl	800cbdc <dir_sdi>
 800ce74:	4603      	mov	r3, r0
 800ce76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ce78:	7dfb      	ldrb	r3, [r7, #23]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d12b      	bne.n	800ced6 <dir_alloc+0x7a>
		n = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	69db      	ldr	r3, [r3, #28]
 800ce86:	4619      	mov	r1, r3
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f7ff fb2f 	bl	800c4ec <move_window>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ce92:	7dfb      	ldrb	r3, [r7, #23]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d11d      	bne.n	800ced4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a1b      	ldr	r3, [r3, #32]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	2be5      	cmp	r3, #229	; 0xe5
 800cea0:	d004      	beq.n	800ceac <dir_alloc+0x50>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a1b      	ldr	r3, [r3, #32]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d107      	bne.n	800cebc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	613b      	str	r3, [r7, #16]
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d102      	bne.n	800cec0 <dir_alloc+0x64>
 800ceba:	e00c      	b.n	800ced6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cebc:	2300      	movs	r3, #0
 800cebe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cec0:	2101      	movs	r1, #1
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f7ff ff05 	bl	800ccd2 <dir_next>
 800cec8:	4603      	mov	r3, r0
 800ceca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cecc:	7dfb      	ldrb	r3, [r7, #23]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d0d7      	beq.n	800ce82 <dir_alloc+0x26>
 800ced2:	e000      	b.n	800ced6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ced4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
 800ced8:	2b04      	cmp	r3, #4
 800ceda:	d101      	bne.n	800cee0 <dir_alloc+0x84>
 800cedc:	2307      	movs	r3, #7
 800cede:	75fb      	strb	r3, [r7, #23]
	return res;
 800cee0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3718      	adds	r7, #24
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b084      	sub	sp, #16
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
 800cef2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	331a      	adds	r3, #26
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7ff f847 	bl	800bf8c <ld_word>
 800cefe:	4603      	mov	r3, r0
 800cf00:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	2b03      	cmp	r3, #3
 800cf08:	d109      	bne.n	800cf1e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	3314      	adds	r3, #20
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7ff f83c 	bl	800bf8c <ld_word>
 800cf14:	4603      	mov	r3, r0
 800cf16:	041b      	lsls	r3, r3, #16
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3710      	adds	r7, #16
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	331a      	adds	r3, #26
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	b292      	uxth	r2, r2
 800cf3c:	4611      	mov	r1, r2
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7ff f85f 	bl	800c002 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2b03      	cmp	r3, #3
 800cf4a:	d109      	bne.n	800cf60 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	f103 0214 	add.w	r2, r3, #20
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	0c1b      	lsrs	r3, r3, #16
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	4619      	mov	r1, r3
 800cf5a:	4610      	mov	r0, r2
 800cf5c:	f7ff f851 	bl	800c002 <st_word>
	}
}
 800cf60:	bf00      	nop
 800cf62:	3710      	adds	r7, #16
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cf68:	b590      	push	{r4, r7, lr}
 800cf6a:	b087      	sub	sp, #28
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	331a      	adds	r3, #26
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7ff f808 	bl	800bf8c <ld_word>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d001      	beq.n	800cf86 <cmp_lfn+0x1e>
 800cf82:	2300      	movs	r3, #0
 800cf84:	e059      	b.n	800d03a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf8e:	1e5a      	subs	r2, r3, #1
 800cf90:	4613      	mov	r3, r2
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	4413      	add	r3, r2
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	4413      	add	r3, r2
 800cf9a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	81fb      	strh	r3, [r7, #14]
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	613b      	str	r3, [r7, #16]
 800cfa4:	e033      	b.n	800d00e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cfa6:	4a27      	ldr	r2, [pc, #156]	; (800d044 <cmp_lfn+0xdc>)
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	4413      	add	r3, r2
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fe ffe9 	bl	800bf8c <ld_word>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cfbe:	89fb      	ldrh	r3, [r7, #14]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d01a      	beq.n	800cffa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	2bfe      	cmp	r3, #254	; 0xfe
 800cfc8:	d812      	bhi.n	800cff0 <cmp_lfn+0x88>
 800cfca:	89bb      	ldrh	r3, [r7, #12]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f001 fd13 	bl	800e9f8 <ff_wtoupper>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	461c      	mov	r4, r3
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	1c5a      	adds	r2, r3, #1
 800cfda:	617a      	str	r2, [r7, #20]
 800cfdc:	005b      	lsls	r3, r3, #1
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	881b      	ldrh	r3, [r3, #0]
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f001 fd07 	bl	800e9f8 <ff_wtoupper>
 800cfea:	4603      	mov	r3, r0
 800cfec:	429c      	cmp	r4, r3
 800cfee:	d001      	beq.n	800cff4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cff0:	2300      	movs	r3, #0
 800cff2:	e022      	b.n	800d03a <cmp_lfn+0xd2>
			}
			wc = uc;
 800cff4:	89bb      	ldrh	r3, [r7, #12]
 800cff6:	81fb      	strh	r3, [r7, #14]
 800cff8:	e006      	b.n	800d008 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cffa:	89bb      	ldrh	r3, [r7, #12]
 800cffc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d000:	4293      	cmp	r3, r2
 800d002:	d001      	beq.n	800d008 <cmp_lfn+0xa0>
 800d004:	2300      	movs	r3, #0
 800d006:	e018      	b.n	800d03a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	3301      	adds	r3, #1
 800d00c:	613b      	str	r3, [r7, #16]
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	2b0c      	cmp	r3, #12
 800d012:	d9c8      	bls.n	800cfa6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d00b      	beq.n	800d038 <cmp_lfn+0xd0>
 800d020:	89fb      	ldrh	r3, [r7, #14]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d008      	beq.n	800d038 <cmp_lfn+0xd0>
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	005b      	lsls	r3, r3, #1
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	4413      	add	r3, r2
 800d02e:	881b      	ldrh	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d001      	beq.n	800d038 <cmp_lfn+0xd0>
 800d034:	2300      	movs	r3, #0
 800d036:	e000      	b.n	800d03a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d038:	2301      	movs	r3, #1
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	371c      	adds	r7, #28
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd90      	pop	{r4, r7, pc}
 800d042:	bf00      	nop
 800d044:	08010fa4 	.word	0x08010fa4

0800d048 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b088      	sub	sp, #32
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	4611      	mov	r1, r2
 800d054:	461a      	mov	r2, r3
 800d056:	460b      	mov	r3, r1
 800d058:	71fb      	strb	r3, [r7, #7]
 800d05a:	4613      	mov	r3, r2
 800d05c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	330d      	adds	r3, #13
 800d062:	79ba      	ldrb	r2, [r7, #6]
 800d064:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	330b      	adds	r3, #11
 800d06a:	220f      	movs	r2, #15
 800d06c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	330c      	adds	r3, #12
 800d072:	2200      	movs	r2, #0
 800d074:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	331a      	adds	r3, #26
 800d07a:	2100      	movs	r1, #0
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7fe ffc0 	bl	800c002 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d082:	79fb      	ldrb	r3, [r7, #7]
 800d084:	1e5a      	subs	r2, r3, #1
 800d086:	4613      	mov	r3, r2
 800d088:	005b      	lsls	r3, r3, #1
 800d08a:	4413      	add	r3, r2
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	4413      	add	r3, r2
 800d090:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d092:	2300      	movs	r3, #0
 800d094:	82fb      	strh	r3, [r7, #22]
 800d096:	2300      	movs	r3, #0
 800d098:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d09a:	8afb      	ldrh	r3, [r7, #22]
 800d09c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d007      	beq.n	800d0b4 <put_lfn+0x6c>
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	1c5a      	adds	r2, r3, #1
 800d0a8:	61fa      	str	r2, [r7, #28]
 800d0aa:	005b      	lsls	r3, r3, #1
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	881b      	ldrh	r3, [r3, #0]
 800d0b2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d0b4:	4a17      	ldr	r2, [pc, #92]	; (800d114 <put_lfn+0xcc>)
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	8afa      	ldrh	r2, [r7, #22]
 800d0c4:	4611      	mov	r1, r2
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7fe ff9b 	bl	800c002 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d0cc:	8afb      	ldrh	r3, [r7, #22]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d102      	bne.n	800d0d8 <put_lfn+0x90>
 800d0d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0d6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	61bb      	str	r3, [r7, #24]
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	2b0c      	cmp	r3, #12
 800d0e2:	d9da      	bls.n	800d09a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d0e4:	8afb      	ldrh	r3, [r7, #22]
 800d0e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d006      	beq.n	800d0fc <put_lfn+0xb4>
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	005b      	lsls	r3, r3, #1
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	881b      	ldrh	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d103      	bne.n	800d104 <put_lfn+0xbc>
 800d0fc:	79fb      	ldrb	r3, [r7, #7]
 800d0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d102:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	79fa      	ldrb	r2, [r7, #7]
 800d108:	701a      	strb	r2, [r3, #0]
}
 800d10a:	bf00      	nop
 800d10c:	3720      	adds	r7, #32
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	08010fa4 	.word	0x08010fa4

0800d118 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08c      	sub	sp, #48	; 0x30
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
 800d124:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d126:	220b      	movs	r2, #11
 800d128:	68b9      	ldr	r1, [r7, #8]
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f7fe ffb0 	bl	800c090 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	2b05      	cmp	r3, #5
 800d134:	d929      	bls.n	800d18a <gen_numname+0x72>
		sr = seq;
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d13a:	e020      	b.n	800d17e <gen_numname+0x66>
			wc = *lfn++;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	1c9a      	adds	r2, r3, #2
 800d140:	607a      	str	r2, [r7, #4]
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d146:	2300      	movs	r3, #0
 800d148:	62bb      	str	r3, [r7, #40]	; 0x28
 800d14a:	e015      	b.n	800d178 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	005a      	lsls	r2, r3, #1
 800d150:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d152:	f003 0301 	and.w	r3, r3, #1
 800d156:	4413      	add	r3, r2
 800d158:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d15a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d15c:	085b      	lsrs	r3, r3, #1
 800d15e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d166:	2b00      	cmp	r3, #0
 800d168:	d003      	beq.n	800d172 <gen_numname+0x5a>
 800d16a:	69fa      	ldr	r2, [r7, #28]
 800d16c:	4b31      	ldr	r3, [pc, #196]	; (800d234 <gen_numname+0x11c>)
 800d16e:	4053      	eors	r3, r2
 800d170:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d174:	3301      	adds	r3, #1
 800d176:	62bb      	str	r3, [r7, #40]	; 0x28
 800d178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17a:	2b0f      	cmp	r3, #15
 800d17c:	d9e6      	bls.n	800d14c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	881b      	ldrh	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d1da      	bne.n	800d13c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d18a:	2307      	movs	r3, #7
 800d18c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	b2db      	uxtb	r3, r3
 800d192:	f003 030f 	and.w	r3, r3, #15
 800d196:	b2db      	uxtb	r3, r3
 800d198:	3330      	adds	r3, #48	; 0x30
 800d19a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d19e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d1a2:	2b39      	cmp	r3, #57	; 0x39
 800d1a4:	d904      	bls.n	800d1b0 <gen_numname+0x98>
 800d1a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d1aa:	3307      	adds	r3, #7
 800d1ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b2:	1e5a      	subs	r2, r3, #1
 800d1b4:	62ba      	str	r2, [r7, #40]	; 0x28
 800d1b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d1ba:	4413      	add	r3, r2
 800d1bc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d1c0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	091b      	lsrs	r3, r3, #4
 800d1c8:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1de      	bne.n	800d18e <gen_numname+0x76>
	ns[i] = '~';
 800d1d0:	f107 0214 	add.w	r2, r7, #20
 800d1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d6:	4413      	add	r3, r2
 800d1d8:	227e      	movs	r2, #126	; 0x7e
 800d1da:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d1dc:	2300      	movs	r3, #0
 800d1de:	627b      	str	r3, [r7, #36]	; 0x24
 800d1e0:	e002      	b.n	800d1e8 <gen_numname+0xd0>
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	627b      	str	r3, [r7, #36]	; 0x24
 800d1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d205      	bcs.n	800d1fc <gen_numname+0xe4>
 800d1f0:	68fa      	ldr	r2, [r7, #12]
 800d1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f4:	4413      	add	r3, r2
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	2b20      	cmp	r3, #32
 800d1fa:	d1f2      	bne.n	800d1e2 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fe:	2b07      	cmp	r3, #7
 800d200:	d808      	bhi.n	800d214 <gen_numname+0xfc>
 800d202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d204:	1c5a      	adds	r2, r3, #1
 800d206:	62ba      	str	r2, [r7, #40]	; 0x28
 800d208:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d20c:	4413      	add	r3, r2
 800d20e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d212:	e000      	b.n	800d216 <gen_numname+0xfe>
 800d214:	2120      	movs	r1, #32
 800d216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d218:	1c5a      	adds	r2, r3, #1
 800d21a:	627a      	str	r2, [r7, #36]	; 0x24
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	4413      	add	r3, r2
 800d220:	460a      	mov	r2, r1
 800d222:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d226:	2b07      	cmp	r3, #7
 800d228:	d9e8      	bls.n	800d1fc <gen_numname+0xe4>
}
 800d22a:	bf00      	nop
 800d22c:	3730      	adds	r7, #48	; 0x30
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	00011021 	.word	0x00011021

0800d238 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d240:	2300      	movs	r3, #0
 800d242:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d244:	230b      	movs	r3, #11
 800d246:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d248:	7bfb      	ldrb	r3, [r7, #15]
 800d24a:	b2da      	uxtb	r2, r3
 800d24c:	0852      	lsrs	r2, r2, #1
 800d24e:	01db      	lsls	r3, r3, #7
 800d250:	4313      	orrs	r3, r2
 800d252:	b2da      	uxtb	r2, r3
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	1c59      	adds	r1, r3, #1
 800d258:	6079      	str	r1, [r7, #4]
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	4413      	add	r3, r2
 800d25e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	3b01      	subs	r3, #1
 800d264:	60bb      	str	r3, [r7, #8]
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1ed      	bne.n	800d248 <sum_sfn+0x10>
	return sum;
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3714      	adds	r7, #20
 800d272:	46bd      	mov	sp, r7
 800d274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d278:	4770      	bx	lr

0800d27a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b086      	sub	sp, #24
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d288:	2100      	movs	r1, #0
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7ff fca6 	bl	800cbdc <dir_sdi>
 800d290:	4603      	mov	r3, r0
 800d292:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d294:	7dfb      	ldrb	r3, [r7, #23]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d001      	beq.n	800d29e <dir_find+0x24>
 800d29a:	7dfb      	ldrb	r3, [r7, #23]
 800d29c:	e0a9      	b.n	800d3f2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d29e:	23ff      	movs	r3, #255	; 0xff
 800d2a0:	753b      	strb	r3, [r7, #20]
 800d2a2:	7d3b      	ldrb	r3, [r7, #20]
 800d2a4:	757b      	strb	r3, [r7, #21]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	69db      	ldr	r3, [r3, #28]
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	6938      	ldr	r0, [r7, #16]
 800d2b6:	f7ff f919 	bl	800c4ec <move_window>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d2be:	7dfb      	ldrb	r3, [r7, #23]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f040 8090 	bne.w	800d3e6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d2ce:	7dbb      	ldrb	r3, [r7, #22]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d102      	bne.n	800d2da <dir_find+0x60>
 800d2d4:	2304      	movs	r3, #4
 800d2d6:	75fb      	strb	r3, [r7, #23]
 800d2d8:	e08a      	b.n	800d3f0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6a1b      	ldr	r3, [r3, #32]
 800d2de:	330b      	adds	r3, #11
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2e6:	73fb      	strb	r3, [r7, #15]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	7bfa      	ldrb	r2, [r7, #15]
 800d2ec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d2ee:	7dbb      	ldrb	r3, [r7, #22]
 800d2f0:	2be5      	cmp	r3, #229	; 0xe5
 800d2f2:	d007      	beq.n	800d304 <dir_find+0x8a>
 800d2f4:	7bfb      	ldrb	r3, [r7, #15]
 800d2f6:	f003 0308 	and.w	r3, r3, #8
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d009      	beq.n	800d312 <dir_find+0x98>
 800d2fe:	7bfb      	ldrb	r3, [r7, #15]
 800d300:	2b0f      	cmp	r3, #15
 800d302:	d006      	beq.n	800d312 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d304:	23ff      	movs	r3, #255	; 0xff
 800d306:	757b      	strb	r3, [r7, #21]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d30e:	631a      	str	r2, [r3, #48]	; 0x30
 800d310:	e05e      	b.n	800d3d0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d312:	7bfb      	ldrb	r3, [r7, #15]
 800d314:	2b0f      	cmp	r3, #15
 800d316:	d136      	bne.n	800d386 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d31e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d322:	2b00      	cmp	r3, #0
 800d324:	d154      	bne.n	800d3d0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d326:	7dbb      	ldrb	r3, [r7, #22]
 800d328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00d      	beq.n	800d34c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6a1b      	ldr	r3, [r3, #32]
 800d334:	7b5b      	ldrb	r3, [r3, #13]
 800d336:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d338:	7dbb      	ldrb	r3, [r7, #22]
 800d33a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d33e:	75bb      	strb	r3, [r7, #22]
 800d340:	7dbb      	ldrb	r3, [r7, #22]
 800d342:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	695a      	ldr	r2, [r3, #20]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d34c:	7dba      	ldrb	r2, [r7, #22]
 800d34e:	7d7b      	ldrb	r3, [r7, #21]
 800d350:	429a      	cmp	r2, r3
 800d352:	d115      	bne.n	800d380 <dir_find+0x106>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a1b      	ldr	r3, [r3, #32]
 800d358:	330d      	adds	r3, #13
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	7d3a      	ldrb	r2, [r7, #20]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d10e      	bne.n	800d380 <dir_find+0x106>
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	68da      	ldr	r2, [r3, #12]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a1b      	ldr	r3, [r3, #32]
 800d36a:	4619      	mov	r1, r3
 800d36c:	4610      	mov	r0, r2
 800d36e:	f7ff fdfb 	bl	800cf68 <cmp_lfn>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d003      	beq.n	800d380 <dir_find+0x106>
 800d378:	7d7b      	ldrb	r3, [r7, #21]
 800d37a:	3b01      	subs	r3, #1
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	e000      	b.n	800d382 <dir_find+0x108>
 800d380:	23ff      	movs	r3, #255	; 0xff
 800d382:	757b      	strb	r3, [r7, #21]
 800d384:	e024      	b.n	800d3d0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d386:	7d7b      	ldrb	r3, [r7, #21]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d109      	bne.n	800d3a0 <dir_find+0x126>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a1b      	ldr	r3, [r3, #32]
 800d390:	4618      	mov	r0, r3
 800d392:	f7ff ff51 	bl	800d238 <sum_sfn>
 800d396:	4603      	mov	r3, r0
 800d398:	461a      	mov	r2, r3
 800d39a:	7d3b      	ldrb	r3, [r7, #20]
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d024      	beq.n	800d3ea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d3a6:	f003 0301 	and.w	r3, r3, #1
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10a      	bne.n	800d3c4 <dir_find+0x14a>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a18      	ldr	r0, [r3, #32]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	3324      	adds	r3, #36	; 0x24
 800d3b6:	220b      	movs	r2, #11
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	f7fe fea4 	bl	800c106 <mem_cmp>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d014      	beq.n	800d3ee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d3c4:	23ff      	movs	r3, #255	; 0xff
 800d3c6:	757b      	strb	r3, [r7, #21]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3ce:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f7ff fc7d 	bl	800ccd2 <dir_next>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d3dc:	7dfb      	ldrb	r3, [r7, #23]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	f43f af65 	beq.w	800d2ae <dir_find+0x34>
 800d3e4:	e004      	b.n	800d3f0 <dir_find+0x176>
		if (res != FR_OK) break;
 800d3e6:	bf00      	nop
 800d3e8:	e002      	b.n	800d3f0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d3ea:	bf00      	nop
 800d3ec:	e000      	b.n	800d3f0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d3ee:	bf00      	nop

	return res;
 800d3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3718      	adds	r7, #24
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
	...

0800d3fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b08c      	sub	sp, #48	; 0x30
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d410:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d414:	2b00      	cmp	r3, #0
 800d416:	d001      	beq.n	800d41c <dir_register+0x20>
 800d418:	2306      	movs	r3, #6
 800d41a:	e0e0      	b.n	800d5de <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d41c:	2300      	movs	r3, #0
 800d41e:	627b      	str	r3, [r7, #36]	; 0x24
 800d420:	e002      	b.n	800d428 <dir_register+0x2c>
 800d422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d424:	3301      	adds	r3, #1
 800d426:	627b      	str	r3, [r7, #36]	; 0x24
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	68da      	ldr	r2, [r3, #12]
 800d42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	4413      	add	r3, r2
 800d432:	881b      	ldrh	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d1f4      	bne.n	800d422 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d43e:	f107 030c 	add.w	r3, r7, #12
 800d442:	220c      	movs	r2, #12
 800d444:	4618      	mov	r0, r3
 800d446:	f7fe fe23 	bl	800c090 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
 800d44c:	f003 0301 	and.w	r3, r3, #1
 800d450:	2b00      	cmp	r3, #0
 800d452:	d032      	beq.n	800d4ba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2240      	movs	r2, #64	; 0x40
 800d458:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d45c:	2301      	movs	r3, #1
 800d45e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d460:	e016      	b.n	800d490 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	68da      	ldr	r2, [r3, #12]
 800d46c:	f107 010c 	add.w	r1, r7, #12
 800d470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d472:	f7ff fe51 	bl	800d118 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f7ff feff 	bl	800d27a <dir_find>
 800d47c:	4603      	mov	r3, r0
 800d47e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d482:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d486:	2b00      	cmp	r3, #0
 800d488:	d106      	bne.n	800d498 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48c:	3301      	adds	r3, #1
 800d48e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d492:	2b63      	cmp	r3, #99	; 0x63
 800d494:	d9e5      	bls.n	800d462 <dir_register+0x66>
 800d496:	e000      	b.n	800d49a <dir_register+0x9e>
			if (res != FR_OK) break;
 800d498:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49c:	2b64      	cmp	r3, #100	; 0x64
 800d49e:	d101      	bne.n	800d4a4 <dir_register+0xa8>
 800d4a0:	2307      	movs	r3, #7
 800d4a2:	e09c      	b.n	800d5de <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d4a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d4a8:	2b04      	cmp	r3, #4
 800d4aa:	d002      	beq.n	800d4b2 <dir_register+0xb6>
 800d4ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d4b0:	e095      	b.n	800d5de <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d4b2:	7dfa      	ldrb	r2, [r7, #23]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d4ba:	7dfb      	ldrb	r3, [r7, #23]
 800d4bc:	f003 0302 	and.w	r3, r3, #2
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d007      	beq.n	800d4d4 <dir_register+0xd8>
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c6:	330c      	adds	r3, #12
 800d4c8:	4a47      	ldr	r2, [pc, #284]	; (800d5e8 <dir_register+0x1ec>)
 800d4ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ce:	089b      	lsrs	r3, r3, #2
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	e000      	b.n	800d4d6 <dir_register+0xda>
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d4d8:	6a39      	ldr	r1, [r7, #32]
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7ff fcbe 	bl	800ce5c <dir_alloc>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d4e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d148      	bne.n	800d580 <dir_register+0x184>
 800d4ee:	6a3b      	ldr	r3, [r7, #32]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	623b      	str	r3, [r7, #32]
 800d4f4:	6a3b      	ldr	r3, [r7, #32]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d042      	beq.n	800d580 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	695a      	ldr	r2, [r3, #20]
 800d4fe:	6a3b      	ldr	r3, [r7, #32]
 800d500:	015b      	lsls	r3, r3, #5
 800d502:	1ad3      	subs	r3, r2, r3
 800d504:	4619      	mov	r1, r3
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f7ff fb68 	bl	800cbdc <dir_sdi>
 800d50c:	4603      	mov	r3, r0
 800d50e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d516:	2b00      	cmp	r3, #0
 800d518:	d132      	bne.n	800d580 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	3324      	adds	r3, #36	; 0x24
 800d51e:	4618      	mov	r0, r3
 800d520:	f7ff fe8a 	bl	800d238 <sum_sfn>
 800d524:	4603      	mov	r3, r0
 800d526:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	69db      	ldr	r3, [r3, #28]
 800d52c:	4619      	mov	r1, r3
 800d52e:	69f8      	ldr	r0, [r7, #28]
 800d530:	f7fe ffdc 	bl	800c4ec <move_window>
 800d534:	4603      	mov	r3, r0
 800d536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d53a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d11d      	bne.n	800d57e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	68d8      	ldr	r0, [r3, #12]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a19      	ldr	r1, [r3, #32]
 800d54a:	6a3b      	ldr	r3, [r7, #32]
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	7efb      	ldrb	r3, [r7, #27]
 800d550:	f7ff fd7a 	bl	800d048 <put_lfn>
				fs->wflag = 1;
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	2201      	movs	r2, #1
 800d558:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d55a:	2100      	movs	r1, #0
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f7ff fbb8 	bl	800ccd2 <dir_next>
 800d562:	4603      	mov	r3, r0
 800d564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d568:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d107      	bne.n	800d580 <dir_register+0x184>
 800d570:	6a3b      	ldr	r3, [r7, #32]
 800d572:	3b01      	subs	r3, #1
 800d574:	623b      	str	r3, [r7, #32]
 800d576:	6a3b      	ldr	r3, [r7, #32]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1d5      	bne.n	800d528 <dir_register+0x12c>
 800d57c:	e000      	b.n	800d580 <dir_register+0x184>
				if (res != FR_OK) break;
 800d57e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d584:	2b00      	cmp	r3, #0
 800d586:	d128      	bne.n	800d5da <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	69db      	ldr	r3, [r3, #28]
 800d58c:	4619      	mov	r1, r3
 800d58e:	69f8      	ldr	r0, [r7, #28]
 800d590:	f7fe ffac 	bl	800c4ec <move_window>
 800d594:	4603      	mov	r3, r0
 800d596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d59a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d11b      	bne.n	800d5da <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a1b      	ldr	r3, [r3, #32]
 800d5a6:	2220      	movs	r2, #32
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fe fd91 	bl	800c0d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6a18      	ldr	r0, [r3, #32]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	3324      	adds	r3, #36	; 0x24
 800d5b8:	220b      	movs	r2, #11
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	f7fe fd68 	bl	800c090 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	330c      	adds	r3, #12
 800d5cc:	f002 0218 	and.w	r2, r2, #24
 800d5d0:	b2d2      	uxtb	r2, r2
 800d5d2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d5da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3730      	adds	r7, #48	; 0x30
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	4ec4ec4f 	.word	0x4ec4ec4f

0800d5ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b08a      	sub	sp, #40	; 0x28
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	613b      	str	r3, [r7, #16]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	60fb      	str	r3, [r7, #12]
 800d604:	2300      	movs	r3, #0
 800d606:	617b      	str	r3, [r7, #20]
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	1c5a      	adds	r2, r3, #1
 800d610:	61ba      	str	r2, [r7, #24]
 800d612:	693a      	ldr	r2, [r7, #16]
 800d614:	4413      	add	r3, r2
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d61a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d61c:	2b1f      	cmp	r3, #31
 800d61e:	d940      	bls.n	800d6a2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d622:	2b2f      	cmp	r3, #47	; 0x2f
 800d624:	d006      	beq.n	800d634 <create_name+0x48>
 800d626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d628:	2b5c      	cmp	r3, #92	; 0x5c
 800d62a:	d110      	bne.n	800d64e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d62c:	e002      	b.n	800d634 <create_name+0x48>
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	3301      	adds	r3, #1
 800d632:	61bb      	str	r3, [r7, #24]
 800d634:	693a      	ldr	r2, [r7, #16]
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	4413      	add	r3, r2
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	2b2f      	cmp	r3, #47	; 0x2f
 800d63e:	d0f6      	beq.n	800d62e <create_name+0x42>
 800d640:	693a      	ldr	r2, [r7, #16]
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	4413      	add	r3, r2
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	2b5c      	cmp	r3, #92	; 0x5c
 800d64a:	d0f0      	beq.n	800d62e <create_name+0x42>
			break;
 800d64c:	e02a      	b.n	800d6a4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	2bfe      	cmp	r3, #254	; 0xfe
 800d652:	d901      	bls.n	800d658 <create_name+0x6c>
 800d654:	2306      	movs	r3, #6
 800d656:	e177      	b.n	800d948 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d65e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d660:	2101      	movs	r1, #1
 800d662:	4618      	mov	r0, r3
 800d664:	f001 f98c 	bl	800e980 <ff_convert>
 800d668:	4603      	mov	r3, r0
 800d66a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d66c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d101      	bne.n	800d676 <create_name+0x8a>
 800d672:	2306      	movs	r3, #6
 800d674:	e168      	b.n	800d948 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d678:	2b7f      	cmp	r3, #127	; 0x7f
 800d67a:	d809      	bhi.n	800d690 <create_name+0xa4>
 800d67c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d67e:	4619      	mov	r1, r3
 800d680:	48b3      	ldr	r0, [pc, #716]	; (800d950 <create_name+0x364>)
 800d682:	f7fe fd67 	bl	800c154 <chk_chr>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d001      	beq.n	800d690 <create_name+0xa4>
 800d68c:	2306      	movs	r3, #6
 800d68e:	e15b      	b.n	800d948 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	1c5a      	adds	r2, r3, #1
 800d694:	617a      	str	r2, [r7, #20]
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	4413      	add	r3, r2
 800d69c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d69e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d6a0:	e7b4      	b.n	800d60c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d6a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d6a4:	693a      	ldr	r2, [r7, #16]
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	441a      	add	r2, r3
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d6ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6b0:	2b1f      	cmp	r3, #31
 800d6b2:	d801      	bhi.n	800d6b8 <create_name+0xcc>
 800d6b4:	2304      	movs	r3, #4
 800d6b6:	e000      	b.n	800d6ba <create_name+0xce>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d6be:	e011      	b.n	800d6e4 <create_name+0xf8>
		w = lfn[di - 1];
 800d6c0:	697a      	ldr	r2, [r7, #20]
 800d6c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d6c6:	4413      	add	r3, r2
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	881b      	ldrh	r3, [r3, #0]
 800d6d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d6d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6d4:	2b20      	cmp	r3, #32
 800d6d6:	d002      	beq.n	800d6de <create_name+0xf2>
 800d6d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6da:	2b2e      	cmp	r3, #46	; 0x2e
 800d6dc:	d106      	bne.n	800d6ec <create_name+0x100>
		di--;
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1ea      	bne.n	800d6c0 <create_name+0xd4>
 800d6ea:	e000      	b.n	800d6ee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d6ec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	005b      	lsls	r3, r3, #1
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <create_name+0x118>
 800d700:	2306      	movs	r3, #6
 800d702:	e121      	b.n	800d948 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	3324      	adds	r3, #36	; 0x24
 800d708:	220b      	movs	r2, #11
 800d70a:	2120      	movs	r1, #32
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7fe fce0 	bl	800c0d2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d712:	2300      	movs	r3, #0
 800d714:	61bb      	str	r3, [r7, #24]
 800d716:	e002      	b.n	800d71e <create_name+0x132>
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	3301      	adds	r3, #1
 800d71c:	61bb      	str	r3, [r7, #24]
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	005b      	lsls	r3, r3, #1
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	4413      	add	r3, r2
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	2b20      	cmp	r3, #32
 800d72a:	d0f5      	beq.n	800d718 <create_name+0x12c>
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	005b      	lsls	r3, r3, #1
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	4413      	add	r3, r2
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	2b2e      	cmp	r3, #46	; 0x2e
 800d738:	d0ee      	beq.n	800d718 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d009      	beq.n	800d754 <create_name+0x168>
 800d740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d744:	f043 0303 	orr.w	r3, r3, #3
 800d748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d74c:	e002      	b.n	800d754 <create_name+0x168>
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	3b01      	subs	r3, #1
 800d752:	617b      	str	r3, [r7, #20]
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d009      	beq.n	800d76e <create_name+0x182>
 800d75a:	697a      	ldr	r2, [r7, #20]
 800d75c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d760:	4413      	add	r3, r2
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	4413      	add	r3, r2
 800d768:	881b      	ldrh	r3, [r3, #0]
 800d76a:	2b2e      	cmp	r3, #46	; 0x2e
 800d76c:	d1ef      	bne.n	800d74e <create_name+0x162>

	i = b = 0; ni = 8;
 800d76e:	2300      	movs	r3, #0
 800d770:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d774:	2300      	movs	r3, #0
 800d776:	623b      	str	r3, [r7, #32]
 800d778:	2308      	movs	r3, #8
 800d77a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	1c5a      	adds	r2, r3, #1
 800d780:	61ba      	str	r2, [r7, #24]
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	4413      	add	r3, r2
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d78c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f000 8090 	beq.w	800d8b4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d796:	2b20      	cmp	r3, #32
 800d798:	d006      	beq.n	800d7a8 <create_name+0x1bc>
 800d79a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d79c:	2b2e      	cmp	r3, #46	; 0x2e
 800d79e:	d10a      	bne.n	800d7b6 <create_name+0x1ca>
 800d7a0:	69ba      	ldr	r2, [r7, #24]
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d006      	beq.n	800d7b6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d7a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7ac:	f043 0303 	orr.w	r3, r3, #3
 800d7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7b4:	e07d      	b.n	800d8b2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d7b6:	6a3a      	ldr	r2, [r7, #32]
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d203      	bcs.n	800d7c6 <create_name+0x1da>
 800d7be:	69ba      	ldr	r2, [r7, #24]
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d123      	bne.n	800d80e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	2b0b      	cmp	r3, #11
 800d7ca:	d106      	bne.n	800d7da <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7d0:	f043 0303 	orr.w	r3, r3, #3
 800d7d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7d8:	e06f      	b.n	800d8ba <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d7da:	69ba      	ldr	r2, [r7, #24]
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d005      	beq.n	800d7ee <create_name+0x202>
 800d7e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7e6:	f043 0303 	orr.w	r3, r3, #3
 800d7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d7ee:	69ba      	ldr	r2, [r7, #24]
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d860      	bhi.n	800d8b8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	61bb      	str	r3, [r7, #24]
 800d7fa:	2308      	movs	r3, #8
 800d7fc:	623b      	str	r3, [r7, #32]
 800d7fe:	230b      	movs	r3, #11
 800d800:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d802:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d80c:	e051      	b.n	800d8b2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d80e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d810:	2b7f      	cmp	r3, #127	; 0x7f
 800d812:	d914      	bls.n	800d83e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d816:	2100      	movs	r1, #0
 800d818:	4618      	mov	r0, r3
 800d81a:	f001 f8b1 	bl	800e980 <ff_convert>
 800d81e:	4603      	mov	r3, r0
 800d820:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d824:	2b00      	cmp	r3, #0
 800d826:	d004      	beq.n	800d832 <create_name+0x246>
 800d828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d82a:	3b80      	subs	r3, #128	; 0x80
 800d82c:	4a49      	ldr	r2, [pc, #292]	; (800d954 <create_name+0x368>)
 800d82e:	5cd3      	ldrb	r3, [r2, r3]
 800d830:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d836:	f043 0302 	orr.w	r3, r3, #2
 800d83a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d83e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d840:	2b00      	cmp	r3, #0
 800d842:	d007      	beq.n	800d854 <create_name+0x268>
 800d844:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d846:	4619      	mov	r1, r3
 800d848:	4843      	ldr	r0, [pc, #268]	; (800d958 <create_name+0x36c>)
 800d84a:	f7fe fc83 	bl	800c154 <chk_chr>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d008      	beq.n	800d866 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d854:	235f      	movs	r3, #95	; 0x5f
 800d856:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d85c:	f043 0303 	orr.w	r3, r3, #3
 800d860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d864:	e01b      	b.n	800d89e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d868:	2b40      	cmp	r3, #64	; 0x40
 800d86a:	d909      	bls.n	800d880 <create_name+0x294>
 800d86c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d86e:	2b5a      	cmp	r3, #90	; 0x5a
 800d870:	d806      	bhi.n	800d880 <create_name+0x294>
					b |= 2;
 800d872:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d876:	f043 0302 	orr.w	r3, r3, #2
 800d87a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d87e:	e00e      	b.n	800d89e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d882:	2b60      	cmp	r3, #96	; 0x60
 800d884:	d90b      	bls.n	800d89e <create_name+0x2b2>
 800d886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d888:	2b7a      	cmp	r3, #122	; 0x7a
 800d88a:	d808      	bhi.n	800d89e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d88c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d890:	f043 0301 	orr.w	r3, r3, #1
 800d894:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d898:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d89a:	3b20      	subs	r3, #32
 800d89c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d89e:	6a3b      	ldr	r3, [r7, #32]
 800d8a0:	1c5a      	adds	r2, r3, #1
 800d8a2:	623a      	str	r2, [r7, #32]
 800d8a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d8a6:	b2d1      	uxtb	r1, r2
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	460a      	mov	r2, r1
 800d8ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d8b2:	e763      	b.n	800d77c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d8b4:	bf00      	nop
 800d8b6:	e000      	b.n	800d8ba <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800d8b8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d8c0:	2be5      	cmp	r3, #229	; 0xe5
 800d8c2:	d103      	bne.n	800d8cc <create_name+0x2e0>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2205      	movs	r2, #5
 800d8c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	2b08      	cmp	r3, #8
 800d8d0:	d104      	bne.n	800d8dc <create_name+0x2f0>
 800d8d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8d6:	009b      	lsls	r3, r3, #2
 800d8d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d8dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8e0:	f003 030c 	and.w	r3, r3, #12
 800d8e4:	2b0c      	cmp	r3, #12
 800d8e6:	d005      	beq.n	800d8f4 <create_name+0x308>
 800d8e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8ec:	f003 0303 	and.w	r3, r3, #3
 800d8f0:	2b03      	cmp	r3, #3
 800d8f2:	d105      	bne.n	800d900 <create_name+0x314>
 800d8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8f8:	f043 0302 	orr.w	r3, r3, #2
 800d8fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d904:	f003 0302 	and.w	r3, r3, #2
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d117      	bne.n	800d93c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d90c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d910:	f003 0303 	and.w	r3, r3, #3
 800d914:	2b01      	cmp	r3, #1
 800d916:	d105      	bne.n	800d924 <create_name+0x338>
 800d918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d91c:	f043 0310 	orr.w	r3, r3, #16
 800d920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d924:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d928:	f003 030c 	and.w	r3, r3, #12
 800d92c:	2b04      	cmp	r3, #4
 800d92e:	d105      	bne.n	800d93c <create_name+0x350>
 800d930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d934:	f043 0308 	orr.w	r3, r3, #8
 800d938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d942:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d946:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3728      	adds	r7, #40	; 0x28
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	08010ed4 	.word	0x08010ed4
 800d954:	08010f24 	.word	0x08010f24
 800d958:	08010ee0 	.word	0x08010ee0

0800d95c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d970:	e002      	b.n	800d978 <follow_path+0x1c>
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	3301      	adds	r3, #1
 800d976:	603b      	str	r3, [r7, #0]
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	2b2f      	cmp	r3, #47	; 0x2f
 800d97e:	d0f8      	beq.n	800d972 <follow_path+0x16>
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	2b5c      	cmp	r3, #92	; 0x5c
 800d986:	d0f4      	beq.n	800d972 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	2200      	movs	r2, #0
 800d98c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	2b1f      	cmp	r3, #31
 800d994:	d80a      	bhi.n	800d9ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2280      	movs	r2, #128	; 0x80
 800d99a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d99e:	2100      	movs	r1, #0
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f7ff f91b 	bl	800cbdc <dir_sdi>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	75fb      	strb	r3, [r7, #23]
 800d9aa:	e043      	b.n	800da34 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d9ac:	463b      	mov	r3, r7
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f7ff fe1b 	bl	800d5ec <create_name>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d134      	bne.n	800da2a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7ff fc5a 	bl	800d27a <dir_find>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d9d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d9d2:	7dfb      	ldrb	r3, [r7, #23]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00a      	beq.n	800d9ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d9d8:	7dfb      	ldrb	r3, [r7, #23]
 800d9da:	2b04      	cmp	r3, #4
 800d9dc:	d127      	bne.n	800da2e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d9de:	7afb      	ldrb	r3, [r7, #11]
 800d9e0:	f003 0304 	and.w	r3, r3, #4
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d122      	bne.n	800da2e <follow_path+0xd2>
 800d9e8:	2305      	movs	r3, #5
 800d9ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d9ec:	e01f      	b.n	800da2e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d9ee:	7afb      	ldrb	r3, [r7, #11]
 800d9f0:	f003 0304 	and.w	r3, r3, #4
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d11c      	bne.n	800da32 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	799b      	ldrb	r3, [r3, #6]
 800d9fc:	f003 0310 	and.w	r3, r3, #16
 800da00:	2b00      	cmp	r3, #0
 800da02:	d102      	bne.n	800da0a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800da04:	2305      	movs	r3, #5
 800da06:	75fb      	strb	r3, [r7, #23]
 800da08:	e014      	b.n	800da34 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	695b      	ldr	r3, [r3, #20]
 800da14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da18:	4413      	add	r3, r2
 800da1a:	4619      	mov	r1, r3
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f7ff fa64 	bl	800ceea <ld_clust>
 800da22:	4602      	mov	r2, r0
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da28:	e7c0      	b.n	800d9ac <follow_path+0x50>
			if (res != FR_OK) break;
 800da2a:	bf00      	nop
 800da2c:	e002      	b.n	800da34 <follow_path+0xd8>
				break;
 800da2e:	bf00      	nop
 800da30:	e000      	b.n	800da34 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800da32:	bf00      	nop
			}
		}
	}

	return res;
 800da34:	7dfb      	ldrb	r3, [r7, #23]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3718      	adds	r7, #24
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800da3e:	b480      	push	{r7}
 800da40:	b087      	sub	sp, #28
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800da46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da4a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d031      	beq.n	800dab8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	617b      	str	r3, [r7, #20]
 800da5a:	e002      	b.n	800da62 <get_ldnumber+0x24>
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	3301      	adds	r3, #1
 800da60:	617b      	str	r3, [r7, #20]
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	2b1f      	cmp	r3, #31
 800da68:	d903      	bls.n	800da72 <get_ldnumber+0x34>
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	2b3a      	cmp	r3, #58	; 0x3a
 800da70:	d1f4      	bne.n	800da5c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	2b3a      	cmp	r3, #58	; 0x3a
 800da78:	d11c      	bne.n	800dab4 <get_ldnumber+0x76>
			tp = *path;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	1c5a      	adds	r2, r3, #1
 800da84:	60fa      	str	r2, [r7, #12]
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	3b30      	subs	r3, #48	; 0x30
 800da8a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	2b09      	cmp	r3, #9
 800da90:	d80e      	bhi.n	800dab0 <get_ldnumber+0x72>
 800da92:	68fa      	ldr	r2, [r7, #12]
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	429a      	cmp	r2, r3
 800da98:	d10a      	bne.n	800dab0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d107      	bne.n	800dab0 <get_ldnumber+0x72>
					vol = (int)i;
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	3301      	adds	r3, #1
 800daa8:	617b      	str	r3, [r7, #20]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	697a      	ldr	r2, [r7, #20]
 800daae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	e002      	b.n	800daba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dab4:	2300      	movs	r3, #0
 800dab6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dab8:	693b      	ldr	r3, [r7, #16]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	371c      	adds	r7, #28
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
	...

0800dac8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	70da      	strb	r2, [r3, #3]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dade:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dae0:	6839      	ldr	r1, [r7, #0]
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7fe fd02 	bl	800c4ec <move_window>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <check_fs+0x2a>
 800daee:	2304      	movs	r3, #4
 800daf0:	e038      	b.n	800db64 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	3334      	adds	r3, #52	; 0x34
 800daf6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fe fa46 	bl	800bf8c <ld_word>
 800db00:	4603      	mov	r3, r0
 800db02:	461a      	mov	r2, r3
 800db04:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800db08:	429a      	cmp	r2, r3
 800db0a:	d001      	beq.n	800db10 <check_fs+0x48>
 800db0c:	2303      	movs	r3, #3
 800db0e:	e029      	b.n	800db64 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db16:	2be9      	cmp	r3, #233	; 0xe9
 800db18:	d009      	beq.n	800db2e <check_fs+0x66>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db20:	2beb      	cmp	r3, #235	; 0xeb
 800db22:	d11e      	bne.n	800db62 <check_fs+0x9a>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800db2a:	2b90      	cmp	r3, #144	; 0x90
 800db2c:	d119      	bne.n	800db62 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	3334      	adds	r3, #52	; 0x34
 800db32:	3336      	adds	r3, #54	; 0x36
 800db34:	4618      	mov	r0, r3
 800db36:	f7fe fa41 	bl	800bfbc <ld_dword>
 800db3a:	4603      	mov	r3, r0
 800db3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800db40:	4a0a      	ldr	r2, [pc, #40]	; (800db6c <check_fs+0xa4>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d101      	bne.n	800db4a <check_fs+0x82>
 800db46:	2300      	movs	r3, #0
 800db48:	e00c      	b.n	800db64 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	3334      	adds	r3, #52	; 0x34
 800db4e:	3352      	adds	r3, #82	; 0x52
 800db50:	4618      	mov	r0, r3
 800db52:	f7fe fa33 	bl	800bfbc <ld_dword>
 800db56:	4602      	mov	r2, r0
 800db58:	4b05      	ldr	r3, [pc, #20]	; (800db70 <check_fs+0xa8>)
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d101      	bne.n	800db62 <check_fs+0x9a>
 800db5e:	2300      	movs	r3, #0
 800db60:	e000      	b.n	800db64 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800db62:	2302      	movs	r3, #2
}
 800db64:	4618      	mov	r0, r3
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	00544146 	.word	0x00544146
 800db70:	33544146 	.word	0x33544146

0800db74 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b096      	sub	sp, #88	; 0x58
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	4613      	mov	r3, r2
 800db80:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	2200      	movs	r2, #0
 800db86:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f7ff ff58 	bl	800da3e <get_ldnumber>
 800db8e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800db90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db92:	2b00      	cmp	r3, #0
 800db94:	da01      	bge.n	800db9a <find_volume+0x26>
 800db96:	230b      	movs	r3, #11
 800db98:	e231      	b.n	800dffe <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800db9a:	4aa8      	ldr	r2, [pc, #672]	; (800de3c <find_volume+0x2c8>)
 800db9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dba2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d101      	bne.n	800dbae <find_volume+0x3a>
 800dbaa:	230c      	movs	r3, #12
 800dbac:	e227      	b.n	800dffe <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbb2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dbb4:	79fb      	ldrb	r3, [r7, #7]
 800dbb6:	f023 0301 	bic.w	r3, r3, #1
 800dbba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d01a      	beq.n	800dbfa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc6:	785b      	ldrb	r3, [r3, #1]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7fe f941 	bl	800be50 <disk_status>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dbd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dbd8:	f003 0301 	and.w	r3, r3, #1
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d10c      	bne.n	800dbfa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dbe0:	79fb      	ldrb	r3, [r7, #7]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d007      	beq.n	800dbf6 <find_volume+0x82>
 800dbe6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dbea:	f003 0304 	and.w	r3, r3, #4
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d001      	beq.n	800dbf6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dbf2:	230a      	movs	r3, #10
 800dbf4:	e203      	b.n	800dffe <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	e201      	b.n	800dffe <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc06:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0a:	785b      	ldrb	r3, [r3, #1]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7fe f939 	bl	800be84 <disk_initialize>
 800dc12:	4603      	mov	r3, r0
 800dc14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dc18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dc1c:	f003 0301 	and.w	r3, r3, #1
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d001      	beq.n	800dc28 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dc24:	2303      	movs	r3, #3
 800dc26:	e1ea      	b.n	800dffe <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dc28:	79fb      	ldrb	r3, [r7, #7]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d007      	beq.n	800dc3e <find_volume+0xca>
 800dc2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dc32:	f003 0304 	and.w	r3, r3, #4
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d001      	beq.n	800dc3e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dc3a:	230a      	movs	r3, #10
 800dc3c:	e1df      	b.n	800dffe <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dc42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc46:	f7ff ff3f 	bl	800dac8 <check_fs>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dc50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc54:	2b02      	cmp	r3, #2
 800dc56:	d14b      	bne.n	800dcf0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc58:	2300      	movs	r3, #0
 800dc5a:	643b      	str	r3, [r7, #64]	; 0x40
 800dc5c:	e01f      	b.n	800dc9e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc60:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc66:	011b      	lsls	r3, r3, #4
 800dc68:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dc6c:	4413      	add	r3, r2
 800dc6e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc72:	3304      	adds	r3, #4
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d006      	beq.n	800dc88 <find_volume+0x114>
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7c:	3308      	adds	r3, #8
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fe f99c 	bl	800bfbc <ld_dword>
 800dc84:	4602      	mov	r2, r0
 800dc86:	e000      	b.n	800dc8a <find_volume+0x116>
 800dc88:	2200      	movs	r2, #0
 800dc8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800dc92:	440b      	add	r3, r1
 800dc94:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	643b      	str	r3, [r7, #64]	; 0x40
 800dc9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dca0:	2b03      	cmp	r3, #3
 800dca2:	d9dc      	bls.n	800dc5e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dca4:	2300      	movs	r3, #0
 800dca6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d002      	beq.n	800dcb4 <find_volume+0x140>
 800dcae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dcb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800dcbc:	4413      	add	r3, r2
 800dcbe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dcc2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dcc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d005      	beq.n	800dcd6 <find_volume+0x162>
 800dcca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dccc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dcce:	f7ff fefb 	bl	800dac8 <check_fs>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	e000      	b.n	800dcd8 <find_volume+0x164>
 800dcd6:	2303      	movs	r3, #3
 800dcd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dcdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d905      	bls.n	800dcf0 <find_volume+0x17c>
 800dce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dce6:	3301      	adds	r3, #1
 800dce8:	643b      	str	r3, [r7, #64]	; 0x40
 800dcea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	d9e1      	bls.n	800dcb4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dcf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dcf4:	2b04      	cmp	r3, #4
 800dcf6:	d101      	bne.n	800dcfc <find_volume+0x188>
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	e180      	b.n	800dffe <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dcfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d901      	bls.n	800dd08 <find_volume+0x194>
 800dd04:	230d      	movs	r3, #13
 800dd06:	e17a      	b.n	800dffe <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0a:	3334      	adds	r3, #52	; 0x34
 800dd0c:	330b      	adds	r3, #11
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7fe f93c 	bl	800bf8c <ld_word>
 800dd14:	4603      	mov	r3, r0
 800dd16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd1a:	d001      	beq.n	800dd20 <find_volume+0x1ac>
 800dd1c:	230d      	movs	r3, #13
 800dd1e:	e16e      	b.n	800dffe <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd22:	3334      	adds	r3, #52	; 0x34
 800dd24:	3316      	adds	r3, #22
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fe f930 	bl	800bf8c <ld_word>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dd30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d106      	bne.n	800dd44 <find_volume+0x1d0>
 800dd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd38:	3334      	adds	r3, #52	; 0x34
 800dd3a:	3324      	adds	r3, #36	; 0x24
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7fe f93d 	bl	800bfbc <ld_dword>
 800dd42:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd48:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800dd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd52:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd56:	789b      	ldrb	r3, [r3, #2]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d005      	beq.n	800dd68 <find_volume+0x1f4>
 800dd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5e:	789b      	ldrb	r3, [r3, #2]
 800dd60:	2b02      	cmp	r3, #2
 800dd62:	d001      	beq.n	800dd68 <find_volume+0x1f4>
 800dd64:	230d      	movs	r3, #13
 800dd66:	e14a      	b.n	800dffe <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6a:	789b      	ldrb	r3, [r3, #2]
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd70:	fb02 f303 	mul.w	r3, r2, r3
 800dd74:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd80:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd84:	895b      	ldrh	r3, [r3, #10]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d008      	beq.n	800dd9c <find_volume+0x228>
 800dd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8c:	895b      	ldrh	r3, [r3, #10]
 800dd8e:	461a      	mov	r2, r3
 800dd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd92:	895b      	ldrh	r3, [r3, #10]
 800dd94:	3b01      	subs	r3, #1
 800dd96:	4013      	ands	r3, r2
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d001      	beq.n	800dda0 <find_volume+0x22c>
 800dd9c:	230d      	movs	r3, #13
 800dd9e:	e12e      	b.n	800dffe <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda2:	3334      	adds	r3, #52	; 0x34
 800dda4:	3311      	adds	r3, #17
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fe f8f0 	bl	800bf8c <ld_word>
 800ddac:	4603      	mov	r3, r0
 800ddae:	461a      	mov	r2, r3
 800ddb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ddb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb6:	891b      	ldrh	r3, [r3, #8]
 800ddb8:	f003 030f 	and.w	r3, r3, #15
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d001      	beq.n	800ddc6 <find_volume+0x252>
 800ddc2:	230d      	movs	r3, #13
 800ddc4:	e11b      	b.n	800dffe <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ddc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc8:	3334      	adds	r3, #52	; 0x34
 800ddca:	3313      	adds	r3, #19
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7fe f8dd 	bl	800bf8c <ld_word>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ddd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d106      	bne.n	800ddea <find_volume+0x276>
 800dddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddde:	3334      	adds	r3, #52	; 0x34
 800dde0:	3320      	adds	r3, #32
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7fe f8ea 	bl	800bfbc <ld_dword>
 800dde8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ddea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddec:	3334      	adds	r3, #52	; 0x34
 800ddee:	330e      	adds	r3, #14
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7fe f8cb 	bl	800bf8c <ld_word>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ddfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d101      	bne.n	800de04 <find_volume+0x290>
 800de00:	230d      	movs	r3, #13
 800de02:	e0fc      	b.n	800dffe <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800de04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800de06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de08:	4413      	add	r3, r2
 800de0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de0c:	8912      	ldrh	r2, [r2, #8]
 800de0e:	0912      	lsrs	r2, r2, #4
 800de10:	b292      	uxth	r2, r2
 800de12:	4413      	add	r3, r2
 800de14:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800de16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d201      	bcs.n	800de22 <find_volume+0x2ae>
 800de1e:	230d      	movs	r3, #13
 800de20:	e0ed      	b.n	800dffe <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800de22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de2a:	8952      	ldrh	r2, [r2, #10]
 800de2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800de30:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de34:	2b00      	cmp	r3, #0
 800de36:	d103      	bne.n	800de40 <find_volume+0x2cc>
 800de38:	230d      	movs	r3, #13
 800de3a:	e0e0      	b.n	800dffe <find_volume+0x48a>
 800de3c:	20000034 	.word	0x20000034
		fmt = FS_FAT32;
 800de40:	2303      	movs	r3, #3
 800de42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800de46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de48:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d802      	bhi.n	800de56 <find_volume+0x2e2>
 800de50:	2302      	movs	r3, #2
 800de52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800de56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de58:	f640 72f5 	movw	r2, #4085	; 0xff5
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d802      	bhi.n	800de66 <find_volume+0x2f2>
 800de60:	2301      	movs	r3, #1
 800de62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800de66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de68:	1c9a      	adds	r2, r3, #2
 800de6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800de6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de72:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800de74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800de76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de78:	441a      	add	r2, r3
 800de7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800de7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de82:	441a      	add	r2, r3
 800de84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de86:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800de88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de8c:	2b03      	cmp	r3, #3
 800de8e:	d11e      	bne.n	800dece <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800de90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de92:	3334      	adds	r3, #52	; 0x34
 800de94:	332a      	adds	r3, #42	; 0x2a
 800de96:	4618      	mov	r0, r3
 800de98:	f7fe f878 	bl	800bf8c <ld_word>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d001      	beq.n	800dea6 <find_volume+0x332>
 800dea2:	230d      	movs	r3, #13
 800dea4:	e0ab      	b.n	800dffe <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea8:	891b      	ldrh	r3, [r3, #8]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d001      	beq.n	800deb2 <find_volume+0x33e>
 800deae:	230d      	movs	r3, #13
 800deb0:	e0a5      	b.n	800dffe <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800deb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb4:	3334      	adds	r3, #52	; 0x34
 800deb6:	332c      	adds	r3, #44	; 0x2c
 800deb8:	4618      	mov	r0, r3
 800deba:	f7fe f87f 	bl	800bfbc <ld_dword>
 800debe:	4602      	mov	r2, r0
 800dec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec6:	699b      	ldr	r3, [r3, #24]
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	647b      	str	r3, [r7, #68]	; 0x44
 800decc:	e01f      	b.n	800df0e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded0:	891b      	ldrh	r3, [r3, #8]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d101      	bne.n	800deda <find_volume+0x366>
 800ded6:	230d      	movs	r3, #13
 800ded8:	e091      	b.n	800dffe <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800deda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dedc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dee0:	441a      	add	r2, r3
 800dee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dee6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800deea:	2b02      	cmp	r3, #2
 800deec:	d103      	bne.n	800def6 <find_volume+0x382>
 800deee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def0:	699b      	ldr	r3, [r3, #24]
 800def2:	005b      	lsls	r3, r3, #1
 800def4:	e00a      	b.n	800df0c <find_volume+0x398>
 800def6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def8:	699a      	ldr	r2, [r3, #24]
 800defa:	4613      	mov	r3, r2
 800defc:	005b      	lsls	r3, r3, #1
 800defe:	4413      	add	r3, r2
 800df00:	085a      	lsrs	r2, r3, #1
 800df02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df04:	699b      	ldr	r3, [r3, #24]
 800df06:	f003 0301 	and.w	r3, r3, #1
 800df0a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800df0c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800df0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df10:	69da      	ldr	r2, [r3, #28]
 800df12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df14:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800df18:	0a5b      	lsrs	r3, r3, #9
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d201      	bcs.n	800df22 <find_volume+0x3ae>
 800df1e:	230d      	movs	r3, #13
 800df20:	e06d      	b.n	800dffe <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800df22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df28:	615a      	str	r2, [r3, #20]
 800df2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2c:	695a      	ldr	r2, [r3, #20]
 800df2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df30:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800df32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df34:	2280      	movs	r2, #128	; 0x80
 800df36:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800df38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df3c:	2b03      	cmp	r3, #3
 800df3e:	d149      	bne.n	800dfd4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800df40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df42:	3334      	adds	r3, #52	; 0x34
 800df44:	3330      	adds	r3, #48	; 0x30
 800df46:	4618      	mov	r0, r3
 800df48:	f7fe f820 	bl	800bf8c <ld_word>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d140      	bne.n	800dfd4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800df52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df54:	3301      	adds	r3, #1
 800df56:	4619      	mov	r1, r3
 800df58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df5a:	f7fe fac7 	bl	800c4ec <move_window>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d137      	bne.n	800dfd4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800df64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df66:	2200      	movs	r2, #0
 800df68:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800df6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6c:	3334      	adds	r3, #52	; 0x34
 800df6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800df72:	4618      	mov	r0, r3
 800df74:	f7fe f80a 	bl	800bf8c <ld_word>
 800df78:	4603      	mov	r3, r0
 800df7a:	461a      	mov	r2, r3
 800df7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800df80:	429a      	cmp	r2, r3
 800df82:	d127      	bne.n	800dfd4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800df84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df86:	3334      	adds	r3, #52	; 0x34
 800df88:	4618      	mov	r0, r3
 800df8a:	f7fe f817 	bl	800bfbc <ld_dword>
 800df8e:	4602      	mov	r2, r0
 800df90:	4b1d      	ldr	r3, [pc, #116]	; (800e008 <find_volume+0x494>)
 800df92:	429a      	cmp	r2, r3
 800df94:	d11e      	bne.n	800dfd4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800df96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df98:	3334      	adds	r3, #52	; 0x34
 800df9a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fe f80c 	bl	800bfbc <ld_dword>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	4b19      	ldr	r3, [pc, #100]	; (800e00c <find_volume+0x498>)
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d113      	bne.n	800dfd4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfae:	3334      	adds	r3, #52	; 0x34
 800dfb0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fe f801 	bl	800bfbc <ld_dword>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbe:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc2:	3334      	adds	r3, #52	; 0x34
 800dfc4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fd fff7 	bl	800bfbc <ld_dword>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dfda:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dfdc:	4b0c      	ldr	r3, [pc, #48]	; (800e010 <find_volume+0x49c>)
 800dfde:	881b      	ldrh	r3, [r3, #0]
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	b29a      	uxth	r2, r3
 800dfe4:	4b0a      	ldr	r3, [pc, #40]	; (800e010 <find_volume+0x49c>)
 800dfe6:	801a      	strh	r2, [r3, #0]
 800dfe8:	4b09      	ldr	r3, [pc, #36]	; (800e010 <find_volume+0x49c>)
 800dfea:	881a      	ldrh	r2, [r3, #0]
 800dfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfee:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800dff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff2:	4a08      	ldr	r2, [pc, #32]	; (800e014 <find_volume+0x4a0>)
 800dff4:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dff6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dff8:	f7fe fa10 	bl	800c41c <clear_lock>
#endif
	return FR_OK;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3758      	adds	r7, #88	; 0x58
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	41615252 	.word	0x41615252
 800e00c:	61417272 	.word	0x61417272
 800e010:	20000038 	.word	0x20000038
 800e014:	2000005c 	.word	0x2000005c

0800e018 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e022:	2309      	movs	r3, #9
 800e024:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d01c      	beq.n	800e066 <validate+0x4e>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d018      	beq.n	800e066 <validate+0x4e>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d013      	beq.n	800e066 <validate+0x4e>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	889a      	ldrh	r2, [r3, #4]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	88db      	ldrh	r3, [r3, #6]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d10c      	bne.n	800e066 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	785b      	ldrb	r3, [r3, #1]
 800e052:	4618      	mov	r0, r3
 800e054:	f7fd fefc 	bl	800be50 <disk_status>
 800e058:	4603      	mov	r3, r0
 800e05a:	f003 0301 	and.w	r3, r3, #1
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d101      	bne.n	800e066 <validate+0x4e>
			res = FR_OK;
 800e062:	2300      	movs	r3, #0
 800e064:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e066:	7bfb      	ldrb	r3, [r7, #15]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d102      	bne.n	800e072 <validate+0x5a>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	e000      	b.n	800e074 <validate+0x5c>
 800e072:	2300      	movs	r3, #0
 800e074:	683a      	ldr	r2, [r7, #0]
 800e076:	6013      	str	r3, [r2, #0]
	return res;
 800e078:	7bfb      	ldrb	r3, [r7, #15]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
	...

0800e084 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	4613      	mov	r3, r2
 800e090:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e096:	f107 0310 	add.w	r3, r7, #16
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7ff fccf 	bl	800da3e <get_ldnumber>
 800e0a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	da01      	bge.n	800e0ac <f_mount+0x28>
 800e0a8:	230b      	movs	r3, #11
 800e0aa:	e02b      	b.n	800e104 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e0ac:	4a17      	ldr	r2, [pc, #92]	; (800e10c <f_mount+0x88>)
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e0b6:	69bb      	ldr	r3, [r7, #24]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d005      	beq.n	800e0c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e0bc:	69b8      	ldr	r0, [r7, #24]
 800e0be:	f7fe f9ad 	bl	800c41c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d002      	beq.n	800e0d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e0d4:	68fa      	ldr	r2, [r7, #12]
 800e0d6:	490d      	ldr	r1, [pc, #52]	; (800e10c <f_mount+0x88>)
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d002      	beq.n	800e0ea <f_mount+0x66>
 800e0e4:	79fb      	ldrb	r3, [r7, #7]
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d001      	beq.n	800e0ee <f_mount+0x6a>
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	e00a      	b.n	800e104 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e0ee:	f107 010c 	add.w	r1, r7, #12
 800e0f2:	f107 0308 	add.w	r3, r7, #8
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7ff fd3b 	bl	800db74 <find_volume>
 800e0fe:	4603      	mov	r3, r0
 800e100:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e102:	7dfb      	ldrb	r3, [r7, #23]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3720      	adds	r7, #32
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	20000034 	.word	0x20000034

0800e110 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b09a      	sub	sp, #104	; 0x68
 800e114:	af00      	add	r7, sp, #0
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	60b9      	str	r1, [r7, #8]
 800e11a:	4613      	mov	r3, r2
 800e11c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d101      	bne.n	800e128 <f_open+0x18>
 800e124:	2309      	movs	r3, #9
 800e126:	e1ad      	b.n	800e484 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e128:	79fb      	ldrb	r3, [r7, #7]
 800e12a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e12e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e130:	79fa      	ldrb	r2, [r7, #7]
 800e132:	f107 0114 	add.w	r1, r7, #20
 800e136:	f107 0308 	add.w	r3, r7, #8
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7ff fd1a 	bl	800db74 <find_volume>
 800e140:	4603      	mov	r3, r0
 800e142:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e146:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	f040 8191 	bne.w	800e472 <f_open+0x362>
		dj.obj.fs = fs;
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e154:	68ba      	ldr	r2, [r7, #8]
 800e156:	f107 0318 	add.w	r3, r7, #24
 800e15a:	4611      	mov	r1, r2
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7ff fbfd 	bl	800d95c <follow_path>
 800e162:	4603      	mov	r3, r0
 800e164:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e168:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d11a      	bne.n	800e1a6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e170:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e174:	b25b      	sxtb	r3, r3
 800e176:	2b00      	cmp	r3, #0
 800e178:	da03      	bge.n	800e182 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e17a:	2306      	movs	r3, #6
 800e17c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e180:	e011      	b.n	800e1a6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e182:	79fb      	ldrb	r3, [r7, #7]
 800e184:	f023 0301 	bic.w	r3, r3, #1
 800e188:	2b00      	cmp	r3, #0
 800e18a:	bf14      	ite	ne
 800e18c:	2301      	movne	r3, #1
 800e18e:	2300      	moveq	r3, #0
 800e190:	b2db      	uxtb	r3, r3
 800e192:	461a      	mov	r2, r3
 800e194:	f107 0318 	add.w	r3, r7, #24
 800e198:	4611      	mov	r1, r2
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fd fff6 	bl	800c18c <chk_lock>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e1a6:	79fb      	ldrb	r3, [r7, #7]
 800e1a8:	f003 031c 	and.w	r3, r3, #28
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d07f      	beq.n	800e2b0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e1b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d017      	beq.n	800e1e8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e1b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e1bc:	2b04      	cmp	r3, #4
 800e1be:	d10e      	bne.n	800e1de <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e1c0:	f7fe f840 	bl	800c244 <enq_lock>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d006      	beq.n	800e1d8 <f_open+0xc8>
 800e1ca:	f107 0318 	add.w	r3, r7, #24
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7ff f914 	bl	800d3fc <dir_register>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	e000      	b.n	800e1da <f_open+0xca>
 800e1d8:	2312      	movs	r3, #18
 800e1da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e1de:	79fb      	ldrb	r3, [r7, #7]
 800e1e0:	f043 0308 	orr.w	r3, r3, #8
 800e1e4:	71fb      	strb	r3, [r7, #7]
 800e1e6:	e010      	b.n	800e20a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e1e8:	7fbb      	ldrb	r3, [r7, #30]
 800e1ea:	f003 0311 	and.w	r3, r3, #17
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d003      	beq.n	800e1fa <f_open+0xea>
					res = FR_DENIED;
 800e1f2:	2307      	movs	r3, #7
 800e1f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e1f8:	e007      	b.n	800e20a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e1fa:	79fb      	ldrb	r3, [r7, #7]
 800e1fc:	f003 0304 	and.w	r3, r3, #4
 800e200:	2b00      	cmp	r3, #0
 800e202:	d002      	beq.n	800e20a <f_open+0xfa>
 800e204:	2308      	movs	r3, #8
 800e206:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e20a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d168      	bne.n	800e2e4 <f_open+0x1d4>
 800e212:	79fb      	ldrb	r3, [r7, #7]
 800e214:	f003 0308 	and.w	r3, r3, #8
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d063      	beq.n	800e2e4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e21c:	f000 ff44 	bl	800f0a8 <get_fattime>
 800e220:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e224:	330e      	adds	r3, #14
 800e226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fd ff05 	bl	800c038 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e230:	3316      	adds	r3, #22
 800e232:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e234:	4618      	mov	r0, r3
 800e236:	f7fd feff 	bl	800c038 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23c:	330b      	adds	r3, #11
 800e23e:	2220      	movs	r2, #32
 800e240:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e246:	4611      	mov	r1, r2
 800e248:	4618      	mov	r0, r3
 800e24a:	f7fe fe4e 	bl	800ceea <ld_clust>
 800e24e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e254:	2200      	movs	r2, #0
 800e256:	4618      	mov	r0, r3
 800e258:	f7fe fe66 	bl	800cf28 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25e:	331c      	adds	r3, #28
 800e260:	2100      	movs	r1, #0
 800e262:	4618      	mov	r0, r3
 800e264:	f7fd fee8 	bl	800c038 <st_dword>
					fs->wflag = 1;
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	2201      	movs	r2, #1
 800e26c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e26e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e270:	2b00      	cmp	r3, #0
 800e272:	d037      	beq.n	800e2e4 <f_open+0x1d4>
						dw = fs->winsect;
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e278:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e27a:	f107 0318 	add.w	r3, r7, #24
 800e27e:	2200      	movs	r2, #0
 800e280:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e282:	4618      	mov	r0, r3
 800e284:	f7fe fb79 	bl	800c97a <remove_chain>
 800e288:	4603      	mov	r3, r0
 800e28a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e28e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e292:	2b00      	cmp	r3, #0
 800e294:	d126      	bne.n	800e2e4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fe f926 	bl	800c4ec <move_window>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e2aa:	3a01      	subs	r2, #1
 800e2ac:	611a      	str	r2, [r3, #16]
 800e2ae:	e019      	b.n	800e2e4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e2b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d115      	bne.n	800e2e4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e2b8:	7fbb      	ldrb	r3, [r7, #30]
 800e2ba:	f003 0310 	and.w	r3, r3, #16
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d003      	beq.n	800e2ca <f_open+0x1ba>
					res = FR_NO_FILE;
 800e2c2:	2304      	movs	r3, #4
 800e2c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e2c8:	e00c      	b.n	800e2e4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e2ca:	79fb      	ldrb	r3, [r7, #7]
 800e2cc:	f003 0302 	and.w	r3, r3, #2
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d007      	beq.n	800e2e4 <f_open+0x1d4>
 800e2d4:	7fbb      	ldrb	r3, [r7, #30]
 800e2d6:	f003 0301 	and.w	r3, r3, #1
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d002      	beq.n	800e2e4 <f_open+0x1d4>
						res = FR_DENIED;
 800e2de:	2307      	movs	r3, #7
 800e2e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e2e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d128      	bne.n	800e33e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e2ec:	79fb      	ldrb	r3, [r7, #7]
 800e2ee:	f003 0308 	and.w	r3, r3, #8
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d003      	beq.n	800e2fe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e2f6:	79fb      	ldrb	r3, [r7, #7]
 800e2f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e30c:	79fb      	ldrb	r3, [r7, #7]
 800e30e:	f023 0301 	bic.w	r3, r3, #1
 800e312:	2b00      	cmp	r3, #0
 800e314:	bf14      	ite	ne
 800e316:	2301      	movne	r3, #1
 800e318:	2300      	moveq	r3, #0
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	461a      	mov	r2, r3
 800e31e:	f107 0318 	add.w	r3, r7, #24
 800e322:	4611      	mov	r1, r2
 800e324:	4618      	mov	r0, r3
 800e326:	f7fd ffaf 	bl	800c288 <inc_lock>
 800e32a:	4602      	mov	r2, r0
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d102      	bne.n	800e33e <f_open+0x22e>
 800e338:	2302      	movs	r3, #2
 800e33a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e33e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e342:	2b00      	cmp	r3, #0
 800e344:	f040 8095 	bne.w	800e472 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e34c:	4611      	mov	r1, r2
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fe fdcb 	bl	800ceea <ld_clust>
 800e354:	4602      	mov	r2, r0
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35c:	331c      	adds	r3, #28
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fd fe2c 	bl	800bfbc <ld_dword>
 800e364:	4602      	mov	r2, r0
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2200      	movs	r2, #0
 800e36e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e370:	697a      	ldr	r2, [r7, #20]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	88da      	ldrh	r2, [r3, #6]
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	79fa      	ldrb	r2, [r7, #7]
 800e382:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2200      	movs	r2, #0
 800e388:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2200      	movs	r2, #0
 800e38e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2200      	movs	r2, #0
 800e394:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	3330      	adds	r3, #48	; 0x30
 800e39a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e39e:	2100      	movs	r1, #0
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7fd fe96 	bl	800c0d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e3a6:	79fb      	ldrb	r3, [r7, #7]
 800e3a8:	f003 0320 	and.w	r3, r3, #32
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d060      	beq.n	800e472 <f_open+0x362>
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d05c      	beq.n	800e472 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	68da      	ldr	r2, [r3, #12]
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	895b      	ldrh	r3, [r3, #10]
 800e3c4:	025b      	lsls	r3, r3, #9
 800e3c6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	689b      	ldr	r3, [r3, #8]
 800e3cc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e3d4:	e016      	b.n	800e404 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fe f941 	bl	800c662 <get_fat>
 800e3e0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e3e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d802      	bhi.n	800e3ee <f_open+0x2de>
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e3ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3f4:	d102      	bne.n	800e3fc <f_open+0x2ec>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e3fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e400:	1ad3      	subs	r3, r2, r3
 800e402:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d103      	bne.n	800e414 <f_open+0x304>
 800e40c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e40e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e410:	429a      	cmp	r2, r3
 800e412:	d8e0      	bhi.n	800e3d6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e418:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e41a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d127      	bne.n	800e472 <f_open+0x362>
 800e422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d022      	beq.n	800e472 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e430:	4618      	mov	r0, r3
 800e432:	f7fe f8f7 	bl	800c624 <clust2sect>
 800e436:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d103      	bne.n	800e446 <f_open+0x336>
						res = FR_INT_ERR;
 800e43e:	2302      	movs	r3, #2
 800e440:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e444:	e015      	b.n	800e472 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e448:	0a5a      	lsrs	r2, r3, #9
 800e44a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e44c:	441a      	add	r2, r3
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	7858      	ldrb	r0, [r3, #1]
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	6a1a      	ldr	r2, [r3, #32]
 800e460:	2301      	movs	r3, #1
 800e462:	f7fd fd35 	bl	800bed0 <disk_read>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d002      	beq.n	800e472 <f_open+0x362>
 800e46c:	2301      	movs	r3, #1
 800e46e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e472:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e476:	2b00      	cmp	r3, #0
 800e478:	d002      	beq.n	800e480 <f_open+0x370>
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2200      	movs	r2, #0
 800e47e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e480:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e484:	4618      	mov	r0, r3
 800e486:	3768      	adds	r7, #104	; 0x68
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b08c      	sub	sp, #48	; 0x30
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	607a      	str	r2, [r7, #4]
 800e498:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f107 0210 	add.w	r2, r7, #16
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7ff fdb3 	bl	800e018 <validate>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e4b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d107      	bne.n	800e4d0 <f_write+0x44>
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	7d5b      	ldrb	r3, [r3, #21]
 800e4c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e4c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d002      	beq.n	800e4d6 <f_write+0x4a>
 800e4d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4d4:	e14b      	b.n	800e76e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	7d1b      	ldrb	r3, [r3, #20]
 800e4da:	f003 0302 	and.w	r3, r3, #2
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d101      	bne.n	800e4e6 <f_write+0x5a>
 800e4e2:	2307      	movs	r3, #7
 800e4e4:	e143      	b.n	800e76e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	699a      	ldr	r2, [r3, #24]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	441a      	add	r2, r3
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	699b      	ldr	r3, [r3, #24]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	f080 812d 	bcs.w	800e752 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	699b      	ldr	r3, [r3, #24]
 800e4fc:	43db      	mvns	r3, r3
 800e4fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e500:	e127      	b.n	800e752 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	699b      	ldr	r3, [r3, #24]
 800e506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f040 80e3 	bne.w	800e6d6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	699b      	ldr	r3, [r3, #24]
 800e514:	0a5b      	lsrs	r3, r3, #9
 800e516:	693a      	ldr	r2, [r7, #16]
 800e518:	8952      	ldrh	r2, [r2, #10]
 800e51a:	3a01      	subs	r2, #1
 800e51c:	4013      	ands	r3, r2
 800e51e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d143      	bne.n	800e5ae <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	699b      	ldr	r3, [r3, #24]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10c      	bne.n	800e548 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e536:	2b00      	cmp	r3, #0
 800e538:	d11a      	bne.n	800e570 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2100      	movs	r1, #0
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fe fa80 	bl	800ca44 <create_chain>
 800e544:	62b8      	str	r0, [r7, #40]	; 0x28
 800e546:	e013      	b.n	800e570 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d007      	beq.n	800e560 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	699b      	ldr	r3, [r3, #24]
 800e554:	4619      	mov	r1, r3
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f7fe fb0c 	bl	800cb74 <clmt_clust>
 800e55c:	62b8      	str	r0, [r7, #40]	; 0x28
 800e55e:	e007      	b.n	800e570 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e560:	68fa      	ldr	r2, [r7, #12]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	69db      	ldr	r3, [r3, #28]
 800e566:	4619      	mov	r1, r3
 800e568:	4610      	mov	r0, r2
 800e56a:	f7fe fa6b 	bl	800ca44 <create_chain>
 800e56e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e572:	2b00      	cmp	r3, #0
 800e574:	f000 80f2 	beq.w	800e75c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d104      	bne.n	800e588 <f_write+0xfc>
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2202      	movs	r2, #2
 800e582:	755a      	strb	r2, [r3, #21]
 800e584:	2302      	movs	r3, #2
 800e586:	e0f2      	b.n	800e76e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e58e:	d104      	bne.n	800e59a <f_write+0x10e>
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2201      	movs	r2, #1
 800e594:	755a      	strb	r2, [r3, #21]
 800e596:	2301      	movs	r3, #1
 800e598:	e0e9      	b.n	800e76e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e59e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	689b      	ldr	r3, [r3, #8]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d102      	bne.n	800e5ae <f_write+0x122>
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5ac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	7d1b      	ldrb	r3, [r3, #20]
 800e5b2:	b25b      	sxtb	r3, r3
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	da18      	bge.n	800e5ea <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	7858      	ldrb	r0, [r3, #1]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6a1a      	ldr	r2, [r3, #32]
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	f7fd fca2 	bl	800bf10 <disk_write>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d004      	beq.n	800e5dc <f_write+0x150>
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	755a      	strb	r2, [r3, #21]
 800e5d8:	2301      	movs	r3, #1
 800e5da:	e0c8      	b.n	800e76e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	7d1b      	ldrb	r3, [r3, #20]
 800e5e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e5ea:	693a      	ldr	r2, [r7, #16]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	69db      	ldr	r3, [r3, #28]
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	4610      	mov	r0, r2
 800e5f4:	f7fe f816 	bl	800c624 <clust2sect>
 800e5f8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d104      	bne.n	800e60a <f_write+0x17e>
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2202      	movs	r2, #2
 800e604:	755a      	strb	r2, [r3, #21]
 800e606:	2302      	movs	r3, #2
 800e608:	e0b1      	b.n	800e76e <f_write+0x2e2>
			sect += csect;
 800e60a:	697a      	ldr	r2, [r7, #20]
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	4413      	add	r3, r2
 800e610:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	0a5b      	lsrs	r3, r3, #9
 800e616:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e618:	6a3b      	ldr	r3, [r7, #32]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d03c      	beq.n	800e698 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e61e:	69ba      	ldr	r2, [r7, #24]
 800e620:	6a3b      	ldr	r3, [r7, #32]
 800e622:	4413      	add	r3, r2
 800e624:	693a      	ldr	r2, [r7, #16]
 800e626:	8952      	ldrh	r2, [r2, #10]
 800e628:	4293      	cmp	r3, r2
 800e62a:	d905      	bls.n	800e638 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	895b      	ldrh	r3, [r3, #10]
 800e630:	461a      	mov	r2, r3
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	1ad3      	subs	r3, r2, r3
 800e636:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	7858      	ldrb	r0, [r3, #1]
 800e63c:	6a3b      	ldr	r3, [r7, #32]
 800e63e:	697a      	ldr	r2, [r7, #20]
 800e640:	69f9      	ldr	r1, [r7, #28]
 800e642:	f7fd fc65 	bl	800bf10 <disk_write>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d004      	beq.n	800e656 <f_write+0x1ca>
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2201      	movs	r2, #1
 800e650:	755a      	strb	r2, [r3, #21]
 800e652:	2301      	movs	r3, #1
 800e654:	e08b      	b.n	800e76e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6a1a      	ldr	r2, [r3, #32]
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	1ad3      	subs	r3, r2, r3
 800e65e:	6a3a      	ldr	r2, [r7, #32]
 800e660:	429a      	cmp	r2, r3
 800e662:	d915      	bls.n	800e690 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	6a1a      	ldr	r2, [r3, #32]
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	1ad3      	subs	r3, r2, r3
 800e672:	025b      	lsls	r3, r3, #9
 800e674:	69fa      	ldr	r2, [r7, #28]
 800e676:	4413      	add	r3, r2
 800e678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e67c:	4619      	mov	r1, r3
 800e67e:	f7fd fd07 	bl	800c090 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	7d1b      	ldrb	r3, [r3, #20]
 800e686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e68a:	b2da      	uxtb	r2, r3
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e690:	6a3b      	ldr	r3, [r7, #32]
 800e692:	025b      	lsls	r3, r3, #9
 800e694:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e696:	e03f      	b.n	800e718 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6a1b      	ldr	r3, [r3, #32]
 800e69c:	697a      	ldr	r2, [r7, #20]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d016      	beq.n	800e6d0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	699a      	ldr	r2, [r3, #24]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d210      	bcs.n	800e6d0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	7858      	ldrb	r0, [r3, #1]
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	697a      	ldr	r2, [r7, #20]
 800e6bc:	f7fd fc08 	bl	800bed0 <disk_read>
 800e6c0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d004      	beq.n	800e6d0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	755a      	strb	r2, [r3, #21]
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	e04e      	b.n	800e76e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	697a      	ldr	r2, [r7, #20]
 800e6d4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	699b      	ldr	r3, [r3, #24]
 800e6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6de:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e6e2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d901      	bls.n	800e6f0 <f_write+0x264>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	699b      	ldr	r3, [r3, #24]
 800e6fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6fe:	4413      	add	r3, r2
 800e700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e702:	69f9      	ldr	r1, [r7, #28]
 800e704:	4618      	mov	r0, r3
 800e706:	f7fd fcc3 	bl	800c090 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	7d1b      	ldrb	r3, [r3, #20]
 800e70e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e712:	b2da      	uxtb	r2, r3
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e718:	69fa      	ldr	r2, [r7, #28]
 800e71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71c:	4413      	add	r3, r2
 800e71e:	61fb      	str	r3, [r7, #28]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	699a      	ldr	r2, [r3, #24]
 800e724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e726:	441a      	add	r2, r3
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	619a      	str	r2, [r3, #24]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	68da      	ldr	r2, [r3, #12]
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	699b      	ldr	r3, [r3, #24]
 800e734:	429a      	cmp	r2, r3
 800e736:	bf38      	it	cc
 800e738:	461a      	movcc	r2, r3
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	60da      	str	r2, [r3, #12]
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e744:	441a      	add	r2, r3
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	601a      	str	r2, [r3, #0]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74e:	1ad3      	subs	r3, r2, r3
 800e750:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2b00      	cmp	r3, #0
 800e756:	f47f aed4 	bne.w	800e502 <f_write+0x76>
 800e75a:	e000      	b.n	800e75e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e75c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	7d1b      	ldrb	r3, [r3, #20]
 800e762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e766:	b2da      	uxtb	r2, r3
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e76c:	2300      	movs	r3, #0
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3730      	adds	r7, #48	; 0x30
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e776:	b580      	push	{r7, lr}
 800e778:	b086      	sub	sp, #24
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f107 0208 	add.w	r2, r7, #8
 800e784:	4611      	mov	r1, r2
 800e786:	4618      	mov	r0, r3
 800e788:	f7ff fc46 	bl	800e018 <validate>
 800e78c:	4603      	mov	r3, r0
 800e78e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e790:	7dfb      	ldrb	r3, [r7, #23]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d168      	bne.n	800e868 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	7d1b      	ldrb	r3, [r3, #20]
 800e79a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d062      	beq.n	800e868 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	7d1b      	ldrb	r3, [r3, #20]
 800e7a6:	b25b      	sxtb	r3, r3
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	da15      	bge.n	800e7d8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	7858      	ldrb	r0, [r3, #1]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6a1a      	ldr	r2, [r3, #32]
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	f7fd fba8 	bl	800bf10 <disk_write>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d001      	beq.n	800e7ca <f_sync+0x54>
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e04f      	b.n	800e86a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	7d1b      	ldrb	r3, [r3, #20]
 800e7ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e7d8:	f000 fc66 	bl	800f0a8 <get_fattime>
 800e7dc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e7de:	68ba      	ldr	r2, [r7, #8]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	4610      	mov	r0, r2
 800e7e8:	f7fd fe80 	bl	800c4ec <move_window>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e7f0:	7dfb      	ldrb	r3, [r7, #23]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d138      	bne.n	800e868 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7fa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	330b      	adds	r3, #11
 800e800:	781a      	ldrb	r2, [r3, #0]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	330b      	adds	r3, #11
 800e806:	f042 0220 	orr.w	r2, r2, #32
 800e80a:	b2d2      	uxtb	r2, r2
 800e80c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6818      	ldr	r0, [r3, #0]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	461a      	mov	r2, r3
 800e818:	68f9      	ldr	r1, [r7, #12]
 800e81a:	f7fe fb85 	bl	800cf28 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f103 021c 	add.w	r2, r3, #28
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	4619      	mov	r1, r3
 800e82a:	4610      	mov	r0, r2
 800e82c:	f7fd fc04 	bl	800c038 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	3316      	adds	r3, #22
 800e834:	6939      	ldr	r1, [r7, #16]
 800e836:	4618      	mov	r0, r3
 800e838:	f7fd fbfe 	bl	800c038 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	3312      	adds	r3, #18
 800e840:	2100      	movs	r1, #0
 800e842:	4618      	mov	r0, r3
 800e844:	f7fd fbdd 	bl	800c002 <st_word>
					fs->wflag = 1;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	2201      	movs	r2, #1
 800e84c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	4618      	mov	r0, r3
 800e852:	f7fd fe79 	bl	800c548 <sync_fs>
 800e856:	4603      	mov	r3, r0
 800e858:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	7d1b      	ldrb	r3, [r3, #20]
 800e85e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e862:	b2da      	uxtb	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e868:	7dfb      	ldrb	r3, [r7, #23]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3718      	adds	r7, #24
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b084      	sub	sp, #16
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f7ff ff7b 	bl	800e776 <f_sync>
 800e880:	4603      	mov	r3, r0
 800e882:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e884:	7bfb      	ldrb	r3, [r7, #15]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d118      	bne.n	800e8bc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f107 0208 	add.w	r2, r7, #8
 800e890:	4611      	mov	r1, r2
 800e892:	4618      	mov	r0, r3
 800e894:	f7ff fbc0 	bl	800e018 <validate>
 800e898:	4603      	mov	r3, r0
 800e89a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e89c:	7bfb      	ldrb	r3, [r7, #15]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10c      	bne.n	800e8bc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	691b      	ldr	r3, [r3, #16]
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fd fd7c 	bl	800c3a4 <dec_lock>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e8b0:	7bfb      	ldrb	r3, [r7, #15]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d102      	bne.n	800e8bc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3710      	adds	r7, #16
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
	...

0800e8c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b087      	sub	sp, #28
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	60f8      	str	r0, [r7, #12]
 800e8d0:	60b9      	str	r1, [r7, #8]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e8de:	4b1f      	ldr	r3, [pc, #124]	; (800e95c <FATFS_LinkDriverEx+0x94>)
 800e8e0:	7a5b      	ldrb	r3, [r3, #9]
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d131      	bne.n	800e94c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e8e8:	4b1c      	ldr	r3, [pc, #112]	; (800e95c <FATFS_LinkDriverEx+0x94>)
 800e8ea:	7a5b      	ldrb	r3, [r3, #9]
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	4b1a      	ldr	r3, [pc, #104]	; (800e95c <FATFS_LinkDriverEx+0x94>)
 800e8f2:	2100      	movs	r1, #0
 800e8f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e8f6:	4b19      	ldr	r3, [pc, #100]	; (800e95c <FATFS_LinkDriverEx+0x94>)
 800e8f8:	7a5b      	ldrb	r3, [r3, #9]
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	4a17      	ldr	r2, [pc, #92]	; (800e95c <FATFS_LinkDriverEx+0x94>)
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	4413      	add	r3, r2
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e906:	4b15      	ldr	r3, [pc, #84]	; (800e95c <FATFS_LinkDriverEx+0x94>)
 800e908:	7a5b      	ldrb	r3, [r3, #9]
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	461a      	mov	r2, r3
 800e90e:	4b13      	ldr	r3, [pc, #76]	; (800e95c <FATFS_LinkDriverEx+0x94>)
 800e910:	4413      	add	r3, r2
 800e912:	79fa      	ldrb	r2, [r7, #7]
 800e914:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e916:	4b11      	ldr	r3, [pc, #68]	; (800e95c <FATFS_LinkDriverEx+0x94>)
 800e918:	7a5b      	ldrb	r3, [r3, #9]
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	1c5a      	adds	r2, r3, #1
 800e91e:	b2d1      	uxtb	r1, r2
 800e920:	4a0e      	ldr	r2, [pc, #56]	; (800e95c <FATFS_LinkDriverEx+0x94>)
 800e922:	7251      	strb	r1, [r2, #9]
 800e924:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e926:	7dbb      	ldrb	r3, [r7, #22]
 800e928:	3330      	adds	r3, #48	; 0x30
 800e92a:	b2da      	uxtb	r2, r3
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	3301      	adds	r3, #1
 800e934:	223a      	movs	r2, #58	; 0x3a
 800e936:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	3302      	adds	r3, #2
 800e93c:	222f      	movs	r2, #47	; 0x2f
 800e93e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	3303      	adds	r3, #3
 800e944:	2200      	movs	r2, #0
 800e946:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e948:	2300      	movs	r3, #0
 800e94a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e94c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	371c      	adds	r7, #28
 800e952:	46bd      	mov	sp, r7
 800e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e958:	4770      	bx	lr
 800e95a:	bf00      	nop
 800e95c:	2000025c 	.word	0x2000025c

0800e960 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e96a:	2200      	movs	r2, #0
 800e96c:	6839      	ldr	r1, [r7, #0]
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f7ff ffaa 	bl	800e8c8 <FATFS_LinkDriverEx>
 800e974:	4603      	mov	r3, r0
}
 800e976:	4618      	mov	r0, r3
 800e978:	3708      	adds	r7, #8
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
	...

0800e980 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e980:	b480      	push	{r7}
 800e982:	b085      	sub	sp, #20
 800e984:	af00      	add	r7, sp, #0
 800e986:	4603      	mov	r3, r0
 800e988:	6039      	str	r1, [r7, #0]
 800e98a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e98c:	88fb      	ldrh	r3, [r7, #6]
 800e98e:	2b7f      	cmp	r3, #127	; 0x7f
 800e990:	d802      	bhi.n	800e998 <ff_convert+0x18>
		c = chr;
 800e992:	88fb      	ldrh	r3, [r7, #6]
 800e994:	81fb      	strh	r3, [r7, #14]
 800e996:	e025      	b.n	800e9e4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00b      	beq.n	800e9b6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e99e:	88fb      	ldrh	r3, [r7, #6]
 800e9a0:	2bff      	cmp	r3, #255	; 0xff
 800e9a2:	d805      	bhi.n	800e9b0 <ff_convert+0x30>
 800e9a4:	88fb      	ldrh	r3, [r7, #6]
 800e9a6:	3b80      	subs	r3, #128	; 0x80
 800e9a8:	4a12      	ldr	r2, [pc, #72]	; (800e9f4 <ff_convert+0x74>)
 800e9aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9ae:	e000      	b.n	800e9b2 <ff_convert+0x32>
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	81fb      	strh	r3, [r7, #14]
 800e9b4:	e016      	b.n	800e9e4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	81fb      	strh	r3, [r7, #14]
 800e9ba:	e009      	b.n	800e9d0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e9bc:	89fb      	ldrh	r3, [r7, #14]
 800e9be:	4a0d      	ldr	r2, [pc, #52]	; (800e9f4 <ff_convert+0x74>)
 800e9c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9c4:	88fa      	ldrh	r2, [r7, #6]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d006      	beq.n	800e9d8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e9ca:	89fb      	ldrh	r3, [r7, #14]
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	81fb      	strh	r3, [r7, #14]
 800e9d0:	89fb      	ldrh	r3, [r7, #14]
 800e9d2:	2b7f      	cmp	r3, #127	; 0x7f
 800e9d4:	d9f2      	bls.n	800e9bc <ff_convert+0x3c>
 800e9d6:	e000      	b.n	800e9da <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e9d8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e9da:	89fb      	ldrh	r3, [r7, #14]
 800e9dc:	3380      	adds	r3, #128	; 0x80
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e9e4:	89fb      	ldrh	r3, [r7, #14]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3714      	adds	r7, #20
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr
 800e9f2:	bf00      	nop
 800e9f4:	08010fb4 	.word	0x08010fb4

0800e9f8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b087      	sub	sp, #28
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	4603      	mov	r3, r0
 800ea00:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ea02:	88fb      	ldrh	r3, [r7, #6]
 800ea04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea08:	d201      	bcs.n	800ea0e <ff_wtoupper+0x16>
 800ea0a:	4b3e      	ldr	r3, [pc, #248]	; (800eb04 <ff_wtoupper+0x10c>)
 800ea0c:	e000      	b.n	800ea10 <ff_wtoupper+0x18>
 800ea0e:	4b3e      	ldr	r3, [pc, #248]	; (800eb08 <ff_wtoupper+0x110>)
 800ea10:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	1c9a      	adds	r2, r3, #2
 800ea16:	617a      	str	r2, [r7, #20]
 800ea18:	881b      	ldrh	r3, [r3, #0]
 800ea1a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ea1c:	8a7b      	ldrh	r3, [r7, #18]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d068      	beq.n	800eaf4 <ff_wtoupper+0xfc>
 800ea22:	88fa      	ldrh	r2, [r7, #6]
 800ea24:	8a7b      	ldrh	r3, [r7, #18]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d364      	bcc.n	800eaf4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	1c9a      	adds	r2, r3, #2
 800ea2e:	617a      	str	r2, [r7, #20]
 800ea30:	881b      	ldrh	r3, [r3, #0]
 800ea32:	823b      	strh	r3, [r7, #16]
 800ea34:	8a3b      	ldrh	r3, [r7, #16]
 800ea36:	0a1b      	lsrs	r3, r3, #8
 800ea38:	81fb      	strh	r3, [r7, #14]
 800ea3a:	8a3b      	ldrh	r3, [r7, #16]
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ea40:	88fa      	ldrh	r2, [r7, #6]
 800ea42:	8a79      	ldrh	r1, [r7, #18]
 800ea44:	8a3b      	ldrh	r3, [r7, #16]
 800ea46:	440b      	add	r3, r1
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	da49      	bge.n	800eae0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ea4c:	89fb      	ldrh	r3, [r7, #14]
 800ea4e:	2b08      	cmp	r3, #8
 800ea50:	d84f      	bhi.n	800eaf2 <ff_wtoupper+0xfa>
 800ea52:	a201      	add	r2, pc, #4	; (adr r2, 800ea58 <ff_wtoupper+0x60>)
 800ea54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea58:	0800ea7d 	.word	0x0800ea7d
 800ea5c:	0800ea8f 	.word	0x0800ea8f
 800ea60:	0800eaa5 	.word	0x0800eaa5
 800ea64:	0800eaad 	.word	0x0800eaad
 800ea68:	0800eab5 	.word	0x0800eab5
 800ea6c:	0800eabd 	.word	0x0800eabd
 800ea70:	0800eac5 	.word	0x0800eac5
 800ea74:	0800eacd 	.word	0x0800eacd
 800ea78:	0800ead5 	.word	0x0800ead5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ea7c:	88fa      	ldrh	r2, [r7, #6]
 800ea7e:	8a7b      	ldrh	r3, [r7, #18]
 800ea80:	1ad3      	subs	r3, r2, r3
 800ea82:	005b      	lsls	r3, r3, #1
 800ea84:	697a      	ldr	r2, [r7, #20]
 800ea86:	4413      	add	r3, r2
 800ea88:	881b      	ldrh	r3, [r3, #0]
 800ea8a:	80fb      	strh	r3, [r7, #6]
 800ea8c:	e027      	b.n	800eade <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ea8e:	88fa      	ldrh	r2, [r7, #6]
 800ea90:	8a7b      	ldrh	r3, [r7, #18]
 800ea92:	1ad3      	subs	r3, r2, r3
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	f003 0301 	and.w	r3, r3, #1
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	88fa      	ldrh	r2, [r7, #6]
 800ea9e:	1ad3      	subs	r3, r2, r3
 800eaa0:	80fb      	strh	r3, [r7, #6]
 800eaa2:	e01c      	b.n	800eade <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800eaa4:	88fb      	ldrh	r3, [r7, #6]
 800eaa6:	3b10      	subs	r3, #16
 800eaa8:	80fb      	strh	r3, [r7, #6]
 800eaaa:	e018      	b.n	800eade <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800eaac:	88fb      	ldrh	r3, [r7, #6]
 800eaae:	3b20      	subs	r3, #32
 800eab0:	80fb      	strh	r3, [r7, #6]
 800eab2:	e014      	b.n	800eade <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800eab4:	88fb      	ldrh	r3, [r7, #6]
 800eab6:	3b30      	subs	r3, #48	; 0x30
 800eab8:	80fb      	strh	r3, [r7, #6]
 800eaba:	e010      	b.n	800eade <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800eabc:	88fb      	ldrh	r3, [r7, #6]
 800eabe:	3b1a      	subs	r3, #26
 800eac0:	80fb      	strh	r3, [r7, #6]
 800eac2:	e00c      	b.n	800eade <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800eac4:	88fb      	ldrh	r3, [r7, #6]
 800eac6:	3308      	adds	r3, #8
 800eac8:	80fb      	strh	r3, [r7, #6]
 800eaca:	e008      	b.n	800eade <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800eacc:	88fb      	ldrh	r3, [r7, #6]
 800eace:	3b50      	subs	r3, #80	; 0x50
 800ead0:	80fb      	strh	r3, [r7, #6]
 800ead2:	e004      	b.n	800eade <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ead4:	88fb      	ldrh	r3, [r7, #6]
 800ead6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800eada:	80fb      	strh	r3, [r7, #6]
 800eadc:	bf00      	nop
			}
			break;
 800eade:	e008      	b.n	800eaf2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800eae0:	89fb      	ldrh	r3, [r7, #14]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d195      	bne.n	800ea12 <ff_wtoupper+0x1a>
 800eae6:	8a3b      	ldrh	r3, [r7, #16]
 800eae8:	005b      	lsls	r3, r3, #1
 800eaea:	697a      	ldr	r2, [r7, #20]
 800eaec:	4413      	add	r3, r2
 800eaee:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800eaf0:	e78f      	b.n	800ea12 <ff_wtoupper+0x1a>
			break;
 800eaf2:	bf00      	nop
	}

	return chr;
 800eaf4:	88fb      	ldrh	r3, [r7, #6]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	371c      	adds	r7, #28
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	080110b4 	.word	0x080110b4
 800eb08:	080112a8 	.word	0x080112a8

0800eb0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b08a      	sub	sp, #40	; 0x28
 800eb10:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800eb12:	f107 031c 	add.w	r3, r7, #28
 800eb16:	2200      	movs	r2, #0
 800eb18:	601a      	str	r2, [r3, #0]
 800eb1a:	605a      	str	r2, [r3, #4]
 800eb1c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800eb1e:	463b      	mov	r3, r7
 800eb20:	2200      	movs	r2, #0
 800eb22:	601a      	str	r2, [r3, #0]
 800eb24:	605a      	str	r2, [r3, #4]
 800eb26:	609a      	str	r2, [r3, #8]
 800eb28:	60da      	str	r2, [r3, #12]
 800eb2a:	611a      	str	r2, [r3, #16]
 800eb2c:	615a      	str	r2, [r3, #20]
 800eb2e:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800eb30:	4b7a      	ldr	r3, [pc, #488]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb32:	4a7b      	ldr	r2, [pc, #492]	; (800ed20 <MX_ADC1_Init+0x214>)
 800eb34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800eb36:	4b79      	ldr	r3, [pc, #484]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800eb3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800eb3e:	4b77      	ldr	r3, [pc, #476]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800eb44:	4b75      	ldr	r3, [pc, #468]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb46:	2201      	movs	r2, #1
 800eb48:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800eb4a:	4b74      	ldr	r3, [pc, #464]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb4c:	2208      	movs	r2, #8
 800eb4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800eb50:	4b72      	ldr	r3, [pc, #456]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb52:	2200      	movs	r2, #0
 800eb54:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800eb56:	4b71      	ldr	r3, [pc, #452]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 10;
 800eb5c:	4b6f      	ldr	r3, [pc, #444]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb5e:	220a      	movs	r2, #10
 800eb60:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800eb62:	4b6e      	ldr	r3, [pc, #440]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb64:	2200      	movs	r2, #0
 800eb66:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800eb68:	4b6c      	ldr	r3, [pc, #432]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb6a:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800eb6e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800eb70:	4b6a      	ldr	r3, [pc, #424]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eb76:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800eb78:	4b68      	ldr	r3, [pc, #416]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb7a:	2203      	movs	r2, #3
 800eb7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800eb7e:	4b67      	ldr	r3, [pc, #412]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb80:	2200      	movs	r2, #0
 800eb82:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800eb84:	4b65      	ldr	r3, [pc, #404]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800eb8a:	4b64      	ldr	r3, [pc, #400]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 800eb92:	4b62      	ldr	r3, [pc, #392]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb94:	2201      	movs	r2, #1
 800eb96:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800eb98:	4b60      	ldr	r3, [pc, #384]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800eb9e:	4b5f      	ldr	r3, [pc, #380]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 800eba4:	4b5d      	ldr	r3, [pc, #372]	; (800ed1c <MX_ADC1_Init+0x210>)
 800eba6:	f240 4201 	movw	r2, #1025	; 0x401
 800ebaa:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ebac:	485b      	ldr	r0, [pc, #364]	; (800ed1c <MX_ADC1_Init+0x210>)
 800ebae:	f7f1 fe93 	bl	80008d8 <HAL_ADC_Init>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800ebb8:	f001 fa86 	bl	80100c8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800ebc0:	f107 031c 	add.w	r3, r7, #28
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	4855      	ldr	r0, [pc, #340]	; (800ed1c <MX_ADC1_Init+0x210>)
 800ebc8:	f7f2 ff7e 	bl	8001ac8 <HAL_ADCEx_MultiModeConfigChannel>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d001      	beq.n	800ebd6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800ebd2:	f001 fa79 	bl	80100c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800ebd6:	4b53      	ldr	r3, [pc, #332]	; (800ed24 <MX_ADC1_Init+0x218>)
 800ebd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800ebda:	2306      	movs	r3, #6
 800ebdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 800ebde:	2302      	movs	r3, #2
 800ebe0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800ebe2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ebe6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ebe8:	2304      	movs	r3, #4
 800ebea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 32768;
 800ebec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebf0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ebf2:	463b      	mov	r3, r7
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	4849      	ldr	r0, [pc, #292]	; (800ed1c <MX_ADC1_Init+0x210>)
 800ebf8:	f7f2 f910 	bl	8000e1c <HAL_ADC_ConfigChannel>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d001      	beq.n	800ec06 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800ec02:	f001 fa61 	bl	80100c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800ec06:	4b48      	ldr	r3, [pc, #288]	; (800ed28 <MX_ADC1_Init+0x21c>)
 800ec08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800ec0a:	230c      	movs	r3, #12
 800ec0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ec0e:	463b      	mov	r3, r7
 800ec10:	4619      	mov	r1, r3
 800ec12:	4842      	ldr	r0, [pc, #264]	; (800ed1c <MX_ADC1_Init+0x210>)
 800ec14:	f7f2 f902 	bl	8000e1c <HAL_ADC_ConfigChannel>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d001      	beq.n	800ec22 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800ec1e:	f001 fa53 	bl	80100c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800ec22:	4b42      	ldr	r3, [pc, #264]	; (800ed2c <MX_ADC1_Init+0x220>)
 800ec24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800ec26:	2312      	movs	r3, #18
 800ec28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ec2a:	463b      	mov	r3, r7
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	483b      	ldr	r0, [pc, #236]	; (800ed1c <MX_ADC1_Init+0x210>)
 800ec30:	f7f2 f8f4 	bl	8000e1c <HAL_ADC_ConfigChannel>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d001      	beq.n	800ec3e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800ec3a:	f001 fa45 	bl	80100c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800ec3e:	4b3c      	ldr	r3, [pc, #240]	; (800ed30 <MX_ADC1_Init+0x224>)
 800ec40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800ec42:	2318      	movs	r3, #24
 800ec44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ec46:	463b      	mov	r3, r7
 800ec48:	4619      	mov	r1, r3
 800ec4a:	4834      	ldr	r0, [pc, #208]	; (800ed1c <MX_ADC1_Init+0x210>)
 800ec4c:	f7f2 f8e6 	bl	8000e1c <HAL_ADC_ConfigChannel>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d001      	beq.n	800ec5a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 800ec56:	f001 fa37 	bl	80100c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800ec5a:	4b36      	ldr	r3, [pc, #216]	; (800ed34 <MX_ADC1_Init+0x228>)
 800ec5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800ec5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec62:	607b      	str	r3, [r7, #4]
  sConfig.Offset = 0;
 800ec64:	2300      	movs	r3, #0
 800ec66:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ec68:	463b      	mov	r3, r7
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	482b      	ldr	r0, [pc, #172]	; (800ed1c <MX_ADC1_Init+0x210>)
 800ec6e:	f7f2 f8d5 	bl	8000e1c <HAL_ADC_ConfigChannel>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d001      	beq.n	800ec7c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800ec78:	f001 fa26 	bl	80100c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_19;
 800ec7c:	4b2e      	ldr	r3, [pc, #184]	; (800ed38 <MX_ADC1_Init+0x22c>)
 800ec7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800ec80:	f44f 7383 	mov.w	r3, #262	; 0x106
 800ec84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ec86:	463b      	mov	r3, r7
 800ec88:	4619      	mov	r1, r3
 800ec8a:	4824      	ldr	r0, [pc, #144]	; (800ed1c <MX_ADC1_Init+0x210>)
 800ec8c:	f7f2 f8c6 	bl	8000e1c <HAL_ADC_ConfigChannel>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d001      	beq.n	800ec9a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800ec96:	f001 fa17 	bl	80100c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800ec9a:	4b28      	ldr	r3, [pc, #160]	; (800ed3c <MX_ADC1_Init+0x230>)
 800ec9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800ec9e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800eca2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800eca4:	463b      	mov	r3, r7
 800eca6:	4619      	mov	r1, r3
 800eca8:	481c      	ldr	r0, [pc, #112]	; (800ed1c <MX_ADC1_Init+0x210>)
 800ecaa:	f7f2 f8b7 	bl	8000e1c <HAL_ADC_ConfigChannel>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d001      	beq.n	800ecb8 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800ecb4:	f001 fa08 	bl	80100c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800ecb8:	4b21      	ldr	r3, [pc, #132]	; (800ed40 <MX_ADC1_Init+0x234>)
 800ecba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800ecbc:	f44f 7389 	mov.w	r3, #274	; 0x112
 800ecc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ecc2:	463b      	mov	r3, r7
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	4815      	ldr	r0, [pc, #84]	; (800ed1c <MX_ADC1_Init+0x210>)
 800ecc8:	f7f2 f8a8 	bl	8000e1c <HAL_ADC_ConfigChannel>
 800eccc:	4603      	mov	r3, r0
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d001      	beq.n	800ecd6 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800ecd2:	f001 f9f9 	bl	80100c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800ecd6:	4b1b      	ldr	r3, [pc, #108]	; (800ed44 <MX_ADC1_Init+0x238>)
 800ecd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800ecda:	f44f 738c 	mov.w	r3, #280	; 0x118
 800ecde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ece0:	463b      	mov	r3, r7
 800ece2:	4619      	mov	r1, r3
 800ece4:	480d      	ldr	r0, [pc, #52]	; (800ed1c <MX_ADC1_Init+0x210>)
 800ece6:	f7f2 f899 	bl	8000e1c <HAL_ADC_ConfigChannel>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d001      	beq.n	800ecf4 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 800ecf0:	f001 f9ea 	bl	80100c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800ecf4:	4b14      	ldr	r3, [pc, #80]	; (800ed48 <MX_ADC1_Init+0x23c>)
 800ecf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800ecf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ecfc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ecfe:	463b      	mov	r3, r7
 800ed00:	4619      	mov	r1, r3
 800ed02:	4806      	ldr	r0, [pc, #24]	; (800ed1c <MX_ADC1_Init+0x210>)
 800ed04:	f7f2 f88a 	bl	8000e1c <HAL_ADC_ConfigChannel>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d001      	beq.n	800ed12 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800ed0e:	f001 f9db 	bl	80100c8 <Error_Handler>
  }

}
 800ed12:	bf00      	nop
 800ed14:	3728      	adds	r7, #40	; 0x28
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	20000290 	.word	0x20000290
 800ed20:	40022000 	.word	0x40022000
 800ed24:	43210000 	.word	0x43210000
 800ed28:	47520000 	.word	0x47520000
 800ed2c:	3ac04000 	.word	0x3ac04000
 800ed30:	3ef08000 	.word	0x3ef08000
 800ed34:	4b840000 	.word	0x4b840000
 800ed38:	4fb80000 	.word	0x4fb80000
 800ed3c:	0c900008 	.word	0x0c900008
 800ed40:	1d500080 	.word	0x1d500080
 800ed44:	10c00010 	.word	0x10c00010
 800ed48:	21800100 	.word	0x21800100

0800ed4c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b08a      	sub	sp, #40	; 0x28
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed54:	f107 0314 	add.w	r3, r7, #20
 800ed58:	2200      	movs	r2, #0
 800ed5a:	601a      	str	r2, [r3, #0]
 800ed5c:	605a      	str	r2, [r3, #4]
 800ed5e:	609a      	str	r2, [r3, #8]
 800ed60:	60da      	str	r2, [r3, #12]
 800ed62:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a42      	ldr	r2, [pc, #264]	; (800ee74 <HAL_ADC_MspInit+0x128>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d17e      	bne.n	800ee6c <HAL_ADC_MspInit+0x120>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800ed6e:	4b42      	ldr	r3, [pc, #264]	; (800ee78 <HAL_ADC_MspInit+0x12c>)
 800ed70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ed74:	4a40      	ldr	r2, [pc, #256]	; (800ee78 <HAL_ADC_MspInit+0x12c>)
 800ed76:	f043 0320 	orr.w	r3, r3, #32
 800ed7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ed7e:	4b3e      	ldr	r3, [pc, #248]	; (800ee78 <HAL_ADC_MspInit+0x12c>)
 800ed80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ed84:	f003 0320 	and.w	r3, r3, #32
 800ed88:	613b      	str	r3, [r7, #16]
 800ed8a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed8c:	4b3a      	ldr	r3, [pc, #232]	; (800ee78 <HAL_ADC_MspInit+0x12c>)
 800ed8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed92:	4a39      	ldr	r2, [pc, #228]	; (800ee78 <HAL_ADC_MspInit+0x12c>)
 800ed94:	f043 0301 	orr.w	r3, r3, #1
 800ed98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed9c:	4b36      	ldr	r3, [pc, #216]	; (800ee78 <HAL_ADC_MspInit+0x12c>)
 800ed9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eda2:	f003 0301 	and.w	r3, r3, #1
 800eda6:	60fb      	str	r3, [r7, #12]
 800eda8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800edaa:	4b33      	ldr	r3, [pc, #204]	; (800ee78 <HAL_ADC_MspInit+0x12c>)
 800edac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800edb0:	4a31      	ldr	r2, [pc, #196]	; (800ee78 <HAL_ADC_MspInit+0x12c>)
 800edb2:	f043 0304 	orr.w	r3, r3, #4
 800edb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800edba:	4b2f      	ldr	r3, [pc, #188]	; (800ee78 <HAL_ADC_MspInit+0x12c>)
 800edbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800edc0:	f003 0304 	and.w	r3, r3, #4
 800edc4:	60bb      	str	r3, [r7, #8]
 800edc6:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800edc8:	23ff      	movs	r3, #255	; 0xff
 800edca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800edcc:	2303      	movs	r3, #3
 800edce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edd0:	2300      	movs	r3, #0
 800edd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800edd4:	f107 0314 	add.w	r3, r7, #20
 800edd8:	4619      	mov	r1, r3
 800edda:	4828      	ldr	r0, [pc, #160]	; (800ee7c <HAL_ADC_MspInit+0x130>)
 800eddc:	f7f5 fbfe 	bl	80045dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ede0:	2330      	movs	r3, #48	; 0x30
 800ede2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ede4:	2303      	movs	r3, #3
 800ede6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ede8:	2300      	movs	r3, #0
 800edea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800edec:	f107 0314 	add.w	r3, r7, #20
 800edf0:	4619      	mov	r1, r3
 800edf2:	4823      	ldr	r0, [pc, #140]	; (800ee80 <HAL_ADC_MspInit+0x134>)
 800edf4:	f7f5 fbf2 	bl	80045dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800edf8:	4b22      	ldr	r3, [pc, #136]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800edfa:	4a23      	ldr	r2, [pc, #140]	; (800ee88 <HAL_ADC_MspInit+0x13c>)
 800edfc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800edfe:	4b21      	ldr	r3, [pc, #132]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee00:	2209      	movs	r2, #9
 800ee02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ee04:	4b1f      	ldr	r3, [pc, #124]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee06:	2200      	movs	r2, #0
 800ee08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ee0a:	4b1e      	ldr	r3, [pc, #120]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800ee10:	4b1c      	ldr	r3, [pc, #112]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ee16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ee18:	4b1a      	ldr	r3, [pc, #104]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ee1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ee20:	4b18      	ldr	r3, [pc, #96]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ee26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800ee28:	4b16      	ldr	r3, [pc, #88]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ee2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800ee30:	4b14      	ldr	r3, [pc, #80]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ee36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ee38:	4b12      	ldr	r3, [pc, #72]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee3a:	2204      	movs	r2, #4
 800ee3c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800ee3e:	4b11      	ldr	r3, [pc, #68]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee40:	2201      	movs	r2, #1
 800ee42:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800ee44:	4b0f      	ldr	r3, [pc, #60]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee46:	2200      	movs	r2, #0
 800ee48:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800ee4a:	4b0e      	ldr	r3, [pc, #56]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800ee50:	480c      	ldr	r0, [pc, #48]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee52:	f7f3 f89b 	bl	8001f8c <HAL_DMA_Init>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d001      	beq.n	800ee60 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 800ee5c:	f001 f934 	bl	80100c8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	4a08      	ldr	r2, [pc, #32]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee64:	64da      	str	r2, [r3, #76]	; 0x4c
 800ee66:	4a07      	ldr	r2, [pc, #28]	; (800ee84 <HAL_ADC_MspInit+0x138>)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800ee6c:	bf00      	nop
 800ee6e:	3728      	adds	r7, #40	; 0x28
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	40022000 	.word	0x40022000
 800ee78:	58024400 	.word	0x58024400
 800ee7c:	58020000 	.word	0x58020000
 800ee80:	58020800 	.word	0x58020800
 800ee84:	200002f4 	.word	0x200002f4
 800ee88:	40020010 	.word	0x40020010

0800ee8c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ee92:	2300      	movs	r3, #0
 800ee94:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ee96:	f000 f89b 	bl	800efd0 <BSP_SD_IsDetected>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d001      	beq.n	800eea4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800eea0:	2302      	movs	r3, #2
 800eea2:	e012      	b.n	800eeca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800eea4:	480b      	ldr	r0, [pc, #44]	; (800eed4 <BSP_SD_Init+0x48>)
 800eea6:	f7f9 fbf0 	bl	800868a <HAL_SD_Init>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800eeae:	79fb      	ldrb	r3, [r7, #7]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d109      	bne.n	800eec8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800eeb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800eeb8:	4806      	ldr	r0, [pc, #24]	; (800eed4 <BSP_SD_Init+0x48>)
 800eeba:	f7fa fc6f 	bl	800979c <HAL_SD_ConfigWideBusOperation>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d001      	beq.n	800eec8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800eec4:	2301      	movs	r3, #1
 800eec6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800eec8:	79fb      	ldrb	r3, [r7, #7]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3708      	adds	r7, #8
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	2000d56c 	.word	0x2000d56c

0800eed8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b088      	sub	sp, #32
 800eedc:	af02      	add	r7, sp, #8
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	607a      	str	r2, [r7, #4]
 800eee4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800eee6:	2300      	movs	r3, #0
 800eee8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	9300      	str	r3, [sp, #0]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	68f9      	ldr	r1, [r7, #12]
 800eef4:	4806      	ldr	r0, [pc, #24]	; (800ef10 <BSP_SD_ReadBlocks+0x38>)
 800eef6:	f7f9 fce7 	bl	80088c8 <HAL_SD_ReadBlocks>
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d001      	beq.n	800ef04 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ef00:	2301      	movs	r3, #1
 800ef02:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800ef04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3718      	adds	r7, #24
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	2000d56c 	.word	0x2000d56c

0800ef14 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b088      	sub	sp, #32
 800ef18:	af02      	add	r7, sp, #8
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]
 800ef20:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ef22:	2300      	movs	r3, #0
 800ef24:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	68ba      	ldr	r2, [r7, #8]
 800ef2e:	68f9      	ldr	r1, [r7, #12]
 800ef30:	4806      	ldr	r0, [pc, #24]	; (800ef4c <BSP_SD_WriteBlocks+0x38>)
 800ef32:	f7f9 fe53 	bl	8008bdc <HAL_SD_WriteBlocks>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d001      	beq.n	800ef40 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800ef40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3718      	adds	r7, #24
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	2000d56c 	.word	0x2000d56c

0800ef50 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ef54:	4805      	ldr	r0, [pc, #20]	; (800ef6c <BSP_SD_GetCardState+0x1c>)
 800ef56:	f7fa fccb 	bl	80098f0 <HAL_SD_GetCardState>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b04      	cmp	r3, #4
 800ef5e:	bf14      	ite	ne
 800ef60:	2301      	movne	r3, #1
 800ef62:	2300      	moveq	r3, #0
 800ef64:	b2db      	uxtb	r3, r3
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	2000d56c 	.word	0x2000d56c

0800ef70 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ef78:	6879      	ldr	r1, [r7, #4]
 800ef7a:	4803      	ldr	r0, [pc, #12]	; (800ef88 <BSP_SD_GetCardInfo+0x18>)
 800ef7c:	f7fa fbe2 	bl	8009744 <HAL_SD_GetCardInfo>
}
 800ef80:	bf00      	nop
 800ef82:	3708      	adds	r7, #8
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	2000d56c 	.word	0x2000d56c

0800ef8c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ef94:	f000 f80e 	bl	800efb4 <BSP_SD_WriteCpltCallback>
}
 800ef98:	bf00      	nop
 800ef9a:	3708      	adds	r7, #8
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800efa8:	f000 f80b 	bl	800efc2 <BSP_SD_ReadCpltCallback>
}
 800efac:	bf00      	nop
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800efb4:	b480      	push	{r7}
 800efb6:	af00      	add	r7, sp, #0

}
 800efb8:	bf00      	nop
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr

0800efc2 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800efc2:	b480      	push	{r7}
 800efc4:	af00      	add	r7, sp, #0

}
 800efc6:	bf00      	nop
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800efd6:	2301      	movs	r3, #1
 800efd8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800efda:	f000 f86d 	bl	800f0b8 <BSP_PlatformIsDetected>
 800efde:	4603      	mov	r3, r0
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d101      	bne.n	800efe8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800efe4:	2300      	movs	r3, #0
 800efe6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800efe8:	79fb      	ldrb	r3, [r7, #7]
 800efea:	b2db      	uxtb	r3, r3
}
 800efec:	4618      	mov	r0, r3
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800effa:	4b21      	ldr	r3, [pc, #132]	; (800f080 <MX_DMA_Init+0x8c>)
 800effc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f000:	4a1f      	ldr	r2, [pc, #124]	; (800f080 <MX_DMA_Init+0x8c>)
 800f002:	f043 0301 	orr.w	r3, r3, #1
 800f006:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f00a:	4b1d      	ldr	r3, [pc, #116]	; (800f080 <MX_DMA_Init+0x8c>)
 800f00c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f010:	f003 0301 	and.w	r3, r3, #1
 800f014:	607b      	str	r3, [r7, #4]
 800f016:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800f018:	2200      	movs	r2, #0
 800f01a:	2101      	movs	r1, #1
 800f01c:	200b      	movs	r0, #11
 800f01e:	f7f2 ff08 	bl	8001e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800f022:	200b      	movs	r0, #11
 800f024:	f7f2 ff1f 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 800f028:	2200      	movs	r2, #0
 800f02a:	2102      	movs	r1, #2
 800f02c:	200c      	movs	r0, #12
 800f02e:	f7f2 ff00 	bl	8001e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800f032:	200c      	movs	r0, #12
 800f034:	f7f2 ff17 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
 800f038:	2200      	movs	r2, #0
 800f03a:	2103      	movs	r1, #3
 800f03c:	200d      	movs	r0, #13
 800f03e:	f7f2 fef8 	bl	8001e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800f042:	200d      	movs	r0, #13
 800f044:	f7f2 ff0f 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
 800f048:	2200      	movs	r2, #0
 800f04a:	2104      	movs	r1, #4
 800f04c:	200e      	movs	r0, #14
 800f04e:	f7f2 fef0 	bl	8001e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800f052:	200e      	movs	r0, #14
 800f054:	f7f2 ff07 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800f058:	2200      	movs	r2, #0
 800f05a:	2105      	movs	r1, #5
 800f05c:	200f      	movs	r0, #15
 800f05e:	f7f2 fee8 	bl	8001e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800f062:	200f      	movs	r0, #15
 800f064:	f7f2 feff 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800f068:	2200      	movs	r2, #0
 800f06a:	2100      	movs	r1, #0
 800f06c:	2010      	movs	r0, #16
 800f06e:	f7f2 fee0 	bl	8001e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800f072:	2010      	movs	r0, #16
 800f074:	f7f2 fef7 	bl	8001e66 <HAL_NVIC_EnableIRQ>

}
 800f078:	bf00      	nop
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	58024400 	.word	0x58024400

0800f084 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800f084:	b580      	push	{r7, lr}
 800f086:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f088:	4904      	ldr	r1, [pc, #16]	; (800f09c <MX_FATFS_Init+0x18>)
 800f08a:	4805      	ldr	r0, [pc, #20]	; (800f0a0 <MX_FATFS_Init+0x1c>)
 800f08c:	f7ff fc68 	bl	800e960 <FATFS_LinkDriver>
 800f090:	4603      	mov	r3, r0
 800f092:	461a      	mov	r2, r3
 800f094:	4b03      	ldr	r3, [pc, #12]	; (800f0a4 <MX_FATFS_Init+0x20>)
 800f096:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800f098:	bf00      	nop
 800f09a:	bd80      	pop	{r7, pc}
 800f09c:	20000370 	.word	0x20000370
 800f0a0:	08011364 	.word	0x08011364
 800f0a4:	2000036c 	.word	0x2000036c

0800f0a8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f0ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr

0800f0b8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f0c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f0c6:	480c      	ldr	r0, [pc, #48]	; (800f0f8 <BSP_PlatformIsDetected+0x40>)
 800f0c8:	f7f5 fc38 	bl	800493c <HAL_GPIO_ReadPin>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d001      	beq.n	800f0d6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    status = SD_PRESENT;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800f0da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f0de:	4806      	ldr	r0, [pc, #24]	; (800f0f8 <BSP_PlatformIsDetected+0x40>)
 800f0e0:	f7f5 fc2c 	bl	800493c <HAL_GPIO_ReadPin>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d001      	beq.n	800f0ee <BSP_PlatformIsDetected+0x36>
    {
        status = SD_NOT_PRESENT;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE END 1 */ 
    return status;
 800f0ee:	79fb      	ldrb	r3, [r7, #7]
}  
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3708      	adds	r7, #8
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}
 800f0f8:	58020800 	.word	0x58020800

0800f0fc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b088      	sub	sp, #32
 800f100:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800f102:	1d3b      	adds	r3, r7, #4
 800f104:	2200      	movs	r2, #0
 800f106:	601a      	str	r2, [r3, #0]
 800f108:	605a      	str	r2, [r3, #4]
 800f10a:	609a      	str	r2, [r3, #8]
 800f10c:	60da      	str	r2, [r3, #12]
 800f10e:	611a      	str	r2, [r3, #16]
 800f110:	615a      	str	r2, [r3, #20]
 800f112:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800f114:	4b21      	ldr	r3, [pc, #132]	; (800f19c <MX_FMC_Init+0xa0>)
 800f116:	4a22      	ldr	r2, [pc, #136]	; (800f1a0 <MX_FMC_Init+0xa4>)
 800f118:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800f11a:	4b20      	ldr	r3, [pc, #128]	; (800f19c <MX_FMC_Init+0xa0>)
 800f11c:	2200      	movs	r2, #0
 800f11e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800f120:	4b1e      	ldr	r3, [pc, #120]	; (800f19c <MX_FMC_Init+0xa0>)
 800f122:	2201      	movs	r2, #1
 800f124:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800f126:	4b1d      	ldr	r3, [pc, #116]	; (800f19c <MX_FMC_Init+0xa0>)
 800f128:	2208      	movs	r2, #8
 800f12a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800f12c:	4b1b      	ldr	r3, [pc, #108]	; (800f19c <MX_FMC_Init+0xa0>)
 800f12e:	2210      	movs	r2, #16
 800f130:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800f132:	4b1a      	ldr	r3, [pc, #104]	; (800f19c <MX_FMC_Init+0xa0>)
 800f134:	2240      	movs	r2, #64	; 0x40
 800f136:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800f138:	4b18      	ldr	r3, [pc, #96]	; (800f19c <MX_FMC_Init+0xa0>)
 800f13a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f13e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800f140:	4b16      	ldr	r3, [pc, #88]	; (800f19c <MX_FMC_Init+0xa0>)
 800f142:	2200      	movs	r2, #0
 800f144:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800f146:	4b15      	ldr	r3, [pc, #84]	; (800f19c <MX_FMC_Init+0xa0>)
 800f148:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800f14c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800f14e:	4b13      	ldr	r3, [pc, #76]	; (800f19c <MX_FMC_Init+0xa0>)
 800f150:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f154:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800f156:	4b11      	ldr	r3, [pc, #68]	; (800f19c <MX_FMC_Init+0xa0>)
 800f158:	2200      	movs	r2, #0
 800f15a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800f15c:	2302      	movs	r3, #2
 800f15e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 800f160:	2306      	movs	r3, #6
 800f162:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800f164:	2304      	movs	r3, #4
 800f166:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 800f168:	2306      	movs	r3, #6
 800f16a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800f16c:	2302      	movs	r3, #2
 800f16e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800f170:	2302      	movs	r3, #2
 800f172:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800f174:	2302      	movs	r3, #2
 800f176:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800f178:	1d3b      	adds	r3, r7, #4
 800f17a:	4619      	mov	r1, r3
 800f17c:	4807      	ldr	r0, [pc, #28]	; (800f19c <MX_FMC_Init+0xa0>)
 800f17e:	f7fb f8b3 	bl	800a2e8 <HAL_SDRAM_Init>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d001      	beq.n	800f18c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800f188:	f000 ff9e 	bl	80100c8 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800f18c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800f190:	f7f1 f962 	bl	8000458 <HAL_SetFMCMemorySwappingConfig>

}
 800f194:	bf00      	nop
 800f196:	3720      	adds	r7, #32
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	200007d8 	.word	0x200007d8
 800f1a0:	52004140 	.word	0x52004140

0800f1a4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b086      	sub	sp, #24
 800f1a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f1aa:	1d3b      	adds	r3, r7, #4
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	601a      	str	r2, [r3, #0]
 800f1b0:	605a      	str	r2, [r3, #4]
 800f1b2:	609a      	str	r2, [r3, #8]
 800f1b4:	60da      	str	r2, [r3, #12]
 800f1b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800f1b8:	4b34      	ldr	r3, [pc, #208]	; (800f28c <HAL_FMC_MspInit+0xe8>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d161      	bne.n	800f284 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 800f1c0:	4b32      	ldr	r3, [pc, #200]	; (800f28c <HAL_FMC_MspInit+0xe8>)
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800f1c6:	4b32      	ldr	r3, [pc, #200]	; (800f290 <HAL_FMC_MspInit+0xec>)
 800f1c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f1cc:	4a30      	ldr	r2, [pc, #192]	; (800f290 <HAL_FMC_MspInit+0xec>)
 800f1ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f1d2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800f1d6:	4b2e      	ldr	r3, [pc, #184]	; (800f290 <HAL_FMC_MspInit+0xec>)
 800f1d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f1dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f1e0:	603b      	str	r3, [r7, #0]
 800f1e2:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800f1e4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800f1e8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1ea:	2302      	movs	r3, #2
 800f1ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f1f2:	2303      	movs	r3, #3
 800f1f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f1f6:	230c      	movs	r3, #12
 800f1f8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f1fa:	1d3b      	adds	r3, r7, #4
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	4825      	ldr	r0, [pc, #148]	; (800f294 <HAL_FMC_MspInit+0xf0>)
 800f200:	f7f5 f9ec 	bl	80045dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800f204:	230d      	movs	r3, #13
 800f206:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f208:	2302      	movs	r3, #2
 800f20a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f20c:	2300      	movs	r3, #0
 800f20e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f210:	2303      	movs	r3, #3
 800f212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f214:	230c      	movs	r3, #12
 800f216:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f218:	1d3b      	adds	r3, r7, #4
 800f21a:	4619      	mov	r1, r3
 800f21c:	481e      	ldr	r0, [pc, #120]	; (800f298 <HAL_FMC_MspInit+0xf4>)
 800f21e:	f7f5 f9dd 	bl	80045dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800f222:	f248 1337 	movw	r3, #33079	; 0x8137
 800f226:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f228:	2302      	movs	r3, #2
 800f22a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f22c:	2300      	movs	r3, #0
 800f22e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f230:	2303      	movs	r3, #3
 800f232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f234:	230c      	movs	r3, #12
 800f236:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f238:	1d3b      	adds	r3, r7, #4
 800f23a:	4619      	mov	r1, r3
 800f23c:	4817      	ldr	r0, [pc, #92]	; (800f29c <HAL_FMC_MspInit+0xf8>)
 800f23e:	f7f5 f9cd 	bl	80045dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800f242:	f64f 7383 	movw	r3, #65411	; 0xff83
 800f246:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f248:	2302      	movs	r3, #2
 800f24a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f24c:	2300      	movs	r3, #0
 800f24e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f250:	2303      	movs	r3, #3
 800f252:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f254:	230c      	movs	r3, #12
 800f256:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f258:	1d3b      	adds	r3, r7, #4
 800f25a:	4619      	mov	r1, r3
 800f25c:	4810      	ldr	r0, [pc, #64]	; (800f2a0 <HAL_FMC_MspInit+0xfc>)
 800f25e:	f7f5 f9bd 	bl	80045dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800f262:	f24c 7303 	movw	r3, #50947	; 0xc703
 800f266:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f268:	2302      	movs	r3, #2
 800f26a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f26c:	2300      	movs	r3, #0
 800f26e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f270:	2303      	movs	r3, #3
 800f272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f274:	230c      	movs	r3, #12
 800f276:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f278:	1d3b      	adds	r3, r7, #4
 800f27a:	4619      	mov	r1, r3
 800f27c:	4809      	ldr	r0, [pc, #36]	; (800f2a4 <HAL_FMC_MspInit+0x100>)
 800f27e:	f7f5 f9ad 	bl	80045dc <HAL_GPIO_Init>
 800f282:	e000      	b.n	800f286 <HAL_FMC_MspInit+0xe2>
    return;
 800f284:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800f286:	3718      	adds	r7, #24
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	20000268 	.word	0x20000268
 800f290:	58024400 	.word	0x58024400
 800f294:	58021400 	.word	0x58021400
 800f298:	58020800 	.word	0x58020800
 800f29c:	58021800 	.word	0x58021800
 800f2a0:	58021000 	.word	0x58021000
 800f2a4:	58020c00 	.word	0x58020c00

0800f2a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800f2b0:	f7ff ff78 	bl	800f1a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800f2b4:	bf00      	nop
 800f2b6:	3708      	adds	r7, #8
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b08e      	sub	sp, #56	; 0x38
 800f2c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	601a      	str	r2, [r3, #0]
 800f2ca:	605a      	str	r2, [r3, #4]
 800f2cc:	609a      	str	r2, [r3, #8]
 800f2ce:	60da      	str	r2, [r3, #12]
 800f2d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f2d2:	4b8f      	ldr	r3, [pc, #572]	; (800f510 <MX_GPIO_Init+0x254>)
 800f2d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f2d8:	4a8d      	ldr	r2, [pc, #564]	; (800f510 <MX_GPIO_Init+0x254>)
 800f2da:	f043 0310 	orr.w	r3, r3, #16
 800f2de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f2e2:	4b8b      	ldr	r3, [pc, #556]	; (800f510 <MX_GPIO_Init+0x254>)
 800f2e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f2e8:	f003 0310 	and.w	r3, r3, #16
 800f2ec:	623b      	str	r3, [r7, #32]
 800f2ee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f2f0:	4b87      	ldr	r3, [pc, #540]	; (800f510 <MX_GPIO_Init+0x254>)
 800f2f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f2f6:	4a86      	ldr	r2, [pc, #536]	; (800f510 <MX_GPIO_Init+0x254>)
 800f2f8:	f043 0304 	orr.w	r3, r3, #4
 800f2fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f300:	4b83      	ldr	r3, [pc, #524]	; (800f510 <MX_GPIO_Init+0x254>)
 800f302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f306:	f003 0304 	and.w	r3, r3, #4
 800f30a:	61fb      	str	r3, [r7, #28]
 800f30c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800f30e:	4b80      	ldr	r3, [pc, #512]	; (800f510 <MX_GPIO_Init+0x254>)
 800f310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f314:	4a7e      	ldr	r2, [pc, #504]	; (800f510 <MX_GPIO_Init+0x254>)
 800f316:	f043 0320 	orr.w	r3, r3, #32
 800f31a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f31e:	4b7c      	ldr	r3, [pc, #496]	; (800f510 <MX_GPIO_Init+0x254>)
 800f320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f324:	f003 0320 	and.w	r3, r3, #32
 800f328:	61bb      	str	r3, [r7, #24]
 800f32a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f32c:	4b78      	ldr	r3, [pc, #480]	; (800f510 <MX_GPIO_Init+0x254>)
 800f32e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f332:	4a77      	ldr	r2, [pc, #476]	; (800f510 <MX_GPIO_Init+0x254>)
 800f334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f33c:	4b74      	ldr	r3, [pc, #464]	; (800f510 <MX_GPIO_Init+0x254>)
 800f33e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f346:	617b      	str	r3, [r7, #20]
 800f348:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f34a:	4b71      	ldr	r3, [pc, #452]	; (800f510 <MX_GPIO_Init+0x254>)
 800f34c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f350:	4a6f      	ldr	r2, [pc, #444]	; (800f510 <MX_GPIO_Init+0x254>)
 800f352:	f043 0301 	orr.w	r3, r3, #1
 800f356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f35a:	4b6d      	ldr	r3, [pc, #436]	; (800f510 <MX_GPIO_Init+0x254>)
 800f35c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f360:	f003 0301 	and.w	r3, r3, #1
 800f364:	613b      	str	r3, [r7, #16]
 800f366:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f368:	4b69      	ldr	r3, [pc, #420]	; (800f510 <MX_GPIO_Init+0x254>)
 800f36a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f36e:	4a68      	ldr	r2, [pc, #416]	; (800f510 <MX_GPIO_Init+0x254>)
 800f370:	f043 0302 	orr.w	r3, r3, #2
 800f374:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f378:	4b65      	ldr	r3, [pc, #404]	; (800f510 <MX_GPIO_Init+0x254>)
 800f37a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f37e:	f003 0302 	and.w	r3, r3, #2
 800f382:	60fb      	str	r3, [r7, #12]
 800f384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800f386:	4b62      	ldr	r3, [pc, #392]	; (800f510 <MX_GPIO_Init+0x254>)
 800f388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f38c:	4a60      	ldr	r2, [pc, #384]	; (800f510 <MX_GPIO_Init+0x254>)
 800f38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f396:	4b5e      	ldr	r3, [pc, #376]	; (800f510 <MX_GPIO_Init+0x254>)
 800f398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3a0:	60bb      	str	r3, [r7, #8]
 800f3a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f3a4:	4b5a      	ldr	r3, [pc, #360]	; (800f510 <MX_GPIO_Init+0x254>)
 800f3a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3aa:	4a59      	ldr	r2, [pc, #356]	; (800f510 <MX_GPIO_Init+0x254>)
 800f3ac:	f043 0308 	orr.w	r3, r3, #8
 800f3b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f3b4:	4b56      	ldr	r3, [pc, #344]	; (800f510 <MX_GPIO_Init+0x254>)
 800f3b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3ba:	f003 0308 	and.w	r3, r3, #8
 800f3be:	607b      	str	r3, [r7, #4]
 800f3c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f3c8:	4852      	ldr	r0, [pc, #328]	; (800f514 <MX_GPIO_Init+0x258>)
 800f3ca:	f7f5 facf 	bl	800496c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	2180      	movs	r1, #128	; 0x80
 800f3d2:	4851      	ldr	r0, [pc, #324]	; (800f518 <MX_GPIO_Init+0x25c>)
 800f3d4:	f7f5 faca 	bl	800496c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800f3d8:	2200      	movs	r2, #0
 800f3da:	2110      	movs	r1, #16
 800f3dc:	484f      	ldr	r0, [pc, #316]	; (800f51c <MX_GPIO_Init+0x260>)
 800f3de:	f7f5 fac5 	bl	800496c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f3e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f3e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f3ec:	2302      	movs	r3, #2
 800f3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f3f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	4847      	ldr	r0, [pc, #284]	; (800f514 <MX_GPIO_Init+0x258>)
 800f3f8:	f7f5 f8f0 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800f3fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f402:	2301      	movs	r3, #1
 800f404:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f406:	2302      	movs	r3, #2
 800f408:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f40a:	2300      	movs	r3, #0
 800f40c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f40e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f412:	4619      	mov	r1, r3
 800f414:	483f      	ldr	r0, [pc, #252]	; (800f514 <MX_GPIO_Init+0x258>)
 800f416:	f7f5 f8e1 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800f41a:	f248 03c2 	movw	r3, #32962	; 0x80c2
 800f41e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f420:	2303      	movs	r3, #3
 800f422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f424:	2300      	movs	r3, #0
 800f426:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f42c:	4619      	mov	r1, r3
 800f42e:	4839      	ldr	r0, [pc, #228]	; (800f514 <MX_GPIO_Init+0x258>)
 800f430:	f7f5 f8d4 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800f434:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800f438:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f43a:	2303      	movs	r3, #3
 800f43c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f43e:	2300      	movs	r3, #0
 800f440:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f446:	4619      	mov	r1, r3
 800f448:	4835      	ldr	r0, [pc, #212]	; (800f520 <MX_GPIO_Init+0x264>)
 800f44a:	f7f5 f8c7 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
 800f44e:	f240 33e7 	movw	r3, #999	; 0x3e7
 800f452:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f454:	2303      	movs	r3, #3
 800f456:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f458:	2300      	movs	r3, #0
 800f45a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f45c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f460:	4619      	mov	r1, r3
 800f462:	482e      	ldr	r0, [pc, #184]	; (800f51c <MX_GPIO_Init+0x260>)
 800f464:	f7f5 f8ba 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800f468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f46c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f46e:	4b2d      	ldr	r3, [pc, #180]	; (800f524 <MX_GPIO_Init+0x268>)
 800f470:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f472:	2300      	movs	r3, #0
 800f474:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f47a:	4619      	mov	r1, r3
 800f47c:	482a      	ldr	r0, [pc, #168]	; (800f528 <MX_GPIO_Init+0x26c>)
 800f47e:	f7f5 f8ad 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 PD4 
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 800f482:	f243 0378 	movw	r3, #12408	; 0x3078
 800f486:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f488:	2303      	movs	r3, #3
 800f48a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f48c:	2300      	movs	r3, #0
 800f48e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f494:	4619      	mov	r1, r3
 800f496:	4824      	ldr	r0, [pc, #144]	; (800f528 <MX_GPIO_Init+0x26c>)
 800f498:	f7f5 f8a0 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG12 PG13 
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13 
 800f49c:	f247 0348 	movw	r3, #28744	; 0x7048
 800f4a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f4a2:	2303      	movs	r3, #3
 800f4a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f4aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	4819      	ldr	r0, [pc, #100]	; (800f518 <MX_GPIO_Init+0x25c>)
 800f4b2:	f7f5 f893 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800f4b6:	2380      	movs	r3, #128	; 0x80
 800f4b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f4c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	4812      	ldr	r0, [pc, #72]	; (800f518 <MX_GPIO_Init+0x25c>)
 800f4ce:	f7f5 f885 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800f4d2:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 800f4d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f4d8:	2303      	movs	r3, #3
 800f4da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	4811      	ldr	r0, [pc, #68]	; (800f52c <MX_GPIO_Init+0x270>)
 800f4e8:	f7f5 f878 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800f4ec:	2310      	movs	r3, #16
 800f4ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f4fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f500:	4619      	mov	r1, r3
 800f502:	4806      	ldr	r0, [pc, #24]	; (800f51c <MX_GPIO_Init+0x260>)
 800f504:	f7f5 f86a 	bl	80045dc <HAL_GPIO_Init>

}
 800f508:	bf00      	nop
 800f50a:	3738      	adds	r7, #56	; 0x38
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	58024400 	.word	0x58024400
 800f514:	58020800 	.word	0x58020800
 800f518:	58021800 	.word	0x58021800
 800f51c:	58020400 	.word	0x58020400
 800f520:	58021400 	.word	0x58021400
 800f524:	11110000 	.word	0x11110000
 800f528:	58020c00 	.word	0x58020c00
 800f52c:	58020000 	.word	0x58020000

0800f530 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800f534:	4b1b      	ldr	r3, [pc, #108]	; (800f5a4 <MX_I2C2_Init+0x74>)
 800f536:	4a1c      	ldr	r2, [pc, #112]	; (800f5a8 <MX_I2C2_Init+0x78>)
 800f538:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800f53a:	4b1a      	ldr	r3, [pc, #104]	; (800f5a4 <MX_I2C2_Init+0x74>)
 800f53c:	4a1b      	ldr	r2, [pc, #108]	; (800f5ac <MX_I2C2_Init+0x7c>)
 800f53e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800f540:	4b18      	ldr	r3, [pc, #96]	; (800f5a4 <MX_I2C2_Init+0x74>)
 800f542:	2200      	movs	r2, #0
 800f544:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f546:	4b17      	ldr	r3, [pc, #92]	; (800f5a4 <MX_I2C2_Init+0x74>)
 800f548:	2201      	movs	r2, #1
 800f54a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f54c:	4b15      	ldr	r3, [pc, #84]	; (800f5a4 <MX_I2C2_Init+0x74>)
 800f54e:	2200      	movs	r2, #0
 800f550:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800f552:	4b14      	ldr	r3, [pc, #80]	; (800f5a4 <MX_I2C2_Init+0x74>)
 800f554:	2200      	movs	r2, #0
 800f556:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f558:	4b12      	ldr	r3, [pc, #72]	; (800f5a4 <MX_I2C2_Init+0x74>)
 800f55a:	2200      	movs	r2, #0
 800f55c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f55e:	4b11      	ldr	r3, [pc, #68]	; (800f5a4 <MX_I2C2_Init+0x74>)
 800f560:	2200      	movs	r2, #0
 800f562:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f564:	4b0f      	ldr	r3, [pc, #60]	; (800f5a4 <MX_I2C2_Init+0x74>)
 800f566:	2200      	movs	r2, #0
 800f568:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800f56a:	480e      	ldr	r0, [pc, #56]	; (800f5a4 <MX_I2C2_Init+0x74>)
 800f56c:	f7f5 fa18 	bl	80049a0 <HAL_I2C_Init>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d001      	beq.n	800f57a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800f576:	f000 fda7 	bl	80100c8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800f57a:	2100      	movs	r1, #0
 800f57c:	4809      	ldr	r0, [pc, #36]	; (800f5a4 <MX_I2C2_Init+0x74>)
 800f57e:	f7f5 fa9f 	bl	8004ac0 <HAL_I2CEx_ConfigAnalogFilter>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	d001      	beq.n	800f58c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800f588:	f000 fd9e 	bl	80100c8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800f58c:	2100      	movs	r1, #0
 800f58e:	4805      	ldr	r0, [pc, #20]	; (800f5a4 <MX_I2C2_Init+0x74>)
 800f590:	f7f5 fae1 	bl	8004b56 <HAL_I2CEx_ConfigDigitalFilter>
 800f594:	4603      	mov	r3, r0
 800f596:	2b00      	cmp	r3, #0
 800f598:	d001      	beq.n	800f59e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800f59a:	f000 fd95 	bl	80100c8 <Error_Handler>
  }

}
 800f59e:	bf00      	nop
 800f5a0:	bd80      	pop	{r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	2000080c 	.word	0x2000080c
 800f5a8:	40005800 	.word	0x40005800
 800f5ac:	00b03fdb 	.word	0x00b03fdb

0800f5b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b08a      	sub	sp, #40	; 0x28
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f5b8:	f107 0314 	add.w	r3, r7, #20
 800f5bc:	2200      	movs	r2, #0
 800f5be:	601a      	str	r2, [r3, #0]
 800f5c0:	605a      	str	r2, [r3, #4]
 800f5c2:	609a      	str	r2, [r3, #8]
 800f5c4:	60da      	str	r2, [r3, #12]
 800f5c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4a1a      	ldr	r2, [pc, #104]	; (800f638 <HAL_I2C_MspInit+0x88>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d12e      	bne.n	800f630 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f5d2:	4b1a      	ldr	r3, [pc, #104]	; (800f63c <HAL_I2C_MspInit+0x8c>)
 800f5d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f5d8:	4a18      	ldr	r2, [pc, #96]	; (800f63c <HAL_I2C_MspInit+0x8c>)
 800f5da:	f043 0302 	orr.w	r3, r3, #2
 800f5de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f5e2:	4b16      	ldr	r3, [pc, #88]	; (800f63c <HAL_I2C_MspInit+0x8c>)
 800f5e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f5e8:	f003 0302 	and.w	r3, r3, #2
 800f5ec:	613b      	str	r3, [r7, #16]
 800f5ee:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800f5f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f5f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f5f6:	2312      	movs	r3, #18
 800f5f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5fe:	2303      	movs	r3, #3
 800f600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800f602:	2304      	movs	r3, #4
 800f604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f606:	f107 0314 	add.w	r3, r7, #20
 800f60a:	4619      	mov	r1, r3
 800f60c:	480c      	ldr	r0, [pc, #48]	; (800f640 <HAL_I2C_MspInit+0x90>)
 800f60e:	f7f4 ffe5 	bl	80045dc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800f612:	4b0a      	ldr	r3, [pc, #40]	; (800f63c <HAL_I2C_MspInit+0x8c>)
 800f614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f618:	4a08      	ldr	r2, [pc, #32]	; (800f63c <HAL_I2C_MspInit+0x8c>)
 800f61a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f61e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800f622:	4b06      	ldr	r3, [pc, #24]	; (800f63c <HAL_I2C_MspInit+0x8c>)
 800f624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f62c:	60fb      	str	r3, [r7, #12]
 800f62e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800f630:	bf00      	nop
 800f632:	3728      	adds	r7, #40	; 0x28
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	40005800 	.word	0x40005800
 800f63c:	58024400 	.word	0x58024400
 800f640:	58020400 	.word	0x58020400

0800f644 <SCB_EnableICache>:
{
 800f644:	b480      	push	{r7}
 800f646:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f648:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800f64c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800f650:	4b0b      	ldr	r3, [pc, #44]	; (800f680 <SCB_EnableICache+0x3c>)
 800f652:	2200      	movs	r2, #0
 800f654:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800f658:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800f65c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800f660:	4b07      	ldr	r3, [pc, #28]	; (800f680 <SCB_EnableICache+0x3c>)
 800f662:	695b      	ldr	r3, [r3, #20]
 800f664:	4a06      	ldr	r2, [pc, #24]	; (800f680 <SCB_EnableICache+0x3c>)
 800f666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f66a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800f66c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800f670:	f3bf 8f6f 	isb	sy
}
 800f674:	bf00      	nop
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop
 800f680:	e000ed00 	.word	0xe000ed00

0800f684 <SCB_EnableDCache>:
{
 800f684:	b480      	push	{r7}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800f68a:	4b1d      	ldr	r3, [pc, #116]	; (800f700 <SCB_EnableDCache+0x7c>)
 800f68c:	2200      	movs	r2, #0
 800f68e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800f692:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800f696:	4b1a      	ldr	r3, [pc, #104]	; (800f700 <SCB_EnableDCache+0x7c>)
 800f698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f69c:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	0b5b      	lsrs	r3, r3, #13
 800f6a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f6a6:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	08db      	lsrs	r3, r3, #3
 800f6ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f6b0:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	015a      	lsls	r2, r3, #5
 800f6b6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800f6ba:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800f6bc:	68ba      	ldr	r2, [r7, #8]
 800f6be:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800f6c0:	490f      	ldr	r1, [pc, #60]	; (800f700 <SCB_EnableDCache+0x7c>)
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	1e5a      	subs	r2, r3, #1
 800f6cc:	60ba      	str	r2, [r7, #8]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d1ef      	bne.n	800f6b2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	1e5a      	subs	r2, r3, #1
 800f6d6:	60fa      	str	r2, [r7, #12]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d1e5      	bne.n	800f6a8 <SCB_EnableDCache+0x24>
 800f6dc:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800f6e0:	4b07      	ldr	r3, [pc, #28]	; (800f700 <SCB_EnableDCache+0x7c>)
 800f6e2:	695b      	ldr	r3, [r3, #20]
 800f6e4:	4a06      	ldr	r2, [pc, #24]	; (800f700 <SCB_EnableDCache+0x7c>)
 800f6e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f6ea:	6153      	str	r3, [r2, #20]
 800f6ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800f6f0:	f3bf 8f6f 	isb	sy
}
 800f6f4:	bf00      	nop
 800f6f6:	3714      	adds	r7, #20
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr
 800f700:	e000ed00 	.word	0xe000ed00

0800f704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b088      	sub	sp, #32
 800f708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  MPU_Conf();
 800f70a:	f000 fc33 	bl	800ff74 <MPU_Conf>
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800f70e:	f7ff ff99 	bl	800f644 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800f712:	f7ff ffb7 	bl	800f684 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f716:	f7f0 fddf 	bl	80002d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f71a:	f000 f885 	bl	800f828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f71e:	f7ff fdcd 	bl	800f2bc <MX_GPIO_Init>
  MX_DMA_Init();
 800f722:	f7ff fc67 	bl	800eff4 <MX_DMA_Init>
  MX_FMC_Init();
 800f726:	f7ff fce9 	bl	800f0fc <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 800f72a:	f000 ff49 	bl	80105c0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800f72e:	f7ff fca9 	bl	800f084 <MX_FATFS_Init>
  MX_SAI1_Init();
 800f732:	f000 fd09 	bl	8010148 <MX_SAI1_Init>
  MX_RNG_Init();
 800f736:	f000 fccf 	bl	80100d8 <MX_RNG_Init>
  MX_SPI2_Init();
 800f73a:	f001 f82f 	bl	801079c <MX_SPI2_Init>
  MX_I2C2_Init();
 800f73e:	f7ff fef7 	bl	800f530 <MX_I2C2_Init>
  MX_ADC1_Init();
 800f742:	f7ff f9e3 	bl	800eb0c <MX_ADC1_Init>
  MX_SPI1_Init();
 800f746:	f000 ffd1 	bl	80106ec <MX_SPI1_Init>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800f74a:	eef1 3a10 	vmrs	r3, fpscr
 800f74e:	607b      	str	r3, [r7, #4]
  return(result);
 800f750:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN 2 */
  uint32_t tempFPURegisterVal = __get_FPSCR();
 800f752:	61bb      	str	r3, [r7, #24]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 800f754:	69bb      	ldr	r3, [r7, #24]
 800f756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f75a:	61bb      	str	r3, [r7, #24]
 800f75c:	69bb      	ldr	r3, [r7, #24]
 800f75e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	eee1 3a10 	vmsr	fpscr, r3
  __set_FPSCR(tempFPURegisterVal);

  for (int i = 0; i < 16; i++)
 800f766:	2300      	movs	r3, #0
 800f768:	61fb      	str	r3, [r7, #28]
 800f76a:	e00c      	b.n	800f786 <main+0x82>
  {
	  SPI_TX[i] = counter++;
 800f76c:	4b23      	ldr	r3, [pc, #140]	; (800f7fc <main+0xf8>)
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	1c5a      	adds	r2, r3, #1
 800f772:	b2d1      	uxtb	r1, r2
 800f774:	4a21      	ldr	r2, [pc, #132]	; (800f7fc <main+0xf8>)
 800f776:	7011      	strb	r1, [r2, #0]
 800f778:	4921      	ldr	r1, [pc, #132]	; (800f800 <main+0xfc>)
 800f77a:	69fa      	ldr	r2, [r7, #28]
 800f77c:	440a      	add	r2, r1
 800f77e:	7013      	strb	r3, [r2, #0]
  for (int i = 0; i < 16; i++)
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	3301      	adds	r3, #1
 800f784:	61fb      	str	r3, [r7, #28]
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	2b0f      	cmp	r3, #15
 800f78a:	ddef      	ble.n	800f76c <main+0x68>
  }

  HAL_SPI_TransmitReceive_DMA(&hspi2, SPI_TX, SPI_RX, 16);
 800f78c:	2310      	movs	r3, #16
 800f78e:	4a1d      	ldr	r2, [pc, #116]	; (800f804 <main+0x100>)
 800f790:	491b      	ldr	r1, [pc, #108]	; (800f800 <main+0xfc>)
 800f792:	481d      	ldr	r0, [pc, #116]	; (800f808 <main+0x104>)
 800f794:	f7fa ff3a 	bl	800a60c <HAL_SPI_TransmitReceive_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800f798:	2201      	movs	r2, #1
 800f79a:	2140      	movs	r1, #64	; 0x40
 800f79c:	481b      	ldr	r0, [pc, #108]	; (800f80c <main+0x108>)
 800f79e:	f7f5 f8e5 	bl	800496c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800f7a2:	200a      	movs	r0, #10
 800f7a4:	f7f0 fe2a 	bl	80003fc <HAL_Delay>

  SDRAM_Initialization_sequence();
 800f7a8:	f000 f944 	bl	800fa34 <SDRAM_Initialization_sequence>
  HAL_Delay(10);
 800f7ac:	200a      	movs	r0, #10
 800f7ae:	f7f0 fe25 	bl	80003fc <HAL_Delay>


  int transmit_status = HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800f7b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f7b6:	4916      	ldr	r1, [pc, #88]	; (800f810 <main+0x10c>)
 800f7b8:	4816      	ldr	r0, [pc, #88]	; (800f814 <main+0x110>)
 800f7ba:	f7f8 fb9f 	bl	8007efc <HAL_SAI_Transmit_DMA>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	617b      	str	r3, [r7, #20]
  int receive_status = HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 800f7c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f7c6:	4914      	ldr	r1, [pc, #80]	; (800f818 <main+0x114>)
 800f7c8:	4814      	ldr	r0, [pc, #80]	; (800f81c <main+0x118>)
 800f7ca:	f7f8 fc4d 	bl	8008068 <HAL_SAI_Receive_DMA>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	613b      	str	r3, [r7, #16]

 if(BSP_SD_IsDetected())
 800f7d2:	f7ff fbfd 	bl	800efd0 <BSP_SD_IsDetected>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d001      	beq.n	800f7e0 <main+0xdc>
 {




   FS_FileOperations();
 800f7dc:	f000 f9ae 	bl	800fb3c <FS_FileOperations>

 }
 HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 800f7e0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800f7e4:	490e      	ldr	r1, [pc, #56]	; (800f820 <main+0x11c>)
 800f7e6:	480f      	ldr	r0, [pc, #60]	; (800f824 <main+0x120>)
 800f7e8:	f7f1 fa4a 	bl	8000c80 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  int tempIntGP = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800f7ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f7f0:	4806      	ldr	r0, [pc, #24]	; (800f80c <main+0x108>)
 800f7f2:	f7f5 f8a3 	bl	800493c <HAL_GPIO_ReadPin>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	60fb      	str	r3, [r7, #12]
  {
 800f7fa:	e7f7      	b.n	800f7ec <main+0xe8>
 800f7fc:	2000cc9b 	.word	0x2000cc9b
 800f800:	30000000 	.word	0x30000000
 800f804:	30000020 	.word	0x30000020
 800f808:	2000d5ec 	.word	0x2000d5ec
 800f80c:	58020800 	.word	0x58020800
 800f810:	30000040 	.word	0x30000040
 800f814:	2000d4d4 	.word	0x2000d4d4
 800f818:	30000840 	.word	0x30000840
 800f81c:	2000d34c 	.word	0x2000d34c
 800f820:	30001040 	.word	0x30001040
 800f824:	20000290 	.word	0x20000290

0800f828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b0cc      	sub	sp, #304	; 0x130
 800f82c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f82e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f832:	224c      	movs	r2, #76	; 0x4c
 800f834:	2100      	movs	r1, #0
 800f836:	4618      	mov	r0, r3
 800f838:	f001 fae6 	bl	8010e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f83c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f840:	2220      	movs	r2, #32
 800f842:	2100      	movs	r1, #0
 800f844:	4618      	mov	r0, r3
 800f846:	f001 fadf 	bl	8010e08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f84a:	f107 0308 	add.w	r3, r7, #8
 800f84e:	4618      	mov	r0, r3
 800f850:	23bc      	movs	r3, #188	; 0xbc
 800f852:	461a      	mov	r2, r3
 800f854:	2100      	movs	r1, #0
 800f856:	f001 fad7 	bl	8010e08 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800f85a:	2002      	movs	r0, #2
 800f85c:	f7f5 f9c8 	bl	8004bf0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800f860:	1d3b      	adds	r3, r7, #4
 800f862:	2200      	movs	r2, #0
 800f864:	601a      	str	r2, [r3, #0]
 800f866:	4b6f      	ldr	r3, [pc, #444]	; (800fa24 <SystemClock_Config+0x1fc>)
 800f868:	699b      	ldr	r3, [r3, #24]
 800f86a:	4a6e      	ldr	r2, [pc, #440]	; (800fa24 <SystemClock_Config+0x1fc>)
 800f86c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f870:	6193      	str	r3, [r2, #24]
 800f872:	4b6c      	ldr	r3, [pc, #432]	; (800fa24 <SystemClock_Config+0x1fc>)
 800f874:	699b      	ldr	r3, [r3, #24]
 800f876:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800f87a:	1d3b      	adds	r3, r7, #4
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	4b6a      	ldr	r3, [pc, #424]	; (800fa28 <SystemClock_Config+0x200>)
 800f880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f882:	4a69      	ldr	r2, [pc, #420]	; (800fa28 <SystemClock_Config+0x200>)
 800f884:	f043 0301 	orr.w	r3, r3, #1
 800f888:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f88a:	4b67      	ldr	r3, [pc, #412]	; (800fa28 <SystemClock_Config+0x200>)
 800f88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f88e:	f003 0201 	and.w	r2, r3, #1
 800f892:	1d3b      	adds	r3, r7, #4
 800f894:	601a      	str	r2, [r3, #0]
 800f896:	1d3b      	adds	r3, r7, #4
 800f898:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800f89a:	bf00      	nop
 800f89c:	4b61      	ldr	r3, [pc, #388]	; (800fa24 <SystemClock_Config+0x1fc>)
 800f89e:	699b      	ldr	r3, [r3, #24]
 800f8a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f8a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8a8:	d1f8      	bne.n	800f89c <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800f8aa:	4b60      	ldr	r3, [pc, #384]	; (800fa2c <SystemClock_Config+0x204>)
 800f8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8ae:	f023 0303 	bic.w	r3, r3, #3
 800f8b2:	4a5e      	ldr	r2, [pc, #376]	; (800fa2c <SystemClock_Config+0x204>)
 800f8b4:	f043 0302 	orr.w	r3, r3, #2
 800f8b8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800f8ba:	2323      	movs	r3, #35	; 0x23
 800f8bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f8c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f8c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800f8ce:	2340      	movs	r3, #64	; 0x40
 800f8d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f8da:	2302      	movs	r3, #2
 800f8dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f8e0:	2302      	movs	r3, #2
 800f8e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800f8e6:	2305      	movs	r3, #5
 800f8e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 800f8ec:	23c0      	movs	r3, #192	; 0xc0
 800f8ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800f8f2:	2302      	movs	r3, #2
 800f8f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800f8f8:	2302      	movs	r3, #2
 800f8fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800f8fe:	2302      	movs	r3, #2
 800f900:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800f904:	2308      	movs	r3, #8
 800f906:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800f90a:	2300      	movs	r3, #0
 800f90c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800f910:	2300      	movs	r3, #0
 800f912:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f916:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7f5 f9a2 	bl	8004c64 <HAL_RCC_OscConfig>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d001      	beq.n	800f92a <SystemClock_Config+0x102>
  {
    Error_Handler();
 800f926:	f000 fbcf 	bl	80100c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f92a:	233f      	movs	r3, #63	; 0x3f
 800f92c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f930:	2303      	movs	r3, #3
 800f932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800f936:	2300      	movs	r3, #0
 800f938:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800f93c:	2308      	movs	r3, #8
 800f93e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800f942:	2340      	movs	r3, #64	; 0x40
 800f944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800f948:	2340      	movs	r3, #64	; 0x40
 800f94a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800f94e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800f956:	2340      	movs	r3, #64	; 0x40
 800f958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800f95c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f960:	2104      	movs	r1, #4
 800f962:	4618      	mov	r0, r3
 800f964:	f7f5 fd56 	bl	8005414 <HAL_RCC_ClockConfig>
 800f968:	4603      	mov	r3, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d001      	beq.n	800f972 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800f96e:	f000 fbab 	bl	80100c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SPI1
 800f972:	f107 0308 	add.w	r3, r7, #8
 800f976:	4a2e      	ldr	r2, [pc, #184]	; (800fa30 <SystemClock_Config+0x208>)
 800f978:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FMC
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800f97a:	f107 0308 	add.w	r3, r7, #8
 800f97e:	2219      	movs	r2, #25
 800f980:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800f982:	f107 0308 	add.w	r3, r7, #8
 800f986:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800f98a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800f98c:	f107 0308 	add.w	r3, r7, #8
 800f990:	2207      	movs	r2, #7
 800f992:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800f994:	f107 0308 	add.w	r3, r7, #8
 800f998:	2202      	movs	r2, #2
 800f99a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800f99c:	f107 0308 	add.w	r3, r7, #8
 800f9a0:	2202      	movs	r2, #2
 800f9a2:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800f9a4:	f107 0308 	add.w	r3, r7, #8
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800f9ac:	f107 0308 	add.w	r3, r7, #8
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800f9b4:	f107 0308 	add.w	r3, r7, #8
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800f9bc:	f107 0308 	add.w	r3, r7, #8
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800f9c4:	f107 0308 	add.w	r3, r7, #8
 800f9c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f9cc:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800f9ce:	f107 0308 	add.w	r3, r7, #8
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800f9d6:	f107 0308 	add.w	r3, r7, #8
 800f9da:	2201      	movs	r2, #1
 800f9dc:	655a      	str	r2, [r3, #84]	; 0x54
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800f9de:	f107 0308 	add.w	r3, r7, #8
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800f9e6:	f107 0308 	add.w	r3, r7, #8
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800f9ee:	f107 0308 	add.w	r3, r7, #8
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800f9f8:	f107 0308 	add.w	r3, r7, #8
 800f9fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fa00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fa04:	f107 0308 	add.w	r3, r7, #8
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7f6 f85b 	bl	8005ac4 <HAL_RCCEx_PeriphCLKConfig>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d001      	beq.n	800fa18 <SystemClock_Config+0x1f0>
  {
    Error_Handler();
 800fa14:	f000 fb58 	bl	80100c8 <Error_Handler>
  }
}
 800fa18:	bf00      	nop
 800fa1a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	58024800 	.word	0x58024800
 800fa28:	58000400 	.word	0x58000400
 800fa2c:	58024400 	.word	0x58024400
 800fa30:	810b1108 	.word	0x810b1108

0800fa34 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b086      	sub	sp, #24
 800fa38:	af00      	add	r7, sp, #0
    __IO uint32_t tmpmrd = 0;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	617b      	str	r3, [r7, #20]
    FMC_SDRAM_CommandTypeDef Command;
    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800fa3e:	2301      	movs	r3, #1
 800fa40:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800fa42:	2310      	movs	r3, #16
 800fa44:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 800fa46:	2301      	movs	r3, #1
 800fa48:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800fa4e:	1d3b      	adds	r3, r7, #4
 800fa50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa54:	4619      	mov	r1, r3
 800fa56:	4828      	ldr	r0, [pc, #160]	; (800faf8 <SDRAM_Initialization_sequence+0xc4>)
 800fa58:	f7fa fc82 	bl	800a360 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800fa5c:	2001      	movs	r0, #1
 800fa5e:	f7f0 fccd 	bl	80003fc <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800fa62:	2302      	movs	r3, #2
 800fa64:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800fa66:	2310      	movs	r3, #16
 800fa68:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800fa72:	1d3b      	adds	r3, r7, #4
 800fa74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa78:	4619      	mov	r1, r3
 800fa7a:	481f      	ldr	r0, [pc, #124]	; (800faf8 <SDRAM_Initialization_sequence+0xc4>)
 800fa7c:	f7fa fc70 	bl	800a360 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800fa80:	f240 2322 	movw	r3, #546	; 0x222
 800fa84:	617b      	str	r3, [r7, #20]
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800fa86:	2304      	movs	r3, #4
 800fa88:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800fa8a:	2310      	movs	r3, #16
 800fa8c:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800fa96:	1d3b      	adds	r3, r7, #4
 800fa98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	4816      	ldr	r0, [pc, #88]	; (800faf8 <SDRAM_Initialization_sequence+0xc4>)
 800faa0:	f7fa fc5e 	bl	800a360 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800faa4:	2303      	movs	r3, #3
 800faa6:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800faa8:	2310      	movs	r3, #16
 800faaa:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 800faac:	2308      	movs	r3, #8
 800faae:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800fab0:	2300      	movs	r3, #0
 800fab2:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800fab4:	1d3b      	adds	r3, r7, #4
 800fab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800faba:	4619      	mov	r1, r3
 800fabc:	480e      	ldr	r0, [pc, #56]	; (800faf8 <SDRAM_Initialization_sequence+0xc4>)
 800fabe:	f7fa fc4f 	bl	800a360 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800fac2:	2001      	movs	r0, #1
 800fac4:	f7f0 fc9a 	bl	80003fc <HAL_Delay>

    /* Step 5: Configure the 2nd Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800fac8:	2303      	movs	r3, #3
 800faca:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800facc:	2310      	movs	r3, #16
 800face:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 800fad0:	2308      	movs	r3, #8
 800fad2:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800fad4:	2300      	movs	r3, #0
 800fad6:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800fad8:	1d3b      	adds	r3, r7, #4
 800fada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fade:	4619      	mov	r1, r3
 800fae0:	4805      	ldr	r0, [pc, #20]	; (800faf8 <SDRAM_Initialization_sequence+0xc4>)
 800fae2:	f7fa fc3d 	bl	800a360 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 800fae6:	f240 5169 	movw	r1, #1385	; 0x569
 800faea:	4803      	ldr	r0, [pc, #12]	; (800faf8 <SDRAM_Initialization_sequence+0xc4>)
 800faec:	f7fa fc6d 	bl	800a3ca <HAL_SDRAM_ProgramRefreshRate>
}
 800faf0:	bf00      	nop
 800faf2:	3718      	adds	r7, #24
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	200007d8 	.word	0x200007d8

0800fafc <randomNumber>:


float randomNumber(void) {
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800fb02:	463b      	mov	r3, r7
 800fb04:	4619      	mov	r1, r3
 800fb06:	480b      	ldr	r0, [pc, #44]	; (800fb34 <randomNumber+0x38>)
 800fb08:	f7f7 feeb 	bl	80078e2 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	ee07 3a90 	vmov	s15, r3
 800fb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb16:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800fb38 <randomNumber+0x3c>
 800fb1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb1e:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	ee07 3a90 	vmov	s15, r3
}
 800fb28:	eeb0 0a67 	vmov.f32	s0, s15
 800fb2c:	3708      	adds	r7, #8
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	2000d338 	.word	0x2000d338
 800fb38:	2f80000d 	.word	0x2f80000d

0800fb3c <FS_FileOperations>:
uint8_t tempText[30];
int testNumber = 55559;
int8_t filename[30];
uint8_t fileExt[] = ".txt";
static void FS_FileOperations(void)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
  int theNumber = randomNumber() * 65535;
 800fb42:	f7ff ffdb 	bl	800fafc <randomNumber>
 800fb46:	eeb0 7a40 	vmov.f32	s14, s0
 800fb4a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800fbb8 <FS_FileOperations+0x7c>
 800fb4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb56:	ee17 3a90 	vmov	r3, s15
 800fb5a:	607b      	str	r3, [r7, #4]
  itoa(theNumber,tempText, 10);
 800fb5c:	220a      	movs	r2, #10
 800fb5e:	4917      	ldr	r1, [pc, #92]	; (800fbbc <FS_FileOperations+0x80>)
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f001 f94f 	bl	8010e04 <itoa>
  strncat(filename, tempText, sizeof(tempText));
 800fb66:	221e      	movs	r2, #30
 800fb68:	4914      	ldr	r1, [pc, #80]	; (800fbbc <FS_FileOperations+0x80>)
 800fb6a:	4815      	ldr	r0, [pc, #84]	; (800fbc0 <FS_FileOperations+0x84>)
 800fb6c:	f001 f954 	bl	8010e18 <strncat>
  strncat(filename, fileExt, sizeof(fileExt));
 800fb70:	2205      	movs	r2, #5
 800fb72:	4914      	ldr	r1, [pc, #80]	; (800fbc4 <FS_FileOperations+0x88>)
 800fb74:	4812      	ldr	r0, [pc, #72]	; (800fbc0 <FS_FileOperations+0x84>)
 800fb76:	f001 f94f 	bl	8010e18 <strncat>
  statusH = disk_initialize(0);
 800fb7a:	2000      	movs	r0, #0
 800fb7c:	f7fc f982 	bl	800be84 <disk_initialize>
 800fb80:	4603      	mov	r3, r0
 800fb82:	461a      	mov	r2, r3
 800fb84:	4b10      	ldr	r3, [pc, #64]	; (800fbc8 <FS_FileOperations+0x8c>)
 800fb86:	701a      	strb	r2, [r3, #0]
  /* Register the file system object to the FatFs module */
  if(f_mount(&MMCFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 800fb88:	2200      	movs	r2, #0
 800fb8a:	4910      	ldr	r1, [pc, #64]	; (800fbcc <FS_FileOperations+0x90>)
 800fb8c:	4810      	ldr	r0, [pc, #64]	; (800fbd0 <FS_FileOperations+0x94>)
 800fb8e:	f7fe fa79 	bl	800e084 <f_mount>
 800fb92:	4603      	mov	r3, r0
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d10a      	bne.n	800fbae <FS_FileOperations+0x72>
  {
	  {
		  if(f_open(&myFile, filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800fb98:	220a      	movs	r2, #10
 800fb9a:	4909      	ldr	r1, [pc, #36]	; (800fbc0 <FS_FileOperations+0x84>)
 800fb9c:	480d      	ldr	r0, [pc, #52]	; (800fbd4 <FS_FileOperations+0x98>)
 800fb9e:	f7fe fab7 	bl	800e110 <f_open>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d102      	bne.n	800fbae <FS_FileOperations+0x72>
		  {
			SDReady = 1;
 800fba8:	4b0b      	ldr	r3, [pc, #44]	; (800fbd8 <FS_FileOperations+0x9c>)
 800fbaa:	2201      	movs	r2, #1
 800fbac:	601a      	str	r2, [r3, #0]
		  }
	  }
  }
}
 800fbae:	bf00      	nop
 800fbb0:	3708      	adds	r7, #8
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	477fff00 	.word	0x477fff00
 800fbbc:	2000cc7c 	.word	0x2000cc7c
 800fbc0:	2000c85c 	.word	0x2000c85c
 800fbc4:	20000008 	.word	0x20000008
 800fbc8:	2000cc9a 	.word	0x2000cc9a
 800fbcc:	20000370 	.word	0x20000370
 800fbd0:	2000cc9c 	.word	0x2000cc9c
 800fbd4:	2000086c 	.word	0x2000086c
 800fbd8:	2000026c 	.word	0x2000026c

0800fbdc <writeToSD>:
uint8_t comma[] = ", ";
uint8_t newline[] = "\r\n";
uint64_t memoryPointer = 0;
char largeMemory[LARGE_MEM_SIZE] __ATTR_SDRAM;
void writeToSD(int theIndex, int theNumber, int whichString)
{
 800fbdc:	b590      	push	{r4, r7, lr}
 800fbde:	b08d      	sub	sp, #52	; 0x34
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	60f8      	str	r0, [r7, #12]
 800fbe4:	60b9      	str	r1, [r7, #8]
 800fbe6:	607a      	str	r2, [r7, #4]
	if(finishSD == 1)
 800fbe8:	4b95      	ldr	r3, [pc, #596]	; (800fe40 <writeToSD+0x264>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d135      	bne.n	800fc5c <writeToSD+0x80>
	{

		SDReady = 0;
 800fbf0:	4b94      	ldr	r3, [pc, #592]	; (800fe44 <writeToSD+0x268>)
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	601a      	str	r2, [r3, #0]
		largeMemory[memoryPointer] = 0;
 800fbf6:	4b94      	ldr	r3, [pc, #592]	; (800fe48 <writeToSD+0x26c>)
 800fbf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fbfc:	4a93      	ldr	r2, [pc, #588]	; (800fe4c <writeToSD+0x270>)
 800fbfe:	4413      	add	r3, r2
 800fc00:	2200      	movs	r2, #0
 800fc02:	701a      	strb	r2, [r3, #0]
		memoryPointer++;
 800fc04:	4b90      	ldr	r3, [pc, #576]	; (800fe48 <writeToSD+0x26c>)
 800fc06:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fc0a:	1c4b      	adds	r3, r1, #1
 800fc0c:	f142 0400 	adc.w	r4, r2, #0
 800fc10:	4a8d      	ldr	r2, [pc, #564]	; (800fe48 <writeToSD+0x26c>)
 800fc12:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc16:	b672      	cpsid	i

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		__disable_irq();
		 f_write(&myFile, largeMemory, memoryPointer, (void *)&byteswritten);
 800fc18:	4b8b      	ldr	r3, [pc, #556]	; (800fe48 <writeToSD+0x26c>)
 800fc1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fc1e:	461a      	mov	r2, r3
 800fc20:	4b8b      	ldr	r3, [pc, #556]	; (800fe50 <writeToSD+0x274>)
 800fc22:	498a      	ldr	r1, [pc, #552]	; (800fe4c <writeToSD+0x270>)
 800fc24:	488b      	ldr	r0, [pc, #556]	; (800fe54 <writeToSD+0x278>)
 800fc26:	f7fe fc31 	bl	800e48c <f_write>
		 res2 = f_close(&myFile);
 800fc2a:	488a      	ldr	r0, [pc, #552]	; (800fe54 <writeToSD+0x278>)
 800fc2c:	f7fe fe21 	bl	800e872 <f_close>
 800fc30:	4603      	mov	r3, r0
 800fc32:	461a      	mov	r2, r3
 800fc34:	4b88      	ldr	r3, [pc, #544]	; (800fe58 <writeToSD+0x27c>)
 800fc36:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800fc38:	b662      	cpsie	i
		 __enable_irq();
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	2110      	movs	r1, #16
 800fc3e:	4887      	ldr	r0, [pc, #540]	; (800fe5c <writeToSD+0x280>)
 800fc40:	f7f4 fe94 	bl	800496c <HAL_GPIO_WritePin>
		 if (res2 == FR_OK)
 800fc44:	4b84      	ldr	r3, [pc, #528]	; (800fe58 <writeToSD+0x27c>)
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	f040 8186 	bne.w	800ff5c <writeToSD+0x380>
		 {
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800fc50:	2201      	movs	r2, #1
 800fc52:	2110      	movs	r1, #16
 800fc54:	4881      	ldr	r0, [pc, #516]	; (800fe5c <writeToSD+0x280>)
 800fc56:	f7f4 fe89 	bl	800496c <HAL_GPIO_WritePin>
		largeMemory[memoryPointer] = 10;
		memoryPointer++;

		SDWriteIndex++;
	}
}
 800fc5a:	e17f      	b.n	800ff5c <writeToSD+0x380>
	else if (whichString == 0)
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	f040 809d 	bne.w	800fd9e <writeToSD+0x1c2>
		for (int i = 0; i < 10; i++)
 800fc64:	2300      	movs	r3, #0
 800fc66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc68:	e007      	b.n	800fc7a <writeToSD+0x9e>
			tempText[i] = 0;
 800fc6a:	4a7d      	ldr	r2, [pc, #500]	; (800fe60 <writeToSD+0x284>)
 800fc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6e:	4413      	add	r3, r2
 800fc70:	2200      	movs	r2, #0
 800fc72:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 10; i++)
 800fc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc76:	3301      	adds	r3, #1
 800fc78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7c:	2b09      	cmp	r3, #9
 800fc7e:	ddf4      	ble.n	800fc6a <writeToSD+0x8e>
		itoa(theIndex,tempText, 10);
 800fc80:	220a      	movs	r2, #10
 800fc82:	4977      	ldr	r1, [pc, #476]	; (800fe60 <writeToSD+0x284>)
 800fc84:	68f8      	ldr	r0, [r7, #12]
 800fc86:	f001 f8bd 	bl	8010e04 <itoa>
		for (int i = 0; i < 10; i++)
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc8e:	e01c      	b.n	800fcca <writeToSD+0xee>
			if (tempText[i] != 0)
 800fc90:	4a73      	ldr	r2, [pc, #460]	; (800fe60 <writeToSD+0x284>)
 800fc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc94:	4413      	add	r3, r2
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d013      	beq.n	800fcc4 <writeToSD+0xe8>
				largeMemory[memoryPointer] = tempText[i];
 800fc9c:	4b6a      	ldr	r3, [pc, #424]	; (800fe48 <writeToSD+0x26c>)
 800fc9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fca2:	496f      	ldr	r1, [pc, #444]	; (800fe60 <writeToSD+0x284>)
 800fca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fca6:	440a      	add	r2, r1
 800fca8:	7811      	ldrb	r1, [r2, #0]
 800fcaa:	4a68      	ldr	r2, [pc, #416]	; (800fe4c <writeToSD+0x270>)
 800fcac:	4413      	add	r3, r2
 800fcae:	460a      	mov	r2, r1
 800fcb0:	701a      	strb	r2, [r3, #0]
				memoryPointer++;
 800fcb2:	4b65      	ldr	r3, [pc, #404]	; (800fe48 <writeToSD+0x26c>)
 800fcb4:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fcb8:	1c4b      	adds	r3, r1, #1
 800fcba:	f142 0400 	adc.w	r4, r2, #0
 800fcbe:	4a62      	ldr	r2, [pc, #392]	; (800fe48 <writeToSD+0x26c>)
 800fcc0:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; i < 10; i++)
 800fcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fccc:	2b09      	cmp	r3, #9
 800fcce:	dddf      	ble.n	800fc90 <writeToSD+0xb4>
		largeMemory[memoryPointer] = 44;
 800fcd0:	4b5d      	ldr	r3, [pc, #372]	; (800fe48 <writeToSD+0x26c>)
 800fcd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fcd6:	4a5d      	ldr	r2, [pc, #372]	; (800fe4c <writeToSD+0x270>)
 800fcd8:	4413      	add	r3, r2
 800fcda:	222c      	movs	r2, #44	; 0x2c
 800fcdc:	701a      	strb	r2, [r3, #0]
		memoryPointer++;
 800fcde:	4b5a      	ldr	r3, [pc, #360]	; (800fe48 <writeToSD+0x26c>)
 800fce0:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fce4:	1c4b      	adds	r3, r1, #1
 800fce6:	f142 0400 	adc.w	r4, r2, #0
 800fcea:	4a57      	ldr	r2, [pc, #348]	; (800fe48 <writeToSD+0x26c>)
 800fcec:	e9c2 3400 	strd	r3, r4, [r2]
		largeMemory[memoryPointer] = 32;
 800fcf0:	4b55      	ldr	r3, [pc, #340]	; (800fe48 <writeToSD+0x26c>)
 800fcf2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fcf6:	4a55      	ldr	r2, [pc, #340]	; (800fe4c <writeToSD+0x270>)
 800fcf8:	4413      	add	r3, r2
 800fcfa:	2220      	movs	r2, #32
 800fcfc:	701a      	strb	r2, [r3, #0]
		memoryPointer++;
 800fcfe:	4b52      	ldr	r3, [pc, #328]	; (800fe48 <writeToSD+0x26c>)
 800fd00:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fd04:	1c4b      	adds	r3, r1, #1
 800fd06:	f142 0400 	adc.w	r4, r2, #0
 800fd0a:	4a4f      	ldr	r2, [pc, #316]	; (800fe48 <writeToSD+0x26c>)
 800fd0c:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; i < 10; i++)
 800fd10:	2300      	movs	r3, #0
 800fd12:	627b      	str	r3, [r7, #36]	; 0x24
 800fd14:	e007      	b.n	800fd26 <writeToSD+0x14a>
			tempText[i] = 0;
 800fd16:	4a52      	ldr	r2, [pc, #328]	; (800fe60 <writeToSD+0x284>)
 800fd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1a:	4413      	add	r3, r2
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 10; i++)
 800fd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd22:	3301      	adds	r3, #1
 800fd24:	627b      	str	r3, [r7, #36]	; 0x24
 800fd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd28:	2b09      	cmp	r3, #9
 800fd2a:	ddf4      	ble.n	800fd16 <writeToSD+0x13a>
		itoa(theNumber,tempText, 10);
 800fd2c:	220a      	movs	r2, #10
 800fd2e:	494c      	ldr	r1, [pc, #304]	; (800fe60 <writeToSD+0x284>)
 800fd30:	68b8      	ldr	r0, [r7, #8]
 800fd32:	f001 f867 	bl	8010e04 <itoa>
		for (int i = 0; i < 5; i++)
 800fd36:	2300      	movs	r3, #0
 800fd38:	623b      	str	r3, [r7, #32]
 800fd3a:	e01c      	b.n	800fd76 <writeToSD+0x19a>
			if (tempText[i] != 0)
 800fd3c:	4a48      	ldr	r2, [pc, #288]	; (800fe60 <writeToSD+0x284>)
 800fd3e:	6a3b      	ldr	r3, [r7, #32]
 800fd40:	4413      	add	r3, r2
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d013      	beq.n	800fd70 <writeToSD+0x194>
				largeMemory[memoryPointer] = tempText[i];
 800fd48:	4b3f      	ldr	r3, [pc, #252]	; (800fe48 <writeToSD+0x26c>)
 800fd4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fd4e:	4944      	ldr	r1, [pc, #272]	; (800fe60 <writeToSD+0x284>)
 800fd50:	6a3a      	ldr	r2, [r7, #32]
 800fd52:	440a      	add	r2, r1
 800fd54:	7811      	ldrb	r1, [r2, #0]
 800fd56:	4a3d      	ldr	r2, [pc, #244]	; (800fe4c <writeToSD+0x270>)
 800fd58:	4413      	add	r3, r2
 800fd5a:	460a      	mov	r2, r1
 800fd5c:	701a      	strb	r2, [r3, #0]
				memoryPointer++;
 800fd5e:	4b3a      	ldr	r3, [pc, #232]	; (800fe48 <writeToSD+0x26c>)
 800fd60:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fd64:	1c4b      	adds	r3, r1, #1
 800fd66:	f142 0400 	adc.w	r4, r2, #0
 800fd6a:	4a37      	ldr	r2, [pc, #220]	; (800fe48 <writeToSD+0x26c>)
 800fd6c:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; i < 5; i++)
 800fd70:	6a3b      	ldr	r3, [r7, #32]
 800fd72:	3301      	adds	r3, #1
 800fd74:	623b      	str	r3, [r7, #32]
 800fd76:	6a3b      	ldr	r3, [r7, #32]
 800fd78:	2b04      	cmp	r3, #4
 800fd7a:	dddf      	ble.n	800fd3c <writeToSD+0x160>
		largeMemory[memoryPointer] = 32;
 800fd7c:	4b32      	ldr	r3, [pc, #200]	; (800fe48 <writeToSD+0x26c>)
 800fd7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fd82:	4a32      	ldr	r2, [pc, #200]	; (800fe4c <writeToSD+0x270>)
 800fd84:	4413      	add	r3, r2
 800fd86:	2220      	movs	r2, #32
 800fd88:	701a      	strb	r2, [r3, #0]
		memoryPointer++;
 800fd8a:	4b2f      	ldr	r3, [pc, #188]	; (800fe48 <writeToSD+0x26c>)
 800fd8c:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fd90:	1c4b      	adds	r3, r1, #1
 800fd92:	f142 0400 	adc.w	r4, r2, #0
 800fd96:	4a2c      	ldr	r2, [pc, #176]	; (800fe48 <writeToSD+0x26c>)
 800fd98:	e9c2 3400 	strd	r3, r4, [r2]
}
 800fd9c:	e0de      	b.n	800ff5c <writeToSD+0x380>
	else if ((whichString > 0) && (whichString < 9))
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	dd49      	ble.n	800fe38 <writeToSD+0x25c>
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2b08      	cmp	r3, #8
 800fda8:	dc46      	bgt.n	800fe38 <writeToSD+0x25c>
		for (int i = 0; i < 30; i++)
 800fdaa:	2300      	movs	r3, #0
 800fdac:	61fb      	str	r3, [r7, #28]
 800fdae:	e007      	b.n	800fdc0 <writeToSD+0x1e4>
			tempText[i] = 0;
 800fdb0:	4a2b      	ldr	r2, [pc, #172]	; (800fe60 <writeToSD+0x284>)
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	4413      	add	r3, r2
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 30; i++)
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	61fb      	str	r3, [r7, #28]
 800fdc0:	69fb      	ldr	r3, [r7, #28]
 800fdc2:	2b1d      	cmp	r3, #29
 800fdc4:	ddf4      	ble.n	800fdb0 <writeToSD+0x1d4>
		itoa(theNumber,tempText, 10);
 800fdc6:	220a      	movs	r2, #10
 800fdc8:	4925      	ldr	r1, [pc, #148]	; (800fe60 <writeToSD+0x284>)
 800fdca:	68b8      	ldr	r0, [r7, #8]
 800fdcc:	f001 f81a 	bl	8010e04 <itoa>
		for (int i = 0; i < 10; i++)
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	61bb      	str	r3, [r7, #24]
 800fdd4:	e01c      	b.n	800fe10 <writeToSD+0x234>
			if (tempText[i] != 0)
 800fdd6:	4a22      	ldr	r2, [pc, #136]	; (800fe60 <writeToSD+0x284>)
 800fdd8:	69bb      	ldr	r3, [r7, #24]
 800fdda:	4413      	add	r3, r2
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d013      	beq.n	800fe0a <writeToSD+0x22e>
				largeMemory[memoryPointer] = tempText[i];
 800fde2:	4b19      	ldr	r3, [pc, #100]	; (800fe48 <writeToSD+0x26c>)
 800fde4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fde8:	491d      	ldr	r1, [pc, #116]	; (800fe60 <writeToSD+0x284>)
 800fdea:	69ba      	ldr	r2, [r7, #24]
 800fdec:	440a      	add	r2, r1
 800fdee:	7811      	ldrb	r1, [r2, #0]
 800fdf0:	4a16      	ldr	r2, [pc, #88]	; (800fe4c <writeToSD+0x270>)
 800fdf2:	4413      	add	r3, r2
 800fdf4:	460a      	mov	r2, r1
 800fdf6:	701a      	strb	r2, [r3, #0]
				memoryPointer++;
 800fdf8:	4b13      	ldr	r3, [pc, #76]	; (800fe48 <writeToSD+0x26c>)
 800fdfa:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fdfe:	1c4b      	adds	r3, r1, #1
 800fe00:	f142 0400 	adc.w	r4, r2, #0
 800fe04:	4a10      	ldr	r2, [pc, #64]	; (800fe48 <writeToSD+0x26c>)
 800fe06:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; i < 10; i++)
 800fe0a:	69bb      	ldr	r3, [r7, #24]
 800fe0c:	3301      	adds	r3, #1
 800fe0e:	61bb      	str	r3, [r7, #24]
 800fe10:	69bb      	ldr	r3, [r7, #24]
 800fe12:	2b09      	cmp	r3, #9
 800fe14:	dddf      	ble.n	800fdd6 <writeToSD+0x1fa>
		largeMemory[memoryPointer] = 32;
 800fe16:	4b0c      	ldr	r3, [pc, #48]	; (800fe48 <writeToSD+0x26c>)
 800fe18:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fe1c:	4a0b      	ldr	r2, [pc, #44]	; (800fe4c <writeToSD+0x270>)
 800fe1e:	4413      	add	r3, r2
 800fe20:	2220      	movs	r2, #32
 800fe22:	701a      	strb	r2, [r3, #0]
		memoryPointer++;
 800fe24:	4b08      	ldr	r3, [pc, #32]	; (800fe48 <writeToSD+0x26c>)
 800fe26:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fe2a:	1c4b      	adds	r3, r1, #1
 800fe2c:	f142 0400 	adc.w	r4, r2, #0
 800fe30:	4a05      	ldr	r2, [pc, #20]	; (800fe48 <writeToSD+0x26c>)
 800fe32:	e9c2 3400 	strd	r3, r4, [r2]
}
 800fe36:	e091      	b.n	800ff5c <writeToSD+0x380>
		for (int i = 0; i < 30; i++)
 800fe38:	2300      	movs	r3, #0
 800fe3a:	617b      	str	r3, [r7, #20]
 800fe3c:	e01a      	b.n	800fe74 <writeToSD+0x298>
 800fe3e:	bf00      	nop
 800fe40:	20000278 	.word	0x20000278
 800fe44:	2000026c 	.word	0x2000026c
 800fe48:	20000280 	.word	0x20000280
 800fe4c:	60000000 	.word	0x60000000
 800fe50:	20000cd4 	.word	0x20000cd4
 800fe54:	2000086c 	.word	0x2000086c
 800fe58:	20000a9c 	.word	0x20000a9c
 800fe5c:	58020400 	.word	0x58020400
 800fe60:	2000cc7c 	.word	0x2000cc7c
			tempText[i] = 0;
 800fe64:	4a3f      	ldr	r2, [pc, #252]	; (800ff64 <writeToSD+0x388>)
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	4413      	add	r3, r2
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 30; i++)
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	3301      	adds	r3, #1
 800fe72:	617b      	str	r3, [r7, #20]
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	2b1d      	cmp	r3, #29
 800fe78:	ddf4      	ble.n	800fe64 <writeToSD+0x288>
		itoa(theNumber,tempText, 10);
 800fe7a:	220a      	movs	r2, #10
 800fe7c:	4939      	ldr	r1, [pc, #228]	; (800ff64 <writeToSD+0x388>)
 800fe7e:	68b8      	ldr	r0, [r7, #8]
 800fe80:	f000 ffc0 	bl	8010e04 <itoa>
		for (int i = 0; i < 10; i++)
 800fe84:	2300      	movs	r3, #0
 800fe86:	613b      	str	r3, [r7, #16]
 800fe88:	e01c      	b.n	800fec4 <writeToSD+0x2e8>
			if (tempText[i] != 0)
 800fe8a:	4a36      	ldr	r2, [pc, #216]	; (800ff64 <writeToSD+0x388>)
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	4413      	add	r3, r2
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d013      	beq.n	800febe <writeToSD+0x2e2>
				largeMemory[memoryPointer] = tempText[i];
 800fe96:	4b34      	ldr	r3, [pc, #208]	; (800ff68 <writeToSD+0x38c>)
 800fe98:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fe9c:	4931      	ldr	r1, [pc, #196]	; (800ff64 <writeToSD+0x388>)
 800fe9e:	693a      	ldr	r2, [r7, #16]
 800fea0:	440a      	add	r2, r1
 800fea2:	7811      	ldrb	r1, [r2, #0]
 800fea4:	4a31      	ldr	r2, [pc, #196]	; (800ff6c <writeToSD+0x390>)
 800fea6:	4413      	add	r3, r2
 800fea8:	460a      	mov	r2, r1
 800feaa:	701a      	strb	r2, [r3, #0]
				memoryPointer++;
 800feac:	4b2e      	ldr	r3, [pc, #184]	; (800ff68 <writeToSD+0x38c>)
 800feae:	e9d3 1200 	ldrd	r1, r2, [r3]
 800feb2:	1c4b      	adds	r3, r1, #1
 800feb4:	f142 0400 	adc.w	r4, r2, #0
 800feb8:	4a2b      	ldr	r2, [pc, #172]	; (800ff68 <writeToSD+0x38c>)
 800feba:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; i < 10; i++)
 800febe:	693b      	ldr	r3, [r7, #16]
 800fec0:	3301      	adds	r3, #1
 800fec2:	613b      	str	r3, [r7, #16]
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	2b09      	cmp	r3, #9
 800fec8:	dddf      	ble.n	800fe8a <writeToSD+0x2ae>
		largeMemory[memoryPointer] = 32;
 800feca:	4b27      	ldr	r3, [pc, #156]	; (800ff68 <writeToSD+0x38c>)
 800fecc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fed0:	4a26      	ldr	r2, [pc, #152]	; (800ff6c <writeToSD+0x390>)
 800fed2:	4413      	add	r3, r2
 800fed4:	2220      	movs	r2, #32
 800fed6:	701a      	strb	r2, [r3, #0]
		memoryPointer++;
 800fed8:	4b23      	ldr	r3, [pc, #140]	; (800ff68 <writeToSD+0x38c>)
 800feda:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fede:	1c4b      	adds	r3, r1, #1
 800fee0:	f142 0400 	adc.w	r4, r2, #0
 800fee4:	4a20      	ldr	r2, [pc, #128]	; (800ff68 <writeToSD+0x38c>)
 800fee6:	e9c2 3400 	strd	r3, r4, [r2]
		largeMemory[memoryPointer] = 59;
 800feea:	4b1f      	ldr	r3, [pc, #124]	; (800ff68 <writeToSD+0x38c>)
 800feec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fef0:	4a1e      	ldr	r2, [pc, #120]	; (800ff6c <writeToSD+0x390>)
 800fef2:	4413      	add	r3, r2
 800fef4:	223b      	movs	r2, #59	; 0x3b
 800fef6:	701a      	strb	r2, [r3, #0]
		memoryPointer++;
 800fef8:	4b1b      	ldr	r3, [pc, #108]	; (800ff68 <writeToSD+0x38c>)
 800fefa:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fefe:	1c4b      	adds	r3, r1, #1
 800ff00:	f142 0400 	adc.w	r4, r2, #0
 800ff04:	4a18      	ldr	r2, [pc, #96]	; (800ff68 <writeToSD+0x38c>)
 800ff06:	e9c2 3400 	strd	r3, r4, [r2]
		largeMemory[memoryPointer] = 13;
 800ff0a:	4b17      	ldr	r3, [pc, #92]	; (800ff68 <writeToSD+0x38c>)
 800ff0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ff10:	4a16      	ldr	r2, [pc, #88]	; (800ff6c <writeToSD+0x390>)
 800ff12:	4413      	add	r3, r2
 800ff14:	220d      	movs	r2, #13
 800ff16:	701a      	strb	r2, [r3, #0]
		memoryPointer++;
 800ff18:	4b13      	ldr	r3, [pc, #76]	; (800ff68 <writeToSD+0x38c>)
 800ff1a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800ff1e:	1c4b      	adds	r3, r1, #1
 800ff20:	f142 0400 	adc.w	r4, r2, #0
 800ff24:	4a10      	ldr	r2, [pc, #64]	; (800ff68 <writeToSD+0x38c>)
 800ff26:	e9c2 3400 	strd	r3, r4, [r2]
		largeMemory[memoryPointer] = 10;
 800ff2a:	4b0f      	ldr	r3, [pc, #60]	; (800ff68 <writeToSD+0x38c>)
 800ff2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ff30:	4a0e      	ldr	r2, [pc, #56]	; (800ff6c <writeToSD+0x390>)
 800ff32:	4413      	add	r3, r2
 800ff34:	220a      	movs	r2, #10
 800ff36:	701a      	strb	r2, [r3, #0]
		memoryPointer++;
 800ff38:	4b0b      	ldr	r3, [pc, #44]	; (800ff68 <writeToSD+0x38c>)
 800ff3a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800ff3e:	1c4b      	adds	r3, r1, #1
 800ff40:	f142 0400 	adc.w	r4, r2, #0
 800ff44:	4a08      	ldr	r2, [pc, #32]	; (800ff68 <writeToSD+0x38c>)
 800ff46:	e9c2 3400 	strd	r3, r4, [r2]
		SDWriteIndex++;
 800ff4a:	4b09      	ldr	r3, [pc, #36]	; (800ff70 <writeToSD+0x394>)
 800ff4c:	e9d3 1200 	ldrd	r1, r2, [r3]
 800ff50:	1c4b      	adds	r3, r1, #1
 800ff52:	f142 0400 	adc.w	r4, r2, #0
 800ff56:	4a06      	ldr	r2, [pc, #24]	; (800ff70 <writeToSD+0x394>)
 800ff58:	e9c2 3400 	strd	r3, r4, [r2]
}
 800ff5c:	bf00      	nop
 800ff5e:	3734      	adds	r7, #52	; 0x34
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd90      	pop	{r4, r7, pc}
 800ff64:	2000cc7c 	.word	0x2000cc7c
 800ff68:	20000280 	.word	0x20000280
 800ff6c:	60000000 	.word	0x60000000
 800ff70:	20000270 	.word	0x20000270

0800ff74 <MPU_Conf>:
void MPU_Conf(void)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b084      	sub	sp, #16
 800ff78:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 800ff7a:	f7f1 ff8f 	bl	8001e9c <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ff7e:	2301      	movs	r3, #1
 800ff80:	703b      	strb	r3, [r7, #0]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800ff82:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800ff86:	607b      	str	r3, [r7, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800ff88:	2311      	movs	r3, #17
 800ff8a:	723b      	strb	r3, [r7, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800ff8c:	2303      	movs	r3, #3
 800ff8e:	72fb      	strb	r3, [r7, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800ff90:	2301      	movs	r3, #1
 800ff92:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800ff94:	2300      	movs	r3, #0
 800ff96:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	707b      	strb	r3, [r7, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	727b      	strb	r3, [r7, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	733b      	strb	r3, [r7, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ffac:	463b      	mov	r3, r7
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7f1 ffa8 	bl	8001f04 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	703b      	strb	r3, [r7, #0]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 800ffb8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800ffbc:	607b      	str	r3, [r7, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800ffbe:	230f      	movs	r3, #15
 800ffc0:	723b      	strb	r3, [r7, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800ffc2:	2303      	movs	r3, #3
 800ffc4:	72fb      	strb	r3, [r7, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	72bb      	strb	r3, [r7, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	73bb      	strb	r3, [r7, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800ffce:	2301      	movs	r3, #1
 800ffd0:	73fb      	strb	r3, [r7, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	737b      	strb	r3, [r7, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	707b      	strb	r3, [r7, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	727b      	strb	r3, [r7, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	733b      	strb	r3, [r7, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ffe2:	463b      	mov	r3, r7
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7f1 ff8d 	bl	8001f04 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800ffea:	2004      	movs	r0, #4
 800ffec:	f7f1 ff6c 	bl	8001ec8 <HAL_MPU_Enable>
}
 800fff0:	bf00      	nop
 800fff2:	3710      	adds	r7, #16
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <ADC_Frame>:

uint16_t stringPositions[10];

void ADC_Frame(int offset)
{
 800fff8:	b590      	push	{r4, r7, lr}
 800fffa:	b087      	sub	sp, #28
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);

	//sampRecords[currentSamp] = frameCount;
	//currentSamp++;
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	617b      	str	r3, [r7, #20]
 8010004:	e033      	b.n	801006e <ADC_Frame+0x76>
	{
		for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 8010006:	2300      	movs	r3, #0
 8010008:	613b      	str	r3, [r7, #16]
 801000a:	e02a      	b.n	8010062 <ADC_Frame+0x6a>
		{
			int tempInt = ADC_values[(i*NUM_ADC_CHANNELS) + j];
 801000c:	697a      	ldr	r2, [r7, #20]
 801000e:	4613      	mov	r3, r2
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	4413      	add	r3, r2
 8010014:	005b      	lsls	r3, r3, #1
 8010016:	461a      	mov	r2, r3
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	4413      	add	r3, r2
 801001c:	4a18      	ldr	r2, [pc, #96]	; (8010080 <ADC_Frame+0x88>)
 801001e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010022:	60fb      	str	r3, [r7, #12]
			//stringTouchRH[j] = (SPI_RX[8] >> (j + 4)) & 1;

			//tempSamp = tHighpass_tick(&opticalHighpass[j+NUM_STRINGS], tHighpass_tick(&opticalHighpass[j], tempSamp));
			//itoa(SDWriteIndex, wtext, 4);

			if (SDReady)
 8010024:	4b17      	ldr	r3, [pc, #92]	; (8010084 <ADC_Frame+0x8c>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d017      	beq.n	801005c <ADC_Frame+0x64>
			{
				writeToSD(SDWriteIndex, tempInt, j);
 801002c:	4b16      	ldr	r3, [pc, #88]	; (8010088 <ADC_Frame+0x90>)
 801002e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010032:	693a      	ldr	r2, [r7, #16]
 8010034:	68f9      	ldr	r1, [r7, #12]
 8010036:	4618      	mov	r0, r3
 8010038:	f7ff fdd0 	bl	800fbdc <writeToSD>

				if (memoryPointer >= (LARGE_MEM_SIZE - 3000))
 801003c:	4b13      	ldr	r3, [pc, #76]	; (801008c <ADC_Frame+0x94>)
 801003e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010042:	4913      	ldr	r1, [pc, #76]	; (8010090 <ADC_Frame+0x98>)
 8010044:	f04f 0200 	mov.w	r2, #0
 8010048:	42a2      	cmp	r2, r4
 801004a:	bf08      	it	eq
 801004c:	4299      	cmpeq	r1, r3
 801004e:	d205      	bcs.n	801005c <ADC_Frame+0x64>
				{
					finishSD = 1;
 8010050:	4b10      	ldr	r3, [pc, #64]	; (8010094 <ADC_Frame+0x9c>)
 8010052:	2201      	movs	r2, #1
 8010054:	601a      	str	r2, [r3, #0]
					HAL_ADC_Stop(&hadc1);
 8010056:	4810      	ldr	r0, [pc, #64]	; (8010098 <ADC_Frame+0xa0>)
 8010058:	f7f0 fdde 	bl	8000c18 <HAL_ADC_Stop>
		for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	3301      	adds	r3, #1
 8010060:	613b      	str	r3, [r7, #16]
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	2b09      	cmp	r3, #9
 8010066:	ddd1      	ble.n	801000c <ADC_Frame+0x14>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	3301      	adds	r3, #1
 801006c:	617b      	str	r3, [r7, #20]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	3380      	adds	r3, #128	; 0x80
 8010072:	697a      	ldr	r2, [r7, #20]
 8010074:	429a      	cmp	r2, r3
 8010076:	dbc6      	blt.n	8010006 <ADC_Frame+0xe>
	//{
	//	waitTimeOver = 1;
	//}
	//ADC_Ready = 1;

}
 8010078:	bf00      	nop
 801007a:	371c      	adds	r7, #28
 801007c:	46bd      	mov	sp, r7
 801007e:	bd90      	pop	{r4, r7, pc}
 8010080:	30001040 	.word	0x30001040
 8010084:	2000026c 	.word	0x2000026c
 8010088:	20000270 	.word	0x20000270
 801008c:	20000280 	.word	0x20000280
 8010090:	01fff447 	.word	0x01fff447
 8010094:	20000278 	.word	0x20000278
 8010098:	20000290 	.word	0x20000290

0801009c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]


	ADC_Frame(ADC_FRAME_SIZE);
 80100a4:	2080      	movs	r0, #128	; 0x80
 80100a6:	f7ff ffa7 	bl	800fff8 <ADC_Frame>


}
 80100aa:	bf00      	nop
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80100b2:	b580      	push	{r7, lr}
 80100b4:	b082      	sub	sp, #8
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
	ADC_Frame(0);
 80100ba:	2000      	movs	r0, #0
 80100bc:	f7ff ff9c 	bl	800fff8 <ADC_Frame>
}
 80100c0:	bf00      	nop
 80100c2:	3708      	adds	r7, #8
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80100c8:	b480      	push	{r7}
 80100ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80100cc:	bf00      	nop
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr
	...

080100d8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 80100dc:	4b07      	ldr	r3, [pc, #28]	; (80100fc <MX_RNG_Init+0x24>)
 80100de:	4a08      	ldr	r2, [pc, #32]	; (8010100 <MX_RNG_Init+0x28>)
 80100e0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80100e2:	4b06      	ldr	r3, [pc, #24]	; (80100fc <MX_RNG_Init+0x24>)
 80100e4:	2200      	movs	r2, #0
 80100e6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80100e8:	4804      	ldr	r0, [pc, #16]	; (80100fc <MX_RNG_Init+0x24>)
 80100ea:	f7f7 fb9f 	bl	800782c <HAL_RNG_Init>
 80100ee:	4603      	mov	r3, r0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d001      	beq.n	80100f8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80100f4:	f7ff ffe8 	bl	80100c8 <Error_Handler>
  }

}
 80100f8:	bf00      	nop
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	2000d338 	.word	0x2000d338
 8010100:	48021800 	.word	0x48021800

08010104 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8010104:	b480      	push	{r7}
 8010106:	b085      	sub	sp, #20
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	4a0b      	ldr	r2, [pc, #44]	; (8010140 <HAL_RNG_MspInit+0x3c>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d10e      	bne.n	8010134 <HAL_RNG_MspInit+0x30>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8010116:	4b0b      	ldr	r3, [pc, #44]	; (8010144 <HAL_RNG_MspInit+0x40>)
 8010118:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801011c:	4a09      	ldr	r2, [pc, #36]	; (8010144 <HAL_RNG_MspInit+0x40>)
 801011e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010122:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8010126:	4b07      	ldr	r3, [pc, #28]	; (8010144 <HAL_RNG_MspInit+0x40>)
 8010128:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801012c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010130:	60fb      	str	r3, [r7, #12]
 8010132:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8010134:	bf00      	nop
 8010136:	3714      	adds	r7, #20
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr
 8010140:	48021800 	.word	0x48021800
 8010144:	58024400 	.word	0x58024400

08010148 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 801014c:	4b2a      	ldr	r3, [pc, #168]	; (80101f8 <MX_SAI1_Init+0xb0>)
 801014e:	4a2b      	ldr	r2, [pc, #172]	; (80101fc <MX_SAI1_Init+0xb4>)
 8010150:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8010152:	4b29      	ldr	r3, [pc, #164]	; (80101f8 <MX_SAI1_Init+0xb0>)
 8010154:	2200      	movs	r2, #0
 8010156:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8010158:	4b27      	ldr	r3, [pc, #156]	; (80101f8 <MX_SAI1_Init+0xb0>)
 801015a:	2200      	movs	r2, #0
 801015c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 801015e:	4b26      	ldr	r3, [pc, #152]	; (80101f8 <MX_SAI1_Init+0xb0>)
 8010160:	2200      	movs	r2, #0
 8010162:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8010164:	4b24      	ldr	r3, [pc, #144]	; (80101f8 <MX_SAI1_Init+0xb0>)
 8010166:	2200      	movs	r2, #0
 8010168:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 801016a:	4b23      	ldr	r3, [pc, #140]	; (80101f8 <MX_SAI1_Init+0xb0>)
 801016c:	2201      	movs	r2, #1
 801016e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8010170:	4b21      	ldr	r3, [pc, #132]	; (80101f8 <MX_SAI1_Init+0xb0>)
 8010172:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8010176:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8010178:	4b1f      	ldr	r3, [pc, #124]	; (80101f8 <MX_SAI1_Init+0xb0>)
 801017a:	2200      	movs	r2, #0
 801017c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 801017e:	4b1e      	ldr	r3, [pc, #120]	; (80101f8 <MX_SAI1_Init+0xb0>)
 8010180:	2200      	movs	r2, #0
 8010182:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8010184:	4b1c      	ldr	r3, [pc, #112]	; (80101f8 <MX_SAI1_Init+0xb0>)
 8010186:	2200      	movs	r2, #0
 8010188:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 801018a:	4b1b      	ldr	r3, [pc, #108]	; (80101f8 <MX_SAI1_Init+0xb0>)
 801018c:	2200      	movs	r2, #0
 801018e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8010190:	2302      	movs	r3, #2
 8010192:	2202      	movs	r2, #2
 8010194:	2100      	movs	r1, #0
 8010196:	4818      	ldr	r0, [pc, #96]	; (80101f8 <MX_SAI1_Init+0xb0>)
 8010198:	f7f7 fbf2 	bl	8007980 <HAL_SAI_InitProtocol>
 801019c:	4603      	mov	r3, r0
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d001      	beq.n	80101a6 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80101a2:	f7ff ff91 	bl	80100c8 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80101a6:	4b16      	ldr	r3, [pc, #88]	; (8010200 <MX_SAI1_Init+0xb8>)
 80101a8:	4a16      	ldr	r2, [pc, #88]	; (8010204 <MX_SAI1_Init+0xbc>)
 80101aa:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80101ac:	4b14      	ldr	r3, [pc, #80]	; (8010200 <MX_SAI1_Init+0xb8>)
 80101ae:	2203      	movs	r2, #3
 80101b0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80101b2:	4b13      	ldr	r3, [pc, #76]	; (8010200 <MX_SAI1_Init+0xb8>)
 80101b4:	2201      	movs	r2, #1
 80101b6:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80101b8:	4b11      	ldr	r3, [pc, #68]	; (8010200 <MX_SAI1_Init+0xb8>)
 80101ba:	2200      	movs	r2, #0
 80101bc:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80101be:	4b10      	ldr	r3, [pc, #64]	; (8010200 <MX_SAI1_Init+0xb8>)
 80101c0:	2201      	movs	r2, #1
 80101c2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80101c4:	4b0e      	ldr	r3, [pc, #56]	; (8010200 <MX_SAI1_Init+0xb8>)
 80101c6:	2200      	movs	r2, #0
 80101c8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80101ca:	4b0d      	ldr	r3, [pc, #52]	; (8010200 <MX_SAI1_Init+0xb8>)
 80101cc:	2200      	movs	r2, #0
 80101ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80101d0:	4b0b      	ldr	r3, [pc, #44]	; (8010200 <MX_SAI1_Init+0xb8>)
 80101d2:	2200      	movs	r2, #0
 80101d4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80101d6:	4b0a      	ldr	r3, [pc, #40]	; (8010200 <MX_SAI1_Init+0xb8>)
 80101d8:	2200      	movs	r2, #0
 80101da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80101dc:	2302      	movs	r3, #2
 80101de:	2202      	movs	r2, #2
 80101e0:	2100      	movs	r1, #0
 80101e2:	4807      	ldr	r0, [pc, #28]	; (8010200 <MX_SAI1_Init+0xb8>)
 80101e4:	f7f7 fbcc 	bl	8007980 <HAL_SAI_InitProtocol>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d001      	beq.n	80101f2 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 80101ee:	f7ff ff6b 	bl	80100c8 <Error_Handler>
  }

}
 80101f2:	bf00      	nop
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop
 80101f8:	2000d4d4 	.word	0x2000d4d4
 80101fc:	40015804 	.word	0x40015804
 8010200:	2000d34c 	.word	0x2000d34c
 8010204:	40015824 	.word	0x40015824

08010208 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b08a      	sub	sp, #40	; 0x28
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	4a6f      	ldr	r2, [pc, #444]	; (80103d4 <HAL_SAI_MspInit+0x1cc>)
 8010216:	4293      	cmp	r3, r2
 8010218:	d169      	bne.n	80102ee <HAL_SAI_MspInit+0xe6>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 801021a:	4b6f      	ldr	r3, [pc, #444]	; (80103d8 <HAL_SAI_MspInit+0x1d0>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d10e      	bne.n	8010240 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8010222:	4b6e      	ldr	r3, [pc, #440]	; (80103dc <HAL_SAI_MspInit+0x1d4>)
 8010224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010228:	4a6c      	ldr	r2, [pc, #432]	; (80103dc <HAL_SAI_MspInit+0x1d4>)
 801022a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801022e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8010232:	4b6a      	ldr	r3, [pc, #424]	; (80103dc <HAL_SAI_MspInit+0x1d4>)
 8010234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801023c:	613b      	str	r3, [r7, #16]
 801023e:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8010240:	4b65      	ldr	r3, [pc, #404]	; (80103d8 <HAL_SAI_MspInit+0x1d0>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	3301      	adds	r3, #1
 8010246:	4a64      	ldr	r2, [pc, #400]	; (80103d8 <HAL_SAI_MspInit+0x1d0>)
 8010248:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 801024a:	2374      	movs	r3, #116	; 0x74
 801024c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801024e:	2302      	movs	r3, #2
 8010250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010252:	2300      	movs	r3, #0
 8010254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010256:	2303      	movs	r3, #3
 8010258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 801025a:	2306      	movs	r3, #6
 801025c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801025e:	f107 0314 	add.w	r3, r7, #20
 8010262:	4619      	mov	r1, r3
 8010264:	485e      	ldr	r0, [pc, #376]	; (80103e0 <HAL_SAI_MspInit+0x1d8>)
 8010266:	f7f4 f9b9 	bl	80045dc <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai1_a.Instance = DMA1_Stream1;
 801026a:	4b5e      	ldr	r3, [pc, #376]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 801026c:	4a5e      	ldr	r2, [pc, #376]	; (80103e8 <HAL_SAI_MspInit+0x1e0>)
 801026e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8010270:	4b5c      	ldr	r3, [pc, #368]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 8010272:	2257      	movs	r2, #87	; 0x57
 8010274:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010276:	4b5b      	ldr	r3, [pc, #364]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 8010278:	2240      	movs	r2, #64	; 0x40
 801027a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 801027c:	4b59      	ldr	r3, [pc, #356]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 801027e:	2200      	movs	r2, #0
 8010280:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8010282:	4b58      	ldr	r3, [pc, #352]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 8010284:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010288:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801028a:	4b56      	ldr	r3, [pc, #344]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 801028c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010290:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8010292:	4b54      	ldr	r3, [pc, #336]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 8010294:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010298:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 801029a:	4b52      	ldr	r3, [pc, #328]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 801029c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80102a0:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80102a2:	4b50      	ldr	r3, [pc, #320]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 80102a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80102a8:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80102aa:	4b4e      	ldr	r3, [pc, #312]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 80102ac:	2204      	movs	r2, #4
 80102ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80102b0:	4b4c      	ldr	r3, [pc, #304]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80102b6:	4b4b      	ldr	r3, [pc, #300]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 80102b8:	2200      	movs	r2, #0
 80102ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80102bc:	4b49      	ldr	r3, [pc, #292]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 80102be:	2200      	movs	r2, #0
 80102c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80102c2:	4848      	ldr	r0, [pc, #288]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 80102c4:	f7f1 fe62 	bl	8001f8c <HAL_DMA_Init>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d001      	beq.n	80102d2 <HAL_SAI_MspInit+0xca>
    {
      Error_Handler();
 80102ce:	f7ff fefb 	bl	80100c8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	4a43      	ldr	r2, [pc, #268]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 80102d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80102da:	4a42      	ldr	r2, [pc, #264]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	4a40      	ldr	r2, [pc, #256]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 80102e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80102e8:	4a3e      	ldr	r2, [pc, #248]	; (80103e4 <HAL_SAI_MspInit+0x1dc>)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(hsai->Instance==SAI1_Block_B)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	4a3e      	ldr	r2, [pc, #248]	; (80103ec <HAL_SAI_MspInit+0x1e4>)
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d169      	bne.n	80103cc <HAL_SAI_MspInit+0x1c4>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80102f8:	4b37      	ldr	r3, [pc, #220]	; (80103d8 <HAL_SAI_MspInit+0x1d0>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d10e      	bne.n	801031e <HAL_SAI_MspInit+0x116>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8010300:	4b36      	ldr	r3, [pc, #216]	; (80103dc <HAL_SAI_MspInit+0x1d4>)
 8010302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010306:	4a35      	ldr	r2, [pc, #212]	; (80103dc <HAL_SAI_MspInit+0x1d4>)
 8010308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801030c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8010310:	4b32      	ldr	r3, [pc, #200]	; (80103dc <HAL_SAI_MspInit+0x1d4>)
 8010312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801031a:	60fb      	str	r3, [r7, #12]
 801031c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 801031e:	4b2e      	ldr	r3, [pc, #184]	; (80103d8 <HAL_SAI_MspInit+0x1d0>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	3301      	adds	r3, #1
 8010324:	4a2c      	ldr	r2, [pc, #176]	; (80103d8 <HAL_SAI_MspInit+0x1d0>)
 8010326:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8010328:	2308      	movs	r3, #8
 801032a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801032c:	2302      	movs	r3, #2
 801032e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010330:	2300      	movs	r3, #0
 8010332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010334:	2303      	movs	r3, #3
 8010336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8010338:	2306      	movs	r3, #6
 801033a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801033c:	f107 0314 	add.w	r3, r7, #20
 8010340:	4619      	mov	r1, r3
 8010342:	4827      	ldr	r0, [pc, #156]	; (80103e0 <HAL_SAI_MspInit+0x1d8>)
 8010344:	f7f4 f94a 	bl	80045dc <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai1_b.Instance = DMA1_Stream2;
 8010348:	4b29      	ldr	r3, [pc, #164]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 801034a:	4a2a      	ldr	r2, [pc, #168]	; (80103f4 <HAL_SAI_MspInit+0x1ec>)
 801034c:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 801034e:	4b28      	ldr	r3, [pc, #160]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 8010350:	2258      	movs	r2, #88	; 0x58
 8010352:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010354:	4b26      	ldr	r3, [pc, #152]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 8010356:	2200      	movs	r2, #0
 8010358:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 801035a:	4b25      	ldr	r3, [pc, #148]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 801035c:	2200      	movs	r2, #0
 801035e:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8010360:	4b23      	ldr	r3, [pc, #140]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 8010362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010366:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8010368:	4b21      	ldr	r3, [pc, #132]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 801036a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801036e:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8010370:	4b1f      	ldr	r3, [pc, #124]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 8010372:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010376:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8010378:	4b1d      	ldr	r3, [pc, #116]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 801037a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801037e:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8010380:	4b1b      	ldr	r3, [pc, #108]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 8010382:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010386:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8010388:	4b19      	ldr	r3, [pc, #100]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 801038a:	2204      	movs	r2, #4
 801038c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 801038e:	4b18      	ldr	r3, [pc, #96]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 8010390:	2200      	movs	r2, #0
 8010392:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8010394:	4b16      	ldr	r3, [pc, #88]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 8010396:	2200      	movs	r2, #0
 8010398:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 801039a:	4b15      	ldr	r3, [pc, #84]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 801039c:	2200      	movs	r2, #0
 801039e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80103a0:	4813      	ldr	r0, [pc, #76]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 80103a2:	f7f1 fdf3 	bl	8001f8c <HAL_DMA_Init>
 80103a6:	4603      	mov	r3, r0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d001      	beq.n	80103b0 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 80103ac:	f7ff fe8c 	bl	80100c8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	4a0f      	ldr	r2, [pc, #60]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 80103b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80103b8:	4a0d      	ldr	r2, [pc, #52]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4a0b      	ldr	r2, [pc, #44]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 80103c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80103c6:	4a0a      	ldr	r2, [pc, #40]	; (80103f0 <HAL_SAI_MspInit+0x1e8>)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80103cc:	bf00      	nop
 80103ce:	3728      	adds	r7, #40	; 0x28
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	40015804 	.word	0x40015804
 80103d8:	20000288 	.word	0x20000288
 80103dc:	58024400 	.word	0x58024400
 80103e0:	58021000 	.word	0x58021000
 80103e4:	2000d3e4 	.word	0x2000d3e4
 80103e8:	40020028 	.word	0x40020028
 80103ec:	40015824 	.word	0x40015824
 80103f0:	2000d45c 	.word	0x2000d45c
 80103f4:	40020040 	.word	0x40020040

080103f8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	4603      	mov	r3, r0
 8010400:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010402:	4b0b      	ldr	r3, [pc, #44]	; (8010430 <SD_CheckStatus+0x38>)
 8010404:	2201      	movs	r2, #1
 8010406:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010408:	f7fe fda2 	bl	800ef50 <BSP_SD_GetCardState>
 801040c:	4603      	mov	r3, r0
 801040e:	2b00      	cmp	r3, #0
 8010410:	d107      	bne.n	8010422 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010412:	4b07      	ldr	r3, [pc, #28]	; (8010430 <SD_CheckStatus+0x38>)
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	b2db      	uxtb	r3, r3
 8010418:	f023 0301 	bic.w	r3, r3, #1
 801041c:	b2da      	uxtb	r2, r3
 801041e:	4b04      	ldr	r3, [pc, #16]	; (8010430 <SD_CheckStatus+0x38>)
 8010420:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010422:	4b03      	ldr	r3, [pc, #12]	; (8010430 <SD_CheckStatus+0x38>)
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	b2db      	uxtb	r3, r3
}
 8010428:	4618      	mov	r0, r3
 801042a:	3708      	adds	r7, #8
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	2000000d 	.word	0x2000000d

08010434 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	af00      	add	r7, sp, #0
 801043a:	4603      	mov	r3, r0
 801043c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 801043e:	4b0b      	ldr	r3, [pc, #44]	; (801046c <SD_initialize+0x38>)
 8010440:	2201      	movs	r2, #1
 8010442:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010444:	f7fe fd22 	bl	800ee8c <BSP_SD_Init>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d107      	bne.n	801045e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 801044e:	79fb      	ldrb	r3, [r7, #7]
 8010450:	4618      	mov	r0, r3
 8010452:	f7ff ffd1 	bl	80103f8 <SD_CheckStatus>
 8010456:	4603      	mov	r3, r0
 8010458:	461a      	mov	r2, r3
 801045a:	4b04      	ldr	r3, [pc, #16]	; (801046c <SD_initialize+0x38>)
 801045c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801045e:	4b03      	ldr	r3, [pc, #12]	; (801046c <SD_initialize+0x38>)
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	b2db      	uxtb	r3, r3
}
 8010464:	4618      	mov	r0, r3
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	2000000d 	.word	0x2000000d

08010470 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0
 8010476:	4603      	mov	r3, r0
 8010478:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801047a:	79fb      	ldrb	r3, [r7, #7]
 801047c:	4618      	mov	r0, r3
 801047e:	f7ff ffbb 	bl	80103f8 <SD_CheckStatus>
 8010482:	4603      	mov	r3, r0
}
 8010484:	4618      	mov	r0, r3
 8010486:	3708      	adds	r7, #8
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b086      	sub	sp, #24
 8010490:	af00      	add	r7, sp, #0
 8010492:	60b9      	str	r1, [r7, #8]
 8010494:	607a      	str	r2, [r7, #4]
 8010496:	603b      	str	r3, [r7, #0]
 8010498:	4603      	mov	r3, r0
 801049a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801049c:	2301      	movs	r3, #1
 801049e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80104a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104a4:	683a      	ldr	r2, [r7, #0]
 80104a6:	6879      	ldr	r1, [r7, #4]
 80104a8:	68b8      	ldr	r0, [r7, #8]
 80104aa:	f7fe fd15 	bl	800eed8 <BSP_SD_ReadBlocks>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d107      	bne.n	80104c4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80104b4:	bf00      	nop
 80104b6:	f7fe fd4b 	bl	800ef50 <BSP_SD_GetCardState>
 80104ba:	4603      	mov	r3, r0
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d1fa      	bne.n	80104b6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80104c0:	2300      	movs	r3, #0
 80104c2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80104c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3718      	adds	r7, #24
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b086      	sub	sp, #24
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	60b9      	str	r1, [r7, #8]
 80104d6:	607a      	str	r2, [r7, #4]
 80104d8:	603b      	str	r3, [r7, #0]
 80104da:	4603      	mov	r3, r0
 80104dc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80104de:	2301      	movs	r3, #1
 80104e0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80104e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104e6:	683a      	ldr	r2, [r7, #0]
 80104e8:	6879      	ldr	r1, [r7, #4]
 80104ea:	68b8      	ldr	r0, [r7, #8]
 80104ec:	f7fe fd12 	bl	800ef14 <BSP_SD_WriteBlocks>
 80104f0:	4603      	mov	r3, r0
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d107      	bne.n	8010506 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80104f6:	bf00      	nop
 80104f8:	f7fe fd2a 	bl	800ef50 <BSP_SD_GetCardState>
 80104fc:	4603      	mov	r3, r0
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d1fa      	bne.n	80104f8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8010502:	2300      	movs	r3, #0
 8010504:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010506:	7dfb      	ldrb	r3, [r7, #23]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3718      	adds	r7, #24
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b08c      	sub	sp, #48	; 0x30
 8010514:	af00      	add	r7, sp, #0
 8010516:	4603      	mov	r3, r0
 8010518:	603a      	str	r2, [r7, #0]
 801051a:	71fb      	strb	r3, [r7, #7]
 801051c:	460b      	mov	r3, r1
 801051e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010520:	2301      	movs	r3, #1
 8010522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010526:	4b25      	ldr	r3, [pc, #148]	; (80105bc <SD_ioctl+0xac>)
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	b2db      	uxtb	r3, r3
 801052c:	f003 0301 	and.w	r3, r3, #1
 8010530:	2b00      	cmp	r3, #0
 8010532:	d001      	beq.n	8010538 <SD_ioctl+0x28>
 8010534:	2303      	movs	r3, #3
 8010536:	e03c      	b.n	80105b2 <SD_ioctl+0xa2>

  switch (cmd)
 8010538:	79bb      	ldrb	r3, [r7, #6]
 801053a:	2b03      	cmp	r3, #3
 801053c:	d834      	bhi.n	80105a8 <SD_ioctl+0x98>
 801053e:	a201      	add	r2, pc, #4	; (adr r2, 8010544 <SD_ioctl+0x34>)
 8010540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010544:	08010555 	.word	0x08010555
 8010548:	0801055d 	.word	0x0801055d
 801054c:	08010575 	.word	0x08010575
 8010550:	0801058f 	.word	0x0801058f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010554:	2300      	movs	r3, #0
 8010556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801055a:	e028      	b.n	80105ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801055c:	f107 0308 	add.w	r3, r7, #8
 8010560:	4618      	mov	r0, r3
 8010562:	f7fe fd05 	bl	800ef70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010566:	6a3a      	ldr	r2, [r7, #32]
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801056c:	2300      	movs	r3, #0
 801056e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010572:	e01c      	b.n	80105ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010574:	f107 0308 	add.w	r3, r7, #8
 8010578:	4618      	mov	r0, r3
 801057a:	f7fe fcf9 	bl	800ef70 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801057e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010580:	b29a      	uxth	r2, r3
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010586:	2300      	movs	r3, #0
 8010588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801058c:	e00f      	b.n	80105ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801058e:	f107 0308 	add.w	r3, r7, #8
 8010592:	4618      	mov	r0, r3
 8010594:	f7fe fcec 	bl	800ef70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059a:	0a5a      	lsrs	r2, r3, #9
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80105a0:	2300      	movs	r3, #0
 80105a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80105a6:	e002      	b.n	80105ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80105a8:	2304      	movs	r3, #4
 80105aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80105ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3730      	adds	r7, #48	; 0x30
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	2000000d 	.word	0x2000000d

080105c0 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80105c0:	b480      	push	{r7}
 80105c2:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 80105c4:	4b0d      	ldr	r3, [pc, #52]	; (80105fc <MX_SDMMC1_SD_Init+0x3c>)
 80105c6:	4a0e      	ldr	r2, [pc, #56]	; (8010600 <MX_SDMMC1_SD_Init+0x40>)
 80105c8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80105ca:	4b0c      	ldr	r3, [pc, #48]	; (80105fc <MX_SDMMC1_SD_Init+0x3c>)
 80105cc:	2200      	movs	r2, #0
 80105ce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80105d0:	4b0a      	ldr	r3, [pc, #40]	; (80105fc <MX_SDMMC1_SD_Init+0x3c>)
 80105d2:	2200      	movs	r2, #0
 80105d4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80105d6:	4b09      	ldr	r3, [pc, #36]	; (80105fc <MX_SDMMC1_SD_Init+0x3c>)
 80105d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80105dc:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80105de:	4b07      	ldr	r3, [pc, #28]	; (80105fc <MX_SDMMC1_SD_Init+0x3c>)
 80105e0:	2200      	movs	r2, #0
 80105e2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 16;
 80105e4:	4b05      	ldr	r3, [pc, #20]	; (80105fc <MX_SDMMC1_SD_Init+0x3c>)
 80105e6:	2210      	movs	r2, #16
 80105e8:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80105ea:	4b04      	ldr	r3, [pc, #16]	; (80105fc <MX_SDMMC1_SD_Init+0x3c>)
 80105ec:	2201      	movs	r2, #1
 80105ee:	619a      	str	r2, [r3, #24]

}
 80105f0:	bf00      	nop
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr
 80105fa:	bf00      	nop
 80105fc:	2000d56c 	.word	0x2000d56c
 8010600:	52007000 	.word	0x52007000

08010604 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b08a      	sub	sp, #40	; 0x28
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801060c:	f107 0314 	add.w	r3, r7, #20
 8010610:	2200      	movs	r2, #0
 8010612:	601a      	str	r2, [r3, #0]
 8010614:	605a      	str	r2, [r3, #4]
 8010616:	609a      	str	r2, [r3, #8]
 8010618:	60da      	str	r2, [r3, #12]
 801061a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	4a2e      	ldr	r2, [pc, #184]	; (80106dc <HAL_SD_MspInit+0xd8>)
 8010622:	4293      	cmp	r3, r2
 8010624:	d155      	bne.n	80106d2 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8010626:	4b2e      	ldr	r3, [pc, #184]	; (80106e0 <HAL_SD_MspInit+0xdc>)
 8010628:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801062c:	4a2c      	ldr	r2, [pc, #176]	; (80106e0 <HAL_SD_MspInit+0xdc>)
 801062e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010632:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8010636:	4b2a      	ldr	r3, [pc, #168]	; (80106e0 <HAL_SD_MspInit+0xdc>)
 8010638:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801063c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010640:	613b      	str	r3, [r7, #16]
 8010642:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010644:	4b26      	ldr	r3, [pc, #152]	; (80106e0 <HAL_SD_MspInit+0xdc>)
 8010646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801064a:	4a25      	ldr	r2, [pc, #148]	; (80106e0 <HAL_SD_MspInit+0xdc>)
 801064c:	f043 0304 	orr.w	r3, r3, #4
 8010650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010654:	4b22      	ldr	r3, [pc, #136]	; (80106e0 <HAL_SD_MspInit+0xdc>)
 8010656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801065a:	f003 0304 	and.w	r3, r3, #4
 801065e:	60fb      	str	r3, [r7, #12]
 8010660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010662:	4b1f      	ldr	r3, [pc, #124]	; (80106e0 <HAL_SD_MspInit+0xdc>)
 8010664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010668:	4a1d      	ldr	r2, [pc, #116]	; (80106e0 <HAL_SD_MspInit+0xdc>)
 801066a:	f043 0308 	orr.w	r3, r3, #8
 801066e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010672:	4b1b      	ldr	r3, [pc, #108]	; (80106e0 <HAL_SD_MspInit+0xdc>)
 8010674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010678:	f003 0308 	and.w	r3, r3, #8
 801067c:	60bb      	str	r3, [r7, #8]
 801067e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8010680:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8010684:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010686:	2302      	movs	r3, #2
 8010688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801068a:	2301      	movs	r3, #1
 801068c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801068e:	2301      	movs	r3, #1
 8010690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8010692:	230c      	movs	r3, #12
 8010694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010696:	f107 0314 	add.w	r3, r7, #20
 801069a:	4619      	mov	r1, r3
 801069c:	4811      	ldr	r0, [pc, #68]	; (80106e4 <HAL_SD_MspInit+0xe0>)
 801069e:	f7f3 ff9d 	bl	80045dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80106a2:	2304      	movs	r3, #4
 80106a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106a6:	2302      	movs	r3, #2
 80106a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80106aa:	2301      	movs	r3, #1
 80106ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80106ae:	2301      	movs	r3, #1
 80106b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80106b2:	230c      	movs	r3, #12
 80106b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80106b6:	f107 0314 	add.w	r3, r7, #20
 80106ba:	4619      	mov	r1, r3
 80106bc:	480a      	ldr	r0, [pc, #40]	; (80106e8 <HAL_SD_MspInit+0xe4>)
 80106be:	f7f3 ff8d 	bl	80045dc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 80106c2:	2200      	movs	r2, #0
 80106c4:	2107      	movs	r1, #7
 80106c6:	2031      	movs	r0, #49	; 0x31
 80106c8:	f7f1 fbb3 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80106cc:	2031      	movs	r0, #49	; 0x31
 80106ce:	f7f1 fbca 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80106d2:	bf00      	nop
 80106d4:	3728      	adds	r7, #40	; 0x28
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	52007000 	.word	0x52007000
 80106e0:	58024400 	.word	0x58024400
 80106e4:	58020800 	.word	0x58020800
 80106e8:	58020c00 	.word	0x58020c00

080106ec <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80106f0:	4b28      	ldr	r3, [pc, #160]	; (8010794 <MX_SPI1_Init+0xa8>)
 80106f2:	4a29      	ldr	r2, [pc, #164]	; (8010798 <MX_SPI1_Init+0xac>)
 80106f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80106f6:	4b27      	ldr	r3, [pc, #156]	; (8010794 <MX_SPI1_Init+0xa8>)
 80106f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80106fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80106fe:	4b25      	ldr	r3, [pc, #148]	; (8010794 <MX_SPI1_Init+0xa8>)
 8010700:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8010704:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8010706:	4b23      	ldr	r3, [pc, #140]	; (8010794 <MX_SPI1_Init+0xa8>)
 8010708:	2207      	movs	r2, #7
 801070a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801070c:	4b21      	ldr	r3, [pc, #132]	; (8010794 <MX_SPI1_Init+0xa8>)
 801070e:	2200      	movs	r2, #0
 8010710:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010712:	4b20      	ldr	r3, [pc, #128]	; (8010794 <MX_SPI1_Init+0xa8>)
 8010714:	2200      	movs	r2, #0
 8010716:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8010718:	4b1e      	ldr	r3, [pc, #120]	; (8010794 <MX_SPI1_Init+0xa8>)
 801071a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 801071e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8010720:	4b1c      	ldr	r3, [pc, #112]	; (8010794 <MX_SPI1_Init+0xa8>)
 8010722:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010728:	4b1a      	ldr	r3, [pc, #104]	; (8010794 <MX_SPI1_Init+0xa8>)
 801072a:	2200      	movs	r2, #0
 801072c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801072e:	4b19      	ldr	r3, [pc, #100]	; (8010794 <MX_SPI1_Init+0xa8>)
 8010730:	2200      	movs	r2, #0
 8010732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010734:	4b17      	ldr	r3, [pc, #92]	; (8010794 <MX_SPI1_Init+0xa8>)
 8010736:	2200      	movs	r2, #0
 8010738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 801073a:	4b16      	ldr	r3, [pc, #88]	; (8010794 <MX_SPI1_Init+0xa8>)
 801073c:	2200      	movs	r2, #0
 801073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8010740:	4b14      	ldr	r3, [pc, #80]	; (8010794 <MX_SPI1_Init+0xa8>)
 8010742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010746:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8010748:	4b12      	ldr	r3, [pc, #72]	; (8010794 <MX_SPI1_Init+0xa8>)
 801074a:	2200      	movs	r2, #0
 801074c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 801074e:	4b11      	ldr	r3, [pc, #68]	; (8010794 <MX_SPI1_Init+0xa8>)
 8010750:	2200      	movs	r2, #0
 8010752:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8010754:	4b0f      	ldr	r3, [pc, #60]	; (8010794 <MX_SPI1_Init+0xa8>)
 8010756:	2200      	movs	r2, #0
 8010758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 801075a:	4b0e      	ldr	r3, [pc, #56]	; (8010794 <MX_SPI1_Init+0xa8>)
 801075c:	2200      	movs	r2, #0
 801075e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8010760:	4b0c      	ldr	r3, [pc, #48]	; (8010794 <MX_SPI1_Init+0xa8>)
 8010762:	2200      	movs	r2, #0
 8010764:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8010766:	4b0b      	ldr	r3, [pc, #44]	; (8010794 <MX_SPI1_Init+0xa8>)
 8010768:	2200      	movs	r2, #0
 801076a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 801076c:	4b09      	ldr	r3, [pc, #36]	; (8010794 <MX_SPI1_Init+0xa8>)
 801076e:	2200      	movs	r2, #0
 8010770:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8010772:	4b08      	ldr	r3, [pc, #32]	; (8010794 <MX_SPI1_Init+0xa8>)
 8010774:	2200      	movs	r2, #0
 8010776:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8010778:	4b06      	ldr	r3, [pc, #24]	; (8010794 <MX_SPI1_Init+0xa8>)
 801077a:	2200      	movs	r2, #0
 801077c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801077e:	4805      	ldr	r0, [pc, #20]	; (8010794 <MX_SPI1_Init+0xa8>)
 8010780:	f7f9 fe4c 	bl	800a41c <HAL_SPI_Init>
 8010784:	4603      	mov	r3, r0
 8010786:	2b00      	cmp	r3, #0
 8010788:	d001      	beq.n	801078e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 801078a:	f7ff fc9d 	bl	80100c8 <Error_Handler>
  }

}
 801078e:	bf00      	nop
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	2000d6ec 	.word	0x2000d6ec
 8010798:	40013000 	.word	0x40013000

0801079c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80107a0:	4b24      	ldr	r3, [pc, #144]	; (8010834 <MX_SPI2_Init+0x98>)
 80107a2:	4a25      	ldr	r2, [pc, #148]	; (8010838 <MX_SPI2_Init+0x9c>)
 80107a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80107a6:	4b23      	ldr	r3, [pc, #140]	; (8010834 <MX_SPI2_Init+0x98>)
 80107a8:	2200      	movs	r2, #0
 80107aa:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80107ac:	4b21      	ldr	r3, [pc, #132]	; (8010834 <MX_SPI2_Init+0x98>)
 80107ae:	2200      	movs	r2, #0
 80107b0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80107b2:	4b20      	ldr	r3, [pc, #128]	; (8010834 <MX_SPI2_Init+0x98>)
 80107b4:	2207      	movs	r2, #7
 80107b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80107b8:	4b1e      	ldr	r3, [pc, #120]	; (8010834 <MX_SPI2_Init+0x98>)
 80107ba:	2200      	movs	r2, #0
 80107bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80107be:	4b1d      	ldr	r3, [pc, #116]	; (8010834 <MX_SPI2_Init+0x98>)
 80107c0:	2200      	movs	r2, #0
 80107c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80107c4:	4b1b      	ldr	r3, [pc, #108]	; (8010834 <MX_SPI2_Init+0x98>)
 80107c6:	2200      	movs	r2, #0
 80107c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80107ca:	4b1a      	ldr	r3, [pc, #104]	; (8010834 <MX_SPI2_Init+0x98>)
 80107cc:	2200      	movs	r2, #0
 80107ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80107d0:	4b18      	ldr	r3, [pc, #96]	; (8010834 <MX_SPI2_Init+0x98>)
 80107d2:	2200      	movs	r2, #0
 80107d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80107d6:	4b17      	ldr	r3, [pc, #92]	; (8010834 <MX_SPI2_Init+0x98>)
 80107d8:	2200      	movs	r2, #0
 80107da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80107dc:	4b15      	ldr	r3, [pc, #84]	; (8010834 <MX_SPI2_Init+0x98>)
 80107de:	2200      	movs	r2, #0
 80107e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80107e2:	4b14      	ldr	r3, [pc, #80]	; (8010834 <MX_SPI2_Init+0x98>)
 80107e4:	2200      	movs	r2, #0
 80107e6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80107e8:	4b12      	ldr	r3, [pc, #72]	; (8010834 <MX_SPI2_Init+0x98>)
 80107ea:	2200      	movs	r2, #0
 80107ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80107ee:	4b11      	ldr	r3, [pc, #68]	; (8010834 <MX_SPI2_Init+0x98>)
 80107f0:	2200      	movs	r2, #0
 80107f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80107f4:	4b0f      	ldr	r3, [pc, #60]	; (8010834 <MX_SPI2_Init+0x98>)
 80107f6:	2200      	movs	r2, #0
 80107f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80107fa:	4b0e      	ldr	r3, [pc, #56]	; (8010834 <MX_SPI2_Init+0x98>)
 80107fc:	2200      	movs	r2, #0
 80107fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8010800:	4b0c      	ldr	r3, [pc, #48]	; (8010834 <MX_SPI2_Init+0x98>)
 8010802:	2200      	movs	r2, #0
 8010804:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8010806:	4b0b      	ldr	r3, [pc, #44]	; (8010834 <MX_SPI2_Init+0x98>)
 8010808:	2200      	movs	r2, #0
 801080a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 801080c:	4b09      	ldr	r3, [pc, #36]	; (8010834 <MX_SPI2_Init+0x98>)
 801080e:	2200      	movs	r2, #0
 8010810:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8010812:	4b08      	ldr	r3, [pc, #32]	; (8010834 <MX_SPI2_Init+0x98>)
 8010814:	2200      	movs	r2, #0
 8010816:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8010818:	4b06      	ldr	r3, [pc, #24]	; (8010834 <MX_SPI2_Init+0x98>)
 801081a:	2200      	movs	r2, #0
 801081c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801081e:	4805      	ldr	r0, [pc, #20]	; (8010834 <MX_SPI2_Init+0x98>)
 8010820:	f7f9 fdfc 	bl	800a41c <HAL_SPI_Init>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d001      	beq.n	801082e <MX_SPI2_Init+0x92>
  {
    Error_Handler();
 801082a:	f7ff fc4d 	bl	80100c8 <Error_Handler>
  }

}
 801082e:	bf00      	nop
 8010830:	bd80      	pop	{r7, pc}
 8010832:	bf00      	nop
 8010834:	2000d5ec 	.word	0x2000d5ec
 8010838:	40003800 	.word	0x40003800

0801083c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b08c      	sub	sp, #48	; 0x30
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010844:	f107 031c 	add.w	r3, r7, #28
 8010848:	2200      	movs	r2, #0
 801084a:	601a      	str	r2, [r3, #0]
 801084c:	605a      	str	r2, [r3, #4]
 801084e:	609a      	str	r2, [r3, #8]
 8010850:	60da      	str	r2, [r3, #12]
 8010852:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4aa9      	ldr	r2, [pc, #676]	; (8010b00 <HAL_SPI_MspInit+0x2c4>)
 801085a:	4293      	cmp	r3, r2
 801085c:	f040 809f 	bne.w	801099e <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8010860:	4ba8      	ldr	r3, [pc, #672]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 8010862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010866:	4aa7      	ldr	r2, [pc, #668]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 8010868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801086c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8010870:	4ba4      	ldr	r3, [pc, #656]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 8010872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801087a:	61bb      	str	r3, [r7, #24]
 801087c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801087e:	4ba1      	ldr	r3, [pc, #644]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 8010880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010884:	4a9f      	ldr	r2, [pc, #636]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 8010886:	f043 0308 	orr.w	r3, r3, #8
 801088a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801088e:	4b9d      	ldr	r3, [pc, #628]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 8010890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010894:	f003 0308 	and.w	r3, r3, #8
 8010898:	617b      	str	r3, [r7, #20]
 801089a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801089c:	4b99      	ldr	r3, [pc, #612]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 801089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80108a2:	4a98      	ldr	r2, [pc, #608]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 80108a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80108ac:	4b95      	ldr	r3, [pc, #596]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 80108ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80108b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108b6:	613b      	str	r3, [r7, #16]
 80108b8:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80108ba:	2380      	movs	r3, #128	; 0x80
 80108bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108be:	2302      	movs	r3, #2
 80108c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108c2:	2300      	movs	r3, #0
 80108c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80108c6:	2302      	movs	r3, #2
 80108c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80108ca:	2305      	movs	r3, #5
 80108cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80108ce:	f107 031c 	add.w	r3, r7, #28
 80108d2:	4619      	mov	r1, r3
 80108d4:	488c      	ldr	r0, [pc, #560]	; (8010b08 <HAL_SPI_MspInit+0x2cc>)
 80108d6:	f7f3 fe81 	bl	80045dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80108da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80108de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108e0:	2302      	movs	r3, #2
 80108e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108e4:	2300      	movs	r3, #0
 80108e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80108e8:	2300      	movs	r3, #0
 80108ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80108ec:	2305      	movs	r3, #5
 80108ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80108f0:	f107 031c 	add.w	r3, r7, #28
 80108f4:	4619      	mov	r1, r3
 80108f6:	4885      	ldr	r0, [pc, #532]	; (8010b0c <HAL_SPI_MspInit+0x2d0>)
 80108f8:	f7f3 fe70 	bl	80045dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80108fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010902:	2302      	movs	r3, #2
 8010904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010906:	2300      	movs	r3, #0
 8010908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801090a:	2302      	movs	r3, #2
 801090c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801090e:	2305      	movs	r3, #5
 8010910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010912:	f107 031c 	add.w	r3, r7, #28
 8010916:	4619      	mov	r1, r3
 8010918:	487c      	ldr	r0, [pc, #496]	; (8010b0c <HAL_SPI_MspInit+0x2d0>)
 801091a:	f7f3 fe5f 	bl	80045dc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 801091e:	4b7c      	ldr	r3, [pc, #496]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 8010920:	4a7c      	ldr	r2, [pc, #496]	; (8010b14 <HAL_SPI_MspInit+0x2d8>)
 8010922:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8010924:	4b7a      	ldr	r3, [pc, #488]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 8010926:	2226      	movs	r2, #38	; 0x26
 8010928:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801092a:	4b79      	ldr	r3, [pc, #484]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 801092c:	2240      	movs	r2, #64	; 0x40
 801092e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010930:	4b77      	ldr	r3, [pc, #476]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 8010932:	2200      	movs	r2, #0
 8010934:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8010936:	4b76      	ldr	r3, [pc, #472]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 8010938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801093c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801093e:	4b74      	ldr	r3, [pc, #464]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 8010940:	2200      	movs	r2, #0
 8010942:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010944:	4b72      	ldr	r3, [pc, #456]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 8010946:	2200      	movs	r2, #0
 8010948:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 801094a:	4b71      	ldr	r3, [pc, #452]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 801094c:	2200      	movs	r2, #0
 801094e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8010950:	4b6f      	ldr	r3, [pc, #444]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 8010952:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010956:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8010958:	4b6d      	ldr	r3, [pc, #436]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 801095a:	2204      	movs	r2, #4
 801095c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 801095e:	4b6c      	ldr	r3, [pc, #432]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 8010960:	2201      	movs	r2, #1
 8010962:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8010964:	4b6a      	ldr	r3, [pc, #424]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 8010966:	2200      	movs	r2, #0
 8010968:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 801096a:	4b69      	ldr	r3, [pc, #420]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 801096c:	2200      	movs	r2, #0
 801096e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8010970:	4867      	ldr	r0, [pc, #412]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 8010972:	f7f1 fb0b 	bl	8001f8c <HAL_DMA_Init>
 8010976:	4603      	mov	r3, r0
 8010978:	2b00      	cmp	r3, #0
 801097a:	d001      	beq.n	8010980 <HAL_SPI_MspInit+0x144>
    {
      Error_Handler();
 801097c:	f7ff fba4 	bl	80100c8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4a63      	ldr	r2, [pc, #396]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 8010984:	679a      	str	r2, [r3, #120]	; 0x78
 8010986:	4a62      	ldr	r2, [pc, #392]	; (8010b10 <HAL_SPI_MspInit+0x2d4>)
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 801098c:	2200      	movs	r2, #0
 801098e:	2100      	movs	r1, #0
 8010990:	2023      	movs	r0, #35	; 0x23
 8010992:	f7f1 fa4e 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8010996:	2023      	movs	r0, #35	; 0x23
 8010998:	f7f1 fa65 	bl	8001e66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 801099c:	e0ac      	b.n	8010af8 <HAL_SPI_MspInit+0x2bc>
  else if(spiHandle->Instance==SPI2)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	4a5d      	ldr	r2, [pc, #372]	; (8010b18 <HAL_SPI_MspInit+0x2dc>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	f040 80a7 	bne.w	8010af8 <HAL_SPI_MspInit+0x2bc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80109aa:	4b56      	ldr	r3, [pc, #344]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 80109ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80109b0:	4a54      	ldr	r2, [pc, #336]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 80109b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80109b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80109ba:	4b52      	ldr	r3, [pc, #328]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 80109bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80109c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80109c4:	60fb      	str	r3, [r7, #12]
 80109c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80109c8:	4b4e      	ldr	r3, [pc, #312]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 80109ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80109ce:	4a4d      	ldr	r2, [pc, #308]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 80109d0:	f043 0302 	orr.w	r3, r3, #2
 80109d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80109d8:	4b4a      	ldr	r3, [pc, #296]	; (8010b04 <HAL_SPI_MspInit+0x2c8>)
 80109da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80109de:	f003 0302 	and.w	r3, r3, #2
 80109e2:	60bb      	str	r3, [r7, #8]
 80109e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80109e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80109ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80109ec:	2302      	movs	r3, #2
 80109ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109f0:	2300      	movs	r3, #0
 80109f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80109f4:	2303      	movs	r3, #3
 80109f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80109f8:	2305      	movs	r3, #5
 80109fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80109fc:	f107 031c 	add.w	r3, r7, #28
 8010a00:	4619      	mov	r1, r3
 8010a02:	4846      	ldr	r0, [pc, #280]	; (8010b1c <HAL_SPI_MspInit+0x2e0>)
 8010a04:	f7f3 fdea 	bl	80045dc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8010a08:	4b45      	ldr	r3, [pc, #276]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a0a:	4a46      	ldr	r2, [pc, #280]	; (8010b24 <HAL_SPI_MspInit+0x2e8>)
 8010a0c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8010a0e:	4b44      	ldr	r3, [pc, #272]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a10:	2227      	movs	r2, #39	; 0x27
 8010a12:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010a14:	4b42      	ldr	r3, [pc, #264]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a16:	2200      	movs	r2, #0
 8010a18:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010a1a:	4b41      	ldr	r3, [pc, #260]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8010a20:	4b3f      	ldr	r3, [pc, #252]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010a26:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010a28:	4b3d      	ldr	r3, [pc, #244]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010a2e:	4b3c      	ldr	r3, [pc, #240]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a30:	2200      	movs	r2, #0
 8010a32:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8010a34:	4b3a      	ldr	r3, [pc, #232]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010a3a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8010a3c:	4b38      	ldr	r3, [pc, #224]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010a42:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8010a44:	4b36      	ldr	r3, [pc, #216]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a46:	2204      	movs	r2, #4
 8010a48:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8010a4a:	4b35      	ldr	r3, [pc, #212]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a4c:	2201      	movs	r2, #1
 8010a4e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8010a50:	4b33      	ldr	r3, [pc, #204]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a52:	2200      	movs	r2, #0
 8010a54:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8010a56:	4b32      	ldr	r3, [pc, #200]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a58:	2200      	movs	r2, #0
 8010a5a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8010a5c:	4830      	ldr	r0, [pc, #192]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a5e:	f7f1 fa95 	bl	8001f8c <HAL_DMA_Init>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d001      	beq.n	8010a6c <HAL_SPI_MspInit+0x230>
      Error_Handler();
 8010a68:	f7ff fb2e 	bl	80100c8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	4a2c      	ldr	r2, [pc, #176]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a70:	67da      	str	r2, [r3, #124]	; 0x7c
 8010a72:	4a2b      	ldr	r2, [pc, #172]	; (8010b20 <HAL_SPI_MspInit+0x2e4>)
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8010a78:	4b2b      	ldr	r3, [pc, #172]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010a7a:	4a2c      	ldr	r2, [pc, #176]	; (8010b2c <HAL_SPI_MspInit+0x2f0>)
 8010a7c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8010a7e:	4b2a      	ldr	r3, [pc, #168]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010a80:	2228      	movs	r2, #40	; 0x28
 8010a82:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010a84:	4b28      	ldr	r3, [pc, #160]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010a86:	2240      	movs	r2, #64	; 0x40
 8010a88:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010a8a:	4b27      	ldr	r3, [pc, #156]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8010a90:	4b25      	ldr	r3, [pc, #148]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010a96:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010a98:	4b23      	ldr	r3, [pc, #140]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010a9e:	4b22      	ldr	r3, [pc, #136]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8010aa4:	4b20      	ldr	r3, [pc, #128]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010aaa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8010aac:	4b1e      	ldr	r3, [pc, #120]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010aae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010ab2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8010ab4:	4b1c      	ldr	r3, [pc, #112]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010ab6:	2204      	movs	r2, #4
 8010ab8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8010aba:	4b1b      	ldr	r3, [pc, #108]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010abc:	2201      	movs	r2, #1
 8010abe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8010ac0:	4b19      	ldr	r3, [pc, #100]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8010ac6:	4b18      	ldr	r3, [pc, #96]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010ac8:	2200      	movs	r2, #0
 8010aca:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8010acc:	4816      	ldr	r0, [pc, #88]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010ace:	f7f1 fa5d 	bl	8001f8c <HAL_DMA_Init>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d001      	beq.n	8010adc <HAL_SPI_MspInit+0x2a0>
      Error_Handler();
 8010ad8:	f7ff faf6 	bl	80100c8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	4a12      	ldr	r2, [pc, #72]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010ae0:	679a      	str	r2, [r3, #120]	; 0x78
 8010ae2:	4a11      	ldr	r2, [pc, #68]	; (8010b28 <HAL_SPI_MspInit+0x2ec>)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8010ae8:	2200      	movs	r2, #0
 8010aea:	2100      	movs	r1, #0
 8010aec:	2024      	movs	r0, #36	; 0x24
 8010aee:	f7f1 f9a0 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8010af2:	2024      	movs	r0, #36	; 0x24
 8010af4:	f7f1 f9b7 	bl	8001e66 <HAL_NVIC_EnableIRQ>
}
 8010af8:	bf00      	nop
 8010afa:	3730      	adds	r7, #48	; 0x30
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	40013000 	.word	0x40013000
 8010b04:	58024400 	.word	0x58024400
 8010b08:	58020c00 	.word	0x58020c00
 8010b0c:	58021800 	.word	0x58021800
 8010b10:	2000d7ec 	.word	0x2000d7ec
 8010b14:	40020088 	.word	0x40020088
 8010b18:	40003800 	.word	0x40003800
 8010b1c:	58020400 	.word	0x58020400
 8010b20:	2000d674 	.word	0x2000d674
 8010b24:	40020058 	.word	0x40020058
 8010b28:	2000d774 	.word	0x2000d774
 8010b2c:	40020070 	.word	0x40020070

08010b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010b36:	4b0a      	ldr	r3, [pc, #40]	; (8010b60 <HAL_MspInit+0x30>)
 8010b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010b3c:	4a08      	ldr	r2, [pc, #32]	; (8010b60 <HAL_MspInit+0x30>)
 8010b3e:	f043 0302 	orr.w	r3, r3, #2
 8010b42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8010b46:	4b06      	ldr	r3, [pc, #24]	; (8010b60 <HAL_MspInit+0x30>)
 8010b48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010b4c:	f003 0302 	and.w	r3, r3, #2
 8010b50:	607b      	str	r3, [r7, #4]
 8010b52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010b54:	bf00      	nop
 8010b56:	370c      	adds	r7, #12
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5e:	4770      	bx	lr
 8010b60:	58024400 	.word	0x58024400

08010b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010b64:	b480      	push	{r7}
 8010b66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010b68:	bf00      	nop
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b70:	4770      	bx	lr

08010b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010b72:	b480      	push	{r7}
 8010b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010b76:	e7fe      	b.n	8010b76 <HardFault_Handler+0x4>

08010b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010b78:	b480      	push	{r7}
 8010b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010b7c:	e7fe      	b.n	8010b7c <MemManage_Handler+0x4>

08010b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010b7e:	b480      	push	{r7}
 8010b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010b82:	e7fe      	b.n	8010b82 <BusFault_Handler+0x4>

08010b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010b84:	b480      	push	{r7}
 8010b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010b88:	e7fe      	b.n	8010b88 <UsageFault_Handler+0x4>

08010b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010b8a:	b480      	push	{r7}
 8010b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010b8e:	bf00      	nop
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010b9c:	bf00      	nop
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba4:	4770      	bx	lr

08010ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010ba6:	b480      	push	{r7}
 8010ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010baa:	bf00      	nop
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010bb8:	f7ef fc00 	bl	80003bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010bbc:	bf00      	nop
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8010bc4:	4802      	ldr	r0, [pc, #8]	; (8010bd0 <DMA1_Stream0_IRQHandler+0x10>)
 8010bc6:	f7f2 f9eb 	bl	8002fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8010bca:	bf00      	nop
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	200002f4 	.word	0x200002f4

08010bd4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8010bd8:	4802      	ldr	r0, [pc, #8]	; (8010be4 <DMA1_Stream1_IRQHandler+0x10>)
 8010bda:	f7f2 f9e1 	bl	8002fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8010bde:	bf00      	nop
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	2000d3e4 	.word	0x2000d3e4

08010be8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8010bec:	4802      	ldr	r0, [pc, #8]	; (8010bf8 <DMA1_Stream2_IRQHandler+0x10>)
 8010bee:	f7f2 f9d7 	bl	8002fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8010bf2:	bf00      	nop
 8010bf4:	bd80      	pop	{r7, pc}
 8010bf6:	bf00      	nop
 8010bf8:	2000d45c 	.word	0x2000d45c

08010bfc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8010c00:	4802      	ldr	r0, [pc, #8]	; (8010c0c <DMA1_Stream3_IRQHandler+0x10>)
 8010c02:	f7f2 f9cd 	bl	8002fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8010c06:	bf00      	nop
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	2000d674 	.word	0x2000d674

08010c10 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8010c14:	4802      	ldr	r0, [pc, #8]	; (8010c20 <DMA1_Stream4_IRQHandler+0x10>)
 8010c16:	f7f2 f9c3 	bl	8002fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8010c1a:	bf00      	nop
 8010c1c:	bd80      	pop	{r7, pc}
 8010c1e:	bf00      	nop
 8010c20:	2000d774 	.word	0x2000d774

08010c24 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8010c28:	4802      	ldr	r0, [pc, #8]	; (8010c34 <DMA1_Stream5_IRQHandler+0x10>)
 8010c2a:	f7f2 f9b9 	bl	8002fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8010c2e:	bf00      	nop
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	2000d7ec 	.word	0x2000d7ec

08010c38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8010c3c:	4802      	ldr	r0, [pc, #8]	; (8010c48 <SPI1_IRQHandler+0x10>)
 8010c3e:	f7f9 feb3 	bl	800a9a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8010c42:	bf00      	nop
 8010c44:	bd80      	pop	{r7, pc}
 8010c46:	bf00      	nop
 8010c48:	2000d6ec 	.word	0x2000d6ec

08010c4c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8010c50:	4802      	ldr	r0, [pc, #8]	; (8010c5c <SPI2_IRQHandler+0x10>)
 8010c52:	f7f9 fea9 	bl	800a9a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8010c56:	bf00      	nop
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	2000d5ec 	.word	0x2000d5ec

08010c60 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8010c64:	4802      	ldr	r0, [pc, #8]	; (8010c70 <SDMMC1_IRQHandler+0x10>)
 8010c66:	f7f8 f947 	bl	8008ef8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8010c6a:	bf00      	nop
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	2000d56c 	.word	0x2000d56c

08010c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8010c74:	b480      	push	{r7}
 8010c76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8010c78:	4b29      	ldr	r3, [pc, #164]	; (8010d20 <SystemInit+0xac>)
 8010c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c7e:	4a28      	ldr	r2, [pc, #160]	; (8010d20 <SystemInit+0xac>)
 8010c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8010c88:	4b26      	ldr	r3, [pc, #152]	; (8010d24 <SystemInit+0xb0>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4a25      	ldr	r2, [pc, #148]	; (8010d24 <SystemInit+0xb0>)
 8010c8e:	f043 0301 	orr.w	r3, r3, #1
 8010c92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010c94:	4b23      	ldr	r3, [pc, #140]	; (8010d24 <SystemInit+0xb0>)
 8010c96:	2200      	movs	r2, #0
 8010c98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8010c9a:	4b22      	ldr	r3, [pc, #136]	; (8010d24 <SystemInit+0xb0>)
 8010c9c:	681a      	ldr	r2, [r3, #0]
 8010c9e:	4921      	ldr	r1, [pc, #132]	; (8010d24 <SystemInit+0xb0>)
 8010ca0:	4b21      	ldr	r3, [pc, #132]	; (8010d28 <SystemInit+0xb4>)
 8010ca2:	4013      	ands	r3, r2
 8010ca4:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8010ca6:	4b1f      	ldr	r3, [pc, #124]	; (8010d24 <SystemInit+0xb0>)
 8010ca8:	2200      	movs	r2, #0
 8010caa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8010cac:	4b1d      	ldr	r3, [pc, #116]	; (8010d24 <SystemInit+0xb0>)
 8010cae:	2200      	movs	r2, #0
 8010cb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8010cb2:	4b1c      	ldr	r3, [pc, #112]	; (8010d24 <SystemInit+0xb0>)
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8010cb8:	4b1a      	ldr	r3, [pc, #104]	; (8010d24 <SystemInit+0xb0>)
 8010cba:	2200      	movs	r2, #0
 8010cbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8010cbe:	4b19      	ldr	r3, [pc, #100]	; (8010d24 <SystemInit+0xb0>)
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8010cc4:	4b17      	ldr	r3, [pc, #92]	; (8010d24 <SystemInit+0xb0>)
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8010cca:	4b16      	ldr	r3, [pc, #88]	; (8010d24 <SystemInit+0xb0>)
 8010ccc:	2200      	movs	r2, #0
 8010cce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8010cd0:	4b14      	ldr	r3, [pc, #80]	; (8010d24 <SystemInit+0xb0>)
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8010cd6:	4b13      	ldr	r3, [pc, #76]	; (8010d24 <SystemInit+0xb0>)
 8010cd8:	2200      	movs	r2, #0
 8010cda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8010cdc:	4b11      	ldr	r3, [pc, #68]	; (8010d24 <SystemInit+0xb0>)
 8010cde:	2200      	movs	r2, #0
 8010ce0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8010ce2:	4b10      	ldr	r3, [pc, #64]	; (8010d24 <SystemInit+0xb0>)
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8010ce8:	4b0e      	ldr	r3, [pc, #56]	; (8010d24 <SystemInit+0xb0>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4a0d      	ldr	r2, [pc, #52]	; (8010d24 <SystemInit+0xb0>)
 8010cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010cf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8010cf4:	4b0b      	ldr	r3, [pc, #44]	; (8010d24 <SystemInit+0xb0>)
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8010cfa:	4b0c      	ldr	r3, [pc, #48]	; (8010d2c <SystemInit+0xb8>)
 8010cfc:	681a      	ldr	r2, [r3, #0]
 8010cfe:	4b0c      	ldr	r3, [pc, #48]	; (8010d30 <SystemInit+0xbc>)
 8010d00:	4013      	ands	r3, r2
 8010d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d06:	d202      	bcs.n	8010d0e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8010d08:	4b0a      	ldr	r3, [pc, #40]	; (8010d34 <SystemInit+0xc0>)
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010d0e:	4b04      	ldr	r3, [pc, #16]	; (8010d20 <SystemInit+0xac>)
 8010d10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010d14:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8010d16:	bf00      	nop
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr
 8010d20:	e000ed00 	.word	0xe000ed00
 8010d24:	58024400 	.word	0x58024400
 8010d28:	eaf6ed7f 	.word	0xeaf6ed7f
 8010d2c:	5c001000 	.word	0x5c001000
 8010d30:	ffff0000 	.word	0xffff0000
 8010d34:	51008108 	.word	0x51008108

08010d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8010d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010d70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010d3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010d3e:	e003      	b.n	8010d48 <LoopCopyDataInit>

08010d40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010d40:	4b0c      	ldr	r3, [pc, #48]	; (8010d74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010d42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010d44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010d46:	3104      	adds	r1, #4

08010d48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010d48:	480b      	ldr	r0, [pc, #44]	; (8010d78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010d4a:	4b0c      	ldr	r3, [pc, #48]	; (8010d7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010d4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010d4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010d50:	d3f6      	bcc.n	8010d40 <CopyDataInit>
  ldr  r2, =_sbss
 8010d52:	4a0b      	ldr	r2, [pc, #44]	; (8010d80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010d54:	e002      	b.n	8010d5c <LoopFillZerobss>

08010d56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010d56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010d58:	f842 3b04 	str.w	r3, [r2], #4

08010d5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010d5c:	4b09      	ldr	r3, [pc, #36]	; (8010d84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010d5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010d60:	d3f9      	bcc.n	8010d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010d62:	f7ff ff87 	bl	8010c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010d66:	f000 f811 	bl	8010d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010d6a:	f7fe fccb 	bl	800f704 <main>
  bx  lr    
 8010d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010d70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010d74:	080113b8 	.word	0x080113b8
  ldr  r0, =_sdata
 8010d78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010d7c:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8010d80:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8010d84:	2000d864 	.word	0x2000d864

08010d88 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010d88:	e7fe      	b.n	8010d88 <ADC3_IRQHandler>
	...

08010d8c <__libc_init_array>:
 8010d8c:	b570      	push	{r4, r5, r6, lr}
 8010d8e:	4e0d      	ldr	r6, [pc, #52]	; (8010dc4 <__libc_init_array+0x38>)
 8010d90:	4c0d      	ldr	r4, [pc, #52]	; (8010dc8 <__libc_init_array+0x3c>)
 8010d92:	1ba4      	subs	r4, r4, r6
 8010d94:	10a4      	asrs	r4, r4, #2
 8010d96:	2500      	movs	r5, #0
 8010d98:	42a5      	cmp	r5, r4
 8010d9a:	d109      	bne.n	8010db0 <__libc_init_array+0x24>
 8010d9c:	4e0b      	ldr	r6, [pc, #44]	; (8010dcc <__libc_init_array+0x40>)
 8010d9e:	4c0c      	ldr	r4, [pc, #48]	; (8010dd0 <__libc_init_array+0x44>)
 8010da0:	f000 f88c 	bl	8010ebc <_init>
 8010da4:	1ba4      	subs	r4, r4, r6
 8010da6:	10a4      	asrs	r4, r4, #2
 8010da8:	2500      	movs	r5, #0
 8010daa:	42a5      	cmp	r5, r4
 8010dac:	d105      	bne.n	8010dba <__libc_init_array+0x2e>
 8010dae:	bd70      	pop	{r4, r5, r6, pc}
 8010db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010db4:	4798      	blx	r3
 8010db6:	3501      	adds	r5, #1
 8010db8:	e7ee      	b.n	8010d98 <__libc_init_array+0xc>
 8010dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010dbe:	4798      	blx	r3
 8010dc0:	3501      	adds	r5, #1
 8010dc2:	e7f2      	b.n	8010daa <__libc_init_array+0x1e>
 8010dc4:	080113b0 	.word	0x080113b0
 8010dc8:	080113b0 	.word	0x080113b0
 8010dcc:	080113b0 	.word	0x080113b0
 8010dd0:	080113b4 	.word	0x080113b4

08010dd4 <__itoa>:
 8010dd4:	1e93      	subs	r3, r2, #2
 8010dd6:	2b22      	cmp	r3, #34	; 0x22
 8010dd8:	b510      	push	{r4, lr}
 8010dda:	460c      	mov	r4, r1
 8010ddc:	d904      	bls.n	8010de8 <__itoa+0x14>
 8010dde:	2300      	movs	r3, #0
 8010de0:	700b      	strb	r3, [r1, #0]
 8010de2:	461c      	mov	r4, r3
 8010de4:	4620      	mov	r0, r4
 8010de6:	bd10      	pop	{r4, pc}
 8010de8:	2a0a      	cmp	r2, #10
 8010dea:	d109      	bne.n	8010e00 <__itoa+0x2c>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	da07      	bge.n	8010e00 <__itoa+0x2c>
 8010df0:	232d      	movs	r3, #45	; 0x2d
 8010df2:	700b      	strb	r3, [r1, #0]
 8010df4:	4240      	negs	r0, r0
 8010df6:	2101      	movs	r1, #1
 8010df8:	4421      	add	r1, r4
 8010dfa:	f000 f821 	bl	8010e40 <__utoa>
 8010dfe:	e7f1      	b.n	8010de4 <__itoa+0x10>
 8010e00:	2100      	movs	r1, #0
 8010e02:	e7f9      	b.n	8010df8 <__itoa+0x24>

08010e04 <itoa>:
 8010e04:	f7ff bfe6 	b.w	8010dd4 <__itoa>

08010e08 <memset>:
 8010e08:	4402      	add	r2, r0
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d100      	bne.n	8010e12 <memset+0xa>
 8010e10:	4770      	bx	lr
 8010e12:	f803 1b01 	strb.w	r1, [r3], #1
 8010e16:	e7f9      	b.n	8010e0c <memset+0x4>

08010e18 <strncat>:
 8010e18:	b530      	push	{r4, r5, lr}
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	781c      	ldrb	r4, [r3, #0]
 8010e1e:	1c5d      	adds	r5, r3, #1
 8010e20:	b944      	cbnz	r4, 8010e34 <strncat+0x1c>
 8010e22:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8010e26:	d304      	bcc.n	8010e32 <strncat+0x1a>
 8010e28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e2c:	f803 4b01 	strb.w	r4, [r3], #1
 8010e30:	b914      	cbnz	r4, 8010e38 <strncat+0x20>
 8010e32:	bd30      	pop	{r4, r5, pc}
 8010e34:	462b      	mov	r3, r5
 8010e36:	e7f1      	b.n	8010e1c <strncat+0x4>
 8010e38:	2a00      	cmp	r2, #0
 8010e3a:	d1f2      	bne.n	8010e22 <strncat+0xa>
 8010e3c:	701a      	strb	r2, [r3, #0]
 8010e3e:	e7f0      	b.n	8010e22 <strncat+0xa>

08010e40 <__utoa>:
 8010e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e42:	4b1d      	ldr	r3, [pc, #116]	; (8010eb8 <__utoa+0x78>)
 8010e44:	b08b      	sub	sp, #44	; 0x2c
 8010e46:	4605      	mov	r5, r0
 8010e48:	460c      	mov	r4, r1
 8010e4a:	466e      	mov	r6, sp
 8010e4c:	f103 0c20 	add.w	ip, r3, #32
 8010e50:	6818      	ldr	r0, [r3, #0]
 8010e52:	6859      	ldr	r1, [r3, #4]
 8010e54:	4637      	mov	r7, r6
 8010e56:	c703      	stmia	r7!, {r0, r1}
 8010e58:	3308      	adds	r3, #8
 8010e5a:	4563      	cmp	r3, ip
 8010e5c:	463e      	mov	r6, r7
 8010e5e:	d1f7      	bne.n	8010e50 <__utoa+0x10>
 8010e60:	6818      	ldr	r0, [r3, #0]
 8010e62:	791b      	ldrb	r3, [r3, #4]
 8010e64:	713b      	strb	r3, [r7, #4]
 8010e66:	1e93      	subs	r3, r2, #2
 8010e68:	2b22      	cmp	r3, #34	; 0x22
 8010e6a:	6038      	str	r0, [r7, #0]
 8010e6c:	f04f 0300 	mov.w	r3, #0
 8010e70:	d904      	bls.n	8010e7c <__utoa+0x3c>
 8010e72:	7023      	strb	r3, [r4, #0]
 8010e74:	461c      	mov	r4, r3
 8010e76:	4620      	mov	r0, r4
 8010e78:	b00b      	add	sp, #44	; 0x2c
 8010e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e7c:	1e66      	subs	r6, r4, #1
 8010e7e:	fbb5 f0f2 	udiv	r0, r5, r2
 8010e82:	af0a      	add	r7, sp, #40	; 0x28
 8010e84:	fb02 5510 	mls	r5, r2, r0, r5
 8010e88:	443d      	add	r5, r7
 8010e8a:	1c59      	adds	r1, r3, #1
 8010e8c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8010e90:	f806 5f01 	strb.w	r5, [r6, #1]!
 8010e94:	4605      	mov	r5, r0
 8010e96:	b968      	cbnz	r0, 8010eb4 <__utoa+0x74>
 8010e98:	5460      	strb	r0, [r4, r1]
 8010e9a:	4423      	add	r3, r4
 8010e9c:	4622      	mov	r2, r4
 8010e9e:	1b19      	subs	r1, r3, r4
 8010ea0:	1b10      	subs	r0, r2, r4
 8010ea2:	4281      	cmp	r1, r0
 8010ea4:	dde7      	ble.n	8010e76 <__utoa+0x36>
 8010ea6:	7811      	ldrb	r1, [r2, #0]
 8010ea8:	7818      	ldrb	r0, [r3, #0]
 8010eaa:	f802 0b01 	strb.w	r0, [r2], #1
 8010eae:	f803 1901 	strb.w	r1, [r3], #-1
 8010eb2:	e7f4      	b.n	8010e9e <__utoa+0x5e>
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	e7e2      	b.n	8010e7e <__utoa+0x3e>
 8010eb8:	08011388 	.word	0x08011388

08010ebc <_init>:
 8010ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ebe:	bf00      	nop
 8010ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ec2:	bc08      	pop	{r3}
 8010ec4:	469e      	mov	lr, r3
 8010ec6:	4770      	bx	lr

08010ec8 <_fini>:
 8010ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eca:	bf00      	nop
 8010ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ece:	bc08      	pop	{r3}
 8010ed0:	469e      	mov	lr, r3
 8010ed2:	4770      	bx	lr

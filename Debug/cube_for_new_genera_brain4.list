
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c23c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  0800c4d8  0800c4d8  0001c4d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccdc  0800ccdc  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800ccdc  0800ccdc  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ccdc  0800ccdc  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccdc  0800ccdc  0001ccdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cce0  0800cce0  0001cce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800cce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019ac8  20000098  0800cd7c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20019b60  0800cd7c  00029b60  2**0
                  ALLOC
 11 .RAM_D1       000493e0  24000000  24000000  00030000  2**5
                  ALLOC
 12 .RAM_D2       00000140  30000000  30000000  00030000  2**5
                  ALLOC
 13 .RAM_D3       00000040  38000000  38000000  00030000  2**5
                  ALLOC
 14 .SDRAM        02000000  60000000  60000000  00030000  2**5
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 16 .debug_info   0005ac87  00000000  00000000  000200c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00008862  00000000  00000000  0007ad4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    000219eb  00000000  00000000  000835af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000023e0  00000000  00000000  000a4fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002878  00000000  00000000  000a7380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0003fe74  00000000  00000000  000a9bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0003e1fc  00000000  00000000  000e9a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0017b069  00000000  00000000  00127c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  002a2cd1  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000709c  00000000  00000000  002a2d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000098 	.word	0x20000098
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c4bc 	.word	0x0800c4bc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000009c 	.word	0x2000009c
 80002d4:	0800c4bc 	.word	0x0800c4bc

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <HAL_InitTick+0x44>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
{
 80002e2:	b510      	push	{r4, lr}
 80002e4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <HAL_InitTick+0x48>)
 80002f0:	6810      	ldr	r0, [r2, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 ff23 	bl	8001140 <HAL_SYSTICK_Config>
 80002fa:	b968      	cbnz	r0, 8000318 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fc:	2c0f      	cmp	r4, #15
 80002fe:	d901      	bls.n	8000304 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
 8000302:	e00a      	b.n	800031a <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 fed8 	bl	80010c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <HAL_InitTick+0x4c>)
 8000312:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000314:	2000      	movs	r0, #0
 8000316:	e000      	b.n	800031a <HAL_InitTick+0x42>
      return HAL_ERROR;
 8000318:	2001      	movs	r0, #1
}
 800031a:	bd10      	pop	{r4, pc}
 800031c:	20000000 	.word	0x20000000
 8000320:	20000028 	.word	0x20000028
 8000324:	20000004 	.word	0x20000004

08000328 <HAL_Init>:
{
 8000328:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800032a:	2003      	movs	r0, #3
 800032c:	f000 feb6 	bl	800109c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000330:	f003 f81e 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 8000334:	490f      	ldr	r1, [pc, #60]	; (8000374 <HAL_Init+0x4c>)
 8000336:	698b      	ldr	r3, [r1, #24]
 8000338:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <HAL_Init+0x50>)
 800033e:	5cd3      	ldrb	r3, [r2, r3]
 8000340:	f003 031f 	and.w	r3, r3, #31
 8000344:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000346:	698b      	ldr	r3, [r1, #24]
 8000348:	f003 030f 	and.w	r3, r3, #15
 800034c:	5cd3      	ldrb	r3, [r2, r3]
 800034e:	f003 031f 	and.w	r3, r3, #31
 8000352:	fa20 f303 	lsr.w	r3, r0, r3
 8000356:	4a09      	ldr	r2, [pc, #36]	; (800037c <HAL_Init+0x54>)
 8000358:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <HAL_Init+0x58>)
 800035c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800035e:	2000      	movs	r0, #0
 8000360:	f7ff ffba 	bl	80002d8 <HAL_InitTick>
 8000364:	b110      	cbz	r0, 800036c <HAL_Init+0x44>
    return HAL_ERROR;
 8000366:	2401      	movs	r4, #1
}
 8000368:	4620      	mov	r0, r4
 800036a:	bd10      	pop	{r4, pc}
 800036c:	4604      	mov	r4, r0
  HAL_MspInit();
 800036e:	f009 fbcd 	bl	8009b0c <HAL_MspInit>
  return HAL_OK;
 8000372:	e7f9      	b.n	8000368 <HAL_Init+0x40>
 8000374:	58024400 	.word	0x58024400
 8000378:	0800c4f4 	.word	0x0800c4f4
 800037c:	2000002c 	.word	0x2000002c
 8000380:	20000028 	.word	0x20000028

08000384 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <HAL_IncTick+0x10>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	4a03      	ldr	r2, [pc, #12]	; (8000398 <HAL_IncTick+0x14>)
 800038a:	6811      	ldr	r1, [r2, #0]
 800038c:	440b      	add	r3, r1
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	20000000 	.word	0x20000000
 8000398:	20000134 	.word	0x20000134

0800039c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800039c:	4b01      	ldr	r3, [pc, #4]	; (80003a4 <HAL_GetTick+0x8>)
 800039e:	6818      	ldr	r0, [r3, #0]
}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	20000134 	.word	0x20000134

080003a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003a8:	b538      	push	{r3, r4, r5, lr}
 80003aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003ac:	f7ff fff6 	bl	800039c <HAL_GetTick>
 80003b0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80003b6:	d002      	beq.n	80003be <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <HAL_Delay+0x24>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003be:	f7ff ffed 	bl	800039c <HAL_GetTick>
 80003c2:	1b40      	subs	r0, r0, r5
 80003c4:	42a0      	cmp	r0, r4
 80003c6:	d3fa      	bcc.n	80003be <HAL_Delay+0x16>
  {
  }
}
 80003c8:	bd38      	pop	{r3, r4, r5, pc}
 80003ca:	bf00      	nop
 80003cc:	20000000 	.word	0x20000000

080003d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003d0:	4b01      	ldr	r3, [pc, #4]	; (80003d8 <HAL_GetREVID+0x8>)
 80003d2:	6818      	ldr	r0, [r3, #0]
}
 80003d4:	0c00      	lsrs	r0, r0, #16
 80003d6:	4770      	bx	lr
 80003d8:	5c001000 	.word	0x5c001000

080003dc <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <HAL_SetFMCMemorySwappingConfig+0x10>)
 80003de:	6813      	ldr	r3, [r2, #0]
 80003e0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80003e4:	4303      	orrs	r3, r0
 80003e6:	6013      	str	r3, [r2, #0]
}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	52004000 	.word	0x52004000

080003f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80003f0:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80003f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80003f4:	f008 ff5a 	bl	80092ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80003f8:	bd08      	pop	{r3, pc}

080003fa <HAL_ADC_ErrorCallback>:
}
 80003fa:	4770      	bx	lr

080003fc <ADC_DMAConvCplt>:
{
 80003fc:	b508      	push	{r3, lr}
 80003fe:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000400:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8000402:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8000404:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000408:	d130      	bne.n	800046c <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800040a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800040c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000410:	6543      	str	r3, [r0, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8000412:	6803      	ldr	r3, [r0, #0]
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	f012 0f08 	tst.w	r2, #8
 800041a:	d014      	beq.n	8000446 <ADC_DMAConvCplt+0x4a>
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800041c:	68da      	ldr	r2, [r3, #12]
 800041e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000422:	d120      	bne.n	8000466 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800042a:	d11c      	bne.n	8000466 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800042c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800042e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000432:	6543      	str	r3, [r0, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000434:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000436:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800043a:	d114      	bne.n	8000466 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800043c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6543      	str	r3, [r0, #84]	; 0x54
 8000444:	e00f      	b.n	8000466 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	f013 0f03 	tst.w	r3, #3
 800044c:	d10b      	bne.n	8000466 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800044e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000454:	6543      	str	r3, [r0, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000456:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000458:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800045c:	d103      	bne.n	8000466 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800045e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6543      	str	r3, [r0, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000466:	f008 ff13 	bl	8009290 <HAL_ADC_ConvCpltCallback>
}
 800046a:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800046c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800046e:	f012 0f10 	tst.w	r2, #16
 8000472:	d104      	bne.n	800047e <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000474:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8000476:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000478:	4618      	mov	r0, r3
 800047a:	4790      	blx	r2
}
 800047c:	e7f5      	b.n	800046a <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 800047e:	f7ff ffbc 	bl	80003fa <HAL_ADC_ErrorCallback>
 8000482:	e7f2      	b.n	800046a <ADC_DMAConvCplt+0x6e>

08000484 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000484:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000486:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000488:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800048a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800048e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000490:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000498:	f7ff ffaf 	bl	80003fa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800049c:	bd08      	pop	{r3, pc}
	...

080004a0 <HAL_ADC_ConfigChannel>:
{
 80004a0:	b4f0      	push	{r4, r5, r6, r7}
 80004a2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80004a4:	2200      	movs	r2, #0
 80004a6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80004a8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80004ac:	2a01      	cmp	r2, #1
 80004ae:	f000 824e 	beq.w	800094e <HAL_ADC_ConfigChannel+0x4ae>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2201      	movs	r2, #1
 80004b6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80004ba:	6800      	ldr	r0, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80004bc:	6882      	ldr	r2, [r0, #8]
 80004be:	f012 0f04 	tst.w	r2, #4
 80004c2:	d00a      	beq.n	80004da <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80004c6:	f042 0220 	orr.w	r2, r2, #32
 80004ca:	655a      	str	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80004cc:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80004d4:	b002      	add	sp, #8
 80004d6:	bcf0      	pop	{r4, r5, r6, r7}
 80004d8:	4770      	bx	lr
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80004da:	680a      	ldr	r2, [r1, #0]
 80004dc:	f3c2 0413 	ubfx	r4, r2, #0, #20
 80004e0:	2c00      	cmp	r4, #0
 80004e2:	d14d      	bne.n	8000580 <HAL_ADC_ConfigChannel+0xe0>
 80004e4:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80004e8:	2401      	movs	r4, #1
 80004ea:	4094      	lsls	r4, r2
 80004ec:	69c2      	ldr	r2, [r0, #28]
 80004ee:	4322      	orrs	r2, r4
 80004f0:	61c2      	str	r2, [r0, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80004f2:	681e      	ldr	r6, [r3, #0]
 80004f4:	684d      	ldr	r5, [r1, #4]
 80004f6:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004f8:	3630      	adds	r6, #48	; 0x30
 80004fa:	0a2a      	lsrs	r2, r5, #8
 80004fc:	0092      	lsls	r2, r2, #2
 80004fe:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8000502:	58b0      	ldr	r0, [r6, r2]
 8000504:	f005 051f 	and.w	r5, r5, #31
 8000508:	271f      	movs	r7, #31
 800050a:	40af      	lsls	r7, r5
 800050c:	ea20 0007 	bic.w	r0, r0, r7
 8000510:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8000514:	40ac      	lsls	r4, r5
 8000516:	4320      	orrs	r0, r4
 8000518:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800051a:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800051c:	68a2      	ldr	r2, [r4, #8]
 800051e:	f012 0204 	ands.w	r2, r2, #4
 8000522:	d000      	beq.n	8000526 <HAL_ADC_ConfigChannel+0x86>
 8000524:	2201      	movs	r2, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000526:	68a0      	ldr	r0, [r4, #8]
 8000528:	f010 0008 	ands.w	r0, r0, #8
 800052c:	d000      	beq.n	8000530 <HAL_ADC_ConfigChannel+0x90>
 800052e:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000530:	4302      	orrs	r2, r0
 8000532:	d163      	bne.n	80005fc <HAL_ADC_ConfigChannel+0x15c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000534:	680f      	ldr	r7, [r1, #0]
 8000536:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000538:	3414      	adds	r4, #20
 800053a:	0e78      	lsrs	r0, r7, #25
 800053c:	0080      	lsls	r0, r0, #2
 800053e:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000542:	5826      	ldr	r6, [r4, r0]
 8000544:	f3c7 5704 	ubfx	r7, r7, #20, #5
 8000548:	f04f 0c07 	mov.w	ip, #7
 800054c:	fa0c fc07 	lsl.w	ip, ip, r7
 8000550:	ea26 060c 	bic.w	r6, r6, ip
 8000554:	40bd      	lsls	r5, r7
 8000556:	4335      	orrs	r5, r6
 8000558:	5025      	str	r5, [r4, r0]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800055a:	48b7      	ldr	r0, [pc, #732]	; (8000838 <HAL_ADC_ConfigChannel+0x398>)
 800055c:	6800      	ldr	r0, [r0, #0]
 800055e:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8000562:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8000566:	d017      	beq.n	8000598 <HAL_ADC_ConfigChannel+0xf8>
 8000568:	681c      	ldr	r4, [r3, #0]
 800056a:	68e0      	ldr	r0, [r4, #12]
 800056c:	f010 0f10 	tst.w	r0, #16
 8000570:	d166      	bne.n	8000640 <HAL_ADC_ConfigChannel+0x1a0>
 8000572:	6948      	ldr	r0, [r1, #20]
 8000574:	68e4      	ldr	r4, [r4, #12]
 8000576:	f3c4 0482 	ubfx	r4, r4, #2, #3
 800057a:	0064      	lsls	r4, r4, #1
 800057c:	40a0      	lsls	r0, r4
 800057e:	e012      	b.n	80005a6 <HAL_ADC_ConfigChannel+0x106>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000580:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000584:	b132      	cbz	r2, 8000594 <HAL_ADC_ConfigChannel+0xf4>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8000586:	fab2 f282 	clz	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800058a:	f002 021f 	and.w	r2, r2, #31
 800058e:	2401      	movs	r4, #1
 8000590:	4094      	lsls	r4, r2
 8000592:	e7ab      	b.n	80004ec <HAL_ADC_ConfigChannel+0x4c>
    return 32U;
 8000594:	2220      	movs	r2, #32
 8000596:	e7f8      	b.n	800058a <HAL_ADC_ConfigChannel+0xea>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000598:	6948      	ldr	r0, [r1, #20]
 800059a:	681c      	ldr	r4, [r3, #0]
 800059c:	68e4      	ldr	r4, [r4, #12]
 800059e:	f3c4 0482 	ubfx	r4, r4, #2, #3
 80005a2:	0064      	lsls	r4, r4, #1
 80005a4:	40a0      	lsls	r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80005a6:	690d      	ldr	r5, [r1, #16]
 80005a8:	2d04      	cmp	r5, #4
 80005aa:	d057      	beq.n	800065c <HAL_ADC_ConfigChannel+0x1bc>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80005ac:	681f      	ldr	r7, [r3, #0]
 80005ae:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80005b0:	3760      	adds	r7, #96	; 0x60
    MODIFY_REG(*preg,
 80005b2:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 80005b6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80005ba:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80005be:	4330      	orrs	r0, r6
 80005c0:	4320      	orrs	r0, r4
 80005c2:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	690e      	ldr	r6, [r1, #16]
 80005ca:	7e4c      	ldrb	r4, [r1, #25]
 80005cc:	2c01      	cmp	r4, #1
 80005ce:	d03f      	beq.n	8000650 <HAL_ADC_ConfigChannel+0x1b0>
 80005d0:	4614      	mov	r4, r2
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80005d2:	3060      	adds	r0, #96	; 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80005d4:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
 80005d8:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 80005dc:	432c      	orrs	r4, r5
 80005de:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80005e2:	681d      	ldr	r5, [r3, #0]
 80005e4:	6908      	ldr	r0, [r1, #16]
 80005e6:	7e0c      	ldrb	r4, [r1, #24]
 80005e8:	2c01      	cmp	r4, #1
 80005ea:	d034      	beq.n	8000656 <HAL_ADC_ConfigChannel+0x1b6>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80005ec:	692c      	ldr	r4, [r5, #16]
 80005ee:	f424 44f0 	bic.w	r4, r4, #30720	; 0x7800
 80005f2:	f000 001f 	and.w	r0, r0, #31
 80005f6:	4082      	lsls	r2, r0
 80005f8:	4322      	orrs	r2, r4
 80005fa:	612a      	str	r2, [r5, #16]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80005fc:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80005fe:	6882      	ldr	r2, [r0, #8]
 8000600:	f012 0f01 	tst.w	r2, #1
 8000604:	f040 819f 	bne.w	8000946 <HAL_ADC_ConfigChannel+0x4a6>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000608:	680a      	ldr	r2, [r1, #0]
 800060a:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800060c:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8000610:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8000614:	ea24 0406 	bic.w	r4, r4, r6
 8000618:	f005 0618 	and.w	r6, r5, #24
 800061c:	4d87      	ldr	r5, [pc, #540]	; (800083c <HAL_ADC_ConfigChannel+0x39c>)
 800061e:	40f5      	lsrs	r5, r6
 8000620:	402a      	ands	r2, r5
 8000622:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8000626:	4322      	orrs	r2, r4
 8000628:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800062c:	68c8      	ldr	r0, [r1, #12]
 800062e:	4a84      	ldr	r2, [pc, #528]	; (8000840 <HAL_ADC_ConfigChannel+0x3a0>)
 8000630:	4290      	cmp	r0, r2
 8000632:	d047      	beq.n	80006c4 <HAL_ADC_ConfigChannel+0x224>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000634:	680a      	ldr	r2, [r1, #0]
 8000636:	2a00      	cmp	r2, #0
 8000638:	f2c0 8104 	blt.w	8000844 <HAL_ADC_ConfigChannel+0x3a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800063c:	2000      	movs	r0, #0
 800063e:	e746      	b.n	80004ce <HAL_ADC_ConfigChannel+0x2e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000640:	6948      	ldr	r0, [r1, #20]
 8000642:	68e4      	ldr	r4, [r4, #12]
 8000644:	08a4      	lsrs	r4, r4, #2
 8000646:	f004 0404 	and.w	r4, r4, #4
 800064a:	0064      	lsls	r4, r4, #1
 800064c:	40a0      	lsls	r0, r4
 800064e:	e7aa      	b.n	80005a6 <HAL_ADC_ConfigChannel+0x106>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000650:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8000654:	e7bd      	b.n	80005d2 <HAL_ADC_ConfigChannel+0x132>
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000656:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800065a:	e7c7      	b.n	80005ec <HAL_ADC_ConfigChannel+0x14c>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000660:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000664:	680c      	ldr	r4, [r1, #0]
 8000666:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800066a:	d01c      	beq.n	80006a6 <HAL_ADC_ConfigChannel+0x206>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000670:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000674:	680c      	ldr	r4, [r1, #0]
 8000676:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800067a:	d019      	beq.n	80006b0 <HAL_ADC_ConfigChannel+0x210>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800067c:	6818      	ldr	r0, [r3, #0]
 800067e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000680:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000684:	680c      	ldr	r4, [r1, #0]
 8000686:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800068a:	d016      	beq.n	80006ba <HAL_ADC_ConfigChannel+0x21a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000690:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000694:	680c      	ldr	r4, [r1, #0]
 8000696:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800069a:	d1af      	bne.n	80005fc <HAL_ADC_ConfigChannel+0x15c>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800069c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800069e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006a2:	66c2      	str	r2, [r0, #108]	; 0x6c
 80006a4:	e7aa      	b.n	80005fc <HAL_ADC_ConfigChannel+0x15c>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80006a6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80006a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006ac:	6602      	str	r2, [r0, #96]	; 0x60
 80006ae:	e7dd      	b.n	800066c <HAL_ADC_ConfigChannel+0x1cc>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80006b0:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80006b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006b6:	6642      	str	r2, [r0, #100]	; 0x64
 80006b8:	e7e0      	b.n	800067c <HAL_ADC_ConfigChannel+0x1dc>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80006ba:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80006bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006c0:	6682      	str	r2, [r0, #104]	; 0x68
 80006c2:	e7e3      	b.n	800068c <HAL_ADC_ConfigChannel+0x1ec>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80006c4:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80006c6:	680a      	ldr	r2, [r1, #0]
 80006c8:	f3c2 0613 	ubfx	r6, r2, #0, #20
 80006cc:	2e00      	cmp	r6, #0
 80006ce:	d135      	bne.n	800073c <HAL_ADC_ConfigChannel+0x29c>
 80006d0:	0e90      	lsrs	r0, r2, #26
 80006d2:	3001      	adds	r0, #1
 80006d4:	f000 001f 	and.w	r0, r0, #31
 80006d8:	2809      	cmp	r0, #9
 80006da:	bf8c      	ite	hi
 80006dc:	2000      	movhi	r0, #0
 80006de:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80006e0:	2800      	cmp	r0, #0
 80006e2:	d062      	beq.n	80007aa <HAL_ADC_ConfigChannel+0x30a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80006e4:	2e00      	cmp	r6, #0
 80006e6:	d138      	bne.n	800075a <HAL_ADC_ConfigChannel+0x2ba>
 80006e8:	0e94      	lsrs	r4, r2, #26
 80006ea:	3401      	adds	r4, #1
 80006ec:	06a4      	lsls	r4, r4, #26
 80006ee:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80006f2:	2e00      	cmp	r6, #0
 80006f4:	d13d      	bne.n	8000772 <HAL_ADC_ConfigChannel+0x2d2>
 80006f6:	0e90      	lsrs	r0, r2, #26
 80006f8:	3001      	adds	r0, #1
 80006fa:	f000 071f 	and.w	r7, r0, #31
 80006fe:	2001      	movs	r0, #1
 8000700:	40b8      	lsls	r0, r7
 8000702:	4304      	orrs	r4, r0
 8000704:	2e00      	cmp	r6, #0
 8000706:	d142      	bne.n	800078e <HAL_ADC_ConfigChannel+0x2ee>
 8000708:	0e92      	lsrs	r2, r2, #26
 800070a:	3201      	adds	r2, #1
 800070c:	f002 021f 	and.w	r2, r2, #31
 8000710:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000714:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000716:	4322      	orrs	r2, r4
 8000718:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800071a:	3514      	adds	r5, #20
 800071c:	0e50      	lsrs	r0, r2, #25
 800071e:	0080      	lsls	r0, r0, #2
 8000720:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000724:	582e      	ldr	r6, [r5, r0]
 8000726:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800072a:	2707      	movs	r7, #7
 800072c:	4097      	lsls	r7, r2
 800072e:	ea26 0607 	bic.w	r6, r6, r7
 8000732:	fa04 f202 	lsl.w	r2, r4, r2
 8000736:	4332      	orrs	r2, r6
 8000738:	502a      	str	r2, [r5, r0]
}
 800073a:	e77b      	b.n	8000634 <HAL_ADC_ConfigChannel+0x194>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800073c:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8000740:	b148      	cbz	r0, 8000756 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8000742:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000746:	3001      	adds	r0, #1
 8000748:	f000 001f 	and.w	r0, r0, #31
 800074c:	2809      	cmp	r0, #9
 800074e:	bf8c      	ite	hi
 8000750:	2000      	movhi	r0, #0
 8000752:	2001      	movls	r0, #1
 8000754:	e7c4      	b.n	80006e0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8000756:	2020      	movs	r0, #32
 8000758:	e7f5      	b.n	8000746 <HAL_ADC_ConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800075a:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 800075e:	b134      	cbz	r4, 800076e <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 8000760:	fab4 f484 	clz	r4, r4
 8000764:	3401      	adds	r4, #1
 8000766:	06a4      	lsls	r4, r4, #26
 8000768:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800076c:	e7c1      	b.n	80006f2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800076e:	2420      	movs	r4, #32
 8000770:	e7f8      	b.n	8000764 <HAL_ADC_ConfigChannel+0x2c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000772:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8000776:	b140      	cbz	r0, 800078a <HAL_ADC_ConfigChannel+0x2ea>
  return __builtin_clz(value);
 8000778:	fab0 f080 	clz	r0, r0
 800077c:	3001      	adds	r0, #1
 800077e:	f000 001f 	and.w	r0, r0, #31
 8000782:	2701      	movs	r7, #1
 8000784:	fa07 f000 	lsl.w	r0, r7, r0
 8000788:	e7bb      	b.n	8000702 <HAL_ADC_ConfigChannel+0x262>
    return 32U;
 800078a:	2020      	movs	r0, #32
 800078c:	e7f6      	b.n	800077c <HAL_ADC_ConfigChannel+0x2dc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800078e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8000792:	b142      	cbz	r2, 80007a6 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8000794:	fab2 f282 	clz	r2, r2
 8000798:	3201      	adds	r2, #1
 800079a:	f002 021f 	and.w	r2, r2, #31
 800079e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80007a2:	0512      	lsls	r2, r2, #20
 80007a4:	e7b7      	b.n	8000716 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80007a6:	2220      	movs	r2, #32
 80007a8:	e7f6      	b.n	8000798 <HAL_ADC_ConfigChannel+0x2f8>
 80007aa:	b9ce      	cbnz	r6, 80007e0 <HAL_ADC_ConfigChannel+0x340>
 80007ac:	0e94      	lsrs	r4, r2, #26
 80007ae:	3401      	adds	r4, #1
 80007b0:	06a4      	lsls	r4, r4, #26
 80007b2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80007b6:	b9fe      	cbnz	r6, 80007f8 <HAL_ADC_ConfigChannel+0x358>
 80007b8:	0e90      	lsrs	r0, r2, #26
 80007ba:	3001      	adds	r0, #1
 80007bc:	f000 071f 	and.w	r7, r0, #31
 80007c0:	2001      	movs	r0, #1
 80007c2:	40b8      	lsls	r0, r7
 80007c4:	4304      	orrs	r4, r0
 80007c6:	bb2e      	cbnz	r6, 8000814 <HAL_ADC_ConfigChannel+0x374>
 80007c8:	0e90      	lsrs	r0, r2, #26
 80007ca:	3001      	adds	r0, #1
 80007cc:	f000 001f 	and.w	r0, r0, #31
 80007d0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80007d4:	3a1e      	subs	r2, #30
 80007d6:	0512      	lsls	r2, r2, #20
 80007d8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80007dc:	4322      	orrs	r2, r4
 80007de:	e79b      	b.n	8000718 <HAL_ADC_ConfigChannel+0x278>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007e0:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 80007e4:	b134      	cbz	r4, 80007f4 <HAL_ADC_ConfigChannel+0x354>
  return __builtin_clz(value);
 80007e6:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80007ea:	3401      	adds	r4, #1
 80007ec:	06a4      	lsls	r4, r4, #26
 80007ee:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80007f2:	e7e0      	b.n	80007b6 <HAL_ADC_ConfigChannel+0x316>
    return 32U;
 80007f4:	2420      	movs	r4, #32
 80007f6:	e7f8      	b.n	80007ea <HAL_ADC_ConfigChannel+0x34a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007f8:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80007fc:	b140      	cbz	r0, 8000810 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80007fe:	fab0 f080 	clz	r0, r0
 8000802:	3001      	adds	r0, #1
 8000804:	f000 001f 	and.w	r0, r0, #31
 8000808:	2701      	movs	r7, #1
 800080a:	fa07 f000 	lsl.w	r0, r7, r0
 800080e:	e7d9      	b.n	80007c4 <HAL_ADC_ConfigChannel+0x324>
    return 32U;
 8000810:	2020      	movs	r0, #32
 8000812:	e7f6      	b.n	8000802 <HAL_ADC_ConfigChannel+0x362>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000814:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8000818:	b15a      	cbz	r2, 8000832 <HAL_ADC_ConfigChannel+0x392>
  return __builtin_clz(value);
 800081a:	fab2 f082 	clz	r0, r2
 800081e:	3001      	adds	r0, #1
 8000820:	f000 001f 	and.w	r0, r0, #31
 8000824:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000828:	3a1e      	subs	r2, #30
 800082a:	0512      	lsls	r2, r2, #20
 800082c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000830:	e7d4      	b.n	80007dc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8000832:	2020      	movs	r0, #32
 8000834:	e7f3      	b.n	800081e <HAL_ADC_ConfigChannel+0x37e>
 8000836:	bf00      	nop
 8000838:	5c001000 	.word	0x5c001000
 800083c:	000fffff 	.word	0x000fffff
 8000840:	47ff0000 	.word	0x47ff0000
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000844:	6819      	ldr	r1, [r3, #0]
 8000846:	4843      	ldr	r0, [pc, #268]	; (8000954 <HAL_ADC_ConfigChannel+0x4b4>)
 8000848:	4c43      	ldr	r4, [pc, #268]	; (8000958 <HAL_ADC_ConfigChannel+0x4b8>)
 800084a:	42a1      	cmp	r1, r4
 800084c:	bf18      	it	ne
 800084e:	4281      	cmpne	r1, r0
 8000850:	bf0c      	ite	eq
 8000852:	2001      	moveq	r0, #1
 8000854:	2000      	movne	r0, #0
 8000856:	d121      	bne.n	800089c <HAL_ADC_ConfigChannel+0x3fc>
 8000858:	4e40      	ldr	r6, [pc, #256]	; (800095c <HAL_ADC_ConfigChannel+0x4bc>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800085a:	68b5      	ldr	r5, [r6, #8]
 800085c:	f005 77e0 	and.w	r7, r5, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000860:	b1f0      	cbz	r0, 80008a0 <HAL_ADC_ConfigChannel+0x400>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000862:	483c      	ldr	r0, [pc, #240]	; (8000954 <HAL_ADC_ConfigChannel+0x4b4>)
 8000864:	6880      	ldr	r0, [r0, #8]
 8000866:	f010 0001 	ands.w	r0, r0, #1
 800086a:	d000      	beq.n	800086e <HAL_ADC_ConfigChannel+0x3ce>
 800086c:	2001      	movs	r0, #1
 800086e:	4c3a      	ldr	r4, [pc, #232]	; (8000958 <HAL_ADC_ConfigChannel+0x4b8>)
 8000870:	68a4      	ldr	r4, [r4, #8]
 8000872:	f014 0401 	ands.w	r4, r4, #1
 8000876:	d000      	beq.n	800087a <HAL_ADC_ConfigChannel+0x3da>
 8000878:	2401      	movs	r4, #1
 800087a:	4320      	orrs	r0, r4
 800087c:	bf0c      	ite	eq
 800087e:	2001      	moveq	r0, #1
 8000880:	2000      	movne	r0, #0
 8000882:	2800      	cmp	r0, #0
 8000884:	d059      	beq.n	800093a <HAL_ADC_ConfigChannel+0x49a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000886:	4836      	ldr	r0, [pc, #216]	; (8000960 <HAL_ADC_ConfigChannel+0x4c0>)
 8000888:	4282      	cmp	r2, r0
 800088a:	d012      	beq.n	80008b2 <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800088c:	4835      	ldr	r0, [pc, #212]	; (8000964 <HAL_ADC_ConfigChannel+0x4c4>)
 800088e:	4282      	cmp	r2, r0
 8000890:	d031      	beq.n	80008f6 <HAL_ADC_ConfigChannel+0x456>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000892:	4835      	ldr	r0, [pc, #212]	; (8000968 <HAL_ADC_ConfigChannel+0x4c8>)
 8000894:	4282      	cmp	r2, r0
 8000896:	d03f      	beq.n	8000918 <HAL_ADC_ConfigChannel+0x478>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000898:	2000      	movs	r0, #0
 800089a:	e618      	b.n	80004ce <HAL_ADC_ConfigChannel+0x2e>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800089c:	4e33      	ldr	r6, [pc, #204]	; (800096c <HAL_ADC_ConfigChannel+0x4cc>)
 800089e:	e7dc      	b.n	800085a <HAL_ADC_ConfigChannel+0x3ba>
 80008a0:	4833      	ldr	r0, [pc, #204]	; (8000970 <HAL_ADC_ConfigChannel+0x4d0>)
 80008a2:	6880      	ldr	r0, [r0, #8]
 80008a4:	f010 0001 	ands.w	r0, r0, #1
 80008a8:	d000      	beq.n	80008ac <HAL_ADC_ConfigChannel+0x40c>
 80008aa:	2001      	movs	r0, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80008ac:	f080 0001 	eor.w	r0, r0, #1
 80008b0:	e7e7      	b.n	8000882 <HAL_ADC_ConfigChannel+0x3e2>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80008b2:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80008b6:	d1e9      	bne.n	800088c <HAL_ADC_ConfigChannel+0x3ec>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80008b8:	4a2d      	ldr	r2, [pc, #180]	; (8000970 <HAL_ADC_ConfigChannel+0x4d0>)
 80008ba:	4291      	cmp	r1, r2
 80008bc:	d001      	beq.n	80008c2 <HAL_ADC_ConfigChannel+0x422>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008be:	2000      	movs	r0, #0
 80008c0:	e605      	b.n	80004ce <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80008c2:	f447 0200 	orr.w	r2, r7, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80008c6:	68b1      	ldr	r1, [r6, #8]
 80008c8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80008cc:	430a      	orrs	r2, r1
 80008ce:	60b2      	str	r2, [r6, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80008d0:	4a28      	ldr	r2, [pc, #160]	; (8000974 <HAL_ADC_ConfigChannel+0x4d4>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	0992      	lsrs	r2, r2, #6
 80008d6:	4928      	ldr	r1, [pc, #160]	; (8000978 <HAL_ADC_ConfigChannel+0x4d8>)
 80008d8:	fba1 1202 	umull	r1, r2, r1, r2
 80008dc:	0992      	lsrs	r2, r2, #6
 80008de:	3201      	adds	r2, #1
 80008e0:	0052      	lsls	r2, r2, #1
 80008e2:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80008e4:	e002      	b.n	80008ec <HAL_ADC_ConfigChannel+0x44c>
                wait_loop_index--;
 80008e6:	9a01      	ldr	r2, [sp, #4]
 80008e8:	3a01      	subs	r2, #1
 80008ea:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80008ec:	9a01      	ldr	r2, [sp, #4]
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d1f9      	bne.n	80008e6 <HAL_ADC_ConfigChannel+0x446>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008f2:	2000      	movs	r0, #0
 80008f4:	e5eb      	b.n	80004ce <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80008f6:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 80008fa:	d1ca      	bne.n	8000892 <HAL_ADC_ConfigChannel+0x3f2>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80008fc:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <HAL_ADC_ConfigChannel+0x4d0>)
 80008fe:	4291      	cmp	r1, r2
 8000900:	d001      	beq.n	8000906 <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000902:	2000      	movs	r0, #0
 8000904:	e5e3      	b.n	80004ce <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8000906:	f047 7280 	orr.w	r2, r7, #16777216	; 0x1000000
 800090a:	68b1      	ldr	r1, [r6, #8]
 800090c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000910:	430a      	orrs	r2, r1
 8000912:	60b2      	str	r2, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000914:	2000      	movs	r0, #0
}
 8000916:	e5da      	b.n	80004ce <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000918:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800091c:	d115      	bne.n	800094a <HAL_ADC_ConfigChannel+0x4aa>
            if (ADC_VREFINT_INSTANCE(hadc))
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <HAL_ADC_ConfigChannel+0x4d0>)
 8000920:	4291      	cmp	r1, r2
 8000922:	d001      	beq.n	8000928 <HAL_ADC_ConfigChannel+0x488>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000924:	2000      	movs	r0, #0
 8000926:	e5d2      	b.n	80004ce <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8000928:	f447 0280 	orr.w	r2, r7, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800092c:	68b1      	ldr	r1, [r6, #8]
 800092e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000932:	430a      	orrs	r2, r1
 8000934:	60b2      	str	r2, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000936:	2000      	movs	r0, #0
}
 8000938:	e5c9      	b.n	80004ce <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800093a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800093c:	f042 0220 	orr.w	r2, r2, #32
 8000940:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8000942:	2001      	movs	r0, #1
 8000944:	e5c3      	b.n	80004ce <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000946:	2000      	movs	r0, #0
 8000948:	e5c1      	b.n	80004ce <HAL_ADC_ConfigChannel+0x2e>
 800094a:	2000      	movs	r0, #0
 800094c:	e5bf      	b.n	80004ce <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 800094e:	2002      	movs	r0, #2
 8000950:	e5c0      	b.n	80004d4 <HAL_ADC_ConfigChannel+0x34>
 8000952:	bf00      	nop
 8000954:	40022000 	.word	0x40022000
 8000958:	40022100 	.word	0x40022100
 800095c:	40022300 	.word	0x40022300
 8000960:	cb840000 	.word	0xcb840000
 8000964:	c7520000 	.word	0xc7520000
 8000968:	cfb80000 	.word	0xcfb80000
 800096c:	58026300 	.word	0x58026300
 8000970:	58026000 	.word	0x58026000
 8000974:	20000028 	.word	0x20000028
 8000978:	053e2d63 	.word	0x053e2d63

0800097c <ADC_Enable>:
{
 800097c:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800097e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	f012 0f01 	tst.w	r2, #1
 8000986:	d156      	bne.n	8000a36 <ADC_Enable+0xba>
 8000988:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800098a:	6899      	ldr	r1, [r3, #8]
 800098c:	4a2b      	ldr	r2, [pc, #172]	; (8000a3c <ADC_Enable+0xc0>)
 800098e:	4211      	tst	r1, r2
 8000990:	d009      	beq.n	80009a6 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000992:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000994:	f043 0310 	orr.w	r3, r3, #16
 8000998:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800099a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 80009a2:	2001      	movs	r0, #1
 80009a4:	e048      	b.n	8000a38 <ADC_Enable+0xbc>
  MODIFY_REG(ADCx->CR,
 80009a6:	6899      	ldr	r1, [r3, #8]
 80009a8:	4a25      	ldr	r2, [pc, #148]	; (8000a40 <ADC_Enable+0xc4>)
 80009aa:	400a      	ands	r2, r1
 80009ac:	f042 0201 	orr.w	r2, r2, #1
 80009b0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80009b2:	f7ff fcf3 	bl	800039c <HAL_GetTick>
 80009b6:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	4922      	ldr	r1, [pc, #136]	; (8000a44 <ADC_Enable+0xc8>)
 80009bc:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <ADC_Enable+0xcc>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	bf18      	it	ne
 80009c2:	428b      	cmpne	r3, r1
 80009c4:	d10d      	bne.n	80009e2 <ADC_Enable+0x66>
 80009c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80009ca:	6892      	ldr	r2, [r2, #8]
 80009cc:	f002 021f 	and.w	r2, r2, #31
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80009d0:	491d      	ldr	r1, [pc, #116]	; (8000a48 <ADC_Enable+0xcc>)
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d007      	beq.n	80009e6 <ADC_Enable+0x6a>
 80009d6:	4619      	mov	r1, r3
 80009d8:	4299      	cmp	r1, r3
 80009da:	d007      	beq.n	80009ec <ADC_Enable+0x70>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80009dc:	b132      	cbz	r2, 80009ec <ADC_Enable+0x70>
  return HAL_OK;
 80009de:	2000      	movs	r0, #0
 80009e0:	e02a      	b.n	8000a38 <ADC_Enable+0xbc>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80009e2:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <ADC_Enable+0xd0>)
 80009e4:	e7f1      	b.n	80009ca <ADC_Enable+0x4e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80009e6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 80009ea:	e7f5      	b.n	80009d8 <ADC_Enable+0x5c>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	f012 0f01 	tst.w	r2, #1
 80009f4:	d11d      	bne.n	8000a32 <ADC_Enable+0xb6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80009f6:	689a      	ldr	r2, [r3, #8]
 80009f8:	f012 0f01 	tst.w	r2, #1
 80009fc:	d105      	bne.n	8000a0a <ADC_Enable+0x8e>
  MODIFY_REG(ADCx->CR,
 80009fe:	6899      	ldr	r1, [r3, #8]
 8000a00:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <ADC_Enable+0xc4>)
 8000a02:	400a      	ands	r2, r1
 8000a04:	f042 0201 	orr.w	r2, r2, #1
 8000a08:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000a0a:	f7ff fcc7 	bl	800039c <HAL_GetTick>
 8000a0e:	1b40      	subs	r0, r0, r5
 8000a10:	2802      	cmp	r0, #2
 8000a12:	d9eb      	bls.n	80009ec <ADC_Enable+0x70>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000a14:	6823      	ldr	r3, [r4, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f013 0f01 	tst.w	r3, #1
 8000a1c:	d1e6      	bne.n	80009ec <ADC_Enable+0x70>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a20:	f043 0310 	orr.w	r3, r3, #16
 8000a24:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	65a3      	str	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 8000a2e:	2001      	movs	r0, #1
 8000a30:	e002      	b.n	8000a38 <ADC_Enable+0xbc>
  return HAL_OK;
 8000a32:	2000      	movs	r0, #0
 8000a34:	e000      	b.n	8000a38 <ADC_Enable+0xbc>
 8000a36:	2000      	movs	r0, #0
}
 8000a38:	bd38      	pop	{r3, r4, r5, pc}
 8000a3a:	bf00      	nop
 8000a3c:	8000003f 	.word	0x8000003f
 8000a40:	7fffffc0 	.word	0x7fffffc0
 8000a44:	40022000 	.word	0x40022000
 8000a48:	40022100 	.word	0x40022100
 8000a4c:	58026300 	.word	0x58026300

08000a50 <HAL_ADC_Start_DMA>:
{
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	4604      	mov	r4, r0
 8000a54:	460e      	mov	r6, r1
 8000a56:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000a58:	6803      	ldr	r3, [r0, #0]
 8000a5a:	493f      	ldr	r1, [pc, #252]	; (8000b58 <HAL_ADC_Start_DMA+0x108>)
 8000a5c:	4a3f      	ldr	r2, [pc, #252]	; (8000b5c <HAL_ADC_Start_DMA+0x10c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	bf18      	it	ne
 8000a62:	428b      	cmpne	r3, r1
 8000a64:	d11e      	bne.n	8000aa4 <HAL_ADC_Start_DMA+0x54>
 8000a66:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000a6a:	6895      	ldr	r5, [r2, #8]
 8000a6c:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	f013 0f04 	tst.w	r3, #4
 8000a76:	d16b      	bne.n	8000b50 <HAL_ADC_Start_DMA+0x100>
    __HAL_LOCK(hadc);
 8000a78:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d069      	beq.n	8000b54 <HAL_ADC_Start_DMA+0x104>
 8000a80:	2301      	movs	r3, #1
 8000a82:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000a86:	2d05      	cmp	r5, #5
 8000a88:	bf14      	ite	ne
 8000a8a:	2300      	movne	r3, #0
 8000a8c:	2301      	moveq	r3, #1
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	bf08      	it	eq
 8000a92:	2301      	moveq	r3, #1
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000a94:	b943      	cbnz	r3, 8000aa8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000a96:	2d09      	cmp	r5, #9
 8000a98:	d006      	beq.n	8000aa8 <HAL_ADC_Start_DMA+0x58>
      __HAL_UNLOCK(hadc);
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	e056      	b.n	8000b52 <HAL_ADC_Start_DMA+0x102>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000aa4:	4a2e      	ldr	r2, [pc, #184]	; (8000b60 <HAL_ADC_Start_DMA+0x110>)
 8000aa6:	e7e0      	b.n	8000a6a <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	f7ff ff67 	bl	800097c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d14a      	bne.n	8000b48 <HAL_ADC_Start_DMA+0xf8>
        ADC_STATE_CLR_SET(hadc->State,
 8000ab2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ab4:	f6a0 7302 	subw	r3, r0, #3842	; 0xf02
 8000ab8:	4013      	ands	r3, r2
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_Start_DMA+0x10c>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d039      	beq.n	8000b3c <HAL_ADC_Start_DMA+0xec>
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d000      	beq.n	8000ad0 <HAL_ADC_Start_DMA+0x80>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000ace:	b91d      	cbnz	r5, 8000ad8 <HAL_ADC_Start_DMA+0x88>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ad0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ad2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000ad6:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000ad8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ada:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000ade:	d030      	beq.n	8000b42 <HAL_ADC_Start_DMA+0xf2>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000ae0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ae2:	f023 0306 	bic.w	r3, r3, #6
 8000ae6:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ae8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000aea:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <HAL_ADC_Start_DMA+0x114>)
 8000aec:	63da      	str	r2, [r3, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000aee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000af0:	4a1d      	ldr	r2, [pc, #116]	; (8000b68 <HAL_ADC_Start_DMA+0x118>)
 8000af2:	641a      	str	r2, [r3, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000af4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000af6:	4a1d      	ldr	r2, [pc, #116]	; (8000b6c <HAL_ADC_Start_DMA+0x11c>)
 8000af8:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	221c      	movs	r2, #28
 8000afe:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8000b00:	2300      	movs	r3, #0
 8000b02:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000b06:	6822      	ldr	r2, [r4, #0]
 8000b08:	6853      	ldr	r3, [r2, #4]
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6053      	str	r3, [r2, #4]
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8000b10:	6821      	ldr	r1, [r4, #0]
 8000b12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000b14:	68ca      	ldr	r2, [r1, #12]
 8000b16:	f022 0203 	bic.w	r2, r2, #3
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b1e:	6821      	ldr	r1, [r4, #0]
 8000b20:	463b      	mov	r3, r7
 8000b22:	4632      	mov	r2, r6
 8000b24:	3140      	adds	r1, #64	; 0x40
 8000b26:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000b28:	f000 ff48 	bl	80019bc <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000b2c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8000b2e:	6891      	ldr	r1, [r2, #8]
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_ADC_Start_DMA+0x120>)
 8000b32:	400b      	ands	r3, r1
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6093      	str	r3, [r2, #8]
}
 8000b3a:	e00a      	b.n	8000b52 <HAL_ADC_Start_DMA+0x102>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000b3c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8000b40:	e7c3      	b.n	8000aca <HAL_ADC_Start_DMA+0x7a>
          ADC_CLEAR_ERRORCODE(hadc);
 8000b42:	2300      	movs	r3, #0
 8000b44:	65a3      	str	r3, [r4, #88]	; 0x58
 8000b46:	e7cf      	b.n	8000ae8 <HAL_ADC_Start_DMA+0x98>
        __HAL_UNLOCK(hadc);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000b4e:	e000      	b.n	8000b52 <HAL_ADC_Start_DMA+0x102>
    tmp_hal_status = HAL_BUSY;
 8000b50:	2002      	movs	r0, #2
}
 8000b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8000b54:	2002      	movs	r0, #2
 8000b56:	e7fc      	b.n	8000b52 <HAL_ADC_Start_DMA+0x102>
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	40022100 	.word	0x40022100
 8000b60:	58026300 	.word	0x58026300
 8000b64:	080003fd 	.word	0x080003fd
 8000b68:	080003f1 	.word	0x080003f1
 8000b6c:	08000485 	.word	0x08000485
 8000b70:	7fffffc0 	.word	0x7fffffc0

08000b74 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8000b74:	b538      	push	{r3, r4, r5, lr}
 8000b76:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000b78:	6803      	ldr	r3, [r0, #0]
 8000b7a:	494f      	ldr	r1, [pc, #316]	; (8000cb8 <ADC_ConfigureBoostMode+0x144>)
 8000b7c:	4a4f      	ldr	r2, [pc, #316]	; (8000cbc <ADC_ConfigureBoostMode+0x148>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	bf18      	it	ne
 8000b82:	428b      	cmpne	r3, r1
 8000b84:	d123      	bne.n	8000bce <ADC_ConfigureBoostMode+0x5a>
 8000b86:	4b4e      	ldr	r3, [pc, #312]	; (8000cc0 <ADC_ConfigureBoostMode+0x14c>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000b8e:	bf14      	ite	ne
 8000b90:	2301      	movne	r3, #1
 8000b92:	2300      	moveq	r3, #0
 8000b94:	b34b      	cbz	r3, 8000bea <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8000b96:	f002 fe2f 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8000b9a:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8000b9c:	6863      	ldr	r3, [r4, #4]
 8000b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ba2:	d01c      	beq.n	8000bde <ADC_ConfigureBoostMode+0x6a>
 8000ba4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000ba8:	d01d      	beq.n	8000be6 <ADC_ConfigureBoostMode+0x72>
 8000baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bae:	d016      	beq.n	8000bde <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000bb0:	f7ff fc0e 	bl	80003d0 <HAL_GetREVID>
 8000bb4:	f241 0303 	movw	r3, #4099	; 0x1003
 8000bb8:	4298      	cmp	r0, r3
 8000bba:	d857      	bhi.n	8000c6c <ADC_ConfigureBoostMode+0xf8>
  {
    if (freq > 20000000UL)
 8000bbc:	4b41      	ldr	r3, [pc, #260]	; (8000cc4 <ADC_ConfigureBoostMode+0x150>)
 8000bbe:	429d      	cmp	r5, r3
 8000bc0:	d94e      	bls.n	8000c60 <ADC_ConfigureBoostMode+0xec>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000bc2:	6822      	ldr	r2, [r4, #0]
 8000bc4:	6893      	ldr	r3, [r2, #8]
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8000bcc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000bce:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <ADC_ConfigureBoostMode+0x154>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000bd6:	bf14      	ite	ne
 8000bd8:	2301      	movne	r3, #1
 8000bda:	2300      	moveq	r3, #0
 8000bdc:	e7da      	b.n	8000b94 <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8000bde:	0c1b      	lsrs	r3, r3, #16
 8000be0:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8000be4:	e7e4      	b.n	8000bb0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 8000be6:	0885      	lsrs	r5, r0, #2
        break;
 8000be8:	e7e2      	b.n	8000bb0 <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000bea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bee:	f003 ff1f 	bl	8004a30 <HAL_RCCEx_GetPeriphCLKFreq>
 8000bf2:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8000bf4:	6863      	ldr	r3, [r4, #4]
 8000bf6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8000bfa:	d02d      	beq.n	8000c58 <ADC_ConfigureBoostMode+0xe4>
 8000bfc:	d822      	bhi.n	8000c44 <ADC_ConfigureBoostMode+0xd0>
 8000bfe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8000c02:	d027      	beq.n	8000c54 <ADC_ConfigureBoostMode+0xe0>
 8000c04:	d904      	bls.n	8000c10 <ADC_ConfigureBoostMode+0x9c>
 8000c06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c0a:	d1d1      	bne.n	8000bb0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8000c0c:	0945      	lsrs	r5, r0, #5
        break;
 8000c0e:	e7cf      	b.n	8000bb0 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8000c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000c14:	d00d      	beq.n	8000c32 <ADC_ConfigureBoostMode+0xbe>
 8000c16:	d906      	bls.n	8000c26 <ADC_ConfigureBoostMode+0xb2>
 8000c18:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8000c1c:	d009      	beq.n	8000c32 <ADC_ConfigureBoostMode+0xbe>
 8000c1e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8000c22:	d006      	beq.n	8000c32 <ADC_ConfigureBoostMode+0xbe>
 8000c24:	e7c4      	b.n	8000bb0 <ADC_ConfigureBoostMode+0x3c>
 8000c26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000c2a:	d002      	beq.n	8000c32 <ADC_ConfigureBoostMode+0xbe>
 8000c2c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000c30:	d104      	bne.n	8000c3c <ADC_ConfigureBoostMode+0xc8>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8000c32:	0c9b      	lsrs	r3, r3, #18
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8000c3a:	e7b9      	b.n	8000bb0 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8000c3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000c40:	d0f7      	beq.n	8000c32 <ADC_ConfigureBoostMode+0xbe>
 8000c42:	e7b5      	b.n	8000bb0 <ADC_ConfigureBoostMode+0x3c>
 8000c44:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8000c48:	d008      	beq.n	8000c5c <ADC_ConfigureBoostMode+0xe8>
 8000c4a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8000c4e:	d1af      	bne.n	8000bb0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8000c50:	0a05      	lsrs	r5, r0, #8
        break;
 8000c52:	e7ad      	b.n	8000bb0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8000c54:	0905      	lsrs	r5, r0, #4
        break;
 8000c56:	e7ab      	b.n	8000bb0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8000c58:	0985      	lsrs	r5, r0, #6
        break;
 8000c5a:	e7a9      	b.n	8000bb0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8000c5c:	09c5      	lsrs	r5, r0, #7
        break;
 8000c5e:	e7a7      	b.n	8000bb0 <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000c60:	6822      	ldr	r2, [r4, #0]
 8000c62:	6893      	ldr	r3, [r2, #8]
 8000c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c68:	6093      	str	r3, [r2, #8]
 8000c6a:	e7af      	b.n	8000bcc <ADC_ConfigureBoostMode+0x58>
    if (freq <= 6250000UL)
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <ADC_ConfigureBoostMode+0x158>)
 8000c6e:	429d      	cmp	r5, r3
 8000c70:	d805      	bhi.n	8000c7e <ADC_ConfigureBoostMode+0x10a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8000c72:	6822      	ldr	r2, [r4, #0]
 8000c74:	6893      	ldr	r3, [r2, #8]
 8000c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c7a:	6093      	str	r3, [r2, #8]
 8000c7c:	e7a6      	b.n	8000bcc <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 12500000UL)
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <ADC_ConfigureBoostMode+0x15c>)
 8000c80:	429d      	cmp	r5, r3
 8000c82:	d807      	bhi.n	8000c94 <ADC_ConfigureBoostMode+0x120>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8000c84:	6822      	ldr	r2, [r4, #0]
 8000c86:	6893      	ldr	r3, [r2, #8]
 8000c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c90:	6093      	str	r3, [r2, #8]
 8000c92:	e79b      	b.n	8000bcc <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 25000000UL)
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <ADC_ConfigureBoostMode+0x160>)
 8000c96:	429d      	cmp	r5, r3
 8000c98:	d807      	bhi.n	8000caa <ADC_ConfigureBoostMode+0x136>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000c9a:	6822      	ldr	r2, [r4, #0]
 8000c9c:	6893      	ldr	r3, [r2, #8]
 8000c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6093      	str	r3, [r2, #8]
 8000ca8:	e790      	b.n	8000bcc <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8000caa:	6822      	ldr	r2, [r4, #0]
 8000cac:	6893      	ldr	r3, [r2, #8]
 8000cae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000cb2:	6093      	str	r3, [r2, #8]
}
 8000cb4:	e78a      	b.n	8000bcc <ADC_ConfigureBoostMode+0x58>
 8000cb6:	bf00      	nop
 8000cb8:	40022000 	.word	0x40022000
 8000cbc:	40022100 	.word	0x40022100
 8000cc0:	40022300 	.word	0x40022300
 8000cc4:	01312d00 	.word	0x01312d00
 8000cc8:	58026300 	.word	0x58026300
 8000ccc:	00bebc21 	.word	0x00bebc21
 8000cd0:	017d7841 	.word	0x017d7841
 8000cd4:	02faf081 	.word	0x02faf081

08000cd8 <HAL_ADC_Init>:
{
 8000cd8:	b530      	push	{r4, r5, lr}
 8000cda:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	f000 810f 	beq.w	8000f04 <HAL_ADC_Init+0x22c>
 8000ce6:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ce8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000cea:	b1eb      	cbz	r3, 8000d28 <HAL_ADC_Init+0x50>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000cec:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8000cf4:	d003      	beq.n	8000cfe <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000cf6:	6899      	ldr	r1, [r3, #8]
 8000cf8:	4a83      	ldr	r2, [pc, #524]	; (8000f08 <HAL_ADC_Init+0x230>)
 8000cfa:	400a      	ands	r2, r1
 8000cfc:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cfe:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000d06:	d11c      	bne.n	8000d42 <HAL_ADC_Init+0x6a>
  MODIFY_REG(ADCx->CR,
 8000d08:	6899      	ldr	r1, [r3, #8]
 8000d0a:	4a80      	ldr	r2, [pc, #512]	; (8000f0c <HAL_ADC_Init+0x234>)
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d12:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d14:	4b7e      	ldr	r3, [pc, #504]	; (8000f10 <HAL_ADC_Init+0x238>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	099b      	lsrs	r3, r3, #6
 8000d1a:	4a7e      	ldr	r2, [pc, #504]	; (8000f14 <HAL_ADC_Init+0x23c>)
 8000d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d20:	099b      	lsrs	r3, r3, #6
 8000d22:	3301      	adds	r3, #1
 8000d24:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000d26:	e009      	b.n	8000d3c <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8000d28:	f007 f8f2 	bl	8007f10 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000d30:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000d34:	e7da      	b.n	8000cec <HAL_ADC_Init+0x14>
      wait_loop_index--;
 8000d36:	9b01      	ldr	r3, [sp, #4]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000d3c:	9b01      	ldr	r3, [sp, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f9      	bne.n	8000d36 <HAL_ADC_Init+0x5e>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d42:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d44:	6893      	ldr	r3, [r2, #8]
 8000d46:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d4a:	d109      	bne.n	8000d60 <HAL_ADC_Init+0x88>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d4e:	f043 0310 	orr.w	r3, r3, #16
 8000d52:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000d5c:	2501      	movs	r5, #1
 8000d5e:	e000      	b.n	8000d62 <HAL_ADC_Init+0x8a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d60:	2500      	movs	r5, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d62:	6893      	ldr	r3, [r2, #8]
 8000d64:	f013 0304 	ands.w	r3, r3, #4
 8000d68:	d000      	beq.n	8000d6c <HAL_ADC_Init+0x94>
 8000d6a:	2301      	movs	r3, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d6c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000d6e:	f011 0f10 	tst.w	r1, #16
 8000d72:	f040 80bf 	bne.w	8000ef4 <HAL_ADC_Init+0x21c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f040 80bc 	bne.w	8000ef4 <HAL_ADC_Init+0x21c>
    ADC_STATE_CLR_SET(hadc->State,
 8000d7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d7e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d88:	6893      	ldr	r3, [r2, #8]
 8000d8a:	f013 0f01 	tst.w	r3, #1
 8000d8e:	d121      	bne.n	8000dd4 <HAL_ADC_Init+0xfc>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d90:	4961      	ldr	r1, [pc, #388]	; (8000f18 <HAL_ADC_Init+0x240>)
 8000d92:	4b62      	ldr	r3, [pc, #392]	; (8000f1c <HAL_ADC_Init+0x244>)
 8000d94:	429a      	cmp	r2, r3
 8000d96:	bf18      	it	ne
 8000d98:	428a      	cmpne	r2, r1
 8000d9a:	bf0c      	ite	eq
 8000d9c:	2201      	moveq	r2, #1
 8000d9e:	2200      	movne	r2, #0
 8000da0:	d172      	bne.n	8000e88 <HAL_ADC_Init+0x1b0>
 8000da2:	688b      	ldr	r3, [r1, #8]
 8000da4:	f013 0301 	ands.w	r3, r3, #1
 8000da8:	d000      	beq.n	8000dac <HAL_ADC_Init+0xd4>
 8000daa:	2301      	movs	r3, #1
 8000dac:	495b      	ldr	r1, [pc, #364]	; (8000f1c <HAL_ADC_Init+0x244>)
 8000dae:	6889      	ldr	r1, [r1, #8]
 8000db0:	f011 0101 	ands.w	r1, r1, #1
 8000db4:	d000      	beq.n	8000db8 <HAL_ADC_Init+0xe0>
 8000db6:	2101      	movs	r1, #1
 8000db8:	430b      	orrs	r3, r1
 8000dba:	bf0c      	ite	eq
 8000dbc:	2301      	moveq	r3, #1
 8000dbe:	2300      	movne	r3, #0
 8000dc0:	b143      	cbz	r3, 8000dd4 <HAL_ADC_Init+0xfc>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d069      	beq.n	8000e9a <HAL_ADC_Init+0x1c2>
 8000dc6:	4956      	ldr	r1, [pc, #344]	; (8000f20 <HAL_ADC_Init+0x248>)
 8000dc8:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dca:	688a      	ldr	r2, [r1, #8]
 8000dcc:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	608b      	str	r3, [r1, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000dd4:	f7ff fafc 	bl	80003d0 <HAL_GetREVID>
 8000dd8:	f241 0303 	movw	r3, #4099	; 0x1003
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	d902      	bls.n	8000de6 <HAL_ADC_Init+0x10e>
 8000de0:	68a3      	ldr	r3, [r4, #8]
 8000de2:	2b10      	cmp	r3, #16
 8000de4:	d05b      	beq.n	8000e9e <HAL_ADC_Init+0x1c6>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000de6:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8000de8:	6b23      	ldr	r3, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000dea:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 8000dee:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 8000df0:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000df2:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000df8:	7f22      	ldrb	r2, [r4, #28]
 8000dfa:	2a01      	cmp	r2, #1
 8000dfc:	d05a      	beq.n	8000eb4 <HAL_ADC_Init+0x1dc>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e00:	b122      	cbz	r2, 8000e0c <HAL_ADC_Init+0x134>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e02:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000e06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000e08:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e0a:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000e0c:	6821      	ldr	r1, [r4, #0]
 8000e0e:	68c8      	ldr	r0, [r1, #12]
 8000e10:	4a44      	ldr	r2, [pc, #272]	; (8000f24 <HAL_ADC_Init+0x24c>)
 8000e12:	4002      	ands	r2, r0
 8000e14:	4313      	orrs	r3, r2
 8000e16:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e18:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e1a:	688b      	ldr	r3, [r1, #8]
 8000e1c:	f013 0304 	ands.w	r3, r3, #4
 8000e20:	d000      	beq.n	8000e24 <HAL_ADC_Init+0x14c>
 8000e22:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e24:	688a      	ldr	r2, [r1, #8]
 8000e26:	f012 0208 	ands.w	r2, r2, #8
 8000e2a:	d000      	beq.n	8000e2e <HAL_ADC_Init+0x156>
 8000e2c:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	d11b      	bne.n	8000e6a <HAL_ADC_Init+0x192>
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e32:	7d22      	ldrb	r2, [r4, #20]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000e34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      tmpCFGR = (
 8000e36:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000e3a:	68c8      	ldr	r0, [r1, #12]
 8000e3c:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <HAL_ADC_Init+0x250>)
 8000e3e:	4003      	ands	r3, r0
 8000e40:	4313      	orrs	r3, r2
 8000e42:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000e44:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d038      	beq.n	8000ebe <HAL_ADC_Init+0x1e6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000e4c:	6822      	ldr	r2, [r4, #0]
 8000e4e:	6913      	ldr	r3, [r2, #16]
 8000e50:	f023 0301 	bic.w	r3, r3, #1
 8000e54:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000e56:	6822      	ldr	r2, [r4, #0]
 8000e58:	6913      	ldr	r3, [r2, #16]
 8000e5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000e5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e60:	430b      	orrs	r3, r1
 8000e62:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8000e64:	4620      	mov	r0, r4
 8000e66:	f7ff fe85 	bl	8000b74 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e6a:	68e3      	ldr	r3, [r4, #12]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d038      	beq.n	8000ee2 <HAL_ADC_Init+0x20a>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e70:	6822      	ldr	r2, [r4, #0]
 8000e72:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e74:	f023 030f 	bic.w	r3, r3, #15
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000e7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e7c:	f023 0303 	bic.w	r3, r3, #3
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6563      	str	r3, [r4, #84]	; 0x54
 8000e86:	e03a      	b.n	8000efe <HAL_ADC_Init+0x226>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e88:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <HAL_ADC_Init+0x254>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f013 0301 	ands.w	r3, r3, #1
 8000e90:	d000      	beq.n	8000e94 <HAL_ADC_Init+0x1bc>
 8000e92:	2301      	movs	r3, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e94:	f083 0301 	eor.w	r3, r3, #1
 8000e98:	e792      	b.n	8000dc0 <HAL_ADC_Init+0xe8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e9a:	4925      	ldr	r1, [pc, #148]	; (8000f30 <HAL_ADC_Init+0x258>)
 8000e9c:	e794      	b.n	8000dc8 <HAL_ADC_Init+0xf0>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000e9e:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8000ea0:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ea2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 8000ea6:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ea8:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000eaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000eae:	f043 030c 	orr.w	r3, r3, #12
 8000eb2:	e7a1      	b.n	8000df8 <HAL_ADC_Init+0x120>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000eb4:	6a22      	ldr	r2, [r4, #32]
 8000eb6:	3a01      	subs	r2, #1
 8000eb8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000ebc:	e79f      	b.n	8000dfe <HAL_ADC_Init+0x126>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000ebe:	6820      	ldr	r0, [r4, #0]
 8000ec0:	6902      	ldr	r2, [r0, #16]
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_ADC_Init+0x25c>)
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000ec8:	1e51      	subs	r1, r2, #1
 8000eca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ecc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6103      	str	r3, [r0, #16]
 8000ee0:	e7b9      	b.n	8000e56 <HAL_ADC_Init+0x17e>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000ee2:	6821      	ldr	r1, [r4, #0]
 8000ee4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000ee6:	f023 030f 	bic.w	r3, r3, #15
 8000eea:	69a2      	ldr	r2, [r4, #24]
 8000eec:	3a01      	subs	r2, #1
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	630b      	str	r3, [r1, #48]	; 0x30
 8000ef2:	e7c2      	b.n	8000e7a <HAL_ADC_Init+0x1a2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000efc:	2501      	movs	r5, #1
}
 8000efe:	4628      	mov	r0, r5
 8000f00:	b003      	add	sp, #12
 8000f02:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000f04:	2501      	movs	r5, #1
 8000f06:	e7fa      	b.n	8000efe <HAL_ADC_Init+0x226>
 8000f08:	5fffffc0 	.word	0x5fffffc0
 8000f0c:	6fffffc0 	.word	0x6fffffc0
 8000f10:	20000028 	.word	0x20000028
 8000f14:	053e2d63 	.word	0x053e2d63
 8000f18:	40022000 	.word	0x40022000
 8000f1c:	40022100 	.word	0x40022100
 8000f20:	40022300 	.word	0x40022300
 8000f24:	fff0c003 	.word	0xfff0c003
 8000f28:	ffffbffc 	.word	0xffffbffc
 8000f2c:	58026000 	.word	0x58026000
 8000f30:	58026300 	.word	0x58026300
 8000f34:	fc00f81e 	.word	0xfc00f81e

08000f38 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f38:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8000f3c:	2a01      	cmp	r2, #1
 8000f3e:	f000 80a1 	beq.w	8001084 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
{
 8000f42:	b430      	push	{r4, r5}
 8000f44:	b09a      	sub	sp, #104	; 0x68
 8000f46:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8000f4e:	2200      	movs	r2, #0
 8000f50:	9216      	str	r2, [sp, #88]	; 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8000f52:	9217      	str	r2, [sp, #92]	; 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000f54:	6800      	ldr	r0, [r0, #0]
 8000f56:	4a4c      	ldr	r2, [pc, #304]	; (8001088 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8000f58:	4290      	cmp	r0, r2
 8000f5a:	d042      	beq.n	8000fe2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8000f60:	9a01      	ldr	r2, [sp, #4]
 8000f62:	2a00      	cmp	r2, #0
 8000f64:	d041      	beq.n	8000fea <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f66:	6892      	ldr	r2, [r2, #8]
 8000f68:	f012 0204 	ands.w	r2, r2, #4
 8000f6c:	d000      	beq.n	8000f70 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 8000f6e:	2201      	movs	r2, #1
 8000f70:	6884      	ldr	r4, [r0, #8]
 8000f72:	f014 0f04 	tst.w	r4, #4
 8000f76:	d176      	bne.n	8001066 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	d174      	bne.n	8001066 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8000f7c:	4c42      	ldr	r4, [pc, #264]	; (8001088 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8000f7e:	4a43      	ldr	r2, [pc, #268]	; (800108c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8000f80:	4290      	cmp	r0, r2
 8000f82:	bf18      	it	ne
 8000f84:	42a0      	cmpne	r0, r4
 8000f86:	d139      	bne.n	8000ffc <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8000f88:	f502 7200 	add.w	r2, r2, #512	; 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8000f8c:	6808      	ldr	r0, [r1, #0]
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	d03f      	beq.n	8001012 <HAL_ADCEx_MultiModeConfigChannel+0xda>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8000f92:	6890      	ldr	r0, [r2, #8]
 8000f94:	f420 4040 	bic.w	r0, r0, #49152	; 0xc000
 8000f98:	684c      	ldr	r4, [r1, #4]
 8000f9a:	4320      	orrs	r0, r4
 8000f9c:	6090      	str	r0, [r2, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	4d39      	ldr	r5, [pc, #228]	; (8001088 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8000fa2:	4c3a      	ldr	r4, [pc, #232]	; (800108c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8000fa4:	42a0      	cmp	r0, r4
 8000fa6:	bf18      	it	ne
 8000fa8:	42a8      	cmpne	r0, r5
 8000faa:	d129      	bne.n	8001000 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fac:	68a8      	ldr	r0, [r5, #8]
 8000fae:	f010 0001 	ands.w	r0, r0, #1
 8000fb2:	d000      	beq.n	8000fb6 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	4c35      	ldr	r4, [pc, #212]	; (800108c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8000fb8:	68a4      	ldr	r4, [r4, #8]
 8000fba:	f014 0401 	ands.w	r4, r4, #1
 8000fbe:	d000      	beq.n	8000fc2 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8000fc0:	2401      	movs	r4, #1
 8000fc2:	4320      	orrs	r0, r4
 8000fc4:	bf0c      	ite	eq
 8000fc6:	2001      	moveq	r0, #1
 8000fc8:	2000      	movne	r0, #0
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d056      	beq.n	800107c <HAL_ADCEx_MultiModeConfigChannel+0x144>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8000fce:	6894      	ldr	r4, [r2, #8]
 8000fd0:	482f      	ldr	r0, [pc, #188]	; (8001090 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8000fd2:	4020      	ands	r0, r4
 8000fd4:	680c      	ldr	r4, [r1, #0]
 8000fd6:	6889      	ldr	r1, [r1, #8]
 8000fd8:	4321      	orrs	r1, r4
 8000fda:	4308      	orrs	r0, r1
 8000fdc:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fde:	2000      	movs	r0, #0
 8000fe0:	e046      	b.n	8001070 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000fe2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000fe6:	9201      	str	r2, [sp, #4]
 8000fe8:	e7ba      	b.n	8000f60 <HAL_ADCEx_MultiModeConfigChannel+0x28>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000fec:	f042 0220 	orr.w	r2, r2, #32
 8000ff0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	e03c      	b.n	8001076 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8000ffc:	4a25      	ldr	r2, [pc, #148]	; (8001094 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8000ffe:	e7c5      	b.n	8000f8c <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8001000:	4825      	ldr	r0, [pc, #148]	; (8001098 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8001002:	6880      	ldr	r0, [r0, #8]
 8001004:	f010 0001 	ands.w	r0, r0, #1
 8001008:	d000      	beq.n	800100c <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 800100a:	2001      	movs	r0, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800100c:	f080 0001 	eor.w	r0, r0, #1
 8001010:	e7db      	b.n	8000fca <HAL_ADCEx_MultiModeConfigChannel+0x92>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001012:	6891      	ldr	r1, [r2, #8]
 8001014:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8001018:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	4c1a      	ldr	r4, [pc, #104]	; (8001088 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800101e:	481b      	ldr	r0, [pc, #108]	; (800108c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001020:	4281      	cmp	r1, r0
 8001022:	bf18      	it	ne
 8001024:	42a1      	cmpne	r1, r4
 8001026:	d115      	bne.n	8001054 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001028:	68a1      	ldr	r1, [r4, #8]
 800102a:	f011 0101 	ands.w	r1, r1, #1
 800102e:	d000      	beq.n	8001032 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8001030:	2101      	movs	r1, #1
 8001032:	4816      	ldr	r0, [pc, #88]	; (800108c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001034:	6880      	ldr	r0, [r0, #8]
 8001036:	f010 0001 	ands.w	r0, r0, #1
 800103a:	d000      	beq.n	800103e <HAL_ADCEx_MultiModeConfigChannel+0x106>
 800103c:	2001      	movs	r0, #1
 800103e:	4301      	orrs	r1, r0
 8001040:	bf0c      	ite	eq
 8001042:	2101      	moveq	r1, #1
 8001044:	2100      	movne	r1, #0
 8001046:	b1d9      	cbz	r1, 8001080 <HAL_ADCEx_MultiModeConfigChannel+0x148>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001048:	6890      	ldr	r0, [r2, #8]
 800104a:	4911      	ldr	r1, [pc, #68]	; (8001090 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800104c:	4001      	ands	r1, r0
 800104e:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001050:	2000      	movs	r0, #0
 8001052:	e00d      	b.n	8001070 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8001054:	4910      	ldr	r1, [pc, #64]	; (8001098 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8001056:	6889      	ldr	r1, [r1, #8]
 8001058:	f011 0101 	ands.w	r1, r1, #1
 800105c:	d000      	beq.n	8001060 <HAL_ADCEx_MultiModeConfigChannel+0x128>
 800105e:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001060:	f081 0101 	eor.w	r1, r1, #1
 8001064:	e7ef      	b.n	8001046 <HAL_ADCEx_MultiModeConfigChannel+0x10e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001066:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001068:	f042 0220 	orr.w	r2, r2, #32
 800106c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800106e:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8001076:	b01a      	add	sp, #104	; 0x68
 8001078:	bc30      	pop	{r4, r5}
 800107a:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107c:	2000      	movs	r0, #0
 800107e:	e7f7      	b.n	8001070 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8001080:	2000      	movs	r0, #0
 8001082:	e7f5      	b.n	8001070 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  __HAL_LOCK(hadc);
 8001084:	2002      	movs	r0, #2
}
 8001086:	4770      	bx	lr
 8001088:	40022000 	.word	0x40022000
 800108c:	40022100 	.word	0x40022100
 8001090:	fffff0e0 	.word	0xfffff0e0
 8001094:	58026300 	.word	0x58026300
 8001098:	58026000 	.word	0x58026000

0800109c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4906      	ldr	r1, [pc, #24]	; (80010b8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800109e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010a4:	041b      	lsls	r3, r3, #16
 80010a6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	0200      	lsls	r0, r0, #8
 80010aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ae:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80010b0:	4a02      	ldr	r2, [pc, #8]	; (80010bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80010b2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80010b4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	05fa0000 	.word	0x05fa0000

080010c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_NVIC_SetPriority+0x58>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ca:	f1c3 0407 	rsb	r4, r3, #7
 80010ce:	2c04      	cmp	r4, #4
 80010d0:	bf28      	it	cs
 80010d2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d4:	1d1d      	adds	r5, r3, #4
 80010d6:	2d06      	cmp	r5, #6
 80010d8:	d914      	bls.n	8001104 <HAL_NVIC_SetPriority+0x44>
 80010da:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80010e0:	fa05 f404 	lsl.w	r4, r5, r4
 80010e4:	ea21 0104 	bic.w	r1, r1, r4
 80010e8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ea:	fa05 f303 	lsl.w	r3, r5, r3
 80010ee:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80010f4:	2800      	cmp	r0, #0
 80010f6:	db07      	blt.n	8001108 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	0109      	lsls	r1, r1, #4
 80010fa:	b2c9      	uxtb	r1, r1
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_NVIC_SetPriority+0x5c>)
 80010fe:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001100:	bc30      	pop	{r4, r5}
 8001102:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001104:	2300      	movs	r3, #0
 8001106:	e7e9      	b.n	80010dc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	f000 000f 	and.w	r0, r0, #15
 800110c:	0109      	lsls	r1, r1, #4
 800110e:	b2c9      	uxtb	r1, r1
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_NVIC_SetPriority+0x60>)
 8001112:	5419      	strb	r1, [r3, r0]
 8001114:	e7f4      	b.n	8001100 <HAL_NVIC_SetPriority+0x40>
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00
 800111c:	e000e400 	.word	0xe000e400
 8001120:	e000ed14 	.word	0xe000ed14

08001124 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001124:	2800      	cmp	r0, #0
 8001126:	db07      	blt.n	8001138 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001128:	f000 021f 	and.w	r2, r0, #31
 800112c:	0940      	lsrs	r0, r0, #5
 800112e:	2301      	movs	r3, #1
 8001130:	4093      	lsls	r3, r2
 8001132:	4a02      	ldr	r2, [pc, #8]	; (800113c <HAL_NVIC_EnableIRQ+0x18>)
 8001134:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000e100 	.word	0xe000e100

08001140 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	3801      	subs	r0, #1
 8001142:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001146:	d20a      	bcs.n	800115e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_SYSTICK_Config+0x24>)
 800114a:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_SYSTICK_Config+0x28>)
 800114e:	21f0      	movs	r1, #240	; 0xf0
 8001150:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	2000      	movs	r0, #0
 8001156:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800116c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_MPU_Disable+0x18>)
 8001172:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001178:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800117a:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_MPU_Disable+0x1c>)
 800117c:	2200      	movs	r2, #0
 800117e:	605a      	str	r2, [r3, #4]
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00
 8001188:	e000ed90 	.word	0xe000ed90

0800118c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800118c:	f040 0001 	orr.w	r0, r0, #1
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_MPU_Enable+0x1c>)
 8001192:	6058      	str	r0, [r3, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001194:	4a05      	ldr	r2, [pc, #20]	; (80011ac <HAL_MPU_Enable+0x20>)
 8001196:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800119e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011a2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011a6:	4770      	bx	lr
 80011a8:	e000ed90 	.word	0xe000ed90
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011b0:	7842      	ldrb	r2, [r0, #1]
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <HAL_MPU_ConfigRegion+0x50>)
 80011b4:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80011b6:	7803      	ldrb	r3, [r0, #0]
 80011b8:	b1eb      	cbz	r3, 80011f6 <HAL_MPU_ConfigRegion+0x46>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80011ba:	6843      	ldr	r3, [r0, #4]
 80011bc:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_MPU_ConfigRegion+0x50>)
 80011be:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011c0:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011c2:	7ac3      	ldrb	r3, [r0, #11]
 80011c4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011c6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011ca:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011cc:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011d0:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011d2:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011d6:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011d8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011dc:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011e2:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011e8:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011ea:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011ee:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011f0:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011f2:	6113      	str	r3, [r2, #16]
 80011f4:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 80011f6:	4b02      	ldr	r3, [pc, #8]	; (8001200 <HAL_MPU_ConfigRegion+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80011fc:	611a      	str	r2, [r3, #16]
  }
}
 80011fe:	4770      	bx	lr
 8001200:	e000ed90 	.word	0xe000ed90

08001204 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001204:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001206:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001208:	6804      	ldr	r4, [r0, #0]
 800120a:	4e65      	ldr	r6, [pc, #404]	; (80013a0 <DMA_SetConfig+0x19c>)
 800120c:	4d65      	ldr	r5, [pc, #404]	; (80013a4 <DMA_SetConfig+0x1a0>)
 800120e:	42ac      	cmp	r4, r5
 8001210:	bf18      	it	ne
 8001212:	42b4      	cmpne	r4, r6
 8001214:	d042      	beq.n	800129c <DMA_SetConfig+0x98>
 8001216:	3518      	adds	r5, #24
 8001218:	42ac      	cmp	r4, r5
 800121a:	d03f      	beq.n	800129c <DMA_SetConfig+0x98>
 800121c:	3518      	adds	r5, #24
 800121e:	42ac      	cmp	r4, r5
 8001220:	d03c      	beq.n	800129c <DMA_SetConfig+0x98>
 8001222:	3518      	adds	r5, #24
 8001224:	42ac      	cmp	r4, r5
 8001226:	d039      	beq.n	800129c <DMA_SetConfig+0x98>
 8001228:	3518      	adds	r5, #24
 800122a:	42ac      	cmp	r4, r5
 800122c:	d036      	beq.n	800129c <DMA_SetConfig+0x98>
 800122e:	3518      	adds	r5, #24
 8001230:	42ac      	cmp	r4, r5
 8001232:	d033      	beq.n	800129c <DMA_SetConfig+0x98>
 8001234:	3518      	adds	r5, #24
 8001236:	42ac      	cmp	r4, r5
 8001238:	d030      	beq.n	800129c <DMA_SetConfig+0x98>
 800123a:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800123e:	42ac      	cmp	r4, r5
 8001240:	d02c      	beq.n	800129c <DMA_SetConfig+0x98>
 8001242:	3518      	adds	r5, #24
 8001244:	42ac      	cmp	r4, r5
 8001246:	d029      	beq.n	800129c <DMA_SetConfig+0x98>
 8001248:	3518      	adds	r5, #24
 800124a:	42ac      	cmp	r4, r5
 800124c:	d026      	beq.n	800129c <DMA_SetConfig+0x98>
 800124e:	3518      	adds	r5, #24
 8001250:	42ac      	cmp	r4, r5
 8001252:	d023      	beq.n	800129c <DMA_SetConfig+0x98>
 8001254:	3518      	adds	r5, #24
 8001256:	42ac      	cmp	r4, r5
 8001258:	d020      	beq.n	800129c <DMA_SetConfig+0x98>
 800125a:	3518      	adds	r5, #24
 800125c:	42ac      	cmp	r4, r5
 800125e:	d01d      	beq.n	800129c <DMA_SetConfig+0x98>
 8001260:	3518      	adds	r5, #24
 8001262:	42ac      	cmp	r4, r5
 8001264:	d01a      	beq.n	800129c <DMA_SetConfig+0x98>
 8001266:	3518      	adds	r5, #24
 8001268:	42ac      	cmp	r4, r5
 800126a:	d017      	beq.n	800129c <DMA_SetConfig+0x98>
 800126c:	4d4e      	ldr	r5, [pc, #312]	; (80013a8 <DMA_SetConfig+0x1a4>)
 800126e:	42ac      	cmp	r4, r5
 8001270:	d014      	beq.n	800129c <DMA_SetConfig+0x98>
 8001272:	3514      	adds	r5, #20
 8001274:	42ac      	cmp	r4, r5
 8001276:	d011      	beq.n	800129c <DMA_SetConfig+0x98>
 8001278:	3514      	adds	r5, #20
 800127a:	42ac      	cmp	r4, r5
 800127c:	d00e      	beq.n	800129c <DMA_SetConfig+0x98>
 800127e:	3514      	adds	r5, #20
 8001280:	42ac      	cmp	r4, r5
 8001282:	d00b      	beq.n	800129c <DMA_SetConfig+0x98>
 8001284:	3514      	adds	r5, #20
 8001286:	42ac      	cmp	r4, r5
 8001288:	d008      	beq.n	800129c <DMA_SetConfig+0x98>
 800128a:	3514      	adds	r5, #20
 800128c:	42ac      	cmp	r4, r5
 800128e:	d005      	beq.n	800129c <DMA_SetConfig+0x98>
 8001290:	3514      	adds	r5, #20
 8001292:	42ac      	cmp	r4, r5
 8001294:	d002      	beq.n	800129c <DMA_SetConfig+0x98>
 8001296:	3514      	adds	r5, #20
 8001298:	42ac      	cmp	r4, r5
 800129a:	d107      	bne.n	80012ac <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800129c:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800129e:	6e85      	ldr	r5, [r0, #104]	; 0x68
 80012a0:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80012a2:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80012a4:	b114      	cbz	r4, 80012ac <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012a6:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80012a8:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80012aa:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012ac:	6804      	ldr	r4, [r0, #0]
 80012ae:	4e3c      	ldr	r6, [pc, #240]	; (80013a0 <DMA_SetConfig+0x19c>)
 80012b0:	4d3c      	ldr	r5, [pc, #240]	; (80013a4 <DMA_SetConfig+0x1a0>)
 80012b2:	42ac      	cmp	r4, r5
 80012b4:	bf18      	it	ne
 80012b6:	42b4      	cmpne	r4, r6
 80012b8:	d052      	beq.n	8001360 <DMA_SetConfig+0x15c>
 80012ba:	3518      	adds	r5, #24
 80012bc:	42ac      	cmp	r4, r5
 80012be:	d04f      	beq.n	8001360 <DMA_SetConfig+0x15c>
 80012c0:	3518      	adds	r5, #24
 80012c2:	42ac      	cmp	r4, r5
 80012c4:	d04c      	beq.n	8001360 <DMA_SetConfig+0x15c>
 80012c6:	3518      	adds	r5, #24
 80012c8:	42ac      	cmp	r4, r5
 80012ca:	d049      	beq.n	8001360 <DMA_SetConfig+0x15c>
 80012cc:	3518      	adds	r5, #24
 80012ce:	42ac      	cmp	r4, r5
 80012d0:	d046      	beq.n	8001360 <DMA_SetConfig+0x15c>
 80012d2:	3518      	adds	r5, #24
 80012d4:	42ac      	cmp	r4, r5
 80012d6:	d043      	beq.n	8001360 <DMA_SetConfig+0x15c>
 80012d8:	3518      	adds	r5, #24
 80012da:	42ac      	cmp	r4, r5
 80012dc:	d040      	beq.n	8001360 <DMA_SetConfig+0x15c>
 80012de:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80012e2:	42ac      	cmp	r4, r5
 80012e4:	d03c      	beq.n	8001360 <DMA_SetConfig+0x15c>
 80012e6:	3518      	adds	r5, #24
 80012e8:	42ac      	cmp	r4, r5
 80012ea:	d039      	beq.n	8001360 <DMA_SetConfig+0x15c>
 80012ec:	3518      	adds	r5, #24
 80012ee:	42ac      	cmp	r4, r5
 80012f0:	d036      	beq.n	8001360 <DMA_SetConfig+0x15c>
 80012f2:	3518      	adds	r5, #24
 80012f4:	42ac      	cmp	r4, r5
 80012f6:	d033      	beq.n	8001360 <DMA_SetConfig+0x15c>
 80012f8:	3518      	adds	r5, #24
 80012fa:	42ac      	cmp	r4, r5
 80012fc:	d030      	beq.n	8001360 <DMA_SetConfig+0x15c>
 80012fe:	3518      	adds	r5, #24
 8001300:	42ac      	cmp	r4, r5
 8001302:	d02d      	beq.n	8001360 <DMA_SetConfig+0x15c>
 8001304:	3518      	adds	r5, #24
 8001306:	42ac      	cmp	r4, r5
 8001308:	d02a      	beq.n	8001360 <DMA_SetConfig+0x15c>
 800130a:	3518      	adds	r5, #24
 800130c:	42ac      	cmp	r4, r5
 800130e:	d027      	beq.n	8001360 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001310:	4e25      	ldr	r6, [pc, #148]	; (80013a8 <DMA_SetConfig+0x1a4>)
 8001312:	4d26      	ldr	r5, [pc, #152]	; (80013ac <DMA_SetConfig+0x1a8>)
 8001314:	42ac      	cmp	r4, r5
 8001316:	bf18      	it	ne
 8001318:	42b4      	cmpne	r4, r6
 800131a:	d011      	beq.n	8001340 <DMA_SetConfig+0x13c>
 800131c:	4d24      	ldr	r5, [pc, #144]	; (80013b0 <DMA_SetConfig+0x1ac>)
 800131e:	42ac      	cmp	r4, r5
 8001320:	d00e      	beq.n	8001340 <DMA_SetConfig+0x13c>
 8001322:	3514      	adds	r5, #20
 8001324:	42ac      	cmp	r4, r5
 8001326:	d00b      	beq.n	8001340 <DMA_SetConfig+0x13c>
 8001328:	3514      	adds	r5, #20
 800132a:	42ac      	cmp	r4, r5
 800132c:	d008      	beq.n	8001340 <DMA_SetConfig+0x13c>
 800132e:	3514      	adds	r5, #20
 8001330:	42ac      	cmp	r4, r5
 8001332:	d005      	beq.n	8001340 <DMA_SetConfig+0x13c>
 8001334:	3514      	adds	r5, #20
 8001336:	42ac      	cmp	r4, r5
 8001338:	d002      	beq.n	8001340 <DMA_SetConfig+0x13c>
 800133a:	3514      	adds	r5, #20
 800133c:	42ac      	cmp	r4, r5
 800133e:	d123      	bne.n	8001388 <DMA_SetConfig+0x184>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001340:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001342:	f004 051f 	and.w	r5, r4, #31
 8001346:	2401      	movs	r4, #1
 8001348:	40ac      	lsls	r4, r5
 800134a:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800134c:	6804      	ldr	r4, [r0, #0]
 800134e:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001350:	6883      	ldr	r3, [r0, #8]
 8001352:	2b40      	cmp	r3, #64	; 0x40
 8001354:	d01f      	beq.n	8001396 <DMA_SetConfig+0x192>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001356:	6803      	ldr	r3, [r0, #0]
 8001358:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800135a:	6803      	ldr	r3, [r0, #0]
 800135c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800135e:	e013      	b.n	8001388 <DMA_SetConfig+0x184>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001360:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001362:	f004 051f 	and.w	r5, r4, #31
 8001366:	243f      	movs	r4, #63	; 0x3f
 8001368:	40ac      	lsls	r4, r5
 800136a:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800136c:	6805      	ldr	r5, [r0, #0]
 800136e:	682c      	ldr	r4, [r5, #0]
 8001370:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001374:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8001376:	6804      	ldr	r4, [r0, #0]
 8001378:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800137a:	6883      	ldr	r3, [r0, #8]
 800137c:	2b40      	cmp	r3, #64	; 0x40
 800137e:	d005      	beq.n	800138c <DMA_SetConfig+0x188>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8001380:	6803      	ldr	r3, [r0, #0]
 8001382:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8001384:	6803      	ldr	r3, [r0, #0]
 8001386:	60da      	str	r2, [r3, #12]
}
 8001388:	bcf0      	pop	{r4, r5, r6, r7}
 800138a:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800138c:	6803      	ldr	r3, [r0, #0]
 800138e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8001390:	6803      	ldr	r3, [r0, #0]
 8001392:	60d9      	str	r1, [r3, #12]
 8001394:	e7f8      	b.n	8001388 <DMA_SetConfig+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001396:	6803      	ldr	r3, [r0, #0]
 8001398:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800139a:	6803      	ldr	r3, [r0, #0]
 800139c:	60d9      	str	r1, [r3, #12]
 800139e:	e7f3      	b.n	8001388 <DMA_SetConfig+0x184>
 80013a0:	40020010 	.word	0x40020010
 80013a4:	40020028 	.word	0x40020028
 80013a8:	58025408 	.word	0x58025408
 80013ac:	5802541c 	.word	0x5802541c
 80013b0:	58025430 	.word	0x58025430

080013b4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013b4:	6803      	ldr	r3, [r0, #0]
 80013b6:	4927      	ldr	r1, [pc, #156]	; (8001454 <DMA_CalcBaseAndBitshift+0xa0>)
 80013b8:	4a27      	ldr	r2, [pc, #156]	; (8001458 <DMA_CalcBaseAndBitshift+0xa4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	bf18      	it	ne
 80013be:	428b      	cmpne	r3, r1
 80013c0:	d02f      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 80013c2:	3218      	adds	r2, #24
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d02c      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 80013c8:	3218      	adds	r2, #24
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d029      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 80013ce:	3218      	adds	r2, #24
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d026      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 80013d4:	3218      	adds	r2, #24
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d023      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 80013da:	3218      	adds	r2, #24
 80013dc:	4293      	cmp	r3, r2
 80013de:	d020      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 80013e0:	3218      	adds	r2, #24
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01d      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 80013e6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d019      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 80013ee:	3218      	adds	r2, #24
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d016      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 80013f4:	3218      	adds	r2, #24
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 80013fa:	3218      	adds	r2, #24
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d010      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 8001400:	3218      	adds	r2, #24
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 8001406:	3218      	adds	r2, #24
 8001408:	4293      	cmp	r3, r2
 800140a:	d00a      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 800140c:	3218      	adds	r2, #24
 800140e:	4293      	cmp	r3, r2
 8001410:	d007      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
 8001412:	3218      	adds	r2, #24
 8001414:	4293      	cmp	r3, r2
 8001416:	d004      	beq.n	8001422 <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001418:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800141c:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 800141e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001420:	4770      	bx	lr
{
 8001422:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001424:	b2d9      	uxtb	r1, r3
 8001426:	3910      	subs	r1, #16
 8001428:	4a0c      	ldr	r2, [pc, #48]	; (800145c <DMA_CalcBaseAndBitshift+0xa8>)
 800142a:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800142e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001432:	4c0b      	ldr	r4, [pc, #44]	; (8001460 <DMA_CalcBaseAndBitshift+0xac>)
 8001434:	5ca2      	ldrb	r2, [r4, r2]
 8001436:	65c2      	str	r2, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 8001438:	295f      	cmp	r1, #95	; 0x5f
 800143a:	d907      	bls.n	800144c <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800143c:	4a09      	ldr	r2, [pc, #36]	; (8001464 <DMA_CalcBaseAndBitshift+0xb0>)
 800143e:	401a      	ands	r2, r3
 8001440:	3204      	adds	r2, #4
 8001442:	6582      	str	r2, [r0, #88]	; 0x58
}
 8001444:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800144a:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800144c:	4a05      	ldr	r2, [pc, #20]	; (8001464 <DMA_CalcBaseAndBitshift+0xb0>)
 800144e:	401a      	ands	r2, r3
 8001450:	6582      	str	r2, [r0, #88]	; 0x58
 8001452:	e7f7      	b.n	8001444 <DMA_CalcBaseAndBitshift+0x90>
 8001454:	40020010 	.word	0x40020010
 8001458:	40020028 	.word	0x40020028
 800145c:	aaaaaaab 	.word	0xaaaaaaab
 8001460:	0800c4d8 	.word	0x0800c4d8
 8001464:	fffffc00 	.word	0xfffffc00

08001468 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001468:	6983      	ldr	r3, [r0, #24]
 800146a:	b99b      	cbnz	r3, 8001494 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 800146c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800146e:	2b01      	cmp	r3, #1
 8001470:	d00a      	beq.n	8001488 <DMA_CheckFifoParam+0x20>
 8001472:	2b02      	cmp	r3, #2
 8001474:	d002      	beq.n	800147c <DMA_CheckFifoParam+0x14>
 8001476:	b10b      	cbz	r3, 800147c <DMA_CheckFifoParam+0x14>
 8001478:	2000      	movs	r0, #0
 800147a:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800147c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800147e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001482:	d12a      	bne.n	80014da <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001484:	2000      	movs	r0, #0
 8001486:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001488:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800148a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800148e:	d026      	beq.n	80014de <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8001490:	2000      	movs	r0, #0
 8001492:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001498:	d00a      	beq.n	80014b0 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800149a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800149c:	2b02      	cmp	r3, #2
 800149e:	d926      	bls.n	80014ee <DMA_CheckFifoParam+0x86>
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d126      	bne.n	80014f2 <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014a6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014aa:	d124      	bne.n	80014f6 <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 80014ac:	2000      	movs	r0, #0
 80014ae:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 80014b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d803      	bhi.n	80014be <DMA_CheckFifoParam+0x56>
 80014b6:	e8df f003 	tbb	[pc, r3]
 80014ba:	0414      	.short	0x0414
 80014bc:	0a14      	.short	0x0a14
 80014be:	2000      	movs	r0, #0
 80014c0:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014c8:	d10d      	bne.n	80014e6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80014ca:	2000      	movs	r0, #0
 80014cc:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014d4:	d009      	beq.n	80014ea <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80014d6:	2000      	movs	r0, #0
 80014d8:	4770      	bx	lr
          status = HAL_ERROR;
 80014da:	2001      	movs	r0, #1
 80014dc:	4770      	bx	lr
          status = HAL_ERROR;
 80014de:	2001      	movs	r0, #1
 80014e0:	4770      	bx	lr
        status = HAL_ERROR;
 80014e2:	2001      	movs	r0, #1
 80014e4:	4770      	bx	lr
          status = HAL_ERROR;
 80014e6:	2001      	movs	r0, #1
 80014e8:	4770      	bx	lr
          status = HAL_ERROR;
 80014ea:	2001      	movs	r0, #1
 80014ec:	4770      	bx	lr
        status = HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
 80014f0:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 80014f2:	2000      	movs	r0, #0
 80014f4:	4770      	bx	lr
        {
          status = HAL_ERROR;
 80014f6:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 80014f8:	4770      	bx	lr
	...

080014fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80014fc:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80014fe:	4922      	ldr	r1, [pc, #136]	; (8001588 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001500:	4a22      	ldr	r2, [pc, #136]	; (800158c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8001502:	4293      	cmp	r3, r2
 8001504:	bf18      	it	ne
 8001506:	428b      	cmpne	r3, r1
 8001508:	d028      	beq.n	800155c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 800150a:	3214      	adds	r2, #20
 800150c:	4293      	cmp	r3, r2
 800150e:	d025      	beq.n	800155c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001510:	3214      	adds	r2, #20
 8001512:	4293      	cmp	r3, r2
 8001514:	d022      	beq.n	800155c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001516:	3214      	adds	r2, #20
 8001518:	4293      	cmp	r3, r2
 800151a:	d01f      	beq.n	800155c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 800151c:	3214      	adds	r2, #20
 800151e:	4293      	cmp	r3, r2
 8001520:	d01c      	beq.n	800155c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001522:	3214      	adds	r2, #20
 8001524:	4293      	cmp	r3, r2
 8001526:	d019      	beq.n	800155c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001528:	3214      	adds	r2, #20
 800152a:	4293      	cmp	r3, r2
 800152c:	d016      	beq.n	800155c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800152e:	b2da      	uxtb	r2, r3
 8001530:	3a10      	subs	r2, #16
 8001532:	4917      	ldr	r1, [pc, #92]	; (8001590 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8001534:	fba1 1202 	umull	r1, r2, r1, r2
 8001538:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800153a:	4916      	ldr	r1, [pc, #88]	; (8001594 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 800153c:	4419      	add	r1, r3
 800153e:	29a8      	cmp	r1, #168	; 0xa8
 8001540:	d91f      	bls.n	8001582 <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 800154c:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800154e:	f002 021f 	and.w	r2, r2, #31
 8001552:	2301      	movs	r3, #1
 8001554:	fa03 f202 	lsl.w	r2, r3, r2
 8001558:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 800155a:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800155c:	b2db      	uxtb	r3, r3
 800155e:	3b08      	subs	r3, #8
 8001560:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001568:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 800156c:	0092      	lsls	r2, r2, #2
 800156e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001570:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001572:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001574:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8001578:	2201      	movs	r2, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	6683      	str	r3, [r0, #104]	; 0x68
 8001580:	4770      	bx	lr
      stream_number += 8U;
 8001582:	3208      	adds	r2, #8
 8001584:	e7dd      	b.n	8001542 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8001586:	bf00      	nop
 8001588:	58025408 	.word	0x58025408
 800158c:	5802541c 	.word	0x5802541c
 8001590:	aaaaaaab 	.word	0xaaaaaaab
 8001594:	bffdfbf0 	.word	0xbffdfbf0
 8001598:	10008200 	.word	0x10008200
 800159c:	40020880 	.word	0x40020880
 80015a0:	cccccccd 	.word	0xcccccccd
 80015a4:	16009600 	.word	0x16009600
 80015a8:	58025880 	.word	0x58025880

080015ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80015ac:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80015ae:	1e4a      	subs	r2, r1, #1
 80015b0:	2a07      	cmp	r2, #7
 80015b2:	d82c      	bhi.n	800160e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
 80015b4:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80015b6:	6803      	ldr	r3, [r0, #0]
 80015b8:	4d15      	ldr	r5, [pc, #84]	; (8001610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 80015ba:	4c16      	ldr	r4, [pc, #88]	; (8001614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80015bc:	42a3      	cmp	r3, r4
 80015be:	bf18      	it	ne
 80015c0:	42ab      	cmpne	r3, r5
 80015c2:	d018      	beq.n	80015f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80015c4:	3414      	adds	r4, #20
 80015c6:	42a3      	cmp	r3, r4
 80015c8:	d015      	beq.n	80015f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80015ca:	3414      	adds	r4, #20
 80015cc:	42a3      	cmp	r3, r4
 80015ce:	d012      	beq.n	80015f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80015d0:	3414      	adds	r4, #20
 80015d2:	42a3      	cmp	r3, r4
 80015d4:	d00f      	beq.n	80015f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80015d6:	3414      	adds	r4, #20
 80015d8:	42a3      	cmp	r3, r4
 80015da:	d00c      	beq.n	80015f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80015dc:	3414      	adds	r4, #20
 80015de:	42a3      	cmp	r3, r4
 80015e0:	d009      	beq.n	80015f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80015e2:	3414      	adds	r4, #20
 80015e4:	42a3      	cmp	r3, r4
 80015e6:	d006      	beq.n	80015f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 80015ea:	440b      	add	r3, r1
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 80015f2:	6703      	str	r3, [r0, #112]	; 0x70
 80015f4:	e005      	b.n	8001602 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 80015f8:	440b      	add	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8001600:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001602:	2301      	movs	r3, #1
 8001604:	fa03 f202 	lsl.w	r2, r3, r2
 8001608:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 800160a:	bc30      	pop	{r4, r5}
 800160c:	4770      	bx	lr
 800160e:	4770      	bx	lr
 8001610:	58025408 	.word	0x58025408
 8001614:	5802541c 	.word	0x5802541c
 8001618:	1000823f 	.word	0x1000823f
 800161c:	40020940 	.word	0x40020940
 8001620:	1600963f 	.word	0x1600963f
 8001624:	58025940 	.word	0x58025940

08001628 <HAL_DMA_Init>:
{
 8001628:	b570      	push	{r4, r5, r6, lr}
 800162a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7fe feb6 	bl	800039c <HAL_GetTick>
  if(hdma == NULL)
 8001630:	2c00      	cmp	r4, #0
 8001632:	f000 81bb 	beq.w	80019ac <HAL_DMA_Init+0x384>
 8001636:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	49af      	ldr	r1, [pc, #700]	; (80018f8 <HAL_DMA_Init+0x2d0>)
 800163c:	4aaf      	ldr	r2, [pc, #700]	; (80018fc <HAL_DMA_Init+0x2d4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	bf18      	it	ne
 8001642:	428b      	cmpne	r3, r1
 8001644:	bf0c      	ite	eq
 8001646:	2201      	moveq	r2, #1
 8001648:	2200      	movne	r2, #0
 800164a:	d050      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 800164c:	3130      	adds	r1, #48	; 0x30
 800164e:	428b      	cmp	r3, r1
 8001650:	d04d      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 8001652:	3118      	adds	r1, #24
 8001654:	428b      	cmp	r3, r1
 8001656:	d04a      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 8001658:	3118      	adds	r1, #24
 800165a:	428b      	cmp	r3, r1
 800165c:	d047      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 800165e:	3118      	adds	r1, #24
 8001660:	428b      	cmp	r3, r1
 8001662:	d044      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 8001664:	3118      	adds	r1, #24
 8001666:	428b      	cmp	r3, r1
 8001668:	d041      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 800166a:	3118      	adds	r1, #24
 800166c:	428b      	cmp	r3, r1
 800166e:	d03e      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 8001670:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001674:	428b      	cmp	r3, r1
 8001676:	d03a      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 8001678:	3118      	adds	r1, #24
 800167a:	428b      	cmp	r3, r1
 800167c:	d037      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 800167e:	3118      	adds	r1, #24
 8001680:	428b      	cmp	r3, r1
 8001682:	d034      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 8001684:	3118      	adds	r1, #24
 8001686:	428b      	cmp	r3, r1
 8001688:	d031      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 800168a:	3118      	adds	r1, #24
 800168c:	428b      	cmp	r3, r1
 800168e:	d02e      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 8001690:	3118      	adds	r1, #24
 8001692:	428b      	cmp	r3, r1
 8001694:	d02b      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 8001696:	3118      	adds	r1, #24
 8001698:	428b      	cmp	r3, r1
 800169a:	d028      	beq.n	80016ee <HAL_DMA_Init+0xc6>
 800169c:	3118      	adds	r1, #24
 800169e:	428b      	cmp	r3, r1
 80016a0:	d025      	beq.n	80016ee <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016a2:	4997      	ldr	r1, [pc, #604]	; (8001900 <HAL_DMA_Init+0x2d8>)
 80016a4:	4a97      	ldr	r2, [pc, #604]	; (8001904 <HAL_DMA_Init+0x2dc>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	bf18      	it	ne
 80016aa:	428b      	cmpne	r3, r1
 80016ac:	f000 8136 	beq.w	800191c <HAL_DMA_Init+0x2f4>
 80016b0:	4a95      	ldr	r2, [pc, #596]	; (8001908 <HAL_DMA_Init+0x2e0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	f000 8132 	beq.w	800191c <HAL_DMA_Init+0x2f4>
 80016b8:	3214      	adds	r2, #20
 80016ba:	4293      	cmp	r3, r2
 80016bc:	f000 812e 	beq.w	800191c <HAL_DMA_Init+0x2f4>
 80016c0:	3214      	adds	r2, #20
 80016c2:	4293      	cmp	r3, r2
 80016c4:	f000 812a 	beq.w	800191c <HAL_DMA_Init+0x2f4>
 80016c8:	3214      	adds	r2, #20
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f000 8126 	beq.w	800191c <HAL_DMA_Init+0x2f4>
 80016d0:	3214      	adds	r2, #20
 80016d2:	4293      	cmp	r3, r2
 80016d4:	f000 8122 	beq.w	800191c <HAL_DMA_Init+0x2f4>
 80016d8:	3214      	adds	r2, #20
 80016da:	4293      	cmp	r3, r2
 80016dc:	f000 811e 	beq.w	800191c <HAL_DMA_Init+0x2f4>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016e0:	2340      	movs	r3, #64	; 0x40
 80016e2:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016e4:	2303      	movs	r3, #3
 80016e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80016ea:	2001      	movs	r0, #1
 80016ec:	e04a      	b.n	8001784 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 80016ee:	2100      	movs	r1, #0
 80016f0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 80016f4:	2102      	movs	r1, #2
 80016f6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80016fa:	bb7a      	cbnz	r2, 800175c <HAL_DMA_Init+0x134>
 80016fc:	4a83      	ldr	r2, [pc, #524]	; (800190c <HAL_DMA_Init+0x2e4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d02c      	beq.n	800175c <HAL_DMA_Init+0x134>
 8001702:	3218      	adds	r2, #24
 8001704:	4293      	cmp	r3, r2
 8001706:	d029      	beq.n	800175c <HAL_DMA_Init+0x134>
 8001708:	3218      	adds	r2, #24
 800170a:	4293      	cmp	r3, r2
 800170c:	d026      	beq.n	800175c <HAL_DMA_Init+0x134>
 800170e:	3218      	adds	r2, #24
 8001710:	4293      	cmp	r3, r2
 8001712:	d023      	beq.n	800175c <HAL_DMA_Init+0x134>
 8001714:	3218      	adds	r2, #24
 8001716:	4293      	cmp	r3, r2
 8001718:	d020      	beq.n	800175c <HAL_DMA_Init+0x134>
 800171a:	3218      	adds	r2, #24
 800171c:	4293      	cmp	r3, r2
 800171e:	d01d      	beq.n	800175c <HAL_DMA_Init+0x134>
 8001720:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001724:	4293      	cmp	r3, r2
 8001726:	d019      	beq.n	800175c <HAL_DMA_Init+0x134>
 8001728:	3218      	adds	r2, #24
 800172a:	4293      	cmp	r3, r2
 800172c:	d016      	beq.n	800175c <HAL_DMA_Init+0x134>
 800172e:	3218      	adds	r2, #24
 8001730:	4293      	cmp	r3, r2
 8001732:	d013      	beq.n	800175c <HAL_DMA_Init+0x134>
 8001734:	3218      	adds	r2, #24
 8001736:	4293      	cmp	r3, r2
 8001738:	d010      	beq.n	800175c <HAL_DMA_Init+0x134>
 800173a:	3218      	adds	r2, #24
 800173c:	4293      	cmp	r3, r2
 800173e:	d00d      	beq.n	800175c <HAL_DMA_Init+0x134>
 8001740:	3218      	adds	r2, #24
 8001742:	4293      	cmp	r3, r2
 8001744:	d00a      	beq.n	800175c <HAL_DMA_Init+0x134>
 8001746:	3218      	adds	r2, #24
 8001748:	4293      	cmp	r3, r2
 800174a:	d007      	beq.n	800175c <HAL_DMA_Init+0x134>
 800174c:	3218      	adds	r2, #24
 800174e:	4293      	cmp	r3, r2
 8001750:	d004      	beq.n	800175c <HAL_DMA_Init+0x134>
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	f022 0201 	bic.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e003      	b.n	8001764 <HAL_DMA_Init+0x13c>
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	f012 0f01 	tst.w	r2, #1
 800176c:	d00b      	beq.n	8001786 <HAL_DMA_Init+0x15e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800176e:	f7fe fe15 	bl	800039c <HAL_GetTick>
 8001772:	1b43      	subs	r3, r0, r5
 8001774:	2b05      	cmp	r3, #5
 8001776:	d9f5      	bls.n	8001764 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001778:	2320      	movs	r3, #32
 800177a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800177c:	2303      	movs	r3, #3
 800177e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8001782:	2001      	movs	r0, #1
}
 8001784:	bd70      	pop	{r4, r5, r6, pc}
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001786:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001788:	4861      	ldr	r0, [pc, #388]	; (8001910 <HAL_DMA_Init+0x2e8>)
 800178a:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 800178c:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178e:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8001790:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001792:	6921      	ldr	r1, [r4, #16]
 8001794:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001796:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001798:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179a:	69a1      	ldr	r1, [r4, #24]
 800179c:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 800179e:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a0:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 80017a2:	6a21      	ldr	r1, [r4, #32]
 80017a4:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 80017a6:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017aa:	2904      	cmp	r1, #4
 80017ac:	f000 8099 	beq.w	80018e2 <HAL_DMA_Init+0x2ba>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80017b0:	4958      	ldr	r1, [pc, #352]	; (8001914 <HAL_DMA_Init+0x2ec>)
 80017b2:	6808      	ldr	r0, [r1, #0]
 80017b4:	4958      	ldr	r1, [pc, #352]	; (8001918 <HAL_DMA_Init+0x2f0>)
 80017b6:	4001      	ands	r1, r0
 80017b8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80017bc:	d311      	bcc.n	80017e2 <HAL_DMA_Init+0x1ba>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80017be:	6861      	ldr	r1, [r4, #4]
 80017c0:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 80017c4:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 80017c8:	2803      	cmp	r0, #3
 80017ca:	bf88      	it	hi
 80017cc:	2d05      	cmphi	r5, #5
 80017ce:	d906      	bls.n	80017de <HAL_DMA_Init+0x1b6>
 80017d0:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 80017d4:	2801      	cmp	r0, #1
 80017d6:	d902      	bls.n	80017de <HAL_DMA_Init+0x1b6>
 80017d8:	394f      	subs	r1, #79	; 0x4f
 80017da:	2903      	cmp	r1, #3
 80017dc:	d801      	bhi.n	80017e2 <HAL_DMA_Init+0x1ba>
        registerValue |= DMA_SxCR_TRBUFF;
 80017de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80017e2:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80017e4:	6826      	ldr	r6, [r4, #0]
 80017e6:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017e8:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 80017ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017ee:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d108      	bne.n	8001806 <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 80017f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017f6:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017fa:	b123      	cbz	r3, 8001806 <HAL_DMA_Init+0x1de>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff fe33 	bl	8001468 <DMA_CheckFifoParam>
 8001802:	2800      	cmp	r0, #0
 8001804:	d172      	bne.n	80018ec <HAL_DMA_Init+0x2c4>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001806:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001808:	4620      	mov	r0, r4
 800180a:	f7ff fdd3 	bl	80013b4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800180e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	233f      	movs	r3, #63	; 0x3f
 8001816:	4093      	lsls	r3, r2
 8001818:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	4936      	ldr	r1, [pc, #216]	; (80018f8 <HAL_DMA_Init+0x2d0>)
 800181e:	4a37      	ldr	r2, [pc, #220]	; (80018fc <HAL_DMA_Init+0x2d4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	bf18      	it	ne
 8001824:	428b      	cmpne	r3, r1
 8001826:	d042      	beq.n	80018ae <HAL_DMA_Init+0x286>
 8001828:	3218      	adds	r2, #24
 800182a:	4293      	cmp	r3, r2
 800182c:	d03f      	beq.n	80018ae <HAL_DMA_Init+0x286>
 800182e:	3218      	adds	r2, #24
 8001830:	4293      	cmp	r3, r2
 8001832:	d03c      	beq.n	80018ae <HAL_DMA_Init+0x286>
 8001834:	3218      	adds	r2, #24
 8001836:	4293      	cmp	r3, r2
 8001838:	d039      	beq.n	80018ae <HAL_DMA_Init+0x286>
 800183a:	3218      	adds	r2, #24
 800183c:	4293      	cmp	r3, r2
 800183e:	d036      	beq.n	80018ae <HAL_DMA_Init+0x286>
 8001840:	3218      	adds	r2, #24
 8001842:	4293      	cmp	r3, r2
 8001844:	d033      	beq.n	80018ae <HAL_DMA_Init+0x286>
 8001846:	3218      	adds	r2, #24
 8001848:	4293      	cmp	r3, r2
 800184a:	d030      	beq.n	80018ae <HAL_DMA_Init+0x286>
 800184c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001850:	4293      	cmp	r3, r2
 8001852:	d02c      	beq.n	80018ae <HAL_DMA_Init+0x286>
 8001854:	3218      	adds	r2, #24
 8001856:	4293      	cmp	r3, r2
 8001858:	d029      	beq.n	80018ae <HAL_DMA_Init+0x286>
 800185a:	3218      	adds	r2, #24
 800185c:	4293      	cmp	r3, r2
 800185e:	d026      	beq.n	80018ae <HAL_DMA_Init+0x286>
 8001860:	3218      	adds	r2, #24
 8001862:	4293      	cmp	r3, r2
 8001864:	d023      	beq.n	80018ae <HAL_DMA_Init+0x286>
 8001866:	3218      	adds	r2, #24
 8001868:	4293      	cmp	r3, r2
 800186a:	d020      	beq.n	80018ae <HAL_DMA_Init+0x286>
 800186c:	3218      	adds	r2, #24
 800186e:	4293      	cmp	r3, r2
 8001870:	d01d      	beq.n	80018ae <HAL_DMA_Init+0x286>
 8001872:	3218      	adds	r2, #24
 8001874:	4293      	cmp	r3, r2
 8001876:	d01a      	beq.n	80018ae <HAL_DMA_Init+0x286>
 8001878:	3218      	adds	r2, #24
 800187a:	4293      	cmp	r3, r2
 800187c:	d017      	beq.n	80018ae <HAL_DMA_Init+0x286>
 800187e:	4a20      	ldr	r2, [pc, #128]	; (8001900 <HAL_DMA_Init+0x2d8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d014      	beq.n	80018ae <HAL_DMA_Init+0x286>
 8001884:	3214      	adds	r2, #20
 8001886:	4293      	cmp	r3, r2
 8001888:	d011      	beq.n	80018ae <HAL_DMA_Init+0x286>
 800188a:	3214      	adds	r2, #20
 800188c:	4293      	cmp	r3, r2
 800188e:	d00e      	beq.n	80018ae <HAL_DMA_Init+0x286>
 8001890:	3214      	adds	r2, #20
 8001892:	4293      	cmp	r3, r2
 8001894:	d00b      	beq.n	80018ae <HAL_DMA_Init+0x286>
 8001896:	3214      	adds	r2, #20
 8001898:	4293      	cmp	r3, r2
 800189a:	d008      	beq.n	80018ae <HAL_DMA_Init+0x286>
 800189c:	3214      	adds	r2, #20
 800189e:	4293      	cmp	r3, r2
 80018a0:	d005      	beq.n	80018ae <HAL_DMA_Init+0x286>
 80018a2:	3214      	adds	r2, #20
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d002      	beq.n	80018ae <HAL_DMA_Init+0x286>
 80018a8:	3214      	adds	r2, #20
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d113      	bne.n	80018d6 <HAL_DMA_Init+0x2ae>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff fe24 	bl	80014fc <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018b4:	68a3      	ldr	r3, [r4, #8]
 80018b6:	2b80      	cmp	r3, #128	; 0x80
 80018b8:	d06b      	beq.n	8001992 <HAL_DMA_Init+0x36a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80018bc:	7922      	ldrb	r2, [r4, #4]
 80018be:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018c2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80018c4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80018c6:	6863      	ldr	r3, [r4, #4]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	2b07      	cmp	r3, #7
 80018cc:	d964      	bls.n	8001998 <HAL_DMA_Init+0x370>
      hdma->DMAmuxRequestGen = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80018d2:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80018d4:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d6:	2000      	movs	r0, #0
 80018d8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80018da:	2301      	movs	r3, #1
 80018dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80018e0:	e750      	b.n	8001784 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80018e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80018e6:	4301      	orrs	r1, r0
 80018e8:	430a      	orrs	r2, r1
 80018ea:	e761      	b.n	80017b0 <HAL_DMA_Init+0x188>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018ec:	2340      	movs	r3, #64	; 0x40
 80018ee:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80018f0:	2001      	movs	r0, #1
 80018f2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 80018f6:	e745      	b.n	8001784 <HAL_DMA_Init+0x15c>
 80018f8:	40020010 	.word	0x40020010
 80018fc:	40020028 	.word	0x40020028
 8001900:	58025408 	.word	0x58025408
 8001904:	5802541c 	.word	0x5802541c
 8001908:	58025430 	.word	0x58025430
 800190c:	40020040 	.word	0x40020040
 8001910:	fe10803f 	.word	0xfe10803f
 8001914:	5c001000 	.word	0x5c001000
 8001918:	ffff0000 	.word	0xffff0000
    __HAL_UNLOCK(hdma);
 800191c:	2200      	movs	r2, #0
 800191e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8001922:	2202      	movs	r2, #2
 8001924:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001928:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800192a:	4921      	ldr	r1, [pc, #132]	; (80019b0 <HAL_DMA_Init+0x388>)
 800192c:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800192e:	68a2      	ldr	r2, [r4, #8]
 8001930:	2a40      	cmp	r2, #64	; 0x40
 8001932:	d02c      	beq.n	800198e <HAL_DMA_Init+0x366>
 8001934:	2a80      	cmp	r2, #128	; 0x80
 8001936:	d027      	beq.n	8001988 <HAL_DMA_Init+0x360>
 8001938:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800193a:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800193c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001940:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001942:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001946:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001948:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800194c:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800194e:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001952:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001954:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001958:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800195a:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800195e:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001960:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001962:	6822      	ldr	r2, [r4, #0]
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_DMA_Init+0x38c>)
 8001966:	4413      	add	r3, r2
 8001968:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <HAL_DMA_Init+0x390>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001974:	4620      	mov	r0, r4
 8001976:	f7ff fd1d 	bl	80013b4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800197a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800197c:	f002 011f 	and.w	r1, r2, #31
 8001980:	2201      	movs	r2, #1
 8001982:	408a      	lsls	r2, r1
 8001984:	6042      	str	r2, [r0, #4]
 8001986:	e748      	b.n	800181a <HAL_DMA_Init+0x1f2>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001988:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800198c:	e7d5      	b.n	800193a <HAL_DMA_Init+0x312>
 800198e:	2210      	movs	r2, #16
 8001990:	e7d3      	b.n	800193a <HAL_DMA_Init+0x312>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001992:	2300      	movs	r3, #0
 8001994:	6063      	str	r3, [r4, #4]
 8001996:	e790      	b.n	80018ba <HAL_DMA_Init+0x292>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff fe07 	bl	80015ac <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800199e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80019a6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	e794      	b.n	80018d6 <HAL_DMA_Init+0x2ae>
    return HAL_ERROR;
 80019ac:	2001      	movs	r0, #1
 80019ae:	e6e9      	b.n	8001784 <HAL_DMA_Init+0x15c>
 80019b0:	fffe000f 	.word	0xfffe000f
 80019b4:	a7fdabf8 	.word	0xa7fdabf8
 80019b8:	cccccccd 	.word	0xcccccccd

080019bc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80019bc:	2800      	cmp	r0, #0
 80019be:	f000 813e 	beq.w	8001c3e <HAL_DMA_Start_IT+0x282>
{
 80019c2:	b570      	push	{r4, r5, r6, lr}
 80019c4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80019c6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80019ca:	2801      	cmp	r0, #1
 80019cc:	f000 8139 	beq.w	8001c42 <HAL_DMA_Start_IT+0x286>
 80019d0:	2001      	movs	r0, #1
 80019d2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80019d6:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80019da:	b2c0      	uxtb	r0, r0
 80019dc:	2801      	cmp	r0, #1
 80019de:	d007      	beq.n	80019f0 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 80019e0:	2300      	movs	r3, #0
 80019e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80019e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019ea:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80019ec:	2001      	movs	r0, #1
}
 80019ee:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80019f0:	2002      	movs	r0, #2
 80019f2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f6:	2000      	movs	r0, #0
 80019f8:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80019fa:	6820      	ldr	r0, [r4, #0]
 80019fc:	4e92      	ldr	r6, [pc, #584]	; (8001c48 <HAL_DMA_Start_IT+0x28c>)
 80019fe:	4d93      	ldr	r5, [pc, #588]	; (8001c4c <HAL_DMA_Start_IT+0x290>)
 8001a00:	42a8      	cmp	r0, r5
 8001a02:	bf18      	it	ne
 8001a04:	42b0      	cmpne	r0, r6
 8001a06:	d02f      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a08:	3518      	adds	r5, #24
 8001a0a:	42a8      	cmp	r0, r5
 8001a0c:	d02c      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a0e:	3518      	adds	r5, #24
 8001a10:	42a8      	cmp	r0, r5
 8001a12:	d029      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a14:	3518      	adds	r5, #24
 8001a16:	42a8      	cmp	r0, r5
 8001a18:	d026      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a1a:	3518      	adds	r5, #24
 8001a1c:	42a8      	cmp	r0, r5
 8001a1e:	d023      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a20:	3518      	adds	r5, #24
 8001a22:	42a8      	cmp	r0, r5
 8001a24:	d020      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a26:	3518      	adds	r5, #24
 8001a28:	42a8      	cmp	r0, r5
 8001a2a:	d01d      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a2c:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001a30:	42a8      	cmp	r0, r5
 8001a32:	d019      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a34:	3518      	adds	r5, #24
 8001a36:	42a8      	cmp	r0, r5
 8001a38:	d016      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a3a:	3518      	adds	r5, #24
 8001a3c:	42a8      	cmp	r0, r5
 8001a3e:	d013      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a40:	3518      	adds	r5, #24
 8001a42:	42a8      	cmp	r0, r5
 8001a44:	d010      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a46:	3518      	adds	r5, #24
 8001a48:	42a8      	cmp	r0, r5
 8001a4a:	d00d      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a4c:	3518      	adds	r5, #24
 8001a4e:	42a8      	cmp	r0, r5
 8001a50:	d00a      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a52:	3518      	adds	r5, #24
 8001a54:	42a8      	cmp	r0, r5
 8001a56:	d007      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a58:	3518      	adds	r5, #24
 8001a5a:	42a8      	cmp	r0, r5
 8001a5c:	d004      	beq.n	8001a68 <HAL_DMA_Start_IT+0xac>
 8001a5e:	6805      	ldr	r5, [r0, #0]
 8001a60:	f025 0501 	bic.w	r5, r5, #1
 8001a64:	6005      	str	r5, [r0, #0]
 8001a66:	e003      	b.n	8001a70 <HAL_DMA_Start_IT+0xb4>
 8001a68:	6805      	ldr	r5, [r0, #0]
 8001a6a:	f025 0501 	bic.w	r5, r5, #1
 8001a6e:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff fbc7 	bl	8001204 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	4973      	ldr	r1, [pc, #460]	; (8001c48 <HAL_DMA_Start_IT+0x28c>)
 8001a7a:	4a74      	ldr	r2, [pc, #464]	; (8001c4c <HAL_DMA_Start_IT+0x290>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	bf18      	it	ne
 8001a80:	428b      	cmpne	r3, r1
 8001a82:	d038      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001a84:	3218      	adds	r2, #24
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d035      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001a8a:	3218      	adds	r2, #24
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d032      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001a90:	3218      	adds	r2, #24
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d02f      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001a96:	3218      	adds	r2, #24
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d02c      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001a9c:	3218      	adds	r2, #24
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d029      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001aa2:	3218      	adds	r2, #24
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d026      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001aa8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d022      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001ab0:	3218      	adds	r2, #24
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01f      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001ab6:	3218      	adds	r2, #24
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d01c      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001abc:	3218      	adds	r2, #24
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d019      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001ac2:	3218      	adds	r2, #24
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d016      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001ac8:	3218      	adds	r2, #24
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001ace:	3218      	adds	r2, #24
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d010      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
 8001ad4:	3218      	adds	r2, #24
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00d      	beq.n	8001af6 <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	f022 020e 	bic.w	r2, r2, #14
 8001ae0:	f042 020a 	orr.w	r2, r2, #10
 8001ae4:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001ae6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ae8:	b193      	cbz	r3, 8001b10 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001aea:	6822      	ldr	r2, [r4, #0]
 8001aec:	6813      	ldr	r3, [r2, #0]
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e00c      	b.n	8001b10 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	f022 021e 	bic.w	r2, r2, #30
 8001afc:	f042 0216 	orr.w	r2, r2, #22
 8001b00:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001b02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b04:	b123      	cbz	r3, 8001b10 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	6813      	ldr	r3, [r2, #0]
 8001b0a:	f043 0308 	orr.w	r3, r3, #8
 8001b0e:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	494d      	ldr	r1, [pc, #308]	; (8001c48 <HAL_DMA_Start_IT+0x28c>)
 8001b14:	4a4d      	ldr	r2, [pc, #308]	; (8001c4c <HAL_DMA_Start_IT+0x290>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	bf18      	it	ne
 8001b1a:	428b      	cmpne	r3, r1
 8001b1c:	d042      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b1e:	3218      	adds	r2, #24
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d03f      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b24:	3218      	adds	r2, #24
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d03c      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b2a:	3218      	adds	r2, #24
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d039      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b30:	3218      	adds	r2, #24
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d036      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b36:	3218      	adds	r2, #24
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d033      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b3c:	3218      	adds	r2, #24
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d030      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b42:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d02c      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b4a:	3218      	adds	r2, #24
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d029      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b50:	3218      	adds	r2, #24
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d026      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b56:	3218      	adds	r2, #24
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d023      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b5c:	3218      	adds	r2, #24
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d020      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b62:	3218      	adds	r2, #24
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d01d      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b68:	3218      	adds	r2, #24
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01a      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b6e:	3218      	adds	r2, #24
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d017      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b74:	4a36      	ldr	r2, [pc, #216]	; (8001c50 <HAL_DMA_Start_IT+0x294>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d014      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b7a:	3214      	adds	r2, #20
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d011      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b80:	3214      	adds	r2, #20
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00e      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b86:	3214      	adds	r2, #20
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00b      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b8c:	3214      	adds	r2, #20
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d008      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b92:	3214      	adds	r2, #20
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d005      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b98:	3214      	adds	r2, #20
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d002      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x1e8>
 8001b9e:	3214      	adds	r2, #20
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d10e      	bne.n	8001bc2 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ba4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001bac:	d003      	beq.n	8001bb6 <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bb4:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8001bb6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001bb8:	b11b      	cbz	r3, 8001bc2 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bc0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	4920      	ldr	r1, [pc, #128]	; (8001c48 <HAL_DMA_Start_IT+0x28c>)
 8001bc6:	4a21      	ldr	r2, [pc, #132]	; (8001c4c <HAL_DMA_Start_IT+0x290>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	bf18      	it	ne
 8001bcc:	428b      	cmpne	r3, r1
 8001bce:	d030      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001bd0:	3218      	adds	r2, #24
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d02d      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001bd6:	3218      	adds	r2, #24
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d02a      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001bdc:	3218      	adds	r2, #24
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d027      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001be2:	3218      	adds	r2, #24
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d024      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001be8:	3218      	adds	r2, #24
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d021      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001bee:	3218      	adds	r2, #24
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d01e      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001bf4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d01a      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001bfc:	3218      	adds	r2, #24
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d017      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001c02:	3218      	adds	r2, #24
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d014      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001c08:	3218      	adds	r2, #24
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d011      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001c0e:	3218      	adds	r2, #24
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00e      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001c14:	3218      	adds	r2, #24
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00b      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001c1a:	3218      	adds	r2, #24
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d008      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001c20:	3218      	adds	r2, #24
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d005      	beq.n	8001c32 <HAL_DMA_Start_IT+0x276>
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2e:	2000      	movs	r0, #0
 8001c30:	e6dd      	b.n	80019ee <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001c3c:	e6d7      	b.n	80019ee <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8001c3e:	2001      	movs	r0, #1
}
 8001c40:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001c42:	2002      	movs	r0, #2
 8001c44:	e6d3      	b.n	80019ee <HAL_DMA_Start_IT+0x32>
 8001c46:	bf00      	nop
 8001c48:	40020010 	.word	0x40020010
 8001c4c:	40020028 	.word	0x40020028
 8001c50:	58025408 	.word	0x58025408

08001c54 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8001c54:	2800      	cmp	r0, #0
 8001c56:	f000 8129 	beq.w	8001eac <HAL_DMA_Abort_IT+0x258>
{
 8001c5a:	b508      	push	{r3, lr}
 8001c5c:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c5e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d003      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001c6c:	2001      	movs	r0, #1
}
 8001c6e:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c70:	6803      	ldr	r3, [r0, #0]
 8001c72:	4890      	ldr	r0, [pc, #576]	; (8001eb4 <HAL_DMA_Abort_IT+0x260>)
 8001c74:	4990      	ldr	r1, [pc, #576]	; (8001eb8 <HAL_DMA_Abort_IT+0x264>)
 8001c76:	428b      	cmp	r3, r1
 8001c78:	bf18      	it	ne
 8001c7a:	4283      	cmpne	r3, r0
 8001c7c:	bf0c      	ite	eq
 8001c7e:	2101      	moveq	r1, #1
 8001c80:	2100      	movne	r1, #0
 8001c82:	d066      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001c84:	3030      	adds	r0, #48	; 0x30
 8001c86:	4283      	cmp	r3, r0
 8001c88:	d063      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001c8a:	3018      	adds	r0, #24
 8001c8c:	4283      	cmp	r3, r0
 8001c8e:	d060      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001c90:	3018      	adds	r0, #24
 8001c92:	4283      	cmp	r3, r0
 8001c94:	d05d      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001c96:	3018      	adds	r0, #24
 8001c98:	4283      	cmp	r3, r0
 8001c9a:	d05a      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001c9c:	3018      	adds	r0, #24
 8001c9e:	4283      	cmp	r3, r0
 8001ca0:	d057      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001ca2:	3018      	adds	r0, #24
 8001ca4:	4283      	cmp	r3, r0
 8001ca6:	d054      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001ca8:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8001cac:	4283      	cmp	r3, r0
 8001cae:	d050      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001cb0:	3018      	adds	r0, #24
 8001cb2:	4283      	cmp	r3, r0
 8001cb4:	d04d      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001cb6:	3018      	adds	r0, #24
 8001cb8:	4283      	cmp	r3, r0
 8001cba:	d04a      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001cbc:	3018      	adds	r0, #24
 8001cbe:	4283      	cmp	r3, r0
 8001cc0:	d047      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001cc2:	3018      	adds	r0, #24
 8001cc4:	4283      	cmp	r3, r0
 8001cc6:	d044      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001cc8:	3018      	adds	r0, #24
 8001cca:	4283      	cmp	r3, r0
 8001ccc:	d041      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001cce:	3018      	adds	r0, #24
 8001cd0:	4283      	cmp	r3, r0
 8001cd2:	d03e      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
 8001cd4:	3018      	adds	r0, #24
 8001cd6:	4283      	cmp	r3, r0
 8001cd8:	d03b      	beq.n	8001d52 <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001cda:	6819      	ldr	r1, [r3, #0]
 8001cdc:	f021 010e 	bic.w	r1, r1, #14
 8001ce0:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8001ce2:	6813      	ldr	r3, [r2, #0]
 8001ce4:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8001ce8:	4973      	ldr	r1, [pc, #460]	; (8001eb8 <HAL_DMA_Abort_IT+0x264>)
 8001cea:	428b      	cmp	r3, r1
 8001cec:	bf18      	it	ne
 8001cee:	4283      	cmpne	r3, r0
 8001cf0:	d06a      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001cf2:	4972      	ldr	r1, [pc, #456]	; (8001ebc <HAL_DMA_Abort_IT+0x268>)
 8001cf4:	428b      	cmp	r3, r1
 8001cf6:	d067      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001cf8:	3118      	adds	r1, #24
 8001cfa:	428b      	cmp	r3, r1
 8001cfc:	d064      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001cfe:	3118      	adds	r1, #24
 8001d00:	428b      	cmp	r3, r1
 8001d02:	d061      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001d04:	3118      	adds	r1, #24
 8001d06:	428b      	cmp	r3, r1
 8001d08:	d05e      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001d0a:	3118      	adds	r1, #24
 8001d0c:	428b      	cmp	r3, r1
 8001d0e:	d05b      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001d10:	3118      	adds	r1, #24
 8001d12:	428b      	cmp	r3, r1
 8001d14:	d058      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001d16:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001d1a:	428b      	cmp	r3, r1
 8001d1c:	d054      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001d1e:	3118      	adds	r1, #24
 8001d20:	428b      	cmp	r3, r1
 8001d22:	d051      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001d24:	3118      	adds	r1, #24
 8001d26:	428b      	cmp	r3, r1
 8001d28:	d04e      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001d2a:	3118      	adds	r1, #24
 8001d2c:	428b      	cmp	r3, r1
 8001d2e:	d04b      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001d30:	3118      	adds	r1, #24
 8001d32:	428b      	cmp	r3, r1
 8001d34:	d048      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001d36:	3118      	adds	r1, #24
 8001d38:	428b      	cmp	r3, r1
 8001d3a:	d045      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001d3c:	3118      	adds	r1, #24
 8001d3e:	428b      	cmp	r3, r1
 8001d40:	d042      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001d42:	3118      	adds	r1, #24
 8001d44:	428b      	cmp	r3, r1
 8001d46:	d03f      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x174>
 8001d48:	6819      	ldr	r1, [r3, #0]
 8001d4a:	f021 0101 	bic.w	r1, r1, #1
 8001d4e:	6019      	str	r1, [r3, #0]
 8001d50:	e03e      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d52:	2004      	movs	r0, #4
 8001d54:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001d58:	bb81      	cbnz	r1, 8001dbc <HAL_DMA_Abort_IT+0x168>
 8001d5a:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <HAL_DMA_Abort_IT+0x268>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d02d      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001d60:	3218      	adds	r2, #24
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d02a      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001d66:	3218      	adds	r2, #24
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d027      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001d6c:	3218      	adds	r2, #24
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d024      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001d72:	3218      	adds	r2, #24
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d021      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001d78:	3218      	adds	r2, #24
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01e      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001d7e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01a      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001d86:	3218      	adds	r2, #24
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d017      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001d8c:	3218      	adds	r2, #24
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d014      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001d92:	3218      	adds	r2, #24
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d011      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001d98:	3218      	adds	r2, #24
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00e      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001d9e:	3218      	adds	r2, #24
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d00b      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001da4:	3218      	adds	r2, #24
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d008      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001daa:	3218      	adds	r2, #24
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d005      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x168>
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001db8:	2000      	movs	r0, #0
 8001dba:	e758      	b.n	8001c6e <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001dc4:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8001dc6:	e752      	b.n	8001c6e <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8001dc8:	6819      	ldr	r1, [r3, #0]
 8001dca:	f021 0101 	bic.w	r1, r1, #1
 8001dce:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dd0:	6813      	ldr	r3, [r2, #0]
 8001dd2:	4838      	ldr	r0, [pc, #224]	; (8001eb4 <HAL_DMA_Abort_IT+0x260>)
 8001dd4:	4938      	ldr	r1, [pc, #224]	; (8001eb8 <HAL_DMA_Abort_IT+0x264>)
 8001dd6:	428b      	cmp	r3, r1
 8001dd8:	bf18      	it	ne
 8001dda:	4283      	cmpne	r3, r0
 8001ddc:	d042      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001dde:	3118      	adds	r1, #24
 8001de0:	428b      	cmp	r3, r1
 8001de2:	d03f      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001de4:	3118      	adds	r1, #24
 8001de6:	428b      	cmp	r3, r1
 8001de8:	d03c      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001dea:	3118      	adds	r1, #24
 8001dec:	428b      	cmp	r3, r1
 8001dee:	d039      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001df0:	3118      	adds	r1, #24
 8001df2:	428b      	cmp	r3, r1
 8001df4:	d036      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001df6:	3118      	adds	r1, #24
 8001df8:	428b      	cmp	r3, r1
 8001dfa:	d033      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001dfc:	3118      	adds	r1, #24
 8001dfe:	428b      	cmp	r3, r1
 8001e00:	d030      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e02:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001e06:	428b      	cmp	r3, r1
 8001e08:	d02c      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e0a:	3118      	adds	r1, #24
 8001e0c:	428b      	cmp	r3, r1
 8001e0e:	d029      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e10:	3118      	adds	r1, #24
 8001e12:	428b      	cmp	r3, r1
 8001e14:	d026      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e16:	3118      	adds	r1, #24
 8001e18:	428b      	cmp	r3, r1
 8001e1a:	d023      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e1c:	3118      	adds	r1, #24
 8001e1e:	428b      	cmp	r3, r1
 8001e20:	d020      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e22:	3118      	adds	r1, #24
 8001e24:	428b      	cmp	r3, r1
 8001e26:	d01d      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e28:	3118      	adds	r1, #24
 8001e2a:	428b      	cmp	r3, r1
 8001e2c:	d01a      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e2e:	3118      	adds	r1, #24
 8001e30:	428b      	cmp	r3, r1
 8001e32:	d017      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e34:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <HAL_DMA_Abort_IT+0x26c>)
 8001e36:	428b      	cmp	r3, r1
 8001e38:	d014      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e3a:	3114      	adds	r1, #20
 8001e3c:	428b      	cmp	r3, r1
 8001e3e:	d011      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e40:	3114      	adds	r1, #20
 8001e42:	428b      	cmp	r3, r1
 8001e44:	d00e      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e46:	3114      	adds	r1, #20
 8001e48:	428b      	cmp	r3, r1
 8001e4a:	d00b      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e4c:	3114      	adds	r1, #20
 8001e4e:	428b      	cmp	r3, r1
 8001e50:	d008      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e52:	3114      	adds	r1, #20
 8001e54:	428b      	cmp	r3, r1
 8001e56:	d005      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e58:	3114      	adds	r1, #20
 8001e5a:	428b      	cmp	r3, r1
 8001e5c:	d002      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x210>
 8001e5e:	3114      	adds	r1, #20
 8001e60:	428b      	cmp	r3, r1
 8001e62:	d117      	bne.n	8001e94 <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e64:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001e66:	680b      	ldr	r3, [r1, #0]
 8001e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e6c:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6e:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e70:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001e72:	f003 011f 	and.w	r1, r3, #31
 8001e76:	2301      	movs	r3, #1
 8001e78:	408b      	lsls	r3, r1
 8001e7a:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e7c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001e7e:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8001e80:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8001e82:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8001e84:	b133      	cbz	r3, 8001e94 <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e86:	6819      	ldr	r1, [r3, #0]
 8001e88:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001e8c:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e8e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001e90:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8001e92:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8001e94:	2300      	movs	r3, #0
 8001e96:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8001ea0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001ea2:	b12b      	cbz	r3, 8001eb0 <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4798      	blx	r3
  return HAL_OK;
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	e6e0      	b.n	8001c6e <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 8001eac:	2001      	movs	r0, #1
}
 8001eae:	4770      	bx	lr
  return HAL_OK;
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	e6dc      	b.n	8001c6e <HAL_DMA_Abort_IT+0x1a>
 8001eb4:	40020010 	.word	0x40020010
 8001eb8:	40020028 	.word	0x40020028
 8001ebc:	40020040 	.word	0x40020040
 8001ec0:	58025408 	.word	0x58025408

08001ec4 <HAL_DMA_IRQHandler>:
{
 8001ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ece:	4ba2      	ldr	r3, [pc, #648]	; (8002158 <HAL_DMA_IRQHandler+0x294>)
 8001ed0:	681d      	ldr	r5, [r3, #0]
 8001ed2:	4ba2      	ldr	r3, [pc, #648]	; (800215c <HAL_DMA_IRQHandler+0x298>)
 8001ed4:	fba3 3505 	umull	r3, r5, r3, r5
 8001ed8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eda:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8001edc:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8001ede:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001ee2:	6803      	ldr	r3, [r0, #0]
 8001ee4:	499e      	ldr	r1, [pc, #632]	; (8002160 <HAL_DMA_IRQHandler+0x29c>)
 8001ee6:	489f      	ldr	r0, [pc, #636]	; (8002164 <HAL_DMA_IRQHandler+0x2a0>)
 8001ee8:	4283      	cmp	r3, r0
 8001eea:	bf18      	it	ne
 8001eec:	428b      	cmpne	r3, r1
 8001eee:	bf0c      	ite	eq
 8001ef0:	2001      	moveq	r0, #1
 8001ef2:	2000      	movne	r0, #0
 8001ef4:	d061      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001ef6:	4a9c      	ldr	r2, [pc, #624]	; (8002168 <HAL_DMA_IRQHandler+0x2a4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d05e      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001efc:	3218      	adds	r2, #24
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d05b      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001f02:	3218      	adds	r2, #24
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d058      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001f08:	3218      	adds	r2, #24
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d055      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001f0e:	3218      	adds	r2, #24
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d052      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001f14:	3218      	adds	r2, #24
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d04f      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001f1a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d04b      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001f22:	3218      	adds	r2, #24
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d048      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001f28:	3218      	adds	r2, #24
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d045      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001f2e:	3218      	adds	r2, #24
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d042      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001f34:	3218      	adds	r2, #24
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d03f      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001f3a:	3218      	adds	r2, #24
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d03c      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001f40:	3218      	adds	r2, #24
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d039      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
 8001f46:	3218      	adds	r2, #24
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d036      	beq.n	8001fba <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001f4c:	4987      	ldr	r1, [pc, #540]	; (800216c <HAL_DMA_IRQHandler+0x2a8>)
 8001f4e:	4a88      	ldr	r2, [pc, #544]	; (8002170 <HAL_DMA_IRQHandler+0x2ac>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	bf18      	it	ne
 8001f54:	428b      	cmpne	r3, r1
 8001f56:	d012      	beq.n	8001f7e <HAL_DMA_IRQHandler+0xba>
 8001f58:	4a86      	ldr	r2, [pc, #536]	; (8002174 <HAL_DMA_IRQHandler+0x2b0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00f      	beq.n	8001f7e <HAL_DMA_IRQHandler+0xba>
 8001f5e:	3214      	adds	r2, #20
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00c      	beq.n	8001f7e <HAL_DMA_IRQHandler+0xba>
 8001f64:	3214      	adds	r2, #20
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d009      	beq.n	8001f7e <HAL_DMA_IRQHandler+0xba>
 8001f6a:	3214      	adds	r2, #20
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d006      	beq.n	8001f7e <HAL_DMA_IRQHandler+0xba>
 8001f70:	3214      	adds	r2, #20
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d003      	beq.n	8001f7e <HAL_DMA_IRQHandler+0xba>
 8001f76:	3214      	adds	r2, #20
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	f040 8262 	bne.w	8002442 <HAL_DMA_IRQHandler+0x57e>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001f7e:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001f80:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001f82:	f001 011f 	and.w	r1, r1, #31
 8001f86:	2004      	movs	r0, #4
 8001f88:	4088      	lsls	r0, r1
 8001f8a:	ea10 0f0c 	tst.w	r0, ip
 8001f8e:	f000 82a8 	beq.w	80024e2 <HAL_DMA_IRQHandler+0x61e>
 8001f92:	f012 0f04 	tst.w	r2, #4
 8001f96:	f000 82a4 	beq.w	80024e2 <HAL_DMA_IRQHandler+0x61e>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001f9a:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f9c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001fa0:	f000 825b 	beq.w	800245a <HAL_DMA_IRQHandler+0x596>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001fa4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001fa8:	f040 8251 	bne.w	800244e <HAL_DMA_IRQHandler+0x58a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8247 	beq.w	8002442 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1HalfCpltCallback(hdma);
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	4798      	blx	r3
 8001fb8:	e243      	b.n	8002442 <HAL_DMA_IRQHandler+0x57e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001fbc:	f002 011f 	and.w	r1, r2, #31
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	408a      	lsls	r2, r1
 8001fc4:	4232      	tst	r2, r6
 8001fc6:	d041      	beq.n	800204c <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001fc8:	bb70      	cbnz	r0, 8002028 <HAL_DMA_IRQHandler+0x164>
 8001fca:	4a67      	ldr	r2, [pc, #412]	; (8002168 <HAL_DMA_IRQHandler+0x2a4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d02b      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 8001fd0:	3218      	adds	r2, #24
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d028      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 8001fd6:	3218      	adds	r2, #24
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d025      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 8001fdc:	3218      	adds	r2, #24
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d022      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 8001fe2:	3218      	adds	r2, #24
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d01f      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 8001fe8:	3218      	adds	r2, #24
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01c      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 8001fee:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d018      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 8001ff6:	3218      	adds	r2, #24
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d015      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 8001ffc:	3218      	adds	r2, #24
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d012      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 8002002:	3218      	adds	r2, #24
 8002004:	4293      	cmp	r3, r2
 8002006:	d00f      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 8002008:	3218      	adds	r2, #24
 800200a:	4293      	cmp	r3, r2
 800200c:	d00c      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 800200e:	3218      	adds	r2, #24
 8002010:	4293      	cmp	r3, r2
 8002012:	d009      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 8002014:	3218      	adds	r2, #24
 8002016:	4293      	cmp	r3, r2
 8002018:	d006      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 800201a:	3218      	adds	r2, #24
 800201c:	4293      	cmp	r3, r2
 800201e:	d003      	beq.n	8002028 <HAL_DMA_IRQHandler+0x164>
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8002026:	e002      	b.n	800202e <HAL_DMA_IRQHandler+0x16a>
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800202e:	b16a      	cbz	r2, 800204c <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	f022 0204 	bic.w	r2, r2, #4
 8002036:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002038:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800203a:	f003 021f 	and.w	r2, r3, #31
 800203e:	2308      	movs	r3, #8
 8002040:	4093      	lsls	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002044:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800204c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800204e:	f002 021f 	and.w	r2, r2, #31
 8002052:	fa26 f302 	lsr.w	r3, r6, r2
 8002056:	f013 0f01 	tst.w	r3, #1
 800205a:	d037      	beq.n	80020cc <HAL_DMA_IRQHandler+0x208>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	4840      	ldr	r0, [pc, #256]	; (8002160 <HAL_DMA_IRQHandler+0x29c>)
 8002060:	4940      	ldr	r1, [pc, #256]	; (8002164 <HAL_DMA_IRQHandler+0x2a0>)
 8002062:	428b      	cmp	r3, r1
 8002064:	bf18      	it	ne
 8002066:	4283      	cmpne	r3, r0
 8002068:	d02c      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 800206a:	3118      	adds	r1, #24
 800206c:	428b      	cmp	r3, r1
 800206e:	d029      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 8002070:	3118      	adds	r1, #24
 8002072:	428b      	cmp	r3, r1
 8002074:	d026      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 8002076:	3118      	adds	r1, #24
 8002078:	428b      	cmp	r3, r1
 800207a:	d023      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 800207c:	3118      	adds	r1, #24
 800207e:	428b      	cmp	r3, r1
 8002080:	d020      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 8002082:	3118      	adds	r1, #24
 8002084:	428b      	cmp	r3, r1
 8002086:	d01d      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 8002088:	3118      	adds	r1, #24
 800208a:	428b      	cmp	r3, r1
 800208c:	d01a      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 800208e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002092:	428b      	cmp	r3, r1
 8002094:	d016      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 8002096:	3118      	adds	r1, #24
 8002098:	428b      	cmp	r3, r1
 800209a:	d013      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 800209c:	3118      	adds	r1, #24
 800209e:	428b      	cmp	r3, r1
 80020a0:	d010      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 80020a2:	3118      	adds	r1, #24
 80020a4:	428b      	cmp	r3, r1
 80020a6:	d00d      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 80020a8:	3118      	adds	r1, #24
 80020aa:	428b      	cmp	r3, r1
 80020ac:	d00a      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 80020ae:	3118      	adds	r1, #24
 80020b0:	428b      	cmp	r3, r1
 80020b2:	d007      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 80020b4:	3118      	adds	r1, #24
 80020b6:	428b      	cmp	r3, r1
 80020b8:	d004      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 80020ba:	3118      	adds	r1, #24
 80020bc:	428b      	cmp	r3, r1
 80020be:	d001      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x200>
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	e003      	b.n	80020cc <HAL_DMA_IRQHandler+0x208>
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80020ca:	d13b      	bne.n	8002144 <HAL_DMA_IRQHandler+0x280>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2204      	movs	r2, #4
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	4233      	tst	r3, r6
 80020da:	d051      	beq.n	8002180 <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80020dc:	6822      	ldr	r2, [r4, #0]
 80020de:	4820      	ldr	r0, [pc, #128]	; (8002160 <HAL_DMA_IRQHandler+0x29c>)
 80020e0:	4920      	ldr	r1, [pc, #128]	; (8002164 <HAL_DMA_IRQHandler+0x2a0>)
 80020e2:	428a      	cmp	r2, r1
 80020e4:	bf18      	it	ne
 80020e6:	4282      	cmpne	r2, r0
 80020e8:	d046      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 80020ea:	3118      	adds	r1, #24
 80020ec:	428a      	cmp	r2, r1
 80020ee:	d043      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 80020f0:	3118      	adds	r1, #24
 80020f2:	428a      	cmp	r2, r1
 80020f4:	d040      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 80020f6:	3118      	adds	r1, #24
 80020f8:	428a      	cmp	r2, r1
 80020fa:	d03d      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 80020fc:	3118      	adds	r1, #24
 80020fe:	428a      	cmp	r2, r1
 8002100:	d03a      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 8002102:	3118      	adds	r1, #24
 8002104:	428a      	cmp	r2, r1
 8002106:	d037      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 8002108:	3118      	adds	r1, #24
 800210a:	428a      	cmp	r2, r1
 800210c:	d034      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 800210e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002112:	428a      	cmp	r2, r1
 8002114:	d030      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 8002116:	3118      	adds	r1, #24
 8002118:	428a      	cmp	r2, r1
 800211a:	d02d      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 800211c:	3118      	adds	r1, #24
 800211e:	428a      	cmp	r2, r1
 8002120:	d02a      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 8002122:	3118      	adds	r1, #24
 8002124:	428a      	cmp	r2, r1
 8002126:	d027      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 8002128:	3118      	adds	r1, #24
 800212a:	428a      	cmp	r2, r1
 800212c:	d024      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 800212e:	3118      	adds	r1, #24
 8002130:	428a      	cmp	r2, r1
 8002132:	d021      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 8002134:	3118      	adds	r1, #24
 8002136:	428a      	cmp	r2, r1
 8002138:	d01e      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 800213a:	3118      	adds	r1, #24
 800213c:	428a      	cmp	r2, r1
 800213e:	d01b      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2b4>
 8002140:	6813      	ldr	r3, [r2, #0]
 8002142:	e01d      	b.n	8002180 <HAL_DMA_IRQHandler+0x2bc>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002144:	2301      	movs	r3, #1
 8002146:	fa03 f202 	lsl.w	r2, r3, r2
 800214a:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800214c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800214e:	f043 0302 	orr.w	r3, r3, #2
 8002152:	6563      	str	r3, [r4, #84]	; 0x54
 8002154:	e7ba      	b.n	80020cc <HAL_DMA_IRQHandler+0x208>
 8002156:	bf00      	nop
 8002158:	20000028 	.word	0x20000028
 800215c:	1b4e81b5 	.word	0x1b4e81b5
 8002160:	40020010 	.word	0x40020010
 8002164:	40020028 	.word	0x40020028
 8002168:	40020040 	.word	0x40020040
 800216c:	58025408 	.word	0x58025408
 8002170:	5802541c 	.word	0x5802541c
 8002174:	58025430 	.word	0x58025430
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	f012 0f02 	tst.w	r2, #2
 800217e:	d13d      	bne.n	80021fc <HAL_DMA_IRQHandler+0x338>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002180:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	2210      	movs	r2, #16
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	4233      	tst	r3, r6
 800218e:	d05f      	beq.n	8002250 <HAL_DMA_IRQHandler+0x38c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002190:	6822      	ldr	r2, [r4, #0]
 8002192:	489b      	ldr	r0, [pc, #620]	; (8002400 <HAL_DMA_IRQHandler+0x53c>)
 8002194:	499b      	ldr	r1, [pc, #620]	; (8002404 <HAL_DMA_IRQHandler+0x540>)
 8002196:	428a      	cmp	r2, r1
 8002198:	bf18      	it	ne
 800219a:	4282      	cmpne	r2, r0
 800219c:	d034      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 800219e:	3118      	adds	r1, #24
 80021a0:	428a      	cmp	r2, r1
 80021a2:	d031      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021a4:	3118      	adds	r1, #24
 80021a6:	428a      	cmp	r2, r1
 80021a8:	d02e      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021aa:	3118      	adds	r1, #24
 80021ac:	428a      	cmp	r2, r1
 80021ae:	d02b      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021b0:	3118      	adds	r1, #24
 80021b2:	428a      	cmp	r2, r1
 80021b4:	d028      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021b6:	3118      	adds	r1, #24
 80021b8:	428a      	cmp	r2, r1
 80021ba:	d025      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021bc:	3118      	adds	r1, #24
 80021be:	428a      	cmp	r2, r1
 80021c0:	d022      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021c2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80021c6:	428a      	cmp	r2, r1
 80021c8:	d01e      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021ca:	3118      	adds	r1, #24
 80021cc:	428a      	cmp	r2, r1
 80021ce:	d01b      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021d0:	3118      	adds	r1, #24
 80021d2:	428a      	cmp	r2, r1
 80021d4:	d018      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021d6:	3118      	adds	r1, #24
 80021d8:	428a      	cmp	r2, r1
 80021da:	d015      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021dc:	3118      	adds	r1, #24
 80021de:	428a      	cmp	r2, r1
 80021e0:	d012      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021e2:	3118      	adds	r1, #24
 80021e4:	428a      	cmp	r2, r1
 80021e6:	d00f      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021e8:	3118      	adds	r1, #24
 80021ea:	428a      	cmp	r2, r1
 80021ec:	d00c      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021ee:	3118      	adds	r1, #24
 80021f0:	428a      	cmp	r2, r1
 80021f2:	d009      	beq.n	8002208 <HAL_DMA_IRQHandler+0x344>
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80021fa:	e008      	b.n	800220e <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021fc:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6563      	str	r3, [r4, #84]	; 0x54
 8002206:	e7bb      	b.n	8002180 <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800220e:	b1fa      	cbz	r2, 8002250 <HAL_DMA_IRQHandler+0x38c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002210:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800221a:	d00d      	beq.n	8002238 <HAL_DMA_IRQHandler+0x374>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002222:	d104      	bne.n	800222e <HAL_DMA_IRQHandler+0x36a>
            if(hdma->XferHalfCpltCallback != NULL)
 8002224:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002226:	b19b      	cbz	r3, 8002250 <HAL_DMA_IRQHandler+0x38c>
              hdma->XferHalfCpltCallback(hdma);
 8002228:	4620      	mov	r0, r4
 800222a:	4798      	blx	r3
 800222c:	e010      	b.n	8002250 <HAL_DMA_IRQHandler+0x38c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800222e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002230:	b173      	cbz	r3, 8002250 <HAL_DMA_IRQHandler+0x38c>
              hdma->XferM1HalfCpltCallback(hdma);
 8002232:	4620      	mov	r0, r4
 8002234:	4798      	blx	r3
 8002236:	e00b      	b.n	8002250 <HAL_DMA_IRQHandler+0x38c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800223e:	d103      	bne.n	8002248 <HAL_DMA_IRQHandler+0x384>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	f022 0208 	bic.w	r2, r2, #8
 8002246:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8002248:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800224a:	b10b      	cbz	r3, 8002250 <HAL_DMA_IRQHandler+0x38c>
            hdma->XferHalfCpltCallback(hdma);
 800224c:	4620      	mov	r0, r4
 800224e:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002250:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	2220      	movs	r2, #32
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	4233      	tst	r3, r6
 800225e:	f000 808e 	beq.w	800237e <HAL_DMA_IRQHandler+0x4ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002262:	6822      	ldr	r2, [r4, #0]
 8002264:	4866      	ldr	r0, [pc, #408]	; (8002400 <HAL_DMA_IRQHandler+0x53c>)
 8002266:	4967      	ldr	r1, [pc, #412]	; (8002404 <HAL_DMA_IRQHandler+0x540>)
 8002268:	428a      	cmp	r2, r1
 800226a:	bf18      	it	ne
 800226c:	4282      	cmpne	r2, r0
 800226e:	d02e      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 8002270:	3118      	adds	r1, #24
 8002272:	428a      	cmp	r2, r1
 8002274:	d02b      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 8002276:	3118      	adds	r1, #24
 8002278:	428a      	cmp	r2, r1
 800227a:	d028      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 800227c:	3118      	adds	r1, #24
 800227e:	428a      	cmp	r2, r1
 8002280:	d025      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 8002282:	3118      	adds	r1, #24
 8002284:	428a      	cmp	r2, r1
 8002286:	d022      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 8002288:	3118      	adds	r1, #24
 800228a:	428a      	cmp	r2, r1
 800228c:	d01f      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 800228e:	3118      	adds	r1, #24
 8002290:	428a      	cmp	r2, r1
 8002292:	d01c      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 8002294:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002298:	428a      	cmp	r2, r1
 800229a:	d018      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 800229c:	3118      	adds	r1, #24
 800229e:	428a      	cmp	r2, r1
 80022a0:	d015      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 80022a2:	3118      	adds	r1, #24
 80022a4:	428a      	cmp	r2, r1
 80022a6:	d012      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 80022a8:	3118      	adds	r1, #24
 80022aa:	428a      	cmp	r2, r1
 80022ac:	d00f      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 80022ae:	3118      	adds	r1, #24
 80022b0:	428a      	cmp	r2, r1
 80022b2:	d00c      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 80022b4:	3118      	adds	r1, #24
 80022b6:	428a      	cmp	r2, r1
 80022b8:	d009      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 80022ba:	3118      	adds	r1, #24
 80022bc:	428a      	cmp	r2, r1
 80022be:	d006      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 80022c0:	3118      	adds	r1, #24
 80022c2:	428a      	cmp	r2, r1
 80022c4:	d003      	beq.n	80022ce <HAL_DMA_IRQHandler+0x40a>
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80022cc:	e002      	b.n	80022d4 <HAL_DMA_IRQHandler+0x410>
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80022d4:	2a00      	cmp	r2, #0
 80022d6:	d052      	beq.n	800237e <HAL_DMA_IRQHandler+0x4ba>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022d8:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80022da:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d00e      	beq.n	8002302 <HAL_DMA_IRQHandler+0x43e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80022ec:	d035      	beq.n	800235a <HAL_DMA_IRQHandler+0x496>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80022f4:	d12c      	bne.n	8002350 <HAL_DMA_IRQHandler+0x48c>
            if(hdma->XferM1CpltCallback != NULL)
 80022f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d040      	beq.n	800237e <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferM1CpltCallback(hdma);
 80022fc:	4620      	mov	r0, r4
 80022fe:	4798      	blx	r3
 8002300:	e03d      	b.n	800237e <HAL_DMA_IRQHandler+0x4ba>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002302:	6822      	ldr	r2, [r4, #0]
 8002304:	6813      	ldr	r3, [r2, #0]
 8002306:	f023 0316 	bic.w	r3, r3, #22
 800230a:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800230c:	6822      	ldr	r2, [r4, #0]
 800230e:	6953      	ldr	r3, [r2, #20]
 8002310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002314:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002318:	b1b3      	cbz	r3, 8002348 <HAL_DMA_IRQHandler+0x484>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	f023 0308 	bic.w	r3, r3, #8
 8002322:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002324:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002326:	f003 021f 	and.w	r2, r3, #31
 800232a:	233f      	movs	r3, #63	; 0x3f
 800232c:	4093      	lsls	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
          __HAL_UNLOCK(hdma);
 8002330:	2300      	movs	r3, #0
 8002332:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002336:	2301      	movs	r3, #1
 8002338:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 800233c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800233e:	2b00      	cmp	r3, #0
 8002340:	d07f      	beq.n	8002442 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferAbortCallback(hdma);
 8002342:	4620      	mov	r0, r4
 8002344:	4798      	blx	r3
          return;
 8002346:	e07c      	b.n	8002442 <HAL_DMA_IRQHandler+0x57e>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002348:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1e5      	bne.n	800231a <HAL_DMA_IRQHandler+0x456>
 800234e:	e7e9      	b.n	8002324 <HAL_DMA_IRQHandler+0x460>
            if(hdma->XferCpltCallback != NULL)
 8002350:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002352:	b1a3      	cbz	r3, 800237e <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferCpltCallback(hdma);
 8002354:	4620      	mov	r0, r4
 8002356:	4798      	blx	r3
 8002358:	e011      	b.n	800237e <HAL_DMA_IRQHandler+0x4ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002360:	d109      	bne.n	8002376 <HAL_DMA_IRQHandler+0x4b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	f022 0210 	bic.w	r2, r2, #16
 8002368:	601a      	str	r2, [r3, #0]
            __HAL_UNLOCK(hdma);
 800236a:	2300      	movs	r3, #0
 800236c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8002370:	2301      	movs	r3, #1
 8002372:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8002376:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002378:	b10b      	cbz	r3, 800237e <HAL_DMA_IRQHandler+0x4ba>
            hdma->XferCpltCallback(hdma);
 800237a:	4620      	mov	r0, r4
 800237c:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800237e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002380:	2b00      	cmp	r3, #0
 8002382:	d05e      	beq.n	8002442 <HAL_DMA_IRQHandler+0x57e>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002384:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002386:	f013 0f01 	tst.w	r3, #1
 800238a:	d056      	beq.n	800243a <HAL_DMA_IRQHandler+0x576>
        hdma->State = HAL_DMA_STATE_ABORT;
 800238c:	2304      	movs	r3, #4
 800238e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	491a      	ldr	r1, [pc, #104]	; (8002400 <HAL_DMA_IRQHandler+0x53c>)
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <HAL_DMA_IRQHandler+0x540>)
 8002398:	4293      	cmp	r3, r2
 800239a:	bf18      	it	ne
 800239c:	428b      	cmpne	r3, r1
 800239e:	d033      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023a0:	3218      	adds	r2, #24
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d030      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023a6:	3218      	adds	r2, #24
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d02d      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023ac:	3218      	adds	r2, #24
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d02a      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023b2:	3218      	adds	r2, #24
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d027      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023b8:	3218      	adds	r2, #24
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d024      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023be:	3218      	adds	r2, #24
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d021      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023c4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d01d      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023cc:	3218      	adds	r2, #24
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01a      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023d2:	3218      	adds	r2, #24
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d017      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023d8:	3218      	adds	r2, #24
 80023da:	4293      	cmp	r3, r2
 80023dc:	d014      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023de:	3218      	adds	r2, #24
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d011      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023e4:	3218      	adds	r2, #24
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00e      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023ea:	3218      	adds	r2, #24
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00b      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023f0:	3218      	adds	r2, #24
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d008      	beq.n	8002408 <HAL_DMA_IRQHandler+0x544>
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	f022 0201 	bic.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e007      	b.n	8002410 <HAL_DMA_IRQHandler+0x54c>
 8002400:	40020010 	.word	0x40020010
 8002404:	40020028 	.word	0x40020028
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8002410:	9b01      	ldr	r3, [sp, #4]
 8002412:	3301      	adds	r3, #1
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	42ab      	cmp	r3, r5
 8002418:	d804      	bhi.n	8002424 <HAL_DMA_IRQHandler+0x560>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f013 0f01 	tst.w	r3, #1
 8002422:	d1f5      	bne.n	8002410 <HAL_DMA_IRQHandler+0x54c>
        __HAL_UNLOCK(hdma);
 8002424:	2300      	movs	r3, #0
 8002426:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f013 0f01 	tst.w	r3, #1
 8002432:	d008      	beq.n	8002446 <HAL_DMA_IRQHandler+0x582>
          hdma->State = HAL_DMA_STATE_ERROR;
 8002434:	2303      	movs	r3, #3
 8002436:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800243a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800243c:	b10b      	cbz	r3, 8002442 <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 800243e:	4620      	mov	r0, r4
 8002440:	4798      	blx	r3
}
 8002442:	b003      	add	sp, #12
 8002444:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8002446:	2301      	movs	r3, #1
 8002448:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800244c:	e7f5      	b.n	800243a <HAL_DMA_IRQHandler+0x576>
          if(hdma->XferHalfCpltCallback != NULL)
 800244e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f6      	beq.n	8002442 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferHalfCpltCallback(hdma);
 8002454:	4620      	mov	r0, r4
 8002456:	4798      	blx	r3
 8002458:	e7f3      	b.n	8002442 <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800245a:	f012 0f20 	tst.w	r2, #32
 800245e:	d13a      	bne.n	80024d6 <HAL_DMA_IRQHandler+0x612>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	4964      	ldr	r1, [pc, #400]	; (80025f4 <HAL_DMA_IRQHandler+0x730>)
 8002464:	4a64      	ldr	r2, [pc, #400]	; (80025f8 <HAL_DMA_IRQHandler+0x734>)
 8002466:	4293      	cmp	r3, r2
 8002468:	bf18      	it	ne
 800246a:	428b      	cmpne	r3, r1
 800246c:	d02f      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 800246e:	3218      	adds	r2, #24
 8002470:	4293      	cmp	r3, r2
 8002472:	d02c      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 8002474:	3218      	adds	r2, #24
 8002476:	4293      	cmp	r3, r2
 8002478:	d029      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 800247a:	3218      	adds	r2, #24
 800247c:	4293      	cmp	r3, r2
 800247e:	d026      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 8002480:	3218      	adds	r2, #24
 8002482:	4293      	cmp	r3, r2
 8002484:	d023      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 8002486:	3218      	adds	r2, #24
 8002488:	4293      	cmp	r3, r2
 800248a:	d020      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 800248c:	3218      	adds	r2, #24
 800248e:	4293      	cmp	r3, r2
 8002490:	d01d      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 8002492:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002496:	4293      	cmp	r3, r2
 8002498:	d019      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 800249a:	3218      	adds	r2, #24
 800249c:	4293      	cmp	r3, r2
 800249e:	d016      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 80024a0:	3218      	adds	r2, #24
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 80024a6:	3218      	adds	r2, #24
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d010      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 80024ac:	3218      	adds	r2, #24
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00d      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 80024b2:	3218      	adds	r2, #24
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d00a      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 80024b8:	3218      	adds	r2, #24
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 80024be:	3218      	adds	r2, #24
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d004      	beq.n	80024ce <HAL_DMA_IRQHandler+0x60a>
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	f022 0204 	bic.w	r2, r2, #4
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e003      	b.n	80024d6 <HAL_DMA_IRQHandler+0x612>
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	f022 0208 	bic.w	r2, r2, #8
 80024d4:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80024d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0b2      	beq.n	8002442 <HAL_DMA_IRQHandler+0x57e>
          hdma->XferHalfCpltCallback(hdma);
 80024dc:	4620      	mov	r0, r4
 80024de:	4798      	blx	r3
 80024e0:	e7af      	b.n	8002442 <HAL_DMA_IRQHandler+0x57e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80024e2:	2002      	movs	r0, #2
 80024e4:	4088      	lsls	r0, r1
 80024e6:	ea10 0f0c 	tst.w	r0, ip
 80024ea:	d060      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6ea>
 80024ec:	f012 0f02 	tst.w	r2, #2
 80024f0:	d05d      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6ea>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80024f2:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024f4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80024f8:	d00e      	beq.n	8002518 <HAL_DMA_IRQHandler+0x654>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80024fa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80024fe:	d105      	bne.n	800250c <HAL_DMA_IRQHandler+0x648>
          if(hdma->XferM1CpltCallback != NULL)
 8002500:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002502:	2b00      	cmp	r3, #0
 8002504:	d09d      	beq.n	8002442 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1CpltCallback(hdma);
 8002506:	4620      	mov	r0, r4
 8002508:	4798      	blx	r3
 800250a:	e79a      	b.n	8002442 <HAL_DMA_IRQHandler+0x57e>
          if(hdma->XferCpltCallback != NULL)
 800250c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800250e:	2b00      	cmp	r3, #0
 8002510:	d097      	beq.n	8002442 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferCpltCallback(hdma);
 8002512:	4620      	mov	r0, r4
 8002514:	4798      	blx	r3
 8002516:	e794      	b.n	8002442 <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002518:	f012 0f20 	tst.w	r2, #32
 800251c:	d140      	bne.n	80025a0 <HAL_DMA_IRQHandler+0x6dc>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	4934      	ldr	r1, [pc, #208]	; (80025f4 <HAL_DMA_IRQHandler+0x730>)
 8002522:	4a35      	ldr	r2, [pc, #212]	; (80025f8 <HAL_DMA_IRQHandler+0x734>)
 8002524:	4293      	cmp	r3, r2
 8002526:	bf18      	it	ne
 8002528:	428b      	cmpne	r3, r1
 800252a:	d02f      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 800252c:	3218      	adds	r2, #24
 800252e:	4293      	cmp	r3, r2
 8002530:	d02c      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 8002532:	3218      	adds	r2, #24
 8002534:	4293      	cmp	r3, r2
 8002536:	d029      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 8002538:	3218      	adds	r2, #24
 800253a:	4293      	cmp	r3, r2
 800253c:	d026      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 800253e:	3218      	adds	r2, #24
 8002540:	4293      	cmp	r3, r2
 8002542:	d023      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 8002544:	3218      	adds	r2, #24
 8002546:	4293      	cmp	r3, r2
 8002548:	d020      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 800254a:	3218      	adds	r2, #24
 800254c:	4293      	cmp	r3, r2
 800254e:	d01d      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 8002550:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002554:	4293      	cmp	r3, r2
 8002556:	d019      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 8002558:	3218      	adds	r2, #24
 800255a:	4293      	cmp	r3, r2
 800255c:	d016      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 800255e:	3218      	adds	r2, #24
 8002560:	4293      	cmp	r3, r2
 8002562:	d013      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 8002564:	3218      	adds	r2, #24
 8002566:	4293      	cmp	r3, r2
 8002568:	d010      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 800256a:	3218      	adds	r2, #24
 800256c:	4293      	cmp	r3, r2
 800256e:	d00d      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 8002570:	3218      	adds	r2, #24
 8002572:	4293      	cmp	r3, r2
 8002574:	d00a      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 8002576:	3218      	adds	r2, #24
 8002578:	4293      	cmp	r3, r2
 800257a:	d007      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 800257c:	3218      	adds	r2, #24
 800257e:	4293      	cmp	r3, r2
 8002580:	d004      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c8>
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	f022 020a 	bic.w	r2, r2, #10
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e003      	b.n	8002594 <HAL_DMA_IRQHandler+0x6d0>
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	f022 0214 	bic.w	r2, r2, #20
 8002592:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002594:	2300      	movs	r3, #0
 8002596:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800259a:	2301      	movs	r3, #1
 800259c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80025a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f43f af4d 	beq.w	8002442 <HAL_DMA_IRQHandler+0x57e>
          hdma->XferCpltCallback(hdma);
 80025a8:	4620      	mov	r0, r4
 80025aa:	4798      	blx	r3
 80025ac:	e749      	b.n	8002442 <HAL_DMA_IRQHandler+0x57e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80025ae:	2008      	movs	r0, #8
 80025b0:	fa00 f101 	lsl.w	r1, r0, r1
 80025b4:	ea11 0f0c 	tst.w	r1, ip
 80025b8:	f43f af43 	beq.w	8002442 <HAL_DMA_IRQHandler+0x57e>
 80025bc:	f012 0f08 	tst.w	r2, #8
 80025c0:	f43f af3f 	beq.w	8002442 <HAL_DMA_IRQHandler+0x57e>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	f022 020e 	bic.w	r2, r2, #14
 80025ca:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80025cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	2201      	movs	r2, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025da:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80025dc:	2300      	movs	r3, #0
 80025de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80025e2:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 80025e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f43f af2a 	beq.w	8002442 <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 80025ee:	4620      	mov	r0, r4
 80025f0:	4798      	blx	r3
  }
 80025f2:	e726      	b.n	8002442 <HAL_DMA_IRQHandler+0x57e>
 80025f4:	40020010 	.word	0x40020010
 80025f8:	40020028 	.word	0x40020028

080025fc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80025fc:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80025fe:	4770      	bx	lr

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002602:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8002604:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002606:	e03a      	b.n	800267e <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002608:	2409      	movs	r4, #9
 800260a:	e000      	b.n	800260e <HAL_GPIO_Init+0xe>
 800260c:	2400      	movs	r4, #0
 800260e:	40b4      	lsls	r4, r6
 8002610:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002612:	3502      	adds	r5, #2
 8002614:	4e6f      	ldr	r6, [pc, #444]	; (80027d4 <HAL_GPIO_Init+0x1d4>)
 8002616:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800261a:	4c6f      	ldr	r4, [pc, #444]	; (80027d8 <HAL_GPIO_Init+0x1d8>)
 800261c:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800261e:	43d4      	mvns	r4, r2
 8002620:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002624:	684f      	ldr	r7, [r1, #4]
 8002626:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800262a:	d001      	beq.n	8002630 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 800262c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002630:	4d69      	ldr	r5, [pc, #420]	; (80027d8 <HAL_GPIO_Init+0x1d8>)
 8002632:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002634:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 8002636:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800263a:	684f      	ldr	r7, [r1, #4]
 800263c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002640:	d001      	beq.n	8002646 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8002642:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002646:	4e64      	ldr	r6, [pc, #400]	; (80027d8 <HAL_GPIO_Init+0x1d8>)
 8002648:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800264a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800264e:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002650:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002654:	684f      	ldr	r7, [r1, #4]
 8002656:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800265a:	d001      	beq.n	8002660 <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 800265c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002660:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002664:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8002666:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002668:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800266a:	684e      	ldr	r6, [r1, #4]
 800266c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002670:	d001      	beq.n	8002676 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002672:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800267a:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 800267c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800267e:	680a      	ldr	r2, [r1, #0]
 8002680:	fa32 f403 	lsrs.w	r4, r2, r3
 8002684:	f000 80a3 	beq.w	80027ce <HAL_GPIO_Init+0x1ce>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002688:	2401      	movs	r4, #1
 800268a:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 800268c:	4022      	ands	r2, r4
 800268e:	d0f5      	beq.n	800267c <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002690:	684d      	ldr	r5, [r1, #4]
 8002692:	1e6e      	subs	r6, r5, #1
 8002694:	2d11      	cmp	r5, #17
 8002696:	bf18      	it	ne
 8002698:	2e01      	cmpne	r6, #1
 800269a:	d901      	bls.n	80026a0 <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800269c:	2d12      	cmp	r5, #18
 800269e:	d112      	bne.n	80026c6 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 80026a0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026a2:	005f      	lsls	r7, r3, #1
 80026a4:	2503      	movs	r5, #3
 80026a6:	40bd      	lsls	r5, r7
 80026a8:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ac:	68cd      	ldr	r5, [r1, #12]
 80026ae:	40bd      	lsls	r5, r7
 80026b0:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80026b2:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80026b4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026b6:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026ba:	684d      	ldr	r5, [r1, #4]
 80026bc:	f3c5 1400 	ubfx	r4, r5, #4, #1
 80026c0:	409c      	lsls	r4, r3
 80026c2:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 80026c4:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80026c6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026c8:	005e      	lsls	r6, r3, #1
 80026ca:	2503      	movs	r5, #3
 80026cc:	40b5      	lsls	r5, r6
 80026ce:	43ec      	mvns	r4, r5
 80026d0:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d4:	688d      	ldr	r5, [r1, #8]
 80026d6:	40b5      	lsls	r5, r6
 80026d8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80026da:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026dc:	684d      	ldr	r5, [r1, #4]
 80026de:	2d12      	cmp	r5, #18
 80026e0:	bf18      	it	ne
 80026e2:	2d02      	cmpne	r5, #2
 80026e4:	d113      	bne.n	800270e <HAL_GPIO_Init+0x10e>
        temp = GPIOx->AFR[position >> 3U];
 80026e6:	08df      	lsrs	r7, r3, #3
 80026e8:	3708      	adds	r7, #8
 80026ea:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026ee:	f003 0507 	and.w	r5, r3, #7
 80026f2:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 80026f6:	250f      	movs	r5, #15
 80026f8:	fa05 f50c 	lsl.w	r5, r5, ip
 80026fc:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002700:	690d      	ldr	r5, [r1, #16]
 8002702:	fa05 f50c 	lsl.w	r5, r5, ip
 8002706:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 800270a:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 800270e:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002710:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002712:	684c      	ldr	r4, [r1, #4]
 8002714:	f004 0403 	and.w	r4, r4, #3
 8002718:	40b4      	lsls	r4, r6
 800271a:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800271c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800271e:	684c      	ldr	r4, [r1, #4]
 8002720:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002724:	d0aa      	beq.n	800267c <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002726:	4c2d      	ldr	r4, [pc, #180]	; (80027dc <HAL_GPIO_Init+0x1dc>)
 8002728:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 800272c:	f045 0502 	orr.w	r5, r5, #2
 8002730:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8002734:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8002738:	f004 0402 	and.w	r4, r4, #2
 800273c:	9401      	str	r4, [sp, #4]
 800273e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002740:	089d      	lsrs	r5, r3, #2
 8002742:	1cae      	adds	r6, r5, #2
 8002744:	4c23      	ldr	r4, [pc, #140]	; (80027d4 <HAL_GPIO_Init+0x1d4>)
 8002746:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800274a:	f003 0403 	and.w	r4, r3, #3
 800274e:	00a6      	lsls	r6, r4, #2
 8002750:	240f      	movs	r4, #15
 8002752:	40b4      	lsls	r4, r6
 8002754:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002758:	4c21      	ldr	r4, [pc, #132]	; (80027e0 <HAL_GPIO_Init+0x1e0>)
 800275a:	42a0      	cmp	r0, r4
 800275c:	f43f af56 	beq.w	800260c <HAL_GPIO_Init+0xc>
 8002760:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002764:	42a0      	cmp	r0, r4
 8002766:	d022      	beq.n	80027ae <HAL_GPIO_Init+0x1ae>
 8002768:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800276c:	42a0      	cmp	r0, r4
 800276e:	d020      	beq.n	80027b2 <HAL_GPIO_Init+0x1b2>
 8002770:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002774:	42a0      	cmp	r0, r4
 8002776:	d01e      	beq.n	80027b6 <HAL_GPIO_Init+0x1b6>
 8002778:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800277c:	42a0      	cmp	r0, r4
 800277e:	d01c      	beq.n	80027ba <HAL_GPIO_Init+0x1ba>
 8002780:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002784:	42a0      	cmp	r0, r4
 8002786:	d01a      	beq.n	80027be <HAL_GPIO_Init+0x1be>
 8002788:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800278c:	42a0      	cmp	r0, r4
 800278e:	d018      	beq.n	80027c2 <HAL_GPIO_Init+0x1c2>
 8002790:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002794:	42a0      	cmp	r0, r4
 8002796:	d016      	beq.n	80027c6 <HAL_GPIO_Init+0x1c6>
 8002798:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800279c:	42a0      	cmp	r0, r4
 800279e:	d014      	beq.n	80027ca <HAL_GPIO_Init+0x1ca>
 80027a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027a4:	42a0      	cmp	r0, r4
 80027a6:	f43f af2f 	beq.w	8002608 <HAL_GPIO_Init+0x8>
 80027aa:	240a      	movs	r4, #10
 80027ac:	e72f      	b.n	800260e <HAL_GPIO_Init+0xe>
 80027ae:	2401      	movs	r4, #1
 80027b0:	e72d      	b.n	800260e <HAL_GPIO_Init+0xe>
 80027b2:	2402      	movs	r4, #2
 80027b4:	e72b      	b.n	800260e <HAL_GPIO_Init+0xe>
 80027b6:	2403      	movs	r4, #3
 80027b8:	e729      	b.n	800260e <HAL_GPIO_Init+0xe>
 80027ba:	2404      	movs	r4, #4
 80027bc:	e727      	b.n	800260e <HAL_GPIO_Init+0xe>
 80027be:	2405      	movs	r4, #5
 80027c0:	e725      	b.n	800260e <HAL_GPIO_Init+0xe>
 80027c2:	2406      	movs	r4, #6
 80027c4:	e723      	b.n	800260e <HAL_GPIO_Init+0xe>
 80027c6:	2407      	movs	r4, #7
 80027c8:	e721      	b.n	800260e <HAL_GPIO_Init+0xe>
 80027ca:	2408      	movs	r4, #8
 80027cc:	e71f      	b.n	800260e <HAL_GPIO_Init+0xe>
  }
}
 80027ce:	b003      	add	sp, #12
 80027d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d2:	bf00      	nop
 80027d4:	58000400 	.word	0x58000400
 80027d8:	58000080 	.word	0x58000080
 80027dc:	58024400 	.word	0x58024400
 80027e0:	58020000 	.word	0x58020000

080027e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80027e4:	6903      	ldr	r3, [r0, #16]
 80027e6:	4219      	tst	r1, r3
 80027e8:	d001      	beq.n	80027ee <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80027ea:	2001      	movs	r0, #1
 80027ec:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ee:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80027f0:	4770      	bx	lr

080027f2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027f2:	b10a      	cbz	r2, 80027f8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f4:	6181      	str	r1, [r0, #24]
 80027f6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80027f8:	0409      	lsls	r1, r1, #16
 80027fa:	6181      	str	r1, [r0, #24]
  }
}
 80027fc:	4770      	bx	lr

080027fe <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027fe:	6803      	ldr	r3, [r0, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	f012 0f02 	tst.w	r2, #2
 8002806:	d001      	beq.n	800280c <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002808:	2200      	movs	r2, #0
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800280c:	6803      	ldr	r3, [r0, #0]
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	f012 0f01 	tst.w	r2, #1
 8002814:	d103      	bne.n	800281e <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	619a      	str	r2, [r3, #24]
  }
}
 800281e:	4770      	bx	lr

08002820 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002820:	b470      	push	{r4, r5, r6}
 8002822:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002824:	6805      	ldr	r5, [r0, #0]
 8002826:	6868      	ldr	r0, [r5, #4]
 8002828:	0d74      	lsrs	r4, r6, #21
 800282a:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800282e:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002832:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002836:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800283a:	f044 0403 	orr.w	r4, r4, #3
 800283e:	ea20 0004 	bic.w	r0, r0, r4
 8002842:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002846:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800284a:	4319      	orrs	r1, r3
 800284c:	4331      	orrs	r1, r6
 800284e:	4301      	orrs	r1, r0
 8002850:	6069      	str	r1, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002852:	bc70      	pop	{r4, r5, r6}
 8002854:	4770      	bx	lr

08002856 <I2C_IsAcknowledgeFailed>:
{
 8002856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002858:	4605      	mov	r5, r0
 800285a:	460e      	mov	r6, r1
 800285c:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800285e:	6803      	ldr	r3, [r0, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f013 0f10 	tst.w	r3, #16
 8002866:	d101      	bne.n	800286c <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8002868:	2000      	movs	r0, #0
}
 800286a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800286c:	682b      	ldr	r3, [r5, #0]
 800286e:	699c      	ldr	r4, [r3, #24]
 8002870:	f014 0f20 	tst.w	r4, #32
 8002874:	d117      	bne.n	80028a6 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002876:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800287a:	d0f7      	beq.n	800286c <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287c:	f7fd fd8e 	bl	800039c <HAL_GetTick>
 8002880:	1bc0      	subs	r0, r0, r7
 8002882:	42b0      	cmp	r0, r6
 8002884:	d801      	bhi.n	800288a <I2C_IsAcknowledgeFailed+0x34>
 8002886:	2e00      	cmp	r6, #0
 8002888:	d1f0      	bne.n	800286c <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800288a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800288c:	f043 0320 	orr.w	r3, r3, #32
 8002890:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002892:	2320      	movs	r3, #32
 8002894:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002898:	2300      	movs	r3, #0
 800289a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800289e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 80028a2:	2001      	movs	r0, #1
 80028a4:	e7e1      	b.n	800286a <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a6:	2210      	movs	r2, #16
 80028a8:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028aa:	682b      	ldr	r3, [r5, #0]
 80028ac:	2420      	movs	r4, #32
 80028ae:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80028b0:	4628      	mov	r0, r5
 80028b2:	f7ff ffa4 	bl	80027fe <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80028b6:	682a      	ldr	r2, [r5, #0]
 80028b8:	6853      	ldr	r3, [r2, #4]
 80028ba:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80028be:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80028c2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028cc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d8:	2300      	movs	r3, #0
 80028da:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80028de:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 80028e2:	2001      	movs	r0, #1
 80028e4:	e7c1      	b.n	800286a <I2C_IsAcknowledgeFailed+0x14>

080028e6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80028e6:	b570      	push	{r4, r5, r6, lr}
 80028e8:	4604      	mov	r4, r0
 80028ea:	460d      	mov	r5, r1
 80028ec:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f013 0f02 	tst.w	r3, #2
 80028f6:	d11d      	bne.n	8002934 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f8:	4632      	mov	r2, r6
 80028fa:	4629      	mov	r1, r5
 80028fc:	4620      	mov	r0, r4
 80028fe:	f7ff ffaa 	bl	8002856 <I2C_IsAcknowledgeFailed>
 8002902:	b9c8      	cbnz	r0, 8002938 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002904:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002908:	d0f1      	beq.n	80028ee <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290a:	f7fd fd47 	bl	800039c <HAL_GetTick>
 800290e:	1b80      	subs	r0, r0, r6
 8002910:	42a8      	cmp	r0, r5
 8002912:	d801      	bhi.n	8002918 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002914:	2d00      	cmp	r5, #0
 8002916:	d1ea      	bne.n	80028ee <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002918:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800291a:	f043 0320 	orr.w	r3, r3, #32
 800291e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002920:	2320      	movs	r3, #32
 8002922:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002926:	2300      	movs	r3, #0
 8002928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800292c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002930:	2001      	movs	r0, #1
 8002932:	e000      	b.n	8002936 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002934:	2000      	movs	r0, #0
}
 8002936:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002938:	2001      	movs	r0, #1
 800293a:	e7fc      	b.n	8002936 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800293c <I2C_WaitOnFlagUntilTimeout>:
{
 800293c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002940:	4606      	mov	r6, r0
 8002942:	4688      	mov	r8, r1
 8002944:	4617      	mov	r7, r2
 8002946:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002948:	6834      	ldr	r4, [r6, #0]
 800294a:	69a4      	ldr	r4, [r4, #24]
 800294c:	ea38 0304 	bics.w	r3, r8, r4
 8002950:	bf0c      	ite	eq
 8002952:	2401      	moveq	r4, #1
 8002954:	2400      	movne	r4, #0
 8002956:	42bc      	cmp	r4, r7
 8002958:	d118      	bne.n	800298c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800295a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800295e:	d0f3      	beq.n	8002948 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002960:	f7fd fd1c 	bl	800039c <HAL_GetTick>
 8002964:	9b06      	ldr	r3, [sp, #24]
 8002966:	1ac0      	subs	r0, r0, r3
 8002968:	42a8      	cmp	r0, r5
 800296a:	d801      	bhi.n	8002970 <I2C_WaitOnFlagUntilTimeout+0x34>
 800296c:	2d00      	cmp	r5, #0
 800296e:	d1eb      	bne.n	8002948 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002970:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002972:	f043 0320 	orr.w	r3, r3, #32
 8002976:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002978:	2320      	movs	r3, #32
 800297a:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800297e:	2300      	movs	r3, #0
 8002980:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002984:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8002988:	2001      	movs	r0, #1
 800298a:	e000      	b.n	800298e <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 800298c:	2000      	movs	r0, #0
}
 800298e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002992 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002992:	b570      	push	{r4, r5, r6, lr}
 8002994:	4605      	mov	r5, r0
 8002996:	460c      	mov	r4, r1
 8002998:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800299a:	682b      	ldr	r3, [r5, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f013 0f20 	tst.w	r3, #32
 80029a2:	d11a      	bne.n	80029da <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a4:	4632      	mov	r2, r6
 80029a6:	4621      	mov	r1, r4
 80029a8:	4628      	mov	r0, r5
 80029aa:	f7ff ff54 	bl	8002856 <I2C_IsAcknowledgeFailed>
 80029ae:	b9b0      	cbnz	r0, 80029de <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b0:	f7fd fcf4 	bl	800039c <HAL_GetTick>
 80029b4:	1b80      	subs	r0, r0, r6
 80029b6:	42a0      	cmp	r0, r4
 80029b8:	d801      	bhi.n	80029be <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80029ba:	2c00      	cmp	r4, #0
 80029bc:	d1ed      	bne.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029be:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80029c0:	f043 0320 	orr.w	r3, r3, #32
 80029c4:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	2320      	movs	r3, #32
 80029c8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80029d2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80029d6:	2001      	movs	r0, #1
}
 80029d8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80029da:	2000      	movs	r0, #0
 80029dc:	e7fc      	b.n	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80029de:	2001      	movs	r0, #1
 80029e0:	e7fa      	b.n	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
	...

080029e4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d057      	beq.n	8002a98 <HAL_I2C_Init+0xb4>
{
 80029e8:	b510      	push	{r4, lr}
 80029ea:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d041      	beq.n	8002a78 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f4:	2324      	movs	r3, #36	; 0x24
 80029f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80029fa:	6822      	ldr	r2, [r4, #0]
 80029fc:	6813      	ldr	r3, [r2, #0]
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a04:	6863      	ldr	r3, [r4, #4]
 8002a06:	6822      	ldr	r2, [r4, #0]
 8002a08:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002a0c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a0e:	6822      	ldr	r2, [r4, #0]
 8002a10:	6893      	ldr	r3, [r2, #8]
 8002a12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a16:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a18:	68e3      	ldr	r3, [r4, #12]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d031      	beq.n	8002a82 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a1e:	68a3      	ldr	r3, [r4, #8]
 8002a20:	6822      	ldr	r2, [r4, #0]
 8002a22:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002a26:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a28:	68e3      	ldr	r3, [r4, #12]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d02f      	beq.n	8002a8e <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a2e:	6822      	ldr	r2, [r4, #0]
 8002a30:	6851      	ldr	r1, [r2, #4]
 8002a32:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <HAL_I2C_Init+0xb8>)
 8002a34:	430b      	orrs	r3, r1
 8002a36:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a38:	6822      	ldr	r2, [r4, #0]
 8002a3a:	68d3      	ldr	r3, [r2, #12]
 8002a3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a40:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a42:	6923      	ldr	r3, [r4, #16]
 8002a44:	6962      	ldr	r2, [r4, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	69a1      	ldr	r1, [r4, #24]
 8002a4a:	6822      	ldr	r2, [r4, #0]
 8002a4c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a50:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a52:	69e3      	ldr	r3, [r4, #28]
 8002a54:	6a21      	ldr	r1, [r4, #32]
 8002a56:	6822      	ldr	r2, [r4, #0]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002a5c:	6822      	ldr	r2, [r4, #0]
 8002a5e:	6813      	ldr	r3, [r2, #0]
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a66:	2000      	movs	r0, #0
 8002a68:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a70:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a72:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002a76:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002a78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002a7c:	f005 fe8e 	bl	800879c <HAL_I2C_MspInit>
 8002a80:	e7b8      	b.n	80029f4 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a82:	68a3      	ldr	r3, [r4, #8]
 8002a84:	6822      	ldr	r2, [r4, #0]
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8a:	6093      	str	r3, [r2, #8]
 8002a8c:	e7cc      	b.n	8002a28 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	e7ca      	b.n	8002a2e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002a98:	2001      	movs	r0, #1
}
 8002a9a:	4770      	bx	lr
 8002a9c:	02008000 	.word	0x02008000

08002aa0 <HAL_I2C_Master_Transmit>:
{
 8002aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	460f      	mov	r7, r1
 8002aa8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aaa:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8002aae:	b2c9      	uxtb	r1, r1
 8002ab0:	2920      	cmp	r1, #32
 8002ab2:	f040 80a3 	bne.w	8002bfc <HAL_I2C_Master_Transmit+0x15c>
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	4690      	mov	r8, r2
 8002aba:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8002abc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	f000 809f 	beq.w	8002c04 <HAL_I2C_Master_Transmit+0x164>
 8002ac6:	f04f 0a01 	mov.w	sl, #1
 8002aca:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002ace:	f7fd fc65 	bl	800039c <HAL_GetTick>
 8002ad2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ad4:	9000      	str	r0, [sp, #0]
 8002ad6:	2319      	movs	r3, #25
 8002ad8:	4652      	mov	r2, sl
 8002ada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7ff ff2c 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	f040 808f 	bne.w	8002c08 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002aea:	2321      	movs	r3, #33	; 0x21
 8002aec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002af0:	2310      	movs	r3, #16
 8002af2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002afa:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002afe:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b02:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2bff      	cmp	r3, #255	; 0xff
 8002b0a:	d90a      	bls.n	8002b22 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0c:	22ff      	movs	r2, #255	; 0xff
 8002b0e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b10:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_I2C_Master_Transmit+0x178>)
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b18:	4639      	mov	r1, r7
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f7ff fe80 	bl	8002820 <I2C_TransferConfig>
 8002b20:	e018      	b.n	8002b54 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8002b22:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b24:	b292      	uxth	r2, r2
 8002b26:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002b28:	4b3b      	ldr	r3, [pc, #236]	; (8002c18 <HAL_I2C_Master_Transmit+0x178>)
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	4639      	mov	r1, r7
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7ff fe73 	bl	8002820 <I2C_TransferConfig>
 8002b3a:	e00b      	b.n	8002b54 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8002b3c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b3e:	b292      	uxth	r2, r2
 8002b40:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b42:	2300      	movs	r3, #0
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	4639      	mov	r1, r7
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7ff fe66 	bl	8002820 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d033      	beq.n	8002bc4 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5c:	462a      	mov	r2, r5
 8002b5e:	4631      	mov	r1, r6
 8002b60:	4620      	mov	r0, r4
 8002b62:	f7ff fec0 	bl	80028e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d150      	bne.n	8002c0c <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	7812      	ldrb	r2, [r2, #0]
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b74:	3301      	adds	r3, #1
 8002b76:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002b78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b8c:	b292      	uxth	r2, r2
 8002b8e:	2a00      	cmp	r2, #0
 8002b90:	d0e0      	beq.n	8002b54 <HAL_I2C_Master_Transmit+0xb4>
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1de      	bne.n	8002b54 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b96:	9500      	str	r5, [sp, #0]
 8002b98:	4633      	mov	r3, r6
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2180      	movs	r1, #128	; 0x80
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f7ff fecc 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 8002ba4:	bba0      	cbnz	r0, 8002c10 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ba6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2bff      	cmp	r3, #255	; 0xff
 8002bac:	d9c6      	bls.n	8002b3c <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bae:	22ff      	movs	r2, #255	; 0xff
 8002bb0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bba:	4639      	mov	r1, r7
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f7ff fe2f 	bl	8002820 <I2C_TransferConfig>
 8002bc2:	e7c7      	b.n	8002b54 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc4:	462a      	mov	r2, r5
 8002bc6:	4631      	mov	r1, r6
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff fee2 	bl	8002992 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bce:	bb08      	cbnz	r0, 8002c14 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002bd6:	6821      	ldr	r1, [r4, #0]
 8002bd8:	684b      	ldr	r3, [r1, #4]
 8002bda:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002bde:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002be2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bec:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002bf6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002bfa:	e000      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8002bfc:	2002      	movs	r0, #2
}
 8002bfe:	b002      	add	sp, #8
 8002c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002c04:	2002      	movs	r0, #2
 8002c06:	e7fa      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8002c08:	2001      	movs	r0, #1
 8002c0a:	e7f8      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	e7f6      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8002c10:	2001      	movs	r0, #1
 8002c12:	e7f4      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8002c14:	2001      	movs	r0, #1
 8002c16:	e7f2      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x15e>
 8002c18:	80002000 	.word	0x80002000

08002c1c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d124      	bne.n	8002c70 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c26:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d022      	beq.n	8002c74 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c34:	2324      	movs	r3, #36	; 0x24
 8002c36:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c3a:	6802      	ldr	r2, [r0, #0]
 8002c3c:	6813      	ldr	r3, [r2, #0]
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c44:	6802      	ldr	r2, [r0, #0]
 8002c46:	6813      	ldr	r3, [r2, #0]
 8002c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c4c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c4e:	6802      	ldr	r2, [r0, #0]
 8002c50:	6813      	ldr	r3, [r2, #0]
 8002c52:	4319      	orrs	r1, r3
 8002c54:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c56:	6802      	ldr	r2, [r0, #0]
 8002c58:	6813      	ldr	r3, [r2, #0]
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c60:	2320      	movs	r3, #32
 8002c62:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c66:	2300      	movs	r3, #0
 8002c68:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002c70:	2002      	movs	r0, #2
 8002c72:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002c74:	2002      	movs	r0, #2
  }
}
 8002c76:	4770      	bx	lr

08002c78 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c78:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d122      	bne.n	8002cc8 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c82:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d020      	beq.n	8002ccc <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c90:	2324      	movs	r3, #36	; 0x24
 8002c92:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c96:	6802      	ldr	r2, [r0, #0]
 8002c98:	6813      	ldr	r3, [r2, #0]
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ca0:	6802      	ldr	r2, [r0, #0]
 8002ca2:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ca4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ca8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cac:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cae:	6802      	ldr	r2, [r0, #0]
 8002cb0:	6813      	ldr	r3, [r2, #0]
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb8:	2320      	movs	r3, #32
 8002cba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002cc8:	2002      	movs	r0, #2
 8002cca:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002ccc:	2002      	movs	r0, #2
  }
}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002cd0:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <HAL_PWREx_ConfigSupply+0x50>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f013 0f04 	tst.w	r3, #4
 8002cd8:	d107      	bne.n	8002cea <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_PWREx_ConfigSupply+0x50>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	4283      	cmp	r3, r0
 8002ce4:	d01a      	beq.n	8002d1c <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	4770      	bx	lr
{
 8002cea:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002cec:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <HAL_PWREx_ConfigSupply+0x50>)
 8002cee:	68d3      	ldr	r3, [r2, #12]
 8002cf0:	f023 0307 	bic.w	r3, r3, #7
 8002cf4:	4318      	orrs	r0, r3
 8002cf6:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002cf8:	f7fd fb50 	bl	800039c <HAL_GetTick>
 8002cfc:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_PWREx_ConfigSupply+0x50>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002d06:	d107      	bne.n	8002d18 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d08:	f7fd fb48 	bl	800039c <HAL_GetTick>
 8002d0c:	1b00      	subs	r0, r0, r4
 8002d0e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d12:	d9f4      	bls.n	8002cfe <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8002d14:	2001      	movs	r0, #1
 8002d16:	e000      	b.n	8002d1a <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d18:	2000      	movs	r0, #0
}
 8002d1a:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8002d1c:	2000      	movs	r0, #0
}
 8002d1e:	4770      	bx	lr
 8002d20:	58024800 	.word	0x58024800

08002d24 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d24:	2800      	cmp	r0, #0
 8002d26:	f000 8304 	beq.w	8003332 <HAL_RCC_OscConfig+0x60e>
{
 8002d2a:	b538      	push	{r3, r4, r5, lr}
 8002d2c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2e:	6803      	ldr	r3, [r0, #0]
 8002d30:	f013 0f01 	tst.w	r3, #1
 8002d34:	d025      	beq.n	8002d82 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d36:	4aae      	ldr	r2, [pc, #696]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002d38:	6913      	ldr	r3, [r2, #16]
 8002d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d3e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	d015      	beq.n	8002d70 <HAL_RCC_OscConfig+0x4c>
 8002d44:	2b18      	cmp	r3, #24
 8002d46:	d00f      	beq.n	8002d68 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d48:	6863      	ldr	r3, [r4, #4]
 8002d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4e:	d03f      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xac>
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d153      	bne.n	8002dfc <HAL_RCC_OscConfig+0xd8>
 8002d54:	4ba6      	ldr	r3, [pc, #664]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e038      	b.n	8002dda <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d68:	f002 0203 	and.w	r2, r2, #3
 8002d6c:	2a02      	cmp	r2, #2
 8002d6e:	d1eb      	bne.n	8002d48 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	4b9f      	ldr	r3, [pc, #636]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002d78:	d003      	beq.n	8002d82 <HAL_RCC_OscConfig+0x5e>
 8002d7a:	6863      	ldr	r3, [r4, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 82da 	beq.w	8003336 <HAL_RCC_OscConfig+0x612>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	f013 0f02 	tst.w	r3, #2
 8002d88:	f000 808b 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d8c:	4a98      	ldr	r2, [pc, #608]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002d8e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d90:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d92:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002d96:	d05a      	beq.n	8002e4e <HAL_RCC_OscConfig+0x12a>
 8002d98:	2b18      	cmp	r3, #24
 8002d9a:	d055      	beq.n	8002e48 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d9c:	68e3      	ldr	r3, [r4, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80c8 	beq.w	8002f34 <HAL_RCC_OscConfig+0x210>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002da4:	4992      	ldr	r1, [pc, #584]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002da6:	680a      	ldr	r2, [r1, #0]
 8002da8:	f022 0219 	bic.w	r2, r2, #25
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fd faf4 	bl	800039c <HAL_GetTick>
 8002db4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002db6:	4b8e      	ldr	r3, [pc, #568]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f013 0f04 	tst.w	r3, #4
 8002dbe:	f040 8097 	bne.w	8002ef0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fd faeb 	bl	800039c <HAL_GetTick>
 8002dc6:	1b40      	subs	r0, r0, r5
 8002dc8:	2802      	cmp	r0, #2
 8002dca:	d9f4      	bls.n	8002db6 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8002dcc:	2003      	movs	r0, #3
 8002dce:	e2b9      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd0:	4a87      	ldr	r2, [pc, #540]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002dd2:	6813      	ldr	r3, [r2, #0]
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dda:	6863      	ldr	r3, [r4, #4]
 8002ddc:	b32b      	cbz	r3, 8002e2a <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8002dde:	f7fd fadd 	bl	800039c <HAL_GetTick>
 8002de2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002de4:	4b82      	ldr	r3, [pc, #520]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002dec:	d1c9      	bne.n	8002d82 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dee:	f7fd fad5 	bl	800039c <HAL_GetTick>
 8002df2:	1b40      	subs	r0, r0, r5
 8002df4:	2864      	cmp	r0, #100	; 0x64
 8002df6:	d9f5      	bls.n	8002de4 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8002df8:	2003      	movs	r0, #3
 8002dfa:	e2a3      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e00:	d009      	beq.n	8002e16 <HAL_RCC_OscConfig+0xf2>
 8002e02:	4b7b      	ldr	r3, [pc, #492]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	e7e1      	b.n	8002dda <HAL_RCC_OscConfig+0xb6>
 8002e16:	4b76      	ldr	r3, [pc, #472]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	e7d7      	b.n	8002dda <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8002e2a:	f7fd fab7 	bl	800039c <HAL_GetTick>
 8002e2e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e30:	4b6f      	ldr	r3, [pc, #444]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002e38:	d0a3      	beq.n	8002d82 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e3a:	f7fd faaf 	bl	800039c <HAL_GetTick>
 8002e3e:	1b40      	subs	r0, r0, r5
 8002e40:	2864      	cmp	r0, #100	; 0x64
 8002e42:	d9f5      	bls.n	8002e30 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8002e44:	2003      	movs	r0, #3
 8002e46:	e27d      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e48:	f012 0f03 	tst.w	r2, #3
 8002e4c:	d1a6      	bne.n	8002d9c <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e4e:	4b68      	ldr	r3, [pc, #416]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f013 0f04 	tst.w	r3, #4
 8002e56:	d003      	beq.n	8002e60 <HAL_RCC_OscConfig+0x13c>
 8002e58:	68e3      	ldr	r3, [r4, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 826d 	beq.w	800333a <HAL_RCC_OscConfig+0x616>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	f7fd fab6 	bl	80003d0 <HAL_GetREVID>
 8002e64:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e68:	4298      	cmp	r0, r3
 8002e6a:	d812      	bhi.n	8002e92 <HAL_RCC_OscConfig+0x16e>
 8002e6c:	6922      	ldr	r2, [r4, #16]
 8002e6e:	2a40      	cmp	r2, #64	; 0x40
 8002e70:	d007      	beq.n	8002e82 <HAL_RCC_OscConfig+0x15e>
 8002e72:	495f      	ldr	r1, [pc, #380]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002e74:	684b      	ldr	r3, [r1, #4]
 8002e76:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e7a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002e7e:	604b      	str	r3, [r1, #4]
 8002e80:	e00f      	b.n	8002ea2 <HAL_RCC_OscConfig+0x17e>
 8002e82:	4a5b      	ldr	r2, [pc, #364]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002e84:	6853      	ldr	r3, [r2, #4]
 8002e86:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e8e:	6053      	str	r3, [r2, #4]
 8002e90:	e007      	b.n	8002ea2 <HAL_RCC_OscConfig+0x17e>
 8002e92:	4a57      	ldr	r2, [pc, #348]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002e94:	6853      	ldr	r3, [r2, #4]
 8002e96:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e9a:	6921      	ldr	r1, [r4, #16]
 8002e9c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002ea0:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	f013 0f10 	tst.w	r3, #16
 8002ea8:	f000 8086 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x294>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eac:	4a50      	ldr	r2, [pc, #320]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002eae:	6913      	ldr	r3, [r2, #16]
 8002eb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002eb4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d054      	beq.n	8002f64 <HAL_RCC_OscConfig+0x240>
 8002eba:	2b18      	cmp	r3, #24
 8002ebc:	d04e      	beq.n	8002f5c <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ebe:	69e3      	ldr	r3, [r4, #28]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80b9 	beq.w	8003038 <HAL_RCC_OscConfig+0x314>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ec6:	4a4a      	ldr	r2, [pc, #296]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002ec8:	6813      	ldr	r3, [r2, #0]
 8002eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fd fa64 	bl	800039c <HAL_GetTick>
 8002ed4:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ed6:	4b46      	ldr	r3, [pc, #280]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ede:	f040 8089 	bne.w	8002ff4 <HAL_RCC_OscConfig+0x2d0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ee2:	f7fd fa5b 	bl	800039c <HAL_GetTick>
 8002ee6:	1b40      	subs	r0, r0, r5
 8002ee8:	2802      	cmp	r0, #2
 8002eea:	d9f4      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8002eec:	2003      	movs	r0, #3
 8002eee:	e229      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef0:	f7fd fa6e 	bl	80003d0 <HAL_GetREVID>
 8002ef4:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ef8:	4298      	cmp	r0, r3
 8002efa:	d812      	bhi.n	8002f22 <HAL_RCC_OscConfig+0x1fe>
 8002efc:	6922      	ldr	r2, [r4, #16]
 8002efe:	2a40      	cmp	r2, #64	; 0x40
 8002f00:	d007      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1ee>
 8002f02:	493b      	ldr	r1, [pc, #236]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002f04:	684b      	ldr	r3, [r1, #4]
 8002f06:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f0a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002f0e:	604b      	str	r3, [r1, #4]
 8002f10:	e7c7      	b.n	8002ea2 <HAL_RCC_OscConfig+0x17e>
 8002f12:	4a37      	ldr	r2, [pc, #220]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002f14:	6853      	ldr	r3, [r2, #4]
 8002f16:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1e:	6053      	str	r3, [r2, #4]
 8002f20:	e7bf      	b.n	8002ea2 <HAL_RCC_OscConfig+0x17e>
 8002f22:	4a33      	ldr	r2, [pc, #204]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002f24:	6853      	ldr	r3, [r2, #4]
 8002f26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f2a:	6921      	ldr	r1, [r4, #16]
 8002f2c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f30:	6053      	str	r3, [r2, #4]
 8002f32:	e7b6      	b.n	8002ea2 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 8002f34:	4a2e      	ldr	r2, [pc, #184]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002f36:	6813      	ldr	r3, [r2, #0]
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f3e:	f7fd fa2d 	bl	800039c <HAL_GetTick>
 8002f42:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f44:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f013 0f04 	tst.w	r3, #4
 8002f4c:	d0a9      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7fd fa25 	bl	800039c <HAL_GetTick>
 8002f52:	1b40      	subs	r0, r0, r5
 8002f54:	2802      	cmp	r0, #2
 8002f56:	d9f5      	bls.n	8002f44 <HAL_RCC_OscConfig+0x220>
            return HAL_TIMEOUT;
 8002f58:	2003      	movs	r0, #3
 8002f5a:	e1f3      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f5c:	f002 0203 	and.w	r2, r2, #3
 8002f60:	2a01      	cmp	r2, #1
 8002f62:	d1ac      	bne.n	8002ebe <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_OscConfig+0x252>
 8002f6e:	69e3      	ldr	r3, [r4, #28]
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	f040 81e4 	bne.w	800333e <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f76:	f7fd fa2b 	bl	80003d0 <HAL_GetREVID>
 8002f7a:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f7e:	4298      	cmp	r0, r3
 8002f80:	d812      	bhi.n	8002fa8 <HAL_RCC_OscConfig+0x284>
 8002f82:	6a22      	ldr	r2, [r4, #32]
 8002f84:	2a20      	cmp	r2, #32
 8002f86:	d007      	beq.n	8002f98 <HAL_RCC_OscConfig+0x274>
 8002f88:	4919      	ldr	r1, [pc, #100]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002f8a:	684b      	ldr	r3, [r1, #4]
 8002f8c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f90:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002f94:	604b      	str	r3, [r1, #4]
 8002f96:	e00f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x294>
 8002f98:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002f9a:	6853      	ldr	r3, [r2, #4]
 8002f9c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002fa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fa4:	6053      	str	r3, [r2, #4]
 8002fa6:	e007      	b.n	8002fb8 <HAL_RCC_OscConfig+0x294>
 8002fa8:	4a11      	ldr	r2, [pc, #68]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002faa:	68d3      	ldr	r3, [r2, #12]
 8002fac:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002fb0:	6a21      	ldr	r1, [r4, #32]
 8002fb2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002fb6:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	f013 0f08 	tst.w	r3, #8
 8002fbe:	d063      	beq.n	8003088 <HAL_RCC_OscConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fc0:	6963      	ldr	r3, [r4, #20]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d04c      	beq.n	8003060 <HAL_RCC_OscConfig+0x33c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002fc8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fd f9e4 	bl	800039c <HAL_GetTick>
 8002fd4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_RCC_OscConfig+0x2cc>)
 8002fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fda:	f013 0f02 	tst.w	r3, #2
 8002fde:	d153      	bne.n	8003088 <HAL_RCC_OscConfig+0x364>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fd f9dc 	bl	800039c <HAL_GetTick>
 8002fe4:	1b40      	subs	r0, r0, r5
 8002fe6:	2802      	cmp	r0, #2
 8002fe8:	d9f5      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x2b2>
        {
          return HAL_TIMEOUT;
 8002fea:	2003      	movs	r0, #3
 8002fec:	e1aa      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
 8002fee:	bf00      	nop
 8002ff0:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ff4:	f7fd f9ec 	bl	80003d0 <HAL_GetREVID>
 8002ff8:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ffc:	4298      	cmp	r0, r3
 8002ffe:	d812      	bhi.n	8003026 <HAL_RCC_OscConfig+0x302>
 8003000:	6a22      	ldr	r2, [r4, #32]
 8003002:	2a20      	cmp	r2, #32
 8003004:	d007      	beq.n	8003016 <HAL_RCC_OscConfig+0x2f2>
 8003006:	4985      	ldr	r1, [pc, #532]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003008:	684b      	ldr	r3, [r1, #4]
 800300a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800300e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003012:	604b      	str	r3, [r1, #4]
 8003014:	e7d0      	b.n	8002fb8 <HAL_RCC_OscConfig+0x294>
 8003016:	4a81      	ldr	r2, [pc, #516]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003018:	6853      	ldr	r3, [r2, #4]
 800301a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800301e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003022:	6053      	str	r3, [r2, #4]
 8003024:	e7c8      	b.n	8002fb8 <HAL_RCC_OscConfig+0x294>
 8003026:	4a7d      	ldr	r2, [pc, #500]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003028:	68d3      	ldr	r3, [r2, #12]
 800302a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800302e:	6a21      	ldr	r1, [r4, #32]
 8003030:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003034:	60d3      	str	r3, [r2, #12]
 8003036:	e7bf      	b.n	8002fb8 <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_CSI_DISABLE();
 8003038:	4a78      	ldr	r2, [pc, #480]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 800303a:	6813      	ldr	r3, [r2, #0]
 800303c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003040:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003042:	f7fd f9ab 	bl	800039c <HAL_GetTick>
 8003046:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003048:	4b74      	ldr	r3, [pc, #464]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003050:	d0b2      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003052:	f7fd f9a3 	bl	800039c <HAL_GetTick>
 8003056:	1b40      	subs	r0, r0, r5
 8003058:	2802      	cmp	r0, #2
 800305a:	d9f5      	bls.n	8003048 <HAL_RCC_OscConfig+0x324>
            return HAL_TIMEOUT;
 800305c:	2003      	movs	r0, #3
 800305e:	e171      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003060:	4a6e      	ldr	r2, [pc, #440]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003062:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003064:	f023 0301 	bic.w	r3, r3, #1
 8003068:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306a:	f7fd f997 	bl	800039c <HAL_GetTick>
 800306e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003070:	4b6a      	ldr	r3, [pc, #424]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003074:	f013 0f02 	tst.w	r3, #2
 8003078:	d006      	beq.n	8003088 <HAL_RCC_OscConfig+0x364>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307a:	f7fd f98f 	bl	800039c <HAL_GetTick>
 800307e:	1b40      	subs	r0, r0, r5
 8003080:	2802      	cmp	r0, #2
 8003082:	d9f5      	bls.n	8003070 <HAL_RCC_OscConfig+0x34c>
        {
          return HAL_TIMEOUT;
 8003084:	2003      	movs	r0, #3
 8003086:	e15d      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	f013 0f20 	tst.w	r3, #32
 800308e:	d029      	beq.n	80030e4 <HAL_RCC_OscConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003090:	69a3      	ldr	r3, [r4, #24]
 8003092:	b19b      	cbz	r3, 80030bc <HAL_RCC_OscConfig+0x398>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003094:	4a61      	ldr	r2, [pc, #388]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800309c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800309e:	f7fd f97d 	bl	800039c <HAL_GetTick>
 80030a2:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030a4:	4b5d      	ldr	r3, [pc, #372]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80030ac:	d11a      	bne.n	80030e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030ae:	f7fd f975 	bl	800039c <HAL_GetTick>
 80030b2:	1b40      	subs	r0, r0, r5
 80030b4:	2802      	cmp	r0, #2
 80030b6:	d9f5      	bls.n	80030a4 <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 80030b8:	2003      	movs	r0, #3
 80030ba:	e143      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030bc:	4a57      	ldr	r2, [pc, #348]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 80030be:	6813      	ldr	r3, [r2, #0]
 80030c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030c6:	f7fd f969 	bl	800039c <HAL_GetTick>
 80030ca:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030cc:	4b53      	ldr	r3, [pc, #332]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80030d4:	d006      	beq.n	80030e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030d6:	f7fd f961 	bl	800039c <HAL_GetTick>
 80030da:	1b40      	subs	r0, r0, r5
 80030dc:	2802      	cmp	r0, #2
 80030de:	d9f5      	bls.n	80030cc <HAL_RCC_OscConfig+0x3a8>
        {
          return HAL_TIMEOUT;
 80030e0:	2003      	movs	r0, #3
 80030e2:	e12f      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	f013 0f04 	tst.w	r3, #4
 80030ea:	d121      	bne.n	8003130 <HAL_RCC_OscConfig+0x40c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8127 	beq.w	8003342 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80030f4:	4a49      	ldr	r2, [pc, #292]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 80030f6:	6912      	ldr	r2, [r2, #16]
 80030f8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80030fc:	2a18      	cmp	r2, #24
 80030fe:	f000 80ef 	beq.w	80032e0 <HAL_RCC_OscConfig+0x5bc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003102:	2b02      	cmp	r3, #2
 8003104:	d075      	beq.n	80031f2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003106:	4a45      	ldr	r2, [pc, #276]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003108:	6813      	ldr	r3, [r2, #0]
 800310a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800310e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fd f944 	bl	800039c <HAL_GetTick>
 8003114:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003116:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800311e:	f000 80dd 	beq.w	80032dc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003122:	f7fd f93b 	bl	800039c <HAL_GetTick>
 8003126:	1b00      	subs	r0, r0, r4
 8003128:	2802      	cmp	r0, #2
 800312a:	d9f4      	bls.n	8003116 <HAL_RCC_OscConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800312c:	2003      	movs	r0, #3
 800312e:	e109      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
    PWR->CR1 |= PWR_CR1_DBP;
 8003130:	4a3b      	ldr	r2, [pc, #236]	; (8003220 <HAL_RCC_OscConfig+0x4fc>)
 8003132:	6813      	ldr	r3, [r2, #0]
 8003134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003138:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800313a:	f7fd f92f 	bl	800039c <HAL_GetTick>
 800313e:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003140:	4b37      	ldr	r3, [pc, #220]	; (8003220 <HAL_RCC_OscConfig+0x4fc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003148:	d106      	bne.n	8003158 <HAL_RCC_OscConfig+0x434>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800314a:	f7fd f927 	bl	800039c <HAL_GetTick>
 800314e:	1b40      	subs	r0, r0, r5
 8003150:	2864      	cmp	r0, #100	; 0x64
 8003152:	d9f5      	bls.n	8003140 <HAL_RCC_OscConfig+0x41c>
        return HAL_TIMEOUT;
 8003154:	2003      	movs	r0, #3
 8003156:	e0f5      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003158:	68a3      	ldr	r3, [r4, #8]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d00a      	beq.n	8003174 <HAL_RCC_OscConfig+0x450>
 800315e:	bb0b      	cbnz	r3, 80031a4 <HAL_RCC_OscConfig+0x480>
 8003160:	4b2e      	ldr	r3, [pc, #184]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003162:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003164:	f022 0201 	bic.w	r2, r2, #1
 8003168:	671a      	str	r2, [r3, #112]	; 0x70
 800316a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800316c:	f022 0204 	bic.w	r2, r2, #4
 8003170:	671a      	str	r2, [r3, #112]	; 0x70
 8003172:	e004      	b.n	800317e <HAL_RCC_OscConfig+0x45a>
 8003174:	4a29      	ldr	r2, [pc, #164]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003176:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317e:	68a3      	ldr	r3, [r4, #8]
 8003180:	b333      	cbz	r3, 80031d0 <HAL_RCC_OscConfig+0x4ac>
      tickstart = HAL_GetTick();
 8003182:	f7fd f90b 	bl	800039c <HAL_GetTick>
 8003186:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003188:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	f013 0f02 	tst.w	r3, #2
 8003190:	d1ac      	bne.n	80030ec <HAL_RCC_OscConfig+0x3c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fd f903 	bl	800039c <HAL_GetTick>
 8003196:	1b40      	subs	r0, r0, r5
 8003198:	f241 3388 	movw	r3, #5000	; 0x1388
 800319c:	4298      	cmp	r0, r3
 800319e:	d9f3      	bls.n	8003188 <HAL_RCC_OscConfig+0x464>
          return HAL_TIMEOUT;
 80031a0:	2003      	movs	r0, #3
 80031a2:	e0cf      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d009      	beq.n	80031bc <HAL_RCC_OscConfig+0x498>
 80031a8:	4b1c      	ldr	r3, [pc, #112]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 80031aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	671a      	str	r2, [r3, #112]	; 0x70
 80031b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031b4:	f022 0204 	bic.w	r2, r2, #4
 80031b8:	671a      	str	r2, [r3, #112]	; 0x70
 80031ba:	e7e0      	b.n	800317e <HAL_RCC_OscConfig+0x45a>
 80031bc:	4b17      	ldr	r3, [pc, #92]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 80031be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031c0:	f042 0204 	orr.w	r2, r2, #4
 80031c4:	671a      	str	r2, [r3, #112]	; 0x70
 80031c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	671a      	str	r2, [r3, #112]	; 0x70
 80031ce:	e7d6      	b.n	800317e <HAL_RCC_OscConfig+0x45a>
      tickstart = HAL_GetTick();
 80031d0:	f7fd f8e4 	bl	800039c <HAL_GetTick>
 80031d4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	f013 0f02 	tst.w	r3, #2
 80031de:	d085      	beq.n	80030ec <HAL_RCC_OscConfig+0x3c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fd f8dc 	bl	800039c <HAL_GetTick>
 80031e4:	1b40      	subs	r0, r0, r5
 80031e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80031ea:	4298      	cmp	r0, r3
 80031ec:	d9f3      	bls.n	80031d6 <HAL_RCC_OscConfig+0x4b2>
          return HAL_TIMEOUT;
 80031ee:	2003      	movs	r0, #3
 80031f0:	e0a8      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 80031f2:	4a0a      	ldr	r2, [pc, #40]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 80031f4:	6813      	ldr	r3, [r2, #0]
 80031f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031fa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80031fc:	f7fd f8ce 	bl	800039c <HAL_GetTick>
 8003200:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800320a:	d00b      	beq.n	8003224 <HAL_RCC_OscConfig+0x500>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320c:	f7fd f8c6 	bl	800039c <HAL_GetTick>
 8003210:	1b40      	subs	r0, r0, r5
 8003212:	2802      	cmp	r0, #2
 8003214:	d9f5      	bls.n	8003202 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8003216:	2003      	movs	r0, #3
 8003218:	e094      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
 800321a:	bf00      	nop
 800321c:	58024400 	.word	0x58024400
 8003220:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003224:	4b4f      	ldr	r3, [pc, #316]	; (8003364 <HAL_RCC_OscConfig+0x640>)
 8003226:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003228:	4a4f      	ldr	r2, [pc, #316]	; (8003368 <HAL_RCC_OscConfig+0x644>)
 800322a:	400a      	ands	r2, r1
 800322c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800322e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003230:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8003234:	430a      	orrs	r2, r1
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
 8003238:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800323a:	3a01      	subs	r2, #1
 800323c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003242:	3901      	subs	r1, #1
 8003244:	0249      	lsls	r1, r1, #9
 8003246:	b289      	uxth	r1, r1
 8003248:	430a      	orrs	r2, r1
 800324a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800324c:	3901      	subs	r1, #1
 800324e:	0409      	lsls	r1, r1, #16
 8003250:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003254:	430a      	orrs	r2, r1
 8003256:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003258:	3901      	subs	r1, #1
 800325a:	0609      	lsls	r1, r1, #24
 800325c:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003260:	430a      	orrs	r2, r1
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8003264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800326c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800326e:	4a3f      	ldr	r2, [pc, #252]	; (800336c <HAL_RCC_OscConfig+0x648>)
 8003270:	400a      	ands	r2, r1
 8003272:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003274:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003278:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800327a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327c:	f022 020c 	bic.w	r2, r2, #12
 8003280:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003282:	430a      	orrs	r2, r1
 8003284:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	f022 0202 	bic.w	r2, r2, #2
 800328c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800328e:	430a      	orrs	r2, r1
 8003290:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003294:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003298:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800329a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80032a0:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80032a8:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80032aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80032b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80032ba:	f7fd f86f 	bl	800039c <HAL_GetTick>
 80032be:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032c0:	4b28      	ldr	r3, [pc, #160]	; (8003364 <HAL_RCC_OscConfig+0x640>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80032c8:	d106      	bne.n	80032d8 <HAL_RCC_OscConfig+0x5b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fd f867 	bl	800039c <HAL_GetTick>
 80032ce:	1b00      	subs	r0, r0, r4
 80032d0:	2802      	cmp	r0, #2
 80032d2:	d9f5      	bls.n	80032c0 <HAL_RCC_OscConfig+0x59c>
            return HAL_TIMEOUT;
 80032d4:	2003      	movs	r0, #3
 80032d6:	e035      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80032d8:	2000      	movs	r0, #0
 80032da:	e033      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
 80032dc:	2000      	movs	r0, #0
 80032de:	e031      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032e0:	4a20      	ldr	r2, [pc, #128]	; (8003364 <HAL_RCC_OscConfig+0x640>)
 80032e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032e4:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d02d      	beq.n	8003346 <HAL_RCC_OscConfig+0x622>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	f001 0303 	and.w	r3, r1, #3
 80032ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d12a      	bne.n	800334a <HAL_RCC_OscConfig+0x626>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032f4:	f3c1 1105 	ubfx	r1, r1, #4, #6
 80032f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	4299      	cmp	r1, r3
 80032fc:	d127      	bne.n	800334e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032fe:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8003302:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003304:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d123      	bne.n	8003352 <HAL_RCC_OscConfig+0x62e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800330a:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800330e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003310:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d11f      	bne.n	8003356 <HAL_RCC_OscConfig+0x632>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003316:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800331a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800331c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d11b      	bne.n	800335a <HAL_RCC_OscConfig+0x636>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003322:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8003326:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003328:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800332a:	4298      	cmp	r0, r3
 800332c:	d117      	bne.n	800335e <HAL_RCC_OscConfig+0x63a>
  return HAL_OK;
 800332e:	2000      	movs	r0, #0
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
    return HAL_ERROR;
 8003332:	2001      	movs	r0, #1
}
 8003334:	4770      	bx	lr
        return HAL_ERROR;
 8003336:	2001      	movs	r0, #1
 8003338:	e004      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
        return HAL_ERROR;
 800333a:	2001      	movs	r0, #1
 800333c:	e002      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
        return HAL_ERROR;
 800333e:	2001      	movs	r0, #1
 8003340:	e000      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
  return HAL_OK;
 8003342:	2000      	movs	r0, #0
}
 8003344:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8003346:	2001      	movs	r0, #1
 8003348:	e7fc      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
 800334a:	2001      	movs	r0, #1
 800334c:	e7fa      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
 800334e:	2001      	movs	r0, #1
 8003350:	e7f8      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
 8003352:	2001      	movs	r0, #1
 8003354:	e7f6      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
 8003356:	2001      	movs	r0, #1
 8003358:	e7f4      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
 800335a:	2001      	movs	r0, #1
 800335c:	e7f2      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
 800335e:	2001      	movs	r0, #1
 8003360:	e7f0      	b.n	8003344 <HAL_RCC_OscConfig+0x620>
 8003362:	bf00      	nop
 8003364:	58024400 	.word	0x58024400
 8003368:	fffffc0c 	.word	0xfffffc0c
 800336c:	ffff0007 	.word	0xffff0007

08003370 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003370:	4b74      	ldr	r3, [pc, #464]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003378:	2b10      	cmp	r3, #16
 800337a:	f000 80df 	beq.w	800353c <HAL_RCC_GetSysClockFreq+0x1cc>
 800337e:	2b18      	cmp	r3, #24
 8003380:	d010      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x34>
 8003382:	b10b      	cbz	r3, 8003388 <HAL_RCC_GetSysClockFreq+0x18>
 8003384:	4870      	ldr	r0, [pc, #448]	; (8003548 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8003386:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003388:	4b6e      	ldr	r3, [pc, #440]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f013 0f20 	tst.w	r3, #32
 8003390:	f000 80d6 	beq.w	8003540 <HAL_RCC_GetSysClockFreq+0x1d0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003394:	4b6b      	ldr	r3, [pc, #428]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800339c:	4b6b      	ldr	r3, [pc, #428]	; (800354c <HAL_RCC_GetSysClockFreq+0x1dc>)
 800339e:	fa23 f000 	lsr.w	r0, r3, r0
 80033a2:	4770      	bx	lr
{
 80033a4:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033a6:	4a67      	ldr	r2, [pc, #412]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80033a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80033aa:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80033ae:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80033b0:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80033b6:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80033ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033bc:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80033c0:	fb03 f302 	mul.w	r3, r3, r2
 80033c4:	ee07 3a90 	vmov	s15, r3
 80033c8:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80033cc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 80033d0:	f000 8094 	beq.w	80034fc <HAL_RCC_GetSysClockFreq+0x18c>
    {
      switch (pllsource)
 80033d4:	2901      	cmp	r1, #1
 80033d6:	d066      	beq.n	80034a6 <HAL_RCC_GetSysClockFreq+0x136>
 80033d8:	2902      	cmp	r1, #2
 80033da:	f000 8092 	beq.w	8003502 <HAL_RCC_GetSysClockFreq+0x192>
 80033de:	b1e1      	cbz	r1, 800341a <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033e0:	ee07 0a10 	vmov	s14, r0
 80033e4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80033e8:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8003550 <HAL_RCC_GetSysClockFreq+0x1e0>
 80033ec:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80033f0:	4b54      	ldr	r3, [pc, #336]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f8:	ee06 3a90 	vmov	s13, r3
 80033fc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003400:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8003554 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003404:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003414:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8003418:	e061      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x16e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800341a:	4b4a      	ldr	r3, [pc, #296]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f013 0f20 	tst.w	r3, #32
 8003422:	d023      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0xfc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003424:	4947      	ldr	r1, [pc, #284]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003426:	680a      	ldr	r2, [r1, #0]
 8003428:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800342c:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCC_GetSysClockFreq+0x1dc>)
 800342e:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003430:	ee07 3a10 	vmov	s14, r3
 8003434:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003438:	ee07 0a10 	vmov	s14, r0
 800343c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8003440:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8003444:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344a:	ee06 3a90 	vmov	s13, r3
 800344e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003452:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8003554 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003456:	ee67 7a86 	vmul.f32	s15, s15, s12
 800345a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003466:	ee27 7a27 	vmul.f32	s14, s14, s15
 800346a:	e038      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x16e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800346c:	ee07 0a10 	vmov	s14, r0
 8003470:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003474:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8003558 <HAL_RCC_GetSysClockFreq+0x1e8>
 8003478:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800347c:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003484:	ee06 3a90 	vmov	s13, r3
 8003488:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800348c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8003554 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003490:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800349c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034a4:	e01b      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x16e>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034a6:	ee07 0a10 	vmov	s14, r0
 80034aa:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80034ae:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8003550 <HAL_RCC_GetSysClockFreq+0x1e0>
 80034b2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80034b6:	4b23      	ldr	r3, [pc, #140]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034be:	ee06 3a90 	vmov	s13, r3
 80034c2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80034c6:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8003554 <HAL_RCC_GetSysClockFreq+0x1e4>
 80034ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 80034ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034da:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80034de:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80034e6:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034f4:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80034f8:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80034fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003500:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003502:	ee07 0a10 	vmov	s14, r0
 8003506:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800350a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800355c <HAL_RCC_GetSysClockFreq+0x1ec>
 800350e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003512:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351a:	ee06 3a90 	vmov	s13, r3
 800351e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003522:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8003554 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003526:	ee67 7a86 	vmul.f32	s15, s15, s12
 800352a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800352e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003536:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800353a:	e7d0      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x16e>
    sysclockfreq = HSE_VALUE;
 800353c:	4808      	ldr	r0, [pc, #32]	; (8003560 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800353e:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8003542:	4770      	bx	lr
 8003544:	58024400 	.word	0x58024400
 8003548:	003d0900 	.word	0x003d0900
 800354c:	03d09000 	.word	0x03d09000
 8003550:	4a742400 	.word	0x4a742400
 8003554:	39000000 	.word	0x39000000
 8003558:	4c742400 	.word	0x4c742400
 800355c:	4bbebc20 	.word	0x4bbebc20
 8003560:	017d7840 	.word	0x017d7840

08003564 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003564:	2800      	cmp	r0, #0
 8003566:	f000 8132 	beq.w	80037ce <HAL_RCC_ClockConfig+0x26a>
{
 800356a:	b570      	push	{r4, r5, r6, lr}
 800356c:	460d      	mov	r5, r1
 800356e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003570:	4b9b      	ldr	r3, [pc, #620]	; (80037e0 <HAL_RCC_ClockConfig+0x27c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	428b      	cmp	r3, r1
 800357a:	d20b      	bcs.n	8003594 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357c:	4a98      	ldr	r2, [pc, #608]	; (80037e0 <HAL_RCC_ClockConfig+0x27c>)
 800357e:	6813      	ldr	r3, [r2, #0]
 8003580:	f023 030f 	bic.w	r3, r3, #15
 8003584:	430b      	orrs	r3, r1
 8003586:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003588:	6813      	ldr	r3, [r2, #0]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	428b      	cmp	r3, r1
 8003590:	f040 811f 	bne.w	80037d2 <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	f013 0f04 	tst.w	r3, #4
 800359a:	d00c      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800359c:	6922      	ldr	r2, [r4, #16]
 800359e:	4b91      	ldr	r3, [pc, #580]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d905      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035aa:	498e      	ldr	r1, [pc, #568]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 80035ac:	698b      	ldr	r3, [r1, #24]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b2:	431a      	orrs	r2, r3
 80035b4:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	f013 0f08 	tst.w	r3, #8
 80035bc:	d00c      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035be:	6962      	ldr	r2, [r4, #20]
 80035c0:	4b88      	ldr	r3, [pc, #544]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d905      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035cc:	4985      	ldr	r1, [pc, #532]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 80035ce:	69cb      	ldr	r3, [r1, #28]
 80035d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d4:	431a      	orrs	r2, r3
 80035d6:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	f013 0f10 	tst.w	r3, #16
 80035de:	d00c      	beq.n	80035fa <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035e0:	69a2      	ldr	r2, [r4, #24]
 80035e2:	4b80      	ldr	r3, [pc, #512]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d905      	bls.n	80035fa <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035ee:	497d      	ldr	r1, [pc, #500]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 80035f0:	69cb      	ldr	r3, [r1, #28]
 80035f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035f6:	431a      	orrs	r2, r3
 80035f8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	f013 0f20 	tst.w	r3, #32
 8003600:	d00c      	beq.n	800361c <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003602:	69e2      	ldr	r2, [r4, #28]
 8003604:	4b77      	ldr	r3, [pc, #476]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800360c:	429a      	cmp	r2, r3
 800360e:	d905      	bls.n	800361c <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003610:	4974      	ldr	r1, [pc, #464]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 8003612:	6a0b      	ldr	r3, [r1, #32]
 8003614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003618:	431a      	orrs	r2, r3
 800361a:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	f013 0f02 	tst.w	r3, #2
 8003622:	d00c      	beq.n	800363e <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003624:	68e2      	ldr	r2, [r4, #12]
 8003626:	4b6f      	ldr	r3, [pc, #444]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	429a      	cmp	r2, r3
 8003630:	d905      	bls.n	800363e <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003632:	496c      	ldr	r1, [pc, #432]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 8003634:	698b      	ldr	r3, [r1, #24]
 8003636:	f023 030f 	bic.w	r3, r3, #15
 800363a:	431a      	orrs	r2, r3
 800363c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	f013 0f01 	tst.w	r3, #1
 8003644:	d041      	beq.n	80036ca <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003646:	4a67      	ldr	r2, [pc, #412]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 8003648:	6993      	ldr	r3, [r2, #24]
 800364a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800364e:	68a1      	ldr	r1, [r4, #8]
 8003650:	430b      	orrs	r3, r1
 8003652:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003654:	6863      	ldr	r3, [r4, #4]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d00a      	beq.n	8003670 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800365a:	2b03      	cmp	r3, #3
 800365c:	d027      	beq.n	80036ae <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800365e:	2b01      	cmp	r3, #1
 8003660:	d02c      	beq.n	80036bc <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003662:	4a60      	ldr	r2, [pc, #384]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	f012 0f04 	tst.w	r2, #4
 800366a:	d106      	bne.n	800367a <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800366c:	2001      	movs	r0, #1
 800366e:	e0ad      	b.n	80037cc <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003676:	f000 80ae 	beq.w	80037d6 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800367a:	495a      	ldr	r1, [pc, #360]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 800367c:	690a      	ldr	r2, [r1, #16]
 800367e:	f022 0207 	bic.w	r2, r2, #7
 8003682:	4313      	orrs	r3, r2
 8003684:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8003686:	f7fc fe89 	bl	800039c <HAL_GetTick>
 800368a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368c:	4b55      	ldr	r3, [pc, #340]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003694:	6862      	ldr	r2, [r4, #4]
 8003696:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800369a:	d016      	beq.n	80036ca <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369c:	f7fc fe7e 	bl	800039c <HAL_GetTick>
 80036a0:	1b80      	subs	r0, r0, r6
 80036a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80036a6:	4298      	cmp	r0, r3
 80036a8:	d9f0      	bls.n	800368c <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 80036aa:	2003      	movs	r0, #3
 80036ac:	e08e      	b.n	80037cc <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036ae:	4a4d      	ldr	r2, [pc, #308]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80036b6:	d1e0      	bne.n	800367a <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80036b8:	2001      	movs	r0, #1
 80036ba:	e087      	b.n	80037cc <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036bc:	4a49      	ldr	r2, [pc, #292]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80036c4:	d1d9      	bne.n	800367a <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80036c6:	2001      	movs	r0, #1
 80036c8:	e080      	b.n	80037cc <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	f013 0f02 	tst.w	r3, #2
 80036d0:	d00c      	beq.n	80036ec <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036d2:	68e2      	ldr	r2, [r4, #12]
 80036d4:	4b43      	ldr	r3, [pc, #268]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	429a      	cmp	r2, r3
 80036de:	d205      	bcs.n	80036ec <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e0:	4940      	ldr	r1, [pc, #256]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 80036e2:	698b      	ldr	r3, [r1, #24]
 80036e4:	f023 030f 	bic.w	r3, r3, #15
 80036e8:	431a      	orrs	r2, r3
 80036ea:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ec:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <HAL_RCC_ClockConfig+0x27c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	d90a      	bls.n	800370e <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f8:	4a39      	ldr	r2, [pc, #228]	; (80037e0 <HAL_RCC_ClockConfig+0x27c>)
 80036fa:	6813      	ldr	r3, [r2, #0]
 80036fc:	f023 030f 	bic.w	r3, r3, #15
 8003700:	432b      	orrs	r3, r5
 8003702:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003704:	6813      	ldr	r3, [r2, #0]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	42ab      	cmp	r3, r5
 800370c:	d165      	bne.n	80037da <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	f013 0f04 	tst.w	r3, #4
 8003714:	d00c      	beq.n	8003730 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003716:	6922      	ldr	r2, [r4, #16]
 8003718:	4b32      	ldr	r3, [pc, #200]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003720:	429a      	cmp	r2, r3
 8003722:	d205      	bcs.n	8003730 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003724:	492f      	ldr	r1, [pc, #188]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 8003726:	698b      	ldr	r3, [r1, #24]
 8003728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372c:	431a      	orrs	r2, r3
 800372e:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	f013 0f08 	tst.w	r3, #8
 8003736:	d00c      	beq.n	8003752 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003738:	6962      	ldr	r2, [r4, #20]
 800373a:	4b2a      	ldr	r3, [pc, #168]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003742:	429a      	cmp	r2, r3
 8003744:	d205      	bcs.n	8003752 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003746:	4927      	ldr	r1, [pc, #156]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 8003748:	69cb      	ldr	r3, [r1, #28]
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	431a      	orrs	r2, r3
 8003750:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	f013 0f10 	tst.w	r3, #16
 8003758:	d00c      	beq.n	8003774 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800375a:	69a2      	ldr	r2, [r4, #24]
 800375c:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003764:	429a      	cmp	r2, r3
 8003766:	d205      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003768:	491e      	ldr	r1, [pc, #120]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 800376a:	69cb      	ldr	r3, [r1, #28]
 800376c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003770:	431a      	orrs	r2, r3
 8003772:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	f013 0f20 	tst.w	r3, #32
 800377a:	d00c      	beq.n	8003796 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800377c:	69e2      	ldr	r2, [r4, #28]
 800377e:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003786:	429a      	cmp	r2, r3
 8003788:	d205      	bcs.n	8003796 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800378a:	4916      	ldr	r1, [pc, #88]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 800378c:	6a0b      	ldr	r3, [r1, #32]
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	431a      	orrs	r2, r3
 8003794:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003796:	f7ff fdeb 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 800379a:	4912      	ldr	r1, [pc, #72]	; (80037e4 <HAL_RCC_ClockConfig+0x280>)
 800379c:	698b      	ldr	r3, [r1, #24]
 800379e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80037a2:	4a11      	ldr	r2, [pc, #68]	; (80037e8 <HAL_RCC_ClockConfig+0x284>)
 80037a4:	5cd3      	ldrb	r3, [r2, r3]
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037ac:	698b      	ldr	r3, [r1, #24]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	5cd3      	ldrb	r3, [r2, r3]
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	fa20 f303 	lsr.w	r3, r0, r3
 80037bc:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <HAL_RCC_ClockConfig+0x288>)
 80037be:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_ClockConfig+0x28c>)
 80037c2:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_ClockConfig+0x290>)
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	f7fc fd86 	bl	80002d8 <HAL_InitTick>
}
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80037ce:	2001      	movs	r0, #1
}
 80037d0:	4770      	bx	lr
      return HAL_ERROR;
 80037d2:	2001      	movs	r0, #1
 80037d4:	e7fa      	b.n	80037cc <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 80037d6:	2001      	movs	r0, #1
 80037d8:	e7f8      	b.n	80037cc <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 80037da:	2001      	movs	r0, #1
 80037dc:	e7f6      	b.n	80037cc <HAL_RCC_ClockConfig+0x268>
 80037de:	bf00      	nop
 80037e0:	52002000 	.word	0x52002000
 80037e4:	58024400 	.word	0x58024400
 80037e8:	0800c4f4 	.word	0x0800c4f4
 80037ec:	2000002c 	.word	0x2000002c
 80037f0:	20000028 	.word	0x20000028
 80037f4:	20000004 	.word	0x20000004

080037f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f8:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037fa:	f7ff fdb9 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 80037fe:	4a0b      	ldr	r2, [pc, #44]	; (800382c <HAL_RCC_GetHCLKFreq+0x34>)
 8003800:	6993      	ldr	r3, [r2, #24]
 8003802:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003806:	490a      	ldr	r1, [pc, #40]	; (8003830 <HAL_RCC_GetHCLKFreq+0x38>)
 8003808:	5ccb      	ldrb	r3, [r1, r3]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003812:	6992      	ldr	r2, [r2, #24]
 8003814:	f002 020f 	and.w	r2, r2, #15
 8003818:	5c88      	ldrb	r0, [r1, r2]
 800381a:	f000 001f 	and.w	r0, r0, #31
 800381e:	fa23 f000 	lsr.w	r0, r3, r0
 8003822:	4a04      	ldr	r2, [pc, #16]	; (8003834 <HAL_RCC_GetHCLKFreq+0x3c>)
 8003824:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003826:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HAL_RCC_GetHCLKFreq+0x40>)
 8003828:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800382a:	bd08      	pop	{r3, pc}
 800382c:	58024400 	.word	0x58024400
 8003830:	0800c4f4 	.word	0x0800c4f4
 8003834:	2000002c 	.word	0x2000002c
 8003838:	20000028 	.word	0x20000028

0800383c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800383c:	4b40      	ldr	r3, [pc, #256]	; (8003940 <RCCEx_PLL2_Config+0x104>)
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	2b03      	cmp	r3, #3
 8003846:	d079      	beq.n	800393c <RCCEx_PLL2_Config+0x100>
{
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4605      	mov	r5, r0
 800384c:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800384e:	4a3c      	ldr	r2, [pc, #240]	; (8003940 <RCCEx_PLL2_Config+0x104>)
 8003850:	6813      	ldr	r3, [r2, #0]
 8003852:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003858:	f7fc fda0 	bl	800039c <HAL_GetTick>
 800385c:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800385e:	4b38      	ldr	r3, [pc, #224]	; (8003940 <RCCEx_PLL2_Config+0x104>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003866:	d006      	beq.n	8003876 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003868:	f7fc fd98 	bl	800039c <HAL_GetTick>
 800386c:	1b03      	subs	r3, r0, r4
 800386e:	2b02      	cmp	r3, #2
 8003870:	d9f5      	bls.n	800385e <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003872:	2003      	movs	r0, #3

  }


  return status;
}
 8003874:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003876:	4b32      	ldr	r3, [pc, #200]	; (8003940 <RCCEx_PLL2_Config+0x104>)
 8003878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800387a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800387e:	6829      	ldr	r1, [r5, #0]
 8003880:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
 8003886:	686a      	ldr	r2, [r5, #4]
 8003888:	3a01      	subs	r2, #1
 800388a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800388e:	68a9      	ldr	r1, [r5, #8]
 8003890:	3901      	subs	r1, #1
 8003892:	0249      	lsls	r1, r1, #9
 8003894:	b289      	uxth	r1, r1
 8003896:	430a      	orrs	r2, r1
 8003898:	68e9      	ldr	r1, [r5, #12]
 800389a:	3901      	subs	r1, #1
 800389c:	0409      	lsls	r1, r1, #16
 800389e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80038a2:	430a      	orrs	r2, r1
 80038a4:	6929      	ldr	r1, [r5, #16]
 80038a6:	3901      	subs	r1, #1
 80038a8:	0609      	lsls	r1, r1, #24
 80038aa:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80038ae:	430a      	orrs	r2, r1
 80038b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80038b8:	6969      	ldr	r1, [r5, #20]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80038be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c0:	f022 0220 	bic.w	r2, r2, #32
 80038c4:	69a9      	ldr	r1, [r5, #24]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	f022 0210 	bic.w	r2, r2, #16
 80038d0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80038d2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <RCCEx_PLL2_Config+0x108>)
 80038d6:	400a      	ands	r2, r1
 80038d8:	69e9      	ldr	r1, [r5, #28]
 80038da:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80038de:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 80038e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e2:	f042 0210 	orr.w	r2, r2, #16
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80038e8:	b9c6      	cbnz	r6, 800391c <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80038ea:	461a      	mov	r2, r3
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038f2:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 80038f4:	4a12      	ldr	r2, [pc, #72]	; (8003940 <RCCEx_PLL2_Config+0x104>)
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038fc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80038fe:	f7fc fd4d 	bl	800039c <HAL_GetTick>
 8003902:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <RCCEx_PLL2_Config+0x104>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800390c:	d114      	bne.n	8003938 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800390e:	f7fc fd45 	bl	800039c <HAL_GetTick>
 8003912:	1b00      	subs	r0, r0, r4
 8003914:	2802      	cmp	r0, #2
 8003916:	d9f5      	bls.n	8003904 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8003918:	2003      	movs	r0, #3
 800391a:	e7ab      	b.n	8003874 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 800391c:	2e01      	cmp	r6, #1
 800391e:	d005      	beq.n	800392c <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003920:	4a07      	ldr	r2, [pc, #28]	; (8003940 <RCCEx_PLL2_Config+0x104>)
 8003922:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003924:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003928:	62d3      	str	r3, [r2, #44]	; 0x2c
 800392a:	e7e3      	b.n	80038f4 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800392c:	4a04      	ldr	r2, [pc, #16]	; (8003940 <RCCEx_PLL2_Config+0x104>)
 800392e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003934:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003936:	e7dd      	b.n	80038f4 <RCCEx_PLL2_Config+0xb8>
  return status;
 8003938:	2000      	movs	r0, #0
 800393a:	e79b      	b.n	8003874 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 800393c:	2001      	movs	r0, #1
}
 800393e:	4770      	bx	lr
 8003940:	58024400 	.word	0x58024400
 8003944:	ffff0007 	.word	0xffff0007

08003948 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003948:	4b40      	ldr	r3, [pc, #256]	; (8003a4c <RCCEx_PLL3_Config+0x104>)
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b03      	cmp	r3, #3
 8003952:	d079      	beq.n	8003a48 <RCCEx_PLL3_Config+0x100>
{
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	4605      	mov	r5, r0
 8003958:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800395a:	4a3c      	ldr	r2, [pc, #240]	; (8003a4c <RCCEx_PLL3_Config+0x104>)
 800395c:	6813      	ldr	r3, [r2, #0]
 800395e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003964:	f7fc fd1a 	bl	800039c <HAL_GetTick>
 8003968:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800396a:	4b38      	ldr	r3, [pc, #224]	; (8003a4c <RCCEx_PLL3_Config+0x104>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003972:	d006      	beq.n	8003982 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003974:	f7fc fd12 	bl	800039c <HAL_GetTick>
 8003978:	1b03      	subs	r3, r0, r4
 800397a:	2b02      	cmp	r3, #2
 800397c:	d9f5      	bls.n	800396a <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800397e:	2003      	movs	r0, #3

  }


  return status;
}
 8003980:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003982:	4b32      	ldr	r3, [pc, #200]	; (8003a4c <RCCEx_PLL3_Config+0x104>)
 8003984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003986:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800398a:	6829      	ldr	r1, [r5, #0]
 800398c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003990:	629a      	str	r2, [r3, #40]	; 0x28
 8003992:	686a      	ldr	r2, [r5, #4]
 8003994:	3a01      	subs	r2, #1
 8003996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800399a:	68a9      	ldr	r1, [r5, #8]
 800399c:	3901      	subs	r1, #1
 800399e:	0249      	lsls	r1, r1, #9
 80039a0:	b289      	uxth	r1, r1
 80039a2:	430a      	orrs	r2, r1
 80039a4:	68e9      	ldr	r1, [r5, #12]
 80039a6:	3901      	subs	r1, #1
 80039a8:	0409      	lsls	r1, r1, #16
 80039aa:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80039ae:	430a      	orrs	r2, r1
 80039b0:	6929      	ldr	r1, [r5, #16]
 80039b2:	3901      	subs	r1, #1
 80039b4:	0609      	lsls	r1, r1, #24
 80039b6:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80039ba:	430a      	orrs	r2, r1
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039c4:	6969      	ldr	r1, [r5, #20]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039d0:	69a9      	ldr	r1, [r5, #24]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80039d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039dc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80039de:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <RCCEx_PLL3_Config+0x108>)
 80039e2:	400a      	ands	r2, r1
 80039e4:	69e9      	ldr	r1, [r5, #28]
 80039e6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80039ea:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80039ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f2:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80039f4:	b9c6      	cbnz	r6, 8003a28 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80039f6:	461a      	mov	r2, r3
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039fe:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8003a00:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <RCCEx_PLL3_Config+0x104>)
 8003a02:	6813      	ldr	r3, [r2, #0]
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003a0a:	f7fc fcc7 	bl	800039c <HAL_GetTick>
 8003a0e:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a10:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <RCCEx_PLL3_Config+0x104>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003a18:	d114      	bne.n	8003a44 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a1a:	f7fc fcbf 	bl	800039c <HAL_GetTick>
 8003a1e:	1b00      	subs	r0, r0, r4
 8003a20:	2802      	cmp	r0, #2
 8003a22:	d9f5      	bls.n	8003a10 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8003a24:	2003      	movs	r0, #3
 8003a26:	e7ab      	b.n	8003980 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a28:	2e01      	cmp	r6, #1
 8003a2a:	d005      	beq.n	8003a38 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003a2c:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <RCCEx_PLL3_Config+0x104>)
 8003a2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a36:	e7e3      	b.n	8003a00 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <RCCEx_PLL3_Config+0x104>)
 8003a3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a40:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a42:	e7dd      	b.n	8003a00 <RCCEx_PLL3_Config+0xb8>
  return status;
 8003a44:	2000      	movs	r0, #0
 8003a46:	e79b      	b.n	8003980 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8003a48:	2001      	movs	r0, #1
}
 8003a4a:	4770      	bx	lr
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	ffff0007 	.word	0xffff0007

08003a54 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a58:	6803      	ldr	r3, [r0, #0]
 8003a5a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003a5e:	d030      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003a60:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a66:	d026      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003a68:	d80e      	bhi.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003a6a:	b1eb      	cbz	r3, 8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a70:	d107      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a72:	2102      	movs	r1, #2
 8003a74:	3004      	adds	r0, #4
 8003a76:	f7ff fee1 	bl	800383c <RCCEx_PLL2_Config>
 8003a7a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a7c:	b145      	cbz	r5, 8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003a7e:	462e      	mov	r6, r5
 8003a80:	e021      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003a82:	2601      	movs	r6, #1
 8003a84:	4635      	mov	r5, r6
 8003a86:	e01e      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003a88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a8c:	d109      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003a8e:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a90:	4a96      	ldr	r2, [pc, #600]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003a92:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003a94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a98:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a9e:	2600      	movs	r6, #0
 8003aa0:	e011      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003aa2:	2601      	movs	r6, #1
 8003aa4:	4635      	mov	r5, r6
 8003aa6:	e00e      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa8:	4a90      	ldr	r2, [pc, #576]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003aaa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab0:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ab2:	2500      	movs	r5, #0
 8003ab4:	e7ec      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	3024      	adds	r0, #36	; 0x24
 8003aba:	f7ff ff45 	bl	8003948 <RCCEx_PLL3_Config>
 8003abe:	4605      	mov	r5, r0
      break;
 8003ac0:	e7dc      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ac2:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ac4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003acc:	d014      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ace:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d830      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ad4:	e8df f003 	tbb	[pc, r3]
 8003ad8:	08282203 	.word	0x08282203
 8003adc:	08          	.byte	0x08
 8003add:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ade:	4a83      	ldr	r2, [pc, #524]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003ae0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003ae8:	bb45      	cbnz	r5, 8003b3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aea:	4a80      	ldr	r2, [pc, #512]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003aec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003aee:	f023 0307 	bic.w	r3, r3, #7
 8003af2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003af4:	430b      	orrs	r3, r1
 8003af6:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003afe:	d02f      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003b00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b02:	2b80      	cmp	r3, #128	; 0x80
 8003b04:	d04a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003b06:	d81e      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d041      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	d117      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b10:	2100      	movs	r1, #0
 8003b12:	1d20      	adds	r0, r4, #4
 8003b14:	f7ff fe92 	bl	800383c <RCCEx_PLL2_Config>
 8003b18:	4605      	mov	r5, r0
      break;
 8003b1a:	e019      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	1d20      	adds	r0, r4, #4
 8003b20:	f7ff fe8c 	bl	800383c <RCCEx_PLL2_Config>
 8003b24:	4605      	mov	r5, r0
      break;
 8003b26:	e7df      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b28:	2100      	movs	r1, #0
 8003b2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b2e:	f7ff ff0b 	bl	8003948 <RCCEx_PLL3_Config>
 8003b32:	4605      	mov	r5, r0
      break;
 8003b34:	e7d8      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003b36:	2601      	movs	r6, #1
 8003b38:	4635      	mov	r5, r6
 8003b3a:	e7dd      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003b3c:	462e      	mov	r6, r5
 8003b3e:	e7db      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003b40:	2601      	movs	r6, #1
 8003b42:	4635      	mov	r5, r6
 8003b44:	e00c      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b46:	2bc0      	cmp	r3, #192	; 0xc0
 8003b48:	d002      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4e:	d11c      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x136>
    if(ret == HAL_OK)
 8003b50:	bb5d      	cbnz	r5, 8003baa <HAL_RCCEx_PeriphCLKConfig+0x156>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b52:	4a66      	ldr	r2, [pc, #408]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003b54:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003b56:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8003b5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003b66:	d034      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003b68:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b70:	d04d      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8003b72:	d81f      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d044      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003b78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b7c:	d117      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x15a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b7e:	2100      	movs	r1, #0
 8003b80:	1d20      	adds	r0, r4, #4
 8003b82:	f7ff fe5b 	bl	800383c <RCCEx_PLL2_Config>
 8003b86:	4605      	mov	r5, r0
      break;
 8003b88:	e01a      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003b8a:	2601      	movs	r6, #1
 8003b8c:	4635      	mov	r5, r6
 8003b8e:	e7e7      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b90:	4a56      	ldr	r2, [pc, #344]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003b92:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b98:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003b9a:	e7d9      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ba2:	f7ff fed1 	bl	8003948 <RCCEx_PLL3_Config>
 8003ba6:	4605      	mov	r5, r0
      break;
 8003ba8:	e7d2      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8003baa:	462e      	mov	r6, r5
 8003bac:	e7d8      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003bae:	2601      	movs	r6, #1
 8003bb0:	4635      	mov	r5, r6
 8003bb2:	e00e      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8003bb4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003bb8:	d002      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003bba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bbe:	d11d      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    if(ret == HAL_OK)
 8003bc0:	bb65      	cbnz	r5, 8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003bc2:	4a4a      	ldr	r2, [pc, #296]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003bc4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003bc6:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8003bca:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003bd8:	d035      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003bda:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8003bde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003be2:	d053      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003be4:	d81f      	bhi.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d04a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8003bea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bee:	d117      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	1d20      	adds	r0, r4, #4
 8003bf4:	f7ff fe22 	bl	800383c <RCCEx_PLL2_Config>
 8003bf8:	4605      	mov	r5, r0
      break;
 8003bfa:	e01a      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003bfc:	2601      	movs	r6, #1
 8003bfe:	4635      	mov	r5, r6
 8003c00:	e7e7      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c02:	4a3a      	ldr	r2, [pc, #232]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003c04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003c0c:	e7d8      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c0e:	2100      	movs	r1, #0
 8003c10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c14:	f7ff fe98 	bl	8003948 <RCCEx_PLL3_Config>
 8003c18:	4605      	mov	r5, r0
      break;
 8003c1a:	e7d1      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c1c:	462e      	mov	r6, r5
 8003c1e:	e7d8      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003c20:	2601      	movs	r6, #1
 8003c22:	4635      	mov	r5, r6
 8003c24:	e00f      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8003c26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c2a:	d002      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8003c2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c30:	d123      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x226>
    if(ret == HAL_OK)
 8003c32:	2d00      	cmp	r5, #0
 8003c34:	d131      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x246>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c36:	4a2d      	ldr	r2, [pc, #180]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003c38:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003c3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003c3e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8003c42:	430b      	orrs	r3, r1
 8003c44:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c4c:	d02e      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->QspiClockSelection)
 8003c4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d03f      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8003c54:	d826      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8003c56:	b133      	cbz	r3, 8003c66 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d120      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5c:	4a23      	ldr	r2, [pc, #140]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003c5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c64:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003c66:	2d00      	cmp	r5, #0
 8003c68:	d13a      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c6a:	4a20      	ldr	r2, [pc, #128]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003c6c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003c6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c72:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003c74:	430b      	orrs	r3, r1
 8003c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c78:	e018      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003c7a:	2601      	movs	r6, #1
 8003c7c:	4635      	mov	r5, r6
 8003c7e:	e7e2      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c80:	4a1a      	ldr	r2, [pc, #104]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003c82:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c88:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003c8a:	e7d2      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c92:	f7ff fe59 	bl	8003948 <RCCEx_PLL3_Config>
 8003c96:	4605      	mov	r5, r0
      break;
 8003c98:	e7cb      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8003c9a:	462e      	mov	r6, r5
 8003c9c:	e7d3      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    switch(PeriphClkInit->QspiClockSelection)
 8003c9e:	2601      	movs	r6, #1
 8003ca0:	4635      	mov	r5, r6
 8003ca2:	e003      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x258>
 8003ca4:	2b30      	cmp	r3, #48	; 0x30
 8003ca6:	d0de      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003ca8:	2601      	movs	r6, #1
 8003caa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003cb2:	d02c      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003cb4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cba:	d04d      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003cbc:	d818      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d044      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x290>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cc8:	2100      	movs	r1, #0
 8003cca:	1d20      	adds	r0, r4, #4
 8003ccc:	f7ff fdb6 	bl	800383c <RCCEx_PLL2_Config>
 8003cd0:	4605      	mov	r5, r0
      break;
 8003cd2:	e013      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003cd4:	2102      	movs	r1, #2
 8003cd6:	1d20      	adds	r0, r4, #4
 8003cd8:	f7ff fdb0 	bl	800383c <RCCEx_PLL2_Config>
 8003cdc:	4605      	mov	r5, r0
      break;
 8003cde:	e7c2      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003ce0:	462e      	mov	r6, r5
 8003ce2:	e7e3      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ce4:	2601      	movs	r6, #1
 8003ce6:	4635      	mov	r5, r6
 8003ce8:	e011      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003cea:	bf00      	nop
 8003cec:	58024400 	.word	0x58024400
 8003cf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cf4:	d002      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cfa:	d124      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    if(ret == HAL_OK)
 8003cfc:	2d00      	cmp	r5, #0
 8003cfe:	d132      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d00:	4a98      	ldr	r2, [pc, #608]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003d02:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d08:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003d14:	d037      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d16:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d1c:	d051      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003d1e:	d827      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003d20:	b13b      	cbz	r3, 8003d32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d26:	d120      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x316>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d28:	2101      	movs	r1, #1
 8003d2a:	1d20      	adds	r0, r4, #4
 8003d2c:	f7ff fd86 	bl	800383c <RCCEx_PLL2_Config>
 8003d30:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003d32:	2d00      	cmp	r5, #0
 8003d34:	d14c      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d36:	4a8b      	ldr	r2, [pc, #556]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003d38:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003d3a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003d3e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6513      	str	r3, [r2, #80]	; 0x50
 8003d44:	e01f      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003d46:	2601      	movs	r6, #1
 8003d48:	4635      	mov	r5, r6
 8003d4a:	e7e0      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d4c:	4a85      	ldr	r2, [pc, #532]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003d4e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d54:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003d56:	e7d1      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d58:	2100      	movs	r1, #0
 8003d5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d5e:	f7ff fdf3 	bl	8003948 <RCCEx_PLL3_Config>
 8003d62:	4605      	mov	r5, r0
      break;
 8003d64:	e7ca      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d66:	462e      	mov	r6, r5
 8003d68:	e7d1      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d6a:	2601      	movs	r6, #1
 8003d6c:	4635      	mov	r5, r6
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003d70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d74:	d0dd      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d7a:	d0da      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003d7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d80:	d0d7      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003d82:	2601      	movs	r6, #1
 8003d84:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003d8c:	d030      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003d8e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d96:	d044      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003d98:	d81f      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003d9a:	b13b      	cbz	r3, 8003dac <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da0:	d118      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003da2:	2101      	movs	r1, #1
 8003da4:	1d20      	adds	r0, r4, #4
 8003da6:	f7ff fd49 	bl	800383c <RCCEx_PLL2_Config>
 8003daa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003dac:	2d00      	cmp	r5, #0
 8003dae:	d13f      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003db0:	4a6c      	ldr	r2, [pc, #432]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003db2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003db4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003db8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003dc0:	e016      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003dc8:	f7ff fdbe 	bl	8003948 <RCCEx_PLL3_Config>
 8003dcc:	4605      	mov	r5, r0
      break;
 8003dce:	e7b0      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003dd0:	462e      	mov	r6, r5
 8003dd2:	e7d8      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003dd4:	2601      	movs	r6, #1
 8003dd6:	4635      	mov	r5, r6
 8003dd8:	e00a      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dde:	d0e5      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de4:	d0e2      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003de6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dea:	d0df      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003dec:	2601      	movs	r6, #1
 8003dee:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003df6:	d009      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    switch(PeriphClkInit->FdcanClockSelection)
 8003df8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dfe:	d019      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e04:	d024      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003e06:	b1d3      	cbz	r3, 8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003e08:	2601      	movs	r6, #1
 8003e0a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003e12:	d03d      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch(PeriphClkInit->FmcClockSelection)
 8003e14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	d836      	bhi.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8003e1a:	e8df f003 	tbb	[pc, r3]
 8003e1e:	2126      	.short	0x2126
 8003e20:	262f      	.short	0x262f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e22:	2101      	movs	r1, #1
 8003e24:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e28:	f7ff fd8e 	bl	8003948 <RCCEx_PLL3_Config>
 8003e2c:	4605      	mov	r5, r0
      break;
 8003e2e:	e7bd      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003e30:	462e      	mov	r6, r5
 8003e32:	e7dd      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e34:	4a4b      	ldr	r2, [pc, #300]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003e36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003e3e:	b96d      	cbnz	r5, 8003e5c <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e40:	4a48      	ldr	r2, [pc, #288]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003e42:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003e44:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003e48:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	6513      	str	r3, [r2, #80]	; 0x50
 8003e4e:	e7dd      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e50:	2101      	movs	r1, #1
 8003e52:	1d20      	adds	r0, r4, #4
 8003e54:	f7ff fcf2 	bl	800383c <RCCEx_PLL2_Config>
 8003e58:	4605      	mov	r5, r0
      break;
 8003e5a:	e7f0      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003e5c:	462e      	mov	r6, r5
 8003e5e:	e7d5      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e60:	4a40      	ldr	r2, [pc, #256]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003e62:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e68:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003e6a:	b985      	cbnz	r5, 8003e8e <HAL_RCCEx_PeriphCLKConfig+0x43a>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e6c:	4a3d      	ldr	r2, [pc, #244]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003e6e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003e70:	f023 0303 	bic.w	r3, r3, #3
 8003e74:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003e76:	430b      	orrs	r3, r1
 8003e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e7a:	e009      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x43c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	1d20      	adds	r0, r4, #4
 8003e80:	f7ff fcdc 	bl	800383c <RCCEx_PLL2_Config>
 8003e84:	4605      	mov	r5, r0
      break;
 8003e86:	e7f0      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch(PeriphClkInit->FmcClockSelection)
 8003e88:	2601      	movs	r6, #1
 8003e8a:	4635      	mov	r5, r6
 8003e8c:	e000      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8003e8e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003e96:	d11f      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	f013 0f01 	tst.w	r3, #1
 8003e9e:	f000 809b 	beq.w	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003ea2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003ea4:	2b28      	cmp	r3, #40	; 0x28
 8003ea6:	f200 8095 	bhi.w	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003eaa:	e8df f003 	tbb	[pc, r3]
 8003eae:	9383      	.short	0x9383
 8003eb0:	93939393 	.word	0x93939393
 8003eb4:	937e9393 	.word	0x937e9393
 8003eb8:	93939393 	.word	0x93939393
 8003ebc:	938c9393 	.word	0x938c9393
 8003ec0:	93939393 	.word	0x93939393
 8003ec4:	93839393 	.word	0x93839393
 8003ec8:	93939393 	.word	0x93939393
 8003ecc:	93839393 	.word	0x93839393
 8003ed0:	93939393 	.word	0x93939393
 8003ed4:	9393      	.short	0x9393
 8003ed6:	83          	.byte	0x83
 8003ed7:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed8:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003ee2:	f7fc fa5b 	bl	800039c <HAL_GetTick>
 8003ee6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ee8:	4b1f      	ldr	r3, [pc, #124]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ef0:	d105      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef2:	f7fc fa53 	bl	800039c <HAL_GetTick>
 8003ef6:	1bc0      	subs	r0, r0, r7
 8003ef8:	2864      	cmp	r0, #100	; 0x64
 8003efa:	d9f5      	bls.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 8003efc:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8003efe:	2d00      	cmp	r5, #0
 8003f00:	d14f      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f02:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003f0a:	4053      	eors	r3, r2
 8003f0c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003f10:	d00c      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f12:	4b14      	ldr	r3, [pc, #80]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003f14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f1a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003f1c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003f20:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f22:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003f24:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003f28:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8003f2a:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f2c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f34:	d01a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x518>
      if(ret == HAL_OK)
 8003f36:	2d00      	cmp	r5, #0
 8003f38:	d135      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f3a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003f3e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003f42:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003f46:	d022      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8003f48:	4a06      	ldr	r2, [pc, #24]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003f4a:	6913      	ldr	r3, [r2, #16]
 8003f4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f50:	6113      	str	r3, [r2, #16]
 8003f52:	4904      	ldr	r1, [pc, #16]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003f54:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003f56:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003f5a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	670b      	str	r3, [r1, #112]	; 0x70
 8003f62:	e799      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8003f64:	58024400 	.word	0x58024400
 8003f68:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8003f6c:	f7fc fa16 	bl	800039c <HAL_GetTick>
 8003f70:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f72:	4b87      	ldr	r3, [pc, #540]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	f013 0f02 	tst.w	r3, #2
 8003f7a:	d1dc      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7c:	f7fc fa0e 	bl	800039c <HAL_GetTick>
 8003f80:	1bc0      	subs	r0, r0, r7
 8003f82:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f86:	4298      	cmp	r0, r3
 8003f88:	d9f3      	bls.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x51e>
            ret = HAL_TIMEOUT;
 8003f8a:	2503      	movs	r5, #3
 8003f8c:	e7d3      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f8e:	4880      	ldr	r0, [pc, #512]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003f90:	6902      	ldr	r2, [r0, #16]
 8003f92:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8003f96:	497f      	ldr	r1, [pc, #508]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x740>)
 8003f98:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	6103      	str	r3, [r0, #16]
 8003fa0:	e7d7      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      status = ret;
 8003fa2:	462e      	mov	r6, r5
 8003fa4:	e778      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x444>
        status = ret;
 8003fa6:	462e      	mov	r6, r5
 8003fa8:	e776      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x444>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003faa:	2101      	movs	r1, #1
 8003fac:	1d20      	adds	r0, r4, #4
 8003fae:	f7ff fc45 	bl	800383c <RCCEx_PLL2_Config>
 8003fb2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003fb4:	b9e5      	cbnz	r5, 8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fb6:	4a76      	ldr	r2, [pc, #472]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003fb8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003fba:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003fbe:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6553      	str	r3, [r2, #84]	; 0x54
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003fcc:	f7ff fcbc 	bl	8003948 <RCCEx_PLL3_Config>
 8003fd0:	4605      	mov	r5, r0
      break;
 8003fd2:	e7ef      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003fd4:	2601      	movs	r6, #1
 8003fd6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	f013 0f02 	tst.w	r3, #2
 8003fde:	d022      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003fe0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d81b      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003fe6:	e8df f003 	tbb	[pc, r3]
 8003fea:	050a      	.short	0x050a
 8003fec:	0a0a0a13 	.word	0x0a0a0a13
 8003ff0:	462e      	mov	r6, r5
 8003ff2:	e7f1      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	1d20      	adds	r0, r4, #4
 8003ff8:	f7ff fc20 	bl	800383c <RCCEx_PLL2_Config>
 8003ffc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ffe:	b98d      	cbnz	r5, 8004024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004000:	4a63      	ldr	r2, [pc, #396]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004002:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004004:	f023 0307 	bic.w	r3, r3, #7
 8004008:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800400a:	430b      	orrs	r3, r1
 800400c:	6553      	str	r3, [r2, #84]	; 0x54
 800400e:	e00a      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004010:	2101      	movs	r1, #1
 8004012:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004016:	f7ff fc97 	bl	8003948 <RCCEx_PLL3_Config>
 800401a:	4605      	mov	r5, r0
      break;
 800401c:	e7ef      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800401e:	2601      	movs	r6, #1
 8004020:	4635      	mov	r5, r6
 8004022:	e000      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8004024:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	f013 0f04 	tst.w	r3, #4
 800402c:	d022      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x620>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800402e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004032:	2b05      	cmp	r3, #5
 8004034:	d81a      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004036:	e8df f003 	tbb	[pc, r3]
 800403a:	0308      	.short	0x0308
 800403c:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004040:	2101      	movs	r1, #1
 8004042:	1d20      	adds	r0, r4, #4
 8004044:	f7ff fbfa 	bl	800383c <RCCEx_PLL2_Config>
 8004048:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800404a:	b995      	cbnz	r5, 8004072 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800404c:	4a50      	ldr	r2, [pc, #320]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800404e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004050:	f023 0307 	bic.w	r3, r3, #7
 8004054:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004058:	430b      	orrs	r3, r1
 800405a:	6593      	str	r3, [r2, #88]	; 0x58
 800405c:	e00a      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x620>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800405e:	2101      	movs	r1, #1
 8004060:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004064:	f7ff fc70 	bl	8003948 <RCCEx_PLL3_Config>
 8004068:	4605      	mov	r5, r0
      break;
 800406a:	e7ee      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800406c:	2601      	movs	r6, #1
 800406e:	4635      	mov	r5, r6
 8004070:	e000      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x620>
 8004072:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	f013 0f20 	tst.w	r3, #32
 800407a:	d027      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800407c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004084:	d040      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8004086:	d816      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004088:	b13b      	cbz	r3, 800409a <HAL_RCCEx_PeriphCLKConfig+0x646>
 800408a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800408e:	d10f      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004090:	2100      	movs	r1, #0
 8004092:	1d20      	adds	r0, r4, #4
 8004094:	f7ff fbd2 	bl	800383c <RCCEx_PLL2_Config>
 8004098:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800409a:	2d00      	cmp	r5, #0
 800409c:	d13b      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800409e:	4a3c      	ldr	r2, [pc, #240]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80040a0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80040a2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80040a6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80040aa:	430b      	orrs	r3, r1
 80040ac:	6553      	str	r3, [r2, #84]	; 0x54
 80040ae:	e00d      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80040b0:	2601      	movs	r6, #1
 80040b2:	4635      	mov	r5, r6
 80040b4:	e00a      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ba:	d0ee      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x646>
 80040bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040c0:	d0eb      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x646>
 80040c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040c6:	d0e8      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x646>
 80040c8:	2601      	movs	r6, #1
 80040ca:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 80040d2:	d030      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80040d4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80040d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040dc:	d04b      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x722>
 80040de:	d81f      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80040e0:	b13b      	cbz	r3, 80040f2 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 80040e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e6:	d118      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040e8:	2100      	movs	r1, #0
 80040ea:	1d20      	adds	r0, r4, #4
 80040ec:	f7ff fba6 	bl	800383c <RCCEx_PLL2_Config>
 80040f0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80040f2:	2d00      	cmp	r5, #0
 80040f4:	d146      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x730>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040f6:	4a26      	ldr	r2, [pc, #152]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80040f8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80040fa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80040fe:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8004102:	430b      	orrs	r3, r1
 8004104:	6593      	str	r3, [r2, #88]	; 0x58
 8004106:	e016      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004108:	2102      	movs	r1, #2
 800410a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800410e:	f7ff fc1b 	bl	8003948 <RCCEx_PLL3_Config>
 8004112:	4605      	mov	r5, r0
      break;
 8004114:	e7c1      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x646>
 8004116:	462e      	mov	r6, r5
 8004118:	e7d8      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800411a:	2601      	movs	r6, #1
 800411c:	4635      	mov	r5, r6
 800411e:	e00a      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004124:	d0e5      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8004126:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800412a:	d0e2      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 800412c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004130:	d0df      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8004132:	2601      	movs	r6, #1
 8004134:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	f013 0f80 	tst.w	r3, #128	; 0x80
 800413c:	d037      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x75a>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800413e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8004142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004146:	f000 80a2 	beq.w	800428e <HAL_RCCEx_PeriphCLKConfig+0x83a>
 800414a:	d825      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x744>
 800414c:	b13b      	cbz	r3, 800415e <HAL_RCCEx_PeriphCLKConfig+0x70a>
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004152:	d119      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x734>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004154:	2100      	movs	r1, #0
 8004156:	1d20      	adds	r0, r4, #4
 8004158:	f7ff fb70 	bl	800383c <RCCEx_PLL2_Config>
 800415c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800415e:	2d00      	cmp	r5, #0
 8004160:	f040 809c 	bne.w	800429c <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004164:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004166:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004168:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800416c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8004170:	430b      	orrs	r3, r1
 8004172:	6593      	str	r3, [r2, #88]	; 0x58
 8004174:	e01b      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x75a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004176:	2102      	movs	r1, #2
 8004178:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800417c:	f7ff fbe4 	bl	8003948 <RCCEx_PLL3_Config>
 8004180:	4605      	mov	r5, r0
      break;
 8004182:	e7b6      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8004184:	462e      	mov	r6, r5
 8004186:	e7d6      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004188:	2601      	movs	r6, #1
 800418a:	4635      	mov	r5, r6
 800418c:	e00f      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800418e:	bf00      	nop
 8004190:	58024400 	.word	0x58024400
 8004194:	00ffffcf 	.word	0x00ffffcf
 8004198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419c:	d0df      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x70a>
 800419e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041a2:	d0dc      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x70a>
 80041a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041a8:	d0d9      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x70a>
 80041aa:	2601      	movs	r6, #1
 80041ac:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	f013 0f08 	tst.w	r3, #8
 80041b4:	d00c      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80041b6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041be:	d06f      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041c0:	4a94      	ldr	r2, [pc, #592]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80041c2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80041c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041c8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80041cc:	430b      	orrs	r3, r1
 80041ce:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	f013 0f10 	tst.w	r3, #16
 80041d6:	d00c      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80041d8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80041dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e0:	d067      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041e2:	4a8c      	ldr	r2, [pc, #560]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80041e4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80041e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ea:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80041ee:	430b      	orrs	r3, r1
 80041f0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80041f8:	d00b      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    switch(PeriphClkInit->AdcClockSelection)
 80041fa:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80041fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004202:	d06e      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004208:	d061      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d05a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x870>
 800420e:	2601      	movs	r6, #1
 8004210:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004218:	d00c      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->UsbClockSelection)
 800421a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800421e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004222:	d076      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8004224:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004228:	d069      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 800422a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800422e:	d061      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8004230:	2601      	movs	r6, #1
 8004232:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800423a:	d007      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch(PeriphClkInit->SdmmcClockSelection)
 800423c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d070      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 8004242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004246:	d07b      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004248:	2601      	movs	r6, #1
 800424a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004252:	d17d      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800425a:	f000 8086 	beq.w	800436a <HAL_RCCEx_PeriphCLKConfig+0x916>
    switch(PeriphClkInit->RngClockSelection)
 800425e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004264:	f000 80c6 	beq.w	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004268:	d97c      	bls.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800426a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426e:	d003      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8004270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004274:	f040 80bc 	bne.w	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    if(ret == HAL_OK)
 8004278:	2d00      	cmp	r5, #0
 800427a:	f040 80c1 	bne.w	8004400 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800427e:	4a65      	ldr	r2, [pc, #404]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004280:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004286:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004288:	430b      	orrs	r3, r1
 800428a:	6553      	str	r3, [r2, #84]	; 0x54
 800428c:	e06d      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x916>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800428e:	2102      	movs	r1, #2
 8004290:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004294:	f7ff fb58 	bl	8003948 <RCCEx_PLL3_Config>
 8004298:	4605      	mov	r5, r0
      break;
 800429a:	e760      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x70a>
 800429c:	462e      	mov	r6, r5
 800429e:	e786      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x75a>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042a0:	2102      	movs	r1, #2
 80042a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042a6:	f7ff fb4f 	bl	8003948 <RCCEx_PLL3_Config>
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d088      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x76c>
          status = HAL_ERROR;
 80042ae:	2601      	movs	r6, #1
 80042b0:	e786      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x76c>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042b2:	2102      	movs	r1, #2
 80042b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042b8:	f7ff fb46 	bl	8003948 <RCCEx_PLL3_Config>
 80042bc:	2800      	cmp	r0, #0
 80042be:	d090      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
        status = HAL_ERROR;
 80042c0:	2601      	movs	r6, #1
 80042c2:	e78e      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042c4:	2100      	movs	r1, #0
 80042c6:	1d20      	adds	r0, r4, #4
 80042c8:	f7ff fab8 	bl	800383c <RCCEx_PLL2_Config>
 80042cc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80042ce:	b97d      	cbnz	r5, 80042f0 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d0:	4a50      	ldr	r2, [pc, #320]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80042d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80042d4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80042d8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80042dc:	430b      	orrs	r3, r1
 80042de:	6593      	str	r3, [r2, #88]	; 0x58
 80042e0:	e797      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042e2:	2102      	movs	r1, #2
 80042e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042e8:	f7ff fb2e 	bl	8003948 <RCCEx_PLL3_Config>
 80042ec:	4605      	mov	r5, r0
      break;
 80042ee:	e7ee      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80042f0:	462e      	mov	r6, r5
 80042f2:	e78e      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f4:	4a47      	ldr	r2, [pc, #284]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80042f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80042fe:	b97d      	cbnz	r5, 8004320 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004300:	4a44      	ldr	r2, [pc, #272]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004302:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004304:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004308:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800430c:	430b      	orrs	r3, r1
 800430e:	6553      	str	r3, [r2, #84]	; 0x54
 8004310:	e790      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004312:	2101      	movs	r1, #1
 8004314:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004318:	f7ff fb16 	bl	8003948 <RCCEx_PLL3_Config>
 800431c:	4605      	mov	r5, r0
      break;
 800431e:	e7ee      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8004320:	462e      	mov	r6, r5
 8004322:	e787      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004324:	4a3b      	ldr	r2, [pc, #236]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004326:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800432e:	b96d      	cbnz	r5, 800434c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004330:	4a38      	ldr	r2, [pc, #224]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004332:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004338:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800433a:	430b      	orrs	r3, r1
 800433c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800433e:	e785      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004340:	2102      	movs	r1, #2
 8004342:	1d20      	adds	r0, r4, #4
 8004344:	f7ff fa7a 	bl	800383c <RCCEx_PLL2_Config>
 8004348:	4605      	mov	r5, r0
      break;
 800434a:	e7f0      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800434c:	462e      	mov	r6, r5
 800434e:	e77d      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004350:	2102      	movs	r1, #2
 8004352:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004356:	f7ff faf7 	bl	8003948 <RCCEx_PLL3_Config>
 800435a:	2800      	cmp	r0, #0
 800435c:	f43f af7a 	beq.w	8004254 <HAL_RCCEx_PeriphCLKConfig+0x800>
      status=HAL_ERROR;
 8004360:	2601      	movs	r6, #1
 8004362:	e777      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x800>
    switch(PeriphClkInit->RngClockSelection)
 8004364:	2b00      	cmp	r3, #0
 8004366:	d087      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8004368:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004370:	d006      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004372:	4a28      	ldr	r2, [pc, #160]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004374:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800437a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800437c:	430b      	orrs	r3, r1
 800437e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004386:	d007      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x944>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004388:	4a22      	ldr	r2, [pc, #136]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800438a:	6913      	ldr	r3, [r2, #16]
 800438c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004390:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8004394:	430b      	orrs	r3, r1
 8004396:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800439e:	d006      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x95a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043a0:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80043a2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80043a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80043aa:	430b      	orrs	r3, r1
 80043ac:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80043b4:	d009      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x976>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043b6:	4b17      	ldr	r3, [pc, #92]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043be:	611a      	str	r2, [r3, #16]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 80043c6:	430a      	orrs	r2, r1
 80043c8:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	db19      	blt.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80043d6:	d007      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043d8:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80043da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80043dc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80043e0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 80043e8:	b106      	cbz	r6, 80043ec <HAL_RCCEx_PeriphCLKConfig+0x998>
  return HAL_ERROR;
 80043ea:	2601      	movs	r6, #1
}
 80043ec:	4630      	mov	r0, r6
 80043ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 80043f0:	2601      	movs	r6, #1
 80043f2:	e7ba      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f4:	4a07      	ldr	r2, [pc, #28]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80043f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80043fe:	e73b      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8004400:	462e      	mov	r6, r5
 8004402:	e7b2      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x916>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004404:	4a03      	ldr	r2, [pc, #12]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004406:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004408:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800440c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800440e:	430b      	orrs	r3, r1
 8004410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004412:	e7dd      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004414:	58024400 	.word	0x58024400

08004418 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004418:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800441a:	f7ff f9ed 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004426:	4a04      	ldr	r2, [pc, #16]	; (8004438 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004428:	5cd3      	ldrb	r3, [r2, r3]
 800442a:	f003 031f 	and.w	r3, r3, #31
}
 800442e:	40d8      	lsrs	r0, r3
 8004430:	bd08      	pop	{r3, pc}
 8004432:	bf00      	nop
 8004434:	58024400 	.word	0x58024400
 8004438:	0800c4f4 	.word	0x0800c4f4

0800443c <HAL_RCCEx_GetPLL2ClockFreq>:
{
 800443c:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800443e:	4a78      	ldr	r2, [pc, #480]	; (8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004440:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004442:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8004444:	f3c4 3505 	ubfx	r5, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004448:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800444a:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800444e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004450:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8004454:	fb03 f302 	mul.w	r3, r3, r2
  if (pll2m != 0U)
 8004458:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 800445c:	f000 80da 	beq.w	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 8004460:	f001 0103 	and.w	r1, r1, #3
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800446c:	2901      	cmp	r1, #1
 800446e:	d066      	beq.n	800453e <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 8004470:	2902      	cmp	r1, #2
 8004472:	f000 80b2 	beq.w	80045da <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
 8004476:	b1e1      	cbz	r1, 80044b2 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004478:	ee07 5a10 	vmov	s14, r5
 800447c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004480:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004484:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004488:	4b65      	ldr	r3, [pc, #404]	; (8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004490:	ee07 3a10 	vmov	s14, r3
 8004494:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004498:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8004628 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800449c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80044a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80044b0:	e061      	b.n	8004576 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044b2:	4b5b      	ldr	r3, [pc, #364]	; (8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f013 0f20 	tst.w	r3, #32
 80044ba:	d023      	beq.n	8004504 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044bc:	4958      	ldr	r1, [pc, #352]	; (8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80044be:	680a      	ldr	r2, [r1, #0]
 80044c0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80044c4:	4b59      	ldr	r3, [pc, #356]	; (800462c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 80044c6:	40d3      	lsrs	r3, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044c8:	ee07 3a10 	vmov	s14, r3
 80044cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044d0:	ee06 5a90 	vmov	s13, r5
 80044d4:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80044d8:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80044dc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80044de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e2:	ee07 3a10 	vmov	s14, r3
 80044e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044ea:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004628 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80044ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 80044f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004502:	e038      	b.n	8004576 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004504:	ee07 5a10 	vmov	s14, r5
 8004508:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800450c:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8004630 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8004510:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004514:	4b42      	ldr	r3, [pc, #264]	; (8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451c:	ee07 3a10 	vmov	s14, r3
 8004520:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004524:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8004628 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004528:	ee67 7a86 	vmul.f32	s15, s15, s12
 800452c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004534:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004538:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800453c:	e01b      	b.n	8004576 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800453e:	ee07 5a10 	vmov	s14, r5
 8004542:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004546:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800454a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800454e:	4b34      	ldr	r3, [pc, #208]	; (8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004556:	ee07 3a10 	vmov	s14, r3
 800455a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800455e:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004628 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004562:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800456a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800456e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004572:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004576:	4a2a      	ldr	r2, [pc, #168]	; (8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004578:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800457a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800457e:	ee07 3a10 	vmov	s14, r3
 8004582:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004586:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800458a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800458e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004596:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800459a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800459c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80045a0:	ee07 3a10 	vmov	s14, r3
 80045a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80045a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80045ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80045b8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80045ba:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80045ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80045d2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80045d6:	bc30      	pop	{r4, r5}
 80045d8:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045da:	ee07 5a10 	vmov	s14, r5
 80045de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80045e2:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 80045e6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80045ea:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f2:	ee07 3a10 	vmov	s14, r3
 80045f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80045fa:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004628 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80045fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800460a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800460e:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004612:	e7b0      	b.n	8004576 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004618:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800461a:	6083      	str	r3, [r0, #8]
}
 800461c:	e7db      	b.n	80045d6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 800461e:	bf00      	nop
 8004620:	58024400 	.word	0x58024400
 8004624:	4a742400 	.word	0x4a742400
 8004628:	39000000 	.word	0x39000000
 800462c:	03d09000 	.word	0x03d09000
 8004630:	4c742400 	.word	0x4c742400
 8004634:	4bbebc20 	.word	0x4bbebc20

08004638 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8004638:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800463a:	4a78      	ldr	r2, [pc, #480]	; (800481c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800463c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800463e:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8004640:	f3c4 5505 	ubfx	r5, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004644:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004646:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800464a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800464c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8004650:	fb03 f302 	mul.w	r3, r3, r2
  if (pll3m != 0U)
 8004654:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 8004658:	f000 80da 	beq.w	8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 800465c:	f001 0103 	and.w	r1, r1, #3
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004668:	2901      	cmp	r1, #1
 800466a:	d066      	beq.n	800473a <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 800466c:	2902      	cmp	r1, #2
 800466e:	f000 80b2 	beq.w	80047d6 <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
 8004672:	b1e1      	cbz	r1, 80046ae <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004674:	ee07 5a10 	vmov	s14, r5
 8004678:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800467c:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8004820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004680:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004684:	4b65      	ldr	r3, [pc, #404]	; (800481c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468c:	ee07 3a10 	vmov	s14, r3
 8004690:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004694:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8004824 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004698:	ee67 7a86 	vmul.f32	s15, s15, s12
 800469c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80046ac:	e061      	b.n	8004772 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046ae:	4b5b      	ldr	r3, [pc, #364]	; (800481c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f013 0f20 	tst.w	r3, #32
 80046b6:	d023      	beq.n	8004700 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046b8:	4958      	ldr	r1, [pc, #352]	; (800481c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80046ba:	680a      	ldr	r2, [r1, #0]
 80046bc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80046c0:	4b59      	ldr	r3, [pc, #356]	; (8004828 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 80046c2:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046c4:	ee07 3a10 	vmov	s14, r3
 80046c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046cc:	ee06 5a90 	vmov	s13, r5
 80046d0:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80046d4:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80046d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a10 	vmov	s14, r3
 80046e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046e6:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004824 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80046ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 80046ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046fe:	e038      	b.n	8004772 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004700:	ee07 5a10 	vmov	s14, r5
 8004704:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004708:	ed9f 6a48 	vldr	s12, [pc, #288]	; 800482c <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 800470c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004710:	4b42      	ldr	r3, [pc, #264]	; (800481c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004718:	ee07 3a10 	vmov	s14, r3
 800471c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004720:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8004824 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004724:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800472c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004730:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004734:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004738:	e01b      	b.n	8004772 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800473a:	ee07 5a10 	vmov	s14, r5
 800473e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004742:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004746:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800474a:	4b34      	ldr	r3, [pc, #208]	; (800481c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004752:	ee07 3a10 	vmov	s14, r3
 8004756:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800475a:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004824 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800475e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004766:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800476a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800476e:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004772:	4a2a      	ldr	r2, [pc, #168]	; (800481c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004774:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004776:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800477a:	ee07 3a10 	vmov	s14, r3
 800477e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004782:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004786:	ee37 7a06 	vadd.f32	s14, s14, s12
 800478a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800478e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004792:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004796:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004798:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800479c:	ee07 3a10 	vmov	s14, r3
 80047a0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047a4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80047a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80047b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80047b6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80047c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ca:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80047ce:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80047d2:	bc30      	pop	{r4, r5}
 80047d4:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047d6:	ee07 5a10 	vmov	s14, r5
 80047da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047de:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004830 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 80047e2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80047e6:	4b0d      	ldr	r3, [pc, #52]	; (800481c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a10 	vmov	s14, r3
 80047f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047f6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004824 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80047fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80047fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004806:	ee77 7a87 	vadd.f32	s15, s15, s14
 800480a:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 800480e:	e7b0      	b.n	8004772 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004814:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004816:	6083      	str	r3, [r0, #8]
}
 8004818:	e7db      	b.n	80047d2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 800481a:	bf00      	nop
 800481c:	58024400 	.word	0x58024400
 8004820:	4a742400 	.word	0x4a742400
 8004824:	39000000 	.word	0x39000000
 8004828:	03d09000 	.word	0x03d09000
 800482c:	4c742400 	.word	0x4c742400
 8004830:	4bbebc20 	.word	0x4bbebc20

08004834 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8004834:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004836:	4a78      	ldr	r2, [pc, #480]	; (8004a18 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004838:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800483a:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800483c:	f3c4 1505 	ubfx	r5, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004840:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004842:	f003 0301 	and.w	r3, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004846:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004848:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 800484c:	fb03 f302 	mul.w	r3, r3, r2
  if (pll1m != 0U)
 8004850:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8004854:	f000 80da 	beq.w	8004a0c <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
 8004858:	f001 0103 	and.w	r1, r1, #3
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004864:	2901      	cmp	r1, #1
 8004866:	d066      	beq.n	8004936 <HAL_RCCEx_GetPLL1ClockFreq+0x102>
 8004868:	2902      	cmp	r1, #2
 800486a:	f000 80b2 	beq.w	80049d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800486e:	b1e1      	cbz	r1, 80048aa <HAL_RCCEx_GetPLL1ClockFreq+0x76>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004870:	ee07 5a10 	vmov	s14, r5
 8004874:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004878:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8004a1c <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800487c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004880:	4b65      	ldr	r3, [pc, #404]	; (8004a18 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004888:	ee07 3a10 	vmov	s14, r3
 800488c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004890:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8004a20 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004894:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800489c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80048a8:	e061      	b.n	800496e <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048aa:	4b5b      	ldr	r3, [pc, #364]	; (8004a18 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f013 0f20 	tst.w	r3, #32
 80048b2:	d023      	beq.n	80048fc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048b4:	4958      	ldr	r1, [pc, #352]	; (8004a18 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80048b6:	680a      	ldr	r2, [r1, #0]
 80048b8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80048bc:	4b59      	ldr	r3, [pc, #356]	; (8004a24 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 80048be:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048c0:	ee07 3a10 	vmov	s14, r3
 80048c4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048c8:	ee06 5a90 	vmov	s13, r5
 80048cc:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80048d0:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80048d4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80048d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048da:	ee07 3a10 	vmov	s14, r3
 80048de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048e2:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004a20 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80048e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80048ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80048fa:	e038      	b.n	800496e <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048fc:	ee07 5a10 	vmov	s14, r5
 8004900:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004904:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8004a1c <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004908:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800490c:	4b42      	ldr	r3, [pc, #264]	; (8004a18 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004914:	ee07 3a10 	vmov	s14, r3
 8004918:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800491c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8004a20 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004920:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800492c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004930:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004934:	e01b      	b.n	800496e <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004936:	ee07 5a10 	vmov	s14, r5
 800493a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800493e:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8004a28 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8004942:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004946:	4b34      	ldr	r3, [pc, #208]	; (8004a18 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494e:	ee07 3a10 	vmov	s14, r3
 8004952:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004956:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004a20 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800495a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800495e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004966:	ee77 7a87 	vadd.f32	s15, s15, s14
 800496a:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800496e:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004970:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004972:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004976:	ee07 3a10 	vmov	s14, r3
 800497a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800497e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004982:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498e:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004992:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004994:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004998:	ee07 3a10 	vmov	s14, r3
 800499c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049a0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80049a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ac:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80049b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80049b2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049be:	ee77 7a86 	vadd.f32	s15, s15, s12
 80049c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80049ca:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80049ce:	bc30      	pop	{r4, r5}
 80049d0:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049d2:	ee07 5a10 	vmov	s14, r5
 80049d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049da:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004a2c <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 80049de:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80049e2:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ea:	ee07 3a10 	vmov	s14, r3
 80049ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049f2:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004a20 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80049f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80049fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a06:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004a0a:	e7b0      	b.n	800496e <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004a10:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004a12:	6083      	str	r3, [r0, #8]
}
 8004a14:	e7db      	b.n	80049ce <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 8004a16:	bf00      	nop
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	4c742400 	.word	0x4c742400
 8004a20:	39000000 	.word	0x39000000
 8004a24:	03d09000 	.word	0x03d09000
 8004a28:	4a742400 	.word	0x4a742400
 8004a2c:	4bbebc20 	.word	0x4bbebc20

08004a30 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8004a30:	b500      	push	{lr}
 8004a32:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004a34:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004a38:	d020      	beq.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004a3a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004a3e:	d071      	beq.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004a40:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004a44:	f000 80c8 	beq.w	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004a48:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8004a4c:	f000 8121 	beq.w	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004a50:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004a54:	f000 8182 	beq.w	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004a58:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004a5c:	f000 81db 	beq.w	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004a60:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004a64:	f000 821f 	beq.w	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004a68:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8004a6c:	f000 8239 	beq.w	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004a70:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004a74:	f000 827e 	beq.w	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
      frequency = 0;
 8004a78:	2000      	movs	r0, #0
 8004a7a:	e2b4      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004a7c:	4ba4      	ldr	r3, [pc, #656]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a80:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	f200 82a5 	bhi.w	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
 8004a8a:	e8df f003 	tbb	[pc, r3]
 8004a8e:	1005      	.short	0x1005
 8004a90:	031b      	.short	0x031b
 8004a92:	26          	.byte	0x26
 8004a93:	00          	.byte	0x00
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004a94:	489f      	ldr	r0, [pc, #636]	; (8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004a96:	e2a6      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a98:	4b9d      	ldr	r3, [pc, #628]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004aa0:	f000 82a1 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004aa4:	a807      	add	r0, sp, #28
 8004aa6:	f7ff fec5 	bl	8004834 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004aaa:	9808      	ldr	r0, [sp, #32]
 8004aac:	e29b      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004aae:	4b98      	ldr	r3, [pc, #608]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004ab6:	f000 8296 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004aba:	a804      	add	r0, sp, #16
 8004abc:	f7ff fcbe 	bl	800443c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ac0:	9804      	ldr	r0, [sp, #16]
 8004ac2:	e290      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ac4:	4b92      	ldr	r3, [pc, #584]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004acc:	f000 828b 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ad0:	a801      	add	r0, sp, #4
 8004ad2:	f7ff fdb1 	bl	8004638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ad6:	9801      	ldr	r0, [sp, #4]
 8004ad8:	e285      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ada:	4a8d      	ldr	r2, [pc, #564]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004adc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004ade:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	f012 0f04 	tst.w	r2, #4
 8004ae8:	d007      	beq.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8004aea:	b933      	cbnz	r3, 8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xca>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004aec:	4b88      	ldr	r3, [pc, #544]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004af4:	4888      	ldr	r0, [pc, #544]	; (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004af6:	40d8      	lsrs	r0, r3
 8004af8:	e275      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004afa:	4a85      	ldr	r2, [pc, #532]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004b02:	d003      	beq.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004b04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b08:	f000 8266 	beq.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b0c:	4a80      	ldr	r2, [pc, #512]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004b14:	f000 8262 	beq.w	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
 8004b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b1c:	f000 8260 	beq.w	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = 0;
 8004b20:	2000      	movs	r0, #0
 8004b22:	e260      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004b24:	4b7a      	ldr	r3, [pc, #488]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b28:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8004b2c:	2b80      	cmp	r3, #128	; 0x80
 8004b2e:	d033      	beq.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8004b30:	d915      	bls.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8004b32:	2bc0      	cmp	r3, #192	; 0xc0
 8004b34:	f000 8256 	beq.w	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8004b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3c:	d11f      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b3e:	4a74      	ldr	r2, [pc, #464]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b40:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004b42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	f012 0f04 	tst.w	r2, #4
 8004b4c:	d02f      	beq.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004b4e:	bb73      	cbnz	r3, 8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b50:	4b6f      	ldr	r3, [pc, #444]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004b58:	486f      	ldr	r0, [pc, #444]	; (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004b5a:	40d8      	lsrs	r0, r3
 8004b5c:	e243      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      switch (saiclocksource)
 8004b5e:	b183      	cbz	r3, 8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8004b60:	2b40      	cmp	r3, #64	; 0x40
 8004b62:	d10a      	bne.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b64:	4b6a      	ldr	r3, [pc, #424]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004b6c:	f000 823b 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b70:	a804      	add	r0, sp, #16
 8004b72:	f7ff fc63 	bl	800443c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b76:	9804      	ldr	r0, [sp, #16]
 8004b78:	e235      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          frequency = 0;
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	e233      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8004b7e:	2000      	movs	r0, #0
 8004b80:	e231      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b82:	4b63      	ldr	r3, [pc, #396]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004b8a:	f000 822c 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b8e:	a807      	add	r0, sp, #28
 8004b90:	f7ff fe50 	bl	8004834 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b94:	9808      	ldr	r0, [sp, #32]
 8004b96:	e226      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b98:	4b5d      	ldr	r3, [pc, #372]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004ba0:	f000 8221 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ba4:	a801      	add	r0, sp, #4
 8004ba6:	f7ff fd47 	bl	8004638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004baa:	9801      	ldr	r0, [sp, #4]
 8004bac:	e21b      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bae:	4a58      	ldr	r2, [pc, #352]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004bb6:	d003      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8004bb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bbc:	f000 8216 	beq.w	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004bc0:	4a53      	ldr	r2, [pc, #332]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004bc8:	f000 8212 	beq.w	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8004bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bd0:	f000 8210 	beq.w	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
            frequency = 0;
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	e206      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004bd8:	4b4d      	ldr	r3, [pc, #308]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8004be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be4:	d035      	beq.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8004be6:	d916      	bls.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004be8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bec:	f000 8204 	beq.w	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 8004bf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bf4:	d120      	bne.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004bf6:	4a46      	ldr	r2, [pc, #280]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004bf8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004bfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bfe:	6812      	ldr	r2, [r2, #0]
 8004c00:	f012 0f04 	tst.w	r2, #4
 8004c04:	d030      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8004c06:	bb7b      	cbnz	r3, 8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c08:	4b41      	ldr	r3, [pc, #260]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004c10:	4841      	ldr	r0, [pc, #260]	; (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004c12:	40d8      	lsrs	r0, r3
 8004c14:	e1e7      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      switch (saiclocksource)
 8004c16:	b18b      	cbz	r3, 8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8004c18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c1c:	d10a      	bne.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c1e:	4b3c      	ldr	r3, [pc, #240]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004c26:	f000 81de 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c2a:	a804      	add	r0, sp, #16
 8004c2c:	f7ff fc06 	bl	800443c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c30:	9804      	ldr	r0, [sp, #16]
 8004c32:	e1d8      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          frequency = 0;
 8004c34:	2000      	movs	r0, #0
 8004c36:	e1d6      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8004c38:	2000      	movs	r0, #0
 8004c3a:	e1d4      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c3c:	4b34      	ldr	r3, [pc, #208]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004c44:	f000 81cf 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c48:	a807      	add	r0, sp, #28
 8004c4a:	f7ff fdf3 	bl	8004834 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c4e:	9808      	ldr	r0, [sp, #32]
 8004c50:	e1c9      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c52:	4b2f      	ldr	r3, [pc, #188]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004c5a:	f000 81c4 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c5e:	a801      	add	r0, sp, #4
 8004c60:	f7ff fcea 	bl	8004638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c64:	9801      	ldr	r0, [sp, #4]
 8004c66:	e1be      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c68:	4a29      	ldr	r2, [pc, #164]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004c70:	d003      	beq.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8004c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c76:	f000 81c1 	beq.w	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c7a:	4a25      	ldr	r2, [pc, #148]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004c82:	f000 81bd 	beq.w	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8004c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c8a:	f000 81bb 	beq.w	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
            frequency = 0;
 8004c8e:	2000      	movs	r0, #0
 8004c90:	e1a9      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004c92:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c96:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8004c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c9e:	d03d      	beq.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8004ca0:	d917      	bls.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8004ca2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ca6:	f000 81af 	beq.w	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 8004caa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cae:	d121      	bne.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004cb0:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004cb2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004cb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	f012 0f04 	tst.w	r2, #4
 8004cbe:	d038      	beq.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d136      	bne.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004ccc:	4812      	ldr	r0, [pc, #72]	; (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004cce:	40d8      	lsrs	r0, r3
 8004cd0:	e189      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      switch (saiclocksource)
 8004cd2:	b18b      	cbz	r3, 8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8004cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cd8:	d10a      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004ce2:	f000 8180 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ce6:	a804      	add	r0, sp, #16
 8004ce8:	f7ff fba8 	bl	800443c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004cec:	9804      	ldr	r0, [sp, #16]
 8004cee:	e17a      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          frequency = 0;
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	e178      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	e176      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004d00:	f000 8171 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d04:	a807      	add	r0, sp, #28
 8004d06:	f7ff fd95 	bl	8004834 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d0a:	9808      	ldr	r0, [sp, #32]
 8004d0c:	e16b      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8004d0e:	bf00      	nop
 8004d10:	58024400 	.word	0x58024400
 8004d14:	00bb8000 	.word	0x00bb8000
 8004d18:	03d09000 	.word	0x03d09000
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d1c:	4ba4      	ldr	r3, [pc, #656]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004d24:	f000 815f 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d28:	a801      	add	r0, sp, #4
 8004d2a:	f7ff fc85 	bl	8004638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d2e:	9801      	ldr	r0, [sp, #4]
 8004d30:	e159      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d32:	4a9f      	ldr	r2, [pc, #636]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004d3a:	d003      	beq.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004d3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d40:	f000 8164 	beq.w	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d44:	4a9a      	ldr	r2, [pc, #616]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004d4c:	f000 8160 	beq.w	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 8004d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d54:	f000 815e 	beq.w	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
            frequency = 0;
 8004d58:	2000      	movs	r0, #0
 8004d5a:	e144      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004d5c:	4b94      	ldr	r3, [pc, #592]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d60:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8004d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d68:	d035      	beq.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8004d6a:	d916      	bls.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8004d6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d70:	f000 8152 	beq.w	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d78:	d120      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d7a:	4a8d      	ldr	r2, [pc, #564]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004d7c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004d7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	f012 0f04 	tst.w	r2, #4
 8004d88:	d030      	beq.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004d8a:	bb7b      	cbnz	r3, 8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d8c:	4b88      	ldr	r3, [pc, #544]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004d94:	4887      	ldr	r0, [pc, #540]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8004d96:	40d8      	lsrs	r0, r3
 8004d98:	e125      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      switch (srcclk)
 8004d9a:	b18b      	cbz	r3, 8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8004d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da0:	d10a      	bne.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004da2:	4b83      	ldr	r3, [pc, #524]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004daa:	f000 811c 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dae:	a804      	add	r0, sp, #16
 8004db0:	f7ff fb44 	bl	800443c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004db4:	9804      	ldr	r0, [sp, #16]
 8004db6:	e116      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          frequency = 0;
 8004db8:	2000      	movs	r0, #0
 8004dba:	e114      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	e112      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004dc0:	4b7b      	ldr	r3, [pc, #492]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004dc8:	f000 810d 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dcc:	a807      	add	r0, sp, #28
 8004dce:	f7ff fd31 	bl	8004834 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dd2:	9808      	ldr	r0, [sp, #32]
 8004dd4:	e107      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004dd6:	4b76      	ldr	r3, [pc, #472]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004dde:	f000 8102 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004de2:	a801      	add	r0, sp, #4
 8004de4:	f7ff fc28 	bl	8004638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004de8:	9801      	ldr	r0, [sp, #4]
 8004dea:	e0fc      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004dec:	4a70      	ldr	r2, [pc, #448]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004df4:	d003      	beq.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8004df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dfa:	f000 810f 	beq.w	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004dfe:	4a6c      	ldr	r2, [pc, #432]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004e06:	f000 810b 	beq.w	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e0e:	f000 8109 	beq.w	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
            frequency = 0;
 8004e12:	2000      	movs	r0, #0
 8004e14:	e0e7      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004e16:	4b66      	ldr	r3, [pc, #408]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8004e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e22:	d010      	beq.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8004e24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e28:	d018      	beq.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 8004e2a:	b10b      	cbz	r3, 8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	e0da      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e30:	4b5f      	ldr	r3, [pc, #380]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004e38:	f000 80d5 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e3c:	a804      	add	r0, sp, #16
 8004e3e:	f7ff fafd 	bl	800443c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e42:	9804      	ldr	r0, [sp, #16]
 8004e44:	e0cf      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e46:	4b5a      	ldr	r3, [pc, #360]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004e4e:	f000 80ca 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e52:	a801      	add	r0, sp, #4
 8004e54:	f7ff fbf0 	bl	8004638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004e58:	9803      	ldr	r0, [sp, #12]
 8004e5a:	e0c4      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e5c:	4a54      	ldr	r2, [pc, #336]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004e5e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004e60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	f012 0f04 	tst.w	r2, #4
 8004e6a:	d007      	beq.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
 8004e6c:	b933      	cbnz	r3, 8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e6e:	4b50      	ldr	r3, [pc, #320]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004e76:	484f      	ldr	r0, [pc, #316]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8004e78:	40d8      	lsrs	r0, r3
 8004e7a:	e0b4      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e7c:	4a4c      	ldr	r2, [pc, #304]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004e84:	d003      	beq.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8004e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e8a:	f000 80cd 	beq.w	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e8e:	4a48      	ldr	r2, [pc, #288]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004e96:	f000 80c9 	beq.w	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
 8004e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e9e:	f000 80c7 	beq.w	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
            frequency = 0;
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e09f      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004ea6:	4b42      	ldr	r3, [pc, #264]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8004eaa:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004eae:	d002      	beq.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8004eb0:	b963      	cbnz	r3, 8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	e097      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004eb6:	4b3e      	ldr	r3, [pc, #248]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004ebe:	f000 8092 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ec2:	a807      	add	r0, sp, #28
 8004ec4:	f7ff fcb6 	bl	8004834 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ec8:	9808      	ldr	r0, [sp, #32]
 8004eca:	e08c      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ecc:	4b38      	ldr	r3, [pc, #224]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004ed4:	f000 8087 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ed8:	a804      	add	r0, sp, #16
 8004eda:	f7ff faaf 	bl	800443c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004ede:	9806      	ldr	r0, [sp, #24]
 8004ee0:	e081      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004ee2:	4b33      	ldr	r3, [pc, #204]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8004eea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004eee:	d02f      	beq.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8004ef0:	d815      	bhi.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8004ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ef6:	d021      	beq.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8004ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004efc:	d109      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004efe:	4b2c      	ldr	r3, [pc, #176]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004f06:	d06e      	beq.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f08:	a801      	add	r0, sp, #4
 8004f0a:	f7ff fb95 	bl	8004638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f0e:	9802      	ldr	r0, [sp, #8]
 8004f10:	e069      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      switch (srcclk)
 8004f12:	b913      	cbnz	r3, 8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004f14:	f7ff fa80 	bl	8004418 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 8004f18:	e065      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      switch (srcclk)
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	e063      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f22:	d020      	beq.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x536>
 8004f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f28:	d106      	bne.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f2a:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004f32:	d058      	beq.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          frequency = HSE_VALUE;
 8004f34:	4820      	ldr	r0, [pc, #128]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004f36:	e056      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      switch (srcclk)
 8004f38:	2000      	movs	r0, #0
 8004f3a:	e054      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f3c:	4b1c      	ldr	r3, [pc, #112]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004f3e:	6818      	ldr	r0, [r3, #0]
 8004f40:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004f44:	d04f      	beq.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f46:	a804      	add	r0, sp, #16
 8004f48:	f7ff fa78 	bl	800443c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f4c:	9805      	ldr	r0, [sp, #20]
 8004f4e:	e04a      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f50:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	f010 0004 	ands.w	r0, r0, #4
 8004f58:	d045      	beq.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004f60:	4814      	ldr	r0, [pc, #80]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8004f62:	40d8      	lsrs	r0, r3
 8004f64:	e03f      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004f66:	4b12      	ldr	r3, [pc, #72]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8004f6e:	d03a      	beq.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          frequency = CSI_VALUE;
 8004f70:	4812      	ldr	r0, [pc, #72]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f72:	e038      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8004f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f80:	d00c      	beq.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8004f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f86:	d01b      	beq.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8004f88:	b10b      	cbz	r3, 8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
 8004f8a:	2000      	movs	r0, #0
  return frequency;
 8004f8c:	e02b      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f8e:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004f96:	d026      	beq.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          frequency = HSE_VALUE;
 8004f98:	4807      	ldr	r0, [pc, #28]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004f9a:	e024      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f9c:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004fa4:	d01f      	beq.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fa6:	a807      	add	r0, sp, #28
 8004fa8:	f7ff fc44 	bl	8004834 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fac:	9808      	ldr	r0, [sp, #32]
 8004fae:	e01a      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8004fb0:	58024400 	.word	0x58024400
 8004fb4:	03d09000 	.word	0x03d09000
 8004fb8:	017d7840 	.word	0x017d7840
 8004fbc:	003d0900 	.word	0x003d0900
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fc0:	4b1c      	ldr	r3, [pc, #112]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004fc8:	d00d      	beq.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fca:	a804      	add	r0, sp, #16
 8004fcc:	f7ff fa36 	bl	800443c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fd0:	9805      	ldr	r0, [sp, #20]
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
          frequency = 0;
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	e006      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = CSI_VALUE;
 8004fd8:	4817      	ldr	r0, [pc, #92]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8004fda:	e004      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = 0;
 8004fdc:	2000      	movs	r0, #0
 8004fde:	e002      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = HSE_VALUE;
 8004fe0:	4816      	ldr	r0, [pc, #88]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      switch (saiclocksource)
 8004fe4:	4816      	ldr	r0, [pc, #88]	; (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
}
 8004fe6:	b00b      	add	sp, #44	; 0x2c
 8004fe8:	f85d fb04 	ldr.w	pc, [sp], #4
            frequency = CSI_VALUE;
 8004fec:	4812      	ldr	r0, [pc, #72]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8004fee:	e7fa      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = 0;
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e7f8      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = HSE_VALUE;
 8004ff4:	4811      	ldr	r0, [pc, #68]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8004ff6:	e7f6      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      switch (saiclocksource)
 8004ff8:	4811      	ldr	r0, [pc, #68]	; (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8004ffa:	e7f4      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = CSI_VALUE;
 8004ffc:	480e      	ldr	r0, [pc, #56]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8004ffe:	e7f2      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = 0;
 8005000:	2000      	movs	r0, #0
 8005002:	e7f0      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = HSE_VALUE;
 8005004:	480d      	ldr	r0, [pc, #52]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8005006:	e7ee      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      switch (saiclocksource)
 8005008:	480d      	ldr	r0, [pc, #52]	; (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800500a:	e7ec      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = CSI_VALUE;
 800500c:	480a      	ldr	r0, [pc, #40]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800500e:	e7ea      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = 0;
 8005010:	2000      	movs	r0, #0
 8005012:	e7e8      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = HSE_VALUE;
 8005014:	4809      	ldr	r0, [pc, #36]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8005016:	e7e6      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
      switch (srcclk)
 8005018:	4809      	ldr	r0, [pc, #36]	; (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800501a:	e7e4      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = CSI_VALUE;
 800501c:	4806      	ldr	r0, [pc, #24]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800501e:	e7e2      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = 0;
 8005020:	2000      	movs	r0, #0
 8005022:	e7e0      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = HSE_VALUE;
 8005024:	4805      	ldr	r0, [pc, #20]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8005026:	e7de      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = CSI_VALUE;
 8005028:	4803      	ldr	r0, [pc, #12]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800502a:	e7dc      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = 0;
 800502c:	2000      	movs	r0, #0
 800502e:	e7da      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
            frequency = HSE_VALUE;
 8005030:	4802      	ldr	r0, [pc, #8]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8005032:	e7d8      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8005034:	58024400 	.word	0x58024400
 8005038:	003d0900 	.word	0x003d0900
 800503c:	017d7840 	.word	0x017d7840
 8005040:	00bb8000 	.word	0x00bb8000

08005044 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005044:	2800      	cmp	r0, #0
 8005046:	d036      	beq.n	80050b6 <HAL_RNG_Init+0x72>
{
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800504c:	7a43      	ldrb	r3, [r0, #9]
 800504e:	b1b3      	cbz	r3, 800507e <HAL_RNG_Init+0x3a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005050:	2302      	movs	r3, #2
 8005052:	7263      	strb	r3, [r4, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005054:	6822      	ldr	r2, [r4, #0]
 8005056:	6813      	ldr	r3, [r2, #0]
 8005058:	f023 0320 	bic.w	r3, r3, #32
 800505c:	6861      	ldr	r1, [r4, #4]
 800505e:	430b      	orrs	r3, r1
 8005060:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005062:	6822      	ldr	r2, [r4, #0]
 8005064:	6813      	ldr	r3, [r2, #0]
 8005066:	f043 0304 	orr.w	r3, r3, #4
 800506a:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005074:	d007      	beq.n	8005086 <HAL_RNG_Init+0x42>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005076:	2304      	movs	r3, #4
 8005078:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 800507a:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800507c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800507e:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8005080:	f004 fa7e 	bl	8009580 <HAL_RNG_MspInit>
 8005084:	e7e4      	b.n	8005050 <HAL_RNG_Init+0xc>
  tickstart = HAL_GetTick();
 8005086:	f7fb f989 	bl	800039c <HAL_GetTick>
 800508a:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f013 0f04 	tst.w	r3, #4
 8005094:	d00a      	beq.n	80050ac <HAL_RNG_Init+0x68>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005096:	f7fb f981 	bl	800039c <HAL_GetTick>
 800509a:	1b40      	subs	r0, r0, r5
 800509c:	2802      	cmp	r0, #2
 800509e:	d9f5      	bls.n	800508c <HAL_RNG_Init+0x48>
      hrng->State = HAL_RNG_STATE_ERROR;
 80050a0:	2304      	movs	r3, #4
 80050a2:	7263      	strb	r3, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80050a4:	2302      	movs	r3, #2
 80050a6:	60e3      	str	r3, [r4, #12]
      return HAL_ERROR;
 80050a8:	2001      	movs	r0, #1
 80050aa:	e7e7      	b.n	800507c <HAL_RNG_Init+0x38>
  hrng->State = HAL_RNG_STATE_READY;
 80050ac:	2301      	movs	r3, #1
 80050ae:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80050b0:	2000      	movs	r0, #0
 80050b2:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 80050b4:	e7e2      	b.n	800507c <HAL_RNG_Init+0x38>
    return HAL_ERROR;
 80050b6:	2001      	movs	r0, #1
}
 80050b8:	4770      	bx	lr

080050ba <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80050ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 80050bc:	7a03      	ldrb	r3, [r0, #8]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d02b      	beq.n	800511a <HAL_RNG_GenerateRandomNumber+0x60>
 80050c2:	4604      	mov	r4, r0
 80050c4:	460e      	mov	r6, r1
 80050c6:	2301      	movs	r3, #1
 80050c8:	7203      	strb	r3, [r0, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80050ca:	7a45      	ldrb	r5, [r0, #9]
 80050cc:	b2ed      	uxtb	r5, r5
 80050ce:	429d      	cmp	r5, r3
 80050d0:	d006      	beq.n	80050e0 <HAL_RNG_GenerateRandomNumber+0x26>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80050d2:	2304      	movs	r3, #4
 80050d4:	60c3      	str	r3, [r0, #12]
    status = HAL_ERROR;
 80050d6:	2501      	movs	r5, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80050d8:	2300      	movs	r3, #0
 80050da:	7223      	strb	r3, [r4, #8]

  return status;
}
 80050dc:	4628      	mov	r0, r5
 80050de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 80050e0:	2302      	movs	r3, #2
 80050e2:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 80050e4:	f7fb f95a 	bl	800039c <HAL_GetTick>
 80050e8:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	f012 0f01 	tst.w	r2, #1
 80050f2:	d10b      	bne.n	800510c <HAL_RNG_GenerateRandomNumber+0x52>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80050f4:	f7fb f952 	bl	800039c <HAL_GetTick>
 80050f8:	1bc0      	subs	r0, r0, r7
 80050fa:	2802      	cmp	r0, #2
 80050fc:	d9f5      	bls.n	80050ea <HAL_RNG_GenerateRandomNumber+0x30>
        hrng->State = HAL_RNG_STATE_READY;
 80050fe:	2301      	movs	r3, #1
 8005100:	7263      	strb	r3, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005102:	2302      	movs	r3, #2
 8005104:	60e3      	str	r3, [r4, #12]
        __HAL_UNLOCK(hrng);
 8005106:	2300      	movs	r3, #0
 8005108:	7223      	strb	r3, [r4, #8]
        return HAL_ERROR;
 800510a:	e7e7      	b.n	80050dc <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8005110:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8005112:	2301      	movs	r3, #1
 8005114:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
 8005116:	2500      	movs	r5, #0
 8005118:	e7de      	b.n	80050d8 <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
 800511a:	2502      	movs	r5, #2
 800511c:	e7de      	b.n	80050dc <HAL_RNG_GenerateRandomNumber+0x22>

0800511e <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800511e:	b430      	push	{r4, r5}
 8005120:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005122:	2000      	movs	r0, #0
 8005124:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005126:	64e0      	str	r0, [r4, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005128:	6865      	ldr	r5, [r4, #4]
 800512a:	2d02      	cmp	r5, #2
 800512c:	bf14      	ite	ne
 800512e:	2000      	movne	r0, #0
 8005130:	2001      	moveq	r0, #1
 8005132:	2d00      	cmp	r5, #0
 8005134:	bf08      	it	eq
 8005136:	2001      	moveq	r0, #1
 8005138:	b1c0      	cbz	r0, 800516c <SAI_InitI2S+0x4e>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800513a:	2000      	movs	r0, #0
 800513c:	6520      	str	r0, [r4, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800513e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005142:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005144:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005148:	6760      	str	r0, [r4, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800514a:	2000      	movs	r0, #0
 800514c:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800514e:	6723      	str	r3, [r4, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005150:	f013 0f01 	tst.w	r3, #1
 8005154:	d14d      	bne.n	80051f2 <SAI_InitI2S+0xd4>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 8005156:	b961      	cbnz	r1, 8005172 <SAI_InitI2S+0x54>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005158:	6620      	str	r0, [r4, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800515a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800515e:	6660      	str	r0, [r4, #100]	; 0x64
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 8005160:	2a03      	cmp	r2, #3
 8005162:	d83a      	bhi.n	80051da <SAI_InitI2S+0xbc>
 8005164:	e8df f002 	tbb	[pc, r2]
 8005168:	2e23190b 	.word	0x2e23190b
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800516c:	2001      	movs	r0, #1
 800516e:	6520      	str	r0, [r4, #80]	; 0x50
 8005170:	e7e5      	b.n	800513e <SAI_InitI2S+0x20>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005172:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005176:	6620      	str	r0, [r4, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005178:	2000      	movs	r0, #0
 800517a:	6660      	str	r0, [r4, #100]	; 0x64
 800517c:	e7f0      	b.n	8005160 <SAI_InitI2S+0x42>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800517e:	2080      	movs	r0, #128	; 0x80
 8005180:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	0158      	lsls	r0, r3, #5
 8005186:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	65a3      	str	r3, [r4, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800518c:	2340      	movs	r3, #64	; 0x40
 800518e:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005190:	2000      	movs	r0, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005192:	2902      	cmp	r1, #2
 8005194:	d023      	beq.n	80051de <SAI_InitI2S+0xc0>
    {
      hsai->SlotInit.FirstBitOffset = 8;
    }
  }
  return status;
}
 8005196:	bc30      	pop	{r4, r5}
 8005198:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800519a:	2080      	movs	r0, #128	; 0x80
 800519c:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	019d      	lsls	r5, r3, #6
 80051a2:	6565      	str	r5, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80051a4:	015b      	lsls	r3, r3, #5
 80051a6:	65a3      	str	r3, [r4, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051a8:	66e0      	str	r0, [r4, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80051aa:	2000      	movs	r0, #0
      break;
 80051ac:	e7f1      	b.n	8005192 <SAI_InitI2S+0x74>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80051ae:	20c0      	movs	r0, #192	; 0xc0
 80051b0:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	0198      	lsls	r0, r3, #6
 80051b6:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80051b8:	015b      	lsls	r3, r3, #5
 80051ba:	65a3      	str	r3, [r4, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051bc:	2380      	movs	r3, #128	; 0x80
 80051be:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80051c0:	2000      	movs	r0, #0
      break;
 80051c2:	e7e6      	b.n	8005192 <SAI_InitI2S+0x74>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80051c4:	20e0      	movs	r0, #224	; 0xe0
 80051c6:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	0198      	lsls	r0, r3, #6
 80051cc:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80051ce:	015b      	lsls	r3, r3, #5
 80051d0:	65a3      	str	r3, [r4, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051d2:	2380      	movs	r3, #128	; 0x80
 80051d4:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80051d6:	2000      	movs	r0, #0
      break;
 80051d8:	e7db      	b.n	8005192 <SAI_InitI2S+0x74>
  HAL_StatusTypeDef status = HAL_OK;
 80051da:	2001      	movs	r0, #1
 80051dc:	e7d9      	b.n	8005192 <SAI_InitI2S+0x74>
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80051de:	2a01      	cmp	r2, #1
 80051e0:	d004      	beq.n	80051ec <SAI_InitI2S+0xce>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80051e2:	2a02      	cmp	r2, #2
 80051e4:	d1d7      	bne.n	8005196 <SAI_InitI2S+0x78>
      hsai->SlotInit.FirstBitOffset = 8;
 80051e6:	2308      	movs	r3, #8
 80051e8:	66a3      	str	r3, [r4, #104]	; 0x68
 80051ea:	e7d4      	b.n	8005196 <SAI_InitI2S+0x78>
      hsai->SlotInit.FirstBitOffset = 16;
 80051ec:	2310      	movs	r3, #16
 80051ee:	66a3      	str	r3, [r4, #104]	; 0x68
 80051f0:	e7f7      	b.n	80051e2 <SAI_InitI2S+0xc4>
    return HAL_ERROR;
 80051f2:	2001      	movs	r0, #1
 80051f4:	e7cf      	b.n	8005196 <SAI_InitI2S+0x78>

080051f6 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80051f6:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80051f8:	2400      	movs	r4, #0
 80051fa:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80051fc:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80051fe:	6845      	ldr	r5, [r0, #4]
 8005200:	2d02      	cmp	r5, #2
 8005202:	bf14      	ite	ne
 8005204:	2400      	movne	r4, #0
 8005206:	2401      	moveq	r4, #1
 8005208:	2d00      	cmp	r5, #0
 800520a:	bf08      	it	eq
 800520c:	2401      	moveq	r4, #1
 800520e:	b1c4      	cbz	r4, 8005242 <SAI_InitPCM+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005210:	2401      	movs	r4, #1
 8005212:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005214:	2400      	movs	r4, #0
 8005216:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005218:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800521c:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800521e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8005222:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8005224:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8005226:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005228:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800522c:	6744      	str	r4, [r0, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800522e:	2904      	cmp	r1, #4
 8005230:	d00a      	beq.n	8005248 <SAI_InitPCM+0x52>
      hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8005232:	210d      	movs	r1, #13
 8005234:	6581      	str	r1, [r0, #88]	; 0x58
  }

  switch (datasize)
 8005236:	2a03      	cmp	r2, #3
 8005238:	d829      	bhi.n	800528e <SAI_InitPCM+0x98>
 800523a:	e8df f002 	tbb	[pc, r2]
 800523e:	1108      	.short	0x1108
 8005240:	2018      	.short	0x2018
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005242:	2400      	movs	r4, #0
 8005244:	6504      	str	r4, [r0, #80]	; 0x50
 8005246:	e7e5      	b.n	8005214 <SAI_InitPCM+0x1e>
      hsai->FrameInit.ActiveFrameLength = 1;
 8005248:	2101      	movs	r1, #1
 800524a:	6581      	str	r1, [r0, #88]	; 0x58
 800524c:	e7f3      	b.n	8005236 <SAI_InitPCM+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800524e:	2280      	movs	r2, #128	; 0x80
 8005250:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005256:	2340      	movs	r3, #64	; 0x40
 8005258:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800525a:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 800525c:	bc30      	pop	{r4, r5}
 800525e:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005260:	2280      	movs	r2, #128	; 0x80
 8005262:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005264:	015b      	lsls	r3, r3, #5
 8005266:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005268:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800526a:	2000      	movs	r0, #0
      break;
 800526c:	e7f6      	b.n	800525c <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800526e:	22c0      	movs	r2, #192	; 0xc0
 8005270:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005272:	015b      	lsls	r3, r3, #5
 8005274:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800527a:	2000      	movs	r0, #0
      break;
 800527c:	e7ee      	b.n	800525c <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800527e:	22e0      	movs	r2, #224	; 0xe0
 8005280:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005282:	015b      	lsls	r3, r3, #5
 8005284:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005286:	2380      	movs	r3, #128	; 0x80
 8005288:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800528a:	2000      	movs	r0, #0
      break;
 800528c:	e7e6      	b.n	800525c <SAI_InitPCM+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 800528e:	2001      	movs	r0, #1
 8005290:	e7e4      	b.n	800525c <SAI_InitPCM+0x66>

08005292 <SAI_InterruptFlag>:
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 8005292:	2901      	cmp	r1, #1
 8005294:	d00a      	beq.n	80052ac <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005296:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005298:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800529a:	2a08      	cmp	r2, #8
 800529c:	d008      	beq.n	80052b0 <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800529e:	6842      	ldr	r2, [r0, #4]
 80052a0:	3a02      	subs	r2, #2
 80052a2:	2a01      	cmp	r2, #1
 80052a4:	d90c      	bls.n	80052c0 <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80052a6:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 80052aa:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 80052ac:	2309      	movs	r3, #9
 80052ae:	e7f3      	b.n	8005298 <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80052b0:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80052b2:	2a01      	cmp	r2, #1
 80052b4:	bf18      	it	ne
 80052b6:	2a03      	cmpne	r2, #3
 80052b8:	d1f1      	bne.n	800529e <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 80052ba:	f043 0310 	orr.w	r3, r3, #16
 80052be:	e7ee      	b.n	800529e <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80052c0:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 80052c4:	4770      	bx	lr
	...

080052c8 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80052c8:	4b0e      	ldr	r3, [pc, #56]	; (8005304 <SAI_Disable+0x3c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a0e      	ldr	r2, [pc, #56]	; (8005308 <SAI_Disable+0x40>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	0b1b      	lsrs	r3, r3, #12
 80052d4:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80052d6:	6801      	ldr	r1, [r0, #0]
 80052d8:	680a      	ldr	r2, [r1, #0]
 80052da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052de:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80052e0:	b13b      	cbz	r3, 80052f2 <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 80052e2:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80052e4:	6802      	ldr	r2, [r0, #0]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80052ec:	d1f8      	bne.n	80052e0 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80052ee:	2000      	movs	r0, #0

  return status;
}
 80052f0:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80052f2:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80052f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052fa:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 80052fe:	2003      	movs	r0, #3
      break;
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	20000028 	.word	0x20000028
 8005308:	95cbec1b 	.word	0x95cbec1b

0800530c <HAL_SAI_Init>:
{
 800530c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 8005310:	2800      	cmp	r0, #0
 8005312:	f000 81df 	beq.w	80056d4 <HAL_SAI_Init+0x3c8>
 8005316:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8005318:	f7fb f85a 	bl	80003d0 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800531c:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
 8005320:	2d01      	cmp	r5, #1
 8005322:	d025      	beq.n	8005370 <HAL_SAI_Init+0x64>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	49b3      	ldr	r1, [pc, #716]	; (80055f4 <HAL_SAI_Init+0x2e8>)
 8005328:	4ab3      	ldr	r2, [pc, #716]	; (80055f8 <HAL_SAI_Init+0x2ec>)
 800532a:	4293      	cmp	r3, r2
 800532c:	bf18      	it	ne
 800532e:	428b      	cmpne	r3, r1
 8005330:	d02e      	beq.n	8005390 <HAL_SAI_Init+0x84>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005332:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800533a:	4293      	cmp	r3, r2
 800533c:	bf18      	it	ne
 800533e:	428b      	cmpne	r3, r1
 8005340:	d043      	beq.n	80053ca <HAL_SAI_Init+0xbe>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8005342:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005346:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800534a:	4293      	cmp	r3, r2
 800534c:	bf18      	it	ne
 800534e:	428b      	cmpne	r3, r1
 8005350:	d03d      	beq.n	80053ce <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8005352:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8005356:	f5a1 3186 	sub.w	r1, r1, #68608	; 0x10c00
 800535a:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800535e:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 8005362:	4293      	cmp	r3, r2
 8005364:	bf18      	it	ne
 8005366:	428b      	cmpne	r3, r1
 8005368:	f040 81b6 	bne.w	80056d8 <HAL_SAI_Init+0x3cc>
    SaiBaseAddress = SAI4;
 800536c:	4ea3      	ldr	r6, [pc, #652]	; (80055fc <HAL_SAI_Init+0x2f0>)
 800536e:	e010      	b.n	8005392 <HAL_SAI_Init+0x86>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	49a0      	ldr	r1, [pc, #640]	; (80055f4 <HAL_SAI_Init+0x2e8>)
 8005374:	4aa2      	ldr	r2, [pc, #648]	; (8005600 <HAL_SAI_Init+0x2f4>)
 8005376:	428b      	cmp	r3, r1
 8005378:	bf18      	it	ne
 800537a:	4293      	cmpne	r3, r2
 800537c:	f040 811e 	bne.w	80055bc <HAL_SAI_Init+0x2b0>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005380:	6863      	ldr	r3, [r4, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005382:	2b01      	cmp	r3, #1
 8005384:	f040 811a 	bne.w	80055bc <HAL_SAI_Init+0x2b0>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8005388:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0ca      	beq.n	8005324 <HAL_SAI_Init+0x18>
 800538e:	e115      	b.n	80055bc <HAL_SAI_Init+0x2b0>
    SaiBaseAddress = SAI1;
 8005390:	4e9c      	ldr	r6, [pc, #624]	; (8005604 <HAL_SAI_Init+0x2f8>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8005392:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8005396:	b1e3      	cbz	r3, 80053d2 <HAL_SAI_Init+0xc6>
  if(SAI_Disable(hsai) != HAL_OK)
 8005398:	4620      	mov	r0, r4
 800539a:	f7ff ff95 	bl	80052c8 <SAI_Disable>
 800539e:	4605      	mov	r5, r0
 80053a0:	2800      	cmp	r0, #0
 80053a2:	f040 819b 	bne.w	80056dc <HAL_SAI_Init+0x3d0>
  hsai->State = HAL_SAI_STATE_BUSY;
 80053a6:	2302      	movs	r3, #2
 80053a8:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 80053ac:	68e3      	ldr	r3, [r4, #12]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d015      	beq.n	80053de <HAL_SAI_Init+0xd2>
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d115      	bne.n	80053e2 <HAL_SAI_Init+0xd6>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80053b6:	2220      	movs	r2, #32
  switch (hsai->Init.Synchro)
 80053b8:	68a3      	ldr	r3, [r4, #8]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d812      	bhi.n	80053e6 <HAL_SAI_Init+0xda>
 80053c0:	e8df f003 	tbb	[pc, r3]
 80053c4:	1b161325 	.word	0x1b161325
 80053c8:	20          	.byte	0x20
 80053c9:	00          	.byte	0x00
    SaiBaseAddress = SAI2;
 80053ca:	4e8f      	ldr	r6, [pc, #572]	; (8005608 <HAL_SAI_Init+0x2fc>)
 80053cc:	e7e1      	b.n	8005392 <HAL_SAI_Init+0x86>
    SaiBaseAddress = SAI3;
 80053ce:	4e8f      	ldr	r6, [pc, #572]	; (800560c <HAL_SAI_Init+0x300>)
 80053d0:	e7df      	b.n	8005392 <HAL_SAI_Init+0x86>
    hsai->Lock = HAL_UNLOCKED;
 80053d2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 80053d6:	4620      	mov	r0, r4
 80053d8:	f004 f938 	bl	800964c <HAL_SAI_MspInit>
 80053dc:	e7dc      	b.n	8005398 <HAL_SAI_Init+0x8c>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80053de:	2210      	movs	r2, #16
 80053e0:	e7ea      	b.n	80053b8 <HAL_SAI_Init+0xac>
  switch (hsai->Init.SynchroExt)
 80053e2:	2200      	movs	r2, #0
 80053e4:	e7e8      	b.n	80053b8 <HAL_SAI_Init+0xac>
  switch (hsai->Init.Synchro)
 80053e6:	2700      	movs	r7, #0
 80053e8:	e013      	b.n	8005412 <HAL_SAI_Init+0x106>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80053ea:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80053ee:	e010      	b.n	8005412 <HAL_SAI_Init+0x106>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80053f0:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80053f4:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80053f8:	e00b      	b.n	8005412 <HAL_SAI_Init+0x106>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80053fa:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80053fe:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005402:	e006      	b.n	8005412 <HAL_SAI_Init+0x106>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8005404:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005408:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800540c:	e001      	b.n	8005412 <HAL_SAI_Init+0x106>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800540e:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 8005412:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005414:	6a23      	ldr	r3, [r4, #32]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d047      	beq.n	80054aa <HAL_SAI_Init+0x19e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	4975      	ldr	r1, [pc, #468]	; (80055f4 <HAL_SAI_Init+0x2e8>)
 800541e:	4a76      	ldr	r2, [pc, #472]	; (80055f8 <HAL_SAI_Init+0x2ec>)
 8005420:	4293      	cmp	r3, r2
 8005422:	bf18      	it	ne
 8005424:	428b      	cmpne	r3, r1
 8005426:	f000 80cc 	beq.w	80055c2 <HAL_SAI_Init+0x2b6>
    uint32_t freq = 0;
 800542a:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	4978      	ldr	r1, [pc, #480]	; (8005610 <HAL_SAI_Init+0x304>)
 8005430:	4a78      	ldr	r2, [pc, #480]	; (8005614 <HAL_SAI_Init+0x308>)
 8005432:	4293      	cmp	r3, r2
 8005434:	bf18      	it	ne
 8005436:	428b      	cmpne	r3, r1
 8005438:	f000 80c8 	beq.w	80055cc <HAL_SAI_Init+0x2c0>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	4976      	ldr	r1, [pc, #472]	; (8005618 <HAL_SAI_Init+0x30c>)
 8005440:	4a76      	ldr	r2, [pc, #472]	; (800561c <HAL_SAI_Init+0x310>)
 8005442:	4293      	cmp	r3, r2
 8005444:	bf18      	it	ne
 8005446:	428b      	cmpne	r3, r1
 8005448:	f000 80c5 	beq.w	80055d6 <HAL_SAI_Init+0x2ca>
    if (hsai->Instance == SAI4_Block_A)
 800544c:	6822      	ldr	r2, [r4, #0]
 800544e:	4b6c      	ldr	r3, [pc, #432]	; (8005600 <HAL_SAI_Init+0x2f4>)
 8005450:	429a      	cmp	r2, r3
 8005452:	f000 80c5 	beq.w	80055e0 <HAL_SAI_Init+0x2d4>
    if (hsai->Instance == SAI4_Block_B)
 8005456:	6822      	ldr	r2, [r4, #0]
 8005458:	4b71      	ldr	r3, [pc, #452]	; (8005620 <HAL_SAI_Init+0x314>)
 800545a:	429a      	cmp	r2, r3
 800545c:	f000 80c5 	beq.w	80055ea <HAL_SAI_Init+0x2de>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8005460:	69a3      	ldr	r3, [r4, #24]
 8005462:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005466:	f000 80e5 	beq.w	8005634 <HAL_SAI_Init+0x328>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800546a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800546c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005470:	f000 80f4 	beq.w	800565c <HAL_SAI_Init+0x350>
 8005474:	2301      	movs	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005476:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800547a:	0040      	lsls	r0, r0, #1
 800547c:	6a22      	ldr	r2, [r4, #32]
 800547e:	fb03 f302 	mul.w	r3, r3, r2
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8005488:	4b66      	ldr	r3, [pc, #408]	; (8005624 <HAL_SAI_Init+0x318>)
 800548a:	fba3 2300 	umull	r2, r3, r3, r0
 800548e:	08db      	lsrs	r3, r3, #3
 8005490:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
 8005492:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005496:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 800549a:	2808      	cmp	r0, #8
 800549c:	d901      	bls.n	80054a2 <HAL_SAI_Init+0x196>
      hsai->Init.Mckdiv += 1U;
 800549e:	3301      	adds	r3, #1
 80054a0:	6263      	str	r3, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80054a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	f000 80db 	beq.w	8005660 <HAL_SAI_Init+0x354>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80054aa:	6862      	ldr	r2, [r4, #4]
 80054ac:	2a02      	cmp	r2, #2
 80054ae:	bf14      	ite	ne
 80054b0:	2300      	movne	r3, #0
 80054b2:	2301      	moveq	r3, #1
 80054b4:	2a00      	cmp	r2, #0
 80054b6:	bf08      	it	eq
 80054b8:	2301      	moveq	r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 80d7 	beq.w	800566e <HAL_SAI_Init+0x362>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80054c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	f000 80d0 	beq.w	8005668 <HAL_SAI_Init+0x35c>
 80054c8:	f44f 7800 	mov.w	r8, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80054cc:	f7fa ff80 	bl	80003d0 <HAL_GetREVID>
 80054d0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80054d4:	f0c0 80d4 	bcc.w	8005680 <HAL_SAI_Init+0x374>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80054d8:	6822      	ldr	r2, [r4, #0]
 80054da:	6811      	ldr	r1, [r2, #0]
 80054dc:	4b52      	ldr	r3, [pc, #328]	; (8005628 <HAL_SAI_Init+0x31c>)
 80054de:	400b      	ands	r3, r1
 80054e0:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054e2:	6821      	ldr	r1, [r4, #0]
 80054e4:	680a      	ldr	r2, [r1, #0]
 80054e6:	6863      	ldr	r3, [r4, #4]
 80054e8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80054ea:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80054ec:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054ee:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80054f0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80054f2:	4303      	orrs	r3, r0
 80054f4:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 80054f8:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80054fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80054fc:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80054fe:	6960      	ldr	r0, [r4, #20]
 8005500:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005502:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005504:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005506:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005508:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800550c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800550e:	4303      	orrs	r3, r0
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005510:	6920      	ldr	r0, [r4, #16]
 8005512:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005514:	4313      	orrs	r3, r2
 8005516:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005518:	6822      	ldr	r2, [r4, #0]
 800551a:	6851      	ldr	r1, [r2, #4]
 800551c:	4b43      	ldr	r3, [pc, #268]	; (800562c <HAL_SAI_Init+0x320>)
 800551e:	400b      	ands	r3, r1
 8005520:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005522:	6821      	ldr	r1, [r4, #0]
 8005524:	684a      	ldr	r2, [r1, #4]
 8005526:	69e3      	ldr	r3, [r4, #28]
 8005528:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800552a:	4303      	orrs	r3, r0
 800552c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800552e:	4303      	orrs	r3, r0
 8005530:	4313      	orrs	r3, r2
 8005532:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005534:	6822      	ldr	r2, [r4, #0]
 8005536:	6891      	ldr	r1, [r2, #8]
 8005538:	4b3d      	ldr	r3, [pc, #244]	; (8005630 <HAL_SAI_Init+0x324>)
 800553a:	400b      	ands	r3, r1
 800553c:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800553e:	6820      	ldr	r0, [r4, #0]
 8005540:	6882      	ldr	r2, [r0, #8]
 8005542:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005544:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 8005546:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005548:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 800554a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800554c:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 800554e:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8005550:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005552:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005554:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 8005556:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800555a:	4313      	orrs	r3, r2
 800555c:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800555e:	6822      	ldr	r2, [r4, #0]
 8005560:	68d3      	ldr	r3, [r2, #12]
 8005562:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8005566:	f023 030f 	bic.w	r3, r3, #15
 800556a:	041b      	lsls	r3, r3, #16
 800556c:	0c1b      	lsrs	r3, r3, #16
 800556e:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005570:	6820      	ldr	r0, [r4, #0]
 8005572:	68c2      	ldr	r2, [r0, #12]
 8005574:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005576:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005578:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800557a:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800557c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005580:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005582:	3901      	subs	r1, #1
 8005584:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005588:	4313      	orrs	r3, r2
 800558a:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	4919      	ldr	r1, [pc, #100]	; (80055f4 <HAL_SAI_Init+0x2e8>)
 8005590:	4a1b      	ldr	r2, [pc, #108]	; (8005600 <HAL_SAI_Init+0x2f4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	bf18      	it	ne
 8005596:	428b      	cmpne	r3, r1
 8005598:	d108      	bne.n	80055ac <HAL_SAI_Init+0x2a0>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800559a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80055a2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	f000 8089 	beq.w	80056be <HAL_SAI_Init+0x3b2>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 80055b2:	2201      	movs	r2, #1
 80055b4:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 80055b8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 80055bc:	4628      	mov	r0, r5
 80055be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80055c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80055c6:	f7ff fa33 	bl	8004a30 <HAL_RCCEx_GetPeriphCLKFreq>
 80055ca:	e72f      	b.n	800542c <HAL_SAI_Init+0x120>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80055cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80055d0:	f7ff fa2e 	bl	8004a30 <HAL_RCCEx_GetPeriphCLKFreq>
 80055d4:	e732      	b.n	800543c <HAL_SAI_Init+0x130>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80055d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80055da:	f7ff fa29 	bl	8004a30 <HAL_RCCEx_GetPeriphCLKFreq>
 80055de:	e735      	b.n	800544c <HAL_SAI_Init+0x140>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80055e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80055e4:	f7ff fa24 	bl	8004a30 <HAL_RCCEx_GetPeriphCLKFreq>
 80055e8:	e735      	b.n	8005456 <HAL_SAI_Init+0x14a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80055ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80055ee:	f7ff fa1f 	bl	8004a30 <HAL_RCCEx_GetPeriphCLKFreq>
 80055f2:	e735      	b.n	8005460 <HAL_SAI_Init+0x154>
 80055f4:	40015804 	.word	0x40015804
 80055f8:	40015824 	.word	0x40015824
 80055fc:	58005400 	.word	0x58005400
 8005600:	58005404 	.word	0x58005404
 8005604:	40015800 	.word	0x40015800
 8005608:	40015c00 	.word	0x40015c00
 800560c:	40016000 	.word	0x40016000
 8005610:	40015c04 	.word	0x40015c04
 8005614:	40015c24 	.word	0x40015c24
 8005618:	40016004 	.word	0x40016004
 800561c:	40016024 	.word	0x40016024
 8005620:	58005424 	.word	0x58005424
 8005624:	cccccccd 	.word	0xcccccccd
 8005628:	f005c010 	.word	0xf005c010
 800562c:	ffff1ff0 	.word	0xffff1ff0
 8005630:	fff88000 	.word	0xfff88000
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005634:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005636:	2b04      	cmp	r3, #4
 8005638:	d00b      	beq.n	8005652 <HAL_SAI_Init+0x346>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800563a:	2b08      	cmp	r3, #8
 800563c:	d00b      	beq.n	8005656 <HAL_SAI_Init+0x34a>
        tmpframelength = hsai->FrameInit.FrameLength;
 800563e:	6d63      	ldr	r3, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8005640:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005644:	0040      	lsls	r0, r0, #1
 8005646:	6a22      	ldr	r2, [r4, #32]
 8005648:	fb03 f302 	mul.w	r3, r3, r2
 800564c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005650:	e71a      	b.n	8005488 <HAL_SAI_Init+0x17c>
        tmpframelength = 64U;
 8005652:	2340      	movs	r3, #64	; 0x40
 8005654:	e7f4      	b.n	8005640 <HAL_SAI_Init+0x334>
        tmpframelength = 256U;
 8005656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800565a:	e7f1      	b.n	8005640 <HAL_SAI_Init+0x334>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800565c:	2302      	movs	r3, #2
 800565e:	e70a      	b.n	8005476 <HAL_SAI_Init+0x16a>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005662:	085b      	lsrs	r3, r3, #1
 8005664:	6263      	str	r3, [r4, #36]	; 0x24
 8005666:	e720      	b.n	80054aa <HAL_SAI_Init+0x19e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005668:	f04f 0800 	mov.w	r8, #0
 800566c:	e72e      	b.n	80054cc <HAL_SAI_Init+0x1c0>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800566e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005670:	2b01      	cmp	r3, #1
 8005672:	d002      	beq.n	800567a <HAL_SAI_Init+0x36e>
 8005674:	f04f 0800 	mov.w	r8, #0
 8005678:	e728      	b.n	80054cc <HAL_SAI_Init+0x1c0>
 800567a:	f44f 7800 	mov.w	r8, #512	; 0x200
 800567e:	e725      	b.n	80054cc <HAL_SAI_Init+0x1c0>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005680:	6822      	ldr	r2, [r4, #0]
 8005682:	6811      	ldr	r1, [r2, #0]
 8005684:	4b16      	ldr	r3, [pc, #88]	; (80056e0 <HAL_SAI_Init+0x3d4>)
 8005686:	400b      	ands	r3, r1
 8005688:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800568a:	6821      	ldr	r1, [r4, #0]
 800568c:	680a      	ldr	r2, [r1, #0]
 800568e:	6863      	ldr	r3, [r4, #4]
 8005690:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005692:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005694:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005696:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005698:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800569a:	4303      	orrs	r3, r0
 800569c:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 80056a0:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80056a2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80056a4:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80056a6:	6967      	ldr	r7, [r4, #20]
 80056a8:	433b      	orrs	r3, r7
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80056aa:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80056ac:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80056ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80056b0:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling);
 80056b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80056b6:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80056b8:	4313      	orrs	r3, r2
 80056ba:	600b      	str	r3, [r1, #0]
 80056bc:	e72c      	b.n	8005518 <HAL_SAI_Init+0x20c>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80056be:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80056c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80056c2:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80056c4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80056c8:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80056ca:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	6473      	str	r3, [r6, #68]	; 0x44
 80056d2:	e76b      	b.n	80055ac <HAL_SAI_Init+0x2a0>
    return HAL_ERROR;
 80056d4:	2501      	movs	r5, #1
 80056d6:	e771      	b.n	80055bc <HAL_SAI_Init+0x2b0>
    return HAL_ERROR;
 80056d8:	2501      	movs	r5, #1
 80056da:	e76f      	b.n	80055bc <HAL_SAI_Init+0x2b0>
    return HAL_ERROR;
 80056dc:	2501      	movs	r5, #1
 80056de:	e76d      	b.n	80055bc <HAL_SAI_Init+0x2b0>
 80056e0:	f805c010 	.word	0xf805c010

080056e4 <HAL_SAI_InitProtocol>:
{
 80056e4:	b510      	push	{r4, lr}
 80056e6:	4604      	mov	r4, r0
  switch (protocol)
 80056e8:	2902      	cmp	r1, #2
 80056ea:	d906      	bls.n	80056fa <HAL_SAI_InitProtocol+0x16>
 80056ec:	1ec8      	subs	r0, r1, #3
 80056ee:	2801      	cmp	r0, #1
 80056f0:	d80b      	bhi.n	800570a <HAL_SAI_InitProtocol+0x26>
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7ff fd7f 	bl	80051f6 <SAI_InitPCM>
      break;
 80056f8:	e001      	b.n	80056fe <HAL_SAI_InitProtocol+0x1a>
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80056fa:	f7ff fd10 	bl	800511e <SAI_InitI2S>
  if (status == HAL_OK)
 80056fe:	b100      	cbz	r0, 8005702 <HAL_SAI_InitProtocol+0x1e>
}
 8005700:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
 8005702:	4620      	mov	r0, r4
 8005704:	f7ff fe02 	bl	800530c <HAL_SAI_Init>
 8005708:	e7fa      	b.n	8005700 <HAL_SAI_InitProtocol+0x1c>
  switch (protocol)
 800570a:	2001      	movs	r0, #1
 800570c:	e7f8      	b.n	8005700 <HAL_SAI_InitProtocol+0x1c>
	...

08005710 <HAL_SAI_Transmit_DMA>:
{
 8005710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005714:	4604      	mov	r4, r0
 8005716:	4688      	mov	r8, r1
 8005718:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800571a:	f7fa fe3f 	bl	800039c <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 800571e:	fab6 f386 	clz	r3, r6
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	f1b8 0f00 	cmp.w	r8, #0
 8005728:	bf08      	it	eq
 800572a:	2301      	moveq	r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d166      	bne.n	80057fe <HAL_SAI_Transmit_DMA+0xee>
 8005730:	4605      	mov	r5, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 8005732:	f894 7091 	ldrb.w	r7, [r4, #145]	; 0x91
 8005736:	b2ff      	uxtb	r7, r7
 8005738:	2f01      	cmp	r7, #1
 800573a:	d164      	bne.n	8005806 <HAL_SAI_Transmit_DMA+0xf6>
    __HAL_LOCK(hsai);
 800573c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8005740:	2b01      	cmp	r3, #1
 8005742:	d062      	beq.n	800580a <HAL_SAI_Transmit_DMA+0xfa>
 8005744:	2301      	movs	r3, #1
 8005746:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 800574a:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 800574e:	f8a4 607c 	strh.w	r6, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 8005752:	f8a4 607e 	strh.w	r6, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005756:	2300      	movs	r3, #0
 8005758:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800575c:	2212      	movs	r2, #18
 800575e:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005762:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005766:	492a      	ldr	r1, [pc, #168]	; (8005810 <HAL_SAI_Transmit_DMA+0x100>)
 8005768:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800576a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800576e:	4929      	ldr	r1, [pc, #164]	; (8005814 <HAL_SAI_Transmit_DMA+0x104>)
 8005770:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005772:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005776:	4928      	ldr	r1, [pc, #160]	; (8005818 <HAL_SAI_Transmit_DMA+0x108>)
 8005778:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800577a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800577e:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005780:	6822      	ldr	r2, [r4, #0]
 8005782:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8005786:	321c      	adds	r2, #28
 8005788:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800578a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800578e:	f7fc f915 	bl	80019bc <HAL_DMA_Start_IT>
 8005792:	4606      	mov	r6, r0
 8005794:	bb10      	cbnz	r0, 80057dc <HAL_SAI_Transmit_DMA+0xcc>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005796:	2100      	movs	r1, #0
 8005798:	4620      	mov	r0, r4
 800579a:	f7ff fd7a 	bl	8005292 <SAI_InterruptFlag>
 800579e:	6822      	ldr	r2, [r4, #0]
 80057a0:	6913      	ldr	r3, [r2, #16]
 80057a2:	4303      	orrs	r3, r0
 80057a4:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	6813      	ldr	r3, [r2, #0]
 80057aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ae:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	695a      	ldr	r2, [r3, #20]
 80057b4:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 80057b8:	d114      	bne.n	80057e4 <HAL_SAI_Transmit_DMA+0xd4>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80057ba:	f7fa fdef 	bl	800039c <HAL_GetTick>
 80057be:	1b43      	subs	r3, r0, r5
 80057c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057c4:	d9f4      	bls.n	80057b0 <HAL_SAI_Transmit_DMA+0xa0>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80057c6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80057ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ce:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
 80057d2:	2300      	movs	r3, #0
 80057d4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 80057d8:	2703      	movs	r7, #3
 80057da:	e011      	b.n	8005800 <HAL_SAI_Transmit_DMA+0xf0>
      __HAL_UNLOCK(hsai);
 80057dc:	2300      	movs	r3, #0
 80057de:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 80057e2:	e00d      	b.n	8005800 <HAL_SAI_Transmit_DMA+0xf0>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80057ea:	d103      	bne.n	80057f4 <HAL_SAI_Transmit_DMA+0xe4>
      __HAL_SAI_ENABLE(hsai);
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80057f2:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80057f4:	2300      	movs	r3, #0
 80057f6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 80057fa:	4637      	mov	r7, r6
 80057fc:	e000      	b.n	8005800 <HAL_SAI_Transmit_DMA+0xf0>
    return  HAL_ERROR;
 80057fe:	2701      	movs	r7, #1
}
 8005800:	4638      	mov	r0, r7
 8005802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005806:	2702      	movs	r7, #2
 8005808:	e7fa      	b.n	8005800 <HAL_SAI_Transmit_DMA+0xf0>
    __HAL_LOCK(hsai);
 800580a:	2702      	movs	r7, #2
 800580c:	e7f8      	b.n	8005800 <HAL_SAI_Transmit_DMA+0xf0>
 800580e:	bf00      	nop
 8005810:	0800592b 	.word	0x0800592b
 8005814:	080058ef 	.word	0x080058ef
 8005818:	0800597b 	.word	0x0800597b

0800581c <HAL_SAI_Receive_DMA>:
{
 800581c:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0U))
 800581e:	4613      	mov	r3, r2
 8005820:	fab2 f282 	clz	r2, r2
 8005824:	0952      	lsrs	r2, r2, #5
 8005826:	2900      	cmp	r1, #0
 8005828:	bf08      	it	eq
 800582a:	2201      	moveq	r2, #1
 800582c:	2a00      	cmp	r2, #0
 800582e:	d150      	bne.n	80058d2 <HAL_SAI_Receive_DMA+0xb6>
 8005830:	4604      	mov	r4, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 8005832:	f894 5091 	ldrb.w	r5, [r4, #145]	; 0x91
 8005836:	b2ed      	uxtb	r5, r5
 8005838:	2d01      	cmp	r5, #1
 800583a:	d14d      	bne.n	80058d8 <HAL_SAI_Receive_DMA+0xbc>
    __HAL_LOCK(hsai);
 800583c:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 8005840:	2a01      	cmp	r2, #1
 8005842:	d04b      	beq.n	80058dc <HAL_SAI_Receive_DMA+0xc0>
 8005844:	2201      	movs	r2, #1
 8005846:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 800584a:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 800584c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 8005850:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005854:	2300      	movs	r3, #0
 8005856:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800585a:	2222      	movs	r2, #34	; 0x22
 800585c:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005860:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005864:	491e      	ldr	r1, [pc, #120]	; (80058e0 <HAL_SAI_Receive_DMA+0xc4>)
 8005866:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005868:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800586c:	491d      	ldr	r1, [pc, #116]	; (80058e4 <HAL_SAI_Receive_DMA+0xc8>)
 800586e:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005870:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005874:	491c      	ldr	r1, [pc, #112]	; (80058e8 <HAL_SAI_Receive_DMA+0xcc>)
 8005876:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8005878:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800587c:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800587e:	6821      	ldr	r1, [r4, #0]
 8005880:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8005884:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005886:	311c      	adds	r1, #28
 8005888:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800588c:	f7fc f896 	bl	80019bc <HAL_DMA_Start_IT>
 8005890:	4606      	mov	r6, r0
 8005892:	b118      	cbz	r0, 800589c <HAL_SAI_Receive_DMA+0x80>
      __HAL_UNLOCK(hsai);
 8005894:	2300      	movs	r3, #0
 8005896:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 800589a:	e01b      	b.n	80058d4 <HAL_SAI_Receive_DMA+0xb8>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800589c:	2100      	movs	r1, #0
 800589e:	4620      	mov	r0, r4
 80058a0:	f7ff fcf7 	bl	8005292 <SAI_InterruptFlag>
 80058a4:	6822      	ldr	r2, [r4, #0]
 80058a6:	6913      	ldr	r3, [r2, #16]
 80058a8:	4303      	orrs	r3, r0
 80058aa:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80058ac:	6822      	ldr	r2, [r4, #0]
 80058ae:	6813      	ldr	r3, [r2, #0]
 80058b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b4:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80058be:	d103      	bne.n	80058c8 <HAL_SAI_Receive_DMA+0xac>
      __HAL_SAI_ENABLE(hsai);
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80058c6:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80058c8:	2300      	movs	r3, #0
 80058ca:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 80058ce:	4635      	mov	r5, r6
 80058d0:	e000      	b.n	80058d4 <HAL_SAI_Receive_DMA+0xb8>
    return  HAL_ERROR;
 80058d2:	2501      	movs	r5, #1
}
 80058d4:	4628      	mov	r0, r5
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80058d8:	2502      	movs	r5, #2
 80058da:	e7fb      	b.n	80058d4 <HAL_SAI_Receive_DMA+0xb8>
    __HAL_LOCK(hsai);
 80058dc:	2502      	movs	r5, #2
 80058de:	e7f9      	b.n	80058d4 <HAL_SAI_Receive_DMA+0xb8>
 80058e0:	0800596f 	.word	0x0800596f
 80058e4:	08005935 	.word	0x08005935
 80058e8:	0800597b 	.word	0x0800597b

080058ec <HAL_SAI_TxCpltCallback>:
}
 80058ec:	4770      	bx	lr

080058ee <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80058ee:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058f0:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80058f2:	69c3      	ldr	r3, [r0, #28]
 80058f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f8:	d012      	beq.n	8005920 <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 80058fa:	2100      	movs	r1, #0
 80058fc:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005900:	6822      	ldr	r2, [r4, #0]
 8005902:	6813      	ldr	r3, [r2, #0]
 8005904:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005908:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800590a:	4620      	mov	r0, r4
 800590c:	f7ff fcc1 	bl	8005292 <SAI_InterruptFlag>
 8005910:	6822      	ldr	r2, [r4, #0]
 8005912:	6913      	ldr	r3, [r2, #16]
 8005914:	ea23 0300 	bic.w	r3, r3, r0
 8005918:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800591a:	2301      	movs	r3, #1
 800591c:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005920:	4620      	mov	r0, r4
 8005922:	f7ff ffe3 	bl	80058ec <HAL_SAI_TxCpltCallback>
#endif
}
 8005926:	bd10      	pop	{r4, pc}

08005928 <HAL_SAI_TxHalfCpltCallback>:
}
 8005928:	4770      	bx	lr

0800592a <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800592a:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800592c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800592e:	f7ff fffb 	bl	8005928 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005932:	bd08      	pop	{r3, pc}

08005934 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005934:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005936:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005938:	69c3      	ldr	r3, [r0, #28]
 800593a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593e:	d012      	beq.n	8005966 <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005940:	6822      	ldr	r2, [r4, #0]
 8005942:	6813      	ldr	r3, [r2, #0]
 8005944:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005948:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 800594a:	2100      	movs	r1, #0
 800594c:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005950:	4620      	mov	r0, r4
 8005952:	f7ff fc9e 	bl	8005292 <SAI_InterruptFlag>
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	6913      	ldr	r3, [r2, #16]
 800595a:	ea23 0300 	bic.w	r3, r3, r0
 800595e:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005960:	2301      	movs	r3, #1
 8005962:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005966:	4620      	mov	r0, r4
 8005968:	f003 fd34 	bl	80093d4 <HAL_SAI_RxCpltCallback>
#endif
}
 800596c:	bd10      	pop	{r4, pc}

0800596e <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800596e:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005970:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005972:	f003 fd81 	bl	8009478 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8005976:	bd08      	pop	{r3, pc}

08005978 <HAL_SAI_ErrorCallback>:
}
 8005978:	4770      	bx	lr

0800597a <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800597a:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800597c:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800597e:	f7fc fe3d 	bl	80025fc <HAL_DMA_GetError>
 8005982:	2802      	cmp	r0, #2
 8005984:	d100      	bne.n	8005988 <SAI_DMAError+0xe>
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
#endif
  }
}
 8005986:	bd10      	pop	{r4, pc}
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005988:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800598c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005990:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	6813      	ldr	r3, [r2, #0]
 8005998:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800599c:	6013      	str	r3, [r2, #0]
    (void) SAI_Disable(hsai);
 800599e:	4620      	mov	r0, r4
 80059a0:	f7ff fc92 	bl	80052c8 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7ff ffe1 	bl	8005978 <HAL_SAI_ErrorCallback>
}
 80059b6:	e7e6      	b.n	8005986 <SAI_DMAError+0xc>

080059b8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80059b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80059ba:	6a84      	ldr	r4, [r0, #40]	; 0x28

  if (hsd->RxXferSize >= 32U)
 80059bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80059be:	2b1f      	cmp	r3, #31
 80059c0:	d916      	bls.n	80059f0 <SD_Read_IT+0x38>
 80059c2:	4606      	mov	r6, r0
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80059c4:	2500      	movs	r5, #0
 80059c6:	e00d      	b.n	80059e4 <SD_Read_IT+0x2c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80059c8:	6830      	ldr	r0, [r6, #0]
 80059ca:	f001 fdeb 	bl	80075a4 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 80059ce:	7020      	strb	r0, [r4, #0]
      tmp++;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80059d0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80059d4:	7063      	strb	r3, [r4, #1]
      tmp++;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80059d6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80059da:	70a3      	strb	r3, [r4, #2]
      tmp++;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80059dc:	0e00      	lsrs	r0, r0, #24
 80059de:	70e0      	strb	r0, [r4, #3]
      tmp++;
 80059e0:	3404      	adds	r4, #4
    for (count = 0U; count < 8U; count++)
 80059e2:	3501      	adds	r5, #1
 80059e4:	2d07      	cmp	r5, #7
 80059e6:	d9ef      	bls.n	80059c8 <SD_Read_IT+0x10>
    }

    hsd->pRxBuffPtr = tmp;
 80059e8:	62b4      	str	r4, [r6, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 80059ea:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80059ec:	3b20      	subs	r3, #32
 80059ee:	62f3      	str	r3, [r6, #44]	; 0x2c
  }
}
 80059f0:	bd70      	pop	{r4, r5, r6, pc}

080059f2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80059f2:	b570      	push	{r4, r5, r6, lr}
 80059f4:	b082      	sub	sp, #8
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80059f6:	6a04      	ldr	r4, [r0, #32]

  if (hsd->TxXferSize >= 32U)
 80059f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80059fa:	2b1f      	cmp	r3, #31
 80059fc:	d91c      	bls.n	8005a38 <SD_Write_IT+0x46>
 80059fe:	4606      	mov	r6, r0
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8005a00:	2500      	movs	r5, #0
 8005a02:	e013      	b.n	8005a2c <SD_Write_IT+0x3a>
    {
      data = (uint32_t)(*tmp);
 8005a04:	7823      	ldrb	r3, [r4, #0]
 8005a06:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 8U);
 8005a08:	7862      	ldrb	r2, [r4, #1]
 8005a0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a0e:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 16U);
 8005a10:	78a2      	ldrb	r2, [r4, #2]
 8005a12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a16:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 24U);
 8005a18:	78e2      	ldrb	r2, [r4, #3]
 8005a1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005a1e:	9301      	str	r3, [sp, #4]
      tmp++;
 8005a20:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005a22:	a901      	add	r1, sp, #4
 8005a24:	6830      	ldr	r0, [r6, #0]
 8005a26:	f001 fdc0 	bl	80075aa <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8005a2a:	3501      	adds	r5, #1
 8005a2c:	2d07      	cmp	r5, #7
 8005a2e:	d9e9      	bls.n	8005a04 <SD_Write_IT+0x12>
    }

    hsd->pTxBuffPtr = tmp;
 8005a30:	6234      	str	r4, [r6, #32]
    hsd->TxXferSize -= 32U;
 8005a32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005a34:	3b20      	subs	r3, #32
 8005a36:	6273      	str	r3, [r6, #36]	; 0x24
  }
}
 8005a38:	b002      	add	sp, #8
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}

08005a3c <SD_SendSDStatus>:
{
 8005a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	4605      	mov	r5, r0
 8005a42:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 8005a44:	f7fa fcaa 	bl	800039c <HAL_GetTick>
 8005a48:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	6828      	ldr	r0, [r5, #0]
 8005a4e:	f001 fdd0 	bl	80075f2 <SDMMC_GetResponse>
 8005a52:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005a56:	d164      	bne.n	8005b22 <SD_SendSDStatus+0xe6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005a58:	2140      	movs	r1, #64	; 0x40
 8005a5a:	6828      	ldr	r0, [r5, #0]
 8005a5c:	f001 fea2 	bl	80077a4 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a60:	4603      	mov	r3, r0
 8005a62:	b110      	cbz	r0, 8005a6a <SD_SendSDStatus+0x2e>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a64:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005a66:	63aa      	str	r2, [r5, #56]	; 0x38
    return errorstate;
 8005a68:	e05d      	b.n	8005b26 <SD_SendSDStatus+0xea>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a6a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8005a6c:	0409      	lsls	r1, r1, #16
 8005a6e:	6828      	ldr	r0, [r5, #0]
 8005a70:	f001 ff5b 	bl	800792a <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a74:	4603      	mov	r3, r0
 8005a76:	b110      	cbz	r0, 8005a7e <SD_SendSDStatus+0x42>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a78:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005a7a:	63aa      	str	r2, [r5, #56]	; 0x38
    return errorstate;
 8005a7c:	e053      	b.n	8005b26 <SD_SendSDStatus+0xea>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a82:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 8005a84:	2340      	movs	r3, #64	; 0x40
 8005a86:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005a88:	2360      	movs	r3, #96	; 0x60
 8005a8a:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005a98:	4669      	mov	r1, sp
 8005a9a:	6828      	ldr	r0, [r5, #0]
 8005a9c:	f001 fdac 	bl	80075f8 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005aa0:	6828      	ldr	r0, [r5, #0]
 8005aa2:	f001 ffa6 	bl	80079f2 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	b180      	cbz	r0, 8005acc <SD_SendSDStatus+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005aaa:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005aac:	63aa      	str	r2, [r5, #56]	; 0x38
    return errorstate;
 8005aae:	e03a      	b.n	8005b26 <SD_SendSDStatus+0xea>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005ab0:	6828      	ldr	r0, [r5, #0]
 8005ab2:	f001 fd77 	bl	80075a4 <SDMMC_ReadFIFO>
 8005ab6:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 8005aba:	3401      	adds	r4, #1
 8005abc:	2c07      	cmp	r4, #7
 8005abe:	d9f7      	bls.n	8005ab0 <SD_SendSDStatus+0x74>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ac0:	f7fa fc6c 	bl	800039c <HAL_GetTick>
 8005ac4:	1bc0      	subs	r0, r0, r7
 8005ac6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005aca:	d02f      	beq.n	8005b2c <SD_SendSDStatus+0xf0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005ad0:	f414 7495 	ands.w	r4, r4, #298	; 0x12a
 8005ad4:	d104      	bne.n	8005ae0 <SD_SendSDStatus+0xa4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005adc:	d0f0      	beq.n	8005ac0 <SD_SendSDStatus+0x84>
 8005ade:	e7ed      	b.n	8005abc <SD_SendSDStatus+0x80>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ae2:	f012 0f08 	tst.w	r2, #8
 8005ae6:	d124      	bne.n	8005b32 <SD_SendSDStatus+0xf6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aea:	f012 0f02 	tst.w	r2, #2
 8005aee:	d122      	bne.n	8005b36 <SD_SendSDStatus+0xfa>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	f013 0f20 	tst.w	r3, #32
 8005af6:	d120      	bne.n	8005b3a <SD_SendSDStatus+0xfe>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005af8:	6828      	ldr	r0, [r5, #0]
 8005afa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005afc:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8005b00:	d00c      	beq.n	8005b1c <SD_SendSDStatus+0xe0>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005b02:	f001 fd4f 	bl	80075a4 <SDMMC_ReadFIFO>
 8005b06:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b0a:	f7fa fc47 	bl	800039c <HAL_GetTick>
 8005b0e:	1bc0      	subs	r0, r0, r7
 8005b10:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005b14:	d1f0      	bne.n	8005af8 <SD_SendSDStatus+0xbc>
      return HAL_SD_ERROR_TIMEOUT;
 8005b16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b1a:	e004      	b.n	8005b26 <SD_SendSDStatus+0xea>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b1c:	4a08      	ldr	r2, [pc, #32]	; (8005b40 <SD_SendSDStatus+0x104>)
 8005b1e:	6382      	str	r2, [r0, #56]	; 0x38
  return HAL_SD_ERROR_NONE;
 8005b20:	e001      	b.n	8005b26 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005b22:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	b007      	add	sp, #28
 8005b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_SD_ERROR_TIMEOUT;
 8005b2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b30:	e7f9      	b.n	8005b26 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005b32:	2308      	movs	r3, #8
 8005b34:	e7f7      	b.n	8005b26 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b36:	2302      	movs	r3, #2
 8005b38:	e7f5      	b.n	8005b26 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_RX_OVERRUN;
 8005b3a:	2320      	movs	r3, #32
 8005b3c:	e7f3      	b.n	8005b26 <SD_SendSDStatus+0xea>
 8005b3e:	bf00      	nop
 8005b40:	18000f3a 	.word	0x18000f3a

08005b44 <SD_FindSCR>:
{
 8005b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b46:	b089      	sub	sp, #36	; 0x24
 8005b48:	4604      	mov	r4, r0
 8005b4a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005b4c:	f7fa fc26 	bl	800039c <HAL_GetTick>
 8005b50:	4605      	mov	r5, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005b52:	2300      	movs	r3, #0
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005b58:	2108      	movs	r1, #8
 8005b5a:	6820      	ldr	r0, [r4, #0]
 8005b5c:	f001 fe22 	bl	80077a4 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b60:	4606      	mov	r6, r0
 8005b62:	b110      	cbz	r0, 8005b6a <SD_FindSCR+0x26>
}
 8005b64:	4630      	mov	r0, r6
 8005b66:	b009      	add	sp, #36	; 0x24
 8005b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005b6a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005b6c:	0409      	lsls	r1, r1, #16
 8005b6e:	6820      	ldr	r0, [r4, #0]
 8005b70:	f001 fedb 	bl	800792a <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b74:	4606      	mov	r6, r0
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d1f4      	bne.n	8005b64 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b7e:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8005b80:	2308      	movs	r3, #8
 8005b82:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005b84:	2330      	movs	r3, #48	; 0x30
 8005b86:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005b94:	a902      	add	r1, sp, #8
 8005b96:	6820      	ldr	r0, [r4, #0]
 8005b98:	f001 fd2e 	bl	80075f8 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005b9c:	6820      	ldr	r0, [r4, #0]
 8005b9e:	f001 fef6 	bl	800798e <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	b170      	cbz	r0, 8005bc4 <SD_FindSCR+0x80>
 8005ba6:	e7dd      	b.n	8005b64 <SD_FindSCR+0x20>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005ba8:	f001 fcfc 	bl	80075a4 <SDMMC_ReadFIFO>
 8005bac:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005bae:	6820      	ldr	r0, [r4, #0]
 8005bb0:	f001 fcf8 	bl	80075a4 <SDMMC_ReadFIFO>
 8005bb4:	9001      	str	r0, [sp, #4]
      index++;
 8005bb6:	3601      	adds	r6, #1
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005bb8:	f7fa fbf0 	bl	800039c <HAL_GetTick>
 8005bbc:	1b43      	subs	r3, r0, r5
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc2:	d03e      	beq.n	8005c42 <SD_FindSCR+0xfe>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8005bc4:	6820      	ldr	r0, [r4, #0]
 8005bc6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005bc8:	f240 532a 	movw	r3, #1322	; 0x52a
 8005bcc:	421a      	tst	r2, r3
 8005bce:	d106      	bne.n	8005bde <SD_FindSCR+0x9a>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005bd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005bd2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005bd6:	d1ef      	bne.n	8005bb8 <SD_FindSCR+0x74>
 8005bd8:	2e00      	cmp	r6, #0
 8005bda:	d1ed      	bne.n	8005bb8 <SD_FindSCR+0x74>
 8005bdc:	e7e4      	b.n	8005ba8 <SD_FindSCR+0x64>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005bde:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005be0:	f013 0f08 	tst.w	r3, #8
 8005be4:	d124      	bne.n	8005c30 <SD_FindSCR+0xec>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005be6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005be8:	f013 0f02 	tst.w	r3, #2
 8005bec:	d123      	bne.n	8005c36 <SD_FindSCR+0xf2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005bee:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8005bf0:	f016 0620 	ands.w	r6, r6, #32
 8005bf4:	d122      	bne.n	8005c3c <SD_FindSCR+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <SD_FindSCR+0x104>)
 8005bf8:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005bfa:	9a01      	ldr	r2, [sp, #4]
 8005bfc:	0213      	lsls	r3, r2, #8
 8005bfe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005c06:	0a11      	lsrs	r1, r2, #8
 8005c08:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005c0c:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005c0e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005c12:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005c14:	9a00      	ldr	r2, [sp, #0]
 8005c16:	0213      	lsls	r3, r2, #8
 8005c18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005c20:	0a11      	lsrs	r1, r2, #8
 8005c22:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005c26:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005c28:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005c2c:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8005c2e:	e799      	b.n	8005b64 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005c30:	2608      	movs	r6, #8
 8005c32:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005c34:	e796      	b.n	8005b64 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005c36:	2602      	movs	r6, #2
 8005c38:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c3a:	e793      	b.n	8005b64 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005c3c:	2620      	movs	r6, #32
 8005c3e:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005c40:	e790      	b.n	8005b64 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8005c42:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005c46:	e78d      	b.n	8005b64 <SD_FindSCR+0x20>
 8005c48:	18000f3a 	.word	0x18000f3a

08005c4c <SD_WideBus_Enable>:
{
 8005c4c:	b510      	push	{r4, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8005c52:	2100      	movs	r1, #0
 8005c54:	9100      	str	r1, [sp, #0]
 8005c56:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c58:	6800      	ldr	r0, [r0, #0]
 8005c5a:	f001 fcca 	bl	80075f2 <SDMMC_GetResponse>
 8005c5e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005c62:	d113      	bne.n	8005c8c <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8005c64:	4669      	mov	r1, sp
 8005c66:	4620      	mov	r0, r4
 8005c68:	f7ff ff6c 	bl	8005b44 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c6c:	b980      	cbnz	r0, 8005c90 <SD_WideBus_Enable+0x44>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c6e:	9b01      	ldr	r3, [sp, #4]
 8005c70:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005c74:	d00e      	beq.n	8005c94 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c76:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005c78:	0409      	lsls	r1, r1, #16
 8005c7a:	6820      	ldr	r0, [r4, #0]
 8005c7c:	f001 fe55 	bl	800792a <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c80:	b930      	cbnz	r0, 8005c90 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005c82:	2102      	movs	r1, #2
 8005c84:	6820      	ldr	r0, [r4, #0]
 8005c86:	f001 fe69 	bl	800795c <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c8a:	e001      	b.n	8005c90 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8005c90:	b002      	add	sp, #8
 8005c92:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c94:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005c98:	e7fa      	b.n	8005c90 <SD_WideBus_Enable+0x44>

08005c9a <SD_WideBus_Disable>:
{
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	9100      	str	r1, [sp, #0]
 8005ca4:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ca6:	6800      	ldr	r0, [r0, #0]
 8005ca8:	f001 fca3 	bl	80075f2 <SDMMC_GetResponse>
 8005cac:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005cb0:	d113      	bne.n	8005cda <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8005cb2:	4669      	mov	r1, sp
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f7ff ff45 	bl	8005b44 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cba:	b980      	cbnz	r0, 8005cde <SD_WideBus_Disable+0x44>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005cbc:	9b01      	ldr	r3, [sp, #4]
 8005cbe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005cc2:	d00e      	beq.n	8005ce2 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005cc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005cc6:	0409      	lsls	r1, r1, #16
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	f001 fe2e 	bl	800792a <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005cce:	b930      	cbnz	r0, 8005cde <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	6820      	ldr	r0, [r4, #0]
 8005cd4:	f001 fe42 	bl	800795c <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005cd8:	e001      	b.n	8005cde <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005cda:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8005cde:	b002      	add	sp, #8
 8005ce0:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ce2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005ce6:	e7fa      	b.n	8005cde <SD_WideBus_Disable+0x44>

08005ce8 <SD_SendStatus>:
{
 8005ce8:	b570      	push	{r4, r5, r6, lr}
  if (pCardStatus == NULL)
 8005cea:	b181      	cbz	r1, 8005d0e <SD_SendStatus+0x26>
 8005cec:	4604      	mov	r4, r0
 8005cee:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005cf0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005cf2:	0409      	lsls	r1, r1, #16
 8005cf4:	6800      	ldr	r0, [r0, #0]
 8005cf6:	f001 fe63 	bl	80079c0 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cfa:	4605      	mov	r5, r0
 8005cfc:	b108      	cbz	r0, 8005d02 <SD_SendStatus+0x1a>
}
 8005cfe:	4628      	mov	r0, r5
 8005d00:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005d02:	2100      	movs	r1, #0
 8005d04:	6820      	ldr	r0, [r4, #0]
 8005d06:	f001 fc74 	bl	80075f2 <SDMMC_GetResponse>
 8005d0a:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8005d0c:	e7f7      	b.n	8005cfe <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8005d0e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8005d12:	e7f4      	b.n	8005cfe <SD_SendStatus+0x16>

08005d14 <HAL_SD_ReadBlocks>:
{
 8005d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d18:	b087      	sub	sp, #28
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	4616      	mov	r6, r2
 8005d20:	469a      	mov	sl, r3
 8005d22:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005d26:	f7fa fb39 	bl	800039c <HAL_GetTick>
  if (NULL == pData)
 8005d2a:	2c00      	cmp	r4, #0
 8005d2c:	d03a      	beq.n	8005da4 <HAL_SD_ReadBlocks+0x90>
 8005d2e:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 8005d30:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
 8005d34:	b2ff      	uxtb	r7, r7
 8005d36:	2f01      	cmp	r7, #1
 8005d38:	f040 80e0 	bne.w	8005efc <HAL_SD_ReadBlocks+0x1e8>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	63ab      	str	r3, [r5, #56]	; 0x38
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d40:	eb06 030a 	add.w	r3, r6, sl
 8005d44:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d832      	bhi.n	8005db0 <HAL_SD_ReadBlocks+0x9c>
    hsd->State = HAL_SD_STATE_BUSY;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	2200      	movs	r2, #0
 8005d54:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d56:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d000      	beq.n	8005d5e <HAL_SD_ReadBlocks+0x4a>
      add *= 512U;
 8005d5c:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d62:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005d64:	ea4f 234a 	mov.w	r3, sl, lsl #9
 8005d68:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005d6a:	2390      	movs	r3, #144	; 0x90
 8005d6c:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005d76:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d78:	4669      	mov	r1, sp
 8005d7a:	6828      	ldr	r0, [r5, #0]
 8005d7c:	f001 fc3c 	bl	80075f8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005d80:	682a      	ldr	r2, [r5, #0]
 8005d82:	68d3      	ldr	r3, [r2, #12]
 8005d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d88:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8005d8a:	f1ba 0f01 	cmp.w	sl, #1
 8005d8e:	d914      	bls.n	8005dba <HAL_SD_ReadBlocks+0xa6>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005d90:	2302      	movs	r3, #2
 8005d92:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005d94:	4631      	mov	r1, r6
 8005d96:	6828      	ldr	r0, [r5, #0]
 8005d98:	f001 fd36 	bl	8007808 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005d9c:	b9a0      	cbnz	r0, 8005dc8 <HAL_SD_ReadBlocks+0xb4>
    dataremaining = config.DataLength;
 8005d9e:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005da2:	e038      	b.n	8005e16 <HAL_SD_ReadBlocks+0x102>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005da4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005da6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005daa:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 8005dac:	2701      	movs	r7, #1
 8005dae:	e0aa      	b.n	8005f06 <HAL_SD_ReadBlocks+0x1f2>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005db0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005db2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005db6:	63ab      	str	r3, [r5, #56]	; 0x38
      return HAL_ERROR;
 8005db8:	e0a5      	b.n	8005f06 <HAL_SD_ReadBlocks+0x1f2>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005dbe:	4631      	mov	r1, r6
 8005dc0:	6828      	ldr	r0, [r5, #0]
 8005dc2:	f001 fd08 	bl	80077d6 <SDMMC_CmdReadSingleBlock>
 8005dc6:	e7e9      	b.n	8005d9c <HAL_SD_ReadBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	4a51      	ldr	r2, [pc, #324]	; (8005f10 <HAL_SD_ReadBlocks+0x1fc>)
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005dce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005dd0:	4318      	orrs	r0, r3
 8005dd2:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	632b      	str	r3, [r5, #48]	; 0x30
      return HAL_ERROR;
 8005dde:	e092      	b.n	8005f06 <HAL_SD_ReadBlocks+0x1f2>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005de0:	6828      	ldr	r0, [r5, #0]
 8005de2:	f001 fbdf 	bl	80075a4 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005de6:	7020      	strb	r0, [r4, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005de8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005dec:	7063      	strb	r3, [r4, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005dee:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8005df2:	70a3      	strb	r3, [r4, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005df4:	0e00      	lsrs	r0, r0, #24
 8005df6:	70e0      	strb	r0, [r4, #3]
          tempbuff++;
 8005df8:	3404      	adds	r4, #4
        for (count = 0U; count < 8U; count++)
 8005dfa:	3601      	adds	r6, #1
 8005dfc:	2e07      	cmp	r6, #7
 8005dfe:	d9ef      	bls.n	8005de0 <HAL_SD_ReadBlocks+0xcc>
        dataremaining -= 32U;
 8005e00:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005e04:	f7fa faca 	bl	800039c <HAL_GetTick>
 8005e08:	eba0 0008 	sub.w	r0, r0, r8
 8005e0c:	4548      	cmp	r0, r9
 8005e0e:	d20f      	bcs.n	8005e30 <HAL_SD_ReadBlocks+0x11c>
 8005e10:	f1b9 0f00 	cmp.w	r9, #0
 8005e14:	d00c      	beq.n	8005e30 <HAL_SD_ReadBlocks+0x11c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8005e1a:	f416 7695 	ands.w	r6, r6, #298	; 0x12a
 8005e1e:	d115      	bne.n	8005e4c <HAL_SD_ReadBlocks+0x138>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e22:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005e26:	d0ed      	beq.n	8005e04 <HAL_SD_ReadBlocks+0xf0>
 8005e28:	f1bb 0f1f 	cmp.w	fp, #31
 8005e2c:	d9ea      	bls.n	8005e04 <HAL_SD_ReadBlocks+0xf0>
 8005e2e:	e7e5      	b.n	8005dfc <HAL_SD_ReadBlocks+0xe8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	4a37      	ldr	r2, [pc, #220]	; (8005f10 <HAL_SD_ReadBlocks+0x1fc>)
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005e36:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e3c:	63ab      	str	r3, [r5, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	632b      	str	r3, [r5, #48]	; 0x30
        return HAL_TIMEOUT;
 8005e48:	2703      	movs	r7, #3
 8005e4a:	e05c      	b.n	8005f06 <HAL_SD_ReadBlocks+0x1f2>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e52:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005e54:	6828      	ldr	r0, [r5, #0]
 8005e56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005e58:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005e5c:	d005      	beq.n	8005e6a <HAL_SD_ReadBlocks+0x156>
 8005e5e:	f1ba 0f01 	cmp.w	sl, #1
 8005e62:	d902      	bls.n	8005e6a <HAL_SD_ReadBlocks+0x156>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005e64:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d118      	bne.n	8005e9c <HAL_SD_ReadBlocks+0x188>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005e6a:	682b      	ldr	r3, [r5, #0]
 8005e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e6e:	f012 0f08 	tst.w	r2, #8
 8005e72:	d124      	bne.n	8005ebe <HAL_SD_ReadBlocks+0x1aa>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e76:	f012 0f02 	tst.w	r2, #2
 8005e7a:	d12c      	bne.n	8005ed6 <HAL_SD_ReadBlocks+0x1c2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e7e:	f012 0f20 	tst.w	r2, #32
 8005e82:	d034      	beq.n	8005eee <HAL_SD_ReadBlocks+0x1da>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e84:	4a22      	ldr	r2, [pc, #136]	; (8005f10 <HAL_SD_ReadBlocks+0x1fc>)
 8005e86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005e88:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005e8a:	f043 0320 	orr.w	r3, r3, #32
 8005e8e:	63ab      	str	r3, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e96:	2300      	movs	r3, #0
 8005e98:	632b      	str	r3, [r5, #48]	; 0x30
      return HAL_ERROR;
 8005e9a:	e034      	b.n	8005f06 <HAL_SD_ReadBlocks+0x1f2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e9c:	f001 fd00 	bl	80078a0 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d0e1      	beq.n	8005e6a <HAL_SD_ReadBlocks+0x156>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ea6:	682a      	ldr	r2, [r5, #0]
 8005ea8:	4919      	ldr	r1, [pc, #100]	; (8005f10 <HAL_SD_ReadBlocks+0x1fc>)
 8005eaa:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005eac:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	63ab      	str	r3, [r5, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	632b      	str	r3, [r5, #48]	; 0x30
          return HAL_ERROR;
 8005ebc:	e023      	b.n	8005f06 <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ebe:	4a14      	ldr	r2, [pc, #80]	; (8005f10 <HAL_SD_ReadBlocks+0x1fc>)
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005ec2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005ec4:	f043 0308 	orr.w	r3, r3, #8
 8005ec8:	63ab      	str	r3, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	632b      	str	r3, [r5, #48]	; 0x30
      return HAL_ERROR;
 8005ed4:	e017      	b.n	8005f06 <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ed6:	4a0e      	ldr	r2, [pc, #56]	; (8005f10 <HAL_SD_ReadBlocks+0x1fc>)
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005eda:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005edc:	f043 0302 	orr.w	r3, r3, #2
 8005ee0:	63ab      	str	r3, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	632b      	str	r3, [r5, #48]	; 0x30
      return HAL_ERROR;
 8005eec:	e00b      	b.n	8005f06 <HAL_SD_ReadBlocks+0x1f2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005eee:	4a09      	ldr	r2, [pc, #36]	; (8005f14 <HAL_SD_ReadBlocks+0x200>)
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_OK;
 8005ef8:	2700      	movs	r7, #0
 8005efa:	e004      	b.n	8005f06 <HAL_SD_ReadBlocks+0x1f2>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005efc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005efe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f02:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 8005f04:	2701      	movs	r7, #1
}
 8005f06:	4638      	mov	r0, r7
 8005f08:	b007      	add	sp, #28
 8005f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0e:	bf00      	nop
 8005f10:	1fe00fff 	.word	0x1fe00fff
 8005f14:	18000f3a 	.word	0x18000f3a

08005f18 <HAL_SD_WriteBlocks>:
{
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	b08b      	sub	sp, #44	; 0x2c
 8005f1e:	4605      	mov	r5, r0
 8005f20:	460c      	mov	r4, r1
 8005f22:	4616      	mov	r6, r2
 8005f24:	469a      	mov	sl, r3
 8005f26:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 8005f2a:	f7fa fa37 	bl	800039c <HAL_GetTick>
  if (NULL == pData)
 8005f2e:	2c00      	cmp	r4, #0
 8005f30:	d03b      	beq.n	8005faa <HAL_SD_WriteBlocks+0x92>
 8005f32:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 8005f34:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
 8005f38:	b2ff      	uxtb	r7, r7
 8005f3a:	2f01      	cmp	r7, #1
 8005f3c:	f040 80e6 	bne.w	800610c <HAL_SD_WriteBlocks+0x1f4>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	63ab      	str	r3, [r5, #56]	; 0x38
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f44:	eb06 030a 	add.w	r3, r6, sl
 8005f48:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d833      	bhi.n	8005fb6 <HAL_SD_WriteBlocks+0x9e>
    hsd->State = HAL_SD_STATE_BUSY;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	2200      	movs	r2, #0
 8005f58:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f5a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d000      	beq.n	8005f62 <HAL_SD_WriteBlocks+0x4a>
      add *= 512U;
 8005f60:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f66:	9304      	str	r3, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005f68:	ea4f 234a 	mov.w	r3, sl, lsl #9
 8005f6c:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005f6e:	2390      	movs	r3, #144	; 0x90
 8005f70:	9306      	str	r3, [sp, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005f72:	2300      	movs	r3, #0
 8005f74:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005f76:	9308      	str	r3, [sp, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005f78:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005f7a:	a904      	add	r1, sp, #16
 8005f7c:	6828      	ldr	r0, [r5, #0]
 8005f7e:	f001 fb3b 	bl	80075f8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005f82:	682a      	ldr	r2, [r5, #0]
 8005f84:	68d3      	ldr	r3, [r2, #12]
 8005f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f8a:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8005f8c:	f1ba 0f01 	cmp.w	sl, #1
 8005f90:	d916      	bls.n	8005fc0 <HAL_SD_WriteBlocks+0xa8>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005f92:	2320      	movs	r3, #32
 8005f94:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005f96:	4631      	mov	r1, r6
 8005f98:	6828      	ldr	r0, [r5, #0]
 8005f9a:	f001 fc67 	bl	800786c <SDMMC_CmdWriteMultiBlock>
 8005f9e:	9001      	str	r0, [sp, #4]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005fa0:	9b01      	ldr	r3, [sp, #4]
 8005fa2:	b9ab      	cbnz	r3, 8005fd0 <HAL_SD_WriteBlocks+0xb8>
    dataremaining = config.DataLength;
 8005fa4:	f8dd b014 	ldr.w	fp, [sp, #20]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005fa8:	e03d      	b.n	8006026 <HAL_SD_WriteBlocks+0x10e>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005faa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005fac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fb0:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 8005fb2:	2701      	movs	r7, #1
 8005fb4:	e0af      	b.n	8006116 <HAL_SD_WriteBlocks+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005fb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005fb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005fbc:	63ab      	str	r3, [r5, #56]	; 0x38
      return HAL_ERROR;
 8005fbe:	e0aa      	b.n	8006116 <HAL_SD_WriteBlocks+0x1fe>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	6828      	ldr	r0, [r5, #0]
 8005fc8:	f001 fc37 	bl	800783a <SDMMC_CmdWriteSingleBlock>
 8005fcc:	9001      	str	r0, [sp, #4]
 8005fce:	e7e7      	b.n	8005fa0 <HAL_SD_WriteBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	4a53      	ldr	r2, [pc, #332]	; (8006120 <HAL_SD_WriteBlocks+0x208>)
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005fd6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8005fd8:	9b01      	ldr	r3, [sp, #4]
 8005fda:	4318      	orrs	r0, r3
 8005fdc:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	632b      	str	r3, [r5, #48]	; 0x30
      return HAL_ERROR;
 8005fe8:	e095      	b.n	8006116 <HAL_SD_WriteBlocks+0x1fe>
          data = (uint32_t)(*tempbuff);
 8005fea:	7823      	ldrb	r3, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005fec:	7862      	ldrb	r2, [r4, #1]
 8005fee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005ff2:	78a2      	ldrb	r2, [r4, #2]
 8005ff4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005ff8:	78e2      	ldrb	r2, [r4, #3]
 8005ffa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ffe:	9303      	str	r3, [sp, #12]
          tempbuff++;
 8006000:	3404      	adds	r4, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006002:	a903      	add	r1, sp, #12
 8006004:	6828      	ldr	r0, [r5, #0]
 8006006:	f001 fad0 	bl	80075aa <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800600a:	3601      	adds	r6, #1
 800600c:	2e07      	cmp	r6, #7
 800600e:	d9ec      	bls.n	8005fea <HAL_SD_WriteBlocks+0xd2>
        dataremaining -= 32U;
 8006010:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006014:	f7fa f9c2 	bl	800039c <HAL_GetTick>
 8006018:	eba0 0008 	sub.w	r0, r0, r8
 800601c:	4548      	cmp	r0, r9
 800601e:	d20f      	bcs.n	8006040 <HAL_SD_WriteBlocks+0x128>
 8006020:	f1b9 0f00 	cmp.w	r9, #0
 8006024:	d00c      	beq.n	8006040 <HAL_SD_WriteBlocks+0x128>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800602a:	f416 768d 	ands.w	r6, r6, #282	; 0x11a
 800602e:	d115      	bne.n	800605c <HAL_SD_WriteBlocks+0x144>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006032:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006036:	d0ed      	beq.n	8006014 <HAL_SD_WriteBlocks+0xfc>
 8006038:	f1bb 0f1f 	cmp.w	fp, #31
 800603c:	d9ea      	bls.n	8006014 <HAL_SD_WriteBlocks+0xfc>
 800603e:	e7e5      	b.n	800600c <HAL_SD_WriteBlocks+0xf4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	4a37      	ldr	r2, [pc, #220]	; (8006120 <HAL_SD_WriteBlocks+0x208>)
 8006044:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006046:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8006048:	9b01      	ldr	r3, [sp, #4]
 800604a:	4318      	orrs	r0, r3
 800604c:	63a8      	str	r0, [r5, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800604e:	2301      	movs	r3, #1
 8006050:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006054:	2300      	movs	r3, #0
 8006056:	632b      	str	r3, [r5, #48]	; 0x30
        return HAL_TIMEOUT;
 8006058:	2703      	movs	r7, #3
 800605a:	e05c      	b.n	8006116 <HAL_SD_WriteBlocks+0x1fe>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006062:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006064:	6828      	ldr	r0, [r5, #0]
 8006066:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006068:	f413 7f80 	tst.w	r3, #256	; 0x100
 800606c:	d005      	beq.n	800607a <HAL_SD_WriteBlocks+0x162>
 800606e:	f1ba 0f01 	cmp.w	sl, #1
 8006072:	d902      	bls.n	800607a <HAL_SD_WriteBlocks+0x162>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006074:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006076:	2b03      	cmp	r3, #3
 8006078:	d118      	bne.n	80060ac <HAL_SD_WriteBlocks+0x194>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800607a:	682b      	ldr	r3, [r5, #0]
 800607c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800607e:	f012 0f08 	tst.w	r2, #8
 8006082:	d124      	bne.n	80060ce <HAL_SD_WriteBlocks+0x1b6>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006086:	f012 0f02 	tst.w	r2, #2
 800608a:	d12c      	bne.n	80060e6 <HAL_SD_WriteBlocks+0x1ce>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800608c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800608e:	f012 0f10 	tst.w	r2, #16
 8006092:	d034      	beq.n	80060fe <HAL_SD_WriteBlocks+0x1e6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006094:	4a22      	ldr	r2, [pc, #136]	; (8006120 <HAL_SD_WriteBlocks+0x208>)
 8006096:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006098:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800609a:	f043 0310 	orr.w	r3, r3, #16
 800609e:	63ab      	str	r3, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	632b      	str	r3, [r5, #48]	; 0x30
      return HAL_ERROR;
 80060aa:	e034      	b.n	8006116 <HAL_SD_WriteBlocks+0x1fe>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060ac:	f001 fbf8 	bl	80078a0 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 80060b0:	4603      	mov	r3, r0
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d0e1      	beq.n	800607a <HAL_SD_WriteBlocks+0x162>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060b6:	682a      	ldr	r2, [r5, #0]
 80060b8:	4919      	ldr	r1, [pc, #100]	; (8006120 <HAL_SD_WriteBlocks+0x208>)
 80060ba:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80060bc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80060be:	4313      	orrs	r3, r2
 80060c0:	63ab      	str	r3, [r5, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80060c8:	2300      	movs	r3, #0
 80060ca:	632b      	str	r3, [r5, #48]	; 0x30
          return HAL_ERROR;
 80060cc:	e023      	b.n	8006116 <HAL_SD_WriteBlocks+0x1fe>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060ce:	4a14      	ldr	r2, [pc, #80]	; (8006120 <HAL_SD_WriteBlocks+0x208>)
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80060d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80060d4:	f043 0308 	orr.w	r3, r3, #8
 80060d8:	63ab      	str	r3, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060da:	2301      	movs	r3, #1
 80060dc:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060e0:	2300      	movs	r3, #0
 80060e2:	632b      	str	r3, [r5, #48]	; 0x30
      return HAL_ERROR;
 80060e4:	e017      	b.n	8006116 <HAL_SD_WriteBlocks+0x1fe>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060e6:	4a0e      	ldr	r2, [pc, #56]	; (8006120 <HAL_SD_WriteBlocks+0x208>)
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80060ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80060ec:	f043 0302 	orr.w	r3, r3, #2
 80060f0:	63ab      	str	r3, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060f8:	2300      	movs	r3, #0
 80060fa:	632b      	str	r3, [r5, #48]	; 0x30
      return HAL_ERROR;
 80060fc:	e00b      	b.n	8006116 <HAL_SD_WriteBlocks+0x1fe>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80060fe:	4a09      	ldr	r2, [pc, #36]	; (8006124 <HAL_SD_WriteBlocks+0x20c>)
 8006100:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006102:	2301      	movs	r3, #1
 8006104:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_OK;
 8006108:	2700      	movs	r7, #0
 800610a:	e004      	b.n	8006116 <HAL_SD_WriteBlocks+0x1fe>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800610c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800610e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006112:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 8006114:	2701      	movs	r7, #1
}
 8006116:	4638      	mov	r0, r7
 8006118:	b00b      	add	sp, #44	; 0x2c
 800611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611e:	bf00      	nop
 8006120:	1fe00fff 	.word	0x1fe00fff
 8006124:	18000f3a 	.word	0x18000f3a

08006128 <HAL_SD_ErrorCallback>:
}
 8006128:	4770      	bx	lr

0800612a <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800612a:	4770      	bx	lr

0800612c <SD_PowerON>:
{
 800612c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800612e:	b083      	sub	sp, #12
 8006130:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	9301      	str	r3, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8006136:	f7fa f931 	bl	800039c <HAL_GetTick>
 800613a:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800613c:	6820      	ldr	r0, [r4, #0]
 800613e:	f001 fa6d 	bl	800761c <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006142:	4605      	mov	r5, r0
 8006144:	b110      	cbz	r0, 800614c <SD_PowerON+0x20>
}
 8006146:	4628      	mov	r0, r5
 8006148:	b003      	add	sp, #12
 800614a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800614c:	6820      	ldr	r0, [r4, #0]
 800614e:	f001 fdbb 	bl	8007cc8 <SDMMC_CmdOperCond>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006152:	b938      	cbnz	r0, 8006164 <SD_PowerON+0x38>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006154:	2301      	movs	r3, #1
 8006156:	6423      	str	r3, [r4, #64]	; 0x40
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800615a:	2b01      	cmp	r3, #1
 800615c:	d00b      	beq.n	8006176 <SD_PowerON+0x4a>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800615e:	462f      	mov	r7, r5
 8006160:	4628      	mov	r0, r5
 8006162:	e014      	b.n	800618e <SD_PowerON+0x62>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006164:	2300      	movs	r3, #0
 8006166:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006168:	6820      	ldr	r0, [r4, #0]
 800616a:	f001 fa57 	bl	800761c <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800616e:	2800      	cmp	r0, #0
 8006170:	d0f2      	beq.n	8006158 <SD_PowerON+0x2c>
      return errorstate;
 8006172:	4605      	mov	r5, r0
 8006174:	e7e7      	b.n	8006146 <SD_PowerON+0x1a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006176:	2100      	movs	r1, #0
 8006178:	6820      	ldr	r0, [r4, #0]
 800617a:	f001 fbd6 	bl	800792a <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800617e:	2800      	cmp	r0, #0
 8006180:	d0ed      	beq.n	800615e <SD_PowerON+0x32>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006182:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006186:	e7de      	b.n	8006146 <SD_PowerON+0x1a>
    count++;
 8006188:	9b01      	ldr	r3, [sp, #4]
 800618a:	3301      	adds	r3, #1
 800618c:	9301      	str	r3, [sp, #4]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800618e:	9a01      	ldr	r2, [sp, #4]
 8006190:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006194:	429a      	cmp	r2, r3
 8006196:	d815      	bhi.n	80061c4 <SD_PowerON+0x98>
 8006198:	b9a7      	cbnz	r7, 80061c4 <SD_PowerON+0x98>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800619a:	2100      	movs	r1, #0
 800619c:	6820      	ldr	r0, [r4, #0]
 800619e:	f001 fbc4 	bl	800792a <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d167      	bne.n	8006276 <SD_PowerON+0x14a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80061a6:	493c      	ldr	r1, [pc, #240]	; (8006298 <SD_PowerON+0x16c>)
 80061a8:	6820      	ldr	r0, [r4, #0]
 80061aa:	f001 fcd9 	bl	8007b60 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80061ae:	4607      	mov	r7, r0
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d162      	bne.n	800627a <SD_PowerON+0x14e>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80061b4:	2100      	movs	r1, #0
 80061b6:	6820      	ldr	r0, [r4, #0]
 80061b8:	f001 fa1b 	bl	80075f2 <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80061bc:	0fc3      	lsrs	r3, r0, #31
 80061be:	d0e3      	beq.n	8006188 <SD_PowerON+0x5c>
 80061c0:	461f      	mov	r7, r3
 80061c2:	e7e1      	b.n	8006188 <SD_PowerON+0x5c>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80061c4:	9a01      	ldr	r2, [sp, #4]
 80061c6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d858      	bhi.n	8006280 <SD_PowerON+0x154>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80061ce:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 80061d2:	d058      	beq.n	8006286 <SD_PowerON+0x15a>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80061d4:	2301      	movs	r3, #1
 80061d6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80061d8:	69a3      	ldr	r3, [r4, #24]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d1b3      	bne.n	8006146 <SD_PowerON+0x1a>
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80061de:	f010 7580 	ands.w	r5, r0, #16777216	; 0x1000000
 80061e2:	d0b0      	beq.n	8006146 <SD_PowerON+0x1a>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80061e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061e8:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80061ea:	6822      	ldr	r2, [r4, #0]
 80061ec:	6813      	ldr	r3, [r2, #0]
 80061ee:	f043 0308 	orr.w	r3, r3, #8
 80061f2:	6013      	str	r3, [r2, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80061f4:	6820      	ldr	r0, [r4, #0]
 80061f6:	f001 fc15 	bl	8007a24 <SDMMC_CmdVoltageSwitch>
        if (errorstate != HAL_SD_ERROR_NONE)
 80061fa:	4605      	mov	r5, r0
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d1a2      	bne.n	8006146 <SD_PowerON+0x1a>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006204:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 8006208:	d108      	bne.n	800621c <SD_PowerON+0xf0>
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800620a:	f7fa f8c7 	bl	800039c <HAL_GetTick>
 800620e:	1b83      	subs	r3, r0, r6
 8006210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006214:	d1f4      	bne.n	8006200 <SD_PowerON+0xd4>
            return HAL_SD_ERROR_TIMEOUT;
 8006216:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800621a:	e794      	b.n	8006146 <SD_PowerON+0x1a>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800621c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006220:	639a      	str	r2, [r3, #56]	; 0x38
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006226:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800622a:	d02e      	beq.n	800628a <SD_PowerON+0x15e>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800622c:	2001      	movs	r0, #1
 800622e:	f7ff ff7c 	bl	800612a <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	6813      	ldr	r3, [r2, #0]
 8006236:	f043 0304 	orr.w	r3, r3, #4
 800623a:	6013      	str	r3, [r2, #0]
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006240:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006244:	d108      	bne.n	8006258 <SD_PowerON+0x12c>
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006246:	f7fa f8a9 	bl	800039c <HAL_GetTick>
 800624a:	1b83      	subs	r3, r0, r6
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006250:	d1f4      	bne.n	800623c <SD_PowerON+0x110>
              return HAL_SD_ERROR_TIMEOUT;
 8006252:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006256:	e776      	b.n	8006146 <SD_PowerON+0x1a>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8006262:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
 8006266:	d113      	bne.n	8006290 <SD_PowerON+0x164>
          hsd->Instance->POWER = 0x13U;
 8006268:	2213      	movs	r2, #19
 800626a:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006272:	639a      	str	r2, [r3, #56]	; 0x38
 8006274:	e767      	b.n	8006146 <SD_PowerON+0x1a>
      return errorstate;
 8006276:	4605      	mov	r5, r0
 8006278:	e765      	b.n	8006146 <SD_PowerON+0x1a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800627a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800627e:	e762      	b.n	8006146 <SD_PowerON+0x1a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006280:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8006284:	e75f      	b.n	8006146 <SD_PowerON+0x1a>
  return HAL_SD_ERROR_NONE;
 8006286:	461d      	mov	r5, r3
 8006288:	e75d      	b.n	8006146 <SD_PowerON+0x1a>
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800628a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800628e:	e75a      	b.n	8006146 <SD_PowerON+0x1a>
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006290:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8006294:	e757      	b.n	8006146 <SD_PowerON+0x1a>
 8006296:	bf00      	nop
 8006298:	c1100000 	.word	0xc1100000

0800629c <HAL_SD_GetCardCSD>:
{
 800629c:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800629e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80062a0:	0f9b      	lsrs	r3, r3, #30
 80062a2:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80062a4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80062a6:	f3c3 6383 	ubfx	r3, r3, #26, #4
 80062aa:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80062ac:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
 80062b0:	f003 0303 	and.w	r3, r3, #3
 80062b4:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80062b6:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 80062ba:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80062bc:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80062c0:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80062c2:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80062c6:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80062c8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80062ca:	0d1b      	lsrs	r3, r3, #20
 80062cc:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80062ce:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80062d8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80062da:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80062de:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80062e0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80062e2:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80062e6:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80062e8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80062ea:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80062ee:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80062f0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80062f2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80062f6:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80062f8:	2300      	movs	r3, #0
 80062fa:	734b      	strb	r3, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 80062fc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f040 8088 	bne.w	8006414 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006304:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006306:	f640 73fc 	movw	r3, #4092	; 0xffc
 800630a:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800630e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006310:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8006314:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006316:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006318:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 800631c:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800631e:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006328:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800632a:	f3c3 5342 	ubfx	r3, r3, #21, #3
 800632e:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006330:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006332:	f3c3 4382 	ubfx	r3, r3, #18, #3
 8006336:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006338:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800633a:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 800633e:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006340:	690b      	ldr	r3, [r1, #16]
 8006342:	3301      	adds	r3, #1
 8006344:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006346:	7e0a      	ldrb	r2, [r1, #24]
 8006348:	f002 0207 	and.w	r2, r2, #7
 800634c:	3202      	adds	r2, #2
 800634e:	fa03 f202 	lsl.w	r2, r3, r2
 8006352:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006354:	7a0b      	ldrb	r3, [r1, #8]
 8006356:	f003 040f 	and.w	r4, r3, #15
 800635a:	2301      	movs	r3, #1
 800635c:	40a3      	lsls	r3, r4
 800635e:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006360:	0a5b      	lsrs	r3, r3, #9
 8006362:	fb03 f302 	mul.w	r3, r3, r2
 8006366:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800636c:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800636e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006370:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006374:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006376:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006378:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 800637c:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800637e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006384:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006386:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006388:	0fdb      	lsrs	r3, r3, #31
 800638a:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800638c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800638e:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8006392:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006394:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006396:	f3c3 6382 	ubfx	r3, r3, #26, #3
 800639a:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800639c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800639e:	f3c3 5383 	ubfx	r3, r3, #22, #4
 80063a2:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80063a4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80063a6:	f3c3 5340 	ubfx	r3, r3, #21, #1
 80063aa:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80063b4:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80063b8:	f002 0201 	and.w	r2, r2, #1
 80063bc:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80063c0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80063c2:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80063c6:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80063ca:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80063cc:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80063d0:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80063d4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80063d6:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80063da:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80063de:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80063e0:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80063e4:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80063e8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80063ea:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80063ee:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80063f2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80063f4:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80063f8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80063fc:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80063fe:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8006402:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8006406:	2201      	movs	r2, #1
 8006408:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 800640c:	4618      	mov	r0, r3
}
 800640e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006412:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006414:	2b01      	cmp	r3, #1
 8006416:	d111      	bne.n	800643c <HAL_SD_GetCardCSD+0x1a0>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006418:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800641a:	041b      	lsls	r3, r3, #16
 800641c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006420:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8006424:	4313      	orrs	r3, r2
 8006426:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006428:	690b      	ldr	r3, [r1, #16]
 800642a:	3301      	adds	r3, #1
 800642c:	029b      	lsls	r3, r3, #10
 800642e:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006430:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006436:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006438:	6583      	str	r3, [r0, #88]	; 0x58
 800643a:	e798      	b.n	800636e <HAL_SD_GetCardCSD+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800643c:	6803      	ldr	r3, [r0, #0]
 800643e:	4a05      	ldr	r2, [pc, #20]	; (8006454 <HAL_SD_GetCardCSD+0x1b8>)
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006442:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006448:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800644a:	2301      	movs	r3, #1
 800644c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8006450:	4618      	mov	r0, r3
 8006452:	e7dc      	b.n	800640e <HAL_SD_GetCardCSD+0x172>
 8006454:	1fe00fff 	.word	0x1fe00fff

08006458 <SD_InitCard>:
{
 8006458:	b510      	push	{r4, lr}
 800645a:	b08c      	sub	sp, #48	; 0x30
 800645c:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 800645e:	2301      	movs	r3, #1
 8006460:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006464:	6800      	ldr	r0, [r0, #0]
 8006466:	f001 f8ab 	bl	80075c0 <SDMMC_GetPowerState>
 800646a:	2800      	cmp	r0, #0
 800646c:	d057      	beq.n	800651e <SD_InitCard+0xc6>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800646e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006470:	2b03      	cmp	r3, #3
 8006472:	d133      	bne.n	80064dc <SD_InitCard+0x84>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006474:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006476:	2b03      	cmp	r3, #3
 8006478:	d149      	bne.n	800650e <SD_InitCard+0xb6>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800647a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800647c:	2b03      	cmp	r3, #3
 800647e:	d01c      	beq.n	80064ba <SD_InitCard+0x62>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006480:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8006484:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006486:	0409      	lsls	r1, r1, #16
 8006488:	6820      	ldr	r0, [r4, #0]
 800648a:	f001 fb2b 	bl	8007ae4 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800648e:	2800      	cmp	r0, #0
 8006490:	d147      	bne.n	8006522 <SD_InitCard+0xca>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006492:	2100      	movs	r1, #0
 8006494:	6820      	ldr	r0, [r4, #0]
 8006496:	f001 f8ac 	bl	80075f2 <SDMMC_GetResponse>
 800649a:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800649c:	2104      	movs	r1, #4
 800649e:	6820      	ldr	r0, [r4, #0]
 80064a0:	f001 f8a7 	bl	80075f2 <SDMMC_GetResponse>
 80064a4:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80064a6:	2108      	movs	r1, #8
 80064a8:	6820      	ldr	r0, [r4, #0]
 80064aa:	f001 f8a2 	bl	80075f2 <SDMMC_GetResponse>
 80064ae:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80064b0:	210c      	movs	r1, #12
 80064b2:	6820      	ldr	r0, [r4, #0]
 80064b4:	f001 f89d 	bl	80075f2 <SDMMC_GetResponse>
 80064b8:	66e0      	str	r0, [r4, #108]	; 0x6c
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80064ba:	2104      	movs	r1, #4
 80064bc:	6820      	ldr	r0, [r4, #0]
 80064be:	f001 f898 	bl	80075f2 <SDMMC_GetResponse>
 80064c2:	0d00      	lsrs	r0, r0, #20
 80064c4:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80064c6:	a901      	add	r1, sp, #4
 80064c8:	4620      	mov	r0, r4
 80064ca:	f7ff fee7 	bl	800629c <HAL_SD_GetCardCSD>
 80064ce:	bb50      	cbnz	r0, 8006526 <SD_InitCard+0xce>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80064d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80064d2:	0409      	lsls	r1, r1, #16
 80064d4:	6820      	ldr	r0, [r4, #0]
 80064d6:	f001 fa0f 	bl	80078f8 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 80064da:	e022      	b.n	8006522 <SD_InitCard+0xca>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80064dc:	6820      	ldr	r0, [r4, #0]
 80064de:	f001 faeb 	bl	8007ab8 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 80064e2:	b9f0      	cbnz	r0, 8006522 <SD_InitCard+0xca>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80064e4:	2100      	movs	r1, #0
 80064e6:	6820      	ldr	r0, [r4, #0]
 80064e8:	f001 f883 	bl	80075f2 <SDMMC_GetResponse>
 80064ec:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80064ee:	2104      	movs	r1, #4
 80064f0:	6820      	ldr	r0, [r4, #0]
 80064f2:	f001 f87e 	bl	80075f2 <SDMMC_GetResponse>
 80064f6:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80064f8:	2108      	movs	r1, #8
 80064fa:	6820      	ldr	r0, [r4, #0]
 80064fc:	f001 f879 	bl	80075f2 <SDMMC_GetResponse>
 8006500:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006502:	210c      	movs	r1, #12
 8006504:	6820      	ldr	r0, [r4, #0]
 8006506:	f001 f874 	bl	80075f2 <SDMMC_GetResponse>
 800650a:	67e0      	str	r0, [r4, #124]	; 0x7c
 800650c:	e7b2      	b.n	8006474 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800650e:	f10d 0102 	add.w	r1, sp, #2
 8006512:	6820      	ldr	r0, [r4, #0]
 8006514:	f001 fb8c 	bl	8007c30 <SDMMC_CmdSetRelAdd>
    if (errorstate != HAL_SD_ERROR_NONE)
 8006518:	2800      	cmp	r0, #0
 800651a:	d0ae      	beq.n	800647a <SD_InitCard+0x22>
 800651c:	e001      	b.n	8006522 <SD_InitCard+0xca>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800651e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
}
 8006522:	b00c      	add	sp, #48	; 0x30
 8006524:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006526:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800652a:	e7fa      	b.n	8006522 <SD_InitCard+0xca>

0800652c <HAL_SD_InitCard>:
{
 800652c:	b570      	push	{r4, r5, r6, lr}
 800652e:	b08a      	sub	sp, #40	; 0x28
 8006530:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006532:	2300      	movs	r3, #0
 8006534:	9304      	str	r3, [sp, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006536:	9305      	str	r3, [sp, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006538:	9306      	str	r3, [sp, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800653a:	9307      	str	r3, [sp, #28]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800653c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006540:	f7fe fa76 	bl	8004a30 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8006544:	b360      	cbz	r0, 80065a0 <HAL_SD_InitCard+0x74>
 8006546:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006548:	0a05      	lsrs	r5, r0, #8
 800654a:	4b2b      	ldr	r3, [pc, #172]	; (80065f8 <HAL_SD_InitCard+0xcc>)
 800654c:	fba3 3505 	umull	r3, r5, r3, r5
 8006550:	092d      	lsrs	r5, r5, #4
 8006552:	9508      	str	r5, [sp, #32]
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8006554:	69a3      	ldr	r3, [r4, #24]
 8006556:	9309      	str	r3, [sp, #36]	; 0x24
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006558:	2b02      	cmp	r3, #2
 800655a:	d029      	beq.n	80065b0 <HAL_SD_InitCard+0x84>
  (void)SDMMC_Init(hsd->Instance, Init);
 800655c:	ab0a      	add	r3, sp, #40	; 0x28
 800655e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006562:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006566:	ab04      	add	r3, sp, #16
 8006568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800656a:	6820      	ldr	r0, [r4, #0]
 800656c:	f001 f800 	bl	8007570 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006570:	6820      	ldr	r0, [r4, #0]
 8006572:	f001 f81f 	bl	80075b4 <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006576:	006d      	lsls	r5, r5, #1
 8006578:	fbb6 f5f5 	udiv	r5, r6, r5
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800657c:	4e1f      	ldr	r6, [pc, #124]	; (80065fc <HAL_SD_InitCard+0xd0>)
 800657e:	fbb6 f5f5 	udiv	r5, r6, r5
 8006582:	1c68      	adds	r0, r5, #1
 8006584:	f7f9 ff10 	bl	80003a8 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8006588:	4620      	mov	r0, r4
 800658a:	f7ff fdcf 	bl	800612c <SD_PowerON>
  if (errorstate != HAL_SD_ERROR_NONE)
 800658e:	4602      	mov	r2, r0
 8006590:	b1a0      	cbz	r0, 80065bc <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 8006592:	2001      	movs	r0, #1
 8006594:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006598:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800659a:	4313      	orrs	r3, r2
 800659c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800659e:	e005      	b.n	80065ac <HAL_SD_InitCard+0x80>
    hsd->State = HAL_SD_STATE_READY;
 80065a0:	2001      	movs	r0, #1
 80065a2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80065a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065aa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80065ac:	b00a      	add	sp, #40	; 0x28
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80065b0:	6822      	ldr	r2, [r4, #0]
 80065b2:	6813      	ldr	r3, [r2, #0]
 80065b4:	f043 0310 	orr.w	r3, r3, #16
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	e7cf      	b.n	800655c <HAL_SD_InitCard+0x30>
  errorstate = SD_InitCard(hsd);
 80065bc:	4620      	mov	r0, r4
 80065be:	f7ff ff4b 	bl	8006458 <SD_InitCard>
  if (errorstate != HAL_SD_ERROR_NONE)
 80065c2:	4602      	mov	r2, r0
 80065c4:	b130      	cbz	r0, 80065d4 <HAL_SD_InitCard+0xa8>
    hsd->State = HAL_SD_STATE_READY;
 80065c6:	2001      	movs	r0, #1
 80065c8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80065cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065ce:	4313      	orrs	r3, r2
 80065d0:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80065d2:	e7eb      	b.n	80065ac <HAL_SD_InitCard+0x80>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065d8:	6820      	ldr	r0, [r4, #0]
 80065da:	f001 f8e3 	bl	80077a4 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80065de:	b908      	cbnz	r0, 80065e4 <HAL_SD_InitCard+0xb8>
  return HAL_OK;
 80065e0:	2000      	movs	r0, #0
 80065e2:	e7e3      	b.n	80065ac <HAL_SD_InitCard+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	4906      	ldr	r1, [pc, #24]	; (8006600 <HAL_SD_InitCard+0xd4>)
 80065e8:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80065ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065ec:	4303      	orrs	r3, r0
 80065ee:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065f0:	2001      	movs	r0, #1
 80065f2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_ERROR;
 80065f6:	e7d9      	b.n	80065ac <HAL_SD_InitCard+0x80>
 80065f8:	014f8b59 	.word	0x014f8b59
 80065fc:	00012110 	.word	0x00012110
 8006600:	1fe00fff 	.word	0x1fe00fff

08006604 <HAL_SD_GetCardStatus>:
{
 8006604:	b530      	push	{r4, r5, lr}
 8006606:	b091      	sub	sp, #68	; 0x44
 8006608:	4605      	mov	r5, r0
 800660a:	460c      	mov	r4, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 800660c:	4669      	mov	r1, sp
 800660e:	f7ff fa15 	bl	8005a3c <SD_SendSDStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006612:	b1c0      	cbz	r0, 8006646 <HAL_SD_GetCardStatus+0x42>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	492a      	ldr	r1, [pc, #168]	; (80066c0 <HAL_SD_GetCardStatus+0xbc>)
 8006618:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800661a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800661c:	4303      	orrs	r3, r0
 800661e:	63ab      	str	r3, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006620:	2401      	movs	r4, #1
 8006622:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006626:	f44f 7100 	mov.w	r1, #512	; 0x200
 800662a:	6828      	ldr	r0, [r5, #0]
 800662c:	f001 f8ba 	bl	80077a4 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006630:	b130      	cbz	r0, 8006640 <HAL_SD_GetCardStatus+0x3c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006632:	682a      	ldr	r2, [r5, #0]
 8006634:	4922      	ldr	r1, [pc, #136]	; (80066c0 <HAL_SD_GetCardStatus+0xbc>)
 8006636:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006638:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800663a:	2401      	movs	r4, #1
 800663c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
}
 8006640:	4620      	mov	r0, r4
 8006642:	b011      	add	sp, #68	; 0x44
 8006644:	bd30      	pop	{r4, r5, pc}
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006646:	9a00      	ldr	r2, [sp, #0]
 8006648:	f3c2 1381 	ubfx	r3, r2, #6, #2
 800664c:	7023      	strb	r3, [r4, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800664e:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8006652:	7063      	strb	r3, [r4, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006654:	0a13      	lsrs	r3, r2, #8
 8006656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800665a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800665e:	b29b      	uxth	r3, r3
 8006660:	8063      	strh	r3, [r4, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006662:	9a01      	ldr	r2, [sp, #4]
 8006664:	0213      	lsls	r3, r2, #8
 8006666:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800666a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800666e:	0a11      	lsrs	r1, r2, #8
 8006670:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006674:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006676:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800667a:	6063      	str	r3, [r4, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800667c:	9b02      	ldr	r3, [sp, #8]
 800667e:	b2da      	uxtb	r2, r3
 8006680:	7222      	strb	r2, [r4, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006682:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006686:	7262      	strb	r2, [r4, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006688:	f3c3 5203 	ubfx	r2, r3, #20, #4
 800668c:	72a2      	strb	r2, [r4, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800668e:	0c1b      	lsrs	r3, r3, #16
 8006690:	9a03      	ldr	r2, [sp, #12]
 8006692:	b2d1      	uxtb	r1, r2
 8006694:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006698:	430b      	orrs	r3, r1
 800669a:	81a3      	strh	r3, [r4, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800669c:	f3c2 2385 	ubfx	r3, r2, #10, #6
 80066a0:	73a3      	strb	r3, [r4, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80066a2:	f3c2 2301 	ubfx	r3, r2, #8, #2
 80066a6:	73e3      	strb	r3, [r4, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80066a8:	f3c2 1303 	ubfx	r3, r2, #4, #4
 80066ac:	7423      	strb	r3, [r4, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80066ae:	f002 020f 	and.w	r2, r2, #15
 80066b2:	7462      	strb	r2, [r4, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80066b4:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80066b8:	74a3      	strb	r3, [r4, #18]
  HAL_StatusTypeDef status = HAL_OK;
 80066ba:	2400      	movs	r4, #0
 80066bc:	e7b3      	b.n	8006626 <HAL_SD_GetCardStatus+0x22>
 80066be:	bf00      	nop
 80066c0:	1fe00fff 	.word	0x1fe00fff

080066c4 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80066c4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80066c6:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80066c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80066ca:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80066cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80066ce:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80066d0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80066d2:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80066d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80066d6:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80066d8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80066da:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80066dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80066de:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80066e0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80066e2:	61cb      	str	r3, [r1, #28]
}
 80066e4:	2000      	movs	r0, #0
 80066e6:	4770      	bx	lr

080066e8 <HAL_SD_ConfigWideBusOperation>:
{
 80066e8:	b530      	push	{r4, r5, lr}
 80066ea:	b08b      	sub	sp, #44	; 0x2c
 80066ec:	4604      	mov	r4, r0
 80066ee:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80066f0:	2303      	movs	r3, #3
 80066f2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if (hsd->SdCard.CardType != CARD_SECURED)
 80066f6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d01c      	beq.n	8006736 <HAL_SD_ConfigWideBusOperation+0x4e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80066fc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006700:	d008      	beq.n	8006714 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006702:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006706:	d00a      	beq.n	800671e <HAL_SD_ConfigWideBusOperation+0x36>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006708:	b179      	cbz	r1, 800672a <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800670a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800670c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006710:	6383      	str	r3, [r0, #56]	; 0x38
 8006712:	e014      	b.n	800673e <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006714:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800671a:	6383      	str	r3, [r0, #56]	; 0x38
 800671c:	e00f      	b.n	800673e <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 800671e:	f7ff fa95 	bl	8005c4c <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8006722:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006724:	4303      	orrs	r3, r0
 8006726:	63a3      	str	r3, [r4, #56]	; 0x38
 8006728:	e009      	b.n	800673e <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 800672a:	f7ff fab6 	bl	8005c9a <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 800672e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006730:	4303      	orrs	r3, r0
 8006732:	63a3      	str	r3, [r4, #56]	; 0x38
 8006734:	e003      	b.n	800673e <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006736:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800673c:	6383      	str	r3, [r0, #56]	; 0x38
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800673e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006740:	b1b3      	cbz	r3, 8006770 <HAL_SD_ConfigWideBusOperation+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	4a3a      	ldr	r2, [pc, #232]	; (8006830 <HAL_SD_ConfigWideBusOperation+0x148>)
 8006746:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006748:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800674a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800674e:	6820      	ldr	r0, [r4, #0]
 8006750:	f001 f828 	bl	80077a4 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006754:	b130      	cbz	r0, 8006764 <HAL_SD_ConfigWideBusOperation+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	4935      	ldr	r1, [pc, #212]	; (8006830 <HAL_SD_ConfigWideBusOperation+0x148>)
 800675a:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800675c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800675e:	4303      	orrs	r3, r0
 8006760:	63a3      	str	r3, [r4, #56]	; 0x38
    status = HAL_ERROR;
 8006762:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8006764:	2301      	movs	r3, #1
 8006766:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800676a:	4628      	mov	r0, r5
 800676c:	b00b      	add	sp, #44	; 0x2c
 800676e:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006770:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006774:	f7fe f95c 	bl	8004a30 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8006778:	4602      	mov	r2, r0
 800677a:	2800      	cmp	r0, #0
 800677c:	d052      	beq.n	8006824 <HAL_SD_ConfigWideBusOperation+0x13c>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800677e:	6863      	ldr	r3, [r4, #4]
 8006780:	9304      	str	r3, [sp, #16]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006782:	68a3      	ldr	r3, [r4, #8]
 8006784:	9305      	str	r3, [sp, #20]
      Init.BusWide             = WideMode;
 8006786:	9506      	str	r5, [sp, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006788:	6923      	ldr	r3, [r4, #16]
 800678a:	9307      	str	r3, [sp, #28]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800678c:	6961      	ldr	r1, [r4, #20]
 800678e:	4b29      	ldr	r3, [pc, #164]	; (8006834 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8006790:	fba3 0302 	umull	r0, r3, r3, r2
 8006794:	0e18      	lsrs	r0, r3, #24
 8006796:	ebb1 6f13 	cmp.w	r1, r3, lsr #24
 800679a:	d30e      	bcc.n	80067ba <HAL_SD_ConfigWideBusOperation+0xd2>
        Init.ClockDiv = hsd->Init.ClockDiv;
 800679c:	9108      	str	r1, [sp, #32]
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 800679e:	69a3      	ldr	r3, [r4, #24]
 80067a0:	9309      	str	r3, [sp, #36]	; 0x24
      (void)SDMMC_Init(hsd->Instance, Init);
 80067a2:	ab0a      	add	r3, sp, #40	; 0x28
 80067a4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80067a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80067ac:	ab04      	add	r3, sp, #16
 80067ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067b0:	6820      	ldr	r0, [r4, #0]
 80067b2:	f000 fedd 	bl	8007570 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 80067b6:	2500      	movs	r5, #0
 80067b8:	e7c7      	b.n	800674a <HAL_SD_ConfigWideBusOperation+0x62>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80067ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80067bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c0:	d008      	beq.n	80067d4 <HAL_SD_ConfigWideBusOperation+0xec>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80067c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c6:	d007      	beq.n	80067d8 <HAL_SD_ConfigWideBusOperation+0xf0>
        if (hsd->Init.ClockDiv == 0U)
 80067c8:	bb11      	cbnz	r1, 8006810 <HAL_SD_ConfigWideBusOperation+0x128>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80067ca:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <HAL_SD_ConfigWideBusOperation+0x150>)
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d91d      	bls.n	800680c <HAL_SD_ConfigWideBusOperation+0x124>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80067d0:	9008      	str	r0, [sp, #32]
 80067d2:	e7e4      	b.n	800679e <HAL_SD_ConfigWideBusOperation+0xb6>
        Init.ClockDiv = hsd->Init.ClockDiv;
 80067d4:	9108      	str	r1, [sp, #32]
 80067d6:	e7e2      	b.n	800679e <HAL_SD_ConfigWideBusOperation+0xb6>
        if (hsd->Init.ClockDiv == 0U)
 80067d8:	b951      	cbnz	r1, 80067f0 <HAL_SD_ConfigWideBusOperation+0x108>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80067da:	4b18      	ldr	r3, [pc, #96]	; (800683c <HAL_SD_ConfigWideBusOperation+0x154>)
 80067dc:	429a      	cmp	r2, r3
 80067de:	d905      	bls.n	80067ec <HAL_SD_ConfigWideBusOperation+0x104>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80067e0:	4b14      	ldr	r3, [pc, #80]	; (8006834 <HAL_SD_ConfigWideBusOperation+0x14c>)
 80067e2:	fba3 2302 	umull	r2, r3, r3, r2
 80067e6:	0e5b      	lsrs	r3, r3, #25
 80067e8:	9308      	str	r3, [sp, #32]
 80067ea:	e7d8      	b.n	800679e <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 80067ec:	9108      	str	r1, [sp, #32]
 80067ee:	e7d6      	b.n	800679e <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80067f0:	004b      	lsls	r3, r1, #1
 80067f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f6:	4811      	ldr	r0, [pc, #68]	; (800683c <HAL_SD_ConfigWideBusOperation+0x154>)
 80067f8:	4283      	cmp	r3, r0
 80067fa:	d905      	bls.n	8006808 <HAL_SD_ConfigWideBusOperation+0x120>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80067fc:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <HAL_SD_ConfigWideBusOperation+0x14c>)
 80067fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006802:	0e5b      	lsrs	r3, r3, #25
 8006804:	9308      	str	r3, [sp, #32]
 8006806:	e7ca      	b.n	800679e <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006808:	9108      	str	r1, [sp, #32]
 800680a:	e7c8      	b.n	800679e <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800680c:	9108      	str	r1, [sp, #32]
 800680e:	e7c6      	b.n	800679e <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006810:	004b      	lsls	r3, r1, #1
 8006812:	fbb2 f2f3 	udiv	r2, r2, r3
 8006816:	4b08      	ldr	r3, [pc, #32]	; (8006838 <HAL_SD_ConfigWideBusOperation+0x150>)
 8006818:	429a      	cmp	r2, r3
 800681a:	d901      	bls.n	8006820 <HAL_SD_ConfigWideBusOperation+0x138>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800681c:	9008      	str	r0, [sp, #32]
 800681e:	e7be      	b.n	800679e <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006820:	9108      	str	r1, [sp, #32]
 8006822:	e7bc      	b.n	800679e <HAL_SD_ConfigWideBusOperation+0xb6>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006824:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006826:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800682a:	63a3      	str	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 800682c:	2501      	movs	r5, #1
 800682e:	e78c      	b.n	800674a <HAL_SD_ConfigWideBusOperation+0x62>
 8006830:	1fe00fff 	.word	0x1fe00fff
 8006834:	55e63b89 	.word	0x55e63b89
 8006838:	017d7840 	.word	0x017d7840
 800683c:	02faf080 	.word	0x02faf080

08006840 <HAL_SD_GetCardState>:
{
 8006840:	b510      	push	{r4, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8006846:	2300      	movs	r3, #0
 8006848:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 800684a:	a901      	add	r1, sp, #4
 800684c:	f7ff fa4c 	bl	8005ce8 <SD_SendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006850:	b110      	cbz	r0, 8006858 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 8006852:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006854:	4303      	orrs	r3, r0
 8006856:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006858:	9801      	ldr	r0, [sp, #4]
 800685a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800685e:	b002      	add	sp, #8
 8006860:	bd10      	pop	{r4, pc}

08006862 <HAL_SD_Init>:
{
 8006862:	b570      	push	{r4, r5, r6, lr}
 8006864:	b086      	sub	sp, #24
  if (hsd == NULL)
 8006866:	2800      	cmp	r0, #0
 8006868:	d058      	beq.n	800691c <HAL_SD_Init+0xba>
 800686a:	4604      	mov	r4, r0
  if (hsd->State == HAL_SD_STATE_RESET)
 800686c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006870:	b93b      	cbnz	r3, 8006882 <HAL_SD_Init+0x20>
    hsd->Lock = HAL_UNLOCKED;
 8006872:	7703      	strb	r3, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8006874:	6983      	ldr	r3, [r0, #24]
 8006876:	b90b      	cbnz	r3, 800687c <HAL_SD_Init+0x1a>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8006878:	2302      	movs	r3, #2
 800687a:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 800687c:	4620      	mov	r0, r4
 800687e:	f003 f833 	bl	80098e8 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8006882:	2303      	movs	r3, #3
 8006884:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006888:	4620      	mov	r0, r4
 800688a:	f7ff fe4f 	bl	800652c <HAL_SD_InitCard>
 800688e:	b118      	cbz	r0, 8006898 <HAL_SD_Init+0x36>
    return HAL_ERROR;
 8006890:	2501      	movs	r5, #1
}
 8006892:	4628      	mov	r0, r5
 8006894:	b006      	add	sp, #24
 8006896:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006898:	a901      	add	r1, sp, #4
 800689a:	4620      	mov	r0, r4
 800689c:	f7ff feb2 	bl	8006604 <HAL_SD_GetCardStatus>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d13d      	bne.n	8006920 <HAL_SD_Init+0xbe>
  speedgrade = CardStatus.UhsSpeedGrade;
 80068a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80068a8:	b2da      	uxtb	r2, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 80068aa:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80068ae:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80068b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80068b2:	2901      	cmp	r1, #1
 80068b4:	d00b      	beq.n	80068ce <HAL_SD_Init+0x6c>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80068b6:	2901      	cmp	r1, #1
 80068b8:	d00f      	beq.n	80068da <HAL_SD_Init+0x78>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80068ba:	2300      	movs	r3, #0
 80068bc:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80068be:	68e1      	ldr	r1, [r4, #12]
 80068c0:	4620      	mov	r0, r4
 80068c2:	f7ff ff11 	bl	80066e8 <HAL_SD_ConfigWideBusOperation>
 80068c6:	4605      	mov	r5, r0
 80068c8:	b158      	cbz	r0, 80068e2 <HAL_SD_Init+0x80>
    return HAL_ERROR;
 80068ca:	2501      	movs	r5, #1
 80068cc:	e7e1      	b.n	8006892 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80068ce:	4313      	orrs	r3, r2
 80068d0:	d0f1      	beq.n	80068b6 <HAL_SD_Init+0x54>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80068d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068d6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80068d8:	e7f1      	b.n	80068be <HAL_SD_Init+0x5c>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80068da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068de:	65e3      	str	r3, [r4, #92]	; 0x5c
 80068e0:	e7ed      	b.n	80068be <HAL_SD_Init+0x5c>
  tickstart = HAL_GetTick();
 80068e2:	f7f9 fd5b 	bl	800039c <HAL_GetTick>
 80068e6:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80068e8:	4620      	mov	r0, r4
 80068ea:	f7ff ffa9 	bl	8006840 <HAL_SD_GetCardState>
 80068ee:	2804      	cmp	r0, #4
 80068f0:	d00d      	beq.n	800690e <HAL_SD_Init+0xac>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80068f2:	f7f9 fd53 	bl	800039c <HAL_GetTick>
 80068f6:	1b80      	subs	r0, r0, r6
 80068f8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80068fc:	d1f4      	bne.n	80068e8 <HAL_SD_Init+0x86>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80068fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006902:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006904:	2301      	movs	r3, #1
 8006906:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 800690a:	2503      	movs	r5, #3
 800690c:	e7c1      	b.n	8006892 <HAL_SD_Init+0x30>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800690e:	2300      	movs	r3, #0
 8006910:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8006912:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8006914:	2301      	movs	r3, #1
 8006916:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800691a:	e7ba      	b.n	8006892 <HAL_SD_Init+0x30>
    return HAL_ERROR;
 800691c:	2501      	movs	r5, #1
 800691e:	e7b8      	b.n	8006892 <HAL_SD_Init+0x30>
    return HAL_ERROR;
 8006920:	2501      	movs	r5, #1
 8006922:	e7b6      	b.n	8006892 <HAL_SD_Init+0x30>

08006924 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006924:	4770      	bx	lr

08006926 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006926:	4770      	bx	lr

08006928 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006928:	4770      	bx	lr

0800692a <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800692a:	4770      	bx	lr

0800692c <HAL_SD_IRQHandler>:
{
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8006930:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006932:	6803      	ldr	r3, [r0, #0]
 8006934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006936:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800693a:	d002      	beq.n	8006942 <HAL_SD_IRQHandler+0x16>
 800693c:	f015 0f08 	tst.w	r5, #8
 8006940:	d12a      	bne.n	8006998 <HAL_SD_IRQHandler+0x6c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006944:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006948:	d067      	beq.n	8006a1a <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800694a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800694e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006950:	6822      	ldr	r2, [r4, #0]
 8006952:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006954:	4b7e      	ldr	r3, [pc, #504]	; (8006b50 <HAL_SD_IRQHandler+0x224>)
 8006956:	400b      	ands	r3, r1
 8006958:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800695a:	6822      	ldr	r2, [r4, #0]
 800695c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800695e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006962:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006964:	6822      	ldr	r2, [r4, #0]
 8006966:	68d3      	ldr	r3, [r2, #12]
 8006968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800696c:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 800696e:	f015 0f08 	tst.w	r5, #8
 8006972:	d025      	beq.n	80069c0 <HAL_SD_IRQHandler+0x94>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006974:	f015 0f22 	tst.w	r5, #34	; 0x22
 8006978:	d111      	bne.n	800699e <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	4a75      	ldr	r2, [pc, #468]	; (8006b54 <HAL_SD_IRQHandler+0x228>)
 800697e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006980:	2301      	movs	r3, #1
 8006982:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006986:	2300      	movs	r3, #0
 8006988:	6323      	str	r3, [r4, #48]	; 0x30
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800698a:	f015 0f03 	tst.w	r5, #3
 800698e:	d013      	beq.n	80069b8 <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 8006990:	4620      	mov	r0, r4
 8006992:	f001 fbf7 	bl	8008184 <HAL_SD_RxCpltCallback>
 8006996:	e001      	b.n	800699c <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 8006998:	f7ff f80e 	bl	80059b8 <SD_Read_IT>
}
 800699c:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800699e:	6820      	ldr	r0, [r4, #0]
 80069a0:	f000 ff7e 	bl	80078a0 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 80069a4:	4603      	mov	r3, r0
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d0e7      	beq.n	800697a <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 80069aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069ac:	4313      	orrs	r3, r2
 80069ae:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80069b0:	4620      	mov	r0, r4
 80069b2:	f7ff fbb9 	bl	8006128 <HAL_SD_ErrorCallback>
 80069b6:	e7e0      	b.n	800697a <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 80069b8:	4620      	mov	r0, r4
 80069ba:	f001 fbde 	bl	800817a <HAL_SD_TxCpltCallback>
 80069be:	e7ed      	b.n	800699c <HAL_SD_IRQHandler+0x70>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80069c0:	f015 0f80 	tst.w	r5, #128	; 0x80
 80069c4:	d0ea      	beq.n	800699c <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 80069c6:	6822      	ldr	r2, [r4, #0]
 80069c8:	2300      	movs	r3, #0
 80069ca:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80069cc:	6822      	ldr	r2, [r4, #0]
 80069ce:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80069d0:	6822      	ldr	r2, [r4, #0]
 80069d2:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80069d4:	f015 0f22 	tst.w	r5, #34	; 0x22
 80069d8:	d10e      	bne.n	80069f8 <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 80069da:	2301      	movs	r3, #1
 80069dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	6323      	str	r3, [r4, #48]	; 0x30
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80069e4:	f015 0f30 	tst.w	r5, #48	; 0x30
 80069e8:	d113      	bne.n	8006a12 <HAL_SD_IRQHandler+0xe6>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80069ea:	f015 0f03 	tst.w	r5, #3
 80069ee:	d0d5      	beq.n	800699c <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 80069f0:	4620      	mov	r0, r4
 80069f2:	f001 fbc7 	bl	8008184 <HAL_SD_RxCpltCallback>
 80069f6:	e7d1      	b.n	800699c <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	f000 ff51 	bl	80078a0 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 80069fe:	4603      	mov	r3, r0
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d0ea      	beq.n	80069da <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 8006a04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a06:	4313      	orrs	r3, r2
 8006a08:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f7ff fb8c 	bl	8006128 <HAL_SD_ErrorCallback>
 8006a10:	e7e3      	b.n	80069da <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 8006a12:	4620      	mov	r0, r4
 8006a14:	f001 fbb1 	bl	800817a <HAL_SD_TxCpltCallback>
 8006a18:	e7e7      	b.n	80069ea <HAL_SD_IRQHandler+0xbe>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a1c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006a20:	d002      	beq.n	8006a28 <HAL_SD_IRQHandler+0xfc>
 8006a22:	f015 0f08 	tst.w	r5, #8
 8006a26:	d162      	bne.n	8006aee <HAL_SD_IRQHandler+0x1c2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a2a:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 8006a2e:	d06b      	beq.n	8006b08 <HAL_SD_IRQHandler+0x1dc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a32:	f012 0f02 	tst.w	r2, #2
 8006a36:	d003      	beq.n	8006a40 <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a3a:	f042 0202 	orr.w	r2, r2, #2
 8006a3e:	63a2      	str	r2, [r4, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a42:	f012 0f08 	tst.w	r2, #8
 8006a46:	d003      	beq.n	8006a50 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006a48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a4a:	f042 0208 	orr.w	r2, r2, #8
 8006a4e:	63a2      	str	r2, [r4, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a52:	f012 0f20 	tst.w	r2, #32
 8006a56:	d003      	beq.n	8006a60 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006a58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a5a:	f042 0220 	orr.w	r2, r2, #32
 8006a5e:	63a2      	str	r2, [r4, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a62:	f012 0f10 	tst.w	r2, #16
 8006a66:	d003      	beq.n	8006a70 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006a68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a6a:	f042 0210 	orr.w	r2, r2, #16
 8006a6e:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a70:	4a38      	ldr	r2, [pc, #224]	; (8006b54 <HAL_SD_IRQHandler+0x228>)
 8006a72:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006a74:	6822      	ldr	r2, [r4, #0]
 8006a76:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006a78:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8006a7c:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	68d3      	ldr	r3, [r2, #12]
 8006a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a86:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006a88:	6822      	ldr	r2, [r4, #0]
 8006a8a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a90:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	68d3      	ldr	r3, [r2, #12]
 8006a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9a:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	f000 feff 	bl	80078a0 <SDMMC_CmdStopTransfer>
 8006aa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006aa4:	4303      	orrs	r3, r0
 8006aa6:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006aa8:	6822      	ldr	r2, [r4, #0]
 8006aaa:	68d3      	ldr	r3, [r2, #12]
 8006aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ab0:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ab8:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8006aba:	f015 0f08 	tst.w	r5, #8
 8006abe:	d11a      	bne.n	8006af6 <HAL_SD_IRQHandler+0x1ca>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006ac0:	f015 0f80 	tst.w	r5, #128	; 0x80
 8006ac4:	f43f af6a 	beq.w	800699c <HAL_SD_IRQHandler+0x70>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006ac8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f43f af66 	beq.w	800699c <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006ad0:	6822      	ldr	r2, [r4, #0]
 8006ad2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	63d3      	str	r3, [r2, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	2200      	movs	r2, #0
 8006ade:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f7ff fb1e 	bl	8006128 <HAL_SD_ErrorCallback>
 8006aec:	e756      	b.n	800699c <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 8006aee:	4620      	mov	r0, r4
 8006af0:	f7fe ff7f 	bl	80059f2 <SD_Write_IT>
 8006af4:	e752      	b.n	800699c <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 8006af6:	2301      	movs	r3, #1
 8006af8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006afc:	2300      	movs	r3, #0
 8006afe:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006b00:	4620      	mov	r0, r4
 8006b02:	f7ff fb11 	bl	8006128 <HAL_SD_ErrorCallback>
 8006b06:	e749      	b.n	800699c <HAL_SD_IRQHandler+0x70>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8006b0e:	f43f af45 	beq.w	800699c <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b16:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b1c:	f013 0f04 	tst.w	r3, #4
 8006b20:	d10a      	bne.n	8006b38 <HAL_SD_IRQHandler+0x20c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006b22:	f015 0f20 	tst.w	r5, #32
 8006b26:	d003      	beq.n	8006b30 <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f7ff fefe 	bl	800692a <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 8006b2e:	e735      	b.n	800699c <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006b30:	4620      	mov	r0, r4
 8006b32:	f7ff fef8 	bl	8006926 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 8006b36:	e731      	b.n	800699c <HAL_SD_IRQHandler+0x70>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006b38:	f015 0f20 	tst.w	r5, #32
 8006b3c:	d003      	beq.n	8006b46 <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f7ff fef2 	bl	8006928 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 8006b44:	e72a      	b.n	800699c <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006b46:	4620      	mov	r0, r4
 8006b48:	f7ff feec 	bl	8006924 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006b4c:	e726      	b.n	800699c <HAL_SD_IRQHandler+0x70>
 8006b4e:	bf00      	nop
 8006b50:	ffff3ec5 	.word	0xffff3ec5
 8006b54:	18000f3a 	.word	0x18000f3a

08006b58 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006b58:	b308      	cbz	r0, 8006b9e <HAL_SDRAM_Init+0x46>
{
 8006b5a:	b538      	push	{r3, r4, r5, lr}
 8006b5c:	460d      	mov	r5, r1
 8006b5e:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006b60:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006b64:	b1b3      	cbz	r3, 8006b94 <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b66:	2302      	movs	r3, #2
 8006b68:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	f851 0b04 	ldr.w	r0, [r1], #4
 8006b72:	f000 fc39 	bl	80073e8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006b76:	6862      	ldr	r2, [r4, #4]
 8006b78:	4629      	mov	r1, r5
 8006b7a:	6820      	ldr	r0, [r4, #0]
 8006b7c:	f000 fc6e 	bl	800745c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006b80:	4a08      	ldr	r2, [pc, #32]	; (8006ba4 <HAL_SDRAM_Init+0x4c>)
 8006b82:	6813      	ldr	r3, [r2, #0]
 8006b84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b88:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 8006b90:	2000      	movs	r0, #0
}
 8006b92:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8006b94:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8006b98:	f001 fcc0 	bl	800851c <HAL_SDRAM_MspInit>
 8006b9c:	e7e3      	b.n	8006b66 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8006b9e:	2001      	movs	r0, #1
}
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	52004000 	.word	0x52004000

08006ba8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006bac:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006bb0:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006bb2:	2802      	cmp	r0, #2
 8006bb4:	d005      	beq.n	8006bc2 <HAL_SDRAM_SendCommand+0x1a>
 8006bb6:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006bb8:	2805      	cmp	r0, #5
 8006bba:	bf18      	it	ne
 8006bbc:	2801      	cmpne	r0, #1
 8006bbe:	d001      	beq.n	8006bc4 <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8006bc0:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006bca:	6820      	ldr	r0, [r4, #0]
 8006bcc:	f000 fc92 	bl	80074f4 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d004      	beq.n	8006be0 <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8006bdc:	2000      	movs	r0, #0
 8006bde:	e7f0      	b.n	8006bc2 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006be0:	2305      	movs	r3, #5
 8006be2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8006be6:	2000      	movs	r0, #0
 8006be8:	e7eb      	b.n	8006bc2 <HAL_SDRAM_SendCommand+0x1a>

08006bea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006bea:	b510      	push	{r4, lr}
 8006bec:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006bee:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006bf2:	b2d8      	uxtb	r0, r3
 8006bf4:	2802      	cmp	r0, #2
 8006bf6:	d005      	beq.n	8006c04 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006bf8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d001      	beq.n	8006c06 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8006c02:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006c04:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c06:	2302      	movs	r3, #2
 8006c08:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006c0c:	6820      	ldr	r0, [r4, #0]
 8006c0e:	f000 fc87 	bl	8007520 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006c12:	2301      	movs	r3, #1
 8006c14:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8006c18:	2000      	movs	r0, #0
 8006c1a:	e7f3      	b.n	8006c04 <HAL_SDRAM_ProgramRefreshRate+0x1a>

08006c1c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006c1c:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8006c1e:	6802      	ldr	r2, [r0, #0]
 8006c20:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006c22:	6991      	ldr	r1, [r2, #24]
 8006c24:	f041 0108 	orr.w	r1, r1, #8
 8006c28:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006c2a:	6801      	ldr	r1, [r0, #0]
 8006c2c:	698a      	ldr	r2, [r1, #24]
 8006c2e:	f042 0210 	orr.w	r2, r2, #16
 8006c32:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c34:	6801      	ldr	r1, [r0, #0]
 8006c36:	680a      	ldr	r2, [r1, #0]
 8006c38:	f022 0201 	bic.w	r2, r2, #1
 8006c3c:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006c3e:	6801      	ldr	r1, [r0, #0]
 8006c40:	690c      	ldr	r4, [r1, #16]
 8006c42:	4a29      	ldr	r2, [pc, #164]	; (8006ce8 <SPI_CloseTransfer+0xcc>)
 8006c44:	4022      	ands	r2, r4
 8006c46:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006c48:	6801      	ldr	r1, [r0, #0]
 8006c4a:	688a      	ldr	r2, [r1, #8]
 8006c4c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006c50:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c52:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	2a04      	cmp	r2, #4
 8006c5a:	d00d      	beq.n	8006c78 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006c5c:	f013 0f20 	tst.w	r3, #32
 8006c60:	d00a      	beq.n	8006c78 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006c62:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006c66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c6a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006c6e:	6801      	ldr	r1, [r0, #0]
 8006c70:	698a      	ldr	r2, [r1, #24]
 8006c72:	f042 0220 	orr.w	r2, r2, #32
 8006c76:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c78:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	2a03      	cmp	r2, #3
 8006c80:	d00d      	beq.n	8006c9e <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006c82:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c86:	d00a      	beq.n	8006c9e <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c88:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006c8c:	f042 0204 	orr.w	r2, r2, #4
 8006c90:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c94:	6801      	ldr	r1, [r0, #0]
 8006c96:	698a      	ldr	r2, [r1, #24]
 8006c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c9c:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006c9e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006ca2:	d00a      	beq.n	8006cba <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006ca4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006ca8:	f042 0201 	orr.w	r2, r2, #1
 8006cac:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006cb0:	6801      	ldr	r1, [r0, #0]
 8006cb2:	698a      	ldr	r2, [r1, #24]
 8006cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb8:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006cba:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006cbe:	d00a      	beq.n	8006cd6 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006cc0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006cc4:	f043 0308 	orr.w	r3, r3, #8
 8006cc8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ccc:	6802      	ldr	r2, [r0, #0]
 8006cce:	6993      	ldr	r3, [r2, #24]
 8006cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd4:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006cdc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8006ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	fffffc90 	.word	0xfffffc90

08006cec <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006cec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006cee:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006cf0:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006cf2:	3008      	adds	r0, #8
 8006cf4:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 8006cf6:	fb03 0000 	mla	r0, r3, r0, r0
 8006cfa:	4770      	bx	lr

08006cfc <HAL_SPI_Init>:
  if (hspi == NULL)
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	f000 809f 	beq.w	8006e40 <HAL_SPI_Init+0x144>
{
 8006d02:	b570      	push	{r4, r5, r6, lr}
 8006d04:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d06:	2300      	movs	r3, #0
 8006d08:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006d0a:	6805      	ldr	r5, [r0, #0]
 8006d0c:	4b50      	ldr	r3, [pc, #320]	; (8006e50 <HAL_SPI_Init+0x154>)
 8006d0e:	4e51      	ldr	r6, [pc, #324]	; (8006e54 <HAL_SPI_Init+0x158>)
 8006d10:	429d      	cmp	r5, r3
 8006d12:	bf18      	it	ne
 8006d14:	42b5      	cmpne	r5, r6
 8006d16:	bf14      	ite	ne
 8006d18:	2601      	movne	r6, #1
 8006d1a:	2600      	moveq	r6, #0
 8006d1c:	d007      	beq.n	8006d2e <HAL_SPI_Init+0x32>
 8006d1e:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8006d22:	429d      	cmp	r5, r3
 8006d24:	d003      	beq.n	8006d2e <HAL_SPI_Init+0x32>
 8006d26:	68c3      	ldr	r3, [r0, #12]
 8006d28:	2b0f      	cmp	r3, #15
 8006d2a:	f200 808b 	bhi.w	8006e44 <HAL_SPI_Init+0x148>
  packet_length = SPI_GetPacketSize(hspi);
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7ff ffdc 	bl	8006cec <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006d34:	b12e      	cbz	r6, 8006d42 <HAL_SPI_Init+0x46>
 8006d36:	4b48      	ldr	r3, [pc, #288]	; (8006e58 <HAL_SPI_Init+0x15c>)
 8006d38:	429d      	cmp	r5, r3
 8006d3a:	d002      	beq.n	8006d42 <HAL_SPI_Init+0x46>
 8006d3c:	2808      	cmp	r0, #8
 8006d3e:	f200 8083 	bhi.w	8006e48 <HAL_SPI_Init+0x14c>
 8006d42:	4a43      	ldr	r2, [pc, #268]	; (8006e50 <HAL_SPI_Init+0x154>)
 8006d44:	4b43      	ldr	r3, [pc, #268]	; (8006e54 <HAL_SPI_Init+0x158>)
 8006d46:	429d      	cmp	r5, r3
 8006d48:	bf18      	it	ne
 8006d4a:	4295      	cmpne	r5, r2
 8006d4c:	d003      	beq.n	8006d56 <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d52:	429d      	cmp	r5, r3
 8006d54:	d101      	bne.n	8006d5a <HAL_SPI_Init+0x5e>
 8006d56:	2810      	cmp	r0, #16
 8006d58:	d878      	bhi.n	8006e4c <HAL_SPI_Init+0x150>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d5a:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d054      	beq.n	8006e0c <HAL_SPI_Init+0x110>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006d62:	2302      	movs	r3, #2
 8006d64:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8006d68:	6822      	ldr	r2, [r4, #0]
 8006d6a:	6813      	ldr	r3, [r2, #0]
 8006d6c:	f023 0301 	bic.w	r3, r3, #1
 8006d70:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006d72:	69a3      	ldr	r3, [r4, #24]
 8006d74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d78:	d04e      	beq.n	8006e18 <HAL_SPI_Init+0x11c>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006d7a:	69e3      	ldr	r3, [r4, #28]
 8006d7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006d82:	4313      	orrs	r3, r2
 8006d84:	68e1      	ldr	r1, [r4, #12]
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006d8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d90:	4313      	orrs	r3, r2
 8006d92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006d94:	4313      	orrs	r3, r2
 8006d96:	69a2      	ldr	r2, [r4, #24]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	6922      	ldr	r2, [r4, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	6962      	ldr	r2, [r4, #20]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	6a22      	ldr	r2, [r4, #32]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	6862      	ldr	r2, [r4, #4]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006dac:	4313      	orrs	r3, r2
 8006dae:	68a2      	ldr	r2, [r4, #8]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006db4:	4313      	orrs	r3, r2
 8006db6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006db8:	6822      	ldr	r2, [r4, #0]
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006dbe:	6863      	ldr	r3, [r4, #4]
 8006dc0:	b96b      	cbnz	r3, 8006dde <HAL_SPI_Init+0xe2>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006dc2:	6822      	ldr	r2, [r4, #0]
 8006dc4:	6893      	ldr	r3, [r2, #8]
 8006dc6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8006dca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006dce:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006dd0:	6822      	ldr	r2, [r4, #0]
 8006dd2:	6893      	ldr	r3, [r2, #8]
 8006dd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006dd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ddc:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dde:	6822      	ldr	r2, [r4, #0]
 8006de0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006de2:	f023 0301 	bic.w	r3, r3, #1
 8006de6:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006de8:	6863      	ldr	r3, [r4, #4]
 8006dea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006dee:	d006      	beq.n	8006dfe <HAL_SPI_Init+0x102>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006df0:	6822      	ldr	r2, [r4, #0]
 8006df2:	68d3      	ldr	r3, [r2, #12]
 8006df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006df8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006dfa:	430b      	orrs	r3, r1
 8006dfc:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dfe:	2000      	movs	r0, #0
 8006e00:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006e04:	2301      	movs	r3, #1
 8006e06:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006e0c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8006e10:	4620      	mov	r0, r4
 8006e12:	f002 fded 	bl	80099f0 <HAL_SPI_MspInit>
 8006e16:	e7a4      	b.n	8006d62 <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006e18:	6863      	ldr	r3, [r4, #4]
 8006e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e1e:	d006      	beq.n	8006e2e <HAL_SPI_Init+0x132>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1aa      	bne.n	8006d7a <HAL_SPI_Init+0x7e>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006e24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e2a:	d1a6      	bne.n	8006d7a <HAL_SPI_Init+0x7e>
 8006e2c:	e002      	b.n	8006e34 <HAL_SPI_Init+0x138>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006e2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006e30:	2a00      	cmp	r2, #0
 8006e32:	d1f5      	bne.n	8006e20 <HAL_SPI_Init+0x124>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006e34:	6822      	ldr	r2, [r4, #0]
 8006e36:	6813      	ldr	r3, [r2, #0]
 8006e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	e79c      	b.n	8006d7a <HAL_SPI_Init+0x7e>
    return HAL_ERROR;
 8006e40:	2001      	movs	r0, #1
}
 8006e42:	4770      	bx	lr
    return HAL_ERROR;
 8006e44:	2001      	movs	r0, #1
 8006e46:	e7e0      	b.n	8006e0a <HAL_SPI_Init+0x10e>
    return HAL_ERROR;
 8006e48:	2001      	movs	r0, #1
 8006e4a:	e7de      	b.n	8006e0a <HAL_SPI_Init+0x10e>
 8006e4c:	2001      	movs	r0, #1
 8006e4e:	e7dc      	b.n	8006e0a <HAL_SPI_Init+0x10e>
 8006e50:	40013000 	.word	0x40013000
 8006e54:	40003800 	.word	0x40003800
 8006e58:	40003c00 	.word	0x40003c00

08006e5c <HAL_SPI_TransmitReceive_DMA>:
{
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8006e60:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	f000 8127 	beq.w	80070b8 <HAL_SPI_TransmitReceive_DMA+0x25c>
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tmp_state   = hspi->State;
 8006e72:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006e76:	b2db      	uxtb	r3, r3
  tmp_mode    = hspi->Init.Mode;
 8006e78:	6840      	ldr	r0, [r0, #4]
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8006e7a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8006e7e:	d073      	beq.n	8006f68 <HAL_SPI_TransmitReceive_DMA+0x10c>
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d177      	bne.n	8006f74 <HAL_SPI_TransmitReceive_DMA+0x118>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006e84:	fab2 f382 	clz	r3, r2
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	2900      	cmp	r1, #0
 8006e8c:	bf08      	it	eq
 8006e8e:	2301      	moveq	r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d174      	bne.n	8006f7e <HAL_SPI_TransmitReceive_DMA+0x122>
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	d072      	beq.n	8006f7e <HAL_SPI_TransmitReceive_DMA+0x122>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e98:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d002      	beq.n	8006ea8 <HAL_SPI_TransmitReceive_DMA+0x4c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ea2:	2305      	movs	r3, #5
 8006ea4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006eae:	65e1      	str	r1, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006eb0:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006eb4:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006eb8:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006eba:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006ebe:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8006ec2:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006ec4:	6763      	str	r3, [r4, #116]	; 0x74
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006ec6:	6822      	ldr	r2, [r4, #0]
 8006ec8:	6893      	ldr	r3, [r2, #8]
 8006eca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006ece:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006ed0:	68e3      	ldr	r3, [r4, #12]
 8006ed2:	2b0f      	cmp	r3, #15
 8006ed4:	d904      	bls.n	8006ee0 <HAL_SPI_TransmitReceive_DMA+0x84>
 8006ed6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006ed8:	6992      	ldr	r2, [r2, #24]
 8006eda:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006ede:	d153      	bne.n	8006f88 <HAL_SPI_TransmitReceive_DMA+0x12c>
 8006ee0:	2b07      	cmp	r3, #7
 8006ee2:	d907      	bls.n	8006ef4 <HAL_SPI_TransmitReceive_DMA+0x98>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006ee4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006ee6:	6992      	ldr	r2, [r2, #24]
 8006ee8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006eec:	bf18      	it	ne
 8006eee:	f5b2 4f80 	cmpne.w	r2, #16384	; 0x4000
 8006ef2:	d149      	bne.n	8006f88 <HAL_SPI_TransmitReceive_DMA+0x12c>
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006ef4:	2b07      	cmp	r3, #7
 8006ef6:	d86c      	bhi.n	8006fd2 <HAL_SPI_TransmitReceive_DMA+0x176>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006ef8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006efa:	699a      	ldr	r2, [r3, #24]
 8006efc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006f00:	d047      	beq.n	8006f92 <HAL_SPI_TransmitReceive_DMA+0x136>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f08:	d04b      	beq.n	8006fa2 <HAL_SPI_TransmitReceive_DMA+0x146>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f0a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006f0c:	699a      	ldr	r2, [r3, #24]
 8006f0e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006f12:	d04e      	beq.n	8006fb2 <HAL_SPI_TransmitReceive_DMA+0x156>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f1a:	d052      	beq.n	8006fc2 <HAL_SPI_TransmitReceive_DMA+0x166>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006f1c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d071      	beq.n	800700a <HAL_SPI_TransmitReceive_DMA+0x1ae>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006f26:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006f28:	4a64      	ldr	r2, [pc, #400]	; (80070bc <HAL_SPI_TransmitReceive_DMA+0x260>)
 8006f2a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006f2c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006f2e:	4a64      	ldr	r2, [pc, #400]	; (80070c0 <HAL_SPI_TransmitReceive_DMA+0x264>)
 8006f30:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006f32:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006f34:	4a63      	ldr	r2, [pc, #396]	; (80070c4 <HAL_SPI_TransmitReceive_DMA+0x268>)
 8006f36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8006f38:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8006f3e:	6821      	ldr	r1, [r4, #0]
 8006f40:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f48:	3130      	adds	r1, #48	; 0x30
 8006f4a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006f4c:	f7fa fd36 	bl	80019bc <HAL_DMA_Start_IT>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d061      	beq.n	8007018 <HAL_SPI_TransmitReceive_DMA+0x1bc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f54:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006f58:	f043 0310 	orr.w	r3, r3, #16
 8006f5c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006f60:	2001      	movs	r0, #1
 8006f62:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
    return errorcode;
 8006f66:	e00e      	b.n	8006f86 <HAL_SPI_TransmitReceive_DMA+0x12a>
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8006f68:	68a0      	ldr	r0, [r4, #8]
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d188      	bne.n	8006e80 <HAL_SPI_TransmitReceive_DMA+0x24>
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d186      	bne.n	8006e80 <HAL_SPI_TransmitReceive_DMA+0x24>
 8006f72:	e787      	b.n	8006e84 <HAL_SPI_TransmitReceive_DMA+0x28>
    __HAL_UNLOCK(hspi);
 8006f74:	2300      	movs	r3, #0
 8006f76:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8006f7a:	2002      	movs	r0, #2
 8006f7c:	e003      	b.n	8006f86 <HAL_SPI_TransmitReceive_DMA+0x12a>
    __HAL_UNLOCK(hspi);
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8006f84:	2001      	movs	r0, #1
}
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hspi);
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8006f8e:	2001      	movs	r0, #1
 8006f90:	e7f9      	b.n	8006f86 <HAL_SPI_TransmitReceive_DMA+0x12a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006f92:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8006f96:	b292      	uxth	r2, r2
 8006f98:	3201      	adds	r2, #1
 8006f9a:	0852      	lsrs	r2, r2, #1
 8006f9c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 8006fa0:	e7af      	b.n	8006f02 <HAL_SPI_TransmitReceive_DMA+0xa6>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006fa2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3303      	adds	r3, #3
 8006faa:	089b      	lsrs	r3, r3, #2
 8006fac:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8006fb0:	e7ab      	b.n	8006f0a <HAL_SPI_TransmitReceive_DMA+0xae>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006fb2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006fb6:	b292      	uxth	r2, r2
 8006fb8:	3201      	adds	r2, #1
 8006fba:	0852      	lsrs	r2, r2, #1
 8006fbc:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 8006fc0:	e7a8      	b.n	8006f14 <HAL_SPI_TransmitReceive_DMA+0xb8>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8006fc2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3303      	adds	r3, #3
 8006fca:	089b      	lsrs	r3, r3, #2
 8006fcc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8006fd0:	e7a4      	b.n	8006f1c <HAL_SPI_TransmitReceive_DMA+0xc0>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006fd2:	2b0f      	cmp	r3, #15
 8006fd4:	d8a2      	bhi.n	8006f1c <HAL_SPI_TransmitReceive_DMA+0xc0>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006fd6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fde:	d00c      	beq.n	8006ffa <HAL_SPI_TransmitReceive_DMA+0x19e>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006fe0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fe8:	d198      	bne.n	8006f1c <HAL_SPI_TransmitReceive_DMA+0xc0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006fea:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8006ff8:	e790      	b.n	8006f1c <HAL_SPI_TransmitReceive_DMA+0xc0>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006ffa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3301      	adds	r3, #1
 8007002:	085b      	lsrs	r3, r3, #1
 8007004:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8007008:	e7ea      	b.n	8006fe0 <HAL_SPI_TransmitReceive_DMA+0x184>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800700a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800700c:	4a2e      	ldr	r2, [pc, #184]	; (80070c8 <HAL_SPI_TransmitReceive_DMA+0x26c>)
 800700e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007010:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007012:	4a2e      	ldr	r2, [pc, #184]	; (80070cc <HAL_SPI_TransmitReceive_DMA+0x270>)
 8007014:	63da      	str	r2, [r3, #60]	; 0x3c
 8007016:	e78c      	b.n	8006f32 <HAL_SPI_TransmitReceive_DMA+0xd6>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007018:	6822      	ldr	r2, [r4, #0]
 800701a:	6893      	ldr	r3, [r2, #8]
 800701c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007020:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007022:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8007024:	2300      	movs	r3, #0
 8007026:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007028:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800702a:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800702c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800702e:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007030:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8007032:	6513      	str	r3, [r2, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8007034:	6822      	ldr	r2, [r4, #0]
 8007036:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800703a:	b29b      	uxth	r3, r3
 800703c:	3220      	adds	r2, #32
 800703e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007040:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007042:	f7fa fcbb 	bl	80019bc <HAL_DMA_Start_IT>
 8007046:	bb08      	cbnz	r0, 800708c <HAL_SPI_TransmitReceive_DMA+0x230>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007048:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007050:	d026      	beq.n	80070a0 <HAL_SPI_TransmitReceive_DMA+0x244>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007052:	6822      	ldr	r2, [r4, #0]
 8007054:	6851      	ldr	r1, [r2, #4]
 8007056:	4b1e      	ldr	r3, [pc, #120]	; (80070d0 <HAL_SPI_TransmitReceive_DMA+0x274>)
 8007058:	400b      	ands	r3, r1
 800705a:	431d      	orrs	r5, r3
 800705c:	6055      	str	r5, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800705e:	6822      	ldr	r2, [r4, #0]
 8007060:	6893      	ldr	r3, [r2, #8]
 8007062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007066:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007068:	6822      	ldr	r2, [r4, #0]
 800706a:	6913      	ldr	r3, [r2, #16]
 800706c:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 8007070:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8007072:	6822      	ldr	r2, [r4, #0]
 8007074:	6813      	ldr	r3, [r2, #0]
 8007076:	f043 0301 	orr.w	r3, r3, #1
 800707a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800707c:	6863      	ldr	r3, [r4, #4]
 800707e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007082:	d013      	beq.n	80070ac <HAL_SPI_TransmitReceive_DMA+0x250>
  __HAL_UNLOCK(hspi);
 8007084:	2300      	movs	r3, #0
 8007086:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800708a:	e77c      	b.n	8006f86 <HAL_SPI_TransmitReceive_DMA+0x12a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800708c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007090:	f043 0310 	orr.w	r3, r3, #16
 8007094:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007098:	2001      	movs	r0, #1
 800709a:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
    return errorcode;
 800709e:	e772      	b.n	8006f86 <HAL_SPI_TransmitReceive_DMA+0x12a>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80070a0:	6822      	ldr	r2, [r4, #0]
 80070a2:	6851      	ldr	r1, [r2, #4]
 80070a4:	4b0a      	ldr	r3, [pc, #40]	; (80070d0 <HAL_SPI_TransmitReceive_DMA+0x274>)
 80070a6:	400b      	ands	r3, r1
 80070a8:	6053      	str	r3, [r2, #4]
 80070aa:	e7d8      	b.n	800705e <HAL_SPI_TransmitReceive_DMA+0x202>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80070ac:	6822      	ldr	r2, [r4, #0]
 80070ae:	6813      	ldr	r3, [r2, #0]
 80070b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	e7e5      	b.n	8007084 <HAL_SPI_TransmitReceive_DMA+0x228>
  __HAL_LOCK(hspi);
 80070b8:	2002      	movs	r0, #2
 80070ba:	e764      	b.n	8006f86 <HAL_SPI_TransmitReceive_DMA+0x12a>
 80070bc:	08007139 	.word	0x08007139
 80070c0:	08007103 	.word	0x08007103
 80070c4:	08007145 	.word	0x08007145
 80070c8:	0800712f 	.word	0x0800712f
 80070cc:	080070d9 	.word	0x080070d9
 80070d0:	ffff0000 	.word	0xffff0000

080070d4 <HAL_SPI_TxCpltCallback>:
}
 80070d4:	4770      	bx	lr

080070d6 <HAL_SPI_RxCpltCallback>:
}
 80070d6:	4770      	bx	lr

080070d8 <SPI_DMAReceiveCplt>:
{
 80070d8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070da:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80070dc:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b07      	cmp	r3, #7
 80070e4:	d009      	beq.n	80070fa <SPI_DMAReceiveCplt+0x22>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80070e6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ee:	d005      	beq.n	80070fc <SPI_DMAReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80070f0:	6802      	ldr	r2, [r0, #0]
 80070f2:	6913      	ldr	r3, [r2, #16]
 80070f4:	f043 0308 	orr.w	r3, r3, #8
 80070f8:	6113      	str	r3, [r2, #16]
}
 80070fa:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 80070fc:	f7ff ffeb 	bl	80070d6 <HAL_SPI_RxCpltCallback>
 8007100:	e7fb      	b.n	80070fa <SPI_DMAReceiveCplt+0x22>

08007102 <SPI_DMATransmitReceiveCplt>:
{
 8007102:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007104:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8007106:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b07      	cmp	r3, #7
 800710e:	d009      	beq.n	8007124 <SPI_DMATransmitReceiveCplt+0x22>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007110:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007118:	d005      	beq.n	8007126 <SPI_DMATransmitReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800711a:	6802      	ldr	r2, [r0, #0]
 800711c:	6913      	ldr	r3, [r2, #16]
 800711e:	f043 0308 	orr.w	r3, r3, #8
 8007122:	6113      	str	r3, [r2, #16]
}
 8007124:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 8007126:	f002 f8cf 	bl	80092c8 <HAL_SPI_TxRxCpltCallback>
 800712a:	e7fb      	b.n	8007124 <SPI_DMATransmitReceiveCplt+0x22>

0800712c <HAL_SPI_RxHalfCpltCallback>:
}
 800712c:	4770      	bx	lr

0800712e <SPI_DMAHalfReceiveCplt>:
{
 800712e:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007130:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007132:	f7ff fffb 	bl	800712c <HAL_SPI_RxHalfCpltCallback>
}
 8007136:	bd08      	pop	{r3, pc}

08007138 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8007138:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800713a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800713c:	f002 f90a 	bl	8009354 <HAL_SPI_TxRxHalfCpltCallback>
}
 8007140:	bd08      	pop	{r3, pc}

08007142 <HAL_SPI_ErrorCallback>:
}
 8007142:	4770      	bx	lr

08007144 <SPI_DMAError>:
{
 8007144:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007146:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007148:	f7fb fa58 	bl	80025fc <HAL_DMA_GetError>
 800714c:	2802      	cmp	r0, #2
 800714e:	d100      	bne.n	8007152 <SPI_DMAError+0xe>
}
 8007150:	bd10      	pop	{r4, pc}
    SPI_CloseTransfer(hspi);
 8007152:	4620      	mov	r0, r4
 8007154:	f7ff fd62 	bl	8006c1c <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007158:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800715c:	f043 0310 	orr.w	r3, r3, #16
 8007160:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007164:	2301      	movs	r3, #1
 8007166:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800716a:	4620      	mov	r0, r4
 800716c:	f7ff ffe9 	bl	8007142 <HAL_SPI_ErrorCallback>
}
 8007170:	e7ee      	b.n	8007150 <SPI_DMAError+0xc>
	...

08007174 <HAL_SPI_IRQHandler>:
{
 8007174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800717a:	6806      	ldr	r6, [r0, #0]
 800717c:	f8d6 a010 	ldr.w	sl, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8007180:	f8d6 9014 	ldr.w	r9, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 8007184:	ea0a 0509 	and.w	r5, sl, r9
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007188:	f8d6 b008 	ldr.w	fp, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800718c:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 8007190:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007192:	f005 0364 	and.w	r3, r5, #100	; 0x64
 8007196:	2b04      	cmp	r3, #4
 8007198:	d048      	beq.n	800722c <HAL_SPI_IRQHandler+0xb8>
  uint32_t handled  = 0UL;
 800719a:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800719c:	f005 0845 	and.w	r8, r5, #69	; 0x45
 80071a0:	f1b8 0f01 	cmp.w	r8, #1
 80071a4:	d049      	beq.n	800723a <HAL_SPI_IRQHandler+0xc6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80071a6:	f005 0226 	and.w	r2, r5, #38	; 0x26
 80071aa:	2a02      	cmp	r2, #2
 80071ac:	d04a      	beq.n	8007244 <HAL_SPI_IRQHandler+0xd0>
  if (handled != 0UL)
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d14b      	bne.n	800724a <HAL_SPI_IRQHandler+0xd6>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80071b2:	f015 0f08 	tst.w	r5, #8
 80071b6:	d07e      	beq.n	80072b6 <HAL_SPI_IRQHandler+0x142>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80071b8:	6822      	ldr	r2, [r4, #0]
 80071ba:	6993      	ldr	r3, [r2, #24]
 80071bc:	f043 0308 	orr.w	r3, r3, #8
 80071c0:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80071c2:	6822      	ldr	r2, [r4, #0]
 80071c4:	6993      	ldr	r3, [r2, #24]
 80071c6:	f043 0310 	orr.w	r3, r3, #16
 80071ca:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80071cc:	6822      	ldr	r2, [r4, #0]
 80071ce:	6993      	ldr	r3, [r2, #24]
 80071d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80071d4:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	6913      	ldr	r3, [r2, #16]
 80071da:	f023 0308 	bic.w	r3, r3, #8
 80071de:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80071e0:	f41b 4f40 	tst.w	fp, #49152	; 0xc000
 80071e4:	d009      	beq.n	80071fa <HAL_SPI_IRQHandler+0x86>
 80071e6:	2f04      	cmp	r7, #4
 80071e8:	d002      	beq.n	80071f0 <HAL_SPI_IRQHandler+0x7c>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80071ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	b123      	cbz	r3, 80071fa <HAL_SPI_IRQHandler+0x86>
 80071f0:	2f03      	cmp	r7, #3
 80071f2:	d011      	beq.n	8007218 <HAL_SPI_IRQHandler+0xa4>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80071f4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	b973      	cbnz	r3, 8007218 <HAL_SPI_IRQHandler+0xa4>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8007202:	d033      	beq.n	800726c <HAL_SPI_IRQHandler+0xf8>
      SPI_CloseTransfer(hspi);
 8007204:	4620      	mov	r0, r4
 8007206:	f7ff fd09 	bl	8006c1c <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 800720a:	2301      	movs	r3, #1
 800720c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007210:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007214:	2b00      	cmp	r3, #0
 8007216:	d142      	bne.n	800729e <HAL_SPI_IRQHandler+0x12a>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007218:	2f05      	cmp	r7, #5
 800721a:	d044      	beq.n	80072a6 <HAL_SPI_IRQHandler+0x132>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800721c:	2f04      	cmp	r7, #4
 800721e:	d046      	beq.n	80072ae <HAL_SPI_IRQHandler+0x13a>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007220:	2f03      	cmp	r7, #3
 8007222:	d112      	bne.n	800724a <HAL_SPI_IRQHandler+0xd6>
      HAL_SPI_TxCpltCallback(hspi);
 8007224:	4620      	mov	r0, r4
 8007226:	f7ff ff55 	bl	80070d4 <HAL_SPI_TxCpltCallback>
    return;
 800722a:	e00e      	b.n	800724a <HAL_SPI_IRQHandler+0xd6>
    hspi->TxISR(hspi);
 800722c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800722e:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007230:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007232:	4620      	mov	r0, r4
 8007234:	4798      	blx	r3
    handled = 1UL;
 8007236:	2301      	movs	r3, #1
 8007238:	e7b0      	b.n	800719c <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800723a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800723c:	4620      	mov	r0, r4
 800723e:	4798      	blx	r3
    handled = 1UL;
 8007240:	4643      	mov	r3, r8
 8007242:	e7b0      	b.n	80071a6 <HAL_SPI_IRQHandler+0x32>
    hspi->TxISR(hspi);
 8007244:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007246:	4620      	mov	r0, r4
 8007248:	4798      	blx	r3
}
 800724a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800724e:	2b07      	cmp	r3, #7
 8007250:	d91c      	bls.n	800728c <HAL_SPI_IRQHandler+0x118>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007254:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8007256:	801a      	strh	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800725a:	3302      	adds	r3, #2
 800725c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800725e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007262:	b29b      	uxth	r3, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	b29b      	uxth	r3, r3
 8007268:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800726c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007270:	b29b      	uxth	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0c6      	beq.n	8007204 <HAL_SPI_IRQHandler+0x90>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007276:	68e3      	ldr	r3, [r4, #12]
 8007278:	2b0f      	cmp	r3, #15
 800727a:	d9e8      	bls.n	800724e <HAL_SPI_IRQHandler+0xda>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800727c:	6822      	ldr	r2, [r4, #0]
 800727e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007280:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007282:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007286:	3304      	adds	r3, #4
 8007288:	6663      	str	r3, [r4, #100]	; 0x64
 800728a:	e7e8      	b.n	800725e <HAL_SPI_IRQHandler+0xea>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800728c:	6822      	ldr	r2, [r4, #0]
 800728e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007290:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8007294:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007298:	3301      	adds	r3, #1
 800729a:	6663      	str	r3, [r4, #100]	; 0x64
 800729c:	e7df      	b.n	800725e <HAL_SPI_IRQHandler+0xea>
        HAL_SPI_ErrorCallback(hspi);
 800729e:	4620      	mov	r0, r4
 80072a0:	f7ff ff4f 	bl	8007142 <HAL_SPI_ErrorCallback>
        return;
 80072a4:	e7d1      	b.n	800724a <HAL_SPI_IRQHandler+0xd6>
      HAL_SPI_TxRxCpltCallback(hspi);
 80072a6:	4620      	mov	r0, r4
 80072a8:	f002 f80e 	bl	80092c8 <HAL_SPI_TxRxCpltCallback>
 80072ac:	e7cd      	b.n	800724a <HAL_SPI_IRQHandler+0xd6>
      HAL_SPI_RxCpltCallback(hspi);
 80072ae:	4620      	mov	r0, r4
 80072b0:	f7ff ff11 	bl	80070d6 <HAL_SPI_RxCpltCallback>
 80072b4:	e7c9      	b.n	800724a <HAL_SPI_IRQHandler+0xd6>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80072b6:	f419 6f00 	tst.w	r9, #2048	; 0x800
 80072ba:	d002      	beq.n	80072c2 <HAL_SPI_IRQHandler+0x14e>
 80072bc:	f01a 0f08 	tst.w	sl, #8
 80072c0:	d173      	bne.n	80073aa <HAL_SPI_IRQHandler+0x236>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80072c2:	f415 7f58 	tst.w	r5, #864	; 0x360
 80072c6:	d0c0      	beq.n	800724a <HAL_SPI_IRQHandler+0xd6>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80072c8:	f015 0f40 	tst.w	r5, #64	; 0x40
 80072cc:	d00a      	beq.n	80072e4 <HAL_SPI_IRQHandler+0x170>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80072ce:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80072d2:	f043 0304 	orr.w	r3, r3, #4
 80072d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	6993      	ldr	r3, [r2, #24]
 80072de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e2:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80072e4:	f415 7f00 	tst.w	r5, #512	; 0x200
 80072e8:	d00a      	beq.n	8007300 <HAL_SPI_IRQHandler+0x18c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80072ea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80072ee:	f043 0301 	orr.w	r3, r3, #1
 80072f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80072f6:	6822      	ldr	r2, [r4, #0]
 80072f8:	6993      	ldr	r3, [r2, #24]
 80072fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072fe:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007300:	f415 7f80 	tst.w	r5, #256	; 0x100
 8007304:	d00a      	beq.n	800731c <HAL_SPI_IRQHandler+0x1a8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007306:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800730a:	f043 0308 	orr.w	r3, r3, #8
 800730e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007312:	6822      	ldr	r2, [r4, #0]
 8007314:	6993      	ldr	r3, [r2, #24]
 8007316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800731a:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800731c:	f015 0f20 	tst.w	r5, #32
 8007320:	d00a      	beq.n	8007338 <HAL_SPI_IRQHandler+0x1c4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007322:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800732a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	6993      	ldr	r3, [r2, #24]
 8007332:	f043 0320 	orr.w	r3, r3, #32
 8007336:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007338:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800733c:	2b00      	cmp	r3, #0
 800733e:	d084      	beq.n	800724a <HAL_SPI_IRQHandler+0xd6>
      __HAL_SPI_DISABLE(hspi);
 8007340:	6822      	ldr	r2, [r4, #0]
 8007342:	6813      	ldr	r3, [r2, #0]
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800734a:	6822      	ldr	r2, [r4, #0]
 800734c:	6911      	ldr	r1, [r2, #16]
 800734e:	4b1d      	ldr	r3, [pc, #116]	; (80073c4 <HAL_SPI_IRQHandler+0x250>)
 8007350:	400b      	ands	r3, r1
 8007352:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007354:	f40b 4b40 	and.w	fp, fp, #49152	; 0xc000
 8007358:	f5bb 4f40 	cmp.w	fp, #49152	; 0xc000
 800735c:	d12b      	bne.n	80073b6 <HAL_SPI_IRQHandler+0x242>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800735e:	6822      	ldr	r2, [r4, #0]
 8007360:	6893      	ldr	r3, [r2, #8]
 8007362:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007366:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8007368:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800736a:	b15b      	cbz	r3, 8007384 <HAL_SPI_IRQHandler+0x210>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800736c:	4a16      	ldr	r2, [pc, #88]	; (80073c8 <HAL_SPI_IRQHandler+0x254>)
 800736e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007370:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007372:	f7fa fc6f 	bl	8001c54 <HAL_DMA_Abort_IT>
 8007376:	b128      	cbz	r0, 8007384 <HAL_SPI_IRQHandler+0x210>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007378:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800737c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007380:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8007384:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007386:	2b00      	cmp	r3, #0
 8007388:	f43f af5f 	beq.w	800724a <HAL_SPI_IRQHandler+0xd6>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800738c:	4a0e      	ldr	r2, [pc, #56]	; (80073c8 <HAL_SPI_IRQHandler+0x254>)
 800738e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007390:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007392:	f7fa fc5f 	bl	8001c54 <HAL_DMA_Abort_IT>
 8007396:	2800      	cmp	r0, #0
 8007398:	f43f af57 	beq.w	800724a <HAL_SPI_IRQHandler+0xd6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800739c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80073a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80073a8:	e74f      	b.n	800724a <HAL_SPI_IRQHandler+0xd6>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80073aa:	6822      	ldr	r2, [r4, #0]
 80073ac:	6993      	ldr	r3, [r2, #24]
 80073ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80073b2:	6193      	str	r3, [r2, #24]
    return;
 80073b4:	e749      	b.n	800724a <HAL_SPI_IRQHandler+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80073b6:	2301      	movs	r3, #1
 80073b8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80073bc:	4620      	mov	r0, r4
 80073be:	f7ff fec0 	bl	8007142 <HAL_SPI_ErrorCallback>
    return;
 80073c2:	e742      	b.n	800724a <HAL_SPI_IRQHandler+0xd6>
 80073c4:	fffffc94 	.word	0xfffffc94
 80073c8:	080073cd 	.word	0x080073cd

080073cc <SPI_DMAAbortOnError>:
{
 80073cc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80073d6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 80073da:	2301      	movs	r3, #1
 80073dc:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 80073e0:	f7ff feaf 	bl	8007142 <HAL_SPI_ErrorCallback>
}
 80073e4:	bd08      	pop	{r3, pc}
	...

080073e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80073e8:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80073ea:	680b      	ldr	r3, [r1, #0]
 80073ec:	b9cb      	cbnz	r3, 8007422 <FMC_SDRAM_Init+0x3a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80073ee:	6803      	ldr	r3, [r0, #0]
 80073f0:	4a19      	ldr	r2, [pc, #100]	; (8007458 <FMC_SDRAM_Init+0x70>)
 80073f2:	401a      	ands	r2, r3
 80073f4:	684b      	ldr	r3, [r1, #4]
 80073f6:	688c      	ldr	r4, [r1, #8]
 80073f8:	4323      	orrs	r3, r4
 80073fa:	68cc      	ldr	r4, [r1, #12]
 80073fc:	4323      	orrs	r3, r4
 80073fe:	690c      	ldr	r4, [r1, #16]
 8007400:	4323      	orrs	r3, r4
 8007402:	694c      	ldr	r4, [r1, #20]
 8007404:	4323      	orrs	r3, r4
 8007406:	698c      	ldr	r4, [r1, #24]
 8007408:	4323      	orrs	r3, r4
 800740a:	69cc      	ldr	r4, [r1, #28]
 800740c:	4323      	orrs	r3, r4
 800740e:	6a0c      	ldr	r4, [r1, #32]
 8007410:	4323      	orrs	r3, r4
 8007412:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007414:	430b      	orrs	r3, r1
 8007416:	4313      	orrs	r3, r2
 8007418:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800741a:	2000      	movs	r0, #0
 800741c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007420:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007422:	6803      	ldr	r3, [r0, #0]
 8007424:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007428:	69ca      	ldr	r2, [r1, #28]
 800742a:	6a0c      	ldr	r4, [r1, #32]
 800742c:	4322      	orrs	r2, r4
 800742e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8007430:	4322      	orrs	r2, r4
 8007432:	4313      	orrs	r3, r2
 8007434:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007436:	6843      	ldr	r3, [r0, #4]
 8007438:	4a07      	ldr	r2, [pc, #28]	; (8007458 <FMC_SDRAM_Init+0x70>)
 800743a:	401a      	ands	r2, r3
 800743c:	684b      	ldr	r3, [r1, #4]
 800743e:	688c      	ldr	r4, [r1, #8]
 8007440:	4323      	orrs	r3, r4
 8007442:	68cc      	ldr	r4, [r1, #12]
 8007444:	4323      	orrs	r3, r4
 8007446:	690c      	ldr	r4, [r1, #16]
 8007448:	4323      	orrs	r3, r4
 800744a:	694c      	ldr	r4, [r1, #20]
 800744c:	4323      	orrs	r3, r4
 800744e:	6989      	ldr	r1, [r1, #24]
 8007450:	430b      	orrs	r3, r1
 8007452:	4313      	orrs	r3, r2
 8007454:	6043      	str	r3, [r0, #4]
 8007456:	e7e0      	b.n	800741a <FMC_SDRAM_Init+0x32>
 8007458:	ffff8000 	.word	0xffff8000

0800745c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800745c:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800745e:	bb12      	cbnz	r2, 80074a6 <FMC_SDRAM_Timing_Init+0x4a>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007460:	6882      	ldr	r2, [r0, #8]
 8007462:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007466:	680b      	ldr	r3, [r1, #0]
 8007468:	3b01      	subs	r3, #1
 800746a:	684c      	ldr	r4, [r1, #4]
 800746c:	3c01      	subs	r4, #1
 800746e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8007472:	688c      	ldr	r4, [r1, #8]
 8007474:	3c01      	subs	r4, #1
 8007476:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800747a:	68cc      	ldr	r4, [r1, #12]
 800747c:	3c01      	subs	r4, #1
 800747e:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8007482:	690c      	ldr	r4, [r1, #16]
 8007484:	3c01      	subs	r4, #1
 8007486:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800748a:	694c      	ldr	r4, [r1, #20]
 800748c:	3c01      	subs	r4, #1
 800748e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8007492:	6989      	ldr	r1, [r1, #24]
 8007494:	3901      	subs	r1, #1
 8007496:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800749a:	4313      	orrs	r3, r2
 800749c:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800749e:	2000      	movs	r0, #0
 80074a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a4:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80074a6:	6883      	ldr	r3, [r0, #8]
 80074a8:	4a11      	ldr	r2, [pc, #68]	; (80074f0 <FMC_SDRAM_Timing_Init+0x94>)
 80074aa:	401a      	ands	r2, r3
 80074ac:	68cb      	ldr	r3, [r1, #12]
 80074ae:	1e5c      	subs	r4, r3, #1
 80074b0:	694b      	ldr	r3, [r1, #20]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	051b      	lsls	r3, r3, #20
 80074b6:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 80074ba:	4313      	orrs	r3, r2
 80074bc:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80074be:	68c2      	ldr	r2, [r0, #12]
 80074c0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80074c4:	680b      	ldr	r3, [r1, #0]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	684c      	ldr	r4, [r1, #4]
 80074ca:	3c01      	subs	r4, #1
 80074cc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80074d0:	688c      	ldr	r4, [r1, #8]
 80074d2:	3c01      	subs	r4, #1
 80074d4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80074d8:	690c      	ldr	r4, [r1, #16]
 80074da:	3c01      	subs	r4, #1
 80074dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80074e0:	6989      	ldr	r1, [r1, #24]
 80074e2:	3901      	subs	r1, #1
 80074e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60c3      	str	r3, [r0, #12]
 80074ec:	e7d7      	b.n	800749e <FMC_SDRAM_Timing_Init+0x42>
 80074ee:	bf00      	nop
 80074f0:	ff0f0fff 	.word	0xff0f0fff

080074f4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80074f4:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80074f6:	6903      	ldr	r3, [r0, #16]
 80074f8:	4a08      	ldr	r2, [pc, #32]	; (800751c <FMC_SDRAM_SendCommand+0x28>)
 80074fa:	401a      	ands	r2, r3
 80074fc:	680b      	ldr	r3, [r1, #0]
 80074fe:	684c      	ldr	r4, [r1, #4]
 8007500:	4323      	orrs	r3, r4
 8007502:	688c      	ldr	r4, [r1, #8]
 8007504:	3c01      	subs	r4, #1
 8007506:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 800750a:	68c9      	ldr	r1, [r1, #12]
 800750c:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8007510:	4313      	orrs	r3, r2
 8007512:	6103      	str	r3, [r0, #16]
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8007514:	2000      	movs	r0, #0
 8007516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	ffc00000 	.word	0xffc00000

08007520 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007520:	6942      	ldr	r2, [r0, #20]
 8007522:	4b03      	ldr	r3, [pc, #12]	; (8007530 <FMC_SDRAM_ProgramRefreshRate+0x10>)
 8007524:	4013      	ands	r3, r2
 8007526:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800752a:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800752c:	2000      	movs	r0, #0
 800752e:	4770      	bx	lr
 8007530:	ffffc001 	.word	0xffffc001

08007534 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007534:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <SDMMC_GetCmdError+0x30>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a0b      	ldr	r2, [pc, #44]	; (8007568 <SDMMC_GetCmdError+0x34>)
 800753a:	fba2 2303 	umull	r2, r3, r2, r3
 800753e:	0a5a      	lsrs	r2, r3, #9
 8007540:	f241 3388 	movw	r3, #5000	; 0x1388
 8007544:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8007548:	461a      	mov	r2, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b13a      	cbz	r2, 800755e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800754e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007550:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007554:	d0f8      	beq.n	8007548 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007556:	4b05      	ldr	r3, [pc, #20]	; (800756c <SDMMC_GetCmdError+0x38>)
 8007558:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800755a:	2000      	movs	r0, #0
 800755c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800755e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007562:	4770      	bx	lr
 8007564:	20000028 	.word	0x20000028
 8007568:	10624dd3 	.word	0x10624dd3
 800756c:	002000c5 	.word	0x002000c5

08007570 <SDMMC_Init>:
{
 8007570:	b084      	sub	sp, #16
 8007572:	b410      	push	{r4}
 8007574:	ac02      	add	r4, sp, #8
 8007576:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800757a:	460b      	mov	r3, r1
 800757c:	9a03      	ldr	r2, [sp, #12]
 800757e:	4313      	orrs	r3, r2
             Init.BusWide             | \
 8007580:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      | \
 8007582:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 8007584:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             | \
 8007586:	4313      	orrs	r3, r2
             Init.ClockDiv
 8007588:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl | \
 800758a:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800758c:	6841      	ldr	r1, [r0, #4]
 800758e:	4a04      	ldr	r2, [pc, #16]	; (80075a0 <SDMMC_Init+0x30>)
 8007590:	400a      	ands	r2, r1
 8007592:	4313      	orrs	r3, r2
 8007594:	6043      	str	r3, [r0, #4]
}
 8007596:	2000      	movs	r0, #0
 8007598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800759c:	b004      	add	sp, #16
 800759e:	4770      	bx	lr
 80075a0:	ffc02c00 	.word	0xffc02c00

080075a4 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 80075a4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80075a8:	4770      	bx	lr

080075aa <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 80075aa:	680b      	ldr	r3, [r1, #0]
 80075ac:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80075b0:	2000      	movs	r0, #0
 80075b2:	4770      	bx	lr

080075b4 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80075b4:	6803      	ldr	r3, [r0, #0]
 80075b6:	f043 0303 	orr.w	r3, r3, #3
 80075ba:	6003      	str	r3, [r0, #0]
}
 80075bc:	2000      	movs	r0, #0
 80075be:	4770      	bx	lr

080075c0 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80075c0:	6800      	ldr	r0, [r0, #0]
}
 80075c2:	f000 0003 	and.w	r0, r0, #3
 80075c6:	4770      	bx	lr

080075c8 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 80075c8:	680b      	ldr	r3, [r1, #0]
 80075ca:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80075cc:	684b      	ldr	r3, [r1, #4]
                       Command->Response         | \
 80075ce:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80075d0:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 80075d2:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         | \
 80075d4:	4313      	orrs	r3, r2
                       Command->CPSM);
 80075d6:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt | \
 80075d8:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80075da:	68c1      	ldr	r1, [r0, #12]
 80075dc:	4a02      	ldr	r2, [pc, #8]	; (80075e8 <SDMMC_SendCommand+0x20>)
 80075de:	400a      	ands	r2, r1
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60c3      	str	r3, [r0, #12]
}
 80075e4:	2000      	movs	r0, #0
 80075e6:	4770      	bx	lr
 80075e8:	fffee0c0 	.word	0xfffee0c0

080075ec <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 80075ec:	6900      	ldr	r0, [r0, #16]
}
 80075ee:	b2c0      	uxtb	r0, r0
 80075f0:	4770      	bx	lr

080075f2 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80075f2:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80075f4:	5840      	ldr	r0, [r0, r1]
}
 80075f6:	4770      	bx	lr

080075f8 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 80075f8:	680b      	ldr	r3, [r1, #0]
 80075fa:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80075fc:	684b      	ldr	r3, [r1, #4]
 80075fe:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007600:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   | \
 8007602:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007604:	4313      	orrs	r3, r2
                       Data->TransferMode  | \
 8007606:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   | \
 8007608:	4313      	orrs	r3, r2
                       Data->DPSM);
 800760a:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  | \
 800760c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800760e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007610:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007614:	4313      	orrs	r3, r2
 8007616:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007618:	2000      	movs	r0, #0
 800761a:	4770      	bx	lr

0800761c <SDMMC_CmdGoIdleState>:
{
 800761c:	b510      	push	{r4, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007626:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007628:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800762a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800762c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007630:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007632:	a901      	add	r1, sp, #4
 8007634:	f7ff ffc8 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007638:	4620      	mov	r0, r4
 800763a:	f7ff ff7b 	bl	8007534 <SDMMC_GetCmdError>
}
 800763e:	b006      	add	sp, #24
 8007640:	bd10      	pop	{r4, pc}
	...

08007644 <SDMMC_GetCmdResp1>:
{
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	4605      	mov	r5, r0
 8007648:	460e      	mov	r6, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800764a:	4b51      	ldr	r3, [pc, #324]	; (8007790 <SDMMC_GetCmdResp1+0x14c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4951      	ldr	r1, [pc, #324]	; (8007794 <SDMMC_GetCmdResp1+0x150>)
 8007650:	fba1 1303 	umull	r1, r3, r1, r3
 8007654:	0a5b      	lsrs	r3, r3, #9
 8007656:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 800765a:	4613      	mov	r3, r2
 800765c:	3a01      	subs	r2, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d05e      	beq.n	8007720 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 8007662:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007664:	4b4c      	ldr	r3, [pc, #304]	; (8007798 <SDMMC_GetCmdResp1+0x154>)
 8007666:	4023      	ands	r3, r4
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0f6      	beq.n	800765a <SDMMC_GetCmdResp1+0x16>
 800766c:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8007670:	d1f3      	bne.n	800765a <SDMMC_GetCmdResp1+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007672:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007674:	f013 0f04 	tst.w	r3, #4
 8007678:	d106      	bne.n	8007688 <SDMMC_GetCmdResp1+0x44>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800767a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800767c:	f013 0f01 	tst.w	r3, #1
 8007680:	d005      	beq.n	800768e <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007682:	2001      	movs	r0, #1
 8007684:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007686:	e04d      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007688:	2004      	movs	r0, #4
 800768a:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800768c:	e04a      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800768e:	4b43      	ldr	r3, [pc, #268]	; (800779c <SDMMC_GetCmdResp1+0x158>)
 8007690:	63ab      	str	r3, [r5, #56]	; 0x38
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007692:	4628      	mov	r0, r5
 8007694:	f7ff ffaa 	bl	80075ec <SDMMC_GetCommandResponse>
 8007698:	42b0      	cmp	r0, r6
 800769a:	d001      	beq.n	80076a0 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800769c:	2001      	movs	r0, #1
 800769e:	e041      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80076a0:	2100      	movs	r1, #0
 80076a2:	4628      	mov	r0, r5
 80076a4:	f7ff ffa5 	bl	80075f2 <SDMMC_GetResponse>
 80076a8:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80076aa:	483d      	ldr	r0, [pc, #244]	; (80077a0 <SDMMC_GetCmdResp1+0x15c>)
 80076ac:	4018      	ands	r0, r3
 80076ae:	b3c8      	cbz	r0, 8007724 <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	db38      	blt.n	8007726 <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80076b4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80076b8:	d138      	bne.n	800772c <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80076ba:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80076be:	d137      	bne.n	8007730 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80076c0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80076c4:	d136      	bne.n	8007734 <SDMMC_GetCmdResp1+0xf0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80076c6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80076ca:	d136      	bne.n	800773a <SDMMC_GetCmdResp1+0xf6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80076cc:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80076d0:	d136      	bne.n	8007740 <SDMMC_GetCmdResp1+0xfc>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80076d2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80076d6:	d136      	bne.n	8007746 <SDMMC_GetCmdResp1+0x102>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80076d8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80076dc:	d136      	bne.n	800774c <SDMMC_GetCmdResp1+0x108>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80076de:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80076e2:	d136      	bne.n	8007752 <SDMMC_GetCmdResp1+0x10e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80076e4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80076e8:	d136      	bne.n	8007758 <SDMMC_GetCmdResp1+0x114>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80076ea:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80076ee:	d136      	bne.n	800775e <SDMMC_GetCmdResp1+0x11a>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80076f0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80076f4:	d136      	bne.n	8007764 <SDMMC_GetCmdResp1+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80076f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80076fa:	d136      	bne.n	800776a <SDMMC_GetCmdResp1+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80076fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007700:	d136      	bne.n	8007770 <SDMMC_GetCmdResp1+0x12c>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007702:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007706:	d136      	bne.n	8007776 <SDMMC_GetCmdResp1+0x132>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007708:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800770c:	d136      	bne.n	800777c <SDMMC_GetCmdResp1+0x138>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800770e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007712:	d136      	bne.n	8007782 <SDMMC_GetCmdResp1+0x13e>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007714:	f013 0f08 	tst.w	r3, #8
 8007718:	d036      	beq.n	8007788 <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800771a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800771e:	e001      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 8007720:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007724:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007726:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800772a:	e7fb      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800772c:	2040      	movs	r0, #64	; 0x40
 800772e:	e7f9      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007730:	2080      	movs	r0, #128	; 0x80
 8007732:	e7f7      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007734:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007738:	e7f4      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800773a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800773e:	e7f1      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007740:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007744:	e7ee      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007746:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800774a:	e7eb      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800774c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007750:	e7e8      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007752:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007756:	e7e5      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007758:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800775c:	e7e2      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 800775e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007762:	e7df      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007764:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007768:	e7dc      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800776a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800776e:	e7d9      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007770:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007774:	e7d6      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007776:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800777a:	e7d3      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800777c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007780:	e7d0      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 8007782:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007786:	e7cd      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007788:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800778c:	e7ca      	b.n	8007724 <SDMMC_GetCmdResp1+0xe0>
 800778e:	bf00      	nop
 8007790:	20000028 	.word	0x20000028
 8007794:	10624dd3 	.word	0x10624dd3
 8007798:	00200045 	.word	0x00200045
 800779c:	002000c5 	.word	0x002000c5
 80077a0:	fdffe008 	.word	0xfdffe008

080077a4 <SDMMC_CmdBlockLength>:
{
 80077a4:	b530      	push	{r4, r5, lr}
 80077a6:	b087      	sub	sp, #28
 80077a8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80077aa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80077ac:	2510      	movs	r5, #16
 80077ae:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077b4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077b6:	2300      	movs	r3, #0
 80077b8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077be:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077c0:	a901      	add	r1, sp, #4
 80077c2:	f7ff ff01 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80077c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ca:	4629      	mov	r1, r5
 80077cc:	4620      	mov	r0, r4
 80077ce:	f7ff ff39 	bl	8007644 <SDMMC_GetCmdResp1>
}
 80077d2:	b007      	add	sp, #28
 80077d4:	bd30      	pop	{r4, r5, pc}

080077d6 <SDMMC_CmdReadSingleBlock>:
{
 80077d6:	b530      	push	{r4, r5, lr}
 80077d8:	b087      	sub	sp, #28
 80077da:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80077dc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80077de:	2511      	movs	r5, #17
 80077e0:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077e6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077e8:	2300      	movs	r3, #0
 80077ea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077f0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077f2:	a901      	add	r1, sp, #4
 80077f4:	f7ff fee8 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80077f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077fc:	4629      	mov	r1, r5
 80077fe:	4620      	mov	r0, r4
 8007800:	f7ff ff20 	bl	8007644 <SDMMC_GetCmdResp1>
}
 8007804:	b007      	add	sp, #28
 8007806:	bd30      	pop	{r4, r5, pc}

08007808 <SDMMC_CmdReadMultiBlock>:
{
 8007808:	b530      	push	{r4, r5, lr}
 800780a:	b087      	sub	sp, #28
 800780c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800780e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007810:	2512      	movs	r5, #18
 8007812:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007818:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800781a:	2300      	movs	r3, #0
 800781c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800781e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007822:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007824:	a901      	add	r1, sp, #4
 8007826:	f7ff fecf 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800782a:	f241 3288 	movw	r2, #5000	; 0x1388
 800782e:	4629      	mov	r1, r5
 8007830:	4620      	mov	r0, r4
 8007832:	f7ff ff07 	bl	8007644 <SDMMC_GetCmdResp1>
}
 8007836:	b007      	add	sp, #28
 8007838:	bd30      	pop	{r4, r5, pc}

0800783a <SDMMC_CmdWriteSingleBlock>:
{
 800783a:	b530      	push	{r4, r5, lr}
 800783c:	b087      	sub	sp, #28
 800783e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007840:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007842:	2518      	movs	r5, #24
 8007844:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800784a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800784c:	2300      	movs	r3, #0
 800784e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007854:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007856:	a901      	add	r1, sp, #4
 8007858:	f7ff feb6 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800785c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007860:	4629      	mov	r1, r5
 8007862:	4620      	mov	r0, r4
 8007864:	f7ff feee 	bl	8007644 <SDMMC_GetCmdResp1>
}
 8007868:	b007      	add	sp, #28
 800786a:	bd30      	pop	{r4, r5, pc}

0800786c <SDMMC_CmdWriteMultiBlock>:
{
 800786c:	b530      	push	{r4, r5, lr}
 800786e:	b087      	sub	sp, #28
 8007870:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007872:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007874:	2519      	movs	r5, #25
 8007876:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800787c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800787e:	2300      	movs	r3, #0
 8007880:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007886:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007888:	a901      	add	r1, sp, #4
 800788a:	f7ff fe9d 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800788e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007892:	4629      	mov	r1, r5
 8007894:	4620      	mov	r0, r4
 8007896:	f7ff fed5 	bl	8007644 <SDMMC_GetCmdResp1>
}
 800789a:	b007      	add	sp, #28
 800789c:	bd30      	pop	{r4, r5, pc}
	...

080078a0 <SDMMC_CmdStopTransfer>:
{
 80078a0:	b530      	push	{r4, r5, lr}
 80078a2:	b087      	sub	sp, #28
 80078a4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80078aa:	250c      	movs	r5, #12
 80078ac:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078b2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078b4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078ba:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80078bc:	68c3      	ldr	r3, [r0, #12]
 80078be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c2:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80078c4:	68c3      	ldr	r3, [r0, #12]
 80078c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ca:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078cc:	a901      	add	r1, sp, #4
 80078ce:	f7ff fe7b 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80078d2:	4a08      	ldr	r2, [pc, #32]	; (80078f4 <SDMMC_CmdStopTransfer+0x54>)
 80078d4:	4629      	mov	r1, r5
 80078d6:	4620      	mov	r0, r4
 80078d8:	f7ff feb4 	bl	8007644 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80078dc:	68e3      	ldr	r3, [r4, #12]
 80078de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078e2:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80078e4:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80078e8:	d001      	beq.n	80078ee <SDMMC_CmdStopTransfer+0x4e>
}
 80078ea:	b007      	add	sp, #28
 80078ec:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 80078ee:	2000      	movs	r0, #0
  return errorstate;
 80078f0:	e7fb      	b.n	80078ea <SDMMC_CmdStopTransfer+0x4a>
 80078f2:	bf00      	nop
 80078f4:	05f5e100 	.word	0x05f5e100

080078f8 <SDMMC_CmdSelDesel>:
{
 80078f8:	b530      	push	{r4, r5, lr}
 80078fa:	b087      	sub	sp, #28
 80078fc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80078fe:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007900:	2507      	movs	r5, #7
 8007902:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007908:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800790a:	2300      	movs	r3, #0
 800790c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800790e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007912:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007914:	a901      	add	r1, sp, #4
 8007916:	f7ff fe57 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800791a:	f241 3288 	movw	r2, #5000	; 0x1388
 800791e:	4629      	mov	r1, r5
 8007920:	4620      	mov	r0, r4
 8007922:	f7ff fe8f 	bl	8007644 <SDMMC_GetCmdResp1>
}
 8007926:	b007      	add	sp, #28
 8007928:	bd30      	pop	{r4, r5, pc}

0800792a <SDMMC_CmdAppCommand>:
{
 800792a:	b530      	push	{r4, r5, lr}
 800792c:	b087      	sub	sp, #28
 800792e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007930:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007932:	2537      	movs	r5, #55	; 0x37
 8007934:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800793a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800793c:	2300      	movs	r3, #0
 800793e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007944:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007946:	a901      	add	r1, sp, #4
 8007948:	f7ff fe3e 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800794c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007950:	4629      	mov	r1, r5
 8007952:	4620      	mov	r0, r4
 8007954:	f7ff fe76 	bl	8007644 <SDMMC_GetCmdResp1>
}
 8007958:	b007      	add	sp, #28
 800795a:	bd30      	pop	{r4, r5, pc}

0800795c <SDMMC_CmdBusWidth>:
{
 800795c:	b530      	push	{r4, r5, lr}
 800795e:	b087      	sub	sp, #28
 8007960:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007962:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007964:	2506      	movs	r5, #6
 8007966:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800796c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800796e:	2300      	movs	r3, #0
 8007970:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007976:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007978:	a901      	add	r1, sp, #4
 800797a:	f7ff fe25 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800797e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007982:	4629      	mov	r1, r5
 8007984:	4620      	mov	r0, r4
 8007986:	f7ff fe5d 	bl	8007644 <SDMMC_GetCmdResp1>
}
 800798a:	b007      	add	sp, #28
 800798c:	bd30      	pop	{r4, r5, pc}

0800798e <SDMMC_CmdSendSCR>:
{
 800798e:	b530      	push	{r4, r5, lr}
 8007990:	b087      	sub	sp, #28
 8007992:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007998:	2533      	movs	r5, #51	; 0x33
 800799a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800799c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079a0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079a2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079a8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079aa:	a901      	add	r1, sp, #4
 80079ac:	f7ff fe0c 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80079b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b4:	4629      	mov	r1, r5
 80079b6:	4620      	mov	r0, r4
 80079b8:	f7ff fe44 	bl	8007644 <SDMMC_GetCmdResp1>
}
 80079bc:	b007      	add	sp, #28
 80079be:	bd30      	pop	{r4, r5, pc}

080079c0 <SDMMC_CmdSendStatus>:
{
 80079c0:	b530      	push	{r4, r5, lr}
 80079c2:	b087      	sub	sp, #28
 80079c4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80079c6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80079c8:	250d      	movs	r5, #13
 80079ca:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079d0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079d2:	2300      	movs	r3, #0
 80079d4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079da:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079dc:	a901      	add	r1, sp, #4
 80079de:	f7ff fdf3 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80079e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e6:	4629      	mov	r1, r5
 80079e8:	4620      	mov	r0, r4
 80079ea:	f7ff fe2b 	bl	8007644 <SDMMC_GetCmdResp1>
}
 80079ee:	b007      	add	sp, #28
 80079f0:	bd30      	pop	{r4, r5, pc}

080079f2 <SDMMC_CmdStatusRegister>:
{
 80079f2:	b530      	push	{r4, r5, lr}
 80079f4:	b087      	sub	sp, #28
 80079f6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80079fc:	250d      	movs	r5, #13
 80079fe:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a04:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a06:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a0c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a0e:	a901      	add	r1, sp, #4
 8007a10:	f7ff fdda 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a18:	4629      	mov	r1, r5
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7ff fe12 	bl	8007644 <SDMMC_GetCmdResp1>
}
 8007a20:	b007      	add	sp, #28
 8007a22:	bd30      	pop	{r4, r5, pc}

08007a24 <SDMMC_CmdVoltageSwitch>:
{
 8007a24:	b530      	push	{r4, r5, lr}
 8007a26:	b087      	sub	sp, #28
 8007a28:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007a2e:	250b      	movs	r5, #11
 8007a30:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a36:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a38:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a3e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a40:	a901      	add	r1, sp, #4
 8007a42:	f7ff fdc1 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f7ff fdf9 	bl	8007644 <SDMMC_GetCmdResp1>
}
 8007a52:	b007      	add	sp, #28
 8007a54:	bd30      	pop	{r4, r5, pc}
	...

08007a58 <SDMMC_GetCmdResp2>:
{
 8007a58:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007a5a:	4b14      	ldr	r3, [pc, #80]	; (8007aac <SDMMC_GetCmdResp2+0x54>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a14      	ldr	r2, [pc, #80]	; (8007ab0 <SDMMC_GetCmdResp2+0x58>)
 8007a60:	fba2 2303 	umull	r2, r3, r2, r3
 8007a64:	0a5a      	lsrs	r2, r3, #9
 8007a66:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a6a:	fb03 f302 	mul.w	r3, r3, r2
    if (count-- == 0U)
 8007a6e:	461a      	mov	r2, r3
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b1ba      	cbz	r2, 8007aa4 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
 8007a74:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007a76:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007a7a:	d0f8      	beq.n	8007a6e <SDMMC_GetCmdResp2+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a7c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8007a80:	d1f5      	bne.n	8007a6e <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a82:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007a84:	f013 0f04 	tst.w	r3, #4
 8007a88:	d106      	bne.n	8007a98 <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a8a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007a8c:	f010 0001 	ands.w	r0, r0, #1
 8007a90:	d105      	bne.n	8007a9e <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a92:	4b08      	ldr	r3, [pc, #32]	; (8007ab4 <SDMMC_GetCmdResp2+0x5c>)
 8007a94:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007a96:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a98:	2004      	movs	r0, #4
 8007a9a:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a9c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007aa2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007aa4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	20000028 	.word	0x20000028
 8007ab0:	10624dd3 	.word	0x10624dd3
 8007ab4:	002000c5 	.word	0x002000c5

08007ab8 <SDMMC_CmdSendCID>:
{
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007ac6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007aca:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007acc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ad2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ad4:	a901      	add	r1, sp, #4
 8007ad6:	f7ff fd77 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007ada:	4620      	mov	r0, r4
 8007adc:	f7ff ffbc 	bl	8007a58 <SDMMC_GetCmdResp2>
}
 8007ae0:	b006      	add	sp, #24
 8007ae2:	bd10      	pop	{r4, pc}

08007ae4 <SDMMC_CmdSendCSD>:
{
 8007ae4:	b510      	push	{r4, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007aea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007aec:	2309      	movs	r3, #9
 8007aee:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007af0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007af4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007af6:	2300      	movs	r3, #0
 8007af8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007afe:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b00:	a901      	add	r1, sp, #4
 8007b02:	f7ff fd61 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007b06:	4620      	mov	r0, r4
 8007b08:	f7ff ffa6 	bl	8007a58 <SDMMC_GetCmdResp2>
}
 8007b0c:	b006      	add	sp, #24
 8007b0e:	bd10      	pop	{r4, pc}

08007b10 <SDMMC_GetCmdResp3>:
{
 8007b10:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007b12:	4b10      	ldr	r3, [pc, #64]	; (8007b54 <SDMMC_GetCmdResp3+0x44>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a10      	ldr	r2, [pc, #64]	; (8007b58 <SDMMC_GetCmdResp3+0x48>)
 8007b18:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1c:	0a5a      	lsrs	r2, r3, #9
 8007b1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b22:	fb03 f302 	mul.w	r3, r3, r2
    if (count-- == 0U)
 8007b26:	461a      	mov	r2, r3
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	b182      	cbz	r2, 8007b4e <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
 8007b2c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007b2e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007b32:	d0f8      	beq.n	8007b26 <SDMMC_GetCmdResp3+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b34:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8007b38:	d1f5      	bne.n	8007b26 <SDMMC_GetCmdResp3+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b3a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007b3c:	f010 0004 	ands.w	r0, r0, #4
 8007b40:	d102      	bne.n	8007b48 <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b42:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <SDMMC_GetCmdResp3+0x4c>)
 8007b44:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007b46:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b48:	2004      	movs	r0, #4
 8007b4a:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b4c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007b4e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007b52:	4770      	bx	lr
 8007b54:	20000028 	.word	0x20000028
 8007b58:	10624dd3 	.word	0x10624dd3
 8007b5c:	002000c5 	.word	0x002000c5

08007b60 <SDMMC_CmdAppOperCommand>:
{
 8007b60:	b510      	push	{r4, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007b66:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007b68:	2329      	movs	r3, #41	; 0x29
 8007b6a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b70:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b72:	2300      	movs	r3, #0
 8007b74:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b7a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b7c:	a901      	add	r1, sp, #4
 8007b7e:	f7ff fd23 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007b82:	4620      	mov	r0, r4
 8007b84:	f7ff ffc4 	bl	8007b10 <SDMMC_GetCmdResp3>
}
 8007b88:	b006      	add	sp, #24
 8007b8a:	bd10      	pop	{r4, pc}

08007b8c <SDMMC_GetCmdResp6>:
{
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	4605      	mov	r5, r0
 8007b90:	460e      	mov	r6, r1
 8007b92:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007b94:	4b23      	ldr	r3, [pc, #140]	; (8007c24 <SDMMC_GetCmdResp6+0x98>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4823      	ldr	r0, [pc, #140]	; (8007c28 <SDMMC_GetCmdResp6+0x9c>)
 8007b9a:	fba0 2303 	umull	r2, r3, r0, r3
 8007b9e:	0a58      	lsrs	r0, r3, #9
 8007ba0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ba4:	fb03 f300 	mul.w	r3, r3, r0
    if (count-- == 0U)
 8007ba8:	461c      	mov	r4, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b38c      	cbz	r4, 8007c12 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 8007bae:	6b6c      	ldr	r4, [r5, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007bb0:	f014 0f45 	tst.w	r4, #69	; 0x45
 8007bb4:	d0f8      	beq.n	8007ba8 <SDMMC_GetCmdResp6+0x1c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007bb6:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8007bba:	d1f5      	bne.n	8007ba8 <SDMMC_GetCmdResp6+0x1c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007bbc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007bbe:	f013 0f04 	tst.w	r3, #4
 8007bc2:	d106      	bne.n	8007bd2 <SDMMC_GetCmdResp6+0x46>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007bc4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007bc6:	f013 0f01 	tst.w	r3, #1
 8007bca:	d005      	beq.n	8007bd8 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007bcc:	2001      	movs	r0, #1
 8007bce:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bd0:	e021      	b.n	8007c16 <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007bd2:	2004      	movs	r0, #4
 8007bd4:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bd6:	e01e      	b.n	8007c16 <SDMMC_GetCmdResp6+0x8a>
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f7ff fd07 	bl	80075ec <SDMMC_GetCommandResponse>
 8007bde:	42b0      	cmp	r0, r6
 8007be0:	d001      	beq.n	8007be6 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007be2:	2001      	movs	r0, #1
 8007be4:	e017      	b.n	8007c16 <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007be6:	4b11      	ldr	r3, [pc, #68]	; (8007c2c <SDMMC_GetCmdResp6+0xa0>)
 8007be8:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007bea:	2100      	movs	r1, #0
 8007bec:	4628      	mov	r0, r5
 8007bee:	f7ff fd00 	bl	80075f2 <SDMMC_GetResponse>
 8007bf2:	4603      	mov	r3, r0
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8007bf4:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 8007bf8:	d008      	beq.n	8007c0c <SDMMC_GetCmdResp6+0x80>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007bfa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007bfe:	d10b      	bne.n	8007c18 <SDMMC_GetCmdResp6+0x8c>
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007c00:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007c04:	d00b      	beq.n	8007c1e <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007c0a:	e004      	b.n	8007c16 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t)(response_r1 >> 16);
 8007c0c:	0c1b      	lsrs	r3, r3, #16
 8007c0e:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8007c10:	e001      	b.n	8007c16 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 8007c12:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007c1c:	e7fb      	b.n	8007c16 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007c1e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007c22:	e7f8      	b.n	8007c16 <SDMMC_GetCmdResp6+0x8a>
 8007c24:	20000028 	.word	0x20000028
 8007c28:	10624dd3 	.word	0x10624dd3
 8007c2c:	002000c5 	.word	0x002000c5

08007c30 <SDMMC_CmdSetRelAdd>:
{
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	4604      	mov	r4, r0
 8007c36:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007c3c:	2603      	movs	r6, #3
 8007c3e:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c44:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c46:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c4c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c4e:	a901      	add	r1, sp, #4
 8007c50:	f7ff fcba 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007c54:	462a      	mov	r2, r5
 8007c56:	4631      	mov	r1, r6
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f7ff ff97 	bl	8007b8c <SDMMC_GetCmdResp6>
}
 8007c5e:	b006      	add	sp, #24
 8007c60:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c64 <SDMMC_GetCmdResp7>:
{
 8007c64:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007c66:	4b16      	ldr	r3, [pc, #88]	; (8007cc0 <SDMMC_GetCmdResp7+0x5c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a16      	ldr	r2, [pc, #88]	; (8007cc4 <SDMMC_GetCmdResp7+0x60>)
 8007c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c70:	0a5a      	lsrs	r2, r3, #9
 8007c72:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c76:	fb03 f302 	mul.w	r3, r3, r2
    if (count-- == 0U)
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b1e2      	cbz	r2, 8007cba <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
 8007c80:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007c82:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007c86:	d0f8      	beq.n	8007c7a <SDMMC_GetCmdResp7+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c88:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8007c8c:	d1f5      	bne.n	8007c7a <SDMMC_GetCmdResp7+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007c8e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007c90:	f013 0f04 	tst.w	r3, #4
 8007c94:	d10b      	bne.n	8007cae <SDMMC_GetCmdResp7+0x4a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007c96:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007c98:	f013 0301 	ands.w	r3, r3, #1
 8007c9c:	d10a      	bne.n	8007cb4 <SDMMC_GetCmdResp7+0x50>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007c9e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007ca0:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8007ca4:	d00b      	beq.n	8007cbe <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007ca6:	2240      	movs	r2, #64	; 0x40
 8007ca8:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007caa:	4618      	mov	r0, r3
 8007cac:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007cae:	2004      	movs	r0, #4
 8007cb0:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cb2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cb8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007cba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007cbe:	4770      	bx	lr
 8007cc0:	20000028 	.word	0x20000028
 8007cc4:	10624dd3 	.word	0x10624dd3

08007cc8 <SDMMC_CmdOperCond>:
{
 8007cc8:	b510      	push	{r4, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007cce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007cd2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007cd4:	2308      	movs	r3, #8
 8007cd6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cdc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ce6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ce8:	a901      	add	r1, sp, #4
 8007cea:	f7ff fc6d 	bl	80075c8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f7ff ffb8 	bl	8007c64 <SDMMC_GetCmdResp7>
}
 8007cf4:	b006      	add	sp, #24
 8007cf6:	bd10      	pop	{r4, pc}

08007cf8 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8007cf8:	4b10      	ldr	r3, [pc, #64]	; (8007d3c <FATFS_LinkDriverEx+0x44>)
 8007cfa:	7a5b      	ldrb	r3, [r3, #9]
 8007cfc:	b9e3      	cbnz	r3, 8007d38 <FATFS_LinkDriverEx+0x40>
{
 8007cfe:	b470      	push	{r4, r5, r6}
 8007d00:	4604      	mov	r4, r0
 8007d02:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8007d06:	4b0d      	ldr	r3, [pc, #52]	; (8007d3c <FATFS_LinkDriverEx+0x44>)
 8007d08:	7a5d      	ldrb	r5, [r3, #9]
 8007d0a:	b2ed      	uxtb	r5, r5
 8007d0c:	2600      	movs	r6, #0
 8007d0e:	555e      	strb	r6, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8007d10:	7a5d      	ldrb	r5, [r3, #9]
 8007d12:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007d16:	606c      	str	r4, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8007d18:	7a5c      	ldrb	r4, [r3, #9]
 8007d1a:	441c      	add	r4, r3
 8007d1c:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8007d1e:	7a5a      	ldrb	r2, [r3, #9]
 8007d20:	1c54      	adds	r4, r2, #1
 8007d22:	b2e4      	uxtb	r4, r4
 8007d24:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8007d26:	3230      	adds	r2, #48	; 0x30
 8007d28:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8007d2a:	233a      	movs	r3, #58	; 0x3a
 8007d2c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8007d2e:	232f      	movs	r3, #47	; 0x2f
 8007d30:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8007d32:	70ce      	strb	r6, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8007d34:	bc70      	pop	{r4, r5, r6}
 8007d36:	4770      	bx	lr
  uint8_t ret = 1;
 8007d38:	2001      	movs	r0, #1
}
 8007d3a:	4770      	bx	lr
 8007d3c:	200000b4 	.word	0x200000b4

08007d40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d40:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d42:	2200      	movs	r2, #0
 8007d44:	f7ff ffd8 	bl	8007cf8 <FATFS_LinkDriverEx>
}
 8007d48:	bd08      	pop	{r3, pc}
	...

08007d4c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007d4c:	b500      	push	{lr}
 8007d4e:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007d50:	2300      	movs	r3, #0
 8007d52:	9307      	str	r3, [sp, #28]
 8007d54:	9308      	str	r3, [sp, #32]
 8007d56:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	9301      	str	r3, [sp, #4]
 8007d5c:	9302      	str	r3, [sp, #8]
 8007d5e:	9303      	str	r3, [sp, #12]
 8007d60:	9304      	str	r3, [sp, #16]
 8007d62:	9305      	str	r3, [sp, #20]
 8007d64:	9306      	str	r3, [sp, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8007d66:	4837      	ldr	r0, [pc, #220]	; (8007e44 <MX_ADC1_Init+0xf8>)
 8007d68:	4a37      	ldr	r2, [pc, #220]	; (8007e48 <MX_ADC1_Init+0xfc>)
 8007d6a:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8007d6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007d70:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8007d72:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007d74:	2201      	movs	r2, #1
 8007d76:	60c2      	str	r2, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007d78:	2108      	movs	r1, #8
 8007d7a:	6101      	str	r1, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007d7c:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007d7e:	7542      	strb	r2, [r0, #21]
  hadc1.Init.NbrOfConversion = 4;
 8007d80:	2104      	movs	r1, #4
 8007d82:	6181      	str	r1, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007d84:	7703      	strb	r3, [r0, #28]
  hadc1.Init.NbrOfDiscConversion = 4;
 8007d86:	6201      	str	r1, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d88:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007d8a:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8007d8c:	2103      	movs	r1, #3
 8007d8e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007d90:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007d92:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8007d94:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8007d98:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8007d9a:	2120      	movs	r1, #32
 8007d9c:	6401      	str	r1, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8007d9e:	6443      	str	r3, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8007da0:	6482      	str	r2, [r0, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007da2:	f7f8 ff99 	bl	8000cd8 <HAL_ADC_Init>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d13a      	bne.n	8007e20 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007daa:	2300      	movs	r3, #0
 8007dac:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007dae:	a907      	add	r1, sp, #28
 8007db0:	4824      	ldr	r0, [pc, #144]	; (8007e44 <MX_ADC1_Init+0xf8>)
 8007db2:	f7f9 f8c1 	bl	8000f38 <HAL_ADCEx_MultiModeConfigChannel>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d135      	bne.n	8007e26 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8007dba:	4b24      	ldr	r3, [pc, #144]	; (8007e4c <MX_ADC1_Init+0x100>)
 8007dbc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007dbe:	2306      	movs	r3, #6
 8007dc0:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8007dc2:	2304      	movs	r3, #4
 8007dc4:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007dc6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007dca:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007dcc:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 32768;
 8007dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dd2:	9305      	str	r3, [sp, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f88d 3019 	strb.w	r3, [sp, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007dda:	4669      	mov	r1, sp
 8007ddc:	4819      	ldr	r0, [pc, #100]	; (8007e44 <MX_ADC1_Init+0xf8>)
 8007dde:	f7f8 fb5f 	bl	80004a0 <HAL_ADC_ConfigChannel>
 8007de2:	bb18      	cbnz	r0, 8007e2c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8007de4:	4b1a      	ldr	r3, [pc, #104]	; (8007e50 <MX_ADC1_Init+0x104>)
 8007de6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007de8:	230c      	movs	r3, #12
 8007dea:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007dec:	4669      	mov	r1, sp
 8007dee:	4815      	ldr	r0, [pc, #84]	; (8007e44 <MX_ADC1_Init+0xf8>)
 8007df0:	f7f8 fb56 	bl	80004a0 <HAL_ADC_ConfigChannel>
 8007df4:	b9e8      	cbnz	r0, 8007e32 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8007df6:	4b17      	ldr	r3, [pc, #92]	; (8007e54 <MX_ADC1_Init+0x108>)
 8007df8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007dfa:	2312      	movs	r3, #18
 8007dfc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007dfe:	4669      	mov	r1, sp
 8007e00:	4810      	ldr	r0, [pc, #64]	; (8007e44 <MX_ADC1_Init+0xf8>)
 8007e02:	f7f8 fb4d 	bl	80004a0 <HAL_ADC_ConfigChannel>
 8007e06:	b9b8      	cbnz	r0, 8007e38 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007e08:	4b13      	ldr	r3, [pc, #76]	; (8007e58 <MX_ADC1_Init+0x10c>)
 8007e0a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007e0c:	2318      	movs	r3, #24
 8007e0e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007e10:	4669      	mov	r1, sp
 8007e12:	480c      	ldr	r0, [pc, #48]	; (8007e44 <MX_ADC1_Init+0xf8>)
 8007e14:	f7f8 fb44 	bl	80004a0 <HAL_ADC_ConfigChannel>
 8007e18:	b988      	cbnz	r0, 8007e3e <MX_ADC1_Init+0xf2>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007e1a:	b00b      	add	sp, #44	; 0x2c
 8007e1c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007e20:	f001 fb9a 	bl	8009558 <Error_Handler>
 8007e24:	e7c1      	b.n	8007daa <MX_ADC1_Init+0x5e>
    Error_Handler();
 8007e26:	f001 fb97 	bl	8009558 <Error_Handler>
 8007e2a:	e7c6      	b.n	8007dba <MX_ADC1_Init+0x6e>
    Error_Handler();
 8007e2c:	f001 fb94 	bl	8009558 <Error_Handler>
 8007e30:	e7d8      	b.n	8007de4 <MX_ADC1_Init+0x98>
    Error_Handler();
 8007e32:	f001 fb91 	bl	8009558 <Error_Handler>
 8007e36:	e7de      	b.n	8007df6 <MX_ADC1_Init+0xaa>
    Error_Handler();
 8007e38:	f001 fb8e 	bl	8009558 <Error_Handler>
 8007e3c:	e7e4      	b.n	8007e08 <MX_ADC1_Init+0xbc>
    Error_Handler();
 8007e3e:	f001 fb8b 	bl	8009558 <Error_Handler>
}
 8007e42:	e7ea      	b.n	8007e1a <MX_ADC1_Init+0xce>
 8007e44:	200001b0 	.word	0x200001b0
 8007e48:	40022000 	.word	0x40022000
 8007e4c:	25b00200 	.word	0x25b00200
 8007e50:	4fb80000 	.word	0x4fb80000
 8007e54:	47520000 	.word	0x47520000
 8007e58:	3ef08000 	.word	0x3ef08000

08007e5c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8007e5c:	b500      	push	{lr}
 8007e5e:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007e60:	2300      	movs	r3, #0
 8007e62:	9301      	str	r3, [sp, #4]
 8007e64:	9302      	str	r3, [sp, #8]
 8007e66:	9303      	str	r3, [sp, #12]
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	9305      	str	r3, [sp, #20]
 8007e6c:	9306      	str	r3, [sp, #24]
 8007e6e:	9307      	str	r3, [sp, #28]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8007e70:	4823      	ldr	r0, [pc, #140]	; (8007f00 <MX_ADC3_Init+0xa4>)
 8007e72:	4a24      	ldr	r2, [pc, #144]	; (8007f04 <MX_ADC3_Init+0xa8>)
 8007e74:	6002      	str	r2, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8007e76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007e7a:	6042      	str	r2, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8007e7c:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007e7e:	2201      	movs	r2, #1
 8007e80:	60c2      	str	r2, [r0, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007e82:	2108      	movs	r1, #8
 8007e84:	6101      	str	r1, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8007e86:	7503      	strb	r3, [r0, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8007e88:	7542      	strb	r2, [r0, #21]
  hadc3.Init.NbrOfConversion = 2;
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8007e8e:	7703      	strb	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8007e90:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007e94:	6242      	str	r2, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8007e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e9a:	6282      	str	r2, [r0, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8007e9c:	2203      	movs	r2, #3
 8007e9e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007ea0:	6303      	str	r3, [r0, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007ea2:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8007ea4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8007ea8:	f7f8 ff16 	bl	8000cd8 <HAL_ADC_Init>
 8007eac:	b9f0      	cbnz	r0, 8007eec <MX_ADC3_Init+0x90>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007eae:	4b16      	ldr	r3, [pc, #88]	; (8007f08 <MX_ADC3_Init+0xac>)
 8007eb0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007eb2:	2306      	movs	r3, #6
 8007eb4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8007eb6:	2304      	movs	r3, #4
 8007eb8:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007eba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007ebe:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007ec0:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9306      	str	r3, [sp, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8007ec6:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007eca:	a901      	add	r1, sp, #4
 8007ecc:	480c      	ldr	r0, [pc, #48]	; (8007f00 <MX_ADC3_Init+0xa4>)
 8007ece:	f7f8 fae7 	bl	80004a0 <HAL_ADC_ConfigChannel>
 8007ed2:	b970      	cbnz	r0, 8007ef2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007ed4:	4b0d      	ldr	r3, [pc, #52]	; (8007f0c <MX_ADC3_Init+0xb0>)
 8007ed6:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007ed8:	230c      	movs	r3, #12
 8007eda:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007edc:	a901      	add	r1, sp, #4
 8007ede:	4808      	ldr	r0, [pc, #32]	; (8007f00 <MX_ADC3_Init+0xa4>)
 8007ee0:	f7f8 fade 	bl	80004a0 <HAL_ADC_ConfigChannel>
 8007ee4:	b940      	cbnz	r0, 8007ef8 <MX_ADC3_Init+0x9c>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8007ee6:	b009      	add	sp, #36	; 0x24
 8007ee8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007eec:	f001 fb34 	bl	8009558 <Error_Handler>
 8007ef0:	e7dd      	b.n	8007eae <MX_ADC3_Init+0x52>
    Error_Handler();
 8007ef2:	f001 fb31 	bl	8009558 <Error_Handler>
 8007ef6:	e7ed      	b.n	8007ed4 <MX_ADC3_Init+0x78>
    Error_Handler();
 8007ef8:	f001 fb2e 	bl	8009558 <Error_Handler>
}
 8007efc:	e7f3      	b.n	8007ee6 <MX_ADC3_Init+0x8a>
 8007efe:	bf00      	nop
 8007f00:	20000214 	.word	0x20000214
 8007f04:	58026000 	.word	0x58026000
 8007f08:	0c900008 	.word	0x0c900008
 8007f0c:	08600004 	.word	0x08600004

08007f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f12:	b0bb      	sub	sp, #236	; 0xec
 8007f14:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f16:	2100      	movs	r1, #0
 8007f18:	9135      	str	r1, [sp, #212]	; 0xd4
 8007f1a:	9136      	str	r1, [sp, #216]	; 0xd8
 8007f1c:	9137      	str	r1, [sp, #220]	; 0xdc
 8007f1e:	9138      	str	r1, [sp, #224]	; 0xe0
 8007f20:	9139      	str	r1, [sp, #228]	; 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007f22:	22bc      	movs	r2, #188	; 0xbc
 8007f24:	a806      	add	r0, sp, #24
 8007f26:	f002 fbc1 	bl	800a6ac <memset>
  if(adcHandle->Instance==ADC1)
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	4a61      	ldr	r2, [pc, #388]	; (80080b4 <HAL_ADC_MspInit+0x1a4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d004      	beq.n	8007f3c <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8007f32:	4a61      	ldr	r2, [pc, #388]	; (80080b8 <HAL_ADC_MspInit+0x1a8>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d06b      	beq.n	8008010 <HAL_ADC_MspInit+0x100>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8007f38:	b03b      	add	sp, #236	; 0xec
 8007f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007f3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f40:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8007f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f46:	932e      	str	r3, [sp, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f48:	a806      	add	r0, sp, #24
 8007f4a:	f7fb fd83 	bl	8003a54 <HAL_RCCEx_PeriphCLKConfig>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d158      	bne.n	8008004 <HAL_ADC_MspInit+0xf4>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007f52:	4b5a      	ldr	r3, [pc, #360]	; (80080bc <HAL_ADC_MspInit+0x1ac>)
 8007f54:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007f58:	f042 0220 	orr.w	r2, r2, #32
 8007f5c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8007f60:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007f64:	f002 0220 	and.w	r2, r2, #32
 8007f68:	9201      	str	r2, [sp, #4]
 8007f6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007f70:	f042 0201 	orr.w	r2, r2, #1
 8007f74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007f78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007f7c:	f002 0201 	and.w	r2, r2, #1
 8007f80:	9202      	str	r2, [sp, #8]
 8007f82:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007f88:	f042 0202 	orr.w	r2, r2, #2
 8007f8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	9303      	str	r3, [sp, #12]
 8007f9a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 8007f9c:	232a      	movs	r3, #42	; 0x2a
 8007f9e:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007fa0:	2703      	movs	r7, #3
 8007fa2:	9736      	str	r7, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fa4:	2500      	movs	r5, #0
 8007fa6:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fa8:	a935      	add	r1, sp, #212	; 0xd4
 8007faa:	4845      	ldr	r0, [pc, #276]	; (80080c0 <HAL_ADC_MspInit+0x1b0>)
 8007fac:	f7fa fb28 	bl	8002600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007fb0:	2601      	movs	r6, #1
 8007fb2:	9635      	str	r6, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007fb4:	9736      	str	r7, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb6:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fb8:	a935      	add	r1, sp, #212	; 0xd4
 8007fba:	4842      	ldr	r0, [pc, #264]	; (80080c4 <HAL_ADC_MspInit+0x1b4>)
 8007fbc:	f7fa fb20 	bl	8002600 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8007fc0:	4841      	ldr	r0, [pc, #260]	; (80080c8 <HAL_ADC_MspInit+0x1b8>)
 8007fc2:	4b42      	ldr	r3, [pc, #264]	; (80080cc <HAL_ADC_MspInit+0x1bc>)
 8007fc4:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8007fc6:	2309      	movs	r3, #9
 8007fc8:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007fca:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fcc:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fd2:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fd8:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007fda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007fde:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fe4:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8007fe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007fea:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007fec:	2304      	movs	r3, #4
 8007fee:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007ff0:	6286      	str	r6, [r0, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8007ff2:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007ff4:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007ff6:	f7f9 fb17 	bl	8001628 <HAL_DMA_Init>
 8007ffa:	b930      	cbnz	r0, 800800a <HAL_ADC_MspInit+0xfa>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007ffc:	4b32      	ldr	r3, [pc, #200]	; (80080c8 <HAL_ADC_MspInit+0x1b8>)
 8007ffe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008000:	639c      	str	r4, [r3, #56]	; 0x38
 8008002:	e799      	b.n	8007f38 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 8008004:	f001 faa8 	bl	8009558 <Error_Handler>
 8008008:	e7a3      	b.n	8007f52 <HAL_ADC_MspInit+0x42>
      Error_Handler();
 800800a:	f001 faa5 	bl	8009558 <Error_Handler>
 800800e:	e7f5      	b.n	8007ffc <HAL_ADC_MspInit+0xec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8008010:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008014:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8008016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800801a:	932e      	str	r3, [sp, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800801c:	a806      	add	r0, sp, #24
 800801e:	f7fb fd19 	bl	8003a54 <HAL_RCCEx_PeriphCLKConfig>
 8008022:	2800      	cmp	r0, #0
 8008024:	d140      	bne.n	80080a8 <HAL_ADC_MspInit+0x198>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8008026:	4b25      	ldr	r3, [pc, #148]	; (80080bc <HAL_ADC_MspInit+0x1ac>)
 8008028:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800802c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008030:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008034:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008038:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 800803c:	9204      	str	r2, [sp, #16]
 800803e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008040:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008044:	f042 0220 	orr.w	r2, r2, #32
 8008048:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800804c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	9305      	str	r3, [sp, #20]
 8008056:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8008058:	f44f 7320 	mov.w	r3, #640	; 0x280
 800805c:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800805e:	2303      	movs	r3, #3
 8008060:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008062:	2500      	movs	r5, #0
 8008064:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008066:	a935      	add	r1, sp, #212	; 0xd4
 8008068:	4819      	ldr	r0, [pc, #100]	; (80080d0 <HAL_ADC_MspInit+0x1c0>)
 800806a:	f7fa fac9 	bl	8002600 <HAL_GPIO_Init>
    hdma_adc3.Instance = BDMA_Channel0;
 800806e:	4819      	ldr	r0, [pc, #100]	; (80080d4 <HAL_ADC_MspInit+0x1c4>)
 8008070:	4b19      	ldr	r3, [pc, #100]	; (80080d8 <HAL_ADC_MspInit+0x1c8>)
 8008072:	6003      	str	r3, [r0, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8008074:	2311      	movs	r3, #17
 8008076:	6043      	str	r3, [r0, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008078:	6085      	str	r5, [r0, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800807a:	60c5      	str	r5, [r0, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800807c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008080:	6103      	str	r3, [r0, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008086:	6143      	str	r3, [r0, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008088:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800808c:	6183      	str	r3, [r0, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800808e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008092:	61c3      	str	r3, [r0, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8008094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008098:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800809a:	f7f9 fac5 	bl	8001628 <HAL_DMA_Init>
 800809e:	b930      	cbnz	r0, 80080ae <HAL_ADC_MspInit+0x19e>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80080a0:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <HAL_ADC_MspInit+0x1c4>)
 80080a2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80080a4:	639c      	str	r4, [r3, #56]	; 0x38
}
 80080a6:	e747      	b.n	8007f38 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 80080a8:	f001 fa56 	bl	8009558 <Error_Handler>
 80080ac:	e7bb      	b.n	8008026 <HAL_ADC_MspInit+0x116>
      Error_Handler();
 80080ae:	f001 fa53 	bl	8009558 <Error_Handler>
 80080b2:	e7f5      	b.n	80080a0 <HAL_ADC_MspInit+0x190>
 80080b4:	40022000 	.word	0x40022000
 80080b8:	58026000 	.word	0x58026000
 80080bc:	58024400 	.word	0x58024400
 80080c0:	58020000 	.word	0x58020000
 80080c4:	58020400 	.word	0x58020400
 80080c8:	20000278 	.word	0x20000278
 80080cc:	40020010 	.word	0x40020010
 80080d0:	58021400 	.word	0x58021400
 80080d4:	20000138 	.word	0x20000138
 80080d8:	58025408 	.word	0x58025408

080080dc <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 80080dc:	b500      	push	{lr}
 80080de:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80080e0:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <MX_BDMA_Init+0x34>)
 80080e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80080e6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80080ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80080ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 80080fa:	2200      	movs	r2, #0
 80080fc:	4611      	mov	r1, r2
 80080fe:	2081      	movs	r0, #129	; 0x81
 8008100:	f7f8 ffde 	bl	80010c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8008104:	2081      	movs	r0, #129	; 0x81
 8008106:	f7f9 f80d 	bl	8001124 <HAL_NVIC_EnableIRQ>

}
 800810a:	b003      	add	sp, #12
 800810c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008110:	58024400 	.word	0x58024400

08008114 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008114:	b500      	push	{lr}
 8008116:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	4613      	mov	r3, r2
 800811c:	460a      	mov	r2, r1
 800811e:	4601      	mov	r1, r0
 8008120:	4803      	ldr	r0, [pc, #12]	; (8008130 <BSP_SD_ReadBlocks+0x1c>)
 8008122:	f7fd fdf7 	bl	8005d14 <HAL_SD_ReadBlocks>
 8008126:	b100      	cbz	r0, 800812a <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8008128:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800812a:	b003      	add	sp, #12
 800812c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008130:	20019958 	.word	0x20019958

08008134 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008134:	b500      	push	{lr}
 8008136:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	4613      	mov	r3, r2
 800813c:	460a      	mov	r2, r1
 800813e:	4601      	mov	r1, r0
 8008140:	4803      	ldr	r0, [pc, #12]	; (8008150 <BSP_SD_WriteBlocks+0x1c>)
 8008142:	f7fd fee9 	bl	8005f18 <HAL_SD_WriteBlocks>
 8008146:	b100      	cbz	r0, 800814a <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8008148:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800814a:	b003      	add	sp, #12
 800814c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008150:	20019958 	.word	0x20019958

08008154 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008154:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008156:	4803      	ldr	r0, [pc, #12]	; (8008164 <BSP_SD_GetCardState+0x10>)
 8008158:	f7fe fb72 	bl	8006840 <HAL_SD_GetCardState>
}
 800815c:	3804      	subs	r0, #4
 800815e:	bf18      	it	ne
 8008160:	2001      	movne	r0, #1
 8008162:	bd08      	pop	{r3, pc}
 8008164:	20019958 	.word	0x20019958

08008168 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008168:	b508      	push	{r3, lr}
 800816a:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800816c:	4801      	ldr	r0, [pc, #4]	; (8008174 <BSP_SD_GetCardInfo+0xc>)
 800816e:	f7fe faa9 	bl	80066c4 <HAL_SD_GetCardInfo>
}
 8008172:	bd08      	pop	{r3, pc}
 8008174:	20019958 	.word	0x20019958

08008178 <BSP_SD_WriteCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 8008178:	4770      	bx	lr

0800817a <HAL_SD_TxCpltCallback>:
{
 800817a:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800817c:	f7ff fffc 	bl	8008178 <BSP_SD_WriteCpltCallback>
}
 8008180:	bd08      	pop	{r3, pc}

08008182 <BSP_SD_ReadCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 8008182:	4770      	bx	lr

08008184 <HAL_SD_RxCpltCallback>:
{
 8008184:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8008186:	f7ff fffc 	bl	8008182 <BSP_SD_ReadCpltCallback>
}
 800818a:	bd08      	pop	{r3, pc}

0800818c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800818c:	b500      	push	{lr}
 800818e:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8008190:	2301      	movs	r3, #1
 8008192:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008196:	f000 f903 	bl	80083a0 <BSP_PlatformIsDetected>
 800819a:	b910      	cbnz	r0, 80081a2 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 800819c:	2300      	movs	r3, #0
 800819e:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 80081a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80081a6:	b003      	add	sp, #12
 80081a8:	f85d fb04 	ldr.w	pc, [sp], #4

080081ac <BSP_SD_Init>:
{
 80081ac:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80081ae:	f7ff ffed 	bl	800818c <BSP_SD_IsDetected>
 80081b2:	2801      	cmp	r0, #1
 80081b4:	d002      	beq.n	80081bc <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 80081b6:	2502      	movs	r5, #2
}
 80081b8:	4628      	mov	r0, r5
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd1);
 80081be:	4807      	ldr	r0, [pc, #28]	; (80081dc <BSP_SD_Init+0x30>)
 80081c0:	f7fe fb4f 	bl	8006862 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80081c4:	4605      	mov	r5, r0
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d1f6      	bne.n	80081b8 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80081ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80081ce:	4803      	ldr	r0, [pc, #12]	; (80081dc <BSP_SD_Init+0x30>)
 80081d0:	f7fe fa8a 	bl	80066e8 <HAL_SD_ConfigWideBusOperation>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d0ef      	beq.n	80081b8 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 80081d8:	4625      	mov	r5, r4
 80081da:	e7ed      	b.n	80081b8 <BSP_SD_Init+0xc>
 80081dc:	20019958 	.word	0x20019958

080081e0 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	b083      	sub	sp, #12
 80081e6:	4605      	mov	r5, r0

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80081e8:	2201      	movs	r2, #1
 80081ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80081ee:	4842      	ldr	r0, [pc, #264]	; (80082f8 <AudioCodec_init+0x118>)
 80081f0:	f7fa faff 	bl	80027f2 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 80081f4:	2002      	movs	r0, #2
 80081f6:	f7f8 f8d7 	bl	80003a8 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 80081fa:	4c40      	ldr	r4, [pc, #256]	; (80082fc <AudioCodec_init+0x11c>)
 80081fc:	f04f 0a07 	mov.w	sl, #7
 8008200:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x03;
 8008204:	f04f 0b03 	mov.w	fp, #3
 8008208:	f884 b001 	strb.w	fp, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800820c:	4e3c      	ldr	r6, [pc, #240]	; (8008300 <AudioCodec_init+0x120>)
 800820e:	4f3d      	ldr	r7, [pc, #244]	; (8008304 <AudioCodec_init+0x124>)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	8833      	ldrh	r3, [r6, #0]
 8008216:	4622      	mov	r2, r4
 8008218:	2120      	movs	r1, #32
 800821a:	4628      	mov	r0, r5
 800821c:	f7fa fc40 	bl	8002aa0 <HAL_I2C_Master_Transmit>
 8008220:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8008308 <AudioCodec_init+0x128>
 8008224:	f888 0000 	strb.w	r0, [r8]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 8008228:	f04f 0901 	mov.w	r9, #1
 800822c:	f884 9000 	strb.w	r9, [r4]
	myI2cData[1] = 0x41;
 8008230:	2341      	movs	r3, #65	; 0x41
 8008232:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	8833      	ldrh	r3, [r6, #0]
 800823a:	4622      	mov	r2, r4
 800823c:	2120      	movs	r1, #32
 800823e:	4628      	mov	r0, r5
 8008240:	f7fa fc2e 	bl	8002aa0 <HAL_I2C_Master_Transmit>
 8008244:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 8008248:	f04f 0302 	mov.w	r3, #2
 800824c:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x00;
 800824e:	2300      	movs	r3, #0
 8008250:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	8833      	ldrh	r3, [r6, #0]
 8008258:	4622      	mov	r2, r4
 800825a:	2120      	movs	r1, #32
 800825c:	4628      	mov	r0, r5
 800825e:	f7fa fc1f 	bl	8002aa0 <HAL_I2C_Master_Transmit>
 8008262:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 8008266:	f884 b000 	strb.w	fp, [r4]
	myI2cData[1] = 0x79;
 800826a:	2379      	movs	r3, #121	; 0x79
 800826c:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	8833      	ldrh	r3, [r6, #0]
 8008274:	4622      	mov	r2, r4
 8008276:	2120      	movs	r1, #32
 8008278:	4628      	mov	r0, r5
 800827a:	f7fa fc11 	bl	8002aa0 <HAL_I2C_Master_Transmit>
 800827e:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 8008282:	2304      	movs	r3, #4
 8008284:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 8008286:	f884 9001 	strb.w	r9, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	8833      	ldrh	r3, [r6, #0]
 8008290:	4622      	mov	r2, r4
 8008292:	2120      	movs	r1, #32
 8008294:	4628      	mov	r0, r5
 8008296:	f7fa fc03 	bl	8002aa0 <HAL_I2C_Master_Transmit>
 800829a:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 800829e:	2305      	movs	r3, #5
 80082a0:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 80082a2:	f884 9001 	strb.w	r9, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	8833      	ldrh	r3, [r6, #0]
 80082ac:	4622      	mov	r2, r4
 80082ae:	2120      	movs	r1, #32
 80082b0:	4628      	mov	r0, r5
 80082b2:	f7fa fbf5 	bl	8002aa0 <HAL_I2C_Master_Transmit>
 80082b6:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 80082ba:	2306      	movs	r3, #6
 80082bc:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x10;
 80082be:	2310      	movs	r3, #16
 80082c0:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	8833      	ldrh	r3, [r6, #0]
 80082c8:	4622      	mov	r2, r4
 80082ca:	2120      	movs	r1, #32
 80082cc:	4628      	mov	r0, r5
 80082ce:	f7fa fbe7 	bl	8002aa0 <HAL_I2C_Master_Transmit>
 80082d2:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 80082d6:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x02;
 80082da:	f04f 0302 	mov.w	r3, #2
 80082de:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	8833      	ldrh	r3, [r6, #0]
 80082e6:	4622      	mov	r2, r4
 80082e8:	2120      	movs	r1, #32
 80082ea:	4628      	mov	r0, r5
 80082ec:	f7fa fbd8 	bl	8002aa0 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	//codecReady = 1;

}
 80082f0:	b003      	add	sp, #12
 80082f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f6:	bf00      	nop
 80082f8:	58020800 	.word	0x58020800
 80082fc:	200000c0 	.word	0x200000c0
 8008300:	2000000c 	.word	0x2000000c
 8008304:	20000008 	.word	0x20000008
 8008308:	200002f0 	.word	0x200002f0

0800830c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800830c:	b500      	push	{lr}
 800830e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008310:	4b1b      	ldr	r3, [pc, #108]	; (8008380 <MX_DMA_Init+0x74>)
 8008312:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8008316:	f042 0201 	orr.w	r2, r2, #1
 800831a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800831e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800832a:	2200      	movs	r2, #0
 800832c:	2101      	movs	r1, #1
 800832e:	200b      	movs	r0, #11
 8008330:	f7f8 fec6 	bl	80010c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8008334:	200b      	movs	r0, #11
 8008336:	f7f8 fef5 	bl	8001124 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800833a:	2200      	movs	r2, #0
 800833c:	4611      	mov	r1, r2
 800833e:	200c      	movs	r0, #12
 8008340:	f7f8 febe 	bl	80010c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8008344:	200c      	movs	r0, #12
 8008346:	f7f8 feed 	bl	8001124 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800834a:	2200      	movs	r2, #0
 800834c:	4611      	mov	r1, r2
 800834e:	200d      	movs	r0, #13
 8008350:	f7f8 feb6 	bl	80010c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8008354:	200d      	movs	r0, #13
 8008356:	f7f8 fee5 	bl	8001124 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 2, 0);
 800835a:	2200      	movs	r2, #0
 800835c:	2102      	movs	r1, #2
 800835e:	200e      	movs	r0, #14
 8008360:	f7f8 feae 	bl	80010c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8008364:	200e      	movs	r0, #14
 8008366:	f7f8 fedd 	bl	8001124 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800836a:	2200      	movs	r2, #0
 800836c:	4611      	mov	r1, r2
 800836e:	200f      	movs	r0, #15
 8008370:	f7f8 fea6 	bl	80010c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8008374:	200f      	movs	r0, #15
 8008376:	f7f8 fed5 	bl	8001124 <HAL_NVIC_EnableIRQ>

}
 800837a:	b003      	add	sp, #12
 800837c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008380:	58024400 	.word	0x58024400

08008384 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008384:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008386:	4903      	ldr	r1, [pc, #12]	; (8008394 <MX_FATFS_Init+0x10>)
 8008388:	4803      	ldr	r0, [pc, #12]	; (8008398 <MX_FATFS_Init+0x14>)
 800838a:	f7ff fcd9 	bl	8007d40 <FATFS_LinkDriver>
 800838e:	4b03      	ldr	r3, [pc, #12]	; (800839c <MX_FATFS_Init+0x18>)
 8008390:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008392:	bd08      	pop	{r3, pc}
 8008394:	200002f8 	.word	0x200002f8
 8008398:	0800c4e0 	.word	0x0800c4e0
 800839c:	200002f4 	.word	0x200002f4

080083a0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80083a0:	b510      	push	{r4, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80083a2:	4c07      	ldr	r4, [pc, #28]	; (80083c0 <BSP_PlatformIsDetected+0x20>)
 80083a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80083a8:	4620      	mov	r0, r4
 80083aa:	f7fa fa1b 	bl	80027e4 <HAL_GPIO_ReadPin>
        status = SD_NOT_PRESENT;
    }
    /* USER CODE BEGIN 1 */
    status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 80083ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80083b2:	4620      	mov	r0, r4
 80083b4:	f7fa fa16 	bl	80027e4 <HAL_GPIO_ReadPin>
 80083b8:	2801      	cmp	r0, #1
 80083ba:	d000      	beq.n	80083be <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80083bc:	2000      	movs	r0, #0
    }
    /* USER CODE END 1 */
    return status;
}
 80083be:	bd10      	pop	{r4, pc}
 80083c0:	58020800 	.word	0x58020800

080083c4 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80083c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083c6:	b0b7      	sub	sp, #220	; 0xdc
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083c8:	2300      	movs	r3, #0
 80083ca:	9331      	str	r3, [sp, #196]	; 0xc4
 80083cc:	9332      	str	r3, [sp, #200]	; 0xc8
 80083ce:	9333      	str	r3, [sp, #204]	; 0xcc
 80083d0:	9334      	str	r3, [sp, #208]	; 0xd0
 80083d2:	9335      	str	r3, [sp, #212]	; 0xd4
  if (FMC_Initialized) {
 80083d4:	4b2f      	ldr	r3, [pc, #188]	; (8008494 <HAL_FMC_MspInit+0xd0>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	b10b      	cbz	r3, 80083de <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80083da:	b037      	add	sp, #220	; 0xdc
 80083dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 80083de:	4b2d      	ldr	r3, [pc, #180]	; (8008494 <HAL_FMC_MspInit+0xd0>)
 80083e0:	2201      	movs	r2, #1
 80083e2:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80083e4:	22b8      	movs	r2, #184	; 0xb8
 80083e6:	2100      	movs	r1, #0
 80083e8:	a803      	add	r0, sp, #12
 80083ea:	f002 f95f 	bl	800a6ac <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80083ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083f2:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80083f4:	a802      	add	r0, sp, #8
 80083f6:	f7fb fb2d 	bl	8003a54 <HAL_RCCEx_PeriphCLKConfig>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d147      	bne.n	800848e <HAL_FMC_MspInit+0xca>
  __HAL_RCC_FMC_CLK_ENABLE();
 80083fe:	4b26      	ldr	r3, [pc, #152]	; (8008498 <HAL_FMC_MspInit+0xd4>)
 8008400:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008404:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008408:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800840c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8008418:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800841c:	9331      	str	r3, [sp, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800841e:	2702      	movs	r7, #2
 8008420:	9732      	str	r7, [sp, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008422:	2600      	movs	r6, #0
 8008424:	9633      	str	r6, [sp, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008426:	2503      	movs	r5, #3
 8008428:	9534      	str	r5, [sp, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800842a:	240c      	movs	r4, #12
 800842c:	9435      	str	r4, [sp, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800842e:	a931      	add	r1, sp, #196	; 0xc4
 8008430:	481a      	ldr	r0, [pc, #104]	; (800849c <HAL_FMC_MspInit+0xd8>)
 8008432:	f7fa f8e5 	bl	8002600 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8008436:	230d      	movs	r3, #13
 8008438:	9331      	str	r3, [sp, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800843a:	9732      	str	r7, [sp, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800843c:	9633      	str	r6, [sp, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800843e:	9534      	str	r5, [sp, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008440:	9435      	str	r4, [sp, #212]	; 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008442:	a931      	add	r1, sp, #196	; 0xc4
 8008444:	4816      	ldr	r0, [pc, #88]	; (80084a0 <HAL_FMC_MspInit+0xdc>)
 8008446:	f7fa f8db 	bl	8002600 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800844a:	f248 1337 	movw	r3, #33079	; 0x8137
 800844e:	9331      	str	r3, [sp, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008450:	9732      	str	r7, [sp, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008452:	9633      	str	r6, [sp, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008454:	9534      	str	r5, [sp, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008456:	9435      	str	r4, [sp, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008458:	a931      	add	r1, sp, #196	; 0xc4
 800845a:	4812      	ldr	r0, [pc, #72]	; (80084a4 <HAL_FMC_MspInit+0xe0>)
 800845c:	f7fa f8d0 	bl	8002600 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8008460:	f64f 7383 	movw	r3, #65411	; 0xff83
 8008464:	9331      	str	r3, [sp, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008466:	9732      	str	r7, [sp, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008468:	9633      	str	r6, [sp, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800846a:	9534      	str	r5, [sp, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800846c:	9435      	str	r4, [sp, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800846e:	a931      	add	r1, sp, #196	; 0xc4
 8008470:	480d      	ldr	r0, [pc, #52]	; (80084a8 <HAL_FMC_MspInit+0xe4>)
 8008472:	f7fa f8c5 	bl	8002600 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8008476:	f24c 7303 	movw	r3, #50947	; 0xc703
 800847a:	9331      	str	r3, [sp, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800847c:	9732      	str	r7, [sp, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800847e:	9633      	str	r6, [sp, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008480:	9534      	str	r5, [sp, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008482:	9435      	str	r4, [sp, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008484:	a931      	add	r1, sp, #196	; 0xc4
 8008486:	4809      	ldr	r0, [pc, #36]	; (80084ac <HAL_FMC_MspInit+0xe8>)
 8008488:	f7fa f8ba 	bl	8002600 <HAL_GPIO_Init>
 800848c:	e7a5      	b.n	80083da <HAL_FMC_MspInit+0x16>
      Error_Handler();
 800848e:	f001 f863 	bl	8009558 <Error_Handler>
 8008492:	e7b4      	b.n	80083fe <HAL_FMC_MspInit+0x3a>
 8008494:	200000c4 	.word	0x200000c4
 8008498:	58024400 	.word	0x58024400
 800849c:	58021400 	.word	0x58021400
 80084a0:	58020800 	.word	0x58020800
 80084a4:	58021800 	.word	0x58021800
 80084a8:	58021000 	.word	0x58021000
 80084ac:	58020c00 	.word	0x58020c00

080084b0 <MX_FMC_Init>:
{
 80084b0:	b500      	push	{lr}
 80084b2:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80084b4:	4817      	ldr	r0, [pc, #92]	; (8008514 <MX_FMC_Init+0x64>)
 80084b6:	4b18      	ldr	r3, [pc, #96]	; (8008518 <MX_FMC_Init+0x68>)
 80084b8:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80084ba:	2300      	movs	r3, #0
 80084bc:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80084be:	2201      	movs	r2, #1
 80084c0:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80084c2:	2208      	movs	r2, #8
 80084c4:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80084c6:	2210      	movs	r2, #16
 80084c8:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80084ca:	2240      	movs	r2, #64	; 0x40
 80084cc:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80084ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084d2:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80084d4:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80084d6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80084da:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80084dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80084e0:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80084e2:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 80084e4:	2302      	movs	r3, #2
 80084e6:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80084e8:	2206      	movs	r2, #6
 80084ea:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 80084ec:	2104      	movs	r1, #4
 80084ee:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 80084f0:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80084f2:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 80084f4:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 80084f6:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80084f8:	4469      	add	r1, sp
 80084fa:	f7fe fb2d 	bl	8006b58 <HAL_SDRAM_Init>
 80084fe:	b930      	cbnz	r0, 800850e <MX_FMC_Init+0x5e>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8008500:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8008504:	f7f7 ff6a 	bl	80003dc <HAL_SetFMCMemorySwappingConfig>
}
 8008508:	b009      	add	sp, #36	; 0x24
 800850a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 800850e:	f001 f823 	bl	8009558 <Error_Handler>
 8008512:	e7f5      	b.n	8008500 <MX_FMC_Init+0x50>
 8008514:	20000760 	.word	0x20000760
 8008518:	52004140 	.word	0x52004140

0800851c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800851c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800851e:	f7ff ff51 	bl	80083c4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8008522:	bd08      	pop	{r3, pc}

08008524 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8008524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008528:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800852a:	2400      	movs	r4, #0
 800852c:	9409      	str	r4, [sp, #36]	; 0x24
 800852e:	940a      	str	r4, [sp, #40]	; 0x28
 8008530:	940b      	str	r4, [sp, #44]	; 0x2c
 8008532:	940c      	str	r4, [sp, #48]	; 0x30
 8008534:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008536:	4b7c      	ldr	r3, [pc, #496]	; (8008728 <MX_GPIO_Init+0x204>)
 8008538:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800853c:	f042 0210 	orr.w	r2, r2, #16
 8008540:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008544:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008548:	f002 0210 	and.w	r2, r2, #16
 800854c:	9201      	str	r2, [sp, #4]
 800854e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008550:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008554:	f042 0204 	orr.w	r2, r2, #4
 8008558:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800855c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008560:	f002 0204 	and.w	r2, r2, #4
 8008564:	9202      	str	r2, [sp, #8]
 8008566:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008568:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800856c:	f042 0220 	orr.w	r2, r2, #32
 8008570:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008574:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008578:	f002 0220 	and.w	r2, r2, #32
 800857c:	9203      	str	r2, [sp, #12]
 800857e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008580:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008584:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008588:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800858c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008590:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008594:	9204      	str	r2, [sp, #16]
 8008596:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008598:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800859c:	f042 0201 	orr.w	r2, r2, #1
 80085a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80085a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80085a8:	f002 0201 	and.w	r2, r2, #1
 80085ac:	9205      	str	r2, [sp, #20]
 80085ae:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80085b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80085b4:	f042 0202 	orr.w	r2, r2, #2
 80085b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80085bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80085c0:	f002 0202 	and.w	r2, r2, #2
 80085c4:	9206      	str	r2, [sp, #24]
 80085c6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80085c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80085cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80085d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80085d8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80085dc:	9207      	str	r2, [sp, #28]
 80085de:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80085e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80085e4:	f042 0208 	orr.w	r2, r2, #8
 80085e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80085ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085f0:	f003 0308 	and.w	r3, r3, #8
 80085f4:	9308      	str	r3, [sp, #32]
 80085f6:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80085f8:	4f4c      	ldr	r7, [pc, #304]	; (800872c <MX_GPIO_Init+0x208>)
 80085fa:	4622      	mov	r2, r4
 80085fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008600:	4638      	mov	r0, r7
 8008602:	f7fa f8f6 	bl	80027f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8008606:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008738 <MX_GPIO_Init+0x214>
 800860a:	4622      	mov	r2, r4
 800860c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8008610:	4650      	mov	r0, sl
 8008612:	f7fa f8ee 	bl	80027f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8008616:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800873c <MX_GPIO_Init+0x218>
 800861a:	4622      	mov	r2, r4
 800861c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008620:	4648      	mov	r0, r9
 8008622:	f7fa f8e6 	bl	80027f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8008626:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8008740 <MX_GPIO_Init+0x21c>
 800862a:	4622      	mov	r2, r4
 800862c:	f44f 7154 	mov.w	r1, #848	; 0x350
 8008630:	4640      	mov	r0, r8
 8008632:	f7fa f8de 	bl	80027f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800863a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800863c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800863e:	2502      	movs	r5, #2
 8008640:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008642:	a909      	add	r1, sp, #36	; 0x24
 8008644:	4638      	mov	r0, r7
 8008646:	f7f9 ffdb 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800864a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800864e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008650:	2601      	movs	r6, #1
 8008652:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008654:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008656:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008658:	a909      	add	r1, sp, #36	; 0x24
 800865a:	4638      	mov	r0, r7
 800865c:	f7f9 ffd0 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC4 PC5
                           PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8008660:	f248 03f2 	movw	r3, #33010	; 0x80f2
 8008664:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008666:	2503      	movs	r5, #3
 8008668:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800866a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800866c:	a909      	add	r1, sp, #36	; 0x24
 800866e:	4638      	mov	r0, r7
 8008670:	f7f9 ffc6 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF8 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_10;
 8008674:	f44f 63a8 	mov.w	r3, #1344	; 0x540
 8008678:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800867a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800867c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800867e:	a909      	add	r1, sp, #36	; 0x24
 8008680:	482b      	ldr	r0, [pc, #172]	; (8008730 <MX_GPIO_Init+0x20c>)
 8008682:	f7f9 ffbd 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA4 PA6
                           PA7 PA8 PA10 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 8008686:	f249 53d5 	movw	r3, #38357	; 0x95d5
 800868a:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800868c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800868e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008690:	a909      	add	r1, sp, #36	; 0x24
 8008692:	4650      	mov	r0, sl
 8008694:	f7f9 ffb4 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_7;
 8008698:	23a6      	movs	r3, #166	; 0xa6
 800869a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800869c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800869e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086a0:	a909      	add	r1, sp, #36	; 0x24
 80086a2:	4640      	mov	r0, r8
 80086a4:	f7f9 ffac 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80086a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086ac:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80086ae:	4b21      	ldr	r3, [pc, #132]	; (8008734 <MX_GPIO_Init+0x210>)
 80086b0:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086b4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80086b8:	a909      	add	r1, sp, #36	; 0x24
 80086ba:	4638      	mov	r0, r7
 80086bc:	f7f9 ffa0 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4
 80086c0:	f243 03f8 	movw	r3, #12536	; 0x30f8
 80086c4:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086c6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086c8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086ca:	a909      	add	r1, sp, #36	; 0x24
 80086cc:	4638      	mov	r0, r7
 80086ce:	f7f9 ff97 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG11 PG12 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 80086d2:	f647 23c8 	movw	r3, #31432	; 0x7ac8
 80086d6:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086d8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086da:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80086dc:	a909      	add	r1, sp, #36	; 0x24
 80086de:	4648      	mov	r0, r9
 80086e0:	f7f9 ff8e 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80086e4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80086e8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086ea:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ec:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ee:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086f0:	a909      	add	r1, sp, #36	; 0x24
 80086f2:	4650      	mov	r0, sl
 80086f4:	f7f9 ff84 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80086f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086fc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086fe:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008700:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008702:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008704:	a909      	add	r1, sp, #36	; 0x24
 8008706:	4648      	mov	r0, r9
 8008708:	f7f9 ff7a 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800870c:	f44f 7354 	mov.w	r3, #848	; 0x350
 8008710:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008712:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008714:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008716:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008718:	a909      	add	r1, sp, #36	; 0x24
 800871a:	4640      	mov	r0, r8
 800871c:	f7f9 ff70 	bl	8002600 <HAL_GPIO_Init>

}
 8008720:	b00e      	add	sp, #56	; 0x38
 8008722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008726:	bf00      	nop
 8008728:	58024400 	.word	0x58024400
 800872c:	58020800 	.word	0x58020800
 8008730:	58021400 	.word	0x58021400
 8008734:	11110000 	.word	0x11110000
 8008738:	58020000 	.word	0x58020000
 800873c:	58021800 	.word	0x58021800
 8008740:	58020400 	.word	0x58020400

08008744 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008744:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8008746:	4812      	ldr	r0, [pc, #72]	; (8008790 <MX_I2C2_Init+0x4c>)
 8008748:	4b12      	ldr	r3, [pc, #72]	; (8008794 <MX_I2C2_Init+0x50>)
 800874a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800874c:	4b12      	ldr	r3, [pc, #72]	; (8008798 <MX_I2C2_Init+0x54>)
 800874e:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008754:	2201      	movs	r2, #1
 8008756:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008758:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800875a:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800875c:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800875e:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008760:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008762:	f7fa f93f 	bl	80029e4 <HAL_I2C_Init>
 8008766:	b950      	cbnz	r0, 800877e <MX_I2C2_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008768:	2100      	movs	r1, #0
 800876a:	4809      	ldr	r0, [pc, #36]	; (8008790 <MX_I2C2_Init+0x4c>)
 800876c:	f7fa fa56 	bl	8002c1c <HAL_I2CEx_ConfigAnalogFilter>
 8008770:	b940      	cbnz	r0, 8008784 <MX_I2C2_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008772:	2100      	movs	r1, #0
 8008774:	4806      	ldr	r0, [pc, #24]	; (8008790 <MX_I2C2_Init+0x4c>)
 8008776:	f7fa fa7f 	bl	8002c78 <HAL_I2CEx_ConfigDigitalFilter>
 800877a:	b930      	cbnz	r0, 800878a <MX_I2C2_Init+0x46>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800877c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800877e:	f000 feeb 	bl	8009558 <Error_Handler>
 8008782:	e7f1      	b.n	8008768 <MX_I2C2_Init+0x24>
    Error_Handler();
 8008784:	f000 fee8 	bl	8009558 <Error_Handler>
 8008788:	e7f3      	b.n	8008772 <MX_I2C2_Init+0x2e>
    Error_Handler();
 800878a:	f000 fee5 	bl	8009558 <Error_Handler>
}
 800878e:	e7f5      	b.n	800877c <MX_I2C2_Init+0x38>
 8008790:	20000794 	.word	0x20000794
 8008794:	40005800 	.word	0x40005800
 8008798:	00b03fdb 	.word	0x00b03fdb

0800879c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800879c:	b510      	push	{r4, lr}
 800879e:	b0b6      	sub	sp, #216	; 0xd8
 80087a0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087a2:	2100      	movs	r1, #0
 80087a4:	9131      	str	r1, [sp, #196]	; 0xc4
 80087a6:	9132      	str	r1, [sp, #200]	; 0xc8
 80087a8:	9133      	str	r1, [sp, #204]	; 0xcc
 80087aa:	9134      	str	r1, [sp, #208]	; 0xd0
 80087ac:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80087ae:	22bc      	movs	r2, #188	; 0xbc
 80087b0:	a802      	add	r0, sp, #8
 80087b2:	f001 ff7b 	bl	800a6ac <memset>
  if(i2cHandle->Instance==I2C2)
 80087b6:	6822      	ldr	r2, [r4, #0]
 80087b8:	4b1b      	ldr	r3, [pc, #108]	; (8008828 <HAL_I2C_MspInit+0x8c>)
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d001      	beq.n	80087c2 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80087be:	b036      	add	sp, #216	; 0xd8
 80087c0:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80087c2:	2308      	movs	r3, #8
 80087c4:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80087c6:	2300      	movs	r3, #0
 80087c8:	9322      	str	r3, [sp, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80087ca:	a802      	add	r0, sp, #8
 80087cc:	f7fb f942 	bl	8003a54 <HAL_RCCEx_PeriphCLKConfig>
 80087d0:	bb38      	cbnz	r0, 8008822 <HAL_I2C_MspInit+0x86>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80087d2:	4c16      	ldr	r4, [pc, #88]	; (800882c <HAL_I2C_MspInit+0x90>)
 80087d4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80087d8:	f043 0302 	orr.w	r3, r3, #2
 80087dc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80087e0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80087ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80087f0:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80087f2:	2312      	movs	r3, #18
 80087f4:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087fa:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80087fc:	2304      	movs	r3, #4
 80087fe:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008800:	a931      	add	r1, sp, #196	; 0xc4
 8008802:	480b      	ldr	r0, [pc, #44]	; (8008830 <HAL_I2C_MspInit+0x94>)
 8008804:	f7f9 fefc 	bl	8002600 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008808:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800880c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008810:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8008814:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8008818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	9b01      	ldr	r3, [sp, #4]
}
 8008820:	e7cd      	b.n	80087be <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8008822:	f000 fe99 	bl	8009558 <Error_Handler>
 8008826:	e7d4      	b.n	80087d2 <HAL_I2C_MspInit+0x36>
 8008828:	40005800 	.word	0x40005800
 800882c:	58024400 	.word	0x58024400
 8008830:	58020400 	.word	0x58020400

08008834 <randomNumber>:
}

/* USER CODE BEGIN 4 */


float randomNumber(void) {
 8008834:	b500      	push	{lr}
 8008836:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8008838:	a901      	add	r1, sp, #4
 800883a:	4807      	ldr	r0, [pc, #28]	; (8008858 <randomNumber+0x24>)
 800883c:	f7fc fc3d 	bl	80050ba <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8008840:	eddd 7a01 	vldr	s15, [sp, #4]
 8008844:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8008848:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800885c <randomNumber+0x28>
 800884c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008850:	b003      	add	sp, #12
 8008852:	f85d fb04 	ldr.w	pc, [sp], #4
 8008856:	bf00      	nop
 8008858:	20019724 	.word	0x20019724
 800885c:	2f80000d 	.word	0x2f80000d

08008860 <SystemClock_Config>:
{
 8008860:	b570      	push	{r4, r5, r6, lr}
 8008862:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008864:	224c      	movs	r2, #76	; 0x4c
 8008866:	2100      	movs	r1, #0
 8008868:	a809      	add	r0, sp, #36	; 0x24
 800886a:	f001 ff1f 	bl	800a6ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800886e:	2220      	movs	r2, #32
 8008870:	2100      	movs	r1, #0
 8008872:	a801      	add	r0, sp, #4
 8008874:	f001 ff1a 	bl	800a6ac <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008878:	2002      	movs	r0, #2
 800887a:	f7fa fa29 	bl	8002cd0 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800887e:	2300      	movs	r3, #0
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	4b27      	ldr	r3, [pc, #156]	; (8008920 <SystemClock_Config+0xc0>)
 8008884:	699a      	ldr	r2, [r3, #24]
 8008886:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800888a:	619a      	str	r2, [r3, #24]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	4b23      	ldr	r3, [pc, #140]	; (8008924 <SystemClock_Config+0xc4>)
 8008896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008898:	f042 0201 	orr.w	r2, r2, #1
 800889c:	62da      	str	r2, [r3, #44]	; 0x2c
 800889e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80088a8:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <SystemClock_Config+0xc0>)
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80088b0:	d0fa      	beq.n	80088a8 <SystemClock_Config+0x48>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80088b2:	4a1d      	ldr	r2, [pc, #116]	; (8008928 <SystemClock_Config+0xc8>)
 80088b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80088b6:	f023 0303 	bic.w	r3, r3, #3
 80088ba:	f043 0302 	orr.w	r3, r3, #2
 80088be:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80088c0:	2323      	movs	r3, #35	; 0x23
 80088c2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80088c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088c8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80088ca:	2301      	movs	r3, #1
 80088cc:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80088ce:	2440      	movs	r4, #64	; 0x40
 80088d0:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80088d2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80088d4:	2302      	movs	r3, #2
 80088d6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80088d8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80088da:	2205      	movs	r2, #5
 80088dc:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 80088de:	22c0      	movs	r2, #192	; 0xc0
 80088e0:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80088e2:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80088e4:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80088e6:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80088e8:	2608      	movs	r6, #8
 80088ea:	9619      	str	r6, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80088ec:	2500      	movs	r5, #0
 80088ee:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80088f0:	951b      	str	r5, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80088f2:	a809      	add	r0, sp, #36	; 0x24
 80088f4:	f7fa fa16 	bl	8002d24 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088f8:	233f      	movs	r3, #63	; 0x3f
 80088fa:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088fc:	2303      	movs	r3, #3
 80088fe:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008900:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8008902:	9604      	str	r6, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8008904:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008906:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800890c:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800890e:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008910:	2104      	movs	r1, #4
 8008912:	eb0d 0001 	add.w	r0, sp, r1
 8008916:	f7fa fe25 	bl	8003564 <HAL_RCC_ClockConfig>
}
 800891a:	b01c      	add	sp, #112	; 0x70
 800891c:	bd70      	pop	{r4, r5, r6, pc}
 800891e:	bf00      	nop
 8008920:	58024800 	.word	0x58024800
 8008924:	58000400 	.word	0x58000400
 8008928:	58024400 	.word	0x58024400

0800892c <PeriphCommonClock_Config>:
{
 800892c:	b500      	push	{lr}
 800892e:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008930:	2298      	movs	r2, #152	; 0x98
 8008932:	2100      	movs	r1, #0
 8008934:	a80a      	add	r0, sp, #40	; 0x28
 8008936:	f001 feb9 	bl	800a6ac <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 800893a:	4b0f      	ldr	r3, [pc, #60]	; (8008978 <PeriphCommonClock_Config+0x4c>)
 800893c:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800893e:	2319      	movs	r3, #25
 8008940:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8008942:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8008946:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8008948:	2307      	movs	r3, #7
 800894a:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800894c:	2302      	movs	r3, #2
 800894e:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8008950:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8008952:	2300      	movs	r3, #0
 8008954:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8008956:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8008958:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800895a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800895e:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8008960:	2301      	movs	r3, #1
 8008962:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8008964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008968:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800896a:	a801      	add	r0, sp, #4
 800896c:	f7fb f872 	bl	8003a54 <HAL_RCCEx_PeriphCLKConfig>
}
 8008970:	b031      	add	sp, #196	; 0xc4
 8008972:	f85d fb04 	ldr.w	pc, [sp], #4
 8008976:	bf00      	nop
 8008978:	80011100 	.word	0x80011100

0800897c <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 800897c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008980:	b087      	sub	sp, #28
    __IO uint32_t tmpmrd = 0;
 8008982:	2600      	movs	r6, #0
 8008984:	9605      	str	r6, [sp, #20]
    FMC_SDRAM_CommandTypeDef Command;
    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8008986:	2501      	movs	r5, #1
 8008988:	9501      	str	r5, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800898a:	2710      	movs	r7, #16
 800898c:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 1;
 800898e:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 8008990:	9604      	str	r6, [sp, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008992:	4c25      	ldr	r4, [pc, #148]	; (8008a28 <SDRAM_Initialization_sequence+0xac>)
 8008994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008998:	a901      	add	r1, sp, #4
 800899a:	4620      	mov	r0, r4
 800899c:	f7fe f904 	bl	8006ba8 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80089a0:	4628      	mov	r0, r5
 80089a2:	f7f7 fd01 	bl	80003a8 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 80089a6:	2302      	movs	r3, #2
 80089a8:	9301      	str	r3, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80089aa:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 1;
 80089ac:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 80089ae:	9604      	str	r6, [sp, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80089b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089b4:	a901      	add	r1, sp, #4
 80089b6:	4620      	mov	r0, r4
 80089b8:	f7fe f8f6 	bl	8006ba8 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 80089bc:	f240 2322 	movw	r3, #546	; 0x222
 80089c0:	9305      	str	r3, [sp, #20]
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80089c2:	2304      	movs	r3, #4
 80089c4:	9301      	str	r3, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80089c6:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 1;
 80089c8:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 80089ca:	9b05      	ldr	r3, [sp, #20]
 80089cc:	9304      	str	r3, [sp, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80089ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089d2:	a901      	add	r1, sp, #4
 80089d4:	4620      	mov	r0, r4
 80089d6:	f7fe f8e7 	bl	8006ba8 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80089da:	f04f 0903 	mov.w	r9, #3
 80089de:	f8cd 9004 	str.w	r9, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80089e2:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 8;
 80089e4:	f04f 0808 	mov.w	r8, #8
 80089e8:	f8cd 800c 	str.w	r8, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 80089ec:	9604      	str	r6, [sp, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80089ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089f2:	a901      	add	r1, sp, #4
 80089f4:	4620      	mov	r0, r4
 80089f6:	f7fe f8d7 	bl	8006ba8 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80089fa:	4628      	mov	r0, r5
 80089fc:	f7f7 fcd4 	bl	80003a8 <HAL_Delay>

    /* Step 5: Configure the 2nd Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8008a00:	f8cd 9004 	str.w	r9, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008a04:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 8;
 8008a06:	f8cd 800c 	str.w	r8, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 8008a0a:	9604      	str	r6, [sp, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a10:	a901      	add	r1, sp, #4
 8008a12:	4620      	mov	r0, r4
 8008a14:	f7fe f8c8 	bl	8006ba8 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 8008a18:	f240 5169 	movw	r1, #1385	; 0x569
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f7fe f8e4 	bl	8006bea <HAL_SDRAM_ProgramRefreshRate>
}
 8008a22:	b007      	add	sp, #28
 8008a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a28:	20000760 	.word	0x20000760

08008a2c <MPU_Conf>:
	*/
}
#endif

void MPU_Conf(void)
 {
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	b084      	sub	sp, #16
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 8008a30:	f7f8 fb9c 	bl	800116c <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008a34:	2401      	movs	r4, #1
 8008a36:	f88d 4000 	strb.w	r4, [sp]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8008a3a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8008a3e:	9301      	str	r3, [sp, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8008a40:	2311      	movs	r3, #17
 8008a42:	f88d 3008 	strb.w	r3, [sp, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8008a46:	2603      	movs	r6, #3
 8008a48:	f88d 600b 	strb.w	r6, [sp, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8008a4c:	f88d 400a 	strb.w	r4, [sp, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8008a50:	2500      	movs	r5, #0
 8008a52:	f88d 500e 	strb.w	r5, [sp, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8008a56:	f88d 500f 	strb.w	r5, [sp, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8008a5a:	f88d 500d 	strb.w	r5, [sp, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8008a5e:	f88d 5001 	strb.w	r5, [sp, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 8008a62:	f88d 5009 	strb.w	r5, [sp, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8008a66:	f88d 400c 	strb.w	r4, [sp, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008a6a:	4668      	mov	r0, sp
 8008a6c:	f7f8 fba0 	bl	80011b0 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008a70:	f88d 4000 	strb.w	r4, [sp]

	  //D3 Domain�SRAM
	  MPU_InitStruct.BaseAddress = 0x38000000;
 8008a74:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8008a78:	9301      	str	r3, [sp, #4]


	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8008a7a:	230f      	movs	r3, #15
 8008a7c:	f88d 3008 	strb.w	r3, [sp, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8008a80:	f88d 600b 	strb.w	r6, [sp, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8008a84:	f88d 400a 	strb.w	r4, [sp, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8008a88:	f88d 400e 	strb.w	r4, [sp, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8008a8c:	f88d 400f 	strb.w	r4, [sp, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8008a90:	f88d 400d 	strb.w	r4, [sp, #13]
 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8008a94:	f88d 4001 	strb.w	r4, [sp, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 8008a98:	f88d 5009 	strb.w	r5, [sp, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8008a9c:	f88d 500c 	strb.w	r5, [sp, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008aa0:	4668      	mov	r0, sp
 8008aa2:	f7f8 fb85 	bl	80011b0 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8008aa6:	2004      	movs	r0, #4
 8008aa8:	f7f8 fb70 	bl	800118c <HAL_MPU_Enable>
}
 8008aac:	b004      	add	sp, #16
 8008aae:	bd70      	pop	{r4, r5, r6, pc}

08008ab0 <main>:
{
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	ed2d 8b02 	vpush	{d8}
  MPU_Conf();
 8008ab6:	f7ff ffb9 	bl	8008a2c <MPU_Conf>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8008aba:	4b8a      	ldr	r3, [pc, #552]	; (8008ce4 <main+0x234>)
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008ac2:	d113      	bne.n	8008aec <main+0x3c>
  __ASM volatile ("dsb 0xF":::"memory");
 8008ac4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008ac8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008acc:	4b85      	ldr	r3, [pc, #532]	; (8008ce4 <main+0x234>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008ad4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008ad8:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008adc:	695a      	ldr	r2, [r3, #20]
 8008ade:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008ae2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008ae4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008ae8:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8008aec:	4b7d      	ldr	r3, [pc, #500]	; (8008ce4 <main+0x234>)
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008af4:	d127      	bne.n	8008b46 <main+0x96>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8008af6:	4b7b      	ldr	r3, [pc, #492]	; (8008ce4 <main+0x234>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008afe:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8008b02:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008b06:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8008b0a:	e000      	b.n	8008b0e <main+0x5e>
    } while(sets-- != 0U);
 8008b0c:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008b0e:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008b12:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008b16:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8008b1a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8008b1e:	4971      	ldr	r1, [pc, #452]	; (8008ce4 <main+0x234>)
 8008b20:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8008b24:	4613      	mov	r3, r2
 8008b26:	3a01      	subs	r2, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1f2      	bne.n	8008b12 <main+0x62>
    } while(sets-- != 0U);
 8008b2c:	1e43      	subs	r3, r0, #1
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d1ec      	bne.n	8008b0c <main+0x5c>
 8008b32:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008b36:	694b      	ldr	r3, [r1, #20]
 8008b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b3c:	614b      	str	r3, [r1, #20]
 8008b3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b42:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8008b46:	f7f7 fbef 	bl	8000328 <HAL_Init>
  SystemClock_Config();
 8008b4a:	f7ff fe89 	bl	8008860 <SystemClock_Config>
  PeriphCommonClock_Config();
 8008b4e:	f7ff feed 	bl	800892c <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8008b52:	f7ff fce7 	bl	8008524 <MX_GPIO_Init>
  MX_BDMA_Init();
 8008b56:	f7ff fac1 	bl	80080dc <MX_BDMA_Init>
  MX_DMA_Init();
 8008b5a:	f7ff fbd7 	bl	800830c <MX_DMA_Init>
  MX_FMC_Init();
 8008b5e:	f7ff fca7 	bl	80084b0 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8008b62:	f000 fead 	bl	80098c0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8008b66:	f7ff fc0d 	bl	8008384 <MX_FATFS_Init>
  MX_RNG_Init();
 8008b6a:	f000 fcf7 	bl	800955c <MX_RNG_Init>
  MX_SPI2_Init();
 8008b6e:	f000 ff19 	bl	80099a4 <MX_SPI2_Init>
  MX_ADC1_Init();
 8008b72:	f7ff f8eb 	bl	8007d4c <MX_ADC1_Init>
  MX_ADC3_Init();
 8008b76:	f7ff f971 	bl	8007e5c <MX_ADC3_Init>
  MX_SAI1_Init();
 8008b7a:	f000 fd2d 	bl	80095d8 <MX_SAI1_Init>
  MX_I2C2_Init();
 8008b7e:	f7ff fde1 	bl	8008744 <MX_I2C2_Init>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8008b82:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8008b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8008b8a:	eee1 3a10 	vmsr	fpscr, r3
  for (int i = 0; i < 32; i++)
 8008b8e:	2300      	movs	r3, #0
 8008b90:	e006      	b.n	8008ba0 <main+0xf0>
	  SPI_TX[i] = counter++;
 8008b92:	4955      	ldr	r1, [pc, #340]	; (8008ce8 <main+0x238>)
 8008b94:	780a      	ldrb	r2, [r1, #0]
 8008b96:	1c50      	adds	r0, r2, #1
 8008b98:	7008      	strb	r0, [r1, #0]
 8008b9a:	4954      	ldr	r1, [pc, #336]	; (8008cec <main+0x23c>)
 8008b9c:	54ca      	strb	r2, [r1, r3]
  for (int i = 0; i < 32; i++)
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	2b1f      	cmp	r3, #31
 8008ba2:	ddf6      	ble.n	8008b92 <main+0xe2>
  HAL_SPI_TransmitReceive_DMA(&hspi2, SPI_TX, SPI_RX, 32);
 8008ba4:	4c51      	ldr	r4, [pc, #324]	; (8008cec <main+0x23c>)
 8008ba6:	2320      	movs	r3, #32
 8008ba8:	18e2      	adds	r2, r4, r3
 8008baa:	4621      	mov	r1, r4
 8008bac:	4850      	ldr	r0, [pc, #320]	; (8008cf0 <main+0x240>)
 8008bae:	f7fe f955 	bl	8006e5c <HAL_SPI_TransmitReceive_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	2140      	movs	r1, #64	; 0x40
 8008bb6:	484f      	ldr	r0, [pc, #316]	; (8008cf4 <main+0x244>)
 8008bb8:	f7f9 fe1b 	bl	80027f2 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008bbc:	200a      	movs	r0, #10
 8008bbe:	f7f7 fbf3 	bl	80003a8 <HAL_Delay>
  SDRAM_Initialization_sequence();
 8008bc2:	f7ff fedb 	bl	800897c <SDRAM_Initialization_sequence>
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8008bc6:	2210      	movs	r2, #16
 8008bc8:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8008bcc:	484a      	ldr	r0, [pc, #296]	; (8008cf8 <main+0x248>)
 8008bce:	f7fc fd9f 	bl	8005710 <HAL_SAI_Transmit_DMA>
  HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8008bd2:	2210      	movs	r2, #16
 8008bd4:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8008bd8:	4848      	ldr	r0, [pc, #288]	; (8008cfc <main+0x24c>)
 8008bda:	f7fc fe1f 	bl	800581c <HAL_SAI_Receive_DMA>
  AudioCodec_init(&hi2c2);
 8008bde:	4848      	ldr	r0, [pc, #288]	; (8008d00 <main+0x250>)
 8008be0:	f7ff fafe 	bl	80081e0 <AudioCodec_init>
LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8008be4:	4b47      	ldr	r3, [pc, #284]	; (8008d04 <main+0x254>)
 8008be6:	4a48      	ldr	r2, [pc, #288]	; (8008d08 <main+0x258>)
 8008be8:	4948      	ldr	r1, [pc, #288]	; (8008d0c <main+0x25c>)
 8008bea:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8008d10 <main+0x260>
 8008bee:	4849      	ldr	r0, [pc, #292]	; (8008d14 <main+0x264>)
 8008bf0:	f001 fc72 	bl	800a4d8 <LEAF_init>
for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 8008bf4:	2400      	movs	r4, #0
 8008bf6:	e029      	b.n	8008c4c <main+0x19c>
		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 6000.0f, 0.6f, &leaf); //1000
 8008bf8:	4e46      	ldr	r6, [pc, #280]	; (8008d14 <main+0x264>)
 8008bfa:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8008bfe:	009f      	lsls	r7, r3, #2
 8008c00:	4632      	mov	r2, r6
 8008c02:	eddf 0a45 	vldr	s1, [pc, #276]	; 8008d18 <main+0x268>
 8008c06:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8008d1c <main+0x26c>
 8008c0a:	2101      	movs	r1, #1
 8008c0c:	4844      	ldr	r0, [pc, #272]	; (8008d20 <main+0x270>)
 8008c0e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008c12:	f001 fb93 	bl	800a33c <tVZFilter_init>
		tHighpass_init(&opticalHighpass[i][j], 100.0f, &leaf); //100
 8008c16:	4631      	mov	r1, r6
 8008c18:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8008d24 <main+0x274>
 8008c1c:	4842      	ldr	r0, [pc, #264]	; (8008d28 <main+0x278>)
 8008c1e:	4438      	add	r0, r7
 8008c20:	f001 f94a 	bl	8009eb8 <tHighpass_init>
	for (int j = 0; j < FILTER_ORDER; j++)
 8008c24:	3501      	adds	r5, #1
 8008c26:	2d01      	cmp	r5, #1
 8008c28:	dde6      	ble.n	8008bf8 <main+0x148>
	tHighpass_init(&EMHighpass[0], 50.0f, &leaf);
 8008c2a:	4e3a      	ldr	r6, [pc, #232]	; (8008d14 <main+0x264>)
 8008c2c:	ed9f 8a3f 	vldr	s16, [pc, #252]	; 8008d2c <main+0x27c>
 8008c30:	4d3f      	ldr	r5, [pc, #252]	; (8008d30 <main+0x280>)
 8008c32:	4631      	mov	r1, r6
 8008c34:	eeb0 0a48 	vmov.f32	s0, s16
 8008c38:	4628      	mov	r0, r5
 8008c3a:	f001 f93d 	bl	8009eb8 <tHighpass_init>
	tHighpass_init(&EMHighpass[1], 50.0f, &leaf);
 8008c3e:	4631      	mov	r1, r6
 8008c40:	eeb0 0a48 	vmov.f32	s0, s16
 8008c44:	1d28      	adds	r0, r5, #4
 8008c46:	f001 f937 	bl	8009eb8 <tHighpass_init>
for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 8008c4a:	3401      	adds	r4, #1
 8008c4c:	2c03      	cmp	r4, #3
 8008c4e:	dc38      	bgt.n	8008cc2 <main+0x212>
	tThreshold_init(&threshold[i],0.05f * (float)storedMaximums[i], 0.1f * (float)storedMaximums[i], &leaf);
 8008c50:	4f38      	ldr	r7, [pc, #224]	; (8008d34 <main+0x284>)
 8008c52:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c5e:	4e2d      	ldr	r6, [pc, #180]	; (8008d14 <main+0x264>)
 8008c60:	00a5      	lsls	r5, r4, #2
 8008c62:	4631      	mov	r1, r6
 8008c64:	eddf 0a34 	vldr	s1, [pc, #208]	; 8008d38 <main+0x288>
 8008c68:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8008c6c:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8008d3c <main+0x28c>
 8008c70:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008c74:	4832      	ldr	r0, [pc, #200]	; (8008d40 <main+0x290>)
 8008c76:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8008c7a:	f001 f874 	bl	8009d66 <tThreshold_init>
	tSlide_init(&fastSlide[i],1.0f,500.0f, &leaf); //500
 8008c7e:	4631      	mov	r1, r6
 8008c80:	eddf 0a30 	vldr	s1, [pc, #192]	; 8008d44 <main+0x294>
 8008c84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008c88:	482f      	ldr	r0, [pc, #188]	; (8008d48 <main+0x298>)
 8008c8a:	4428      	add	r0, r5
 8008c8c:	f001 f8bb 	bl	8009e06 <tSlide_init>
	tSlide_init(&slowSlide[i],1.0f,1000.0f, &leaf); //500
 8008c90:	4631      	mov	r1, r6
 8008c92:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8008d4c <main+0x29c>
 8008c96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008c9a:	482d      	ldr	r0, [pc, #180]	; (8008d50 <main+0x2a0>)
 8008c9c:	4428      	add	r0, r5
 8008c9e:	f001 f8b2 	bl	8009e06 <tSlide_init>
	storedMaxFloats[i] = (65535.0f / storedMaximums[i]);
 8008ca2:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8008ca6:	edd3 7a00 	vldr	s15, [r3]
 8008caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cae:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008d54 <main+0x2a4>
 8008cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb6:	4b28      	ldr	r3, [pc, #160]	; (8008d58 <main+0x2a8>)
 8008cb8:	442b      	add	r3, r5
 8008cba:	ed83 7a00 	vstr	s14, [r3]
	for (int j = 0; j < FILTER_ORDER; j++)
 8008cbe:	2500      	movs	r5, #0
 8008cc0:	e7b1      	b.n	8008c26 <main+0x176>
LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 8008cc2:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8008cc6:	4825      	ldr	r0, [pc, #148]	; (8008d5c <main+0x2ac>)
 8008cc8:	f001 fb62 	bl	800a390 <LEAF_generate_atodb>
 HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 8008ccc:	2220      	movs	r2, #32
 8008cce:	4924      	ldr	r1, [pc, #144]	; (8008d60 <main+0x2b0>)
 8008cd0:	4824      	ldr	r0, [pc, #144]	; (8008d64 <main+0x2b4>)
 8008cd2:	f7f7 febd 	bl	8000a50 <HAL_ADC_Start_DMA>
 HAL_ADC_Start_DMA(&hadc3,(uint32_t*)&ADC_values2,NUM_ADC_CHANNELS2 * ADC_BUFFER_SIZE);
 8008cd6:	2210      	movs	r2, #16
 8008cd8:	4923      	ldr	r1, [pc, #140]	; (8008d68 <main+0x2b8>)
 8008cda:	4824      	ldr	r0, [pc, #144]	; (8008d6c <main+0x2bc>)
 8008cdc:	f7f7 feb8 	bl	8000a50 <HAL_ADC_Start_DMA>
  while (1)
 8008ce0:	e7fe      	b.n	8008ce0 <main+0x230>
 8008ce2:	bf00      	nop
 8008ce4:	e000ed00 	.word	0xe000ed00
 8008ce8:	20000db4 	.word	0x20000db4
 8008cec:	30000000 	.word	0x30000000
 8008cf0:	200199d8 	.word	0x200199d8
 8008cf4:	58020800 	.word	0x58020800
 8008cf8:	200198c0 	.word	0x200198c0
 8008cfc:	20019738 	.word	0x20019738
 8008d00:	20000794 	.word	0x20000794
 8008d04:	08008835 	.word	0x08008835
 8008d08:	000493e0 	.word	0x000493e0
 8008d0c:	24000000 	.word	0x24000000
 8008d10:	473b8000 	.word	0x473b8000
 8008d14:	20000800 	.word	0x20000800
 8008d18:	3f19999a 	.word	0x3f19999a
 8008d1c:	45bb8000 	.word	0x45bb8000
 8008d20:	200196c8 	.word	0x200196c8
 8008d24:	42c80000 	.word	0x42c80000
 8008d28:	20000a90 	.word	0x20000a90
 8008d2c:	42480000 	.word	0x42480000
 8008d30:	20000d50 	.word	0x20000d50
 8008d34:	20000014 	.word	0x20000014
 8008d38:	3dcccccd 	.word	0x3dcccccd
 8008d3c:	3d4ccccd 	.word	0x3d4ccccd
 8008d40:	200007f0 	.word	0x200007f0
 8008d44:	43fa0000 	.word	0x43fa0000
 8008d48:	20019714 	.word	0x20019714
 8008d4c:	447a0000 	.word	0x447a0000
 8008d50:	20000ff8 	.word	0x20000ff8
 8008d54:	477fff00 	.word	0x477fff00
 8008d58:	20000d7c 	.word	0x20000d7c
 8008d5c:	20001028 	.word	0x20001028
 8008d60:	300000c0 	.word	0x300000c0
 8008d64:	200001b0 	.word	0x200001b0
 8008d68:	38000000 	.word	0x38000000
 8008d6c:	20000214 	.word	0x20000214

08008d70 <attackDetectPeak2>:


volatile int totalMaximums[NUM_STRINGS];
volatile float pickupMaximums[NUM_STRINGS] = {0.0f, 0.0f, 0.0f, 0.0f};
int attackDetectPeak2 (int whichString, int tempInt)
{
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	ed2d 8b02 	vpush	{d8}
 8008d76:	4604      	mov	r4, r0
 8008d78:	ee00 1a10 	vmov	s0, r1
	float output = -1;
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 8008d7c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8008d80:	eddf 7a89 	vldr	s15, [pc, #548]	; 8008fa8 <attackDetectPeak2+0x238>
 8008d84:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008d88:	eddf 7a88 	vldr	s15, [pc, #544]	; 8008fac <attackDetectPeak2+0x23c>
 8008d8c:	ee20 0a27 	vmul.f32	s0, s0, s15
	for (int k = 0; k < FILTER_ORDER; k++)
 8008d90:	2500      	movs	r5, #0
 8008d92:	e00c      	b.n	8008dae <attackDetectPeak2+0x3e>
	{
		// a highpass filter, remove any slow moving signal (effectively centers the signal around zero and gets rid of the signal that isn't high frequency vibration) cutoff of 100Hz, // applied 8 times to get rid of a lot of low frequency bumbling around
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8008d94:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8008d98:	009e      	lsls	r6, r3, #2
 8008d9a:	4885      	ldr	r0, [pc, #532]	; (8008fb0 <attackDetectPeak2+0x240>)
 8008d9c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008da0:	f001 f88f 	bl	8009ec2 <tHighpass_tick>
		tempSamp = tVZFilter_tickEfficient(&opticalLowpass[whichString][k], tempSamp);
 8008da4:	4883      	ldr	r0, [pc, #524]	; (8008fb4 <attackDetectPeak2+0x244>)
 8008da6:	4430      	add	r0, r6
 8008da8:	f001 f89f 	bl	8009eea <tVZFilter_tickEfficient>
	for (int k = 0; k < FILTER_ORDER; k++)
 8008dac:	3501      	adds	r5, #1
 8008dae:	2d01      	cmp	r5, #1
 8008db0:	ddf0      	ble.n	8008d94 <attackDetectPeak2+0x24>
	}

	float tempAbs = fabsf(tempSamp);
 8008db2:	eeb0 0ac0 	vabs.f32	s0, s0
	tempAbsInt[whichString] = (tempAbs * (TWO_TO_16 - 1));
 8008db6:	eddf 8a80 	vldr	s17, [pc, #512]	; 8008fb8 <attackDetectPeak2+0x248>
 8008dba:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008dc2:	4b7e      	ldr	r3, [pc, #504]	; (8008fbc <attackDetectPeak2+0x24c>)
 8008dc4:	ee17 2a90 	vmov	r2, s15
 8008dc8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8008dcc:	00a5      	lsls	r5, r4, #2
 8008dce:	487c      	ldr	r0, [pc, #496]	; (8008fc0 <attackDetectPeak2+0x250>)
 8008dd0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8008dd4:	f001 f81c 	bl	8009e10 <tSlide_tick>
 8008dd8:	4b7a      	ldr	r3, [pc, #488]	; (8008fc4 <attackDetectPeak2+0x254>)
 8008dda:	ed83 0a00 	vstr	s0, [r3]
	smoothedInt[whichString] = (Dsmoothed * (TWO_TO_16 - 1));
 8008dde:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008de2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008de6:	4b78      	ldr	r3, [pc, #480]	; (8008fc8 <attackDetectPeak2+0x258>)
 8008de8:	ee17 2a90 	vmov	r2, s15
 8008dec:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8008df0:	4876      	ldr	r0, [pc, #472]	; (8008fcc <attackDetectPeak2+0x25c>)
 8008df2:	4428      	add	r0, r5
 8008df4:	f001 f80c 	bl	8009e10 <tSlide_tick>
 8008df8:	eef0 0a40 	vmov.f32	s1, s0
 8008dfc:	4e74      	ldr	r6, [pc, #464]	; (8008fd0 <attackDetectPeak2+0x260>)
 8008dfe:	ed86 0a00 	vstr	s0, [r6]

	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8008e02:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008e06:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8008fd4 <attackDetectPeak2+0x264>
 8008e0a:	f001 fa9c 	bl	800a346 <LEAF_clip>
 8008e0e:	ed86 0a00 	vstr	s0, [r6]
	smoothedInt2[whichString] = (Dsmoothed2 * (TWO_TO_16 - 1));
 8008e12:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e1a:	4b6f      	ldr	r3, [pc, #444]	; (8008fd8 <attackDetectPeak2+0x268>)
 8008e1c:	ee17 2a90 	vmov	r2, s15
 8008e20:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	//dbSmoothed2 = atodb(Dsmoothed2);
	dbSmoothed2 = LEAF_clip(-60.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8008e24:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8008fdc <attackDetectPeak2+0x26c>
 8008e28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008e2c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8008e30:	4b6b      	ldr	r3, [pc, #428]	; (8008fe0 <attackDetectPeak2+0x270>)
 8008e32:	ee10 2a10 	vmov	r2, s0
 8008e36:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008e3a:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 8008e3e:	edd3 0a00 	vldr	s1, [r3]
 8008e42:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8008fe4 <attackDetectPeak2+0x274>
 8008e46:	f001 fa7e 	bl	800a346 <LEAF_clip>
 8008e4a:	4b67      	ldr	r3, [pc, #412]	; (8008fe8 <attackDetectPeak2+0x278>)
 8008e4c:	ed83 0a00 	vstr	s0, [r3]
	dbSmoothedInt[whichString] = dbSmoothed2 * 100.0f;
 8008e50:	eddf 7a66 	vldr	s15, [pc, #408]	; 8008fec <attackDetectPeak2+0x27c>
 8008e54:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e5c:	4b64      	ldr	r3, [pc, #400]	; (8008ff0 <attackDetectPeak2+0x280>)
 8008e5e:	ee17 2a90 	vmov	r2, s15
 8008e62:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	//dbSmoothed2 = LEAF_clip(-50.f, dbSmoothed2, 12.0f);
	//get the slope
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8008e66:	4b63      	ldr	r3, [pc, #396]	; (8008ff4 <attackDetectPeak2+0x284>)
 8008e68:	442b      	add	r3, r5
 8008e6a:	ed93 8a00 	vldr	s16, [r3]
 8008e6e:	ee30 8a48 	vsub.f32	s16, s0, s16
	slopeStorage[whichString] = slope;
 8008e72:	4b61      	ldr	r3, [pc, #388]	; (8008ff8 <attackDetectPeak2+0x288>)
 8008e74:	442b      	add	r3, r5
 8008e76:	ed83 8a00 	vstr	s16, [r3]
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8008e7a:	edd6 7a00 	vldr	s15, [r6]
 8008e7e:	ee67 8aa8 	vmul.f32	s17, s15, s17
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8008e82:	eeb0 0a68 	vmov.f32	s0, s17
 8008e86:	485d      	ldr	r0, [pc, #372]	; (8008ffc <attackDetectPeak2+0x28c>)
 8008e88:	4428      	add	r0, r5
 8008e8a:	f000 ff71 	bl	8009d70 <tThreshold_tick>
 8008e8e:	4b5c      	ldr	r3, [pc, #368]	; (8009000 <attackDetectPeak2+0x290>)
 8008e90:	6018      	str	r0, [r3, #0]
	if ((slope > 0.05f) && (threshOut > 0))
 8008e92:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8009004 <attackDetectPeak2+0x294>
 8008e96:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e9e:	dd0c      	ble.n	8008eba <attackDetectPeak2+0x14a>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	dd0a      	ble.n	8008eba <attackDetectPeak2+0x14a>
	{
		armed[whichString] = 1;
 8008ea4:	4b58      	ldr	r3, [pc, #352]	; (8009008 <attackDetectPeak2+0x298>)
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		pickupMaximums[whichString] = 0.0f;
 8008eac:	4b57      	ldr	r3, [pc, #348]	; (800900c <attackDetectPeak2+0x29c>)
 8008eae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]
		if (whichString == 1)
 8008eb6:	2c01      	cmp	r4, #1
 8008eb8:	d013      	beq.n	8008ee2 <attackDetectPeak2+0x172>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
		}
	}

	if (armed[whichString] == 1)
 8008eba:	4b53      	ldr	r3, [pc, #332]	; (8009008 <attackDetectPeak2+0x298>)
 8008ebc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d014      	beq.n	8008eee <attackDetectPeak2+0x17e>
	float output = -1;
 8008ec4:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
			}

		}
	}

	prevdbSmoothed2[whichString] = dbSmoothed2;
 8008ec8:	484a      	ldr	r0, [pc, #296]	; (8008ff4 <attackDetectPeak2+0x284>)
 8008eca:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008ece:	4b46      	ldr	r3, [pc, #280]	; (8008fe8 <attackDetectPeak2+0x278>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6023      	str	r3, [r4, #0]
	return (int)output;
}
 8008ed4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008ed8:	ee17 0a90 	vmov	r0, s15
 8008edc:	ecbd 8b02 	vpop	{d8}
 8008ee0:	bd70      	pop	{r4, r5, r6, pc}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	2140      	movs	r1, #64	; 0x40
 8008ee6:	484a      	ldr	r0, [pc, #296]	; (8009010 <attackDetectPeak2+0x2a0>)
 8008ee8:	f7f9 fc83 	bl	80027f2 <HAL_GPIO_WritePin>
 8008eec:	e7e5      	b.n	8008eba <attackDetectPeak2+0x14a>
		if (integerVersion > stringMaxes[whichString])
 8008eee:	4b49      	ldr	r3, [pc, #292]	; (8009014 <attackDetectPeak2+0x2a4>)
 8008ef0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008ef4:	edd3 7a00 	vldr	s15, [r3]
 8008ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008efc:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f04:	d506      	bpl.n	8008f14 <attackDetectPeak2+0x1a4>
			stringMaxes[whichString] = integerVersion;
 8008f06:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8008f0a:	4b42      	ldr	r3, [pc, #264]	; (8009014 <attackDetectPeak2+0x2a4>)
 8008f0c:	ee18 2a90 	vmov	r2, s17
 8008f10:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		armedCounter[whichString]++;
 8008f14:	4a40      	ldr	r2, [pc, #256]	; (8009018 <attackDetectPeak2+0x2a8>)
 8008f16:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		if (slope <= 0.0f)
 8008f20:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f28:	d912      	bls.n	8008f50 <attackDetectPeak2+0x1e0>
		if (slope > 0.01f)
 8008f2a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800901c <attackDetectPeak2+0x2ac>
 8008f2e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f36:	dd03      	ble.n	8008f40 <attackDetectPeak2+0x1d0>
			downCounter[whichString] = 0;
 8008f38:	4b39      	ldr	r3, [pc, #228]	; (8009020 <attackDetectPeak2+0x2b0>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		if (downCounter[whichString] > 128)
 8008f40:	4b37      	ldr	r3, [pc, #220]	; (8009020 <attackDetectPeak2+0x2b0>)
 8008f42:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008f46:	2b80      	cmp	r3, #128	; 0x80
 8008f48:	dc09      	bgt.n	8008f5e <attackDetectPeak2+0x1ee>
	float output = -1;
 8008f4a:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 8008f4e:	e7bb      	b.n	8008ec8 <attackDetectPeak2+0x158>
			downCounter[whichString]++;
 8008f50:	4a33      	ldr	r2, [pc, #204]	; (8009020 <attackDetectPeak2+0x2b0>)
 8008f52:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8008f56:	3301      	adds	r3, #1
 8008f58:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if (whichString == 1)
 8008f5c:	e7e5      	b.n	8008f2a <attackDetectPeak2+0x1ba>
			output = pickupMaximums[whichString] * 65535.0f;
 8008f5e:	4b2b      	ldr	r3, [pc, #172]	; (800900c <attackDetectPeak2+0x29c>)
 8008f60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008f64:	edd3 0a00 	vldr	s1, [r3]
 8008f68:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8008fb8 <attackDetectPeak2+0x248>
			output = LEAF_clip(0.0f, output, 65535.0f);
 8008f6c:	ee60 0a81 	vmul.f32	s1, s1, s2
 8008f70:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008fd4 <attackDetectPeak2+0x264>
 8008f74:	f001 f9e7 	bl	800a346 <LEAF_clip>
 8008f78:	eeb0 8a40 	vmov.f32	s16, s0
			armed[whichString] = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4a22      	ldr	r2, [pc, #136]	; (8009008 <attackDetectPeak2+0x298>)
 8008f80:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			armedCounter[whichString] = 0;
 8008f84:	4a24      	ldr	r2, [pc, #144]	; (8009018 <attackDetectPeak2+0x2a8>)
 8008f86:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			downCounter[whichString] = 0;
 8008f8a:	4a25      	ldr	r2, [pc, #148]	; (8009020 <attackDetectPeak2+0x2b0>)
 8008f8c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			stringMaxes[whichString] = 0;
 8008f90:	4a20      	ldr	r2, [pc, #128]	; (8009014 <attackDetectPeak2+0x2a4>)
 8008f92:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if (whichString == 1)
 8008f96:	2c01      	cmp	r4, #1
 8008f98:	d196      	bne.n	8008ec8 <attackDetectPeak2+0x158>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	2140      	movs	r1, #64	; 0x40
 8008f9e:	481c      	ldr	r0, [pc, #112]	; (8009010 <attackDetectPeak2+0x2a0>)
 8008fa0:	f7f9 fc27 	bl	80027f2 <HAL_GPIO_WritePin>
 8008fa4:	e790      	b.n	8008ec8 <attackDetectPeak2+0x158>
 8008fa6:	bf00      	nop
 8008fa8:	47000000 	.word	0x47000000
 8008fac:	37fffffc 	.word	0x37fffffc
 8008fb0:	20000a90 	.word	0x20000a90
 8008fb4:	200196c8 	.word	0x200196c8
 8008fb8:	477fff00 	.word	0x477fff00
 8008fbc:	20000d40 	.word	0x20000d40
 8008fc0:	20019714 	.word	0x20019714
 8008fc4:	20000db8 	.word	0x20000db8
 8008fc8:	200196e8 	.word	0x200196e8
 8008fcc:	20000ff8 	.word	0x20000ff8
 8008fd0:	20000d58 	.word	0x20000d58
 8008fd4:	00000000 	.word	0x00000000
 8008fd8:	20000da4 	.word	0x20000da4
 8008fdc:	46c34e00 	.word	0x46c34e00
 8008fe0:	20001028 	.word	0x20001028
 8008fe4:	c2700000 	.word	0xc2700000
 8008fe8:	20000d24 	.word	0x20000d24
 8008fec:	42c80000 	.word	0x42c80000
 8008ff0:	20000a80 	.word	0x20000a80
 8008ff4:	20000d30 	.word	0x20000d30
 8008ff8:	20000d04 	.word	0x20000d04
 8008ffc:	200007f0 	.word	0x200007f0
 8009000:	20000120 	.word	0x20000120
 8009004:	3d4ccccd 	.word	0x3d4ccccd
 8009008:	200000c8 	.word	0x200000c8
 800900c:	200000fc 	.word	0x200000fc
 8009010:	58020400 	.word	0x58020400
 8009014:	20000110 	.word	0x20000110
 8009018:	20000d14 	.word	0x20000d14
 800901c:	3c23d70a 	.word	0x3c23d70a
 8009020:	20001008 	.word	0x20001008

08009024 <ADC_Frame>:
uint16_t stringPressed[4];
int spiBuffer = 0;
int didPluckedWaiting[4] = {0,0,0,0};
int didPluckedWaitingCounter[4] = {0,0,0,0};
void ADC_Frame(int offset)
{
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	4606      	mov	r6, r0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
	int changeHappened = 0;
	//sampRecords[currentSamp] = frameCount;
	//currentSamp++;

	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8009028:	4605      	mov	r5, r0
 800902a:	e0c3      	b.n	80091b4 <ADC_Frame+0x190>
				//}
				int LHmuted = 0;
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, (GPIO_PinState) stringTouchRH[1]);
				if (stringTouchLH[j] && (stringPressed[j] == 65535))
				{
					LHmuted = 1;
 800902c:	2701      	movs	r7, #1
 800902e:	e07b      	b.n	8009128 <ADC_Frame+0x104>
					didPlucked[j] = didPluckedWaiting[j];
					didPluckedWaitingCounter[j]--;
				}
				else
				{
					didPluckedWaiting[j] = 0;
 8009030:	4b67      	ldr	r3, [pc, #412]	; (80091d0 <ADC_Frame+0x1ac>)
 8009032:	2200      	movs	r2, #0
 8009034:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				}

				if (((didPlucked[j] > 0)) && (!stringSounding[j]) && (!stringTouchRH[j]) && (!LHmuted))
 8009038:	4b66      	ldr	r3, [pc, #408]	; (80091d4 <ADC_Frame+0x1b0>)
 800903a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800903e:	2b00      	cmp	r3, #0
 8009040:	dd2e      	ble.n	80090a0 <ADC_Frame+0x7c>
 8009042:	4b65      	ldr	r3, [pc, #404]	; (80091d8 <ADC_Frame+0x1b4>)
 8009044:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009048:	bb53      	cbnz	r3, 80090a0 <ADC_Frame+0x7c>
 800904a:	4b64      	ldr	r3, [pc, #400]	; (80091dc <ADC_Frame+0x1b8>)
 800904c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8009050:	b29b      	uxth	r3, r3
 8009052:	bb2b      	cbnz	r3, 80090a0 <ADC_Frame+0x7c>
 8009054:	bb27      	cbnz	r7, 80090a0 <ADC_Frame+0x7c>
				{
					if (didPlucked[j] > totalMaximums[j])
 8009056:	4b5f      	ldr	r3, [pc, #380]	; (80091d4 <ADC_Frame+0x1b0>)
 8009058:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800905c:	4b60      	ldr	r3, [pc, #384]	; (80091e0 <ADC_Frame+0x1bc>)
 800905e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009062:	429a      	cmp	r2, r3
 8009064:	dd05      	ble.n	8009072 <ADC_Frame+0x4e>
					{
						totalMaximums[j] = didPlucked[j];
 8009066:	4b5b      	ldr	r3, [pc, #364]	; (80091d4 <ADC_Frame+0x1b0>)
 8009068:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800906c:	4b5c      	ldr	r3, [pc, #368]	; (80091e0 <ADC_Frame+0x1bc>)
 800906e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					}
					//didPlucked[j] = (float)didPlucked[j];// * storedMaxFloats[j];
					if (didPlucked[j] > 65535)
 8009072:	4b58      	ldr	r3, [pc, #352]	; (80091d4 <ADC_Frame+0x1b0>)
 8009074:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800907c:	db04      	blt.n	8009088 <ADC_Frame+0x64>
					{
						didPlucked[j] = 65535;
 800907e:	4b55      	ldr	r3, [pc, #340]	; (80091d4 <ADC_Frame+0x1b0>)
 8009080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009084:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					}
					stringStates[j] = didPlucked[j];
 8009088:	4b52      	ldr	r3, [pc, #328]	; (80091d4 <ADC_Frame+0x1b0>)
 800908a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800908e:	4b55      	ldr	r3, [pc, #340]	; (80091e4 <ADC_Frame+0x1c0>)
 8009090:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					//SPI_PLUCK_TX[(j * 2)] = (didPlucked[j] & 0xff);

					//a pluck happened! send a message over SPI to the other ICs
					//TODO: a pluck message

					if (j == 1)
 8009094:	2c01      	cmp	r4, #1
 8009096:	d07e      	beq.n	8009196 <ADC_Frame+0x172>
					SPI_PLUCK_TX[1] = (uint8_t) (didPlucked[j] >> 8); //high byte
					SPI_PLUCK_TX[2] = (uint8_t) (didPlucked[j] & 0xff); //low byte
					SPI_PLUCK_TX[3] = 0;
					*/
					changeHappened = 1;
					stringSounding[j] = 1;
 8009098:	4b4f      	ldr	r3, [pc, #316]	; (80091d8 <ADC_Frame+0x1b4>)
 800909a:	2201      	movs	r2, #1
 800909c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					//HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 4);
				}

				if (((stringTouchRH[j]) && (stringSounding[j])) || (LHmuted && stringSounding[j]))
 80090a0:	4b4e      	ldr	r3, [pc, #312]	; (80091dc <ADC_Frame+0x1b8>)
 80090a2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	b11b      	cbz	r3, 80090b2 <ADC_Frame+0x8e>
 80090aa:	4b4b      	ldr	r3, [pc, #300]	; (80091d8 <ADC_Frame+0x1b4>)
 80090ac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80090b0:	b923      	cbnz	r3, 80090bc <ADC_Frame+0x98>
 80090b2:	b18f      	cbz	r7, 80090d8 <ADC_Frame+0xb4>
 80090b4:	4b48      	ldr	r3, [pc, #288]	; (80091d8 <ADC_Frame+0x1b4>)
 80090b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80090ba:	b16b      	cbz	r3, 80090d8 <ADC_Frame+0xb4>
					*/
					//SPI_PLUCK_TX[(j * 2)] = 0;
					//SPI_PLUCK_TX[(j * 2)] = 0;
					//SPI_TX[j*2+(16*spiBuffer)] = 0;
					//SPI_TX[j*2+1+(16*spiBuffer)] = 0;
					if (j == 1)
 80090bc:	2c01      	cmp	r4, #1
 80090be:	d071      	beq.n	80091a4 <ADC_Frame+0x180>
					{
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);

					}
					//HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 20);
					stringStates[j] = 0;
 80090c0:	2200      	movs	r2, #0
 80090c2:	4b48      	ldr	r3, [pc, #288]	; (80091e4 <ADC_Frame+0x1c0>)
 80090c4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					changeHappened = 1;
					pickupMaximums[j] = 0.0f;
 80090c8:	4b47      	ldr	r3, [pc, #284]	; (80091e8 <ADC_Frame+0x1c4>)
 80090ca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80090ce:	2100      	movs	r1, #0
 80090d0:	6019      	str	r1, [r3, #0]
					stringSounding[j] = 0;
 80090d2:	4b41      	ldr	r3, [pc, #260]	; (80091d8 <ADC_Frame+0x1b4>)
 80090d4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		for (int j = 0; j < 4; j++)
 80090d8:	3401      	adds	r4, #1
 80090da:	2c03      	cmp	r4, #3
 80090dc:	dc69      	bgt.n	80091b2 <ADC_Frame+0x18e>
			int tempInt = ADC_values[(i*NUM_ADC_CHANNELS) + j];
 80090de:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090e2:	4a42      	ldr	r2, [pc, #264]	; (80091ec <ADC_Frame+0x1c8>)
 80090e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 80090e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80090ec:	4620      	mov	r0, r4
 80090ee:	f7ff fe3f 	bl	8008d70 <attackDetectPeak2>
 80090f2:	4b38      	ldr	r3, [pc, #224]	; (80091d4 <ADC_Frame+0x1b0>)
 80090f4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
			if (howManyFrames == 0)
 80090f8:	4b3d      	ldr	r3, [pc, #244]	; (80091f0 <ADC_Frame+0x1cc>)
 80090fa:	681f      	ldr	r7, [r3, #0]
 80090fc:	2f00      	cmp	r7, #0
 80090fe:	d1eb      	bne.n	80090d8 <ADC_Frame+0xb4>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, (GPIO_PinState) stringTouchRH[1]);
 8009100:	4b36      	ldr	r3, [pc, #216]	; (80091dc <ADC_Frame+0x1b8>)
 8009102:	885a      	ldrh	r2, [r3, #2]
 8009104:	b2d2      	uxtb	r2, r2
 8009106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800910a:	483a      	ldr	r0, [pc, #232]	; (80091f4 <ADC_Frame+0x1d0>)
 800910c:	f7f9 fb71 	bl	80027f2 <HAL_GPIO_WritePin>
				if (stringTouchLH[j] && (stringPressed[j] == 65535))
 8009110:	4b39      	ldr	r3, [pc, #228]	; (80091f8 <ADC_Frame+0x1d4>)
 8009112:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8009116:	b29b      	uxth	r3, r3
 8009118:	b133      	cbz	r3, 8009128 <ADC_Frame+0x104>
 800911a:	4b38      	ldr	r3, [pc, #224]	; (80091fc <ADC_Frame+0x1d8>)
 800911c:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8009120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009124:	429a      	cmp	r2, r3
 8009126:	d081      	beq.n	800902c <ADC_Frame+0x8>
				if (((didPlucked[j] > 0) && (!stringSounding[j])) && ((stringTouchRH[j]) || (LHmuted)))
 8009128:	4b2a      	ldr	r3, [pc, #168]	; (80091d4 <ADC_Frame+0x1b0>)
 800912a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800912e:	2b00      	cmp	r3, #0
 8009130:	dd14      	ble.n	800915c <ADC_Frame+0x138>
 8009132:	4b29      	ldr	r3, [pc, #164]	; (80091d8 <ADC_Frame+0x1b4>)
 8009134:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009138:	b983      	cbnz	r3, 800915c <ADC_Frame+0x138>
 800913a:	4b28      	ldr	r3, [pc, #160]	; (80091dc <ADC_Frame+0x1b8>)
 800913c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8009140:	b29b      	uxth	r3, r3
 8009142:	b903      	cbnz	r3, 8009146 <ADC_Frame+0x122>
 8009144:	b157      	cbz	r7, 800915c <ADC_Frame+0x138>
					didPluckedWaiting[j] = didPlucked[j];
 8009146:	4b23      	ldr	r3, [pc, #140]	; (80091d4 <ADC_Frame+0x1b0>)
 8009148:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800914c:	4b20      	ldr	r3, [pc, #128]	; (80091d0 <ADC_Frame+0x1ac>)
 800914e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					didPluckedWaitingCounter[j] = 500;
 8009152:	4b2b      	ldr	r3, [pc, #172]	; (8009200 <ADC_Frame+0x1dc>)
 8009154:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009158:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				if (didPluckedWaitingCounter[j] == 0)
 800915c:	4b28      	ldr	r3, [pc, #160]	; (8009200 <ADC_Frame+0x1dc>)
 800915e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009162:	b923      	cbnz	r3, 800916e <ADC_Frame+0x14a>
					didPluckedWaiting[j] = -1;
 8009164:	4a1a      	ldr	r2, [pc, #104]	; (80091d0 <ADC_Frame+0x1ac>)
 8009166:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800916a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
				if ((didPluckedWaiting[j] >= didPlucked[j]) && (didPluckedWaitingCounter[j] > 0))
 800916e:	4a18      	ldr	r2, [pc, #96]	; (80091d0 <ADC_Frame+0x1ac>)
 8009170:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8009174:	4917      	ldr	r1, [pc, #92]	; (80091d4 <ADC_Frame+0x1b0>)
 8009176:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 800917a:	428a      	cmp	r2, r1
 800917c:	f6ff af58 	blt.w	8009030 <ADC_Frame+0xc>
 8009180:	2b00      	cmp	r3, #0
 8009182:	f77f af55 	ble.w	8009030 <ADC_Frame+0xc>
					didPlucked[j] = didPluckedWaiting[j];
 8009186:	4913      	ldr	r1, [pc, #76]	; (80091d4 <ADC_Frame+0x1b0>)
 8009188:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
					didPluckedWaitingCounter[j]--;
 800918c:	3b01      	subs	r3, #1
 800918e:	4a1c      	ldr	r2, [pc, #112]	; (8009200 <ADC_Frame+0x1dc>)
 8009190:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009194:	e750      	b.n	8009038 <ADC_Frame+0x14>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 8009196:	2201      	movs	r2, #1
 8009198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800919c:	4819      	ldr	r0, [pc, #100]	; (8009204 <ADC_Frame+0x1e0>)
 800919e:	f7f9 fb28 	bl	80027f2 <HAL_GPIO_WritePin>
 80091a2:	e779      	b.n	8009098 <ADC_Frame+0x74>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 80091a4:	2200      	movs	r2, #0
 80091a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091aa:	4816      	ldr	r0, [pc, #88]	; (8009204 <ADC_Frame+0x1e0>)
 80091ac:	f7f9 fb21 	bl	80027f2 <HAL_GPIO_WritePin>
 80091b0:	e786      	b.n	80090c0 <ADC_Frame+0x9c>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 80091b2:	3501      	adds	r5, #1
 80091b4:	1cf3      	adds	r3, r6, #3
 80091b6:	42ab      	cmp	r3, r5
 80091b8:	db08      	blt.n	80091cc <ADC_Frame+0x1a8>
		if (howManyFrames > 0)
 80091ba:	4b0d      	ldr	r3, [pc, #52]	; (80091f0 <ADC_Frame+0x1cc>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	dd02      	ble.n	80091c8 <ADC_Frame+0x1a4>
			howManyFrames--;
 80091c2:	3b01      	subs	r3, #1
 80091c4:	4a0a      	ldr	r2, [pc, #40]	; (80091f0 <ADC_Frame+0x1cc>)
 80091c6:	6013      	str	r3, [r2, #0]
					LHmuted = 1;
 80091c8:	2400      	movs	r4, #0
 80091ca:	e786      	b.n	80090da <ADC_Frame+0xb6>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
	if (changeHappened)
	{
		//HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 22);
	}
}
 80091cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091ce:	bf00      	nop
 80091d0:	200000d8 	.word	0x200000d8
 80091d4:	20000d6c 	.word	0x20000d6c
 80091d8:	20000ce4 	.word	0x20000ce4
 80091dc:	20000d28 	.word	0x20000d28
 80091e0:	20019704 	.word	0x20019704
 80091e4:	20001018 	.word	0x20001018
 80091e8:	200000fc 	.word	0x200000fc
 80091ec:	30000000 	.word	0x30000000
 80091f0:	20000010 	.word	0x20000010
 80091f4:	58020400 	.word	0x58020400
 80091f8:	200007e0 	.word	0x200007e0
 80091fc:	20000ff0 	.word	0x20000ff0
 8009200:	200000e8 	.word	0x200000e8
 8009204:	58021800 	.word	0x58021800

08009208 <ADC_EM>:

void ADC_EM(int offset)
{
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	4606      	mov	r6, r0
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 800920c:	4605      	mov	r5, r0
 800920e:	e02f      	b.n	8009270 <ADC_EM+0x68>
	{
		for (int j = 0; j < NUM_ADC_CHANNELS2; j++)
 8009210:	3401      	adds	r4, #1
 8009212:	2c01      	cmp	r4, #1
 8009214:	dc2b      	bgt.n	800926e <ADC_EM+0x66>
		{
			int tempInt = ADC_values2[(i*NUM_ADC_CHANNELS2) + j];
 8009216:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 800921a:	4a18      	ldr	r2, [pc, #96]	; (800927c <ADC_EM+0x74>)
 800921c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009220:	edd3 7a00 	vldr	s15, [r3]
			float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15) * 2.5f;
 8009224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009228:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8009280 <ADC_EM+0x78>
 800922c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009230:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8009284 <ADC_EM+0x7c>
 8009234:	ee67 7a80 	vmul.f32	s15, s15, s0
			tempSamp = tHighpass_tick(&EMHighpass[j], tempSamp);
 8009238:	00a7      	lsls	r7, r4, #2
 800923a:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800923e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009242:	4811      	ldr	r0, [pc, #68]	; (8009288 <ADC_EM+0x80>)
 8009244:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8009248:	f000 fe3b 	bl	8009ec2 <tHighpass_tick>
			float absFloat = fabsf(tempSamp);
 800924c:	eeb0 0ac0 	vabs.f32	s0, s0
			if (absFloat > pickupMaximums[j])
 8009250:	4b0e      	ldr	r3, [pc, #56]	; (800928c <ADC_EM+0x84>)
 8009252:	443b      	add	r3, r7
 8009254:	edd3 7a00 	vldr	s15, [r3]
 8009258:	eef4 7ac0 	vcmpe.f32	s15, s0
 800925c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009260:	d5d6      	bpl.n	8009210 <ADC_EM+0x8>
			{
				pickupMaximums[j] = absFloat;
 8009262:	4b0a      	ldr	r3, [pc, #40]	; (800928c <ADC_EM+0x84>)
 8009264:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009268:	ed83 0a00 	vstr	s0, [r3]
 800926c:	e7d0      	b.n	8009210 <ADC_EM+0x8>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 800926e:	3501      	adds	r5, #1
 8009270:	1cf3      	adds	r3, r6, #3
 8009272:	42ab      	cmp	r3, r5
 8009274:	db01      	blt.n	800927a <ADC_EM+0x72>
		for (int j = 0; j < NUM_ADC_CHANNELS2; j++)
 8009276:	2400      	movs	r4, #0
 8009278:	e7cb      	b.n	8009212 <ADC_EM+0xa>
			}

		}
	}
}
 800927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800927c:	38000000 	.word	0x38000000
 8009280:	47000000 	.word	0x47000000
 8009284:	37fffffc 	.word	0x37fffffc
 8009288:	20000d50 	.word	0x20000d50
 800928c:	200000fc 	.word	0x200000fc

08009290 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009290:	b508      	push	{r3, lr}

	if (hadc == &hadc1)
 8009292:	4b05      	ldr	r3, [pc, #20]	; (80092a8 <HAL_ADC_ConvCpltCallback+0x18>)
 8009294:	4283      	cmp	r3, r0
 8009296:	d003      	beq.n	80092a0 <HAL_ADC_ConvCpltCallback+0x10>
	{
		ADC_Frame(ADC_FRAME_SIZE);
	}
	else
	{
		ADC_EM(ADC_FRAME_SIZE);
 8009298:	2004      	movs	r0, #4
 800929a:	f7ff ffb5 	bl	8009208 <ADC_EM>
	}

}
 800929e:	bd08      	pop	{r3, pc}
		ADC_Frame(ADC_FRAME_SIZE);
 80092a0:	2004      	movs	r0, #4
 80092a2:	f7ff febf 	bl	8009024 <ADC_Frame>
 80092a6:	e7fa      	b.n	800929e <HAL_ADC_ConvCpltCallback+0xe>
 80092a8:	200001b0 	.word	0x200001b0

080092ac <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80092ac:	b508      	push	{r3, lr}
	if (hadc == &hadc1)
 80092ae:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80092b0:	4283      	cmp	r3, r0
 80092b2:	d003      	beq.n	80092bc <HAL_ADC_ConvHalfCpltCallback+0x10>
	{
		ADC_Frame(0);
	}
	else
	{
		ADC_EM(0);
 80092b4:	2000      	movs	r0, #0
 80092b6:	f7ff ffa7 	bl	8009208 <ADC_EM>
	}
}
 80092ba:	bd08      	pop	{r3, pc}
		ADC_Frame(0);
 80092bc:	2000      	movs	r0, #0
 80092be:	f7ff feb1 	bl	8009024 <ADC_Frame>
 80092c2:	e7fa      	b.n	80092ba <HAL_ADC_ConvHalfCpltCallback+0xe>
 80092c4:	200001b0 	.word	0x200001b0

080092c8 <HAL_SPI_TxRxCpltCallback>:

}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
	spiBuffer = 1;
 80092c8:	4b1c      	ldr	r3, [pc, #112]	; (800933c <HAL_SPI_TxRxCpltCallback+0x74>)
 80092ca:	2201      	movs	r2, #1
 80092cc:	601a      	str	r2, [r3, #0]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);

	for (int j = 0; j < 4; j++)
 80092ce:	2300      	movs	r3, #0
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	dc31      	bgt.n	8009338 <HAL_SPI_TxRxCpltCallback+0x70>
{
 80092d4:	b410      	push	{r4}
	{
		stringTouchRH[j] = (SPI_RX[24] >> (j+4)) & 1;
 80092d6:	491a      	ldr	r1, [pc, #104]	; (8009340 <HAL_SPI_TxRxCpltCallback+0x78>)
 80092d8:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 80092dc:	1d18      	adds	r0, r3, #4
 80092de:	fa42 f000 	asr.w	r0, r2, r0
 80092e2:	f000 0001 	and.w	r0, r0, #1
 80092e6:	4c17      	ldr	r4, [pc, #92]	; (8009344 <HAL_SPI_TxRxCpltCallback+0x7c>)
 80092e8:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
		stringTouchLH[j] = (SPI_RX[24] >> j) & 1;
 80092ec:	411a      	asrs	r2, r3
 80092ee:	f002 0201 	and.w	r2, r2, #1
 80092f2:	4815      	ldr	r0, [pc, #84]	; (8009348 <HAL_SPI_TxRxCpltCallback+0x80>)
 80092f4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		int currentnumber = (j*2) + 16;
 80092f8:	f103 0008 	add.w	r0, r3, #8
 80092fc:	0042      	lsls	r2, r0, #1
		stringPressed[j] = (SPI_RX[currentnumber] << 8) + SPI_RX[currentnumber+1];
 80092fe:	eb01 0440 	add.w	r4, r1, r0, lsl #1
 8009302:	f894 4020 	ldrb.w	r4, [r4, #32]
 8009306:	3201      	adds	r2, #1
 8009308:	440a      	add	r2, r1
 800930a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800930e:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 8009312:	4c0e      	ldr	r4, [pc, #56]	; (800934c <HAL_SPI_TxRxCpltCallback+0x84>)
 8009314:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		//if (stringTouchLH[j] || stringTouchRH[j])
		//{
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		//}

		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 8009318:	4a0d      	ldr	r2, [pc, #52]	; (8009350 <HAL_SPI_TxRxCpltCallback+0x88>)
 800931a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800931e:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8009322:	f801 2010 	strb.w	r2, [r1, r0, lsl #1]
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 8009326:	005a      	lsls	r2, r3, #1
 8009328:	3211      	adds	r2, #17
 800932a:	548c      	strb	r4, [r1, r2]
	for (int j = 0; j < 4; j++)
 800932c:	3301      	adds	r3, #1
 800932e:	2b03      	cmp	r3, #3
 8009330:	ddd1      	ble.n	80092d6 <HAL_SPI_TxRxCpltCallback+0xe>
	}
	//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);

}
 8009332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	2000010c 	.word	0x2000010c
 8009340:	30000000 	.word	0x30000000
 8009344:	20000d28 	.word	0x20000d28
 8009348:	200007e0 	.word	0x200007e0
 800934c:	20000ff0 	.word	0x20000ff0
 8009350:	20001018 	.word	0x20001018

08009354 <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	spiBuffer = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	4a19      	ldr	r2, [pc, #100]	; (80093bc <HAL_SPI_TxRxHalfCpltCallback+0x68>)
 8009358:	6013      	str	r3, [r2, #0]

	for (int j = 0; j < 4; j++)
 800935a:	2b03      	cmp	r3, #3
 800935c:	dc2d      	bgt.n	80093ba <HAL_SPI_TxRxHalfCpltCallback+0x66>
{
 800935e:	b410      	push	{r4}
	{
		stringTouchRH[j] = (SPI_RX[8] >> (j+4)) & 1;
 8009360:	4917      	ldr	r1, [pc, #92]	; (80093c0 <HAL_SPI_TxRxHalfCpltCallback+0x6c>)
 8009362:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8009366:	1d18      	adds	r0, r3, #4
 8009368:	fa42 f000 	asr.w	r0, r2, r0
 800936c:	f000 0001 	and.w	r0, r0, #1
 8009370:	4c14      	ldr	r4, [pc, #80]	; (80093c4 <HAL_SPI_TxRxHalfCpltCallback+0x70>)
 8009372:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
		stringTouchLH[j] = (SPI_RX[8] >> j) & 1;
 8009376:	411a      	asrs	r2, r3
 8009378:	f002 0201 	and.w	r2, r2, #1
 800937c:	4812      	ldr	r0, [pc, #72]	; (80093c8 <HAL_SPI_TxRxHalfCpltCallback+0x74>)
 800937e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		stringPressed[j] = (SPI_RX[j*2] << 8) + SPI_RX[(j*2)+1];
 8009382:	005a      	lsls	r2, r3, #1
 8009384:	eb01 0043 	add.w	r0, r1, r3, lsl #1
 8009388:	f890 4020 	ldrb.w	r4, [r0, #32]
 800938c:	3201      	adds	r2, #1
 800938e:	1888      	adds	r0, r1, r2
 8009390:	f890 0020 	ldrb.w	r0, [r0, #32]
 8009394:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 8009398:	4c0c      	ldr	r4, [pc, #48]	; (80093cc <HAL_SPI_TxRxHalfCpltCallback+0x78>)
 800939a:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
		//if (stringTouchLH[j] || stringTouchRH[j])
		//{
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		//}
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 800939e:	480c      	ldr	r0, [pc, #48]	; (80093d0 <HAL_SPI_TxRxHalfCpltCallback+0x7c>)
 80093a0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80093a4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80093a8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 80093ac:	5488      	strb	r0, [r1, r2]
	for (int j = 0; j < 4; j++)
 80093ae:	3301      	adds	r3, #1
 80093b0:	2b03      	cmp	r3, #3
 80093b2:	ddd5      	ble.n	8009360 <HAL_SPI_TxRxHalfCpltCallback+0xc>
	}
	//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
}
 80093b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	4770      	bx	lr
 80093bc:	2000010c 	.word	0x2000010c
 80093c0:	30000000 	.word	0x30000000
 80093c4:	20000d28 	.word	0x20000d28
 80093c8:	200007e0 	.word	0x200007e0
 80093cc:	20000ff0 	.word	0x20000ff0
 80093d0:	20001018 	.word	0x20001018

080093d4 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80093d4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80093d6:	2201      	movs	r2, #1
 80093d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80093dc:	4822      	ldr	r0, [pc, #136]	; (8009468 <HAL_SAI_RxCpltCallback+0x94>)
 80093de:	f7f9 fa08 	bl	80027f2 <HAL_GPIO_WritePin>
	int buffer_offset = HALF_BUFFER_SIZE;
	for (int i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 80093e2:	2300      	movs	r3, #0
 80093e4:	e00d      	b.n	8009402 <HAL_SAI_RxCpltCallback+0x2e>
		absFloat = fabsf(theSamples[1]);
		if (absFloat > pickupMaximums[3])
		{
			pickupMaximums[3] = absFloat;
		}
		audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_31);
 80093e6:	eebe 7ae0 	vcvt.s32.f32	s14, s14, #31
 80093ea:	4a20      	ldr	r2, [pc, #128]	; (800946c <HAL_SAI_RxCpltCallback+0x98>)
 80093ec:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80093f0:	ed81 7a10 	vstr	s14, [r1, #64]	; 0x40
		audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_31);
 80093f4:	eefe 7ae0 	vcvt.s32.f32	s15, s15, #31
 80093f8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80093fc:	edc2 7a10 	vstr	s15, [r2, #64]	; 0x40
	for (int i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 8009400:	3302      	adds	r3, #2
 8009402:	2b07      	cmp	r3, #7
 8009404:	dc2f      	bgt.n	8009466 <HAL_SAI_RxCpltCallback+0x92>
		theSamples[0] = ((float)audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 8009406:	f103 0108 	add.w	r1, r3, #8
 800940a:	4818      	ldr	r0, [pc, #96]	; (800946c <HAL_SAI_RxCpltCallback+0x98>)
 800940c:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8009410:	edd2 7a20 	vldr	s15, [r2, #128]	; 0x80
 8009414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009418:	eddf 6a15 	vldr	s13, [pc, #84]	; 8009470 <HAL_SAI_RxCpltCallback+0x9c>
 800941c:	ee67 7aa6 	vmul.f32	s15, s15, s13
		theSamples[1] = ((float)audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 8009420:	f103 0409 	add.w	r4, r3, #9
 8009424:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8009428:	ed90 7a20 	vldr	s14, [r0, #128]	; 0x80
 800942c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009430:	ee27 7a26 	vmul.f32	s14, s14, s13
		float absFloat = fabsf(theSamples[0]);
 8009434:	eef0 6ae7 	vabs.f32	s13, s15
		if (absFloat > pickupMaximums[2])
 8009438:	4a0e      	ldr	r2, [pc, #56]	; (8009474 <HAL_SAI_RxCpltCallback+0xa0>)
 800943a:	ed92 6a02 	vldr	s12, [r2, #8]
 800943e:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8009442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009446:	d501      	bpl.n	800944c <HAL_SAI_RxCpltCallback+0x78>
			pickupMaximums[2] = absFloat;
 8009448:	edc2 6a02 	vstr	s13, [r2, #8]
		absFloat = fabsf(theSamples[1]);
 800944c:	eef0 6ac7 	vabs.f32	s13, s14
		if (absFloat > pickupMaximums[3])
 8009450:	4a08      	ldr	r2, [pc, #32]	; (8009474 <HAL_SAI_RxCpltCallback+0xa0>)
 8009452:	ed92 6a03 	vldr	s12, [r2, #12]
 8009456:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800945a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800945e:	d5c2      	bpl.n	80093e6 <HAL_SAI_RxCpltCallback+0x12>
			pickupMaximums[3] = absFloat;
 8009460:	edc2 6a03 	vstr	s13, [r2, #12]
 8009464:	e7bf      	b.n	80093e6 <HAL_SAI_RxCpltCallback+0x12>
	}



}
 8009466:	bd10      	pop	{r4, pc}
 8009468:	58020000 	.word	0x58020000
 800946c:	30000000 	.word	0x30000000
 8009470:	2ffffff6 	.word	0x2ffffff6
 8009474:	200000fc 	.word	0x200000fc

08009478 <HAL_SAI_RxHalfCpltCallback>:

volatile int myTest = 0;
volatile float theSamples[2];
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009478:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800947a:	2200      	movs	r2, #0
 800947c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009480:	482e      	ldr	r0, [pc, #184]	; (800953c <HAL_SAI_RxHalfCpltCallback+0xc4>)
 8009482:	f7f9 f9b6 	bl	80027f2 <HAL_GPIO_WritePin>
	int buffer_offset = 0;
	for (int i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 8009486:	2300      	movs	r3, #0
 8009488:	e012      	b.n	80094b0 <HAL_SAI_RxHalfCpltCallback+0x38>
			{
				myTest = 1;
			}
		}

		audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_31);
 800948a:	492d      	ldr	r1, [pc, #180]	; (8009540 <HAL_SAI_RxHalfCpltCallback+0xc8>)
 800948c:	edd1 7a01 	vldr	s15, [r1, #4]
 8009490:	eefe 7ae0 	vcvt.s32.f32	s15, s15, #31
 8009494:	4a2b      	ldr	r2, [pc, #172]	; (8009544 <HAL_SAI_RxHalfCpltCallback+0xcc>)
 8009496:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 800949a:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
		audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_31);
 800949e:	edd1 7a00 	vldr	s15, [r1]
 80094a2:	eefe 7ae0 	vcvt.s32.f32	s15, s15, #31
 80094a6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80094aa:	edc2 7a10 	vstr	s15, [r2, #64]	; 0x40
	for (int i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 80094ae:	3302      	adds	r3, #2
 80094b0:	2b07      	cmp	r3, #7
 80094b2:	dc42      	bgt.n	800953a <HAL_SAI_RxHalfCpltCallback+0xc2>
		theSamples[0] = ((float)audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 80094b4:	4923      	ldr	r1, [pc, #140]	; (8009544 <HAL_SAI_RxHalfCpltCallback+0xcc>)
 80094b6:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80094ba:	ed92 7a20 	vldr	s14, [r2, #128]	; 0x80
 80094be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094c2:	eddf 6a21 	vldr	s13, [pc, #132]	; 8009548 <HAL_SAI_RxHalfCpltCallback+0xd0>
 80094c6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80094ca:	481d      	ldr	r0, [pc, #116]	; (8009540 <HAL_SAI_RxHalfCpltCallback+0xc8>)
 80094cc:	ed80 7a00 	vstr	s14, [r0]
		theSamples[1] = ((float)audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 80094d0:	1c5c      	adds	r4, r3, #1
 80094d2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094d6:	edd1 7a20 	vldr	s15, [r1, #128]	; 0x80
 80094da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80094e2:	edc0 7a01 	vstr	s15, [r0, #4]
		float absFloat = fabsf(theSamples[0]);
 80094e6:	edd0 7a00 	vldr	s15, [r0]
 80094ea:	eef0 7ae7 	vabs.f32	s15, s15
		if (absFloat > pickupMaximums[2])
 80094ee:	4a17      	ldr	r2, [pc, #92]	; (800954c <HAL_SAI_RxHalfCpltCallback+0xd4>)
 80094f0:	ed92 7a02 	vldr	s14, [r2, #8]
 80094f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80094f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fc:	d501      	bpl.n	8009502 <HAL_SAI_RxHalfCpltCallback+0x8a>
			pickupMaximums[2] = absFloat;
 80094fe:	edc2 7a02 	vstr	s15, [r2, #8]
		absFloat = fabsf(theSamples[1]);
 8009502:	4a0f      	ldr	r2, [pc, #60]	; (8009540 <HAL_SAI_RxHalfCpltCallback+0xc8>)
 8009504:	edd2 7a01 	vldr	s15, [r2, #4]
 8009508:	eef0 7ae7 	vabs.f32	s15, s15
		if (absFloat > pickupMaximums[3])
 800950c:	4a0f      	ldr	r2, [pc, #60]	; (800954c <HAL_SAI_RxHalfCpltCallback+0xd4>)
 800950e:	ed92 7a03 	vldr	s14, [r2, #12]
 8009512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951a:	d5b6      	bpl.n	800948a <HAL_SAI_RxHalfCpltCallback+0x12>
			pickupMaximums[3] = absFloat;
 800951c:	edc2 7a03 	vstr	s15, [r2, #12]
			if (pickupMaximums[3] > 0.99f)
 8009520:	ed92 7a03 	vldr	s14, [r2, #12]
 8009524:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009550 <HAL_SAI_RxHalfCpltCallback+0xd8>
 8009528:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800952c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009530:	ddab      	ble.n	800948a <HAL_SAI_RxHalfCpltCallback+0x12>
				myTest = 1;
 8009532:	4a08      	ldr	r2, [pc, #32]	; (8009554 <HAL_SAI_RxHalfCpltCallback+0xdc>)
 8009534:	2101      	movs	r1, #1
 8009536:	6011      	str	r1, [r2, #0]
 8009538:	e7a7      	b.n	800948a <HAL_SAI_RxHalfCpltCallback+0x12>
	}

}
 800953a:	bd10      	pop	{r4, pc}
 800953c:	58020000 	.word	0x58020000
 8009540:	200196f8 	.word	0x200196f8
 8009544:	30000000 	.word	0x30000000
 8009548:	2ffffff6 	.word	0x2ffffff6
 800954c:	200000fc 	.word	0x200000fc
 8009550:	3f7d70a4 	.word	0x3f7d70a4
 8009554:	200000f8 	.word	0x200000f8

08009558 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009558:	4770      	bx	lr
	...

0800955c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800955c:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800955e:	4806      	ldr	r0, [pc, #24]	; (8009578 <MX_RNG_Init+0x1c>)
 8009560:	4b06      	ldr	r3, [pc, #24]	; (800957c <MX_RNG_Init+0x20>)
 8009562:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8009564:	2300      	movs	r3, #0
 8009566:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8009568:	f7fb fd6c 	bl	8005044 <HAL_RNG_Init>
 800956c:	b900      	cbnz	r0, 8009570 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800956e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009570:	f7ff fff2 	bl	8009558 <Error_Handler>
}
 8009574:	e7fb      	b.n	800956e <MX_RNG_Init+0x12>
 8009576:	bf00      	nop
 8009578:	20019724 	.word	0x20019724
 800957c:	48021800 	.word	0x48021800

08009580 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8009580:	b510      	push	{r4, lr}
 8009582:	b0b0      	sub	sp, #192	; 0xc0
 8009584:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009586:	22bc      	movs	r2, #188	; 0xbc
 8009588:	2100      	movs	r1, #0
 800958a:	a801      	add	r0, sp, #4
 800958c:	f001 f88e 	bl	800a6ac <memset>
  if(rngHandle->Instance==RNG)
 8009590:	6822      	ldr	r2, [r4, #0]
 8009592:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <HAL_RNG_MspInit+0x50>)
 8009594:	429a      	cmp	r2, r3
 8009596:	d001      	beq.n	800959c <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8009598:	b030      	add	sp, #192	; 0xc0
 800959a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800959c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80095a0:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80095a2:	2300      	movs	r3, #0
 80095a4:	9320      	str	r3, [sp, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80095a6:	a801      	add	r0, sp, #4
 80095a8:	f7fa fa54 	bl	8003a54 <HAL_RCCEx_PeriphCLKConfig>
 80095ac:	b968      	cbnz	r0, 80095ca <HAL_RNG_MspInit+0x4a>
    __HAL_RCC_RNG_CLK_ENABLE();
 80095ae:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <HAL_RNG_MspInit+0x54>)
 80095b0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80095b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095b8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80095bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80095c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	9b00      	ldr	r3, [sp, #0]
}
 80095c8:	e7e6      	b.n	8009598 <HAL_RNG_MspInit+0x18>
      Error_Handler();
 80095ca:	f7ff ffc5 	bl	8009558 <Error_Handler>
 80095ce:	e7ee      	b.n	80095ae <HAL_RNG_MspInit+0x2e>
 80095d0:	48021800 	.word	0x48021800
 80095d4:	58024400 	.word	0x58024400

080095d8 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80095d8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80095da:	4818      	ldr	r0, [pc, #96]	; (800963c <MX_SAI1_Init+0x64>)
 80095dc:	4b18      	ldr	r3, [pc, #96]	; (8009640 <MX_SAI1_Init+0x68>)
 80095de:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80095e0:	2100      	movs	r1, #0
 80095e2:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80095e4:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80095e6:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80095e8:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 80095ea:	2304      	movs	r3, #4
 80095ec:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80095ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80095f2:	6203      	str	r3, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80095f4:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80095f6:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80095f8:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80095fa:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 80095fc:	2302      	movs	r3, #2
 80095fe:	2203      	movs	r2, #3
 8009600:	f7fc f870 	bl	80056e4 <HAL_SAI_InitProtocol>
 8009604:	b998      	cbnz	r0, 800962e <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8009606:	480f      	ldr	r0, [pc, #60]	; (8009644 <MX_SAI1_Init+0x6c>)
 8009608:	4b0f      	ldr	r3, [pc, #60]	; (8009648 <MX_SAI1_Init+0x70>)
 800960a:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800960c:	2203      	movs	r2, #3
 800960e:	6042      	str	r2, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8009610:	2301      	movs	r3, #1
 8009612:	6083      	str	r3, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009614:	2100      	movs	r1, #0
 8009616:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8009618:	2304      	movs	r3, #4
 800961a:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800961c:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800961e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8009620:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009622:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8009624:	2302      	movs	r3, #2
 8009626:	f7fc f85d 	bl	80056e4 <HAL_SAI_InitProtocol>
 800962a:	b918      	cbnz	r0, 8009634 <MX_SAI1_Init+0x5c>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800962c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800962e:	f7ff ff93 	bl	8009558 <Error_Handler>
 8009632:	e7e8      	b.n	8009606 <MX_SAI1_Init+0x2e>
    Error_Handler();
 8009634:	f7ff ff90 	bl	8009558 <Error_Handler>
}
 8009638:	e7f8      	b.n	800962c <MX_SAI1_Init+0x54>
 800963a:	bf00      	nop
 800963c:	200198c0 	.word	0x200198c0
 8009640:	40015804 	.word	0x40015804
 8009644:	20019738 	.word	0x20019738
 8009648:	40015824 	.word	0x40015824

0800964c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800964c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009650:	b089      	sub	sp, #36	; 0x24
 8009652:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8009654:	6802      	ldr	r2, [r0, #0]
 8009656:	4b54      	ldr	r3, [pc, #336]	; (80097a8 <HAL_SAI_MspInit+0x15c>)
 8009658:	429a      	cmp	r2, r3
 800965a:	d006      	beq.n	800966a <HAL_SAI_MspInit+0x1e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 800965c:	6822      	ldr	r2, [r4, #0]
 800965e:	4b53      	ldr	r3, [pc, #332]	; (80097ac <HAL_SAI_MspInit+0x160>)
 8009660:	429a      	cmp	r2, r3
 8009662:	d058      	beq.n	8009716 <HAL_SAI_MspInit+0xca>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 8009664:	b009      	add	sp, #36	; 0x24
 8009666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (SAI1_client == 0)
 800966a:	4b51      	ldr	r3, [pc, #324]	; (80097b0 <HAL_SAI_MspInit+0x164>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	b963      	cbnz	r3, 800968a <HAL_SAI_MspInit+0x3e>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8009670:	4a50      	ldr	r2, [pc, #320]	; (80097b4 <HAL_SAI_MspInit+0x168>)
 8009672:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8009676:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800967a:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 800967e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8009682:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8009686:	9201      	str	r2, [sp, #4]
 8009688:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 800968a:	3301      	adds	r3, #1
 800968c:	4a48      	ldr	r2, [pc, #288]	; (80097b0 <HAL_SAI_MspInit+0x164>)
 800968e:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009690:	2704      	movs	r7, #4
 8009692:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009694:	2602      	movs	r6, #2
 8009696:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009698:	2500      	movs	r5, #0
 800969a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800969c:	2303      	movs	r3, #3
 800969e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80096a0:	f04f 0906 	mov.w	r9, #6
 80096a4:	f8cd 901c 	str.w	r9, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80096a8:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80097c0 <HAL_SAI_MspInit+0x174>
 80096ac:	a903      	add	r1, sp, #12
 80096ae:	4640      	mov	r0, r8
 80096b0:	f7f8 ffa6 	bl	8002600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80096b4:	2370      	movs	r3, #112	; 0x70
 80096b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096b8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ba:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80096bc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80096be:	f8cd 901c 	str.w	r9, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80096c2:	a903      	add	r1, sp, #12
 80096c4:	4640      	mov	r0, r8
 80096c6:	f7f8 ff9b 	bl	8002600 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 80096ca:	483b      	ldr	r0, [pc, #236]	; (80097b8 <HAL_SAI_MspInit+0x16c>)
 80096cc:	4b3b      	ldr	r3, [pc, #236]	; (80097bc <HAL_SAI_MspInit+0x170>)
 80096ce:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80096d0:	2357      	movs	r3, #87	; 0x57
 80096d2:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80096d4:	2340      	movs	r3, #64	; 0x40
 80096d6:	6083      	str	r3, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80096d8:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80096da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096de:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80096e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096e4:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80096e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80096ea:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80096ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096f0:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80096f2:	6205      	str	r5, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80096f4:	6247      	str	r7, [r0, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80096f6:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80096f8:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80096fa:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80096fc:	f7f7 ff94 	bl	8001628 <HAL_DMA_Init>
 8009700:	b930      	cbnz	r0, 8009710 <HAL_SAI_MspInit+0xc4>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8009702:	4b2d      	ldr	r3, [pc, #180]	; (80097b8 <HAL_SAI_MspInit+0x16c>)
 8009704:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8009708:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800970a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800970e:	e7a5      	b.n	800965c <HAL_SAI_MspInit+0x10>
      Error_Handler();
 8009710:	f7ff ff22 	bl	8009558 <Error_Handler>
 8009714:	e7f5      	b.n	8009702 <HAL_SAI_MspInit+0xb6>
      if (SAI1_client == 0)
 8009716:	4b26      	ldr	r3, [pc, #152]	; (80097b0 <HAL_SAI_MspInit+0x164>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	b963      	cbnz	r3, 8009736 <HAL_SAI_MspInit+0xea>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800971c:	4a25      	ldr	r2, [pc, #148]	; (80097b4 <HAL_SAI_MspInit+0x168>)
 800971e:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8009722:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8009726:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 800972a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 800972e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8009732:	9202      	str	r2, [sp, #8]
 8009734:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 8009736:	3301      	adds	r3, #1
 8009738:	4a1d      	ldr	r2, [pc, #116]	; (80097b0 <HAL_SAI_MspInit+0x164>)
 800973a:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800973c:	2308      	movs	r3, #8
 800973e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009740:	2302      	movs	r3, #2
 8009742:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009744:	2500      	movs	r5, #0
 8009746:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009748:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800974a:	2306      	movs	r3, #6
 800974c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800974e:	a903      	add	r1, sp, #12
 8009750:	481b      	ldr	r0, [pc, #108]	; (80097c0 <HAL_SAI_MspInit+0x174>)
 8009752:	f7f8 ff55 	bl	8002600 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8009756:	481b      	ldr	r0, [pc, #108]	; (80097c4 <HAL_SAI_MspInit+0x178>)
 8009758:	4b1b      	ldr	r3, [pc, #108]	; (80097c8 <HAL_SAI_MspInit+0x17c>)
 800975a:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800975c:	2358      	movs	r3, #88	; 0x58
 800975e:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009760:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8009762:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8009764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009768:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800976a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800976e:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009770:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009774:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8009776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800977a:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 800977c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009780:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009782:	2304      	movs	r3, #4
 8009784:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8009786:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8009788:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800978a:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800978c:	f7f7 ff4c 	bl	8001628 <HAL_DMA_Init>
 8009790:	b930      	cbnz	r0, 80097a0 <HAL_SAI_MspInit+0x154>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8009792:	4b0c      	ldr	r3, [pc, #48]	; (80097c4 <HAL_SAI_MspInit+0x178>)
 8009794:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8009798:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800979a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800979e:	e761      	b.n	8009664 <HAL_SAI_MspInit+0x18>
      Error_Handler();
 80097a0:	f7ff feda 	bl	8009558 <Error_Handler>
 80097a4:	e7f5      	b.n	8009792 <HAL_SAI_MspInit+0x146>
 80097a6:	bf00      	nop
 80097a8:	40015804 	.word	0x40015804
 80097ac:	40015824 	.word	0x40015824
 80097b0:	20000124 	.word	0x20000124
 80097b4:	58024400 	.word	0x58024400
 80097b8:	200197d0 	.word	0x200197d0
 80097bc:	40020028 	.word	0x40020028
 80097c0:	58021000 	.word	0x58021000
 80097c4:	20019848 	.word	0x20019848
 80097c8:	40020040 	.word	0x40020040

080097cc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80097cc:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 80097ce:	4b07      	ldr	r3, [pc, #28]	; (80097ec <SD_CheckStatus+0x20>)
 80097d0:	2201      	movs	r2, #1
 80097d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80097d4:	f7fe fcbe 	bl	8008154 <BSP_SD_GetCardState>
 80097d8:	b920      	cbnz	r0, 80097e4 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 80097da:	4a04      	ldr	r2, [pc, #16]	; (80097ec <SD_CheckStatus+0x20>)
 80097dc:	7813      	ldrb	r3, [r2, #0]
 80097de:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80097e2:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 80097e4:	4b01      	ldr	r3, [pc, #4]	; (80097ec <SD_CheckStatus+0x20>)
 80097e6:	7818      	ldrb	r0, [r3, #0]
}
 80097e8:	bd08      	pop	{r3, pc}
 80097ea:	bf00      	nop
 80097ec:	20000024 	.word	0x20000024

080097f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80097f0:	b510      	push	{r4, lr}
 80097f2:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 80097f4:	4b07      	ldr	r3, [pc, #28]	; (8009814 <SD_initialize+0x24>)
 80097f6:	2201      	movs	r2, #1
 80097f8:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80097fa:	f7fe fcd7 	bl	80081ac <BSP_SD_Init>
 80097fe:	b110      	cbz	r0, 8009806 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009800:	4b04      	ldr	r3, [pc, #16]	; (8009814 <SD_initialize+0x24>)
 8009802:	7818      	ldrb	r0, [r3, #0]
}
 8009804:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8009806:	4620      	mov	r0, r4
 8009808:	f7ff ffe0 	bl	80097cc <SD_CheckStatus>
 800980c:	4b01      	ldr	r3, [pc, #4]	; (8009814 <SD_initialize+0x24>)
 800980e:	7018      	strb	r0, [r3, #0]
 8009810:	e7f6      	b.n	8009800 <SD_initialize+0x10>
 8009812:	bf00      	nop
 8009814:	20000024 	.word	0x20000024

08009818 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009818:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800981a:	f7ff ffd7 	bl	80097cc <SD_CheckStatus>
}
 800981e:	bd08      	pop	{r3, pc}

08009820 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009820:	b508      	push	{r3, lr}
 8009822:	4608      	mov	r0, r1
 8009824:	4611      	mov	r1, r2
 8009826:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800982c:	f7fe fc72 	bl	8008114 <BSP_SD_ReadBlocks>
 8009830:	b930      	cbnz	r0, 8009840 <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009832:	f7fe fc8f 	bl	8008154 <BSP_SD_GetCardState>
 8009836:	4603      	mov	r3, r0
 8009838:	2800      	cmp	r0, #0
 800983a:	d1fa      	bne.n	8009832 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800983c:	4618      	mov	r0, r3
 800983e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e7fb      	b.n	800983c <SD_read+0x1c>

08009844 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009844:	b508      	push	{r3, lr}
 8009846:	4608      	mov	r0, r1
 8009848:	4611      	mov	r1, r2
 800984a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800984c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009850:	f7fe fc70 	bl	8008134 <BSP_SD_WriteBlocks>
 8009854:	b930      	cbnz	r0, 8009864 <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009856:	f7fe fc7d 	bl	8008154 <BSP_SD_GetCardState>
 800985a:	4603      	mov	r3, r0
 800985c:	2800      	cmp	r0, #0
 800985e:	d1fa      	bne.n	8009856 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8009860:	4618      	mov	r0, r3
 8009862:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e7fb      	b.n	8009860 <SD_write+0x1c>

08009868 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009868:	b530      	push	{r4, r5, lr}
 800986a:	b08b      	sub	sp, #44	; 0x2c
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800986c:	4b13      	ldr	r3, [pc, #76]	; (80098bc <SD_ioctl+0x54>)
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	f013 0401 	ands.w	r4, r3, #1
 8009874:	d11d      	bne.n	80098b2 <SD_ioctl+0x4a>
 8009876:	4608      	mov	r0, r1
 8009878:	4615      	mov	r5, r2

  switch (cmd)
 800987a:	2903      	cmp	r1, #3
 800987c:	d81c      	bhi.n	80098b8 <SD_ioctl+0x50>
 800987e:	e8df f001 	tbb	[pc, r1]
 8009882:	0219      	.short	0x0219
 8009884:	1009      	.short	0x1009
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009886:	a801      	add	r0, sp, #4
 8009888:	f7fe fc6e 	bl	8008168 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800988c:	9b07      	ldr	r3, [sp, #28]
 800988e:	602b      	str	r3, [r5, #0]
    res = RES_OK;
 8009890:	4620      	mov	r0, r4
    break;
 8009892:	e00f      	b.n	80098b4 <SD_ioctl+0x4c>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009894:	a801      	add	r0, sp, #4
 8009896:	f7fe fc67 	bl	8008168 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800989a:	9b08      	ldr	r3, [sp, #32]
 800989c:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
 800989e:	4620      	mov	r0, r4
    break;
 80098a0:	e008      	b.n	80098b4 <SD_ioctl+0x4c>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098a2:	a801      	add	r0, sp, #4
 80098a4:	f7fe fc60 	bl	8008168 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80098a8:	9b08      	ldr	r3, [sp, #32]
 80098aa:	0a5b      	lsrs	r3, r3, #9
 80098ac:	602b      	str	r3, [r5, #0]
    res = RES_OK;
 80098ae:	4620      	mov	r0, r4
    break;
 80098b0:	e000      	b.n	80098b4 <SD_ioctl+0x4c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80098b2:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 80098b4:	b00b      	add	sp, #44	; 0x2c
 80098b6:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 80098b8:	2004      	movs	r0, #4
 80098ba:	e7fb      	b.n	80098b4 <SD_ioctl+0x4c>
 80098bc:	20000024 	.word	0x20000024

080098c0 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <MX_SDMMC1_SD_Init+0x20>)
 80098c2:	4a08      	ldr	r2, [pc, #32]	; (80098e4 <MX_SDMMC1_SD_Init+0x24>)
 80098c4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80098c6:	2200      	movs	r2, #0
 80098c8:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80098ca:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80098cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80098d0:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80098d2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 16;
 80098d4:	2210      	movs	r2, #16
 80098d6:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80098d8:	2201      	movs	r2, #1
 80098da:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	20019958 	.word	0x20019958
 80098e4:	52007000 	.word	0x52007000

080098e8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80098e8:	b570      	push	{r4, r5, r6, lr}
 80098ea:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098ec:	2300      	movs	r3, #0
 80098ee:	9303      	str	r3, [sp, #12]
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	9305      	str	r3, [sp, #20]
 80098f4:	9306      	str	r3, [sp, #24]
 80098f6:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 80098f8:	6802      	ldr	r2, [r0, #0]
 80098fa:	4b26      	ldr	r3, [pc, #152]	; (8009994 <HAL_SD_MspInit+0xac>)
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d001      	beq.n	8009904 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8009900:	b008      	add	sp, #32
 8009902:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8009904:	4b24      	ldr	r3, [pc, #144]	; (8009998 <HAL_SD_MspInit+0xb0>)
 8009906:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800990a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800990e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8009912:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009916:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800991a:	9200      	str	r2, [sp, #0]
 800991c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800991e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009922:	f042 0204 	orr.w	r2, r2, #4
 8009926:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800992a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800992e:	f002 0204 	and.w	r2, r2, #4
 8009932:	9201      	str	r2, [sp, #4]
 8009934:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009936:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800993a:	f042 0208 	orr.w	r2, r2, #8
 800993e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009946:	f003 0308 	and.w	r3, r3, #8
 800994a:	9302      	str	r3, [sp, #8]
 800994c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800994e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8009952:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009954:	2602      	movs	r6, #2
 8009956:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009958:	2401      	movs	r4, #1
 800995a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800995c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800995e:	250c      	movs	r5, #12
 8009960:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009962:	eb0d 0105 	add.w	r1, sp, r5
 8009966:	480d      	ldr	r0, [pc, #52]	; (800999c <HAL_SD_MspInit+0xb4>)
 8009968:	f7f8 fe4a 	bl	8002600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800996c:	2304      	movs	r3, #4
 800996e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009970:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009972:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009974:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8009976:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009978:	eb0d 0105 	add.w	r1, sp, r5
 800997c:	4808      	ldr	r0, [pc, #32]	; (80099a0 <HAL_SD_MspInit+0xb8>)
 800997e:	f7f8 fe3f 	bl	8002600 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 8009982:	2200      	movs	r2, #0
 8009984:	2107      	movs	r1, #7
 8009986:	2031      	movs	r0, #49	; 0x31
 8009988:	f7f7 fb9a 	bl	80010c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800998c:	2031      	movs	r0, #49	; 0x31
 800998e:	f7f7 fbc9 	bl	8001124 <HAL_NVIC_EnableIRQ>
}
 8009992:	e7b5      	b.n	8009900 <HAL_SD_MspInit+0x18>
 8009994:	52007000 	.word	0x52007000
 8009998:	58024400 	.word	0x58024400
 800999c:	58020800 	.word	0x58020800
 80099a0:	58020c00 	.word	0x58020c00

080099a4 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80099a4:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80099a6:	4810      	ldr	r0, [pc, #64]	; (80099e8 <MX_SPI2_Init+0x44>)
 80099a8:	4b10      	ldr	r3, [pc, #64]	; (80099ec <MX_SPI2_Init+0x48>)
 80099aa:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80099ac:	2300      	movs	r3, #0
 80099ae:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80099b0:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80099b2:	2207      	movs	r2, #7
 80099b4:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80099b6:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80099b8:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80099ba:	6183      	str	r3, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80099bc:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80099be:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099c0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80099c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80099c4:	6343      	str	r3, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80099c6:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80099c8:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80099ca:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80099cc:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80099ce:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80099d0:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80099d2:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80099d4:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80099d6:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80099d8:	f7fd f990 	bl	8006cfc <HAL_SPI_Init>
 80099dc:	b900      	cbnz	r0, 80099e0 <MX_SPI2_Init+0x3c>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80099de:	bd08      	pop	{r3, pc}
    Error_Handler();
 80099e0:	f7ff fdba 	bl	8009558 <Error_Handler>
}
 80099e4:	e7fb      	b.n	80099de <MX_SPI2_Init+0x3a>
 80099e6:	bf00      	nop
 80099e8:	200199d8 	.word	0x200199d8
 80099ec:	40003800 	.word	0x40003800

080099f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80099f0:	b530      	push	{r4, r5, lr}
 80099f2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099f4:	2300      	movs	r3, #0
 80099f6:	9303      	str	r3, [sp, #12]
 80099f8:	9304      	str	r3, [sp, #16]
 80099fa:	9305      	str	r3, [sp, #20]
 80099fc:	9306      	str	r3, [sp, #24]
 80099fe:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8009a00:	6802      	ldr	r2, [r0, #0]
 8009a02:	4b3b      	ldr	r3, [pc, #236]	; (8009af0 <HAL_SPI_MspInit+0x100>)
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d001      	beq.n	8009a0c <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8009a08:	b009      	add	sp, #36	; 0x24
 8009a0a:	bd30      	pop	{r4, r5, pc}
 8009a0c:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009a0e:	4b39      	ldr	r3, [pc, #228]	; (8009af4 <HAL_SPI_MspInit+0x104>)
 8009a10:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8009a14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a18:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8009a1c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8009a20:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8009a24:	9201      	str	r2, [sp, #4]
 8009a26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009a2c:	f042 0202 	orr.w	r2, r2, #2
 8009a30:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a38:	f003 0302 	and.w	r3, r3, #2
 8009a3c:	9302      	str	r3, [sp, #8]
 8009a3e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8009a40:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009a44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a46:	2302      	movs	r3, #2
 8009a48:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a4a:	2500      	movs	r5, #0
 8009a4c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009a4e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009a50:	2305      	movs	r3, #5
 8009a52:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a54:	a903      	add	r1, sp, #12
 8009a56:	4828      	ldr	r0, [pc, #160]	; (8009af8 <HAL_SPI_MspInit+0x108>)
 8009a58:	f7f8 fdd2 	bl	8002600 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8009a5c:	4827      	ldr	r0, [pc, #156]	; (8009afc <HAL_SPI_MspInit+0x10c>)
 8009a5e:	4b28      	ldr	r3, [pc, #160]	; (8009b00 <HAL_SPI_MspInit+0x110>)
 8009a60:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8009a62:	2327      	movs	r3, #39	; 0x27
 8009a64:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009a66:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a68:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a6e:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a70:	6145      	str	r5, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a72:	6185      	str	r5, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8009a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a78:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009a7a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8009a7e:	6203      	str	r3, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009a80:	2304      	movs	r3, #4
 8009a82:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8009a84:	2301      	movs	r3, #1
 8009a86:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8009a88:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009a8a:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8009a8c:	f7f7 fdcc 	bl	8001628 <HAL_DMA_Init>
 8009a90:	bb40      	cbnz	r0, 8009ae4 <HAL_SPI_MspInit+0xf4>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8009a92:	4b1a      	ldr	r3, [pc, #104]	; (8009afc <HAL_SPI_MspInit+0x10c>)
 8009a94:	67e3      	str	r3, [r4, #124]	; 0x7c
 8009a96:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8009a98:	481a      	ldr	r0, [pc, #104]	; (8009b04 <HAL_SPI_MspInit+0x114>)
 8009a9a:	4b1b      	ldr	r3, [pc, #108]	; (8009b08 <HAL_SPI_MspInit+0x118>)
 8009a9c:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8009a9e:	2328      	movs	r3, #40	; 0x28
 8009aa0:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009aa2:	2340      	movs	r3, #64	; 0x40
 8009aa4:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009aae:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009ab0:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009ab2:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8009ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ab8:	61c2      	str	r2, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009aba:	6203      	str	r3, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009abc:	2204      	movs	r2, #4
 8009abe:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8009ac0:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8009ac2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009ac4:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8009ac6:	f7f7 fdaf 	bl	8001628 <HAL_DMA_Init>
 8009aca:	b970      	cbnz	r0, 8009aea <HAL_SPI_MspInit+0xfa>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8009acc:	4b0d      	ldr	r3, [pc, #52]	; (8009b04 <HAL_SPI_MspInit+0x114>)
 8009ace:	67a3      	str	r3, [r4, #120]	; 0x78
 8009ad0:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	2103      	movs	r1, #3
 8009ad6:	2024      	movs	r0, #36	; 0x24
 8009ad8:	f7f7 faf2 	bl	80010c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8009adc:	2024      	movs	r0, #36	; 0x24
 8009ade:	f7f7 fb21 	bl	8001124 <HAL_NVIC_EnableIRQ>
}
 8009ae2:	e791      	b.n	8009a08 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8009ae4:	f7ff fd38 	bl	8009558 <Error_Handler>
 8009ae8:	e7d3      	b.n	8009a92 <HAL_SPI_MspInit+0xa2>
      Error_Handler();
 8009aea:	f7ff fd35 	bl	8009558 <Error_Handler>
 8009aee:	e7ed      	b.n	8009acc <HAL_SPI_MspInit+0xdc>
 8009af0:	40003800 	.word	0x40003800
 8009af4:	58024400 	.word	0x58024400
 8009af8:	58020400 	.word	0x58020400
 8009afc:	20019a60 	.word	0x20019a60
 8009b00:	40020058 	.word	0x40020058
 8009b04:	20019ad8 	.word	0x20019ad8
 8009b08:	40020070 	.word	0x40020070

08009b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009b0c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b0e:	4b07      	ldr	r3, [pc, #28]	; (8009b2c <HAL_MspInit+0x20>)
 8009b10:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8009b14:	f042 0202 	orr.w	r2, r2, #2
 8009b18:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8009b1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b20:	f003 0302 	and.w	r3, r3, #2
 8009b24:	9301      	str	r3, [sp, #4]
 8009b26:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009b28:	b002      	add	sp, #8
 8009b2a:	4770      	bx	lr
 8009b2c:	58024400 	.word	0x58024400

08009b30 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009b30:	4770      	bx	lr

08009b32 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009b32:	e7fe      	b.n	8009b32 <HardFault_Handler>

08009b34 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009b34:	e7fe      	b.n	8009b34 <MemManage_Handler>

08009b36 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009b36:	e7fe      	b.n	8009b36 <BusFault_Handler>

08009b38 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009b38:	e7fe      	b.n	8009b38 <UsageFault_Handler>

08009b3a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009b3a:	4770      	bx	lr

08009b3c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009b3c:	4770      	bx	lr

08009b3e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009b3e:	4770      	bx	lr

08009b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009b40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009b42:	f7f6 fc1f 	bl	8000384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009b46:	bd08      	pop	{r3, pc}

08009b48 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009b48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009b4a:	4802      	ldr	r0, [pc, #8]	; (8009b54 <DMA1_Stream0_IRQHandler+0xc>)
 8009b4c:	f7f8 f9ba 	bl	8001ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009b50:	bd08      	pop	{r3, pc}
 8009b52:	bf00      	nop
 8009b54:	20000278 	.word	0x20000278

08009b58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009b58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8009b5a:	4802      	ldr	r0, [pc, #8]	; (8009b64 <DMA1_Stream1_IRQHandler+0xc>)
 8009b5c:	f7f8 f9b2 	bl	8001ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009b60:	bd08      	pop	{r3, pc}
 8009b62:	bf00      	nop
 8009b64:	200197d0 	.word	0x200197d0

08009b68 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8009b68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8009b6a:	4802      	ldr	r0, [pc, #8]	; (8009b74 <DMA1_Stream2_IRQHandler+0xc>)
 8009b6c:	f7f8 f9aa 	bl	8001ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8009b70:	bd08      	pop	{r3, pc}
 8009b72:	bf00      	nop
 8009b74:	20019848 	.word	0x20019848

08009b78 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8009b78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8009b7a:	4802      	ldr	r0, [pc, #8]	; (8009b84 <DMA1_Stream3_IRQHandler+0xc>)
 8009b7c:	f7f8 f9a2 	bl	8001ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8009b80:	bd08      	pop	{r3, pc}
 8009b82:	bf00      	nop
 8009b84:	20019a60 	.word	0x20019a60

08009b88 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8009b88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8009b8a:	4802      	ldr	r0, [pc, #8]	; (8009b94 <DMA1_Stream4_IRQHandler+0xc>)
 8009b8c:	f7f8 f99a 	bl	8001ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8009b90:	bd08      	pop	{r3, pc}
 8009b92:	bf00      	nop
 8009b94:	20019ad8 	.word	0x20019ad8

08009b98 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8009b98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8009b9a:	4802      	ldr	r0, [pc, #8]	; (8009ba4 <SPI2_IRQHandler+0xc>)
 8009b9c:	f7fd faea 	bl	8007174 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8009ba0:	bd08      	pop	{r3, pc}
 8009ba2:	bf00      	nop
 8009ba4:	200199d8 	.word	0x200199d8

08009ba8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8009ba8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8009baa:	4802      	ldr	r0, [pc, #8]	; (8009bb4 <SDMMC1_IRQHandler+0xc>)
 8009bac:	f7fc febe 	bl	800692c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8009bb0:	bd08      	pop	{r3, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20019958 	.word	0x20019958

08009bb8 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8009bb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8009bba:	4802      	ldr	r0, [pc, #8]	; (8009bc4 <BDMA_Channel0_IRQHandler+0xc>)
 8009bbc:	f7f8 f982 	bl	8001ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8009bc0:	bd08      	pop	{r3, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20000138 	.word	0x20000138

08009bc8 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8009bc8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8009bca:	f000 fcb7 	bl	800a53c <__errno>
 8009bce:	2316      	movs	r3, #22
 8009bd0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8009bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bd6:	bd08      	pop	{r3, pc}

08009bd8 <_exit>:

void _exit (int status)
{
 8009bd8:	b508      	push	{r3, lr}
	_kill(status, -1);
 8009bda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009bde:	f7ff fff3 	bl	8009bc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009be2:	e7fe      	b.n	8009be2 <_exit+0xa>

08009be4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009be4:	b570      	push	{r4, r5, r6, lr}
 8009be6:	460c      	mov	r4, r1
 8009be8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009bea:	2500      	movs	r5, #0
 8009bec:	42b5      	cmp	r5, r6
 8009bee:	da07      	bge.n	8009c00 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8009bf0:	f3af 8000 	nop.w
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009bfa:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	e7f5      	b.n	8009bec <_read+0x8>
	}

return len;
}
 8009c00:	4630      	mov	r0, r6
 8009c02:	bd70      	pop	{r4, r5, r6, pc}

08009c04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009c04:	b570      	push	{r4, r5, r6, lr}
 8009c06:	460c      	mov	r4, r1
 8009c08:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009c0a:	2500      	movs	r5, #0
 8009c0c:	42b5      	cmp	r5, r6
 8009c0e:	da05      	bge.n	8009c1c <_write+0x18>
	{
		__io_putchar(*ptr++);
 8009c10:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009c14:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009c18:	3501      	adds	r5, #1
 8009c1a:	e7f7      	b.n	8009c0c <_write+0x8>
	}
	return len;
}
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	bd70      	pop	{r4, r5, r6, pc}

08009c20 <_close>:

int _close(int file)
{
	return -1;
}
 8009c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c24:	4770      	bx	lr

08009c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8009c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c2a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	4770      	bx	lr

08009c30 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8009c30:	2001      	movs	r0, #1
 8009c32:	4770      	bx	lr

08009c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8009c34:	2000      	movs	r0, #0
 8009c36:	4770      	bx	lr

08009c38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009c38:	b508      	push	{r3, lr}
 8009c3a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009c3c:	4a0b      	ldr	r2, [pc, #44]	; (8009c6c <_sbrk+0x34>)
 8009c3e:	6812      	ldr	r2, [r2, #0]
 8009c40:	b142      	cbz	r2, 8009c54 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8009c42:	4a0a      	ldr	r2, [pc, #40]	; (8009c6c <_sbrk+0x34>)
 8009c44:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8009c46:	4403      	add	r3, r0
 8009c48:	466a      	mov	r2, sp
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d806      	bhi.n	8009c5c <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8009c4e:	4a07      	ldr	r2, [pc, #28]	; (8009c6c <_sbrk+0x34>)
 8009c50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8009c52:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8009c54:	4a05      	ldr	r2, [pc, #20]	; (8009c6c <_sbrk+0x34>)
 8009c56:	4906      	ldr	r1, [pc, #24]	; (8009c70 <_sbrk+0x38>)
 8009c58:	6011      	str	r1, [r2, #0]
 8009c5a:	e7f2      	b.n	8009c42 <_sbrk+0xa>
		errno = ENOMEM;
 8009c5c:	f000 fc6e 	bl	800a53c <__errno>
 8009c60:	230c      	movs	r3, #12
 8009c62:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8009c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c68:	e7f3      	b.n	8009c52 <_sbrk+0x1a>
 8009c6a:	bf00      	nop
 8009c6c:	20000128 	.word	0x20000128
 8009c70:	20019b60 	.word	0x20019b60

08009c74 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009c74:	4a18      	ldr	r2, [pc, #96]	; (8009cd8 <SystemInit+0x64>)
 8009c76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009c7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009c82:	4b16      	ldr	r3, [pc, #88]	; (8009cdc <SystemInit+0x68>)
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	f042 0201 	orr.w	r2, r2, #1
 8009c8a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	4913      	ldr	r1, [pc, #76]	; (8009ce0 <SystemInit+0x6c>)
 8009c94:	4001      	ands	r1, r0
 8009c96:	6019      	str	r1, [r3, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8009c98:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8009c9a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8009c9c:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8009c9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8009ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8009ca2:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009ca4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8009ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009ca8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8009caa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009cac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009cae:	6819      	ldr	r1, [r3, #0]
 8009cb0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8009cb4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009cb6:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009cb8:	4b0a      	ldr	r3, [pc, #40]	; (8009ce4 <SystemInit+0x70>)
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	4b0a      	ldr	r3, [pc, #40]	; (8009ce8 <SystemInit+0x74>)
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cc4:	d202      	bcs.n	8009ccc <SystemInit+0x58>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009cc6:	4b09      	ldr	r3, [pc, #36]	; (8009cec <SystemInit+0x78>)
 8009cc8:	2201      	movs	r2, #1
 8009cca:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009ccc:	4b02      	ldr	r3, [pc, #8]	; (8009cd8 <SystemInit+0x64>)
 8009cce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009cd2:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	e000ed00 	.word	0xe000ed00
 8009cdc:	58024400 	.word	0x58024400
 8009ce0:	eaf6ed7f 	.word	0xeaf6ed7f
 8009ce4:	5c001000 	.word	0x5c001000
 8009ce8:	ffff0000 	.word	0xffff0000
 8009cec:	51008108 	.word	0x51008108

08009cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009d28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009cf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009cf6:	e003      	b.n	8009d00 <LoopCopyDataInit>

08009cf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009cf8:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009cfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009cfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009cfe:	3104      	adds	r1, #4

08009d00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009d00:	480b      	ldr	r0, [pc, #44]	; (8009d30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009d02:	4b0c      	ldr	r3, [pc, #48]	; (8009d34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009d04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009d06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009d08:	d3f6      	bcc.n	8009cf8 <CopyDataInit>
  ldr  r2, =_sbss
 8009d0a:	4a0b      	ldr	r2, [pc, #44]	; (8009d38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009d0c:	e002      	b.n	8009d14 <LoopFillZerobss>

08009d0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009d0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009d10:	f842 3b04 	str.w	r3, [r2], #4

08009d14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009d14:	4b09      	ldr	r3, [pc, #36]	; (8009d3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009d16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009d18:	d3f9      	bcc.n	8009d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009d1a:	f7ff ffab 	bl	8009c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009d1e:	f000 fc95 	bl	800a64c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009d22:	f7fe fec5 	bl	8008ab0 <main>
  bx  lr    
 8009d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009d28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009d2c:	0800cce4 	.word	0x0800cce4
  ldr  r0, =_sdata
 8009d30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009d34:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8009d38:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8009d3c:	20019b60 	.word	0x20019b60

08009d40 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009d40:	e7fe      	b.n	8009d40 <ADC3_IRQHandler>

08009d42 <tThreshold_initToPool>:
{
	tThreshold_initToPool(th, low, high, &leaf->mempool);
}

void tThreshold_initToPool (tThreshold* const th, float low, float high, tMempool* const mp)
{
 8009d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d44:	4606      	mov	r6, r0
 8009d46:	ee10 4a10 	vmov	r4, s0
 8009d4a:	ee10 5a90 	vmov	r5, s1
    _tMempool* m = *mp;
 8009d4e:	680f      	ldr	r7, [r1, #0]
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 8009d50:	4639      	mov	r1, r7
 8009d52:	2010      	movs	r0, #16
 8009d54:	f000 fb78 	bl	800a448 <mpool_alloc>
 8009d58:	6030      	str	r0, [r6, #0]
    t->mempool = m;
 8009d5a:	6007      	str	r7, [r0, #0]
    
    t->highThresh = high;
 8009d5c:	6045      	str	r5, [r0, #4]
    t->lowThresh = low;
 8009d5e:	6084      	str	r4, [r0, #8]

    t->currentValue = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	60c3      	str	r3, [r0, #12]
}
 8009d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d66 <tThreshold_init>:
{
 8009d66:	b508      	push	{r3, lr}
	tThreshold_initToPool(th, low, high, &leaf->mempool);
 8009d68:	3118      	adds	r1, #24
 8009d6a:	f7ff ffea 	bl	8009d42 <tThreshold_initToPool>
}
 8009d6e:	bd08      	pop	{r3, pc}

08009d70 <tThreshold_tick>:
    mpool_free((char*)t, t->mempool);
}

int tThreshold_tick(tThreshold* const th, float in)
{
    _tThreshold* t = *th;
 8009d70:	6803      	ldr	r3, [r0, #0]

    if (in >= t->highThresh)
 8009d72:	edd3 7a01 	vldr	s15, [r3, #4]
 8009d76:	eef4 7ac0 	vcmpe.f32	s15, s0
 8009d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d7e:	d803      	bhi.n	8009d88 <tThreshold_tick+0x18>
    {
    	t->currentValue = 1;
 8009d80:	2201      	movs	r2, #1
 8009d82:	60da      	str	r2, [r3, #12]
	{
    	t->currentValue = 0;
	}

    return t->currentValue;
}
 8009d84:	68d8      	ldr	r0, [r3, #12]
 8009d86:	4770      	bx	lr
    else if (in <= t->lowThresh)
 8009d88:	edd3 7a02 	vldr	s15, [r3, #8]
 8009d8c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8009d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d94:	dbf6      	blt.n	8009d84 <tThreshold_tick+0x14>
    	t->currentValue = 0;
 8009d96:	2200      	movs	r2, #0
 8009d98:	60da      	str	r2, [r3, #12]
 8009d9a:	e7f3      	b.n	8009d84 <tThreshold_tick+0x14>

08009d9c <tSlide_initToPool>:
{
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	ed2d 8b02 	vpush	{d8}
 8009da2:	4604      	mov	r4, r0
 8009da4:	eef0 8a40 	vmov.f32	s17, s0
 8009da8:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 8009dac:	680d      	ldr	r5, [r1, #0]
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8009dae:	4629      	mov	r1, r5
 8009db0:	201c      	movs	r0, #28
 8009db2:	f000 fb49 	bl	800a448 <mpool_alloc>
 8009db6:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8009db8:	6005      	str	r5, [r0, #0]
    
    s->prevIn = 0.0f;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8009dbe:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8009dc0:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8009dc2:	6183      	str	r3, [r0, #24]
    if (upSlide < 1.0f)
 8009dc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009dc8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd0:	d413      	bmi.n	8009dfa <tSlide_initToPool+0x5e>
    {
        upSlide = 1.0f;
    }

    if (downSlide < 1.0f)
 8009dd2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009dd6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dde:	d40f      	bmi.n	8009e00 <tSlide_initToPool+0x64>
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8009de0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009de4:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8009de8:	ed80 7a04 	vstr	s14, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8009dec:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8009df0:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8009df4:	ecbd 8b02 	vpop	{d8}
 8009df8:	bd38      	pop	{r3, r4, r5, pc}
        upSlide = 1.0f;
 8009dfa:	eef0 8a67 	vmov.f32	s17, s15
 8009dfe:	e7e8      	b.n	8009dd2 <tSlide_initToPool+0x36>
        downSlide = 1.0f;
 8009e00:	eeb0 8a67 	vmov.f32	s16, s15
 8009e04:	e7ec      	b.n	8009de0 <tSlide_initToPool+0x44>

08009e06 <tSlide_init>:
{
 8009e06:	b508      	push	{r3, lr}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
 8009e08:	3118      	adds	r1, #24
 8009e0a:	f7ff ffc7 	bl	8009d9c <tSlide_initToPool>
}
 8009e0e:	bd08      	pop	{r3, pc}

08009e10 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 8009e10:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 8009e12:	edd3 7a01 	vldr	s15, [r3, #4]
 8009e16:	eef4 7ac0 	vcmpe.f32	s15, s0
 8009e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e1e:	d81b      	bhi.n	8009e58 <tSlide_tick+0x48>
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8009e20:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009e24:	edd3 6a04 	vldr	s13, [r3, #16]
 8009e28:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009e2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e30:	edc3 7a02 	vstr	s15, [r3, #8]
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8009e34:	ed93 7a02 	vldr	s14, [r3, #8]
 8009e38:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009e70 <tSlide_tick+0x60>
 8009e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e44:	d501      	bpl.n	8009e4a <tSlide_tick+0x3a>
 8009e46:	2200      	movs	r2, #0
 8009e48:	609a      	str	r2, [r3, #8]
#endif
    s->prevIn = in;
 8009e4a:	ed83 0a03 	vstr	s0, [r3, #12]
    s->prevOut = s->currentOut;
 8009e4e:	ed93 0a02 	vldr	s0, [r3, #8]
 8009e52:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 8009e56:	4770      	bx	lr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8009e58:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009e5c:	edd3 6a05 	vldr	s13, [r3, #20]
 8009e60:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e68:	edc3 7a02 	vstr	s15, [r3, #8]
 8009e6c:	e7e2      	b.n	8009e34 <tSlide_tick+0x24>
 8009e6e:	bf00      	nop
 8009e70:	006ce3ee 	.word	0x006ce3ee

08009e74 <tHighpass_initToPool>:
{
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
 8009e74:	b538      	push	{r3, r4, r5, lr}
 8009e76:	ed2d 8b02 	vpush	{d8}
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
 8009e80:	680c      	ldr	r4, [r1, #0]
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8009e82:	4621      	mov	r1, r4
 8009e84:	2018      	movs	r0, #24
 8009e86:	f000 fb05 	bl	800a494 <mpool_calloc>
 8009e8a:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8009e8c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 8009e8e:	6863      	ldr	r3, [r4, #4]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8009e90:	edd3 7a03 	vldr	s15, [r3, #12]
 8009e94:	edc0 7a05 	vstr	s15, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8009e98:	ee67 7a88 	vmul.f32	s15, s15, s16
 8009e9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ea4:	edc0 7a03 	vstr	s15, [r0, #12]
    f->ys = 0.0f;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 8009eac:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8009eae:	ed80 8a04 	vstr	s16, [r0, #16]
}
 8009eb2:	ecbd 8b02 	vpop	{d8}
 8009eb6:	bd38      	pop	{r3, r4, r5, pc}

08009eb8 <tHighpass_init>:
{
 8009eb8:	b508      	push	{r3, lr}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
 8009eba:	3118      	adds	r1, #24
 8009ebc:	f7ff ffda 	bl	8009e74 <tHighpass_initToPool>
}
 8009ec0:	bd08      	pop	{r3, pc}

08009ec2 <tHighpass_tick>:
    return f->frequency;
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
 8009ec2:	eeb0 7a40 	vmov.f32	s14, s0
    _tHighpass* f = *ft;
 8009ec6:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8009ec8:	edd3 7a01 	vldr	s15, [r3, #4]
 8009ecc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009ed0:	ed93 0a03 	vldr	s0, [r3, #12]
 8009ed4:	edd3 6a02 	vldr	s13, [r3, #8]
 8009ed8:	ee20 0a26 	vmul.f32	s0, s0, s13
 8009edc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009ee0:	ed83 0a02 	vstr	s0, [r3, #8]
    f->xs = x;
 8009ee4:	ed83 7a01 	vstr	s14, [r3, #4]
    return f->ys;
}
 8009ee8:	4770      	bx	lr

08009eea <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
 8009eea:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH;
    
    // compute highpass output via Eq. 5.1:
    yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 8009eec:	edd3 7a05 	vldr	s15, [r3, #20]
 8009ef0:	edd3 6a02 	vldr	s13, [r3, #8]
 8009ef4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009ef8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009efc:	ed93 7a04 	vldr	s14, [r3, #16]
 8009f00:	ee26 0a87 	vmul.f32	s0, s13, s14
 8009f04:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009f08:	ed93 0a03 	vldr	s0, [r3, #12]
 8009f0c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009f10:	ed93 6a06 	vldr	s12, [r3, #24]
 8009f14:	ee67 7a86 	vmul.f32	s15, s15, s12
    
    // compute bandpass output by applying 1st integrator to highpass output:
    yB = (f->g*yH) + f->s1;
 8009f18:	ee27 6a27 	vmul.f32	s12, s14, s15
 8009f1c:	ee76 6a86 	vadd.f32	s13, s13, s12
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 8009f20:	ee36 6a26 	vadd.f32	s12, s12, s13
 8009f24:	ed83 6a02 	vstr	s12, [r3, #8]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    yL = (f->g*yB) + f->s2;
 8009f28:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009f2c:	ee30 6a07 	vadd.f32	s12, s0, s14
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8009f30:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009f34:	ed83 7a03 	vstr	s14, [r3, #12]
    
    //instead of this:
    // y = g*x + s; // output computation
    // s = g*x + y; // state update
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8009f38:	ed93 0a07 	vldr	s0, [r3, #28]
 8009f3c:	ee20 0a06 	vmul.f32	s0, s0, s12
 8009f40:	ed93 7a08 	vldr	s14, [r3, #32]
 8009f44:	ee67 6a26 	vmul.f32	s13, s14, s13
 8009f48:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009f4c:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 8009f50:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8009f54:	ee36 0a80 	vadd.f32	s0, s13, s0
 8009f58:	4770      	bx	lr
	...

08009f5c <tVZFilter_BandwidthToR>:
    f->type = type;
    tVZFilter_calcCoeffs(vf);
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	ed2d 8b02 	vpush	{d8}
    _tVZFilter* f = *vf;
 8009f62:	6804      	ldr	r4, [r0, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009f64:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8009f68:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8009f6c:	ee60 0a60 	vnmul.f32	s1, s0, s1
 8009f70:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009f74:	f001 f934 	bl	800b1e0 <powf>
 8009f78:	ee28 8a00 	vmul.f32	s16, s16, s0
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8009f7c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8009fc4 <tVZFilter_BandwidthToR+0x68>
 8009f80:	ee28 8a00 	vmul.f32	s16, s16, s0
 8009f84:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8009f88:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009f8c:	f001 fa8c 	bl	800b4a8 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009f90:	edd4 7a04 	vldr	s15, [r4, #16]
 8009f94:	ee80 7a27 	vdiv.f32	s14, s0, s15
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8009f98:	ee67 7a07 	vmul.f32	s15, s14, s14
 8009f9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009fa0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009fa4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009fa8:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8009fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fb4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8009fb8:	f001 fb04 	bl	800b5c4 <sqrtf>
}
 8009fbc:	ecbd 8b02 	vpop	{d8}
 8009fc0:	bd10      	pop	{r4, pc}
 8009fc2:	bf00      	nop
 8009fc4:	40490fdb 	.word	0x40490fdb

08009fc8 <tVZFilter_calcCoeffs>:
{
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	ed2d 8b04 	vpush	{d8-d9}
 8009fce:	4605      	mov	r5, r0
    _tVZFilter* f = *vf;
 8009fd0:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8009fd2:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8009fd6:	eddf 7ab4 	vldr	s15, [pc, #720]	; 800a2a8 <tVZFilter_calcCoeffs+0x2e0>
 8009fda:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009fde:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8009fe2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009fe6:	f001 fa5f 	bl	800b4a8 <tanf>
 8009fea:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8009fee:	7923      	ldrb	r3, [r4, #4]
 8009ff0:	2b0a      	cmp	r3, #10
 8009ff2:	d813      	bhi.n	800a01c <tVZFilter_calcCoeffs+0x54>
 8009ff4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009ff8:	00270030 	.word	0x00270030
 8009ffc:	00420039 	.word	0x00420039
 800a000:	00610051 	.word	0x00610051
 800a004:	00ca00a2 	.word	0x00ca00a2
 800a008:	000b0104 	.word	0x000b0104
 800a00c:	00f2      	.short	0x00f2
            f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800a00e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a010:	6162      	str	r2, [r4, #20]
            f->cL = 1.0f;
 800a012:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a016:	61e3      	str	r3, [r4, #28]
            f->cB = f->R2;
 800a018:	6222      	str	r2, [r4, #32]
            f->cH = 1.0f;
 800a01a:	6263      	str	r3, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 800a01c:	edd4 7a05 	vldr	s15, [r4, #20]
 800a020:	ed94 7a04 	vldr	s14, [r4, #16]
 800a024:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a02c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a030:	ee27 7a07 	vmul.f32	s14, s14, s14
 800a034:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a03c:	ed84 7a06 	vstr	s14, [r4, #24]
}
 800a040:	ecbd 8b04 	vpop	{d8-d9}
 800a044:	bd38      	pop	{r3, r4, r5, pc}
            f->R2 = f->invG;
 800a046:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a048:	6163      	str	r3, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800a04a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a04e:	61e3      	str	r3, [r4, #28]
 800a050:	2300      	movs	r3, #0
 800a052:	6223      	str	r3, [r4, #32]
 800a054:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800a056:	e7e1      	b.n	800a01c <tVZFilter_calcCoeffs+0x54>
            f->R2 = f->invG;
 800a058:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a05a:	6163      	str	r3, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a05c:	2300      	movs	r3, #0
 800a05e:	61e3      	str	r3, [r4, #28]
 800a060:	6223      	str	r3, [r4, #32]
 800a062:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a066:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800a068:	e7d8      	b.n	800a01c <tVZFilter_calcCoeffs+0x54>
            f->R2 = f->invG;
 800a06a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a06c:	6163      	str	r3, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800a06e:	2300      	movs	r3, #0
 800a070:	61e3      	str	r3, [r4, #28]
 800a072:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a076:	6222      	str	r2, [r4, #32]
 800a078:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800a07a:	e7cf      	b.n	800a01c <tVZFilter_calcCoeffs+0x54>
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800a07c:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800a080:	4628      	mov	r0, r5
 800a082:	f7ff ff6b 	bl	8009f5c <tVZFilter_BandwidthToR>
 800a086:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a08a:	ed84 0a05 	vstr	s0, [r4, #20]
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800a08e:	2300      	movs	r3, #0
 800a090:	61e3      	str	r3, [r4, #28]
 800a092:	ed84 0a08 	vstr	s0, [r4, #32]
 800a096:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800a098:	e7c0      	b.n	800a01c <tVZFilter_calcCoeffs+0x54>
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800a09a:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f7ff ff5c 	bl	8009f5c <tVZFilter_BandwidthToR>
 800a0a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a0a8:	ed84 0a05 	vstr	s0, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a0ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a0b0:	61e3      	str	r3, [r4, #28]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	6222      	str	r2, [r4, #32]
 800a0b6:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800a0b8:	e7b0      	b.n	800a01c <tVZFilter_calcCoeffs+0x54>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800a0ba:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 800a0be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a0c2:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 800a0c6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a0ca:	f001 f889 	bl	800b1e0 <powf>
 800a0ce:	ee28 8a00 	vmul.f32	s16, s16, s0
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800a0d2:	ed9f 0a75 	vldr	s0, [pc, #468]	; 800a2a8 <tVZFilter_calcCoeffs+0x2e0>
 800a0d6:	ee28 8a00 	vmul.f32	s16, s16, s0
 800a0da:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 800a0de:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a0e2:	f001 f9e1 	bl	800b4a8 <tanf>
            float r  = f->g/wl;
 800a0e6:	ed94 7a04 	vldr	s14, [r4, #16]
 800a0ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800a0ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800a0f2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a0f6:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a0fa:	ee37 7a08 	vadd.f32	s14, s14, s16
 800a0fe:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a102:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a106:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a10a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800a10e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a112:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a116:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800a11a:	f001 fa53 	bl	800b5c4 <sqrtf>
 800a11e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a122:	ed84 0a05 	vstr	s0, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800a126:	ed84 8a07 	vstr	s16, [r4, #28]
 800a12a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800a12e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a132:	ed84 0a08 	vstr	s0, [r4, #32]
 800a136:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
            break;
 800a13a:	e76f      	b.n	800a01c <tVZFilter_calcCoeffs+0x54>
            float A = sqrtf(f->G);
 800a13c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800a140:	f001 fa40 	bl	800b5c4 <sqrtf>
 800a144:	eeb0 8a40 	vmov.f32	s16, s0
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800a148:	f001 fa3c 	bl	800b5c4 <sqrtf>
 800a14c:	ed94 7a04 	vldr	s14, [r4, #16]
 800a150:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a154:	edc4 7a04 	vstr	s15, [r4, #16]
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800a158:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800a15c:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800a2ac <tVZFilter_calcCoeffs+0x2e4>
 800a160:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a164:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800a168:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a16c:	f001 f9fa 	bl	800b564 <sinhf>
 800a170:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a174:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800a178:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a17a:	61e3      	str	r3, [r4, #28]
 800a17c:	ee67 7a88 	vmul.f32	s15, s15, s16
 800a180:	edc4 7a08 	vstr	s15, [r4, #32]
 800a184:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a188:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800a18a:	e747      	b.n	800a01c <tVZFilter_calcCoeffs+0x54>
            float A = sqrtf(f->G);
 800a18c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800a190:	f001 fa18 	bl	800b5c4 <sqrtf>
 800a194:	eeb0 8a40 	vmov.f32	s16, s0
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800a198:	f001 fa14 	bl	800b5c4 <sqrtf>
 800a19c:	edd4 7a04 	vldr	s15, [r4, #16]
 800a1a0:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a1a4:	edc4 7a04 	vstr	s15, [r4, #16]
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800a1a8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800a1ac:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800a2ac <tVZFilter_calcCoeffs+0x2e4>
 800a1b0:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a1b4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800a1b8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a1bc:	f001 f9d2 	bl	800b564 <sinhf>
 800a1c0:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a1c4:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800a1c8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a1cc:	61e3      	str	r3, [r4, #28]
 800a1ce:	ee67 7a88 	vmul.f32	s15, s15, s16
 800a1d2:	edc4 7a08 	vstr	s15, [r4, #32]
 800a1d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a1d8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800a1da:	e71f      	b.n	800a01c <tVZFilter_calcCoeffs+0x54>
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800a1dc:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f7ff febb 	bl	8009f5c <tVZFilter_BandwidthToR>
 800a1e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a1ea:	ed84 0a05 	vstr	s0, [r4, #20]
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800a1ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a1f2:	61e3      	str	r3, [r4, #28]
 800a1f4:	eeb1 0a40 	vneg.f32	s0, s0
 800a1f8:	ed84 0a08 	vstr	s0, [r4, #32]
 800a1fc:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800a1fe:	e70d      	b.n	800a01c <tVZFilter_calcCoeffs+0x54>
            f->R2 = f->invG;
 800a200:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a202:	6163      	str	r3, [r4, #20]
            float x  = 2.0f*f->m-1.0f;
 800a204:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
 800a208:	ee38 8a08 	vadd.f32	s16, s16, s16
 800a20c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a210:	ee38 8a68 	vsub.f32	s16, s16, s17
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800a214:	ed9f 9a26 	vldr	s18, [pc, #152]	; 800a2b0 <tVZFilter_calcCoeffs+0x2e8>
 800a218:	eef0 0a49 	vmov.f32	s1, s18
 800a21c:	eeb1 0a48 	vneg.f32	s0, s16
 800a220:	f000 f8da 	bl	800a3d8 <maximum>
 800a224:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800a228:	eef0 0a49 	vmov.f32	s1, s18
 800a22c:	eeb0 0a48 	vmov.f32	s0, s16
 800a230:	f000 f8de 	bl	800a3f0 <minimum>
 800a234:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            f->cB = 1.0f-x*x;
 800a238:	ee28 8a08 	vmul.f32	s16, s16, s16
 800a23c:	ee38 8ac8 	vsub.f32	s16, s17, s16
 800a240:	ed84 8a08 	vstr	s16, [r4, #32]
            float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800a244:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
 800a248:	edd4 7a05 	vldr	s15, [r4, #20]
 800a24c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a250:	ed94 7a07 	vldr	s14, [r4, #28]
 800a254:	ee67 7a07 	vmul.f32	s15, s14, s14
 800a258:	ee28 8a08 	vmul.f32	s16, s16, s16
 800a25c:	ee37 8a88 	vadd.f32	s16, s15, s16
 800a260:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a264:	ee38 8a27 	vadd.f32	s16, s16, s15
 800a268:	ee37 7a07 	vadd.f32	s14, s14, s14
 800a26c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a270:	ee38 0a40 	vsub.f32	s0, s16, s0
 800a274:	ee86 0a80 	vdiv.f32	s0, s13, s0
 800a278:	f001 f9a4 	bl	800b5c4 <sqrtf>
 800a27c:	ee28 0a80 	vmul.f32	s0, s17, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 800a280:	edd4 7a07 	vldr	s15, [r4, #28]
 800a284:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a288:	edc4 7a07 	vstr	s15, [r4, #28]
 800a28c:	edd4 7a08 	vldr	s15, [r4, #32]
 800a290:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a294:	edc4 7a08 	vstr	s15, [r4, #32]
 800a298:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800a29c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a2a0:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            break;
 800a2a4:	e6ba      	b.n	800a01c <tVZFilter_calcCoeffs+0x54>
 800a2a6:	bf00      	nop
 800a2a8:	40490fdb 	.word	0x40490fdb
 800a2ac:	3f317218 	.word	0x3f317218
 800a2b0:	00000000 	.word	0x00000000

0800a2b4 <tVZFilter_initToPool>:
{
 800a2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b8:	ed2d 8b02 	vpush	{d8}
 800a2bc:	4605      	mov	r5, r0
 800a2be:	460f      	mov	r7, r1
 800a2c0:	eef0 8a40 	vmov.f32	s17, s0
 800a2c4:	ee10 6a90 	vmov	r6, s1
    _tMempool* m = *mp;
 800a2c8:	f8d2 8000 	ldr.w	r8, [r2]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800a2cc:	4641      	mov	r1, r8
 800a2ce:	2044      	movs	r0, #68	; 0x44
 800a2d0:	f000 f8ba 	bl	800a448 <mpool_alloc>
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800a2d8:	f8c0 8000 	str.w	r8, [r0]
    LEAF* leaf = f->mempool->leaf;
 800a2dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    f->sampleRate = leaf->sampleRate;
 800a2e0:	edd3 7a00 	vldr	s15, [r3]
 800a2e4:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    f->invSampleRate = leaf->invSampleRate;
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	6403      	str	r3, [r0, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800a2ec:	ed9f 8a10 	vldr	s16, [pc, #64]	; 800a330 <tVZFilter_initToPool+0x7c>
 800a2f0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800a2f4:	ee27 1a81 	vmul.f32	s2, s15, s2
 800a2f8:	eef0 0a68 	vmov.f32	s1, s17
 800a2fc:	eeb0 0a48 	vmov.f32	s0, s16
 800a300:	f000 f821 	bl	800a346 <LEAF_clip>
 800a304:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->type = type;
 800a308:	7127      	strb	r7, [r4, #4]
    f->G    = ONE_OVER_SQRT2;
 800a30a:	4b0a      	ldr	r3, [pc, #40]	; (800a334 <tVZFilter_initToPool+0x80>)
 800a30c:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->invG = 1.0f/ONE_OVER_SQRT2;
 800a30e:	4b0a      	ldr	r3, [pc, #40]	; (800a338 <tVZFilter_initToPool+0x84>)
 800a310:	6323      	str	r3, [r4, #48]	; 0x30
    f->B    = bandWidth;
 800a312:	6366      	str	r6, [r4, #52]	; 0x34
    f->m    = 0.0f;
 800a314:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
    f->s1 = 0.0f;
 800a318:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2 = 0.0f;
 800a31c:	ed84 8a03 	vstr	s16, [r4, #12]
    tVZFilter_calcCoeffs(vf);
 800a320:	4628      	mov	r0, r5
 800a322:	f7ff fe51 	bl	8009fc8 <tVZFilter_calcCoeffs>
}
 800a326:	ecbd 8b02 	vpop	{d8}
 800a32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a32e:	bf00      	nop
 800a330:	00000000 	.word	0x00000000
 800a334:	3f3504f3 	.word	0x3f3504f3
 800a338:	3fb504f3 	.word	0x3fb504f3

0800a33c <tVZFilter_init>:
{
 800a33c:	b508      	push	{r3, lr}
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 800a33e:	3218      	adds	r2, #24
 800a340:	f7ff ffb8 	bl	800a2b4 <tVZFilter_initToPool>
}
 800a344:	bd08      	pop	{r3, pc}

0800a346 <LEAF_clip>:

float   LEAF_clip(float min, float val, float max)
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 800a346:	eeb4 0ac1 	vcmpe.f32	s0, s2
 800a34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34e:	dc05      	bgt.n	800a35c <LEAF_clip+0x16>
 800a350:	ee11 3a10 	vmov	r3, s2
    float tempmin = min;
 800a354:	eeb0 1a40 	vmov.f32	s2, s0
    float tempmax = max;
 800a358:	ee00 3a10 	vmov	s0, r3
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
 800a35c:	eeb4 1ae0 	vcmpe.f32	s2, s1
 800a360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a364:	dc05      	bgt.n	800a372 <LEAF_clip+0x2c>
    {
        return tempmin;
    }
    else if (val > tempmax)
 800a366:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800a36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a36e:	d503      	bpl.n	800a378 <LEAF_clip+0x32>
 800a370:	4770      	bx	lr
        return tempmin;
 800a372:	eeb0 0a41 	vmov.f32	s0, s2
 800a376:	4770      	bx	lr
    {
        return tempmax;
    }
    else
    {
        return val;
 800a378:	eeb0 0a60 	vmov.f32	s0, s1
    }
}
 800a37c:	4770      	bx	lr

0800a37e <atodb>:
    return (expf((LOGTEN * 0.05f) * (f-100.0f)));
}


float atodb(float a)
{
 800a37e:	b508      	push	{r3, lr}
    return 20.0f*log10f(a);
 800a380:	f001 f8ba 	bl	800b4f8 <log10f>
}
 800a384:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800a388:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a38c:	bd08      	pop	{r3, pc}
	...

0800a390 <LEAF_generate_atodb>:
{
 800a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a392:	ed2d 8b02 	vpush	{d8}
 800a396:	4607      	mov	r7, r0
 800a398:	460e      	mov	r6, r1
    float increment = 1.0f / (float)size;
 800a39a:	ee07 1a90 	vmov	s15, r1
 800a39e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3a6:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 800a3aa:	2400      	movs	r4, #0
    float x = 0.0f;
 800a3ac:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800a3d4 <LEAF_generate_atodb+0x44>
    for (int i = 0; i < size; i++)
 800a3b0:	42b4      	cmp	r4, r6
 800a3b2:	da0b      	bge.n	800a3cc <LEAF_generate_atodb+0x3c>
        buffer[i] = atodb(x);
 800a3b4:	eb07 0584 	add.w	r5, r7, r4, lsl #2
 800a3b8:	eeb0 0a48 	vmov.f32	s0, s16
 800a3bc:	f7ff ffdf 	bl	800a37e <atodb>
 800a3c0:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
 800a3c4:	ee38 8a28 	vadd.f32	s16, s16, s17
    for (int i = 0; i < size; i++)
 800a3c8:	3401      	adds	r4, #1
 800a3ca:	e7f1      	b.n	800a3b0 <LEAF_generate_atodb+0x20>
}
 800a3cc:	ecbd 8b02 	vpop	{d8}
 800a3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	00000000 	.word	0x00000000

0800a3d8 <maximum>:
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}


float maximum (float num1, float num2)
{
 800a3d8:	eef0 7a40 	vmov.f32	s15, s0
 800a3dc:	eeb0 0a60 	vmov.f32	s0, s1
    return (num1 > num2 ) ? num1 : num2;
 800a3e0:	eef4 7ae0 	vcmpe.f32	s15, s1
 800a3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e8:	dd01      	ble.n	800a3ee <maximum+0x16>
 800a3ea:	eeb0 0a67 	vmov.f32	s0, s15
}
 800a3ee:	4770      	bx	lr

0800a3f0 <minimum>:

float minimum (float num1, float num2)
{
 800a3f0:	eef0 7a40 	vmov.f32	s15, s0
 800a3f4:	eeb0 0a60 	vmov.f32	s0, s1
    return (num1 < num2 ) ? num1 : num2;
 800a3f8:	eef4 7ae0 	vcmpe.f32	s15, s1
 800a3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a400:	d501      	bpl.n	800a406 <minimum+0x16>
 800a402:	eeb0 0a67 	vmov.f32	s0, s15
}
 800a406:	4770      	bx	lr

0800a408 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 800a408:	b410      	push	{r4}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800a40a:	6853      	ldr	r3, [r2, #4]
 800a40c:	2410      	movs	r4, #16
 800a40e:	635c      	str	r4, [r3, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 800a410:	6090      	str	r0, [r2, #8]
    pool->usize  = 0;
 800a412:	2400      	movs	r4, #0
 800a414:	60d4      	str	r4, [r2, #12]
    pool->msize  = size;
 800a416:	6111      	str	r1, [r2, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800a418:	6853      	ldr	r3, [r2, #4]
 800a41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a41c:	1ac9      	subs	r1, r1, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 800a41e:	4403      	add	r3, r0
 800a420:	6003      	str	r3, [r0, #0]
    node->next = next;
 800a422:	6044      	str	r4, [r0, #4]
    node->prev = prev;
 800a424:	6084      	str	r4, [r0, #8]
    node->size = size;
 800a426:	60c1      	str	r1, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800a428:	6150      	str	r0, [r2, #20]
}
 800a42a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <leaf_pool_init>:
{
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	4604      	mov	r4, r0
 800a434:	4608      	mov	r0, r1
 800a436:	4611      	mov	r1, r2
    mpool_create(memory, size, &leaf->_internal_mempool);
 800a438:	f104 051c 	add.w	r5, r4, #28
 800a43c:	462a      	mov	r2, r5
 800a43e:	f7ff ffe3 	bl	800a408 <mpool_create>
    leaf->mempool = &leaf->_internal_mempool;
 800a442:	61a5      	str	r5, [r4, #24]
}
 800a444:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a448 <mpool_alloc>:
{
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	4606      	mov	r6, r0
 800a44c:	460c      	mov	r4, r1
    pool->leaf->allocCount++;
 800a44e:	684a      	ldr	r2, [r1, #4]
 800a450:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800a452:	3301      	adds	r3, #1
 800a454:	6493      	str	r3, [r2, #72]	; 0x48
    char* temp = (char*) malloc(asize);
 800a456:	f000 f921 	bl	800a69c <malloc>
    if (temp == NULL)
 800a45a:	b130      	cbz	r0, 800a46a <mpool_alloc+0x22>
 800a45c:	4605      	mov	r5, r0
    if (pool->leaf->clearOnAllocation > 0)
 800a45e:	6863      	ldr	r3, [r4, #4]
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	2b00      	cmp	r3, #0
 800a464:	dc0c      	bgt.n	800a480 <mpool_alloc+0x38>
}
 800a466:	4628      	mov	r0, r5
 800a468:	bd70      	pop	{r4, r5, r6, pc}
        fprintf(stderr, "Out of memory.\n");
 800a46a:	4b08      	ldr	r3, [pc, #32]	; (800a48c <mpool_alloc+0x44>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	220f      	movs	r2, #15
 800a472:	2101      	movs	r1, #1
 800a474:	4806      	ldr	r0, [pc, #24]	; (800a490 <mpool_alloc+0x48>)
 800a476:	f000 f8db 	bl	800a630 <fwrite>
        exit(1);
 800a47a:	2001      	movs	r0, #1
 800a47c:	f000 f864 	bl	800a548 <exit>
        memset(temp, 0, asize);
 800a480:	4632      	mov	r2, r6
 800a482:	2100      	movs	r1, #0
 800a484:	f000 f912 	bl	800a6ac <memset>
    return temp;
 800a488:	e7ed      	b.n	800a466 <mpool_alloc+0x1e>
 800a48a:	bf00      	nop
 800a48c:	20000030 	.word	0x20000030
 800a490:	0800c504 	.word	0x0800c504

0800a494 <mpool_calloc>:
{
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4604      	mov	r4, r0
    pool->leaf->allocCount++;
 800a498:	684a      	ldr	r2, [r1, #4]
 800a49a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800a49c:	3301      	adds	r3, #1
 800a49e:	6493      	str	r3, [r2, #72]	; 0x48
    char* ret = (char*) malloc(asize);
 800a4a0:	f000 f8fc 	bl	800a69c <malloc>
    if (ret == NULL)
 800a4a4:	b130      	cbz	r0, 800a4b4 <mpool_calloc+0x20>
 800a4a6:	4605      	mov	r5, r0
    memset(ret, 0, asize);
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	f000 f8fe 	bl	800a6ac <memset>
}
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
        fprintf(stderr, "Out of memory.\n");
 800a4b4:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <mpool_calloc+0x38>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	220f      	movs	r2, #15
 800a4bc:	2101      	movs	r1, #1
 800a4be:	4804      	ldr	r0, [pc, #16]	; (800a4d0 <mpool_calloc+0x3c>)
 800a4c0:	f000 f8b6 	bl	800a630 <fwrite>
        exit(1);
 800a4c4:	2001      	movs	r0, #1
 800a4c6:	f000 f83f 	bl	800a548 <exit>
 800a4ca:	bf00      	nop
 800a4cc:	20000030 	.word	0x20000030
 800a4d0:	0800c504 	.word	0x0800c504

0800a4d4 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 800a4d4:	4770      	bx	lr
	...

0800a4d8 <LEAF_init>:
{
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	ed2d 8b02 	vpush	{d8}
 800a4de:	4604      	mov	r4, r0
 800a4e0:	eeb0 8a40 	vmov.f32	s16, s0
 800a4e4:	461d      	mov	r5, r3
    leaf->_internal_mempool.leaf = leaf;
 800a4e6:	6200      	str	r0, [r0, #32]
    leaf_pool_init(leaf, memory, memorysize);
 800a4e8:	f7ff ffa2 	bl	800a430 <leaf_pool_init>
    leaf->sampleRate = sr;
 800a4ec:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 800a4f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4f4:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800a4f8:	edc4 7a01 	vstr	s15, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800a4fc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a534 <LEAF_init+0x5c>
 800a500:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a504:	edc4 7a03 	vstr	s15, [r4, #12]
    leaf->random = random;
 800a508:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 800a50a:	2300      	movs	r3, #0
 800a50c:	6163      	str	r3, [r4, #20]
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800a50e:	4a0a      	ldr	r2, [pc, #40]	; (800a538 <LEAF_init+0x60>)
 800a510:	63a2      	str	r2, [r4, #56]	; 0x38
    for (int i = 0; i < LEAFErrorNil; ++i)
 800a512:	e006      	b.n	800a522 <LEAF_init+0x4a>
        leaf->errorState[i] = 0;
 800a514:	f103 020e 	add.w	r2, r3, #14
 800a518:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a51c:	2100      	movs	r1, #0
 800a51e:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 800a520:	3301      	adds	r3, #1
 800a522:	2b02      	cmp	r3, #2
 800a524:	ddf6      	ble.n	800a514 <LEAF_init+0x3c>
    leaf->allocCount = 0;
 800a526:	2300      	movs	r3, #0
 800a528:	64a3      	str	r3, [r4, #72]	; 0x48
    leaf->freeCount = 0;
 800a52a:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800a52c:	ecbd 8b02 	vpop	{d8}
 800a530:	bd38      	pop	{r3, r4, r5, pc}
 800a532:	bf00      	nop
 800a534:	40c90fdb 	.word	0x40c90fdb
 800a538:	0800a4d5 	.word	0x0800a4d5

0800a53c <__errno>:
 800a53c:	4b01      	ldr	r3, [pc, #4]	; (800a544 <__errno+0x8>)
 800a53e:	6818      	ldr	r0, [r3, #0]
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	20000030 	.word	0x20000030

0800a548 <exit>:
 800a548:	b508      	push	{r3, lr}
 800a54a:	4b07      	ldr	r3, [pc, #28]	; (800a568 <exit+0x20>)
 800a54c:	4604      	mov	r4, r0
 800a54e:	b113      	cbz	r3, 800a556 <exit+0xe>
 800a550:	2100      	movs	r1, #0
 800a552:	f3af 8000 	nop.w
 800a556:	4b05      	ldr	r3, [pc, #20]	; (800a56c <exit+0x24>)
 800a558:	6818      	ldr	r0, [r3, #0]
 800a55a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a55c:	b103      	cbz	r3, 800a560 <exit+0x18>
 800a55e:	4798      	blx	r3
 800a560:	4620      	mov	r0, r4
 800a562:	f7ff fb39 	bl	8009bd8 <_exit>
 800a566:	bf00      	nop
 800a568:	00000000 	.word	0x00000000
 800a56c:	0800c514 	.word	0x0800c514

0800a570 <_fwrite_r>:
 800a570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a574:	9c08      	ldr	r4, [sp, #32]
 800a576:	4689      	mov	r9, r1
 800a578:	4617      	mov	r7, r2
 800a57a:	fb02 f803 	mul.w	r8, r2, r3
 800a57e:	4605      	mov	r5, r0
 800a580:	b118      	cbz	r0, 800a58a <_fwrite_r+0x1a>
 800a582:	6983      	ldr	r3, [r0, #24]
 800a584:	b90b      	cbnz	r3, 800a58a <_fwrite_r+0x1a>
 800a586:	f000 fb2d 	bl	800abe4 <__sinit>
 800a58a:	4b26      	ldr	r3, [pc, #152]	; (800a624 <_fwrite_r+0xb4>)
 800a58c:	429c      	cmp	r4, r3
 800a58e:	d123      	bne.n	800a5d8 <_fwrite_r+0x68>
 800a590:	686c      	ldr	r4, [r5, #4]
 800a592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a594:	07de      	lsls	r6, r3, #31
 800a596:	d405      	bmi.n	800a5a4 <_fwrite_r+0x34>
 800a598:	89a3      	ldrh	r3, [r4, #12]
 800a59a:	0598      	lsls	r0, r3, #22
 800a59c:	d402      	bmi.n	800a5a4 <_fwrite_r+0x34>
 800a59e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5a0:	f000 f879 	bl	800a696 <__retarget_lock_acquire_recursive>
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	0719      	lsls	r1, r3, #28
 800a5a8:	d520      	bpl.n	800a5ec <_fwrite_r+0x7c>
 800a5aa:	6923      	ldr	r3, [r4, #16]
 800a5ac:	b1f3      	cbz	r3, 800a5ec <_fwrite_r+0x7c>
 800a5ae:	2600      	movs	r6, #0
 800a5b0:	4546      	cmp	r6, r8
 800a5b2:	d029      	beq.n	800a608 <_fwrite_r+0x98>
 800a5b4:	68a0      	ldr	r0, [r4, #8]
 800a5b6:	f819 1006 	ldrb.w	r1, [r9, r6]
 800a5ba:	3801      	subs	r0, #1
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	60a0      	str	r0, [r4, #8]
 800a5c0:	da04      	bge.n	800a5cc <_fwrite_r+0x5c>
 800a5c2:	69a3      	ldr	r3, [r4, #24]
 800a5c4:	4298      	cmp	r0, r3
 800a5c6:	db19      	blt.n	800a5fc <_fwrite_r+0x8c>
 800a5c8:	290a      	cmp	r1, #10
 800a5ca:	d017      	beq.n	800a5fc <_fwrite_r+0x8c>
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	6022      	str	r2, [r4, #0]
 800a5d2:	7019      	strb	r1, [r3, #0]
 800a5d4:	3601      	adds	r6, #1
 800a5d6:	e7eb      	b.n	800a5b0 <_fwrite_r+0x40>
 800a5d8:	4b13      	ldr	r3, [pc, #76]	; (800a628 <_fwrite_r+0xb8>)
 800a5da:	429c      	cmp	r4, r3
 800a5dc:	d101      	bne.n	800a5e2 <_fwrite_r+0x72>
 800a5de:	68ac      	ldr	r4, [r5, #8]
 800a5e0:	e7d7      	b.n	800a592 <_fwrite_r+0x22>
 800a5e2:	4b12      	ldr	r3, [pc, #72]	; (800a62c <_fwrite_r+0xbc>)
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	bf08      	it	eq
 800a5e8:	68ec      	ldreq	r4, [r5, #12]
 800a5ea:	e7d2      	b.n	800a592 <_fwrite_r+0x22>
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f000 f970 	bl	800a8d4 <__swsetup_r>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d0da      	beq.n	800a5ae <_fwrite_r+0x3e>
 800a5f8:	2600      	movs	r6, #0
 800a5fa:	e005      	b.n	800a608 <_fwrite_r+0x98>
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	4628      	mov	r0, r5
 800a600:	f000 f916 	bl	800a830 <__swbuf_r>
 800a604:	3001      	adds	r0, #1
 800a606:	d1e5      	bne.n	800a5d4 <_fwrite_r+0x64>
 800a608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a60a:	07da      	lsls	r2, r3, #31
 800a60c:	d405      	bmi.n	800a61a <_fwrite_r+0xaa>
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	059b      	lsls	r3, r3, #22
 800a612:	d402      	bmi.n	800a61a <_fwrite_r+0xaa>
 800a614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a616:	f000 f83f 	bl	800a698 <__retarget_lock_release_recursive>
 800a61a:	fbb6 f0f7 	udiv	r0, r6, r7
 800a61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a622:	bf00      	nop
 800a624:	0800c538 	.word	0x0800c538
 800a628:	0800c558 	.word	0x0800c558
 800a62c:	0800c518 	.word	0x0800c518

0800a630 <fwrite>:
 800a630:	b507      	push	{r0, r1, r2, lr}
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	4613      	mov	r3, r2
 800a636:	460a      	mov	r2, r1
 800a638:	4601      	mov	r1, r0
 800a63a:	4803      	ldr	r0, [pc, #12]	; (800a648 <fwrite+0x18>)
 800a63c:	6800      	ldr	r0, [r0, #0]
 800a63e:	f7ff ff97 	bl	800a570 <_fwrite_r>
 800a642:	b003      	add	sp, #12
 800a644:	f85d fb04 	ldr.w	pc, [sp], #4
 800a648:	20000030 	.word	0x20000030

0800a64c <__libc_init_array>:
 800a64c:	b570      	push	{r4, r5, r6, lr}
 800a64e:	4d0d      	ldr	r5, [pc, #52]	; (800a684 <__libc_init_array+0x38>)
 800a650:	4c0d      	ldr	r4, [pc, #52]	; (800a688 <__libc_init_array+0x3c>)
 800a652:	1b64      	subs	r4, r4, r5
 800a654:	10a4      	asrs	r4, r4, #2
 800a656:	2600      	movs	r6, #0
 800a658:	42a6      	cmp	r6, r4
 800a65a:	d109      	bne.n	800a670 <__libc_init_array+0x24>
 800a65c:	4d0b      	ldr	r5, [pc, #44]	; (800a68c <__libc_init_array+0x40>)
 800a65e:	4c0c      	ldr	r4, [pc, #48]	; (800a690 <__libc_init_array+0x44>)
 800a660:	f001 ff2c 	bl	800c4bc <_init>
 800a664:	1b64      	subs	r4, r4, r5
 800a666:	10a4      	asrs	r4, r4, #2
 800a668:	2600      	movs	r6, #0
 800a66a:	42a6      	cmp	r6, r4
 800a66c:	d105      	bne.n	800a67a <__libc_init_array+0x2e>
 800a66e:	bd70      	pop	{r4, r5, r6, pc}
 800a670:	f855 3b04 	ldr.w	r3, [r5], #4
 800a674:	4798      	blx	r3
 800a676:	3601      	adds	r6, #1
 800a678:	e7ee      	b.n	800a658 <__libc_init_array+0xc>
 800a67a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a67e:	4798      	blx	r3
 800a680:	3601      	adds	r6, #1
 800a682:	e7f2      	b.n	800a66a <__libc_init_array+0x1e>
 800a684:	0800ccdc 	.word	0x0800ccdc
 800a688:	0800ccdc 	.word	0x0800ccdc
 800a68c:	0800ccdc 	.word	0x0800ccdc
 800a690:	0800cce0 	.word	0x0800cce0

0800a694 <__retarget_lock_init_recursive>:
 800a694:	4770      	bx	lr

0800a696 <__retarget_lock_acquire_recursive>:
 800a696:	4770      	bx	lr

0800a698 <__retarget_lock_release_recursive>:
 800a698:	4770      	bx	lr
	...

0800a69c <malloc>:
 800a69c:	4b02      	ldr	r3, [pc, #8]	; (800a6a8 <malloc+0xc>)
 800a69e:	4601      	mov	r1, r0
 800a6a0:	6818      	ldr	r0, [r3, #0]
 800a6a2:	f000 b85b 	b.w	800a75c <_malloc_r>
 800a6a6:	bf00      	nop
 800a6a8:	20000030 	.word	0x20000030

0800a6ac <memset>:
 800a6ac:	4402      	add	r2, r0
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d100      	bne.n	800a6b6 <memset+0xa>
 800a6b4:	4770      	bx	lr
 800a6b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a6ba:	e7f9      	b.n	800a6b0 <memset+0x4>

0800a6bc <_free_r>:
 800a6bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6be:	2900      	cmp	r1, #0
 800a6c0:	d048      	beq.n	800a754 <_free_r+0x98>
 800a6c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6c6:	9001      	str	r0, [sp, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f1a1 0404 	sub.w	r4, r1, #4
 800a6ce:	bfb8      	it	lt
 800a6d0:	18e4      	addlt	r4, r4, r3
 800a6d2:	f000 fb89 	bl	800ade8 <__malloc_lock>
 800a6d6:	4a20      	ldr	r2, [pc, #128]	; (800a758 <_free_r+0x9c>)
 800a6d8:	9801      	ldr	r0, [sp, #4]
 800a6da:	6813      	ldr	r3, [r2, #0]
 800a6dc:	4615      	mov	r5, r2
 800a6de:	b933      	cbnz	r3, 800a6ee <_free_r+0x32>
 800a6e0:	6063      	str	r3, [r4, #4]
 800a6e2:	6014      	str	r4, [r2, #0]
 800a6e4:	b003      	add	sp, #12
 800a6e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6ea:	f000 bb83 	b.w	800adf4 <__malloc_unlock>
 800a6ee:	42a3      	cmp	r3, r4
 800a6f0:	d90b      	bls.n	800a70a <_free_r+0x4e>
 800a6f2:	6821      	ldr	r1, [r4, #0]
 800a6f4:	1862      	adds	r2, r4, r1
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	bf04      	itt	eq
 800a6fa:	681a      	ldreq	r2, [r3, #0]
 800a6fc:	685b      	ldreq	r3, [r3, #4]
 800a6fe:	6063      	str	r3, [r4, #4]
 800a700:	bf04      	itt	eq
 800a702:	1852      	addeq	r2, r2, r1
 800a704:	6022      	streq	r2, [r4, #0]
 800a706:	602c      	str	r4, [r5, #0]
 800a708:	e7ec      	b.n	800a6e4 <_free_r+0x28>
 800a70a:	461a      	mov	r2, r3
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	b10b      	cbz	r3, 800a714 <_free_r+0x58>
 800a710:	42a3      	cmp	r3, r4
 800a712:	d9fa      	bls.n	800a70a <_free_r+0x4e>
 800a714:	6811      	ldr	r1, [r2, #0]
 800a716:	1855      	adds	r5, r2, r1
 800a718:	42a5      	cmp	r5, r4
 800a71a:	d10b      	bne.n	800a734 <_free_r+0x78>
 800a71c:	6824      	ldr	r4, [r4, #0]
 800a71e:	4421      	add	r1, r4
 800a720:	1854      	adds	r4, r2, r1
 800a722:	42a3      	cmp	r3, r4
 800a724:	6011      	str	r1, [r2, #0]
 800a726:	d1dd      	bne.n	800a6e4 <_free_r+0x28>
 800a728:	681c      	ldr	r4, [r3, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	6053      	str	r3, [r2, #4]
 800a72e:	4421      	add	r1, r4
 800a730:	6011      	str	r1, [r2, #0]
 800a732:	e7d7      	b.n	800a6e4 <_free_r+0x28>
 800a734:	d902      	bls.n	800a73c <_free_r+0x80>
 800a736:	230c      	movs	r3, #12
 800a738:	6003      	str	r3, [r0, #0]
 800a73a:	e7d3      	b.n	800a6e4 <_free_r+0x28>
 800a73c:	6825      	ldr	r5, [r4, #0]
 800a73e:	1961      	adds	r1, r4, r5
 800a740:	428b      	cmp	r3, r1
 800a742:	bf04      	itt	eq
 800a744:	6819      	ldreq	r1, [r3, #0]
 800a746:	685b      	ldreq	r3, [r3, #4]
 800a748:	6063      	str	r3, [r4, #4]
 800a74a:	bf04      	itt	eq
 800a74c:	1949      	addeq	r1, r1, r5
 800a74e:	6021      	streq	r1, [r4, #0]
 800a750:	6054      	str	r4, [r2, #4]
 800a752:	e7c7      	b.n	800a6e4 <_free_r+0x28>
 800a754:	b003      	add	sp, #12
 800a756:	bd30      	pop	{r4, r5, pc}
 800a758:	2000012c 	.word	0x2000012c

0800a75c <_malloc_r>:
 800a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75e:	1ccd      	adds	r5, r1, #3
 800a760:	f025 0503 	bic.w	r5, r5, #3
 800a764:	3508      	adds	r5, #8
 800a766:	2d0c      	cmp	r5, #12
 800a768:	bf38      	it	cc
 800a76a:	250c      	movcc	r5, #12
 800a76c:	2d00      	cmp	r5, #0
 800a76e:	4606      	mov	r6, r0
 800a770:	db01      	blt.n	800a776 <_malloc_r+0x1a>
 800a772:	42a9      	cmp	r1, r5
 800a774:	d903      	bls.n	800a77e <_malloc_r+0x22>
 800a776:	230c      	movs	r3, #12
 800a778:	6033      	str	r3, [r6, #0]
 800a77a:	2000      	movs	r0, #0
 800a77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a77e:	f000 fb33 	bl	800ade8 <__malloc_lock>
 800a782:	4921      	ldr	r1, [pc, #132]	; (800a808 <_malloc_r+0xac>)
 800a784:	680a      	ldr	r2, [r1, #0]
 800a786:	4614      	mov	r4, r2
 800a788:	b99c      	cbnz	r4, 800a7b2 <_malloc_r+0x56>
 800a78a:	4f20      	ldr	r7, [pc, #128]	; (800a80c <_malloc_r+0xb0>)
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	b923      	cbnz	r3, 800a79a <_malloc_r+0x3e>
 800a790:	4621      	mov	r1, r4
 800a792:	4630      	mov	r0, r6
 800a794:	f000 f83c 	bl	800a810 <_sbrk_r>
 800a798:	6038      	str	r0, [r7, #0]
 800a79a:	4629      	mov	r1, r5
 800a79c:	4630      	mov	r0, r6
 800a79e:	f000 f837 	bl	800a810 <_sbrk_r>
 800a7a2:	1c43      	adds	r3, r0, #1
 800a7a4:	d123      	bne.n	800a7ee <_malloc_r+0x92>
 800a7a6:	230c      	movs	r3, #12
 800a7a8:	6033      	str	r3, [r6, #0]
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f000 fb22 	bl	800adf4 <__malloc_unlock>
 800a7b0:	e7e3      	b.n	800a77a <_malloc_r+0x1e>
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	1b5b      	subs	r3, r3, r5
 800a7b6:	d417      	bmi.n	800a7e8 <_malloc_r+0x8c>
 800a7b8:	2b0b      	cmp	r3, #11
 800a7ba:	d903      	bls.n	800a7c4 <_malloc_r+0x68>
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	441c      	add	r4, r3
 800a7c0:	6025      	str	r5, [r4, #0]
 800a7c2:	e004      	b.n	800a7ce <_malloc_r+0x72>
 800a7c4:	6863      	ldr	r3, [r4, #4]
 800a7c6:	42a2      	cmp	r2, r4
 800a7c8:	bf0c      	ite	eq
 800a7ca:	600b      	streq	r3, [r1, #0]
 800a7cc:	6053      	strne	r3, [r2, #4]
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	f000 fb10 	bl	800adf4 <__malloc_unlock>
 800a7d4:	f104 000b 	add.w	r0, r4, #11
 800a7d8:	1d23      	adds	r3, r4, #4
 800a7da:	f020 0007 	bic.w	r0, r0, #7
 800a7de:	1ac2      	subs	r2, r0, r3
 800a7e0:	d0cc      	beq.n	800a77c <_malloc_r+0x20>
 800a7e2:	1a1b      	subs	r3, r3, r0
 800a7e4:	50a3      	str	r3, [r4, r2]
 800a7e6:	e7c9      	b.n	800a77c <_malloc_r+0x20>
 800a7e8:	4622      	mov	r2, r4
 800a7ea:	6864      	ldr	r4, [r4, #4]
 800a7ec:	e7cc      	b.n	800a788 <_malloc_r+0x2c>
 800a7ee:	1cc4      	adds	r4, r0, #3
 800a7f0:	f024 0403 	bic.w	r4, r4, #3
 800a7f4:	42a0      	cmp	r0, r4
 800a7f6:	d0e3      	beq.n	800a7c0 <_malloc_r+0x64>
 800a7f8:	1a21      	subs	r1, r4, r0
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	f000 f808 	bl	800a810 <_sbrk_r>
 800a800:	3001      	adds	r0, #1
 800a802:	d1dd      	bne.n	800a7c0 <_malloc_r+0x64>
 800a804:	e7cf      	b.n	800a7a6 <_malloc_r+0x4a>
 800a806:	bf00      	nop
 800a808:	2000012c 	.word	0x2000012c
 800a80c:	20000130 	.word	0x20000130

0800a810 <_sbrk_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4d06      	ldr	r5, [pc, #24]	; (800a82c <_sbrk_r+0x1c>)
 800a814:	2300      	movs	r3, #0
 800a816:	4604      	mov	r4, r0
 800a818:	4608      	mov	r0, r1
 800a81a:	602b      	str	r3, [r5, #0]
 800a81c:	f7ff fa0c 	bl	8009c38 <_sbrk>
 800a820:	1c43      	adds	r3, r0, #1
 800a822:	d102      	bne.n	800a82a <_sbrk_r+0x1a>
 800a824:	682b      	ldr	r3, [r5, #0]
 800a826:	b103      	cbz	r3, 800a82a <_sbrk_r+0x1a>
 800a828:	6023      	str	r3, [r4, #0]
 800a82a:	bd38      	pop	{r3, r4, r5, pc}
 800a82c:	20019b5c 	.word	0x20019b5c

0800a830 <__swbuf_r>:
 800a830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a832:	460e      	mov	r6, r1
 800a834:	4614      	mov	r4, r2
 800a836:	4605      	mov	r5, r0
 800a838:	b118      	cbz	r0, 800a842 <__swbuf_r+0x12>
 800a83a:	6983      	ldr	r3, [r0, #24]
 800a83c:	b90b      	cbnz	r3, 800a842 <__swbuf_r+0x12>
 800a83e:	f000 f9d1 	bl	800abe4 <__sinit>
 800a842:	4b21      	ldr	r3, [pc, #132]	; (800a8c8 <__swbuf_r+0x98>)
 800a844:	429c      	cmp	r4, r3
 800a846:	d12b      	bne.n	800a8a0 <__swbuf_r+0x70>
 800a848:	686c      	ldr	r4, [r5, #4]
 800a84a:	69a3      	ldr	r3, [r4, #24]
 800a84c:	60a3      	str	r3, [r4, #8]
 800a84e:	89a3      	ldrh	r3, [r4, #12]
 800a850:	071a      	lsls	r2, r3, #28
 800a852:	d52f      	bpl.n	800a8b4 <__swbuf_r+0x84>
 800a854:	6923      	ldr	r3, [r4, #16]
 800a856:	b36b      	cbz	r3, 800a8b4 <__swbuf_r+0x84>
 800a858:	6923      	ldr	r3, [r4, #16]
 800a85a:	6820      	ldr	r0, [r4, #0]
 800a85c:	1ac0      	subs	r0, r0, r3
 800a85e:	6963      	ldr	r3, [r4, #20]
 800a860:	b2f6      	uxtb	r6, r6
 800a862:	4283      	cmp	r3, r0
 800a864:	4637      	mov	r7, r6
 800a866:	dc04      	bgt.n	800a872 <__swbuf_r+0x42>
 800a868:	4621      	mov	r1, r4
 800a86a:	4628      	mov	r0, r5
 800a86c:	f000 f926 	bl	800aabc <_fflush_r>
 800a870:	bb30      	cbnz	r0, 800a8c0 <__swbuf_r+0x90>
 800a872:	68a3      	ldr	r3, [r4, #8]
 800a874:	3b01      	subs	r3, #1
 800a876:	60a3      	str	r3, [r4, #8]
 800a878:	6823      	ldr	r3, [r4, #0]
 800a87a:	1c5a      	adds	r2, r3, #1
 800a87c:	6022      	str	r2, [r4, #0]
 800a87e:	701e      	strb	r6, [r3, #0]
 800a880:	6963      	ldr	r3, [r4, #20]
 800a882:	3001      	adds	r0, #1
 800a884:	4283      	cmp	r3, r0
 800a886:	d004      	beq.n	800a892 <__swbuf_r+0x62>
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	07db      	lsls	r3, r3, #31
 800a88c:	d506      	bpl.n	800a89c <__swbuf_r+0x6c>
 800a88e:	2e0a      	cmp	r6, #10
 800a890:	d104      	bne.n	800a89c <__swbuf_r+0x6c>
 800a892:	4621      	mov	r1, r4
 800a894:	4628      	mov	r0, r5
 800a896:	f000 f911 	bl	800aabc <_fflush_r>
 800a89a:	b988      	cbnz	r0, 800a8c0 <__swbuf_r+0x90>
 800a89c:	4638      	mov	r0, r7
 800a89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8a0:	4b0a      	ldr	r3, [pc, #40]	; (800a8cc <__swbuf_r+0x9c>)
 800a8a2:	429c      	cmp	r4, r3
 800a8a4:	d101      	bne.n	800a8aa <__swbuf_r+0x7a>
 800a8a6:	68ac      	ldr	r4, [r5, #8]
 800a8a8:	e7cf      	b.n	800a84a <__swbuf_r+0x1a>
 800a8aa:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <__swbuf_r+0xa0>)
 800a8ac:	429c      	cmp	r4, r3
 800a8ae:	bf08      	it	eq
 800a8b0:	68ec      	ldreq	r4, [r5, #12]
 800a8b2:	e7ca      	b.n	800a84a <__swbuf_r+0x1a>
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f000 f80c 	bl	800a8d4 <__swsetup_r>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d0cb      	beq.n	800a858 <__swbuf_r+0x28>
 800a8c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a8c4:	e7ea      	b.n	800a89c <__swbuf_r+0x6c>
 800a8c6:	bf00      	nop
 800a8c8:	0800c538 	.word	0x0800c538
 800a8cc:	0800c558 	.word	0x0800c558
 800a8d0:	0800c518 	.word	0x0800c518

0800a8d4 <__swsetup_r>:
 800a8d4:	4b32      	ldr	r3, [pc, #200]	; (800a9a0 <__swsetup_r+0xcc>)
 800a8d6:	b570      	push	{r4, r5, r6, lr}
 800a8d8:	681d      	ldr	r5, [r3, #0]
 800a8da:	4606      	mov	r6, r0
 800a8dc:	460c      	mov	r4, r1
 800a8de:	b125      	cbz	r5, 800a8ea <__swsetup_r+0x16>
 800a8e0:	69ab      	ldr	r3, [r5, #24]
 800a8e2:	b913      	cbnz	r3, 800a8ea <__swsetup_r+0x16>
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	f000 f97d 	bl	800abe4 <__sinit>
 800a8ea:	4b2e      	ldr	r3, [pc, #184]	; (800a9a4 <__swsetup_r+0xd0>)
 800a8ec:	429c      	cmp	r4, r3
 800a8ee:	d10f      	bne.n	800a910 <__swsetup_r+0x3c>
 800a8f0:	686c      	ldr	r4, [r5, #4]
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8f8:	0719      	lsls	r1, r3, #28
 800a8fa:	d42c      	bmi.n	800a956 <__swsetup_r+0x82>
 800a8fc:	06dd      	lsls	r5, r3, #27
 800a8fe:	d411      	bmi.n	800a924 <__swsetup_r+0x50>
 800a900:	2309      	movs	r3, #9
 800a902:	6033      	str	r3, [r6, #0]
 800a904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a908:	81a3      	strh	r3, [r4, #12]
 800a90a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a90e:	e03e      	b.n	800a98e <__swsetup_r+0xba>
 800a910:	4b25      	ldr	r3, [pc, #148]	; (800a9a8 <__swsetup_r+0xd4>)
 800a912:	429c      	cmp	r4, r3
 800a914:	d101      	bne.n	800a91a <__swsetup_r+0x46>
 800a916:	68ac      	ldr	r4, [r5, #8]
 800a918:	e7eb      	b.n	800a8f2 <__swsetup_r+0x1e>
 800a91a:	4b24      	ldr	r3, [pc, #144]	; (800a9ac <__swsetup_r+0xd8>)
 800a91c:	429c      	cmp	r4, r3
 800a91e:	bf08      	it	eq
 800a920:	68ec      	ldreq	r4, [r5, #12]
 800a922:	e7e6      	b.n	800a8f2 <__swsetup_r+0x1e>
 800a924:	0758      	lsls	r0, r3, #29
 800a926:	d512      	bpl.n	800a94e <__swsetup_r+0x7a>
 800a928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a92a:	b141      	cbz	r1, 800a93e <__swsetup_r+0x6a>
 800a92c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a930:	4299      	cmp	r1, r3
 800a932:	d002      	beq.n	800a93a <__swsetup_r+0x66>
 800a934:	4630      	mov	r0, r6
 800a936:	f7ff fec1 	bl	800a6bc <_free_r>
 800a93a:	2300      	movs	r3, #0
 800a93c:	6363      	str	r3, [r4, #52]	; 0x34
 800a93e:	89a3      	ldrh	r3, [r4, #12]
 800a940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a944:	81a3      	strh	r3, [r4, #12]
 800a946:	2300      	movs	r3, #0
 800a948:	6063      	str	r3, [r4, #4]
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f043 0308 	orr.w	r3, r3, #8
 800a954:	81a3      	strh	r3, [r4, #12]
 800a956:	6923      	ldr	r3, [r4, #16]
 800a958:	b94b      	cbnz	r3, 800a96e <__swsetup_r+0x9a>
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a964:	d003      	beq.n	800a96e <__swsetup_r+0x9a>
 800a966:	4621      	mov	r1, r4
 800a968:	4630      	mov	r0, r6
 800a96a:	f000 f9fd 	bl	800ad68 <__smakebuf_r>
 800a96e:	89a0      	ldrh	r0, [r4, #12]
 800a970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a974:	f010 0301 	ands.w	r3, r0, #1
 800a978:	d00a      	beq.n	800a990 <__swsetup_r+0xbc>
 800a97a:	2300      	movs	r3, #0
 800a97c:	60a3      	str	r3, [r4, #8]
 800a97e:	6963      	ldr	r3, [r4, #20]
 800a980:	425b      	negs	r3, r3
 800a982:	61a3      	str	r3, [r4, #24]
 800a984:	6923      	ldr	r3, [r4, #16]
 800a986:	b943      	cbnz	r3, 800a99a <__swsetup_r+0xc6>
 800a988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a98c:	d1ba      	bne.n	800a904 <__swsetup_r+0x30>
 800a98e:	bd70      	pop	{r4, r5, r6, pc}
 800a990:	0781      	lsls	r1, r0, #30
 800a992:	bf58      	it	pl
 800a994:	6963      	ldrpl	r3, [r4, #20]
 800a996:	60a3      	str	r3, [r4, #8]
 800a998:	e7f4      	b.n	800a984 <__swsetup_r+0xb0>
 800a99a:	2000      	movs	r0, #0
 800a99c:	e7f7      	b.n	800a98e <__swsetup_r+0xba>
 800a99e:	bf00      	nop
 800a9a0:	20000030 	.word	0x20000030
 800a9a4:	0800c538 	.word	0x0800c538
 800a9a8:	0800c558 	.word	0x0800c558
 800a9ac:	0800c518 	.word	0x0800c518

0800a9b0 <__sflush_r>:
 800a9b0:	898a      	ldrh	r2, [r1, #12]
 800a9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	0710      	lsls	r0, r2, #28
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	d458      	bmi.n	800aa70 <__sflush_r+0xc0>
 800a9be:	684b      	ldr	r3, [r1, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dc05      	bgt.n	800a9d0 <__sflush_r+0x20>
 800a9c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	dc02      	bgt.n	800a9d0 <__sflush_r+0x20>
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9d2:	2e00      	cmp	r6, #0
 800a9d4:	d0f9      	beq.n	800a9ca <__sflush_r+0x1a>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9dc:	682f      	ldr	r7, [r5, #0]
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	d032      	beq.n	800aa48 <__sflush_r+0x98>
 800a9e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	075a      	lsls	r2, r3, #29
 800a9e8:	d505      	bpl.n	800a9f6 <__sflush_r+0x46>
 800a9ea:	6863      	ldr	r3, [r4, #4]
 800a9ec:	1ac0      	subs	r0, r0, r3
 800a9ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9f0:	b10b      	cbz	r3, 800a9f6 <__sflush_r+0x46>
 800a9f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9f4:	1ac0      	subs	r0, r0, r3
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9fc:	6a21      	ldr	r1, [r4, #32]
 800a9fe:	4628      	mov	r0, r5
 800aa00:	47b0      	blx	r6
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	d106      	bne.n	800aa16 <__sflush_r+0x66>
 800aa08:	6829      	ldr	r1, [r5, #0]
 800aa0a:	291d      	cmp	r1, #29
 800aa0c:	d82c      	bhi.n	800aa68 <__sflush_r+0xb8>
 800aa0e:	4a2a      	ldr	r2, [pc, #168]	; (800aab8 <__sflush_r+0x108>)
 800aa10:	40ca      	lsrs	r2, r1
 800aa12:	07d6      	lsls	r6, r2, #31
 800aa14:	d528      	bpl.n	800aa68 <__sflush_r+0xb8>
 800aa16:	2200      	movs	r2, #0
 800aa18:	6062      	str	r2, [r4, #4]
 800aa1a:	04d9      	lsls	r1, r3, #19
 800aa1c:	6922      	ldr	r2, [r4, #16]
 800aa1e:	6022      	str	r2, [r4, #0]
 800aa20:	d504      	bpl.n	800aa2c <__sflush_r+0x7c>
 800aa22:	1c42      	adds	r2, r0, #1
 800aa24:	d101      	bne.n	800aa2a <__sflush_r+0x7a>
 800aa26:	682b      	ldr	r3, [r5, #0]
 800aa28:	b903      	cbnz	r3, 800aa2c <__sflush_r+0x7c>
 800aa2a:	6560      	str	r0, [r4, #84]	; 0x54
 800aa2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa2e:	602f      	str	r7, [r5, #0]
 800aa30:	2900      	cmp	r1, #0
 800aa32:	d0ca      	beq.n	800a9ca <__sflush_r+0x1a>
 800aa34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa38:	4299      	cmp	r1, r3
 800aa3a:	d002      	beq.n	800aa42 <__sflush_r+0x92>
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	f7ff fe3d 	bl	800a6bc <_free_r>
 800aa42:	2000      	movs	r0, #0
 800aa44:	6360      	str	r0, [r4, #52]	; 0x34
 800aa46:	e7c1      	b.n	800a9cc <__sflush_r+0x1c>
 800aa48:	6a21      	ldr	r1, [r4, #32]
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b0      	blx	r6
 800aa50:	1c41      	adds	r1, r0, #1
 800aa52:	d1c7      	bne.n	800a9e4 <__sflush_r+0x34>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0c4      	beq.n	800a9e4 <__sflush_r+0x34>
 800aa5a:	2b1d      	cmp	r3, #29
 800aa5c:	d001      	beq.n	800aa62 <__sflush_r+0xb2>
 800aa5e:	2b16      	cmp	r3, #22
 800aa60:	d101      	bne.n	800aa66 <__sflush_r+0xb6>
 800aa62:	602f      	str	r7, [r5, #0]
 800aa64:	e7b1      	b.n	800a9ca <__sflush_r+0x1a>
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa6c:	81a3      	strh	r3, [r4, #12]
 800aa6e:	e7ad      	b.n	800a9cc <__sflush_r+0x1c>
 800aa70:	690f      	ldr	r7, [r1, #16]
 800aa72:	2f00      	cmp	r7, #0
 800aa74:	d0a9      	beq.n	800a9ca <__sflush_r+0x1a>
 800aa76:	0793      	lsls	r3, r2, #30
 800aa78:	680e      	ldr	r6, [r1, #0]
 800aa7a:	bf08      	it	eq
 800aa7c:	694b      	ldreq	r3, [r1, #20]
 800aa7e:	600f      	str	r7, [r1, #0]
 800aa80:	bf18      	it	ne
 800aa82:	2300      	movne	r3, #0
 800aa84:	eba6 0807 	sub.w	r8, r6, r7
 800aa88:	608b      	str	r3, [r1, #8]
 800aa8a:	f1b8 0f00 	cmp.w	r8, #0
 800aa8e:	dd9c      	ble.n	800a9ca <__sflush_r+0x1a>
 800aa90:	6a21      	ldr	r1, [r4, #32]
 800aa92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa94:	4643      	mov	r3, r8
 800aa96:	463a      	mov	r2, r7
 800aa98:	4628      	mov	r0, r5
 800aa9a:	47b0      	blx	r6
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	dc06      	bgt.n	800aaae <__sflush_r+0xfe>
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa6:	81a3      	strh	r3, [r4, #12]
 800aaa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaac:	e78e      	b.n	800a9cc <__sflush_r+0x1c>
 800aaae:	4407      	add	r7, r0
 800aab0:	eba8 0800 	sub.w	r8, r8, r0
 800aab4:	e7e9      	b.n	800aa8a <__sflush_r+0xda>
 800aab6:	bf00      	nop
 800aab8:	20400001 	.word	0x20400001

0800aabc <_fflush_r>:
 800aabc:	b538      	push	{r3, r4, r5, lr}
 800aabe:	690b      	ldr	r3, [r1, #16]
 800aac0:	4605      	mov	r5, r0
 800aac2:	460c      	mov	r4, r1
 800aac4:	b913      	cbnz	r3, 800aacc <_fflush_r+0x10>
 800aac6:	2500      	movs	r5, #0
 800aac8:	4628      	mov	r0, r5
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	b118      	cbz	r0, 800aad6 <_fflush_r+0x1a>
 800aace:	6983      	ldr	r3, [r0, #24]
 800aad0:	b90b      	cbnz	r3, 800aad6 <_fflush_r+0x1a>
 800aad2:	f000 f887 	bl	800abe4 <__sinit>
 800aad6:	4b14      	ldr	r3, [pc, #80]	; (800ab28 <_fflush_r+0x6c>)
 800aad8:	429c      	cmp	r4, r3
 800aada:	d11b      	bne.n	800ab14 <_fflush_r+0x58>
 800aadc:	686c      	ldr	r4, [r5, #4]
 800aade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0ef      	beq.n	800aac6 <_fflush_r+0xa>
 800aae6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aae8:	07d0      	lsls	r0, r2, #31
 800aaea:	d404      	bmi.n	800aaf6 <_fflush_r+0x3a>
 800aaec:	0599      	lsls	r1, r3, #22
 800aaee:	d402      	bmi.n	800aaf6 <_fflush_r+0x3a>
 800aaf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaf2:	f7ff fdd0 	bl	800a696 <__retarget_lock_acquire_recursive>
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	4621      	mov	r1, r4
 800aafa:	f7ff ff59 	bl	800a9b0 <__sflush_r>
 800aafe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab00:	07da      	lsls	r2, r3, #31
 800ab02:	4605      	mov	r5, r0
 800ab04:	d4e0      	bmi.n	800aac8 <_fflush_r+0xc>
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	059b      	lsls	r3, r3, #22
 800ab0a:	d4dd      	bmi.n	800aac8 <_fflush_r+0xc>
 800ab0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab0e:	f7ff fdc3 	bl	800a698 <__retarget_lock_release_recursive>
 800ab12:	e7d9      	b.n	800aac8 <_fflush_r+0xc>
 800ab14:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <_fflush_r+0x70>)
 800ab16:	429c      	cmp	r4, r3
 800ab18:	d101      	bne.n	800ab1e <_fflush_r+0x62>
 800ab1a:	68ac      	ldr	r4, [r5, #8]
 800ab1c:	e7df      	b.n	800aade <_fflush_r+0x22>
 800ab1e:	4b04      	ldr	r3, [pc, #16]	; (800ab30 <_fflush_r+0x74>)
 800ab20:	429c      	cmp	r4, r3
 800ab22:	bf08      	it	eq
 800ab24:	68ec      	ldreq	r4, [r5, #12]
 800ab26:	e7da      	b.n	800aade <_fflush_r+0x22>
 800ab28:	0800c538 	.word	0x0800c538
 800ab2c:	0800c558 	.word	0x0800c558
 800ab30:	0800c518 	.word	0x0800c518

0800ab34 <std>:
 800ab34:	2300      	movs	r3, #0
 800ab36:	b510      	push	{r4, lr}
 800ab38:	4604      	mov	r4, r0
 800ab3a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab42:	6083      	str	r3, [r0, #8]
 800ab44:	8181      	strh	r1, [r0, #12]
 800ab46:	6643      	str	r3, [r0, #100]	; 0x64
 800ab48:	81c2      	strh	r2, [r0, #14]
 800ab4a:	6183      	str	r3, [r0, #24]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	2208      	movs	r2, #8
 800ab50:	305c      	adds	r0, #92	; 0x5c
 800ab52:	f7ff fdab 	bl	800a6ac <memset>
 800ab56:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <std+0x38>)
 800ab58:	6263      	str	r3, [r4, #36]	; 0x24
 800ab5a:	4b05      	ldr	r3, [pc, #20]	; (800ab70 <std+0x3c>)
 800ab5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab5e:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <std+0x40>)
 800ab60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab62:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <std+0x44>)
 800ab64:	6224      	str	r4, [r4, #32]
 800ab66:	6323      	str	r3, [r4, #48]	; 0x30
 800ab68:	bd10      	pop	{r4, pc}
 800ab6a:	bf00      	nop
 800ab6c:	0800ae01 	.word	0x0800ae01
 800ab70:	0800ae23 	.word	0x0800ae23
 800ab74:	0800ae5b 	.word	0x0800ae5b
 800ab78:	0800ae7f 	.word	0x0800ae7f

0800ab7c <_cleanup_r>:
 800ab7c:	4901      	ldr	r1, [pc, #4]	; (800ab84 <_cleanup_r+0x8>)
 800ab7e:	f000 b8af 	b.w	800ace0 <_fwalk_reent>
 800ab82:	bf00      	nop
 800ab84:	0800aabd 	.word	0x0800aabd

0800ab88 <__sfmoreglue>:
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	1e4a      	subs	r2, r1, #1
 800ab8c:	2568      	movs	r5, #104	; 0x68
 800ab8e:	4355      	muls	r5, r2
 800ab90:	460e      	mov	r6, r1
 800ab92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab96:	f7ff fde1 	bl	800a75c <_malloc_r>
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	b140      	cbz	r0, 800abb0 <__sfmoreglue+0x28>
 800ab9e:	2100      	movs	r1, #0
 800aba0:	e9c0 1600 	strd	r1, r6, [r0]
 800aba4:	300c      	adds	r0, #12
 800aba6:	60a0      	str	r0, [r4, #8]
 800aba8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abac:	f7ff fd7e 	bl	800a6ac <memset>
 800abb0:	4620      	mov	r0, r4
 800abb2:	bd70      	pop	{r4, r5, r6, pc}

0800abb4 <__sfp_lock_acquire>:
 800abb4:	4801      	ldr	r0, [pc, #4]	; (800abbc <__sfp_lock_acquire+0x8>)
 800abb6:	f7ff bd6e 	b.w	800a696 <__retarget_lock_acquire_recursive>
 800abba:	bf00      	nop
 800abbc:	20019b58 	.word	0x20019b58

0800abc0 <__sfp_lock_release>:
 800abc0:	4801      	ldr	r0, [pc, #4]	; (800abc8 <__sfp_lock_release+0x8>)
 800abc2:	f7ff bd69 	b.w	800a698 <__retarget_lock_release_recursive>
 800abc6:	bf00      	nop
 800abc8:	20019b58 	.word	0x20019b58

0800abcc <__sinit_lock_acquire>:
 800abcc:	4801      	ldr	r0, [pc, #4]	; (800abd4 <__sinit_lock_acquire+0x8>)
 800abce:	f7ff bd62 	b.w	800a696 <__retarget_lock_acquire_recursive>
 800abd2:	bf00      	nop
 800abd4:	20019b53 	.word	0x20019b53

0800abd8 <__sinit_lock_release>:
 800abd8:	4801      	ldr	r0, [pc, #4]	; (800abe0 <__sinit_lock_release+0x8>)
 800abda:	f7ff bd5d 	b.w	800a698 <__retarget_lock_release_recursive>
 800abde:	bf00      	nop
 800abe0:	20019b53 	.word	0x20019b53

0800abe4 <__sinit>:
 800abe4:	b510      	push	{r4, lr}
 800abe6:	4604      	mov	r4, r0
 800abe8:	f7ff fff0 	bl	800abcc <__sinit_lock_acquire>
 800abec:	69a3      	ldr	r3, [r4, #24]
 800abee:	b11b      	cbz	r3, 800abf8 <__sinit+0x14>
 800abf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf4:	f7ff bff0 	b.w	800abd8 <__sinit_lock_release>
 800abf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800abfc:	6523      	str	r3, [r4, #80]	; 0x50
 800abfe:	4b13      	ldr	r3, [pc, #76]	; (800ac4c <__sinit+0x68>)
 800ac00:	4a13      	ldr	r2, [pc, #76]	; (800ac50 <__sinit+0x6c>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac06:	42a3      	cmp	r3, r4
 800ac08:	bf04      	itt	eq
 800ac0a:	2301      	moveq	r3, #1
 800ac0c:	61a3      	streq	r3, [r4, #24]
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f000 f820 	bl	800ac54 <__sfp>
 800ac14:	6060      	str	r0, [r4, #4]
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 f81c 	bl	800ac54 <__sfp>
 800ac1c:	60a0      	str	r0, [r4, #8]
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 f818 	bl	800ac54 <__sfp>
 800ac24:	2200      	movs	r2, #0
 800ac26:	60e0      	str	r0, [r4, #12]
 800ac28:	2104      	movs	r1, #4
 800ac2a:	6860      	ldr	r0, [r4, #4]
 800ac2c:	f7ff ff82 	bl	800ab34 <std>
 800ac30:	68a0      	ldr	r0, [r4, #8]
 800ac32:	2201      	movs	r2, #1
 800ac34:	2109      	movs	r1, #9
 800ac36:	f7ff ff7d 	bl	800ab34 <std>
 800ac3a:	68e0      	ldr	r0, [r4, #12]
 800ac3c:	2202      	movs	r2, #2
 800ac3e:	2112      	movs	r1, #18
 800ac40:	f7ff ff78 	bl	800ab34 <std>
 800ac44:	2301      	movs	r3, #1
 800ac46:	61a3      	str	r3, [r4, #24]
 800ac48:	e7d2      	b.n	800abf0 <__sinit+0xc>
 800ac4a:	bf00      	nop
 800ac4c:	0800c514 	.word	0x0800c514
 800ac50:	0800ab7d 	.word	0x0800ab7d

0800ac54 <__sfp>:
 800ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac56:	4607      	mov	r7, r0
 800ac58:	f7ff ffac 	bl	800abb4 <__sfp_lock_acquire>
 800ac5c:	4b1e      	ldr	r3, [pc, #120]	; (800acd8 <__sfp+0x84>)
 800ac5e:	681e      	ldr	r6, [r3, #0]
 800ac60:	69b3      	ldr	r3, [r6, #24]
 800ac62:	b913      	cbnz	r3, 800ac6a <__sfp+0x16>
 800ac64:	4630      	mov	r0, r6
 800ac66:	f7ff ffbd 	bl	800abe4 <__sinit>
 800ac6a:	3648      	adds	r6, #72	; 0x48
 800ac6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	d503      	bpl.n	800ac7c <__sfp+0x28>
 800ac74:	6833      	ldr	r3, [r6, #0]
 800ac76:	b30b      	cbz	r3, 800acbc <__sfp+0x68>
 800ac78:	6836      	ldr	r6, [r6, #0]
 800ac7a:	e7f7      	b.n	800ac6c <__sfp+0x18>
 800ac7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac80:	b9d5      	cbnz	r5, 800acb8 <__sfp+0x64>
 800ac82:	4b16      	ldr	r3, [pc, #88]	; (800acdc <__sfp+0x88>)
 800ac84:	60e3      	str	r3, [r4, #12]
 800ac86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac8a:	6665      	str	r5, [r4, #100]	; 0x64
 800ac8c:	f7ff fd02 	bl	800a694 <__retarget_lock_init_recursive>
 800ac90:	f7ff ff96 	bl	800abc0 <__sfp_lock_release>
 800ac94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac9c:	6025      	str	r5, [r4, #0]
 800ac9e:	61a5      	str	r5, [r4, #24]
 800aca0:	2208      	movs	r2, #8
 800aca2:	4629      	mov	r1, r5
 800aca4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aca8:	f7ff fd00 	bl	800a6ac <memset>
 800acac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acb4:	4620      	mov	r0, r4
 800acb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb8:	3468      	adds	r4, #104	; 0x68
 800acba:	e7d9      	b.n	800ac70 <__sfp+0x1c>
 800acbc:	2104      	movs	r1, #4
 800acbe:	4638      	mov	r0, r7
 800acc0:	f7ff ff62 	bl	800ab88 <__sfmoreglue>
 800acc4:	4604      	mov	r4, r0
 800acc6:	6030      	str	r0, [r6, #0]
 800acc8:	2800      	cmp	r0, #0
 800acca:	d1d5      	bne.n	800ac78 <__sfp+0x24>
 800accc:	f7ff ff78 	bl	800abc0 <__sfp_lock_release>
 800acd0:	230c      	movs	r3, #12
 800acd2:	603b      	str	r3, [r7, #0]
 800acd4:	e7ee      	b.n	800acb4 <__sfp+0x60>
 800acd6:	bf00      	nop
 800acd8:	0800c514 	.word	0x0800c514
 800acdc:	ffff0001 	.word	0xffff0001

0800ace0 <_fwalk_reent>:
 800ace0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace4:	4606      	mov	r6, r0
 800ace6:	4688      	mov	r8, r1
 800ace8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800acec:	2700      	movs	r7, #0
 800acee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acf2:	f1b9 0901 	subs.w	r9, r9, #1
 800acf6:	d505      	bpl.n	800ad04 <_fwalk_reent+0x24>
 800acf8:	6824      	ldr	r4, [r4, #0]
 800acfa:	2c00      	cmp	r4, #0
 800acfc:	d1f7      	bne.n	800acee <_fwalk_reent+0xe>
 800acfe:	4638      	mov	r0, r7
 800ad00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad04:	89ab      	ldrh	r3, [r5, #12]
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d907      	bls.n	800ad1a <_fwalk_reent+0x3a>
 800ad0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	d003      	beq.n	800ad1a <_fwalk_reent+0x3a>
 800ad12:	4629      	mov	r1, r5
 800ad14:	4630      	mov	r0, r6
 800ad16:	47c0      	blx	r8
 800ad18:	4307      	orrs	r7, r0
 800ad1a:	3568      	adds	r5, #104	; 0x68
 800ad1c:	e7e9      	b.n	800acf2 <_fwalk_reent+0x12>

0800ad1e <__swhatbuf_r>:
 800ad1e:	b570      	push	{r4, r5, r6, lr}
 800ad20:	460e      	mov	r6, r1
 800ad22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad26:	2900      	cmp	r1, #0
 800ad28:	b096      	sub	sp, #88	; 0x58
 800ad2a:	4614      	mov	r4, r2
 800ad2c:	461d      	mov	r5, r3
 800ad2e:	da07      	bge.n	800ad40 <__swhatbuf_r+0x22>
 800ad30:	2300      	movs	r3, #0
 800ad32:	602b      	str	r3, [r5, #0]
 800ad34:	89b3      	ldrh	r3, [r6, #12]
 800ad36:	061a      	lsls	r2, r3, #24
 800ad38:	d410      	bmi.n	800ad5c <__swhatbuf_r+0x3e>
 800ad3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad3e:	e00e      	b.n	800ad5e <__swhatbuf_r+0x40>
 800ad40:	466a      	mov	r2, sp
 800ad42:	f000 f8c3 	bl	800aecc <_fstat_r>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	dbf2      	blt.n	800ad30 <__swhatbuf_r+0x12>
 800ad4a:	9a01      	ldr	r2, [sp, #4]
 800ad4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad54:	425a      	negs	r2, r3
 800ad56:	415a      	adcs	r2, r3
 800ad58:	602a      	str	r2, [r5, #0]
 800ad5a:	e7ee      	b.n	800ad3a <__swhatbuf_r+0x1c>
 800ad5c:	2340      	movs	r3, #64	; 0x40
 800ad5e:	2000      	movs	r0, #0
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	b016      	add	sp, #88	; 0x58
 800ad64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad68 <__smakebuf_r>:
 800ad68:	898b      	ldrh	r3, [r1, #12]
 800ad6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad6c:	079d      	lsls	r5, r3, #30
 800ad6e:	4606      	mov	r6, r0
 800ad70:	460c      	mov	r4, r1
 800ad72:	d507      	bpl.n	800ad84 <__smakebuf_r+0x1c>
 800ad74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	6123      	str	r3, [r4, #16]
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	6163      	str	r3, [r4, #20]
 800ad80:	b002      	add	sp, #8
 800ad82:	bd70      	pop	{r4, r5, r6, pc}
 800ad84:	ab01      	add	r3, sp, #4
 800ad86:	466a      	mov	r2, sp
 800ad88:	f7ff ffc9 	bl	800ad1e <__swhatbuf_r>
 800ad8c:	9900      	ldr	r1, [sp, #0]
 800ad8e:	4605      	mov	r5, r0
 800ad90:	4630      	mov	r0, r6
 800ad92:	f7ff fce3 	bl	800a75c <_malloc_r>
 800ad96:	b948      	cbnz	r0, 800adac <__smakebuf_r+0x44>
 800ad98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad9c:	059a      	lsls	r2, r3, #22
 800ad9e:	d4ef      	bmi.n	800ad80 <__smakebuf_r+0x18>
 800ada0:	f023 0303 	bic.w	r3, r3, #3
 800ada4:	f043 0302 	orr.w	r3, r3, #2
 800ada8:	81a3      	strh	r3, [r4, #12]
 800adaa:	e7e3      	b.n	800ad74 <__smakebuf_r+0xc>
 800adac:	4b0d      	ldr	r3, [pc, #52]	; (800ade4 <__smakebuf_r+0x7c>)
 800adae:	62b3      	str	r3, [r6, #40]	; 0x28
 800adb0:	89a3      	ldrh	r3, [r4, #12]
 800adb2:	6020      	str	r0, [r4, #0]
 800adb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb8:	81a3      	strh	r3, [r4, #12]
 800adba:	9b00      	ldr	r3, [sp, #0]
 800adbc:	6163      	str	r3, [r4, #20]
 800adbe:	9b01      	ldr	r3, [sp, #4]
 800adc0:	6120      	str	r0, [r4, #16]
 800adc2:	b15b      	cbz	r3, 800addc <__smakebuf_r+0x74>
 800adc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adc8:	4630      	mov	r0, r6
 800adca:	f000 f891 	bl	800aef0 <_isatty_r>
 800adce:	b128      	cbz	r0, 800addc <__smakebuf_r+0x74>
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	f023 0303 	bic.w	r3, r3, #3
 800add6:	f043 0301 	orr.w	r3, r3, #1
 800adda:	81a3      	strh	r3, [r4, #12]
 800addc:	89a0      	ldrh	r0, [r4, #12]
 800adde:	4305      	orrs	r5, r0
 800ade0:	81a5      	strh	r5, [r4, #12]
 800ade2:	e7cd      	b.n	800ad80 <__smakebuf_r+0x18>
 800ade4:	0800ab7d 	.word	0x0800ab7d

0800ade8 <__malloc_lock>:
 800ade8:	4801      	ldr	r0, [pc, #4]	; (800adf0 <__malloc_lock+0x8>)
 800adea:	f7ff bc54 	b.w	800a696 <__retarget_lock_acquire_recursive>
 800adee:	bf00      	nop
 800adf0:	20019b54 	.word	0x20019b54

0800adf4 <__malloc_unlock>:
 800adf4:	4801      	ldr	r0, [pc, #4]	; (800adfc <__malloc_unlock+0x8>)
 800adf6:	f7ff bc4f 	b.w	800a698 <__retarget_lock_release_recursive>
 800adfa:	bf00      	nop
 800adfc:	20019b54 	.word	0x20019b54

0800ae00 <__sread>:
 800ae00:	b510      	push	{r4, lr}
 800ae02:	460c      	mov	r4, r1
 800ae04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae08:	f000 f894 	bl	800af34 <_read_r>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	bfab      	itete	ge
 800ae10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae12:	89a3      	ldrhlt	r3, [r4, #12]
 800ae14:	181b      	addge	r3, r3, r0
 800ae16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae1a:	bfac      	ite	ge
 800ae1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae1e:	81a3      	strhlt	r3, [r4, #12]
 800ae20:	bd10      	pop	{r4, pc}

0800ae22 <__swrite>:
 800ae22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae26:	461f      	mov	r7, r3
 800ae28:	898b      	ldrh	r3, [r1, #12]
 800ae2a:	05db      	lsls	r3, r3, #23
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	460c      	mov	r4, r1
 800ae30:	4616      	mov	r6, r2
 800ae32:	d505      	bpl.n	800ae40 <__swrite+0x1e>
 800ae34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae38:	2302      	movs	r3, #2
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f000 f868 	bl	800af10 <_lseek_r>
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae4a:	81a3      	strh	r3, [r4, #12]
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	463b      	mov	r3, r7
 800ae50:	4628      	mov	r0, r5
 800ae52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae56:	f000 b817 	b.w	800ae88 <_write_r>

0800ae5a <__sseek>:
 800ae5a:	b510      	push	{r4, lr}
 800ae5c:	460c      	mov	r4, r1
 800ae5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae62:	f000 f855 	bl	800af10 <_lseek_r>
 800ae66:	1c43      	adds	r3, r0, #1
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	bf15      	itete	ne
 800ae6c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae76:	81a3      	strheq	r3, [r4, #12]
 800ae78:	bf18      	it	ne
 800ae7a:	81a3      	strhne	r3, [r4, #12]
 800ae7c:	bd10      	pop	{r4, pc}

0800ae7e <__sclose>:
 800ae7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae82:	f000 b813 	b.w	800aeac <_close_r>
	...

0800ae88 <_write_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	4d07      	ldr	r5, [pc, #28]	; (800aea8 <_write_r+0x20>)
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	4608      	mov	r0, r1
 800ae90:	4611      	mov	r1, r2
 800ae92:	2200      	movs	r2, #0
 800ae94:	602a      	str	r2, [r5, #0]
 800ae96:	461a      	mov	r2, r3
 800ae98:	f7fe feb4 	bl	8009c04 <_write>
 800ae9c:	1c43      	adds	r3, r0, #1
 800ae9e:	d102      	bne.n	800aea6 <_write_r+0x1e>
 800aea0:	682b      	ldr	r3, [r5, #0]
 800aea2:	b103      	cbz	r3, 800aea6 <_write_r+0x1e>
 800aea4:	6023      	str	r3, [r4, #0]
 800aea6:	bd38      	pop	{r3, r4, r5, pc}
 800aea8:	20019b5c 	.word	0x20019b5c

0800aeac <_close_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4d06      	ldr	r5, [pc, #24]	; (800aec8 <_close_r+0x1c>)
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	4608      	mov	r0, r1
 800aeb6:	602b      	str	r3, [r5, #0]
 800aeb8:	f7fe feb2 	bl	8009c20 <_close>
 800aebc:	1c43      	adds	r3, r0, #1
 800aebe:	d102      	bne.n	800aec6 <_close_r+0x1a>
 800aec0:	682b      	ldr	r3, [r5, #0]
 800aec2:	b103      	cbz	r3, 800aec6 <_close_r+0x1a>
 800aec4:	6023      	str	r3, [r4, #0]
 800aec6:	bd38      	pop	{r3, r4, r5, pc}
 800aec8:	20019b5c 	.word	0x20019b5c

0800aecc <_fstat_r>:
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	4d07      	ldr	r5, [pc, #28]	; (800aeec <_fstat_r+0x20>)
 800aed0:	2300      	movs	r3, #0
 800aed2:	4604      	mov	r4, r0
 800aed4:	4608      	mov	r0, r1
 800aed6:	4611      	mov	r1, r2
 800aed8:	602b      	str	r3, [r5, #0]
 800aeda:	f7fe fea4 	bl	8009c26 <_fstat>
 800aede:	1c43      	adds	r3, r0, #1
 800aee0:	d102      	bne.n	800aee8 <_fstat_r+0x1c>
 800aee2:	682b      	ldr	r3, [r5, #0]
 800aee4:	b103      	cbz	r3, 800aee8 <_fstat_r+0x1c>
 800aee6:	6023      	str	r3, [r4, #0]
 800aee8:	bd38      	pop	{r3, r4, r5, pc}
 800aeea:	bf00      	nop
 800aeec:	20019b5c 	.word	0x20019b5c

0800aef0 <_isatty_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4d06      	ldr	r5, [pc, #24]	; (800af0c <_isatty_r+0x1c>)
 800aef4:	2300      	movs	r3, #0
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	602b      	str	r3, [r5, #0]
 800aefc:	f7fe fe98 	bl	8009c30 <_isatty>
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	d102      	bne.n	800af0a <_isatty_r+0x1a>
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	b103      	cbz	r3, 800af0a <_isatty_r+0x1a>
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
 800af0c:	20019b5c 	.word	0x20019b5c

0800af10 <_lseek_r>:
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	4d07      	ldr	r5, [pc, #28]	; (800af30 <_lseek_r+0x20>)
 800af14:	4604      	mov	r4, r0
 800af16:	4608      	mov	r0, r1
 800af18:	4611      	mov	r1, r2
 800af1a:	2200      	movs	r2, #0
 800af1c:	602a      	str	r2, [r5, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	f7fe fe88 	bl	8009c34 <_lseek>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d102      	bne.n	800af2e <_lseek_r+0x1e>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	b103      	cbz	r3, 800af2e <_lseek_r+0x1e>
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	bd38      	pop	{r3, r4, r5, pc}
 800af30:	20019b5c 	.word	0x20019b5c

0800af34 <_read_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d07      	ldr	r5, [pc, #28]	; (800af54 <_read_r+0x20>)
 800af38:	4604      	mov	r4, r0
 800af3a:	4608      	mov	r0, r1
 800af3c:	4611      	mov	r1, r2
 800af3e:	2200      	movs	r2, #0
 800af40:	602a      	str	r2, [r5, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	f7fe fe4e 	bl	8009be4 <_read>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d102      	bne.n	800af52 <_read_r+0x1e>
 800af4c:	682b      	ldr	r3, [r5, #0]
 800af4e:	b103      	cbz	r3, 800af52 <_read_r+0x1e>
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	20019b5c 	.word	0x20019b5c

0800af58 <with_errnof>:
 800af58:	b513      	push	{r0, r1, r4, lr}
 800af5a:	4604      	mov	r4, r0
 800af5c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800af60:	f7ff faec 	bl	800a53c <__errno>
 800af64:	ed9d 0a01 	vldr	s0, [sp, #4]
 800af68:	6004      	str	r4, [r0, #0]
 800af6a:	b002      	add	sp, #8
 800af6c:	bd10      	pop	{r4, pc}

0800af6e <xflowf>:
 800af6e:	b130      	cbz	r0, 800af7e <xflowf+0x10>
 800af70:	eef1 7a40 	vneg.f32	s15, s0
 800af74:	ee27 0a80 	vmul.f32	s0, s15, s0
 800af78:	2022      	movs	r0, #34	; 0x22
 800af7a:	f7ff bfed 	b.w	800af58 <with_errnof>
 800af7e:	eef0 7a40 	vmov.f32	s15, s0
 800af82:	e7f7      	b.n	800af74 <xflowf+0x6>

0800af84 <__math_uflowf>:
 800af84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af8c <__math_uflowf+0x8>
 800af88:	f7ff bff1 	b.w	800af6e <xflowf>
 800af8c:	10000000 	.word	0x10000000

0800af90 <__math_may_uflowf>:
 800af90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af98 <__math_may_uflowf+0x8>
 800af94:	f7ff bfeb 	b.w	800af6e <xflowf>
 800af98:	1a200000 	.word	0x1a200000

0800af9c <__math_oflowf>:
 800af9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800afa4 <__math_oflowf+0x8>
 800afa0:	f7ff bfe5 	b.w	800af6e <xflowf>
 800afa4:	70000000 	.word	0x70000000

0800afa8 <__math_divzerof>:
 800afa8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800afac:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800afb0:	2800      	cmp	r0, #0
 800afb2:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800afb6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800afc4 <__math_divzerof+0x1c>
 800afba:	2022      	movs	r0, #34	; 0x22
 800afbc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800afc0:	f7ff bfca 	b.w	800af58 <with_errnof>
 800afc4:	00000000 	.word	0x00000000

0800afc8 <__math_invalidf>:
 800afc8:	eef0 7a40 	vmov.f32	s15, s0
 800afcc:	ee30 7a40 	vsub.f32	s14, s0, s0
 800afd0:	eef4 7a67 	vcmp.f32	s15, s15
 800afd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800afdc:	d602      	bvs.n	800afe4 <__math_invalidf+0x1c>
 800afde:	2021      	movs	r0, #33	; 0x21
 800afe0:	f7ff bfba 	b.w	800af58 <with_errnof>
 800afe4:	4770      	bx	lr
	...

0800afe8 <expf>:
 800afe8:	ee10 2a10 	vmov	r2, s0
 800afec:	b470      	push	{r4, r5, r6}
 800afee:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800aff2:	f240 442a 	movw	r4, #1066	; 0x42a
 800aff6:	42a3      	cmp	r3, r4
 800aff8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800affc:	d92a      	bls.n	800b054 <expf+0x6c>
 800affe:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800b002:	d059      	beq.n	800b0b8 <expf+0xd0>
 800b004:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800b008:	d303      	bcc.n	800b012 <expf+0x2a>
 800b00a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b00e:	bc70      	pop	{r4, r5, r6}
 800b010:	4770      	bx	lr
 800b012:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b0c0 <expf+0xd8>
 800b016:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b01e:	dd03      	ble.n	800b028 <expf+0x40>
 800b020:	bc70      	pop	{r4, r5, r6}
 800b022:	2000      	movs	r0, #0
 800b024:	f7ff bfba 	b.w	800af9c <__math_oflowf>
 800b028:	eddf 7a26 	vldr	s15, [pc, #152]	; 800b0c4 <expf+0xdc>
 800b02c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b034:	d503      	bpl.n	800b03e <expf+0x56>
 800b036:	bc70      	pop	{r4, r5, r6}
 800b038:	2000      	movs	r0, #0
 800b03a:	f7ff bfa3 	b.w	800af84 <__math_uflowf>
 800b03e:	eddf 7a22 	vldr	s15, [pc, #136]	; 800b0c8 <expf+0xe0>
 800b042:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b04a:	d503      	bpl.n	800b054 <expf+0x6c>
 800b04c:	bc70      	pop	{r4, r5, r6}
 800b04e:	2000      	movs	r0, #0
 800b050:	f7ff bf9e 	b.w	800af90 <__math_may_uflowf>
 800b054:	4b1d      	ldr	r3, [pc, #116]	; (800b0cc <expf+0xe4>)
 800b056:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b05a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800b05e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800b062:	eeb0 7b44 	vmov.f64	d7, d4
 800b066:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b06a:	ee17 5a10 	vmov	r5, s14
 800b06e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800b072:	f005 021f 	and.w	r2, r5, #31
 800b076:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b07a:	e9d2 4600 	ldrd	r4, r6, [r2]
 800b07e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800b082:	ed93 4b50 	vldr	d4, [r3, #320]	; 0x140
 800b086:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800b08a:	eea4 0b07 	vfma.f64	d0, d4, d7
 800b08e:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800b092:	2300      	movs	r3, #0
 800b094:	1918      	adds	r0, r3, r4
 800b096:	ea4f 32c5 	mov.w	r2, r5, lsl #15
 800b09a:	eb42 0106 	adc.w	r1, r2, r6
 800b09e:	eea5 6b07 	vfma.f64	d6, d5, d7
 800b0a2:	ee27 5b07 	vmul.f64	d5, d7, d7
 800b0a6:	ec41 0b17 	vmov	d7, r0, r1
 800b0aa:	eea6 0b05 	vfma.f64	d0, d6, d5
 800b0ae:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b0b2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b0b6:	e7aa      	b.n	800b00e <expf+0x26>
 800b0b8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800b0d0 <expf+0xe8>
 800b0bc:	e7a7      	b.n	800b00e <expf+0x26>
 800b0be:	bf00      	nop
 800b0c0:	42b17217 	.word	0x42b17217
 800b0c4:	c2cff1b4 	.word	0xc2cff1b4
 800b0c8:	c2ce8ecf 	.word	0xc2ce8ecf
 800b0cc:	0800c578 	.word	0x0800c578
 800b0d0:	00000000 	.word	0x00000000

0800b0d4 <fabsf>:
 800b0d4:	ee10 3a10 	vmov	r3, s0
 800b0d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0dc:	ee00 3a10 	vmov	s0, r3
 800b0e0:	4770      	bx	lr
	...

0800b0e4 <logf>:
 800b0e4:	ee10 3a10 	vmov	r3, s0
 800b0e8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b0ec:	b410      	push	{r4}
 800b0ee:	d055      	beq.n	800b19c <logf+0xb8>
 800b0f0:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800b0f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800b0f8:	d31a      	bcc.n	800b130 <logf+0x4c>
 800b0fa:	005a      	lsls	r2, r3, #1
 800b0fc:	d104      	bne.n	800b108 <logf+0x24>
 800b0fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b102:	2001      	movs	r0, #1
 800b104:	f7ff bf50 	b.w	800afa8 <__math_divzerof>
 800b108:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b10c:	d043      	beq.n	800b196 <logf+0xb2>
 800b10e:	2b00      	cmp	r3, #0
 800b110:	db02      	blt.n	800b118 <logf+0x34>
 800b112:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800b116:	d303      	bcc.n	800b120 <logf+0x3c>
 800b118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b11c:	f7ff bf54 	b.w	800afc8 <__math_invalidf>
 800b120:	eddf 7a20 	vldr	s15, [pc, #128]	; 800b1a4 <logf+0xc0>
 800b124:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b128:	ee10 3a10 	vmov	r3, s0
 800b12c:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800b130:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800b134:	491c      	ldr	r1, [pc, #112]	; (800b1a8 <logf+0xc4>)
 800b136:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800b13a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800b13e:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800b142:	0dd4      	lsrs	r4, r2, #23
 800b144:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800b148:	05e4      	lsls	r4, r4, #23
 800b14a:	ed90 6b00 	vldr	d6, [r0]
 800b14e:	1b1b      	subs	r3, r3, r4
 800b150:	ee07 3a90 	vmov	s15, r3
 800b154:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800b158:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b15c:	15d2      	asrs	r2, r2, #23
 800b15e:	eea6 0b07 	vfma.f64	d0, d6, d7
 800b162:	ed90 6b02 	vldr	d6, [r0, #8]
 800b166:	ee07 2a90 	vmov	s15, r2
 800b16a:	ed91 4b44 	vldr	d4, [r1, #272]	; 0x110
 800b16e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b172:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b176:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800b17a:	ee20 5b00 	vmul.f64	d5, d0, d0
 800b17e:	eea4 7b00 	vfma.f64	d7, d4, d0
 800b182:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 800b186:	ee30 0b06 	vadd.f64	d0, d0, d6
 800b18a:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b18e:	eea5 0b07 	vfma.f64	d0, d5, d7
 800b192:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800b1ac <logf+0xc8>
 800b1a0:	e7f9      	b.n	800b196 <logf+0xb2>
 800b1a2:	bf00      	nop
 800b1a4:	4b000000 	.word	0x4b000000
 800b1a8:	0800c6c0 	.word	0x0800c6c0
 800b1ac:	00000000 	.word	0x00000000

0800b1b0 <checkint>:
 800b1b0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b1b4:	2b7e      	cmp	r3, #126	; 0x7e
 800b1b6:	dd10      	ble.n	800b1da <checkint+0x2a>
 800b1b8:	2b96      	cmp	r3, #150	; 0x96
 800b1ba:	dc0c      	bgt.n	800b1d6 <checkint+0x26>
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800b1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c6:	1e5a      	subs	r2, r3, #1
 800b1c8:	4202      	tst	r2, r0
 800b1ca:	d106      	bne.n	800b1da <checkint+0x2a>
 800b1cc:	4203      	tst	r3, r0
 800b1ce:	bf0c      	ite	eq
 800b1d0:	2002      	moveq	r0, #2
 800b1d2:	2001      	movne	r0, #1
 800b1d4:	4770      	bx	lr
 800b1d6:	2002      	movs	r0, #2
 800b1d8:	4770      	bx	lr
 800b1da:	2000      	movs	r0, #0
 800b1dc:	4770      	bx	lr
	...

0800b1e0 <powf>:
 800b1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1e2:	ee10 1a10 	vmov	r1, s0
 800b1e6:	ee10 6a90 	vmov	r6, s1
 800b1ea:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800b1ee:	0072      	lsls	r2, r6, #1
 800b1f0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b1f4:	b085      	sub	sp, #20
 800b1f6:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800b1fa:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800b1fe:	d256      	bcs.n	800b2ae <powf+0xce>
 800b200:	4298      	cmp	r0, r3
 800b202:	d256      	bcs.n	800b2b2 <powf+0xd2>
 800b204:	2000      	movs	r0, #0
 800b206:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800b20a:	4ea3      	ldr	r6, [pc, #652]	; (800b498 <powf+0x2b8>)
 800b20c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800b210:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800b214:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800b218:	0dd2      	lsrs	r2, r2, #23
 800b21a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800b21e:	05d2      	lsls	r2, r2, #23
 800b220:	1a8b      	subs	r3, r1, r2
 800b222:	ed97 5b00 	vldr	d5, [r7]
 800b226:	ee07 3a90 	vmov	s15, r3
 800b22a:	15d2      	asrs	r2, r2, #23
 800b22c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b230:	eea5 6b07 	vfma.f64	d6, d5, d7
 800b234:	ed97 5b02 	vldr	d5, [r7, #8]
 800b238:	ee26 2b06 	vmul.f64	d2, d6, d6
 800b23c:	ee22 1b02 	vmul.f64	d1, d2, d2
 800b240:	ee07 2a90 	vmov	s15, r2
 800b244:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800b248:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b24c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b250:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800b254:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800b258:	eea6 5b04 	vfma.f64	d5, d6, d4
 800b25c:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800b260:	eea6 4b03 	vfma.f64	d4, d6, d3
 800b264:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800b268:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800b26c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800b270:	eea2 7b04 	vfma.f64	d7, d2, d4
 800b274:	eea5 7b01 	vfma.f64	d7, d5, d1
 800b278:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b27c:	ee10 1a90 	vmov	r1, s1
 800b280:	2300      	movs	r3, #0
 800b282:	2700      	movs	r7, #0
 800b284:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800b288:	f248 06be 	movw	r6, #32958	; 0x80be
 800b28c:	429f      	cmp	r7, r3
 800b28e:	bf08      	it	eq
 800b290:	4296      	cmpeq	r6, r2
 800b292:	f080 80b1 	bcs.w	800b3f8 <powf+0x218>
 800b296:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800b478 <powf+0x298>
 800b29a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a2:	dd79      	ble.n	800b398 <powf+0x1b8>
 800b2a4:	b005      	add	sp, #20
 800b2a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b2aa:	f7ff be77 	b.w	800af9c <__math_oflowf>
 800b2ae:	4298      	cmp	r0, r3
 800b2b0:	d32d      	bcc.n	800b30e <powf+0x12e>
 800b2b2:	b952      	cbnz	r2, 800b2ca <powf+0xea>
 800b2b4:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800b2b8:	005b      	lsls	r3, r3, #1
 800b2ba:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800b2be:	f240 80cd 	bls.w	800b45c <powf+0x27c>
 800b2c2:	ee30 0a20 	vadd.f32	s0, s0, s1
 800b2c6:	b005      	add	sp, #20
 800b2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ca:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800b2ce:	d105      	bne.n	800b2dc <powf+0xfc>
 800b2d0:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800b2d4:	0076      	lsls	r6, r6, #1
 800b2d6:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800b2da:	e7f0      	b.n	800b2be <powf+0xde>
 800b2dc:	004b      	lsls	r3, r1, #1
 800b2de:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800b2e2:	d8ee      	bhi.n	800b2c2 <powf+0xe2>
 800b2e4:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800b2e8:	d1eb      	bne.n	800b2c2 <powf+0xe2>
 800b2ea:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b2ee:	f000 80b5 	beq.w	800b45c <powf+0x27c>
 800b2f2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b2f6:	ea6f 0606 	mvn.w	r6, r6
 800b2fa:	bf34      	ite	cc
 800b2fc:	2300      	movcc	r3, #0
 800b2fe:	2301      	movcs	r3, #1
 800b300:	0ff6      	lsrs	r6, r6, #31
 800b302:	42b3      	cmp	r3, r6
 800b304:	f040 80ad 	bne.w	800b462 <powf+0x282>
 800b308:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800b30c:	e7db      	b.n	800b2c6 <powf+0xe6>
 800b30e:	004f      	lsls	r7, r1, #1
 800b310:	1e7a      	subs	r2, r7, #1
 800b312:	429a      	cmp	r2, r3
 800b314:	d31c      	bcc.n	800b350 <powf+0x170>
 800b316:	2900      	cmp	r1, #0
 800b318:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b31c:	da0f      	bge.n	800b33e <powf+0x15e>
 800b31e:	ee10 0a90 	vmov	r0, s1
 800b322:	f7ff ff45 	bl	800b1b0 <checkint>
 800b326:	2801      	cmp	r0, #1
 800b328:	d109      	bne.n	800b33e <powf+0x15e>
 800b32a:	eeb1 0a40 	vneg.f32	s0, s0
 800b32e:	b947      	cbnz	r7, 800b342 <powf+0x162>
 800b330:	2e00      	cmp	r6, #0
 800b332:	dac8      	bge.n	800b2c6 <powf+0xe6>
 800b334:	b005      	add	sp, #20
 800b336:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b33a:	f7ff be35 	b.w	800afa8 <__math_divzerof>
 800b33e:	2000      	movs	r0, #0
 800b340:	e7f5      	b.n	800b32e <powf+0x14e>
 800b342:	2e00      	cmp	r6, #0
 800b344:	dabf      	bge.n	800b2c6 <powf+0xe6>
 800b346:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b34a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b34e:	e7ba      	b.n	800b2c6 <powf+0xe6>
 800b350:	2900      	cmp	r1, #0
 800b352:	da1f      	bge.n	800b394 <powf+0x1b4>
 800b354:	ee10 0a90 	vmov	r0, s1
 800b358:	f7ff ff2a 	bl	800b1b0 <checkint>
 800b35c:	b920      	cbnz	r0, 800b368 <powf+0x188>
 800b35e:	b005      	add	sp, #20
 800b360:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b364:	f7ff be30 	b.w	800afc8 <__math_invalidf>
 800b368:	2801      	cmp	r0, #1
 800b36a:	bf14      	ite	ne
 800b36c:	2000      	movne	r0, #0
 800b36e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b372:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b376:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800b37a:	f4bf af44 	bcs.w	800b206 <powf+0x26>
 800b37e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b49c <powf+0x2bc>
 800b382:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b386:	ee10 3a10 	vmov	r3, s0
 800b38a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b38e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800b392:	e738      	b.n	800b206 <powf+0x26>
 800b394:	2000      	movs	r0, #0
 800b396:	e7ee      	b.n	800b376 <powf+0x196>
 800b398:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800b480 <powf+0x2a0>
 800b39c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a4:	dd10      	ble.n	800b3c8 <powf+0x1e8>
 800b3a6:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	d15c      	bne.n	800b468 <powf+0x288>
 800b3ae:	9302      	str	r3, [sp, #8]
 800b3b0:	eddd 7a02 	vldr	s15, [sp, #8]
 800b3b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3bc:	eef4 7a47 	vcmp.f32	s15, s14
 800b3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c4:	f47f af6e 	bne.w	800b2a4 <powf+0xc4>
 800b3c8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b488 <powf+0x2a8>
 800b3cc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d4:	d804      	bhi.n	800b3e0 <powf+0x200>
 800b3d6:	b005      	add	sp, #20
 800b3d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b3dc:	f7ff bdd2 	b.w	800af84 <__math_uflowf>
 800b3e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800b490 <powf+0x2b0>
 800b3e4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ec:	d504      	bpl.n	800b3f8 <powf+0x218>
 800b3ee:	b005      	add	sp, #20
 800b3f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b3f4:	f7ff bdcc 	b.w	800af90 <__math_may_uflowf>
 800b3f8:	4b29      	ldr	r3, [pc, #164]	; (800b4a0 <powf+0x2c0>)
 800b3fa:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800b3fe:	ee30 6b07 	vadd.f64	d6, d0, d7
 800b402:	ed8d 6b00 	vstr	d6, [sp]
 800b406:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b40a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800b40e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b412:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b416:	f006 011f 	and.w	r1, r6, #31
 800b41a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b41e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800b422:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800b426:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800b42a:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800b42e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b432:	ee27 5b07 	vmul.f64	d5, d7, d7
 800b436:	1836      	adds	r6, r6, r0
 800b438:	2300      	movs	r3, #0
 800b43a:	eb13 040c 	adds.w	r4, r3, ip
 800b43e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800b442:	eb41 050e 	adc.w	r5, r1, lr
 800b446:	eea7 0b04 	vfma.f64	d0, d7, d4
 800b44a:	ec45 4b17 	vmov	d7, r4, r5
 800b44e:	eea6 0b05 	vfma.f64	d0, d6, d5
 800b452:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b456:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b45a:	e734      	b.n	800b2c6 <powf+0xe6>
 800b45c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b460:	e731      	b.n	800b2c6 <powf+0xe6>
 800b462:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b4a4 <powf+0x2c4>
 800b466:	e72e      	b.n	800b2c6 <powf+0xe6>
 800b468:	9303      	str	r3, [sp, #12]
 800b46a:	eddd 7a03 	vldr	s15, [sp, #12]
 800b46e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b472:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b476:	e7a1      	b.n	800b3bc <powf+0x1dc>
 800b478:	ffd1d571 	.word	0xffd1d571
 800b47c:	405fffff 	.word	0x405fffff
 800b480:	ffa3aae2 	.word	0xffa3aae2
 800b484:	405fffff 	.word	0x405fffff
 800b488:	00000000 	.word	0x00000000
 800b48c:	c062c000 	.word	0xc062c000
 800b490:	00000000 	.word	0x00000000
 800b494:	c062a000 	.word	0xc062a000
 800b498:	0800c7e0 	.word	0x0800c7e0
 800b49c:	4b000000 	.word	0x4b000000
 800b4a0:	0800c578 	.word	0x0800c578
 800b4a4:	00000000 	.word	0x00000000

0800b4a8 <tanf>:
 800b4a8:	ee10 3a10 	vmov	r3, s0
 800b4ac:	b507      	push	{r0, r1, r2, lr}
 800b4ae:	4a10      	ldr	r2, [pc, #64]	; (800b4f0 <tanf+0x48>)
 800b4b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	dc05      	bgt.n	800b4c4 <tanf+0x1c>
 800b4b8:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800b4f4 <tanf+0x4c>
 800b4bc:	2001      	movs	r0, #1
 800b4be:	f000 fd37 	bl	800bf30 <__kernel_tanf>
 800b4c2:	e004      	b.n	800b4ce <tanf+0x26>
 800b4c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b4c8:	db04      	blt.n	800b4d4 <tanf+0x2c>
 800b4ca:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b4ce:	b003      	add	sp, #12
 800b4d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b4d4:	4668      	mov	r0, sp
 800b4d6:	f000 f8f3 	bl	800b6c0 <__ieee754_rem_pio2f>
 800b4da:	0040      	lsls	r0, r0, #1
 800b4dc:	f000 0002 	and.w	r0, r0, #2
 800b4e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b4e4:	ed9d 0a00 	vldr	s0, [sp]
 800b4e8:	f1c0 0001 	rsb	r0, r0, #1
 800b4ec:	e7e7      	b.n	800b4be <tanf+0x16>
 800b4ee:	bf00      	nop
 800b4f0:	3f490fda 	.word	0x3f490fda
 800b4f4:	00000000 	.word	0x00000000

0800b4f8 <log10f>:
 800b4f8:	b508      	push	{r3, lr}
 800b4fa:	ed2d 8b02 	vpush	{d8}
 800b4fe:	eeb0 8a40 	vmov.f32	s16, s0
 800b502:	f000 f885 	bl	800b610 <__ieee754_log10f>
 800b506:	4b14      	ldr	r3, [pc, #80]	; (800b558 <log10f+0x60>)
 800b508:	f993 3000 	ldrsb.w	r3, [r3]
 800b50c:	3301      	adds	r3, #1
 800b50e:	d014      	beq.n	800b53a <log10f+0x42>
 800b510:	eeb4 8a48 	vcmp.f32	s16, s16
 800b514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b518:	d60f      	bvs.n	800b53a <log10f+0x42>
 800b51a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b522:	d80a      	bhi.n	800b53a <log10f+0x42>
 800b524:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b52c:	d108      	bne.n	800b540 <log10f+0x48>
 800b52e:	f7ff f805 	bl	800a53c <__errno>
 800b532:	2322      	movs	r3, #34	; 0x22
 800b534:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800b55c <log10f+0x64>
 800b538:	6003      	str	r3, [r0, #0]
 800b53a:	ecbd 8b02 	vpop	{d8}
 800b53e:	bd08      	pop	{r3, pc}
 800b540:	f7fe fffc 	bl	800a53c <__errno>
 800b544:	ecbd 8b02 	vpop	{d8}
 800b548:	2321      	movs	r3, #33	; 0x21
 800b54a:	6003      	str	r3, [r0, #0]
 800b54c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b550:	4803      	ldr	r0, [pc, #12]	; (800b560 <log10f+0x68>)
 800b552:	f000 bf3d 	b.w	800c3d0 <nanf>
 800b556:	bf00      	nop
 800b558:	20000094 	.word	0x20000094
 800b55c:	ff800000 	.word	0xff800000
 800b560:	0800c908 	.word	0x0800c908

0800b564 <sinhf>:
 800b564:	b508      	push	{r3, lr}
 800b566:	ed2d 8b02 	vpush	{d8}
 800b56a:	eef0 8a40 	vmov.f32	s17, s0
 800b56e:	f000 f9e3 	bl	800b938 <__ieee754_sinhf>
 800b572:	4b11      	ldr	r3, [pc, #68]	; (800b5b8 <sinhf+0x54>)
 800b574:	f993 3000 	ldrsb.w	r3, [r3]
 800b578:	3301      	adds	r3, #1
 800b57a:	eeb0 8a40 	vmov.f32	s16, s0
 800b57e:	d015      	beq.n	800b5ac <sinhf+0x48>
 800b580:	f000 fed6 	bl	800c330 <finitef>
 800b584:	b990      	cbnz	r0, 800b5ac <sinhf+0x48>
 800b586:	eeb0 0a68 	vmov.f32	s0, s17
 800b58a:	f000 fed1 	bl	800c330 <finitef>
 800b58e:	b168      	cbz	r0, 800b5ac <sinhf+0x48>
 800b590:	f7fe ffd4 	bl	800a53c <__errno>
 800b594:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800b5bc <sinhf+0x58>
 800b598:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800b5c0 <sinhf+0x5c>
 800b59c:	2322      	movs	r3, #34	; 0x22
 800b59e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800b5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a6:	6003      	str	r3, [r0, #0]
 800b5a8:	fe38 8a00 	vselgt.f32	s16, s16, s0
 800b5ac:	eeb0 0a48 	vmov.f32	s0, s16
 800b5b0:	ecbd 8b02 	vpop	{d8}
 800b5b4:	bd08      	pop	{r3, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20000094 	.word	0x20000094
 800b5bc:	7f800000 	.word	0x7f800000
 800b5c0:	ff800000 	.word	0xff800000

0800b5c4 <sqrtf>:
 800b5c4:	b508      	push	{r3, lr}
 800b5c6:	ed2d 8b02 	vpush	{d8}
 800b5ca:	eeb0 8a40 	vmov.f32	s16, s0
 800b5ce:	f000 fa21 	bl	800ba14 <__ieee754_sqrtf>
 800b5d2:	4b0d      	ldr	r3, [pc, #52]	; (800b608 <sqrtf+0x44>)
 800b5d4:	f993 3000 	ldrsb.w	r3, [r3]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	d011      	beq.n	800b600 <sqrtf+0x3c>
 800b5dc:	eeb4 8a48 	vcmp.f32	s16, s16
 800b5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5e4:	d60c      	bvs.n	800b600 <sqrtf+0x3c>
 800b5e6:	eddf 8a09 	vldr	s17, [pc, #36]	; 800b60c <sqrtf+0x48>
 800b5ea:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f2:	d505      	bpl.n	800b600 <sqrtf+0x3c>
 800b5f4:	f7fe ffa2 	bl	800a53c <__errno>
 800b5f8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b5fc:	2321      	movs	r3, #33	; 0x21
 800b5fe:	6003      	str	r3, [r0, #0]
 800b600:	ecbd 8b02 	vpop	{d8}
 800b604:	bd08      	pop	{r3, pc}
 800b606:	bf00      	nop
 800b608:	20000094 	.word	0x20000094
 800b60c:	00000000 	.word	0x00000000

0800b610 <__ieee754_log10f>:
 800b610:	b508      	push	{r3, lr}
 800b612:	ee10 2a10 	vmov	r2, s0
 800b616:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800b61a:	ed2d 8b02 	vpush	{d8}
 800b61e:	d108      	bne.n	800b632 <__ieee754_log10f+0x22>
 800b620:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800b6a8 <__ieee754_log10f+0x98>
 800b624:	eddf 7a21 	vldr	s15, [pc, #132]	; 800b6ac <__ieee754_log10f+0x9c>
 800b628:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b62c:	ecbd 8b02 	vpop	{d8}
 800b630:	bd08      	pop	{r3, pc}
 800b632:	2a00      	cmp	r2, #0
 800b634:	da02      	bge.n	800b63c <__ieee754_log10f+0x2c>
 800b636:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b63a:	e7f3      	b.n	800b624 <__ieee754_log10f+0x14>
 800b63c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b640:	db02      	blt.n	800b648 <__ieee754_log10f+0x38>
 800b642:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b646:	e7f1      	b.n	800b62c <__ieee754_log10f+0x1c>
 800b648:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b64c:	bfbf      	itttt	lt
 800b64e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800b6b0 <__ieee754_log10f+0xa0>
 800b652:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800b656:	f06f 0118 	mvnlt.w	r1, #24
 800b65a:	ee17 2a90 	vmovlt	r2, s15
 800b65e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800b662:	bfa8      	it	ge
 800b664:	2100      	movge	r1, #0
 800b666:	3b7f      	subs	r3, #127	; 0x7f
 800b668:	440b      	add	r3, r1
 800b66a:	0fd9      	lsrs	r1, r3, #31
 800b66c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800b670:	ee07 3a90 	vmov	s15, r3
 800b674:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b678:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800b67c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b680:	ee00 3a10 	vmov	s0, r3
 800b684:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800b688:	f7ff fd2c 	bl	800b0e4 <logf>
 800b68c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b6b4 <__ieee754_log10f+0xa4>
 800b690:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b694:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b6b8 <__ieee754_log10f+0xa8>
 800b698:	eea8 0a27 	vfma.f32	s0, s16, s15
 800b69c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b6bc <__ieee754_log10f+0xac>
 800b6a0:	eea8 0a27 	vfma.f32	s0, s16, s15
 800b6a4:	e7c2      	b.n	800b62c <__ieee754_log10f+0x1c>
 800b6a6:	bf00      	nop
 800b6a8:	cc000000 	.word	0xcc000000
 800b6ac:	00000000 	.word	0x00000000
 800b6b0:	4c000000 	.word	0x4c000000
 800b6b4:	3ede5bd9 	.word	0x3ede5bd9
 800b6b8:	355427db 	.word	0x355427db
 800b6bc:	3e9a2080 	.word	0x3e9a2080

0800b6c0 <__ieee754_rem_pio2f>:
 800b6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6c2:	ee10 6a10 	vmov	r6, s0
 800b6c6:	4b8e      	ldr	r3, [pc, #568]	; (800b900 <__ieee754_rem_pio2f+0x240>)
 800b6c8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b6cc:	429d      	cmp	r5, r3
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	eef0 7a40 	vmov.f32	s15, s0
 800b6d4:	4604      	mov	r4, r0
 800b6d6:	dc05      	bgt.n	800b6e4 <__ieee754_rem_pio2f+0x24>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	ed80 0a00 	vstr	s0, [r0]
 800b6de:	6043      	str	r3, [r0, #4]
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	e01a      	b.n	800b71a <__ieee754_rem_pio2f+0x5a>
 800b6e4:	4b87      	ldr	r3, [pc, #540]	; (800b904 <__ieee754_rem_pio2f+0x244>)
 800b6e6:	429d      	cmp	r5, r3
 800b6e8:	dc46      	bgt.n	800b778 <__ieee754_rem_pio2f+0xb8>
 800b6ea:	2e00      	cmp	r6, #0
 800b6ec:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b908 <__ieee754_rem_pio2f+0x248>
 800b6f0:	4b86      	ldr	r3, [pc, #536]	; (800b90c <__ieee754_rem_pio2f+0x24c>)
 800b6f2:	f025 050f 	bic.w	r5, r5, #15
 800b6f6:	dd1f      	ble.n	800b738 <__ieee754_rem_pio2f+0x78>
 800b6f8:	429d      	cmp	r5, r3
 800b6fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b6fe:	d00e      	beq.n	800b71e <__ieee754_rem_pio2f+0x5e>
 800b700:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b910 <__ieee754_rem_pio2f+0x250>
 800b704:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b708:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b70c:	ed80 0a00 	vstr	s0, [r0]
 800b710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b714:	2001      	movs	r0, #1
 800b716:	edc4 7a01 	vstr	s15, [r4, #4]
 800b71a:	b007      	add	sp, #28
 800b71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b71e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b914 <__ieee754_rem_pio2f+0x254>
 800b722:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b918 <__ieee754_rem_pio2f+0x258>
 800b726:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b72a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b72e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b732:	edc0 6a00 	vstr	s13, [r0]
 800b736:	e7eb      	b.n	800b710 <__ieee754_rem_pio2f+0x50>
 800b738:	429d      	cmp	r5, r3
 800b73a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b73e:	d00e      	beq.n	800b75e <__ieee754_rem_pio2f+0x9e>
 800b740:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b910 <__ieee754_rem_pio2f+0x250>
 800b744:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b748:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b74c:	ed80 0a00 	vstr	s0, [r0]
 800b750:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b758:	edc4 7a01 	vstr	s15, [r4, #4]
 800b75c:	e7dd      	b.n	800b71a <__ieee754_rem_pio2f+0x5a>
 800b75e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b914 <__ieee754_rem_pio2f+0x254>
 800b762:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b918 <__ieee754_rem_pio2f+0x258>
 800b766:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b76a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b76e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b772:	edc0 6a00 	vstr	s13, [r0]
 800b776:	e7eb      	b.n	800b750 <__ieee754_rem_pio2f+0x90>
 800b778:	4b68      	ldr	r3, [pc, #416]	; (800b91c <__ieee754_rem_pio2f+0x25c>)
 800b77a:	429d      	cmp	r5, r3
 800b77c:	dc72      	bgt.n	800b864 <__ieee754_rem_pio2f+0x1a4>
 800b77e:	f7ff fca9 	bl	800b0d4 <fabsf>
 800b782:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b920 <__ieee754_rem_pio2f+0x260>
 800b786:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b78a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b78e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b796:	ee17 0a90 	vmov	r0, s15
 800b79a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b908 <__ieee754_rem_pio2f+0x248>
 800b79e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b7a2:	281f      	cmp	r0, #31
 800b7a4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b910 <__ieee754_rem_pio2f+0x250>
 800b7a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ac:	eeb1 6a47 	vneg.f32	s12, s14
 800b7b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b7b4:	ee16 2a90 	vmov	r2, s13
 800b7b8:	dc1c      	bgt.n	800b7f4 <__ieee754_rem_pio2f+0x134>
 800b7ba:	495a      	ldr	r1, [pc, #360]	; (800b924 <__ieee754_rem_pio2f+0x264>)
 800b7bc:	1e47      	subs	r7, r0, #1
 800b7be:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b7c2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b7c6:	428b      	cmp	r3, r1
 800b7c8:	d014      	beq.n	800b7f4 <__ieee754_rem_pio2f+0x134>
 800b7ca:	6022      	str	r2, [r4, #0]
 800b7cc:	ed94 7a00 	vldr	s14, [r4]
 800b7d0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b7d4:	2e00      	cmp	r6, #0
 800b7d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b7da:	ed84 0a01 	vstr	s0, [r4, #4]
 800b7de:	da9c      	bge.n	800b71a <__ieee754_rem_pio2f+0x5a>
 800b7e0:	eeb1 7a47 	vneg.f32	s14, s14
 800b7e4:	eeb1 0a40 	vneg.f32	s0, s0
 800b7e8:	ed84 7a00 	vstr	s14, [r4]
 800b7ec:	ed84 0a01 	vstr	s0, [r4, #4]
 800b7f0:	4240      	negs	r0, r0
 800b7f2:	e792      	b.n	800b71a <__ieee754_rem_pio2f+0x5a>
 800b7f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b7f8:	15eb      	asrs	r3, r5, #23
 800b7fa:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b7fe:	2d08      	cmp	r5, #8
 800b800:	dde3      	ble.n	800b7ca <__ieee754_rem_pio2f+0x10a>
 800b802:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b914 <__ieee754_rem_pio2f+0x254>
 800b806:	eef0 6a40 	vmov.f32	s13, s0
 800b80a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b80e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b812:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b816:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b918 <__ieee754_rem_pio2f+0x258>
 800b81a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800b81e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b822:	eef0 7a40 	vmov.f32	s15, s0
 800b826:	ee15 2a90 	vmov	r2, s11
 800b82a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b82e:	1a5b      	subs	r3, r3, r1
 800b830:	2b19      	cmp	r3, #25
 800b832:	dc04      	bgt.n	800b83e <__ieee754_rem_pio2f+0x17e>
 800b834:	edc4 5a00 	vstr	s11, [r4]
 800b838:	eeb0 0a66 	vmov.f32	s0, s13
 800b83c:	e7c6      	b.n	800b7cc <__ieee754_rem_pio2f+0x10c>
 800b83e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b928 <__ieee754_rem_pio2f+0x268>
 800b842:	eeb0 0a66 	vmov.f32	s0, s13
 800b846:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b84a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b84e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b92c <__ieee754_rem_pio2f+0x26c>
 800b852:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b856:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b85a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b85e:	ed84 7a00 	vstr	s14, [r4]
 800b862:	e7b3      	b.n	800b7cc <__ieee754_rem_pio2f+0x10c>
 800b864:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b868:	db06      	blt.n	800b878 <__ieee754_rem_pio2f+0x1b8>
 800b86a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b86e:	edc0 7a01 	vstr	s15, [r0, #4]
 800b872:	edc0 7a00 	vstr	s15, [r0]
 800b876:	e733      	b.n	800b6e0 <__ieee754_rem_pio2f+0x20>
 800b878:	15ea      	asrs	r2, r5, #23
 800b87a:	3a86      	subs	r2, #134	; 0x86
 800b87c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b880:	ee07 3a90 	vmov	s15, r3
 800b884:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b888:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b930 <__ieee754_rem_pio2f+0x270>
 800b88c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b894:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b898:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b89c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b8a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b8a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8a8:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b8ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b8b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b8:	edcd 7a05 	vstr	s15, [sp, #20]
 800b8bc:	d11e      	bne.n	800b8fc <__ieee754_rem_pio2f+0x23c>
 800b8be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c6:	bf14      	ite	ne
 800b8c8:	2302      	movne	r3, #2
 800b8ca:	2301      	moveq	r3, #1
 800b8cc:	4919      	ldr	r1, [pc, #100]	; (800b934 <__ieee754_rem_pio2f+0x274>)
 800b8ce:	9101      	str	r1, [sp, #4]
 800b8d0:	2102      	movs	r1, #2
 800b8d2:	9100      	str	r1, [sp, #0]
 800b8d4:	a803      	add	r0, sp, #12
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	f000 f8a0 	bl	800ba1c <__kernel_rem_pio2f>
 800b8dc:	2e00      	cmp	r6, #0
 800b8de:	f6bf af1c 	bge.w	800b71a <__ieee754_rem_pio2f+0x5a>
 800b8e2:	edd4 7a00 	vldr	s15, [r4]
 800b8e6:	eef1 7a67 	vneg.f32	s15, s15
 800b8ea:	edc4 7a00 	vstr	s15, [r4]
 800b8ee:	edd4 7a01 	vldr	s15, [r4, #4]
 800b8f2:	eef1 7a67 	vneg.f32	s15, s15
 800b8f6:	edc4 7a01 	vstr	s15, [r4, #4]
 800b8fa:	e779      	b.n	800b7f0 <__ieee754_rem_pio2f+0x130>
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e7e5      	b.n	800b8cc <__ieee754_rem_pio2f+0x20c>
 800b900:	3f490fd8 	.word	0x3f490fd8
 800b904:	4016cbe3 	.word	0x4016cbe3
 800b908:	3fc90f80 	.word	0x3fc90f80
 800b90c:	3fc90fd0 	.word	0x3fc90fd0
 800b910:	37354443 	.word	0x37354443
 800b914:	37354400 	.word	0x37354400
 800b918:	2e85a308 	.word	0x2e85a308
 800b91c:	43490f80 	.word	0x43490f80
 800b920:	3f22f984 	.word	0x3f22f984
 800b924:	0800c90c 	.word	0x0800c90c
 800b928:	2e85a300 	.word	0x2e85a300
 800b92c:	248d3132 	.word	0x248d3132
 800b930:	43800000 	.word	0x43800000
 800b934:	0800c98c 	.word	0x0800c98c

0800b938 <__ieee754_sinhf>:
 800b938:	b510      	push	{r4, lr}
 800b93a:	ee10 3a10 	vmov	r3, s0
 800b93e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b942:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b946:	ed2d 8b02 	vpush	{d8}
 800b94a:	eef0 7a40 	vmov.f32	s15, s0
 800b94e:	db06      	blt.n	800b95e <__ieee754_sinhf+0x26>
 800b950:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b954:	ecbd 8b02 	vpop	{d8}
 800b958:	eeb0 0a67 	vmov.f32	s0, s15
 800b95c:	bd10      	pop	{r4, pc}
 800b95e:	2b00      	cmp	r3, #0
 800b960:	4b28      	ldr	r3, [pc, #160]	; (800ba04 <__ieee754_sinhf+0xcc>)
 800b962:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800b966:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800b96a:	fe28 8a88 	vselge.f32	s16, s17, s16
 800b96e:	429c      	cmp	r4, r3
 800b970:	dc2a      	bgt.n	800b9c8 <__ieee754_sinhf+0x90>
 800b972:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 800b976:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b97a:	da08      	bge.n	800b98e <__ieee754_sinhf+0x56>
 800b97c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800ba08 <__ieee754_sinhf+0xd0>
 800b980:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b984:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800b988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b98c:	dce2      	bgt.n	800b954 <__ieee754_sinhf+0x1c>
 800b98e:	eeb0 0a67 	vmov.f32	s0, s15
 800b992:	f7ff fb9f 	bl	800b0d4 <fabsf>
 800b996:	f000 fbad 	bl	800c0f4 <expm1f>
 800b99a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b99e:	bfbb      	ittet	lt
 800b9a0:	ee20 7a00 	vmullt.f32	s14, s0, s0
 800b9a4:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 800b9a8:	ee70 8a28 	vaddge.f32	s17, s0, s17
 800b9ac:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 800b9b0:	bfad      	iteet	ge
 800b9b2:	ee80 7a28 	vdivge.f32	s14, s0, s17
 800b9b6:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 800b9ba:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 800b9be:	ee77 7a00 	vaddge.f32	s15, s14, s0
 800b9c2:	ee67 7a88 	vmul.f32	s15, s15, s16
 800b9c6:	e7c5      	b.n	800b954 <__ieee754_sinhf+0x1c>
 800b9c8:	4b10      	ldr	r3, [pc, #64]	; (800ba0c <__ieee754_sinhf+0xd4>)
 800b9ca:	429c      	cmp	r4, r3
 800b9cc:	dc06      	bgt.n	800b9dc <__ieee754_sinhf+0xa4>
 800b9ce:	f7ff fb81 	bl	800b0d4 <fabsf>
 800b9d2:	f7ff fb09 	bl	800afe8 <expf>
 800b9d6:	ee60 7a08 	vmul.f32	s15, s0, s16
 800b9da:	e7bb      	b.n	800b954 <__ieee754_sinhf+0x1c>
 800b9dc:	4b0c      	ldr	r3, [pc, #48]	; (800ba10 <__ieee754_sinhf+0xd8>)
 800b9de:	429c      	cmp	r4, r3
 800b9e0:	dc0a      	bgt.n	800b9f8 <__ieee754_sinhf+0xc0>
 800b9e2:	f7ff fb77 	bl	800b0d4 <fabsf>
 800b9e6:	ee20 0a28 	vmul.f32	s0, s0, s17
 800b9ea:	f7ff fafd 	bl	800afe8 <expf>
 800b9ee:	ee68 7a00 	vmul.f32	s15, s16, s0
 800b9f2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b9f6:	e7ad      	b.n	800b954 <__ieee754_sinhf+0x1c>
 800b9f8:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800ba08 <__ieee754_sinhf+0xd0>
 800b9fc:	ee60 7a07 	vmul.f32	s15, s0, s14
 800ba00:	e7a8      	b.n	800b954 <__ieee754_sinhf+0x1c>
 800ba02:	bf00      	nop
 800ba04:	41afffff 	.word	0x41afffff
 800ba08:	7cf0bdc2 	.word	0x7cf0bdc2
 800ba0c:	42b17217 	.word	0x42b17217
 800ba10:	42b2d4fc 	.word	0x42b2d4fc

0800ba14 <__ieee754_sqrtf>:
 800ba14:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ba18:	4770      	bx	lr
	...

0800ba1c <__kernel_rem_pio2f>:
 800ba1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba20:	ed2d 8b04 	vpush	{d8-d9}
 800ba24:	b0d7      	sub	sp, #348	; 0x15c
 800ba26:	4616      	mov	r6, r2
 800ba28:	4698      	mov	r8, r3
 800ba2a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ba2c:	4bbb      	ldr	r3, [pc, #748]	; (800bd1c <__kernel_rem_pio2f+0x300>)
 800ba2e:	9001      	str	r0, [sp, #4]
 800ba30:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800ba34:	1d33      	adds	r3, r6, #4
 800ba36:	460d      	mov	r5, r1
 800ba38:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 800ba3c:	db29      	blt.n	800ba92 <__kernel_rem_pio2f+0x76>
 800ba3e:	1ef1      	subs	r1, r6, #3
 800ba40:	bf48      	it	mi
 800ba42:	1d31      	addmi	r1, r6, #4
 800ba44:	10c9      	asrs	r1, r1, #3
 800ba46:	1c4c      	adds	r4, r1, #1
 800ba48:	00e3      	lsls	r3, r4, #3
 800ba4a:	9302      	str	r3, [sp, #8]
 800ba4c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ba4e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800bd2c <__kernel_rem_pio2f+0x310>
 800ba52:	eba1 0009 	sub.w	r0, r1, r9
 800ba56:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800ba5a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800ba5e:	eb07 0c09 	add.w	ip, r7, r9
 800ba62:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800ba66:	2300      	movs	r3, #0
 800ba68:	4563      	cmp	r3, ip
 800ba6a:	dd14      	ble.n	800ba96 <__kernel_rem_pio2f+0x7a>
 800ba6c:	ab1a      	add	r3, sp, #104	; 0x68
 800ba6e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800ba72:	46cc      	mov	ip, r9
 800ba74:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800ba78:	f1c8 0b01 	rsb	fp, r8, #1
 800ba7c:	eb0b 020c 	add.w	r2, fp, ip
 800ba80:	4297      	cmp	r7, r2
 800ba82:	db27      	blt.n	800bad4 <__kernel_rem_pio2f+0xb8>
 800ba84:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ba88:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800bd2c <__kernel_rem_pio2f+0x310>
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	2200      	movs	r2, #0
 800ba90:	e016      	b.n	800bac0 <__kernel_rem_pio2f+0xa4>
 800ba92:	2100      	movs	r1, #0
 800ba94:	e7d7      	b.n	800ba46 <__kernel_rem_pio2f+0x2a>
 800ba96:	42d8      	cmn	r0, r3
 800ba98:	bf5d      	ittte	pl
 800ba9a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800ba9e:	ee07 2a90 	vmovpl	s15, r2
 800baa2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800baa6:	eef0 7a47 	vmovmi.f32	s15, s14
 800baaa:	ecea 7a01 	vstmia	sl!, {s15}
 800baae:	3301      	adds	r3, #1
 800bab0:	e7da      	b.n	800ba68 <__kernel_rem_pio2f+0x4c>
 800bab2:	ecfe 6a01 	vldmia	lr!, {s13}
 800bab6:	ed90 7a00 	vldr	s14, [r0]
 800baba:	eee6 7a87 	vfma.f32	s15, s13, s14
 800babe:	3201      	adds	r2, #1
 800bac0:	454a      	cmp	r2, r9
 800bac2:	f1a0 0004 	sub.w	r0, r0, #4
 800bac6:	ddf4      	ble.n	800bab2 <__kernel_rem_pio2f+0x96>
 800bac8:	ecea 7a01 	vstmia	sl!, {s15}
 800bacc:	3304      	adds	r3, #4
 800bace:	f10c 0c01 	add.w	ip, ip, #1
 800bad2:	e7d3      	b.n	800ba7c <__kernel_rem_pio2f+0x60>
 800bad4:	ab06      	add	r3, sp, #24
 800bad6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800bada:	9304      	str	r3, [sp, #16]
 800badc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800bade:	eddf 8a92 	vldr	s17, [pc, #584]	; 800bd28 <__kernel_rem_pio2f+0x30c>
 800bae2:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800bd24 <__kernel_rem_pio2f+0x308>
 800bae6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800baea:	9303      	str	r3, [sp, #12]
 800baec:	46ba      	mov	sl, r7
 800baee:	ab56      	add	r3, sp, #344	; 0x158
 800baf0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800baf4:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800baf8:	ab06      	add	r3, sp, #24
 800bafa:	4618      	mov	r0, r3
 800bafc:	4652      	mov	r2, sl
 800bafe:	2a00      	cmp	r2, #0
 800bb00:	dc51      	bgt.n	800bba6 <__kernel_rem_pio2f+0x18a>
 800bb02:	4620      	mov	r0, r4
 800bb04:	9305      	str	r3, [sp, #20]
 800bb06:	f000 fc69 	bl	800c3dc <scalbnf>
 800bb0a:	eeb0 8a40 	vmov.f32	s16, s0
 800bb0e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800bb12:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bb16:	f000 fc19 	bl	800c34c <floorf>
 800bb1a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800bb1e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bb22:	2c00      	cmp	r4, #0
 800bb24:	9b05      	ldr	r3, [sp, #20]
 800bb26:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bb2a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800bb2e:	edcd 7a00 	vstr	s15, [sp]
 800bb32:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bb36:	dd4b      	ble.n	800bbd0 <__kernel_rem_pio2f+0x1b4>
 800bb38:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800bb3c:	aa06      	add	r2, sp, #24
 800bb3e:	f1c4 0e08 	rsb	lr, r4, #8
 800bb42:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bb46:	ee17 1a90 	vmov	r1, s15
 800bb4a:	fa42 f00e 	asr.w	r0, r2, lr
 800bb4e:	4401      	add	r1, r0
 800bb50:	9100      	str	r1, [sp, #0]
 800bb52:	fa00 f00e 	lsl.w	r0, r0, lr
 800bb56:	a906      	add	r1, sp, #24
 800bb58:	1a12      	subs	r2, r2, r0
 800bb5a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800bb5e:	f1c4 0007 	rsb	r0, r4, #7
 800bb62:	fa42 fb00 	asr.w	fp, r2, r0
 800bb66:	f1bb 0f00 	cmp.w	fp, #0
 800bb6a:	dd43      	ble.n	800bbf4 <__kernel_rem_pio2f+0x1d8>
 800bb6c:	9a00      	ldr	r2, [sp, #0]
 800bb6e:	f04f 0e00 	mov.w	lr, #0
 800bb72:	3201      	adds	r2, #1
 800bb74:	9200      	str	r2, [sp, #0]
 800bb76:	4670      	mov	r0, lr
 800bb78:	45f2      	cmp	sl, lr
 800bb7a:	dc6c      	bgt.n	800bc56 <__kernel_rem_pio2f+0x23a>
 800bb7c:	2c00      	cmp	r4, #0
 800bb7e:	dd04      	ble.n	800bb8a <__kernel_rem_pio2f+0x16e>
 800bb80:	2c01      	cmp	r4, #1
 800bb82:	d079      	beq.n	800bc78 <__kernel_rem_pio2f+0x25c>
 800bb84:	2c02      	cmp	r4, #2
 800bb86:	f000 8082 	beq.w	800bc8e <__kernel_rem_pio2f+0x272>
 800bb8a:	f1bb 0f02 	cmp.w	fp, #2
 800bb8e:	d131      	bne.n	800bbf4 <__kernel_rem_pio2f+0x1d8>
 800bb90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bb94:	ee30 8a48 	vsub.f32	s16, s0, s16
 800bb98:	b360      	cbz	r0, 800bbf4 <__kernel_rem_pio2f+0x1d8>
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 fc1e 	bl	800c3dc <scalbnf>
 800bba0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bba4:	e026      	b.n	800bbf4 <__kernel_rem_pio2f+0x1d8>
 800bba6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800bbaa:	3a01      	subs	r2, #1
 800bbac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbb0:	a942      	add	r1, sp, #264	; 0x108
 800bbb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbb6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800bbba:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bbbe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bbc2:	eca0 0a01 	vstmia	r0!, {s0}
 800bbc6:	ed9c 0a00 	vldr	s0, [ip]
 800bbca:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bbce:	e796      	b.n	800bafe <__kernel_rem_pio2f+0xe2>
 800bbd0:	d107      	bne.n	800bbe2 <__kernel_rem_pio2f+0x1c6>
 800bbd2:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 800bbd6:	a906      	add	r1, sp, #24
 800bbd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bbdc:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800bbe0:	e7c1      	b.n	800bb66 <__kernel_rem_pio2f+0x14a>
 800bbe2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bbe6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbee:	da2f      	bge.n	800bc50 <__kernel_rem_pio2f+0x234>
 800bbf0:	f04f 0b00 	mov.w	fp, #0
 800bbf4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bbf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbfc:	f040 8098 	bne.w	800bd30 <__kernel_rem_pio2f+0x314>
 800bc00:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bc04:	469c      	mov	ip, r3
 800bc06:	2200      	movs	r2, #0
 800bc08:	45bc      	cmp	ip, r7
 800bc0a:	da48      	bge.n	800bc9e <__kernel_rem_pio2f+0x282>
 800bc0c:	2a00      	cmp	r2, #0
 800bc0e:	d05f      	beq.n	800bcd0 <__kernel_rem_pio2f+0x2b4>
 800bc10:	aa06      	add	r2, sp, #24
 800bc12:	3c08      	subs	r4, #8
 800bc14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bc18:	2900      	cmp	r1, #0
 800bc1a:	d07d      	beq.n	800bd18 <__kernel_rem_pio2f+0x2fc>
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bc22:	9301      	str	r3, [sp, #4]
 800bc24:	f000 fbda 	bl	800c3dc <scalbnf>
 800bc28:	9b01      	ldr	r3, [sp, #4]
 800bc2a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800bd28 <__kernel_rem_pio2f+0x30c>
 800bc2e:	4619      	mov	r1, r3
 800bc30:	2900      	cmp	r1, #0
 800bc32:	f280 80af 	bge.w	800bd94 <__kernel_rem_pio2f+0x378>
 800bc36:	4618      	mov	r0, r3
 800bc38:	2400      	movs	r4, #0
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	f2c0 80d0 	blt.w	800bde0 <__kernel_rem_pio2f+0x3c4>
 800bc40:	a942      	add	r1, sp, #264	; 0x108
 800bc42:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800bc46:	4a36      	ldr	r2, [pc, #216]	; (800bd20 <__kernel_rem_pio2f+0x304>)
 800bc48:	eddf 7a38 	vldr	s15, [pc, #224]	; 800bd2c <__kernel_rem_pio2f+0x310>
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	e0bb      	b.n	800bdc8 <__kernel_rem_pio2f+0x3ac>
 800bc50:	f04f 0b02 	mov.w	fp, #2
 800bc54:	e78a      	b.n	800bb6c <__kernel_rem_pio2f+0x150>
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	b948      	cbnz	r0, 800bc6e <__kernel_rem_pio2f+0x252>
 800bc5a:	b11a      	cbz	r2, 800bc64 <__kernel_rem_pio2f+0x248>
 800bc5c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800bc60:	601a      	str	r2, [r3, #0]
 800bc62:	2201      	movs	r2, #1
 800bc64:	f10e 0e01 	add.w	lr, lr, #1
 800bc68:	3304      	adds	r3, #4
 800bc6a:	4610      	mov	r0, r2
 800bc6c:	e784      	b.n	800bb78 <__kernel_rem_pio2f+0x15c>
 800bc6e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800bc72:	601a      	str	r2, [r3, #0]
 800bc74:	4602      	mov	r2, r0
 800bc76:	e7f5      	b.n	800bc64 <__kernel_rem_pio2f+0x248>
 800bc78:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800bc7c:	ab06      	add	r3, sp, #24
 800bc7e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bc82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc86:	aa06      	add	r2, sp, #24
 800bc88:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800bc8c:	e77d      	b.n	800bb8a <__kernel_rem_pio2f+0x16e>
 800bc8e:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800bc92:	ab06      	add	r3, sp, #24
 800bc94:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bc98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc9c:	e7f3      	b.n	800bc86 <__kernel_rem_pio2f+0x26a>
 800bc9e:	a906      	add	r1, sp, #24
 800bca0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800bca4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800bca8:	4302      	orrs	r2, r0
 800bcaa:	e7ad      	b.n	800bc08 <__kernel_rem_pio2f+0x1ec>
 800bcac:	3001      	adds	r0, #1
 800bcae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bcb2:	2a00      	cmp	r2, #0
 800bcb4:	d0fa      	beq.n	800bcac <__kernel_rem_pio2f+0x290>
 800bcb6:	a91a      	add	r1, sp, #104	; 0x68
 800bcb8:	eb0a 0208 	add.w	r2, sl, r8
 800bcbc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bcc0:	f10a 0301 	add.w	r3, sl, #1
 800bcc4:	eb0a 0100 	add.w	r1, sl, r0
 800bcc8:	4299      	cmp	r1, r3
 800bcca:	da04      	bge.n	800bcd6 <__kernel_rem_pio2f+0x2ba>
 800bccc:	468a      	mov	sl, r1
 800bcce:	e70e      	b.n	800baee <__kernel_rem_pio2f+0xd2>
 800bcd0:	9b04      	ldr	r3, [sp, #16]
 800bcd2:	2001      	movs	r0, #1
 800bcd4:	e7eb      	b.n	800bcae <__kernel_rem_pio2f+0x292>
 800bcd6:	9803      	ldr	r0, [sp, #12]
 800bcd8:	f8dd c004 	ldr.w	ip, [sp, #4]
 800bcdc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800bce0:	9000      	str	r0, [sp, #0]
 800bce2:	ee07 0a90 	vmov	s15, r0
 800bce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcea:	2000      	movs	r0, #0
 800bcec:	ece2 7a01 	vstmia	r2!, {s15}
 800bcf0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800bd2c <__kernel_rem_pio2f+0x310>
 800bcf4:	4696      	mov	lr, r2
 800bcf6:	4548      	cmp	r0, r9
 800bcf8:	dd06      	ble.n	800bd08 <__kernel_rem_pio2f+0x2ec>
 800bcfa:	a842      	add	r0, sp, #264	; 0x108
 800bcfc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800bd00:	edc0 7a00 	vstr	s15, [r0]
 800bd04:	3301      	adds	r3, #1
 800bd06:	e7df      	b.n	800bcc8 <__kernel_rem_pio2f+0x2ac>
 800bd08:	ecfc 6a01 	vldmia	ip!, {s13}
 800bd0c:	ed3e 7a01 	vldmdb	lr!, {s14}
 800bd10:	3001      	adds	r0, #1
 800bd12:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bd16:	e7ee      	b.n	800bcf6 <__kernel_rem_pio2f+0x2da>
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	e779      	b.n	800bc10 <__kernel_rem_pio2f+0x1f4>
 800bd1c:	0800ccd0 	.word	0x0800ccd0
 800bd20:	0800cca4 	.word	0x0800cca4
 800bd24:	43800000 	.word	0x43800000
 800bd28:	3b800000 	.word	0x3b800000
 800bd2c:	00000000 	.word	0x00000000
 800bd30:	9b02      	ldr	r3, [sp, #8]
 800bd32:	eeb0 0a48 	vmov.f32	s0, s16
 800bd36:	1b98      	subs	r0, r3, r6
 800bd38:	f000 fb50 	bl	800c3dc <scalbnf>
 800bd3c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800bd24 <__kernel_rem_pio2f+0x308>
 800bd40:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bd44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd48:	db1b      	blt.n	800bd82 <__kernel_rem_pio2f+0x366>
 800bd4a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800bd28 <__kernel_rem_pio2f+0x30c>
 800bd4e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bd52:	aa06      	add	r2, sp, #24
 800bd54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd58:	a906      	add	r1, sp, #24
 800bd5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd5e:	3408      	adds	r4, #8
 800bd60:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bd64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd68:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bd6c:	ee10 3a10 	vmov	r3, s0
 800bd70:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800bd74:	ee17 2a90 	vmov	r2, s15
 800bd78:	f10a 0301 	add.w	r3, sl, #1
 800bd7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bd80:	e74c      	b.n	800bc1c <__kernel_rem_pio2f+0x200>
 800bd82:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bd86:	aa06      	add	r2, sp, #24
 800bd88:	ee10 3a10 	vmov	r3, s0
 800bd8c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800bd90:	4653      	mov	r3, sl
 800bd92:	e743      	b.n	800bc1c <__kernel_rem_pio2f+0x200>
 800bd94:	aa42      	add	r2, sp, #264	; 0x108
 800bd96:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800bd9a:	aa06      	add	r2, sp, #24
 800bd9c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bda0:	9201      	str	r2, [sp, #4]
 800bda2:	ee07 2a90 	vmov	s15, r2
 800bda6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdaa:	3901      	subs	r1, #1
 800bdac:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bdb0:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bdb4:	edc0 7a00 	vstr	s15, [r0]
 800bdb8:	e73a      	b.n	800bc30 <__kernel_rem_pio2f+0x214>
 800bdba:	ecf2 6a01 	vldmia	r2!, {s13}
 800bdbe:	ecb6 7a01 	vldmia	r6!, {s14}
 800bdc2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bdc6:	3101      	adds	r1, #1
 800bdc8:	42b9      	cmp	r1, r7
 800bdca:	dc01      	bgt.n	800bdd0 <__kernel_rem_pio2f+0x3b4>
 800bdcc:	428c      	cmp	r4, r1
 800bdce:	daf4      	bge.n	800bdba <__kernel_rem_pio2f+0x39e>
 800bdd0:	aa56      	add	r2, sp, #344	; 0x158
 800bdd2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800bdd6:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800bdda:	3801      	subs	r0, #1
 800bddc:	3401      	adds	r4, #1
 800bdde:	e72c      	b.n	800bc3a <__kernel_rem_pio2f+0x21e>
 800bde0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800bde2:	2a02      	cmp	r2, #2
 800bde4:	dc0a      	bgt.n	800bdfc <__kernel_rem_pio2f+0x3e0>
 800bde6:	2a00      	cmp	r2, #0
 800bde8:	dc61      	bgt.n	800beae <__kernel_rem_pio2f+0x492>
 800bdea:	d03c      	beq.n	800be66 <__kernel_rem_pio2f+0x44a>
 800bdec:	9b00      	ldr	r3, [sp, #0]
 800bdee:	f003 0007 	and.w	r0, r3, #7
 800bdf2:	b057      	add	sp, #348	; 0x15c
 800bdf4:	ecbd 8b04 	vpop	{d8-d9}
 800bdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800bdfe:	2a03      	cmp	r2, #3
 800be00:	d1f4      	bne.n	800bdec <__kernel_rem_pio2f+0x3d0>
 800be02:	aa2e      	add	r2, sp, #184	; 0xb8
 800be04:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800be08:	4608      	mov	r0, r1
 800be0a:	461c      	mov	r4, r3
 800be0c:	2c00      	cmp	r4, #0
 800be0e:	f1a0 0004 	sub.w	r0, r0, #4
 800be12:	dc59      	bgt.n	800bec8 <__kernel_rem_pio2f+0x4ac>
 800be14:	4618      	mov	r0, r3
 800be16:	2801      	cmp	r0, #1
 800be18:	f1a1 0104 	sub.w	r1, r1, #4
 800be1c:	dc64      	bgt.n	800bee8 <__kernel_rem_pio2f+0x4cc>
 800be1e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800bd2c <__kernel_rem_pio2f+0x310>
 800be22:	2b01      	cmp	r3, #1
 800be24:	dc70      	bgt.n	800bf08 <__kernel_rem_pio2f+0x4ec>
 800be26:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800be2a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800be2e:	f1bb 0f00 	cmp.w	fp, #0
 800be32:	d172      	bne.n	800bf1a <__kernel_rem_pio2f+0x4fe>
 800be34:	edc5 6a00 	vstr	s13, [r5]
 800be38:	ed85 7a01 	vstr	s14, [r5, #4]
 800be3c:	edc5 7a02 	vstr	s15, [r5, #8]
 800be40:	e7d4      	b.n	800bdec <__kernel_rem_pio2f+0x3d0>
 800be42:	aa2e      	add	r2, sp, #184	; 0xb8
 800be44:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800be48:	ed91 7a00 	vldr	s14, [r1]
 800be4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be50:	3b01      	subs	r3, #1
 800be52:	2b00      	cmp	r3, #0
 800be54:	daf5      	bge.n	800be42 <__kernel_rem_pio2f+0x426>
 800be56:	f1bb 0f00 	cmp.w	fp, #0
 800be5a:	d001      	beq.n	800be60 <__kernel_rem_pio2f+0x444>
 800be5c:	eef1 7a67 	vneg.f32	s15, s15
 800be60:	edc5 7a00 	vstr	s15, [r5]
 800be64:	e7c2      	b.n	800bdec <__kernel_rem_pio2f+0x3d0>
 800be66:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800bd2c <__kernel_rem_pio2f+0x310>
 800be6a:	e7f2      	b.n	800be52 <__kernel_rem_pio2f+0x436>
 800be6c:	aa2e      	add	r2, sp, #184	; 0xb8
 800be6e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800be72:	edd0 7a00 	vldr	s15, [r0]
 800be76:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be7a:	3901      	subs	r1, #1
 800be7c:	2900      	cmp	r1, #0
 800be7e:	daf5      	bge.n	800be6c <__kernel_rem_pio2f+0x450>
 800be80:	f1bb 0f00 	cmp.w	fp, #0
 800be84:	d017      	beq.n	800beb6 <__kernel_rem_pio2f+0x49a>
 800be86:	eef1 7a47 	vneg.f32	s15, s14
 800be8a:	edc5 7a00 	vstr	s15, [r5]
 800be8e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800be92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be96:	a82f      	add	r0, sp, #188	; 0xbc
 800be98:	2101      	movs	r1, #1
 800be9a:	428b      	cmp	r3, r1
 800be9c:	da0e      	bge.n	800bebc <__kernel_rem_pio2f+0x4a0>
 800be9e:	f1bb 0f00 	cmp.w	fp, #0
 800bea2:	d001      	beq.n	800bea8 <__kernel_rem_pio2f+0x48c>
 800bea4:	eef1 7a67 	vneg.f32	s15, s15
 800bea8:	edc5 7a01 	vstr	s15, [r5, #4]
 800beac:	e79e      	b.n	800bdec <__kernel_rem_pio2f+0x3d0>
 800beae:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800bd2c <__kernel_rem_pio2f+0x310>
 800beb2:	4619      	mov	r1, r3
 800beb4:	e7e2      	b.n	800be7c <__kernel_rem_pio2f+0x460>
 800beb6:	eef0 7a47 	vmov.f32	s15, s14
 800beba:	e7e6      	b.n	800be8a <__kernel_rem_pio2f+0x46e>
 800bebc:	ecb0 7a01 	vldmia	r0!, {s14}
 800bec0:	3101      	adds	r1, #1
 800bec2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bec6:	e7e8      	b.n	800be9a <__kernel_rem_pio2f+0x47e>
 800bec8:	edd0 7a00 	vldr	s15, [r0]
 800becc:	edd0 6a01 	vldr	s13, [r0, #4]
 800bed0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bed4:	3c01      	subs	r4, #1
 800bed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800beda:	ed80 7a00 	vstr	s14, [r0]
 800bede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bee2:	edc0 7a01 	vstr	s15, [r0, #4]
 800bee6:	e791      	b.n	800be0c <__kernel_rem_pio2f+0x3f0>
 800bee8:	edd1 7a00 	vldr	s15, [r1]
 800beec:	edd1 6a01 	vldr	s13, [r1, #4]
 800bef0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bef4:	3801      	subs	r0, #1
 800bef6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800befa:	ed81 7a00 	vstr	s14, [r1]
 800befe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf02:	edc1 7a01 	vstr	s15, [r1, #4]
 800bf06:	e786      	b.n	800be16 <__kernel_rem_pio2f+0x3fa>
 800bf08:	aa2e      	add	r2, sp, #184	; 0xb8
 800bf0a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800bf0e:	ed91 7a00 	vldr	s14, [r1]
 800bf12:	3b01      	subs	r3, #1
 800bf14:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf18:	e783      	b.n	800be22 <__kernel_rem_pio2f+0x406>
 800bf1a:	eef1 6a66 	vneg.f32	s13, s13
 800bf1e:	eeb1 7a47 	vneg.f32	s14, s14
 800bf22:	edc5 6a00 	vstr	s13, [r5]
 800bf26:	ed85 7a01 	vstr	s14, [r5, #4]
 800bf2a:	eef1 7a67 	vneg.f32	s15, s15
 800bf2e:	e785      	b.n	800be3c <__kernel_rem_pio2f+0x420>

0800bf30 <__kernel_tanf>:
 800bf30:	b508      	push	{r3, lr}
 800bf32:	ee10 3a10 	vmov	r3, s0
 800bf36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bf3a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800bf3e:	eef0 7a40 	vmov.f32	s15, s0
 800bf42:	da17      	bge.n	800bf74 <__kernel_tanf+0x44>
 800bf44:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800bf48:	ee17 1a10 	vmov	r1, s14
 800bf4c:	bb41      	cbnz	r1, 800bfa0 <__kernel_tanf+0x70>
 800bf4e:	1c43      	adds	r3, r0, #1
 800bf50:	4313      	orrs	r3, r2
 800bf52:	d108      	bne.n	800bf66 <__kernel_tanf+0x36>
 800bf54:	f7ff f8be 	bl	800b0d4 <fabsf>
 800bf58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf5c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bf60:	eeb0 0a67 	vmov.f32	s0, s15
 800bf64:	bd08      	pop	{r3, pc}
 800bf66:	2801      	cmp	r0, #1
 800bf68:	d0fa      	beq.n	800bf60 <__kernel_tanf+0x30>
 800bf6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bf6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bf72:	e7f5      	b.n	800bf60 <__kernel_tanf+0x30>
 800bf74:	494d      	ldr	r1, [pc, #308]	; (800c0ac <__kernel_tanf+0x17c>)
 800bf76:	428a      	cmp	r2, r1
 800bf78:	db12      	blt.n	800bfa0 <__kernel_tanf+0x70>
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	bfb8      	it	lt
 800bf7e:	eef1 7a40 	vneglt.f32	s15, s0
 800bf82:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800c0b0 <__kernel_tanf+0x180>
 800bf86:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bf8a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800c0b4 <__kernel_tanf+0x184>
 800bf8e:	bfb8      	it	lt
 800bf90:	eef1 0a60 	vneglt.f32	s1, s1
 800bf94:	ee70 0a60 	vsub.f32	s1, s0, s1
 800bf98:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800bf9c:	eddf 0a46 	vldr	s1, [pc, #280]	; 800c0b8 <__kernel_tanf+0x188>
 800bfa0:	eddf 5a46 	vldr	s11, [pc, #280]	; 800c0bc <__kernel_tanf+0x18c>
 800bfa4:	ed9f 6a46 	vldr	s12, [pc, #280]	; 800c0c0 <__kernel_tanf+0x190>
 800bfa8:	ed9f 5a46 	vldr	s10, [pc, #280]	; 800c0c4 <__kernel_tanf+0x194>
 800bfac:	493f      	ldr	r1, [pc, #252]	; (800c0ac <__kernel_tanf+0x17c>)
 800bfae:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800bfb2:	428a      	cmp	r2, r1
 800bfb4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bfb8:	eea7 6a25 	vfma.f32	s12, s14, s11
 800bfbc:	eddf 5a42 	vldr	s11, [pc, #264]	; 800c0c8 <__kernel_tanf+0x198>
 800bfc0:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bfc4:	ed9f 6a41 	vldr	s12, [pc, #260]	; 800c0cc <__kernel_tanf+0x19c>
 800bfc8:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bfcc:	eddf 5a40 	vldr	s11, [pc, #256]	; 800c0d0 <__kernel_tanf+0x1a0>
 800bfd0:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bfd4:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800c0d4 <__kernel_tanf+0x1a4>
 800bfd8:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bfdc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800c0d8 <__kernel_tanf+0x1a8>
 800bfe0:	eee7 5a05 	vfma.f32	s11, s14, s10
 800bfe4:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800c0dc <__kernel_tanf+0x1ac>
 800bfe8:	eea5 5a87 	vfma.f32	s10, s11, s14
 800bfec:	eddf 5a3c 	vldr	s11, [pc, #240]	; 800c0e0 <__kernel_tanf+0x1b0>
 800bff0:	eee5 5a07 	vfma.f32	s11, s10, s14
 800bff4:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800c0e4 <__kernel_tanf+0x1b4>
 800bff8:	eea5 5a87 	vfma.f32	s10, s11, s14
 800bffc:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c0e8 <__kernel_tanf+0x1b8>
 800c000:	eee5 5a07 	vfma.f32	s11, s10, s14
 800c004:	eeb0 7a65 	vmov.f32	s14, s11
 800c008:	eea7 6a26 	vfma.f32	s12, s14, s13
 800c00c:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800c010:	eeb0 7a46 	vmov.f32	s14, s12
 800c014:	eeb0 6a60 	vmov.f32	s12, s1
 800c018:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c01c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c0ec <__kernel_tanf+0x1bc>
 800c020:	eee6 0a26 	vfma.f32	s1, s12, s13
 800c024:	eee5 0a87 	vfma.f32	s1, s11, s14
 800c028:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c02c:	db1d      	blt.n	800c06a <__kernel_tanf+0x13a>
 800c02e:	ee06 0a90 	vmov	s13, r0
 800c032:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800c036:	ee27 6a07 	vmul.f32	s12, s14, s14
 800c03a:	ee37 7a00 	vadd.f32	s14, s14, s0
 800c03e:	179b      	asrs	r3, r3, #30
 800c040:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c044:	f003 0302 	and.w	r3, r3, #2
 800c048:	f1c3 0301 	rsb	r3, r3, #1
 800c04c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c050:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800c054:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c058:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c05c:	ee07 3a90 	vmov	s15, r3
 800c060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c064:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c068:	e77a      	b.n	800bf60 <__kernel_tanf+0x30>
 800c06a:	2801      	cmp	r0, #1
 800c06c:	d01b      	beq.n	800c0a6 <__kernel_tanf+0x176>
 800c06e:	4b20      	ldr	r3, [pc, #128]	; (800c0f0 <__kernel_tanf+0x1c0>)
 800c070:	ee17 2a10 	vmov	r2, s14
 800c074:	401a      	ands	r2, r3
 800c076:	ee06 2a10 	vmov	s12, r2
 800c07a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c07e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c082:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c086:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c08a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c08e:	ee16 2a90 	vmov	r2, s13
 800c092:	4013      	ands	r3, r2
 800c094:	ee07 3a90 	vmov	s15, r3
 800c098:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c09c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800c0a0:	eee7 7a26 	vfma.f32	s15, s14, s13
 800c0a4:	e75c      	b.n	800bf60 <__kernel_tanf+0x30>
 800c0a6:	eef0 7a47 	vmov.f32	s15, s14
 800c0aa:	e759      	b.n	800bf60 <__kernel_tanf+0x30>
 800c0ac:	3f2ca140 	.word	0x3f2ca140
 800c0b0:	3f490fda 	.word	0x3f490fda
 800c0b4:	33222168 	.word	0x33222168
 800c0b8:	00000000 	.word	0x00000000
 800c0bc:	b79bae5f 	.word	0xb79bae5f
 800c0c0:	38a3f445 	.word	0x38a3f445
 800c0c4:	37d95384 	.word	0x37d95384
 800c0c8:	3a1a26c8 	.word	0x3a1a26c8
 800c0cc:	3b6b6916 	.word	0x3b6b6916
 800c0d0:	3cb327a4 	.word	0x3cb327a4
 800c0d4:	3e088889 	.word	0x3e088889
 800c0d8:	3895c07a 	.word	0x3895c07a
 800c0dc:	398137b9 	.word	0x398137b9
 800c0e0:	3abede48 	.word	0x3abede48
 800c0e4:	3c11371f 	.word	0x3c11371f
 800c0e8:	3d5d0dd1 	.word	0x3d5d0dd1
 800c0ec:	3eaaaaab 	.word	0x3eaaaaab
 800c0f0:	fffff000 	.word	0xfffff000

0800c0f4 <expm1f>:
 800c0f4:	ee10 2a10 	vmov	r2, s0
 800c0f8:	497e      	ldr	r1, [pc, #504]	; (800c2f4 <expm1f+0x200>)
 800c0fa:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c0fe:	428b      	cmp	r3, r1
 800c100:	d920      	bls.n	800c144 <expm1f+0x50>
 800c102:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c106:	d902      	bls.n	800c10e <expm1f+0x1a>
 800c108:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c10c:	4770      	bx	lr
 800c10e:	d105      	bne.n	800c11c <expm1f+0x28>
 800c110:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c114:	2a00      	cmp	r2, #0
 800c116:	fe20 0a27 	vselge.f32	s0, s0, s15
 800c11a:	4770      	bx	lr
 800c11c:	2a00      	cmp	r2, #0
 800c11e:	db05      	blt.n	800c12c <expm1f+0x38>
 800c120:	4975      	ldr	r1, [pc, #468]	; (800c2f8 <expm1f+0x204>)
 800c122:	428b      	cmp	r3, r1
 800c124:	d960      	bls.n	800c1e8 <expm1f+0xf4>
 800c126:	2000      	movs	r0, #0
 800c128:	f7fe bf38 	b.w	800af9c <__math_oflowf>
 800c12c:	eddf 7a73 	vldr	s15, [pc, #460]	; 800c2fc <expm1f+0x208>
 800c130:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13c:	d554      	bpl.n	800c1e8 <expm1f+0xf4>
 800c13e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c142:	4770      	bx	lr
 800c144:	496e      	ldr	r1, [pc, #440]	; (800c300 <expm1f+0x20c>)
 800c146:	428b      	cmp	r3, r1
 800c148:	d96a      	bls.n	800c220 <expm1f+0x12c>
 800c14a:	496e      	ldr	r1, [pc, #440]	; (800c304 <expm1f+0x210>)
 800c14c:	428b      	cmp	r3, r1
 800c14e:	d84b      	bhi.n	800c1e8 <expm1f+0xf4>
 800c150:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800c308 <expm1f+0x214>
 800c154:	2a00      	cmp	r2, #0
 800c156:	bfa7      	ittee	ge
 800c158:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800c15c:	eddf 7a6b 	vldrge	s15, [pc, #428]	; 800c30c <expm1f+0x218>
 800c160:	eddf 7a6b 	vldrlt	s15, [pc, #428]	; 800c310 <expm1f+0x21c>
 800c164:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800c168:	bfac      	ite	ge
 800c16a:	2301      	movge	r3, #1
 800c16c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c170:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c174:	ee37 7a40 	vsub.f32	s14, s14, s0
 800c178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c17c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800c180:	ee20 5a25 	vmul.f32	s10, s0, s11
 800c184:	eddf 6a63 	vldr	s13, [pc, #396]	; 800c314 <expm1f+0x220>
 800c188:	ed9f 6a63 	vldr	s12, [pc, #396]	; 800c318 <expm1f+0x224>
 800c18c:	ee20 7a05 	vmul.f32	s14, s0, s10
 800c190:	eea7 6a26 	vfma.f32	s12, s14, s13
 800c194:	eddf 6a61 	vldr	s13, [pc, #388]	; 800c31c <expm1f+0x228>
 800c198:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c19c:	ed9f 6a60 	vldr	s12, [pc, #384]	; 800c320 <expm1f+0x22c>
 800c1a0:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c1a4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c324 <expm1f+0x230>
 800c1a8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c1ac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c1b0:	eef0 4a46 	vmov.f32	s9, s12
 800c1b4:	eee6 4a87 	vfma.f32	s9, s13, s14
 800c1b8:	eef0 6a64 	vmov.f32	s13, s9
 800c1bc:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800c1c0:	eee5 4a66 	vfms.f32	s9, s10, s13
 800c1c4:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800c1c8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800c1cc:	eee0 6a64 	vfms.f32	s13, s0, s9
 800c1d0:	eef0 4a66 	vmov.f32	s9, s13
 800c1d4:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800c1d8:	ee66 6a87 	vmul.f32	s13, s13, s14
 800c1dc:	bb73      	cbnz	r3, 800c23c <expm1f+0x148>
 800c1de:	eef0 7a47 	vmov.f32	s15, s14
 800c1e2:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800c1e6:	e024      	b.n	800c232 <expm1f+0x13e>
 800c1e8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800c1ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c1f0:	2a00      	cmp	r2, #0
 800c1f2:	fe67 7a87 	vselge.f32	s15, s15, s14
 800c1f6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c328 <expm1f+0x234>
 800c1fa:	eddf 6a44 	vldr	s13, [pc, #272]	; 800c30c <expm1f+0x218>
 800c1fe:	ee40 7a07 	vmla.f32	s15, s0, s14
 800c202:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800c308 <expm1f+0x214>
 800c206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c20a:	ee17 3a90 	vmov	r3, s15
 800c20e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c212:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c216:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c21a:	eeb0 7a40 	vmov.f32	s14, s0
 800c21e:	e7a7      	b.n	800c170 <expm1f+0x7c>
 800c220:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800c224:	d208      	bcs.n	800c238 <expm1f+0x144>
 800c226:	eddf 7a41 	vldr	s15, [pc, #260]	; 800c32c <expm1f+0x238>
 800c22a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c22e:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800c232:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c236:	4770      	bx	lr
 800c238:	2300      	movs	r3, #0
 800c23a:	e79f      	b.n	800c17c <expm1f+0x88>
 800c23c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800c246:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c24a:	d106      	bne.n	800c25a <expm1f+0x166>
 800c24c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c250:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800c254:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800c258:	4770      	bx	lr
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d118      	bne.n	800c290 <expm1f+0x19c>
 800c25e:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800c262:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c26a:	bf41      	itttt	mi
 800c26c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800c270:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800c274:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800c278:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800c27c:	bf5f      	itttt	pl
 800c27e:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800c282:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800c286:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800c28a:	eeb0 0a46 	vmovpl.f32	s0, s12
 800c28e:	4770      	bx	lr
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	2a39      	cmp	r2, #57	; 0x39
 800c294:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800c298:	d90b      	bls.n	800c2b2 <expm1f+0x1be>
 800c29a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c29e:	ee36 0a40 	vsub.f32	s0, s12, s0
 800c2a2:	ee10 3a10 	vmov	r3, s0
 800c2a6:	440b      	add	r3, r1
 800c2a8:	ee00 3a10 	vmov	s0, r3
 800c2ac:	ee30 0a46 	vsub.f32	s0, s0, s12
 800c2b0:	4770      	bx	lr
 800c2b2:	2b16      	cmp	r3, #22
 800c2b4:	dc11      	bgt.n	800c2da <expm1f+0x1e6>
 800c2b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c2ba:	fa42 f303 	asr.w	r3, r2, r3
 800c2be:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800c2c2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c2c6:	ee07 3a90 	vmov	s15, r3
 800c2ca:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c2ce:	ee10 3a10 	vmov	r3, s0
 800c2d2:	440b      	add	r3, r1
 800c2d4:	ee00 3a10 	vmov	s0, r3
 800c2d8:	4770      	bx	lr
 800c2da:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800c2de:	05db      	lsls	r3, r3, #23
 800c2e0:	ee07 3a10 	vmov	s14, r3
 800c2e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2e8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c2ec:	ee30 0a06 	vadd.f32	s0, s0, s12
 800c2f0:	e7ed      	b.n	800c2ce <expm1f+0x1da>
 800c2f2:	bf00      	nop
 800c2f4:	4195b843 	.word	0x4195b843
 800c2f8:	42b17217 	.word	0x42b17217
 800c2fc:	0da24260 	.word	0x0da24260
 800c300:	3eb17218 	.word	0x3eb17218
 800c304:	3f851591 	.word	0x3f851591
 800c308:	3f317180 	.word	0x3f317180
 800c30c:	3717f7d1 	.word	0x3717f7d1
 800c310:	b717f7d1 	.word	0xb717f7d1
 800c314:	b457edbb 	.word	0xb457edbb
 800c318:	36867e54 	.word	0x36867e54
 800c31c:	b8a670cd 	.word	0xb8a670cd
 800c320:	3ad00d01 	.word	0x3ad00d01
 800c324:	bd088889 	.word	0xbd088889
 800c328:	3fb8aa3b 	.word	0x3fb8aa3b
 800c32c:	7149f2ca 	.word	0x7149f2ca

0800c330 <finitef>:
 800c330:	b082      	sub	sp, #8
 800c332:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c336:	9801      	ldr	r0, [sp, #4]
 800c338:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c33c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c340:	bfac      	ite	ge
 800c342:	2000      	movge	r0, #0
 800c344:	2001      	movlt	r0, #1
 800c346:	b002      	add	sp, #8
 800c348:	4770      	bx	lr
	...

0800c34c <floorf>:
 800c34c:	ee10 3a10 	vmov	r3, s0
 800c350:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c354:	3a7f      	subs	r2, #127	; 0x7f
 800c356:	2a16      	cmp	r2, #22
 800c358:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c35c:	dc2a      	bgt.n	800c3b4 <floorf+0x68>
 800c35e:	2a00      	cmp	r2, #0
 800c360:	da11      	bge.n	800c386 <floorf+0x3a>
 800c362:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c3c4 <floorf+0x78>
 800c366:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c36a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c372:	dd05      	ble.n	800c380 <floorf+0x34>
 800c374:	2b00      	cmp	r3, #0
 800c376:	da23      	bge.n	800c3c0 <floorf+0x74>
 800c378:	4a13      	ldr	r2, [pc, #76]	; (800c3c8 <floorf+0x7c>)
 800c37a:	2900      	cmp	r1, #0
 800c37c:	bf18      	it	ne
 800c37e:	4613      	movne	r3, r2
 800c380:	ee00 3a10 	vmov	s0, r3
 800c384:	4770      	bx	lr
 800c386:	4911      	ldr	r1, [pc, #68]	; (800c3cc <floorf+0x80>)
 800c388:	4111      	asrs	r1, r2
 800c38a:	420b      	tst	r3, r1
 800c38c:	d0fa      	beq.n	800c384 <floorf+0x38>
 800c38e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c3c4 <floorf+0x78>
 800c392:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c396:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c39e:	ddef      	ble.n	800c380 <floorf+0x34>
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	bfbe      	ittt	lt
 800c3a4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c3a8:	fa40 f202 	asrlt.w	r2, r0, r2
 800c3ac:	189b      	addlt	r3, r3, r2
 800c3ae:	ea23 0301 	bic.w	r3, r3, r1
 800c3b2:	e7e5      	b.n	800c380 <floorf+0x34>
 800c3b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c3b8:	d3e4      	bcc.n	800c384 <floorf+0x38>
 800c3ba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c3be:	4770      	bx	lr
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	e7dd      	b.n	800c380 <floorf+0x34>
 800c3c4:	7149f2ca 	.word	0x7149f2ca
 800c3c8:	bf800000 	.word	0xbf800000
 800c3cc:	007fffff 	.word	0x007fffff

0800c3d0 <nanf>:
 800c3d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c3d8 <nanf+0x8>
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	7fc00000 	.word	0x7fc00000

0800c3dc <scalbnf>:
 800c3dc:	ee10 3a10 	vmov	r3, s0
 800c3e0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c3e4:	d024      	beq.n	800c430 <scalbnf+0x54>
 800c3e6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c3ea:	d302      	bcc.n	800c3f2 <scalbnf+0x16>
 800c3ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c3f0:	4770      	bx	lr
 800c3f2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c3f6:	d121      	bne.n	800c43c <scalbnf+0x60>
 800c3f8:	4b29      	ldr	r3, [pc, #164]	; (800c4a0 <scalbnf+0xc4>)
 800c3fa:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800c4a4 <scalbnf+0xc8>
 800c3fe:	4298      	cmp	r0, r3
 800c400:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c404:	db15      	blt.n	800c432 <scalbnf+0x56>
 800c406:	ee10 3a10 	vmov	r3, s0
 800c40a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c40e:	3a19      	subs	r2, #25
 800c410:	4402      	add	r2, r0
 800c412:	2afe      	cmp	r2, #254	; 0xfe
 800c414:	dd14      	ble.n	800c440 <scalbnf+0x64>
 800c416:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c4a8 <scalbnf+0xcc>
 800c41a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c4ac <scalbnf+0xd0>
 800c41e:	ee10 3a10 	vmov	r3, s0
 800c422:	eeb0 7a67 	vmov.f32	s14, s15
 800c426:	2b00      	cmp	r3, #0
 800c428:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800c42c:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c430:	4770      	bx	lr
 800c432:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c4b0 <scalbnf+0xd4>
 800c436:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c43a:	4770      	bx	lr
 800c43c:	0dd2      	lsrs	r2, r2, #23
 800c43e:	e7e7      	b.n	800c410 <scalbnf+0x34>
 800c440:	2a00      	cmp	r2, #0
 800c442:	dd06      	ble.n	800c452 <scalbnf+0x76>
 800c444:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c448:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c44c:	ee00 3a10 	vmov	s0, r3
 800c450:	4770      	bx	lr
 800c452:	f112 0f16 	cmn.w	r2, #22
 800c456:	da19      	bge.n	800c48c <scalbnf+0xb0>
 800c458:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c45c:	4298      	cmp	r0, r3
 800c45e:	ee10 3a10 	vmov	r3, s0
 800c462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c466:	dd09      	ble.n	800c47c <scalbnf+0xa0>
 800c468:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800c4a8 <scalbnf+0xcc>
 800c46c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800c4ac <scalbnf+0xd0>
 800c470:	eef0 7a40 	vmov.f32	s15, s0
 800c474:	2b00      	cmp	r3, #0
 800c476:	fe00 0a07 	vseleq.f32	s0, s0, s14
 800c47a:	e7dc      	b.n	800c436 <scalbnf+0x5a>
 800c47c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c4b0 <scalbnf+0xd4>
 800c480:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c4b4 <scalbnf+0xd8>
 800c484:	eef0 7a40 	vmov.f32	s15, s0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	e7f4      	b.n	800c476 <scalbnf+0x9a>
 800c48c:	3219      	adds	r2, #25
 800c48e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c492:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c496:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c4b8 <scalbnf+0xdc>
 800c49a:	ee07 3a10 	vmov	s14, r3
 800c49e:	e7c5      	b.n	800c42c <scalbnf+0x50>
 800c4a0:	ffff3cb0 	.word	0xffff3cb0
 800c4a4:	4c000000 	.word	0x4c000000
 800c4a8:	7149f2ca 	.word	0x7149f2ca
 800c4ac:	f149f2ca 	.word	0xf149f2ca
 800c4b0:	0da24260 	.word	0x0da24260
 800c4b4:	8da24260 	.word	0x8da24260
 800c4b8:	33000000 	.word	0x33000000

0800c4bc <_init>:
 800c4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4be:	bf00      	nop
 800c4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4c2:	bc08      	pop	{r3}
 800c4c4:	469e      	mov	lr, r3
 800c4c6:	4770      	bx	lr

0800c4c8 <_fini>:
 800c4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ca:	bf00      	nop
 800c4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ce:	bc08      	pop	{r3}
 800c4d0:	469e      	mov	lr, r3
 800c4d2:	4770      	bx	lr

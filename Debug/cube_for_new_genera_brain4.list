
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9ec  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  0800bc88  0800bc88  0001bc88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c498  0800c498  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c498  0800c498  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c498  0800c498  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c498  0800c498  0001c498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c49c  0800c49c  0001c49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800c4a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019d30  200000a8  0800c548  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20019dd8  0800c548  00029dd8  2**0
                  ALLOC
 11 .RAM_D1       0007ef40  24000000  24000000  00030000  2**5
                  ALLOC
 12 .RAM_D2       000041a0  30000000  30000000  00030000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00030000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 15 .debug_info   00056b86  00000000  00000000  000200d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 000087e6  00000000  00000000  00076c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0002953d  00000000  00000000  0007f442  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00002028  00000000  00000000  000a8980  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00007058  00000000  00000000  000aa9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0003f435  00000000  00000000  000b1a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00028c4f  00000000  00000000  000f0e35  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0017a728  00000000  00000000  00119a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  002941ac  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00007838  00000000  00000000  00294228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200000a8 	.word	0x200000a8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bc6c 	.word	0x0800bc6c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200000ac 	.word	0x200000ac
 80002d4:	0800bc6c 	.word	0x0800bc6c

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_InitTick+0x40>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <HAL_InitTick+0x44>)
 80002e8:	fbb2 f3f3 	udiv	r3, r2, r3
{
 80002ec:	b510      	push	{r4, lr}
 80002ee:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002f0:	6808      	ldr	r0, [r1, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 fe51 	bl	8000f9c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fa:	2c0f      	cmp	r4, #15
 80002fc:	d800      	bhi.n	8000300 <HAL_InitTick+0x28>
 80002fe:	b108      	cbz	r0, 8000304 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
}
 8000302:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 fe02 	bl	8000f14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <HAL_InitTick+0x48>)
 8000312:	2000      	movs	r0, #0
 8000314:	601c      	str	r4, [r3, #0]
}
 8000316:	bd10      	pop	{r4, pc}
 8000318:	20000000 	.word	0x20000000
 800031c:	20000038 	.word	0x20000038
 8000320:	20000004 	.word	0x20000004

08000324 <HAL_Init>:
{
 8000324:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
{
 8000328:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800032a:	f000 fddf 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800032e:	4c12      	ldr	r4, [pc, #72]	; (8000378 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000330:	f002 ff10 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8000334:	4a11      	ldr	r2, [pc, #68]	; (800037c <HAL_Init+0x58>)
 8000336:	4912      	ldr	r1, [pc, #72]	; (8000380 <HAL_Init+0x5c>)
 8000338:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800033a:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800033c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8000340:	4d10      	ldr	r5, [pc, #64]	; (8000384 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000342:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000346:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000348:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800034a:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800034e:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000352:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000356:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000358:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800035c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800035e:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000360:	f7ff ffba 	bl	80002d8 <HAL_InitTick>
 8000364:	b110      	cbz	r0, 800036c <HAL_Init+0x48>
    return HAL_ERROR;
 8000366:	2001      	movs	r0, #1
}
 8000368:	b003      	add	sp, #12
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 800036e:	f009 f847 	bl	8009400 <HAL_MspInit>
  return HAL_OK;
 8000372:	9801      	ldr	r0, [sp, #4]
}
 8000374:	b003      	add	sp, #12
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	2000003c 	.word	0x2000003c
 800037c:	58024400 	.word	0x58024400
 8000380:	0800bca4 	.word	0x0800bca4
 8000384:	20000038 	.word	0x20000038

08000388 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000388:	4a03      	ldr	r2, [pc, #12]	; (8000398 <HAL_IncTick+0x10>)
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <HAL_IncTick+0x14>)
 800038c:	6811      	ldr	r1, [r2, #0]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	440b      	add	r3, r1
 8000392:	6013      	str	r3, [r2, #0]
}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000138 	.word	0x20000138
 800039c:	20000000 	.word	0x20000000

080003a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003a0:	4b01      	ldr	r3, [pc, #4]	; (80003a8 <HAL_GetTick+0x8>)
 80003a2:	6818      	ldr	r0, [r3, #0]
}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20000138 	.word	0x20000138

080003ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003ac:	b538      	push	{r3, r4, r5, lr}
 80003ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003b0:	f7ff fff6 	bl	80003a0 <HAL_GetTick>
 80003b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b6:	1c63      	adds	r3, r4, #1
 80003b8:	d002      	beq.n	80003c0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <HAL_Delay+0x20>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003c0:	f7ff ffee 	bl	80003a0 <HAL_GetTick>
 80003c4:	1b40      	subs	r0, r0, r5
 80003c6:	42a0      	cmp	r0, r4
 80003c8:	d3fa      	bcc.n	80003c0 <HAL_Delay+0x14>
  {
  }
}
 80003ca:	bd38      	pop	{r3, r4, r5, pc}
 80003cc:	20000000 	.word	0x20000000

080003d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003d0:	4b01      	ldr	r3, [pc, #4]	; (80003d8 <HAL_GetREVID+0x8>)
 80003d2:	6818      	ldr	r0, [r3, #0]
}
 80003d4:	0c00      	lsrs	r0, r0, #16
 80003d6:	4770      	bx	lr
 80003d8:	5c001000 	.word	0x5c001000

080003dc <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <HAL_SetFMCMemorySwappingConfig+0x10>)
 80003de:	6813      	ldr	r3, [r2, #0]
 80003e0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80003e4:	4318      	orrs	r0, r3
 80003e6:	6010      	str	r0, [r2, #0]
}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	52004000 	.word	0x52004000

080003f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80003f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80003f4:	4c61      	ldr	r4, [pc, #388]	; (800057c <HAL_ADC_Start_DMA+0x18c>)
 80003f6:	6805      	ldr	r5, [r0, #0]
 80003f8:	42a5      	cmp	r5, r4
 80003fa:	d030      	beq.n	800045e <HAL_ADC_Start_DMA+0x6e>
 80003fc:	4b60      	ldr	r3, [pc, #384]	; (8000580 <HAL_ADC_Start_DMA+0x190>)
 80003fe:	429d      	cmp	r5, r3
 8000400:	d02d      	beq.n	800045e <HAL_ADC_Start_DMA+0x6e>
 8000402:	4c60      	ldr	r4, [pc, #384]	; (8000584 <HAL_ADC_Start_DMA+0x194>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000404:	68a6      	ldr	r6, [r4, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000406:	68ac      	ldr	r4, [r5, #8]
 8000408:	0764      	lsls	r4, r4, #29
 800040a:	d42d      	bmi.n	8000468 <HAL_ADC_Start_DMA+0x78>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800040c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000410:	2b01      	cmp	r3, #1
 8000412:	d029      	beq.n	8000468 <HAL_ADC_Start_DMA+0x78>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000414:	f006 061f 	and.w	r6, r6, #31
 8000418:	2301      	movs	r3, #1
 800041a:	4690      	mov	r8, r2
 800041c:	460f      	mov	r7, r1

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800041e:	2e09      	cmp	r6, #9
 8000420:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8000422:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000426:	d905      	bls.n	8000434 <HAL_ADC_Start_DMA+0x44>
        LL_ADC_REG_StartConversion(hadc->Instance);
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000428:	2300      	movs	r3, #0
 800042a:	2001      	movs	r0, #1
 800042c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = HAL_BUSY;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000434:	f240 2321 	movw	r3, #545	; 0x221
 8000438:	40f3      	lsrs	r3, r6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800043a:	07db      	lsls	r3, r3, #31
 800043c:	d5f4      	bpl.n	8000428 <HAL_ADC_Start_DMA+0x38>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800043e:	68ab      	ldr	r3, [r5, #8]
 8000440:	07d8      	lsls	r0, r3, #31
 8000442:	d414      	bmi.n	800046e <HAL_ADC_Start_DMA+0x7e>
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000444:	68aa      	ldr	r2, [r5, #8]
 8000446:	4b50      	ldr	r3, [pc, #320]	; (8000588 <HAL_ADC_Start_DMA+0x198>)
 8000448:	421a      	tst	r2, r3
 800044a:	d055      	beq.n	80004f8 <HAL_ADC_Start_DMA+0x108>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800044c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800044e:	f043 0310 	orr.w	r3, r3, #16
 8000452:	6563      	str	r3, [r4, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000454:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	65a3      	str	r3, [r4, #88]	; 0x58
 800045c:	e7e4      	b.n	8000428 <HAL_ADC_Start_DMA+0x38>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800045e:	4c4b      	ldr	r4, [pc, #300]	; (800058c <HAL_ADC_Start_DMA+0x19c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000460:	68a6      	ldr	r6, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000462:	68ac      	ldr	r4, [r5, #8]
 8000464:	0764      	lsls	r4, r4, #29
 8000466:	d5d1      	bpl.n	800040c <HAL_ADC_Start_DMA+0x1c>
    tmp_hal_status = HAL_BUSY;
 8000468:	2002      	movs	r0, #2
}
 800046a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800046e:	4b44      	ldr	r3, [pc, #272]	; (8000580 <HAL_ADC_Start_DMA+0x190>)
 8000470:	1aed      	subs	r5, r5, r3
 8000472:	bf18      	it	ne
 8000474:	2501      	movne	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000476:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000478:	4b45      	ldr	r3, [pc, #276]	; (8000590 <HAL_ADC_Start_DMA+0x1a0>)
 800047a:	4013      	ands	r3, r2
 800047c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000480:	6563      	str	r3, [r4, #84]	; 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000482:	b106      	cbz	r6, 8000486 <HAL_ADC_Start_DMA+0x96>
 8000484:	b11d      	cbz	r5, 800048e <HAL_ADC_Start_DMA+0x9e>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000486:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000488:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800048c:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800048e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000490:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8000494:	d02e      	beq.n	80004f4 <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000496:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000498:	f023 0306 	bic.w	r3, r3, #6
 800049c:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800049e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004a0:	251c      	movs	r5, #28
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80004a2:	483c      	ldr	r0, [pc, #240]	; (8000594 <HAL_ADC_Start_DMA+0x1a4>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80004a4:	4643      	mov	r3, r8
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80004a6:	4e3c      	ldr	r6, [pc, #240]	; (8000598 <HAL_ADC_Start_DMA+0x1a8>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80004a8:	463a      	mov	r2, r7
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80004aa:	63c8      	str	r0, [r1, #60]	; 0x3c
        __HAL_UNLOCK(hadc);
 80004ac:	2100      	movs	r1, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80004ae:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80004b0:	6406      	str	r6, [r0, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80004b2:	4e3a      	ldr	r6, [pc, #232]	; (800059c <HAL_ADC_Start_DMA+0x1ac>)
 80004b4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80004b6:	64c6      	str	r6, [r0, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004b8:	6820      	ldr	r0, [r4, #0]
 80004ba:	6005      	str	r5, [r0, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80004bc:	6820      	ldr	r0, [r4, #0]
        __HAL_UNLOCK(hadc);
 80004be:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80004c2:	6841      	ldr	r1, [r0, #4]
 80004c4:	f041 0110 	orr.w	r1, r1, #16
 80004c8:	6041      	str	r1, [r0, #4]
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80004ca:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80004cc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80004ce:	68c1      	ldr	r1, [r0, #12]
 80004d0:	f021 0103 	bic.w	r1, r1, #3
 80004d4:	4329      	orrs	r1, r5
 80004d6:	60c1      	str	r1, [r0, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80004d8:	6821      	ldr	r1, [r4, #0]
 80004da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80004dc:	3140      	adds	r1, #64	; 0x40
 80004de:	f001 f913 	bl	8001708 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80004e2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80004e4:	4b2e      	ldr	r3, [pc, #184]	; (80005a0 <HAL_ADC_Start_DMA+0x1b0>)
 80004e6:	6891      	ldr	r1, [r2, #8]
 80004e8:	400b      	ands	r3, r1
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6093      	str	r3, [r2, #8]
}
 80004f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          ADC_CLEAR_ERRORCODE(hadc);
 80004f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80004f6:	e7d2      	b.n	800049e <HAL_ADC_Start_DMA+0xae>
  MODIFY_REG(ADCx->CR,
 80004f8:	68aa      	ldr	r2, [r5, #8]
 80004fa:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <HAL_ADC_Start_DMA+0x1b0>)
 80004fc:	4013      	ands	r3, r2
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8000504:	f7ff ff4c 	bl	80003a0 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000508:	6823      	ldr	r3, [r4, #0]
 800050a:	4a1c      	ldr	r2, [pc, #112]	; (800057c <HAL_ADC_Start_DMA+0x18c>)
    tickstart = HAL_GetTick();
 800050c:	4681      	mov	r9, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800050e:	4293      	cmp	r3, r2
 8000510:	d020      	beq.n	8000554 <HAL_ADC_Start_DMA+0x164>
 8000512:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000516:	4293      	cmp	r3, r2
 8000518:	d01c      	beq.n	8000554 <HAL_ADC_Start_DMA+0x164>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800051a:	4a1a      	ldr	r2, [pc, #104]	; (8000584 <HAL_ADC_Start_DMA+0x194>)
 800051c:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(ADCx->CR,
 800051e:	4d20      	ldr	r5, [pc, #128]	; (80005a0 <HAL_ADC_Start_DMA+0x1b0>)
 8000520:	e00b      	b.n	800053a <HAL_ADC_Start_DMA+0x14a>
 8000522:	689a      	ldr	r2, [r3, #8]
 8000524:	402a      	ands	r2, r5
 8000526:	f042 0201 	orr.w	r2, r2, #1
 800052a:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800052c:	f7ff ff38 	bl	80003a0 <HAL_GetTick>
 8000530:	eba0 0009 	sub.w	r0, r0, r9
 8000534:	2802      	cmp	r0, #2
 8000536:	d889      	bhi.n	800044c <HAL_ADC_Start_DMA+0x5c>
 8000538:	6823      	ldr	r3, [r4, #0]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	07d2      	lsls	r2, r2, #31
 800053e:	d418      	bmi.n	8000572 <HAL_ADC_Start_DMA+0x182>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000540:	689a      	ldr	r2, [r3, #8]
 8000542:	07d1      	lsls	r1, r2, #31
 8000544:	d5ed      	bpl.n	8000522 <HAL_ADC_Start_DMA+0x132>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000546:	f7ff ff2b 	bl	80003a0 <HAL_GetTick>
 800054a:	eba0 0009 	sub.w	r0, r0, r9
 800054e:	2802      	cmp	r0, #2
 8000550:	d9f2      	bls.n	8000538 <HAL_ADC_Start_DMA+0x148>
 8000552:	e77b      	b.n	800044c <HAL_ADC_Start_DMA+0x5c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000554:	490d      	ldr	r1, [pc, #52]	; (800058c <HAL_ADC_Start_DMA+0x19c>)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <HAL_ADC_Start_DMA+0x190>)
 8000558:	6889      	ldr	r1, [r1, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800055a:	f011 0f1f 	tst.w	r1, #31
 800055e:	bf0c      	ite	eq
 8000560:	2501      	moveq	r5, #1
 8000562:	2500      	movne	r5, #0
 8000564:	4293      	cmp	r3, r2
 8000566:	bf18      	it	ne
 8000568:	f045 0501 	orrne.w	r5, r5, #1
 800056c:	2d00      	cmp	r5, #0
 800056e:	d1d6      	bne.n	800051e <HAL_ADC_Start_DMA+0x12e>
 8000570:	e781      	b.n	8000476 <HAL_ADC_Start_DMA+0x86>
 8000572:	4d03      	ldr	r5, [pc, #12]	; (8000580 <HAL_ADC_Start_DMA+0x190>)
 8000574:	1b5d      	subs	r5, r3, r5
 8000576:	bf18      	it	ne
 8000578:	2501      	movne	r5, #1
 800057a:	e77c      	b.n	8000476 <HAL_ADC_Start_DMA+0x86>
 800057c:	40022000 	.word	0x40022000
 8000580:	40022100 	.word	0x40022100
 8000584:	58026300 	.word	0x58026300
 8000588:	8000003f 	.word	0x8000003f
 800058c:	40022300 	.word	0x40022300
 8000590:	fffff0fe 	.word	0xfffff0fe
 8000594:	080005b5 	.word	0x080005b5
 8000598:	080005a5 	.word	0x080005a5
 800059c:	0800061d 	.word	0x0800061d
 80005a0:	7fffffc0 	.word	0x7fffffc0

080005a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80005a4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80005a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80005a8:	f008 fbe0 	bl	8008d6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80005ac:	bd08      	pop	{r3, pc}
 80005ae:	bf00      	nop

080005b0 <HAL_ADC_ErrorCallback>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <ADC_DMAConvCplt>:
{
 80005b4:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80005b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80005b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005ba:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80005be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80005c0:	d11d      	bne.n	80005fe <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80005c2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80005c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005c8:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80005ca:	680a      	ldr	r2, [r1, #0]
 80005cc:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80005d0:	68ca      	ldr	r2, [r1, #12]
 80005d2:	d01b      	beq.n	800060c <ADC_DMAConvCplt+0x58>
 80005d4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80005d8:	d10d      	bne.n	80005f6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80005da:	68ca      	ldr	r2, [r1, #12]
 80005dc:	0494      	lsls	r4, r2, #18
 80005de:	d40a      	bmi.n	80005f6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80005e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005e6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80005e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005ea:	04d1      	lsls	r1, r2, #19
 80005ec:	d403      	bmi.n	80005f6 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80005ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005f0:	f042 0201 	orr.w	r2, r2, #1
 80005f4:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80005f6:	4618      	mov	r0, r3
 80005f8:	f008 fbb4 	bl	8008d64 <HAL_ADC_ConvCpltCallback>
}
 80005fc:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80005fe:	06d2      	lsls	r2, r2, #27
 8000600:	d407      	bmi.n	8000612 <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800060c:	0790      	lsls	r0, r2, #30
 800060e:	d1f2      	bne.n	80005f6 <ADC_DMAConvCplt+0x42>
 8000610:	e7e6      	b.n	80005e0 <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ffcc 	bl	80005b0 <HAL_ADC_ErrorCallback>
}
 8000618:	bd10      	pop	{r4, pc}
 800061a:	bf00      	nop

0800061c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800061c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800061e:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000620:	6d5a      	ldr	r2, [r3, #84]	; 0x54

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000622:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000628:	655a      	str	r2, [r3, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800062a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800062c:	f042 0204 	orr.w	r2, r2, #4
 8000630:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 8000632:	f7ff ffbd 	bl	80005b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000636:	bd08      	pop	{r3, pc}

08000638 <HAL_ADC_ConfigChannel>:
{
 8000638:	4603      	mov	r3, r0
  __IO uint32_t wait_loop_index = 0;
 800063a:	2000      	movs	r0, #0
{
 800063c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800063e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
{
 8000642:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 8000644:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 8000646:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8000648:	f000 8130 	beq.w	80008ac <HAL_ADC_ConfigChannel+0x274>
 800064c:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800064e:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8000650:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000654:	68a2      	ldr	r2, [r4, #8]
 8000656:	0757      	lsls	r7, r2, #29
 8000658:	d443      	bmi.n	80006e2 <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800065a:	680a      	ldr	r2, [r1, #0]
 800065c:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8000660:	2d00      	cmp	r5, #0
 8000662:	f040 80a2 	bne.w	80007aa <HAL_ADC_ConfigChannel+0x172>
 8000666:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800066a:	4090      	lsls	r0, r2
 800066c:	69e2      	ldr	r2, [r4, #28]
  MODIFY_REG(*preg,
 800066e:	271f      	movs	r7, #31
 8000670:	4310      	orrs	r0, r2
 8000672:	61e0      	str	r0, [r4, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000674:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000676:	681c      	ldr	r4, [r3, #0]
 8000678:	0985      	lsrs	r5, r0, #6
  MODIFY_REG(*preg,
 800067a:	680a      	ldr	r2, [r1, #0]
 800067c:	4038      	ands	r0, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800067e:	3430      	adds	r4, #48	; 0x30
 8000680:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8000684:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000688:	4087      	lsls	r7, r0
 800068a:	592e      	ldr	r6, [r5, r4]
 800068c:	4082      	lsls	r2, r0
 800068e:	ea26 0007 	bic.w	r0, r6, r7
 8000692:	4302      	orrs	r2, r0
 8000694:	512a      	str	r2, [r5, r4]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000696:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000698:	6890      	ldr	r0, [r2, #8]
 800069a:	0746      	lsls	r6, r0, #29
 800069c:	f100 8083 	bmi.w	80007a6 <HAL_ADC_ConfigChannel+0x16e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006a0:	6895      	ldr	r5, [r2, #8]
 80006a2:	f015 0508 	ands.w	r5, r5, #8
 80006a6:	d026      	beq.n	80006f6 <HAL_ADC_ConfigChannel+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006a8:	6890      	ldr	r0, [r2, #8]
 80006aa:	07c5      	lsls	r5, r0, #31
 80006ac:	d417      	bmi.n	80006de <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCx->DIFSEL,
 80006ae:	68cc      	ldr	r4, [r1, #12]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80006b0:	680e      	ldr	r6, [r1, #0]
 80006b2:	f004 0518 	and.w	r5, r4, #24
 80006b6:	48bf      	ldr	r0, [pc, #764]	; (80009b4 <HAL_ADC_ConfigChannel+0x37c>)
 80006b8:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
 80006bc:	40e8      	lsrs	r0, r5
 80006be:	f3c6 0513 	ubfx	r5, r6, #0, #20
 80006c2:	4030      	ands	r0, r6
 80006c4:	ea24 0405 	bic.w	r4, r4, r5
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80006c8:	4dbb      	ldr	r5, [pc, #748]	; (80009b8 <HAL_ADC_ConfigChannel+0x380>)
 80006ca:	4320      	orrs	r0, r4
 80006cc:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
 80006d0:	68ca      	ldr	r2, [r1, #12]
 80006d2:	42aa      	cmp	r2, r5
 80006d4:	f000 80a3 	beq.w	800081e <HAL_ADC_ConfigChannel+0x1e6>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80006d8:	6809      	ldr	r1, [r1, #0]
 80006da:	2900      	cmp	r1, #0
 80006dc:	db6d      	blt.n	80007ba <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006de:	2000      	movs	r0, #0
 80006e0:	e003      	b.n	80006ea <HAL_ADC_ConfigChannel+0xb2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80006e4:	f042 0220 	orr.w	r2, r2, #32
 80006e8:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80006f0:	b002      	add	sp, #8
 80006f2:	bcf0      	pop	{r4, r5, r6, r7}
 80006f4:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80006f6:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80006f8:	3214      	adds	r2, #20
  MODIFY_REG(*preg,
 80006fa:	2007      	movs	r0, #7
 80006fc:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80006fe:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8000700:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000704:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8000708:	fa00 fc04 	lsl.w	ip, r0, r4
 800070c:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000710:	4faa      	ldr	r7, [pc, #680]	; (80009bc <HAL_ADC_ConfigChannel+0x384>)
 8000712:	58b0      	ldr	r0, [r6, r2]
 8000714:	ea20 000c 	bic.w	r0, r0, ip
 8000718:	4320      	orrs	r0, r4
 800071a:	50b0      	str	r0, [r6, r2]
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8000722:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8000726:	f000 80b8 	beq.w	800089a <HAL_ADC_ConfigChannel+0x262>
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	6948      	ldr	r0, [r1, #20]
 800072e:	68d4      	ldr	r4, [r2, #12]
 8000730:	f014 0f10 	tst.w	r4, #16
 8000734:	68d4      	ldr	r4, [r2, #12]
 8000736:	f040 80d9 	bne.w	80008ec <HAL_ADC_ConfigChannel+0x2b4>
 800073a:	f3c4 0482 	ubfx	r4, r4, #2, #3
 800073e:	0064      	lsls	r4, r4, #1
 8000740:	fa00 f404 	lsl.w	r4, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000744:	690e      	ldr	r6, [r1, #16]
 8000746:	6808      	ldr	r0, [r1, #0]
 8000748:	2e04      	cmp	r6, #4
 800074a:	f000 80b3 	beq.w	80008b4 <HAL_ADC_ConfigChannel+0x27c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800074e:	3260      	adds	r2, #96	; 0x60
    MODIFY_REG(*preg,
 8000750:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000754:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8000758:	4320      	orrs	r0, r4
 800075a:	f007 4400 	and.w	r4, r7, #2147483648	; 0x80000000
 800075e:	4320      	orrs	r0, r4
 8000760:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000764:	6818      	ldr	r0, [r3, #0]
 8000766:	7e4e      	ldrb	r6, [r1, #25]
 8000768:	690c      	ldr	r4, [r1, #16]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800076a:	3060      	adds	r0, #96	; 0x60
 800076c:	2e01      	cmp	r6, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800076e:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 8000772:	bf14      	ite	ne
 8000774:	2600      	movne	r6, #0
 8000776:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800077a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800077e:	4332      	orrs	r2, r6
 8000780:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000784:	7e0c      	ldrb	r4, [r1, #24]
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	2c01      	cmp	r4, #1
 800078a:	690a      	ldr	r2, [r1, #16]
 800078c:	d104      	bne.n	8000798 <HAL_ADC_ConfigChannel+0x160>
 800078e:	f002 021f 	and.w	r2, r2, #31
 8000792:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8000796:	4095      	lsls	r5, r2
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000798:	6902      	ldr	r2, [r0, #16]
 800079a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800079e:	4315      	orrs	r5, r2
 80007a0:	6105      	str	r5, [r0, #16]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	e780      	b.n	80006a8 <HAL_ADC_ConfigChannel+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80007a6:	6890      	ldr	r0, [r2, #8]
 80007a8:	e77e      	b.n	80006a8 <HAL_ADC_ConfigChannel+0x70>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007aa:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80007ae:	fab2 f282 	clz	r2, r2
 80007b2:	f002 021f 	and.w	r2, r2, #31
 80007b6:	4090      	lsls	r0, r2
 80007b8:	e758      	b.n	800066c <HAL_ADC_ConfigChannel+0x34>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	4a80      	ldr	r2, [pc, #512]	; (80009c0 <HAL_ADC_ConfigChannel+0x388>)
 80007be:	4290      	cmp	r0, r2
 80007c0:	f000 80c6 	beq.w	8000950 <HAL_ADC_ConfigChannel+0x318>
 80007c4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80007c8:	4290      	cmp	r0, r2
 80007ca:	f000 80c1 	beq.w	8000950 <HAL_ADC_ConfigChannel+0x318>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80007ce:	4e7d      	ldr	r6, [pc, #500]	; (80009c4 <HAL_ADC_ConfigChannel+0x38c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007d0:	4d7d      	ldr	r5, [pc, #500]	; (80009c8 <HAL_ADC_ConfigChannel+0x390>)
 80007d2:	68ac      	ldr	r4, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80007d4:	68b2      	ldr	r2, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007d6:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
 80007da:	43d2      	mvns	r2, r2
 80007dc:	f002 0201 	and.w	r2, r2, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	f000 80c3 	beq.w	800096c <HAL_ADC_ConfigChannel+0x334>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80007e6:	4a79      	ldr	r2, [pc, #484]	; (80009cc <HAL_ADC_ConfigChannel+0x394>)
 80007e8:	4291      	cmp	r1, r2
 80007ea:	f000 80f9 	beq.w	80009e0 <HAL_ADC_ConfigChannel+0x3a8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80007ee:	4a78      	ldr	r2, [pc, #480]	; (80009d0 <HAL_ADC_ConfigChannel+0x398>)
 80007f0:	4291      	cmp	r1, r2
 80007f2:	f000 8117 	beq.w	8000a24 <HAL_ADC_ConfigChannel+0x3ec>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80007f6:	4a77      	ldr	r2, [pc, #476]	; (80009d4 <HAL_ADC_ConfigChannel+0x39c>)
 80007f8:	4291      	cmp	r1, r2
 80007fa:	f47f af70 	bne.w	80006de <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_VREFINT_INSTANCE(hadc))
 80007fe:	0262      	lsls	r2, r4, #9
 8000800:	f53f af6d 	bmi.w	80006de <HAL_ADC_ConfigChannel+0xa6>
 8000804:	4a6f      	ldr	r2, [pc, #444]	; (80009c4 <HAL_ADC_ConfigChannel+0x38c>)
 8000806:	4290      	cmp	r0, r2
 8000808:	f47f af69 	bne.w	80006de <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800080c:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800080e:	f446 0280 	orr.w	r2, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000812:	2000      	movs	r0, #0
 8000814:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000818:	430a      	orrs	r2, r1
 800081a:	60aa      	str	r2, [r5, #8]
 800081c:	e765      	b.n	80006ea <HAL_ADC_ConfigChannel+0xb2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800081e:	6808      	ldr	r0, [r1, #0]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000820:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000822:	f3c0 0213 	ubfx	r2, r0, #0, #20
 8000826:	2a00      	cmp	r2, #0
 8000828:	d066      	beq.n	80008f8 <HAL_ADC_ConfigChannel+0x2c0>
 800082a:	fa90 f2a0 	rbit	r2, r0
 800082e:	fab2 f282 	clz	r2, r2
 8000832:	3201      	adds	r2, #1
 8000834:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000838:	2a09      	cmp	r2, #9
 800083a:	f200 809d 	bhi.w	8000978 <HAL_ADC_ConfigChannel+0x340>
 800083e:	fa90 f2a0 	rbit	r2, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000842:	fab2 f282 	clz	r2, r2
 8000846:	fa90 f5a0 	rbit	r5, r0
 800084a:	2601      	movs	r6, #1
 800084c:	fab5 f585 	clz	r5, r5
 8000850:	3201      	adds	r2, #1
 8000852:	4435      	add	r5, r6
 8000854:	0692      	lsls	r2, r2, #26
 8000856:	f005 051f 	and.w	r5, r5, #31
 800085a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800085e:	fa06 f505 	lsl.w	r5, r6, r5
 8000862:	432a      	orrs	r2, r5
 8000864:	fa90 f0a0 	rbit	r0, r0
 8000868:	fab0 f080 	clz	r0, r0
 800086c:	4430      	add	r0, r6
 800086e:	f000 001f 	and.w	r0, r0, #31
 8000872:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000876:	0500      	lsls	r0, r0, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000878:	4310      	orrs	r0, r2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800087a:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 800087c:	2707      	movs	r7, #7
 800087e:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000880:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8000882:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000886:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 800088a:	4087      	lsls	r7, r0
 800088c:	4082      	lsls	r2, r0
 800088e:	5935      	ldr	r5, [r6, r4]
 8000890:	ea25 0007 	bic.w	r0, r5, r7
 8000894:	4310      	orrs	r0, r2
 8000896:	5130      	str	r0, [r6, r4]
 8000898:	e71e      	b.n	80006d8 <HAL_ADC_ConfigChannel+0xa0>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	6948      	ldr	r0, [r1, #20]
 800089e:	68d4      	ldr	r4, [r2, #12]
 80008a0:	f3c4 0482 	ubfx	r4, r4, #2, #3
 80008a4:	0064      	lsls	r4, r4, #1
 80008a6:	fa00 f404 	lsl.w	r4, r0, r4
 80008aa:	e74b      	b.n	8000744 <HAL_ADC_ConfigChannel+0x10c>
  __HAL_LOCK(hadc);
 80008ac:	2002      	movs	r0, #2
}
 80008ae:	b002      	add	sp, #8
 80008b0:	bcf0      	pop	{r4, r5, r6, r7}
 80008b2:	4770      	bx	lr
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008b4:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80008b6:	0680      	lsls	r0, r0, #26
 80008b8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008bc:	4284      	cmp	r4, r0
 80008be:	d03f      	beq.n	8000940 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008c0:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80008c2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008c6:	4284      	cmp	r4, r0
 80008c8:	d032      	beq.n	8000930 <HAL_ADC_ConfigChannel+0x2f8>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008ca:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80008cc:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008d0:	4284      	cmp	r4, r0
 80008d2:	d025      	beq.n	8000920 <HAL_ADC_ConfigChannel+0x2e8>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008d4:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 80008d6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008da:	42a0      	cmp	r0, r4
 80008dc:	f47f aee4 	bne.w	80006a8 <HAL_ADC_ConfigChannel+0x70>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80008e0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80008e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80008e6:	66d0      	str	r0, [r2, #108]	; 0x6c
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	e6dd      	b.n	80006a8 <HAL_ADC_ConfigChannel+0x70>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80008ec:	0864      	lsrs	r4, r4, #1
 80008ee:	f004 0408 	and.w	r4, r4, #8
 80008f2:	fa00 f404 	lsl.w	r4, r0, r4
 80008f6:	e725      	b.n	8000744 <HAL_ADC_ConfigChannel+0x10c>
 80008f8:	2601      	movs	r6, #1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80008fa:	0e80      	lsrs	r0, r0, #26
 80008fc:	4430      	add	r0, r6
 80008fe:	f000 051f 	and.w	r5, r0, #31
 8000902:	0682      	lsls	r2, r0, #26
 8000904:	40ae      	lsls	r6, r5
 8000906:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800090a:	2d09      	cmp	r5, #9
 800090c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8000910:	ea42 0206 	orr.w	r2, r2, r6
 8000914:	d9af      	bls.n	8000876 <HAL_ADC_ConfigChannel+0x23e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000916:	381e      	subs	r0, #30
 8000918:	0500      	lsls	r0, r0, #20
 800091a:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800091e:	e7ab      	b.n	8000878 <HAL_ADC_ConfigChannel+0x240>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000920:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8000922:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000926:	6690      	str	r0, [r2, #104]	; 0x68
 8000928:	6808      	ldr	r0, [r1, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	0680      	lsls	r0, r0, #26
 800092e:	e7d1      	b.n	80008d4 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000930:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8000932:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000936:	6650      	str	r0, [r2, #100]	; 0x64
 8000938:	6808      	ldr	r0, [r1, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	0680      	lsls	r0, r0, #26
 800093e:	e7c4      	b.n	80008ca <HAL_ADC_ConfigChannel+0x292>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000940:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8000942:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000946:	6610      	str	r0, [r2, #96]	; 0x60
 8000948:	6808      	ldr	r0, [r1, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	0680      	lsls	r0, r0, #26
 800094e:	e7b7      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x288>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000950:	4a21      	ldr	r2, [pc, #132]	; (80009d8 <HAL_ADC_ConfigChannel+0x3a0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000952:	4e22      	ldr	r6, [pc, #136]	; (80009dc <HAL_ADC_ConfigChannel+0x3a4>)
 8000954:	4f1a      	ldr	r7, [pc, #104]	; (80009c0 <HAL_ADC_ConfigChannel+0x388>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000956:	4615      	mov	r5, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000958:	6894      	ldr	r4, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800095a:	68bf      	ldr	r7, [r7, #8]
 800095c:	68b2      	ldr	r2, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800095e:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
 8000962:	433a      	orrs	r2, r7
 8000964:	43d2      	mvns	r2, r2
 8000966:	f002 0201 	and.w	r2, r2, #1
 800096a:	e739      	b.n	80007e0 <HAL_ADC_ConfigChannel+0x1a8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800096c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 800096e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000970:	f042 0220 	orr.w	r2, r2, #32
 8000974:	655a      	str	r2, [r3, #84]	; 0x54
 8000976:	e6b8      	b.n	80006ea <HAL_ADC_ConfigChannel+0xb2>
 8000978:	fa90 f2a0 	rbit	r2, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800097c:	fab2 f282 	clz	r2, r2
 8000980:	fa90 f5a0 	rbit	r5, r0
 8000984:	2601      	movs	r6, #1
 8000986:	fab5 f585 	clz	r5, r5
 800098a:	3201      	adds	r2, #1
 800098c:	4435      	add	r5, r6
 800098e:	0692      	lsls	r2, r2, #26
 8000990:	f005 051f 	and.w	r5, r5, #31
 8000994:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000998:	fa06 f505 	lsl.w	r5, r6, r5
 800099c:	432a      	orrs	r2, r5
 800099e:	fa90 f0a0 	rbit	r0, r0
 80009a2:	fab0 f080 	clz	r0, r0
 80009a6:	4430      	add	r0, r6
 80009a8:	f000 001f 	and.w	r0, r0, #31
 80009ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80009b0:	e7b1      	b.n	8000916 <HAL_ADC_ConfigChannel+0x2de>
 80009b2:	bf00      	nop
 80009b4:	000fffff 	.word	0x000fffff
 80009b8:	47ff0000 	.word	0x47ff0000
 80009bc:	5c001000 	.word	0x5c001000
 80009c0:	40022000 	.word	0x40022000
 80009c4:	58026000 	.word	0x58026000
 80009c8:	58026300 	.word	0x58026300
 80009cc:	cb840000 	.word	0xcb840000
 80009d0:	c7520000 	.word	0xc7520000
 80009d4:	cfb80000 	.word	0xcfb80000
 80009d8:	40022300 	.word	0x40022300
 80009dc:	40022100 	.word	0x40022100
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80009e0:	0224      	lsls	r4, r4, #8
 80009e2:	f53f ae7c 	bmi.w	80006de <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <HAL_ADC_ConfigChannel+0x40c>)
 80009e8:	4290      	cmp	r0, r2
 80009ea:	f47f ae78 	bne.w	80006de <HAL_ADC_ConfigChannel+0xa6>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <HAL_ADC_ConfigChannel+0x410>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80009f0:	f446 0100 	orr.w	r1, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009f4:	68a8      	ldr	r0, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 80009fc:	4c13      	ldr	r4, [pc, #76]	; (8000a4c <HAL_ADC_ConfigChannel+0x414>)
 80009fe:	0992      	lsrs	r2, r2, #6
 8000a00:	4301      	orrs	r1, r0
 8000a02:	fba4 0202 	umull	r0, r2, r4, r2
 8000a06:	60a9      	str	r1, [r5, #8]
 8000a08:	0992      	lsrs	r2, r2, #6
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8000a0e:	9a01      	ldr	r2, [sp, #4]
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	f43f ae64 	beq.w	80006de <HAL_ADC_ConfigChannel+0xa6>
                wait_loop_index--;
 8000a16:	9a01      	ldr	r2, [sp, #4]
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8000a1c:	9a01      	ldr	r2, [sp, #4]
 8000a1e:	2a00      	cmp	r2, #0
 8000a20:	d1f9      	bne.n	8000a16 <HAL_ADC_ConfigChannel+0x3de>
 8000a22:	e65c      	b.n	80006de <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000a24:	01e1      	lsls	r1, r4, #7
 8000a26:	f53f ae5a 	bmi.w	80006de <HAL_ADC_ConfigChannel+0xa6>
 8000a2a:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <HAL_ADC_ConfigChannel+0x40c>)
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	f47f ae56 	bne.w	80006de <HAL_ADC_ConfigChannel+0xa6>
 8000a32:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8000a34:	f046 7280 	orr.w	r2, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	60aa      	str	r2, [r5, #8]
 8000a42:	e652      	b.n	80006ea <HAL_ADC_ConfigChannel+0xb2>
 8000a44:	58026000 	.word	0x58026000
 8000a48:	20000038 	.word	0x20000038
 8000a4c:	053e2d63 	.word	0x053e2d63

08000a50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8000a50:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000a52:	4a52      	ldr	r2, [pc, #328]	; (8000b9c <ADC_ConfigureBoostMode+0x14c>)
{
 8000a54:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000a56:	6803      	ldr	r3, [r0, #0]
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d027      	beq.n	8000aac <ADC_ConfigureBoostMode+0x5c>
 8000a5c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d023      	beq.n	8000aac <ADC_ConfigureBoostMode+0x5c>
 8000a64:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <ADC_ConfigureBoostMode+0x150>)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000a6c:	bf14      	ite	ne
 8000a6e:	2301      	movne	r3, #1
 8000a70:	2300      	moveq	r3, #0
 8000a72:	b323      	cbz	r3, 8000abe <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8000a74:	f002 fd2a 	bl	80034cc <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8000a78:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8000a7a:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8000a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a80:	d062      	beq.n	8000b48 <ADC_ConfigureBoostMode+0xf8>
 8000a82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000a86:	d072      	beq.n	8000b6e <ADC_ConfigureBoostMode+0x11e>
 8000a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a8c:	d05c      	beq.n	8000b48 <ADC_ConfigureBoostMode+0xf8>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000a8e:	f7ff fc9f 	bl	80003d0 <HAL_GetREVID>
 8000a92:	f241 0303 	movw	r3, #4099	; 0x1003
 8000a96:	4298      	cmp	r0, r3
 8000a98:	d832      	bhi.n	8000b00 <ADC_ConfigureBoostMode+0xb0>
  {
    if (freq > 20000000UL)
 8000a9a:	4a42      	ldr	r2, [pc, #264]	; (8000ba4 <ADC_ConfigureBoostMode+0x154>)
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	4294      	cmp	r4, r2
 8000aa0:	d928      	bls.n	8000af4 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000aa8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8000aaa:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000aac:	4b3e      	ldr	r3, [pc, #248]	; (8000ba8 <ADC_ConfigureBoostMode+0x158>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000ab4:	bf14      	ite	ne
 8000ab6:	2301      	movne	r3, #1
 8000ab8:	2300      	moveq	r3, #0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1da      	bne.n	8000a74 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000abe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ac2:	f003 fde3 	bl	800468c <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8000ac6:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000ac8:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8000aca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8000ace:	d049      	beq.n	8000b64 <ADC_ConfigureBoostMode+0x114>
 8000ad0:	d93e      	bls.n	8000b50 <ADC_ConfigureBoostMode+0x100>
 8000ad2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8000ad6:	d04e      	beq.n	8000b76 <ADC_ConfigureBoostMode+0x126>
 8000ad8:	d927      	bls.n	8000b2a <ADC_ConfigureBoostMode+0xda>
 8000ada:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8000ade:	d048      	beq.n	8000b72 <ADC_ConfigureBoostMode+0x122>
 8000ae0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8000ae4:	d1d3      	bne.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000ae6:	f7ff fc73 	bl	80003d0 <HAL_GetREVID>
 8000aea:	f241 0303 	movw	r3, #4099	; 0x1003
 8000aee:	4298      	cmp	r0, r3
 8000af0:	d805      	bhi.n	8000afe <ADC_ConfigureBoostMode+0xae>
 8000af2:	682b      	ldr	r3, [r5, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000afa:	609a      	str	r2, [r3, #8]
}
 8000afc:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 8000afe:	0a24      	lsrs	r4, r4, #8
    freq /= 2U; /* divider by 2 for Rev.V */
 8000b00:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8000b02:	4a2a      	ldr	r2, [pc, #168]	; (8000bac <ADC_ConfigureBoostMode+0x15c>)
 8000b04:	682b      	ldr	r3, [r5, #0]
 8000b06:	4294      	cmp	r4, r2
 8000b08:	d90a      	bls.n	8000b20 <ADC_ConfigureBoostMode+0xd0>
    else if (freq <= 12500000UL)
 8000b0a:	4a29      	ldr	r2, [pc, #164]	; (8000bb0 <ADC_ConfigureBoostMode+0x160>)
 8000b0c:	4294      	cmp	r4, r2
 8000b0e:	d914      	bls.n	8000b3a <ADC_ConfigureBoostMode+0xea>
    else if (freq <= 25000000UL)
 8000b10:	4a28      	ldr	r2, [pc, #160]	; (8000bb4 <ADC_ConfigureBoostMode+0x164>)
 8000b12:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000b14:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8000b16:	d932      	bls.n	8000b7e <ADC_ConfigureBoostMode+0x12e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8000b18:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000b1c:	609a      	str	r2, [r3, #8]
}
 8000b1e:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8000b20:	689a      	ldr	r2, [r3, #8]
 8000b22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b26:	609a      	str	r2, [r3, #8]
}
 8000b28:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8000b2a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8000b2e:	d024      	beq.n	8000b7a <ADC_ConfigureBoostMode+0x12a>
 8000b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b34:	d1ab      	bne.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 8000b36:	0944      	lsrs	r4, r0, #5
        break;
 8000b38:	e7a9      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b44:	609a      	str	r2, [r3, #8]
}
 8000b46:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8000b48:	0c1b      	lsrs	r3, r3, #16
 8000b4a:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000b4e:	e79e      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
    switch (hadc->Init.ClockPrescaler)
 8000b50:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000b54:	d006      	beq.n	8000b64 <ADC_ConfigureBoostMode+0x114>
 8000b56:	d818      	bhi.n	8000b8a <ADC_ConfigureBoostMode+0x13a>
 8000b58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000b5c:	d002      	beq.n	8000b64 <ADC_ConfigureBoostMode+0x114>
 8000b5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000b62:	d194      	bne.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8000b64:	0c9b      	lsrs	r3, r3, #18
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000b6c:	e78f      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
        freq /= 4UL;
 8000b6e:	0884      	lsrs	r4, r0, #2
        break;
 8000b70:	e78d      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 8000b72:	09c4      	lsrs	r4, r0, #7
        break;
 8000b74:	e78b      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 8000b76:	0984      	lsrs	r4, r0, #6
        break;
 8000b78:	e789      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
        freq /= 16UL;
 8000b7a:	0904      	lsrs	r4, r0, #4
        break;
 8000b7c:	e787      	b.n	8000a8e <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000b7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b86:	609a      	str	r2, [r3, #8]
}
 8000b88:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8000b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b8e:	d0e9      	beq.n	8000b64 <ADC_ConfigureBoostMode+0x114>
 8000b90:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8000b94:	f47f af7b 	bne.w	8000a8e <ADC_ConfigureBoostMode+0x3e>
 8000b98:	e7e4      	b.n	8000b64 <ADC_ConfigureBoostMode+0x114>
 8000b9a:	bf00      	nop
 8000b9c:	40022000 	.word	0x40022000
 8000ba0:	58026300 	.word	0x58026300
 8000ba4:	01312d00 	.word	0x01312d00
 8000ba8:	40022300 	.word	0x40022300
 8000bac:	005f5e10 	.word	0x005f5e10
 8000bb0:	00bebc20 	.word	0x00bebc20
 8000bb4:	017d7840 	.word	0x017d7840

08000bb8 <HAL_ADC_Init>:
{
 8000bb8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8000bba:	2300      	movs	r3, #0
{
 8000bbc:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8000bbe:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	f000 80ab 	beq.w	8000d1c <HAL_ADC_Init+0x164>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc6:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000bc8:	4604      	mov	r4, r0
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 809b 	beq.w	8000d06 <HAL_ADC_Init+0x14e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000bd0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	0096      	lsls	r6, r2, #2
 8000bd6:	d504      	bpl.n	8000be2 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000bd8:	6899      	ldr	r1, [r3, #8]
 8000bda:	4a78      	ldr	r2, [pc, #480]	; (8000dbc <HAL_ADC_Init+0x204>)
 8000bdc:	400a      	ands	r2, r1
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	00d5      	lsls	r5, r2, #3
 8000be6:	d416      	bmi.n	8000c16 <HAL_ADC_Init+0x5e>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000be8:	4a75      	ldr	r2, [pc, #468]	; (8000dc0 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCx->CR,
 8000bea:	6898      	ldr	r0, [r3, #8]
 8000bec:	6812      	ldr	r2, [r2, #0]
 8000bee:	4d75      	ldr	r5, [pc, #468]	; (8000dc4 <HAL_ADC_Init+0x20c>)
 8000bf0:	0992      	lsrs	r2, r2, #6
 8000bf2:	4975      	ldr	r1, [pc, #468]	; (8000dc8 <HAL_ADC_Init+0x210>)
 8000bf4:	fba5 5202 	umull	r5, r2, r5, r2
 8000bf8:	4001      	ands	r1, r0
 8000bfa:	0992      	lsrs	r2, r2, #6
 8000bfc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000c00:	6099      	str	r1, [r3, #8]
 8000c02:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8000c04:	9b01      	ldr	r3, [sp, #4]
 8000c06:	b12b      	cbz	r3, 8000c14 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8000c08:	9b01      	ldr	r3, [sp, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000c0e:	9b01      	ldr	r3, [sp, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1f9      	bne.n	8000c08 <HAL_ADC_Init+0x50>
 8000c14:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	00d0      	lsls	r0, r2, #3
 8000c1a:	d413      	bmi.n	8000c44 <HAL_ADC_Init+0x8c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c1c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000c1e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c20:	f042 0210 	orr.w	r2, r2, #16
 8000c24:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c26:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000c28:	432a      	orrs	r2, r5
 8000c2a:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	0751      	lsls	r1, r2, #29
 8000c30:	d50c      	bpl.n	8000c4c <HAL_ADC_Init+0x94>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c32:	6d63      	ldr	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c34:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000c36:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c38:	f043 0310 	orr.w	r3, r3, #16
}
 8000c3c:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c3e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000c40:	b002      	add	sp, #8
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
 8000c44:	689a      	ldr	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c46:	2500      	movs	r5, #0
 8000c48:	0751      	lsls	r1, r2, #29
 8000c4a:	d4f2      	bmi.n	8000c32 <HAL_ADC_Init+0x7a>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c4c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c4e:	06d2      	lsls	r2, r2, #27
 8000c50:	d4f0      	bmi.n	8000c34 <HAL_ADC_Init+0x7c>
    ADC_STATE_CLR_SET(hadc->State,
 8000c52:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c54:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000c58:	f042 0202 	orr.w	r2, r2, #2
 8000c5c:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	07d6      	lsls	r6, r2, #31
 8000c62:	d413      	bmi.n	8000c8c <HAL_ADC_Init+0xd4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c64:	4a59      	ldr	r2, [pc, #356]	; (8000dcc <HAL_ADC_Init+0x214>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	f000 8087 	beq.w	8000d7a <HAL_ADC_Init+0x1c2>
 8000c6c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000c70:	4293      	cmp	r3, r2
 8000c72:	f000 8082 	beq.w	8000d7a <HAL_ADC_Init+0x1c2>
 8000c76:	4b56      	ldr	r3, [pc, #344]	; (8000dd0 <HAL_ADC_Init+0x218>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	07d9      	lsls	r1, r3, #31
 8000c7c:	d406      	bmi.n	8000c8c <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c7e:	4a55      	ldr	r2, [pc, #340]	; (8000dd4 <HAL_ADC_Init+0x21c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c80:	6893      	ldr	r3, [r2, #8]
 8000c82:	6861      	ldr	r1, [r4, #4]
 8000c84:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000c8c:	f7ff fba0 	bl	80003d0 <HAL_GetREVID>
 8000c90:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c94:	4298      	cmp	r0, r3
 8000c96:	7d63      	ldrb	r3, [r4, #21]
 8000c98:	7f20      	ldrb	r0, [r4, #28]
 8000c9a:	d961      	bls.n	8000d60 <HAL_ADC_Init+0x1a8>
 8000c9c:	68a6      	ldr	r6, [r4, #8]
 8000c9e:	0359      	lsls	r1, r3, #13
 8000ca0:	0402      	lsls	r2, r0, #16
 8000ca2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ca4:	2e10      	cmp	r6, #16
 8000ca6:	f000 8083 	beq.w	8000db0 <HAL_ADC_Init+0x1f8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000caa:	4313      	orrs	r3, r2
 8000cac:	430b      	orrs	r3, r1
 8000cae:	4333      	orrs	r3, r6
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cb0:	2801      	cmp	r0, #1
 8000cb2:	d103      	bne.n	8000cbc <HAL_ADC_Init+0x104>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000cb4:	6a22      	ldr	r2, [r4, #32]
 8000cb6:	3a01      	subs	r2, #1
 8000cb8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cbe:	b122      	cbz	r2, 8000cca <HAL_ADC_Init+0x112>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cc0:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000cc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000cc6:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cc8:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000cca:	6821      	ldr	r1, [r4, #0]
 8000ccc:	4a42      	ldr	r2, [pc, #264]	; (8000dd8 <HAL_ADC_Init+0x220>)
 8000cce:	68c8      	ldr	r0, [r1, #12]
 8000cd0:	4002      	ands	r2, r0
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cd6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000cde:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ce0:	d101      	bne.n	8000ce6 <HAL_ADC_Init+0x12e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ce2:	0712      	lsls	r2, r2, #28
 8000ce4:	d51e      	bpl.n	8000d24 <HAL_ADC_Init+0x16c>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ce6:	68e2      	ldr	r2, [r4, #12]
 8000ce8:	2a01      	cmp	r2, #1
 8000cea:	d03e      	beq.n	8000d6a <HAL_ADC_Init+0x1b2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cee:	f022 020f 	bic.w	r2, r2, #15
 8000cf2:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000cf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8000cf6:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000cf8:	f023 0303 	bic.w	r3, r3, #3
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000d02:	b002      	add	sp, #8
 8000d04:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8000d06:	f007 f82d 	bl	8007d64 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d0a:	6823      	ldr	r3, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8000d0c:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000d0e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	0096      	lsls	r6, r2, #2
 8000d16:	f57f af64 	bpl.w	8000be2 <HAL_ADC_Init+0x2a>
 8000d1a:	e75d      	b.n	8000bd8 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8000d1c:	2501      	movs	r5, #1
}
 8000d1e:	4628      	mov	r0, r5
 8000d20:	b002      	add	sp, #8
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d24:	68d9      	ldr	r1, [r3, #12]
 8000d26:	4a2d      	ldr	r2, [pc, #180]	; (8000ddc <HAL_ADC_Init+0x224>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d28:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d2e:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8000d32:	430a      	orrs	r2, r1
 8000d34:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000d36:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d026      	beq.n	8000d8c <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d3e:	6822      	ldr	r2, [r4, #0]
 8000d40:	6913      	ldr	r3, [r2, #16]
 8000d42:	f023 0301 	bic.w	r3, r3, #1
 8000d46:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000d48:	6822      	ldr	r2, [r4, #0]
      ADC_ConfigureBoostMode(hadc);
 8000d4a:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d4e:	6913      	ldr	r3, [r2, #16]
 8000d50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d54:	430b      	orrs	r3, r1
 8000d56:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8000d58:	f7ff fe7a 	bl	8000a50 <ADC_ConfigureBoostMode>
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	e7c2      	b.n	8000ce6 <HAL_ADC_Init+0x12e>
 8000d60:	0359      	lsls	r1, r3, #13
 8000d62:	68a6      	ldr	r6, [r4, #8]
 8000d64:	0402      	lsls	r2, r0, #16
 8000d66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d68:	e79f      	b.n	8000caa <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d6c:	69a2      	ldr	r2, [r4, #24]
 8000d6e:	f021 010f 	bic.w	r1, r1, #15
 8000d72:	3a01      	subs	r2, #1
 8000d74:	430a      	orrs	r2, r1
 8000d76:	631a      	str	r2, [r3, #48]	; 0x30
 8000d78:	e7bc      	b.n	8000cf4 <HAL_ADC_Init+0x13c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d7a:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <HAL_ADC_Init+0x214>)
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_ADC_Init+0x228>)
 8000d7e:	6892      	ldr	r2, [r2, #8]
 8000d80:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d82:	4313      	orrs	r3, r2
 8000d84:	07d8      	lsls	r0, r3, #31
 8000d86:	d481      	bmi.n	8000c8c <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d88:	4a16      	ldr	r2, [pc, #88]	; (8000de4 <HAL_ADC_Init+0x22c>)
 8000d8a:	e779      	b.n	8000c80 <HAL_ADC_Init+0xc8>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000d8c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 8000d90:	6820      	ldr	r0, [r4, #0]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8000d96:	6902      	ldr	r2, [r0, #16]
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	4912      	ldr	r1, [pc, #72]	; (8000de8 <HAL_ADC_Init+0x230>)
 8000d9e:	4333      	orrs	r3, r6
 8000da0:	4011      	ands	r1, r2
 8000da2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000da4:	430b      	orrs	r3, r1
 8000da6:	3a01      	subs	r2, #1
 8000da8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dac:	6103      	str	r3, [r0, #16]
 8000dae:	e7cb      	b.n	8000d48 <HAL_ADC_Init+0x190>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000db0:	f043 031c 	orr.w	r3, r3, #28
 8000db4:	430b      	orrs	r3, r1
 8000db6:	4313      	orrs	r3, r2
 8000db8:	e77a      	b.n	8000cb0 <HAL_ADC_Init+0xf8>
 8000dba:	bf00      	nop
 8000dbc:	5fffffc0 	.word	0x5fffffc0
 8000dc0:	20000038 	.word	0x20000038
 8000dc4:	053e2d63 	.word	0x053e2d63
 8000dc8:	6fffffc0 	.word	0x6fffffc0
 8000dcc:	40022000 	.word	0x40022000
 8000dd0:	58026000 	.word	0x58026000
 8000dd4:	58026300 	.word	0x58026300
 8000dd8:	fff0c003 	.word	0xfff0c003
 8000ddc:	ffffbffc 	.word	0xffffbffc
 8000de0:	40022100 	.word	0x40022100
 8000de4:	40022300 	.word	0x40022300
 8000de8:	fc00f81e 	.word	0xfc00f81e

08000dec <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000dec:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8000df0:	2a01      	cmp	r2, #1
 8000df2:	d043      	beq.n	8000e7c <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2001      	movs	r0, #1
{
 8000df8:	b470      	push	{r4, r5, r6}

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000dfa:	4c37      	ldr	r4, [pc, #220]	; (8000ed8 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8000dfe:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000e02:	42a2      	cmp	r2, r4
 8000e04:	d008      	beq.n	8000e18 <HAL_ADCEx_MultiModeConfigChannel+0x2c>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e06:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e08:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e0a:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 8000e0e:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e12:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8000e14:	bc70      	pop	{r4, r5, r6}
 8000e16:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e18:	4830      	ldr	r0, [pc, #192]	; (8000edc <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000e1a:	6884      	ldr	r4, [r0, #8]
 8000e1c:	0764      	lsls	r4, r4, #29
 8000e1e:	d50a      	bpl.n	8000e36 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8000e20:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000e24:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e26:	f042 0220 	orr.w	r2, r2, #32
 8000e2a:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000e32:	bc70      	pop	{r4, r5, r6}
 8000e34:	4770      	bx	lr
 8000e36:	6894      	ldr	r4, [r2, #8]
 8000e38:	0765      	lsls	r5, r4, #29
 8000e3a:	d4f2      	bmi.n	8000e22 <HAL_ADCEx_MultiModeConfigChannel+0x36>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8000e3c:	680c      	ldr	r4, [r1, #0]
 8000e3e:	b1fc      	cbz	r4, 8000e80 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8000e40:	4d27      	ldr	r5, [pc, #156]	; (8000ee0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8000e42:	684e      	ldr	r6, [r1, #4]
 8000e44:	68ac      	ldr	r4, [r5, #8]
 8000e46:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 8000e4a:	4334      	orrs	r4, r6
 8000e4c:	60ac      	str	r4, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e4e:	681c      	ldr	r4, [r3, #0]
 8000e50:	4294      	cmp	r4, r2
 8000e52:	d035      	beq.n	8000ec0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8000e54:	4284      	cmp	r4, r0
 8000e56:	d033      	beq.n	8000ec0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e58:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8000e5a:	6892      	ldr	r2, [r2, #8]
 8000e5c:	43d2      	mvns	r2, r2
 8000e5e:	f002 0201 	and.w	r2, r2, #1
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d035      	beq.n	8000ed2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
        MODIFY_REG(tmpADC_Common->CCR,
 8000e66:	4d1e      	ldr	r5, [pc, #120]	; (8000ee0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e68:	2000      	movs	r0, #0
        MODIFY_REG(tmpADC_Common->CCR,
 8000e6a:	680a      	ldr	r2, [r1, #0]
 8000e6c:	68ae      	ldr	r6, [r5, #8]
 8000e6e:	6889      	ldr	r1, [r1, #8]
 8000e70:	4c1d      	ldr	r4, [pc, #116]	; (8000ee8 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8000e72:	430a      	orrs	r2, r1
 8000e74:	4034      	ands	r4, r6
 8000e76:	4322      	orrs	r2, r4
 8000e78:	60aa      	str	r2, [r5, #8]
 8000e7a:	e7d7      	b.n	8000e2c <HAL_ADCEx_MultiModeConfigChannel+0x40>
  __HAL_LOCK(hadc);
 8000e7c:	2002      	movs	r0, #2
}
 8000e7e:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8000e80:	4c17      	ldr	r4, [pc, #92]	; (8000ee0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8000e82:	68a1      	ldr	r1, [r4, #8]
 8000e84:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8000e88:	60a1      	str	r1, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e8a:	6819      	ldr	r1, [r3, #0]
 8000e8c:	4291      	cmp	r1, r2
 8000e8e:	d00e      	beq.n	8000eae <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8000e90:	4281      	cmp	r1, r0
 8000e92:	d00c      	beq.n	8000eae <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8000e94:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8000e96:	6892      	ldr	r2, [r2, #8]
 8000e98:	43d2      	mvns	r2, r2
 8000e9a:	f002 0201 	and.w	r2, r2, #1
 8000e9e:	b1c2      	cbz	r2, 8000ed2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000ea0:	490f      	ldr	r1, [pc, #60]	; (8000ee0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea2:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000ea4:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8000ea6:	688c      	ldr	r4, [r1, #8]
 8000ea8:	4022      	ands	r2, r4
 8000eaa:	608a      	str	r2, [r1, #8]
 8000eac:	e7be      	b.n	8000e2c <HAL_ADCEx_MultiModeConfigChannel+0x40>
 8000eae:	490a      	ldr	r1, [pc, #40]	; (8000ed8 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000eb2:	6889      	ldr	r1, [r1, #8]
 8000eb4:	6892      	ldr	r2, [r2, #8]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	f002 0201 	and.w	r2, r2, #1
 8000ebe:	e7ee      	b.n	8000e9e <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000ec2:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000ec4:	6880      	ldr	r0, [r0, #8]
 8000ec6:	6892      	ldr	r2, [r2, #8]
 8000ec8:	4302      	orrs	r2, r0
 8000eca:	43d2      	mvns	r2, r2
 8000ecc:	f002 0201 	and.w	r2, r2, #1
 8000ed0:	e7c7      	b.n	8000e62 <HAL_ADCEx_MultiModeConfigChannel+0x76>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	e7aa      	b.n	8000e2c <HAL_ADCEx_MultiModeConfigChannel+0x40>
 8000ed6:	bf00      	nop
 8000ed8:	40022000 	.word	0x40022000
 8000edc:	40022100 	.word	0x40022100
 8000ee0:	40022300 	.word	0x40022300
 8000ee4:	58026000 	.word	0x58026000
 8000ee8:	fffff0e0 	.word	0xfffff0e0

08000eec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eee:	0200      	lsls	r0, r0, #8
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8000ef2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef6:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef8:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	4022      	ands	r2, r4
 8000f00:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f02:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8000f04:	60c8      	str	r0, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	05fa0000 	.word	0x05fa0000

08000f14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f16:	b430      	push	{r4, r5}
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	2d04      	cmp	r5, #4
 8000f26:	bf28      	it	cs
 8000f28:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	2c06      	cmp	r4, #6
 8000f2c:	d918      	bls.n	8000f60 <HAL_NVIC_SetPriority+0x4c>
 8000f2e:	3b03      	subs	r3, #3
 8000f30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000f34:	409c      	lsls	r4, r3
 8000f36:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	fa02 f205 	lsl.w	r2, r2, r5
 8000f44:	ea21 0102 	bic.w	r1, r1, r2
 8000f48:	fa01 f203 	lsl.w	r2, r1, r3
 8000f4c:	ea42 0204 	orr.w	r2, r2, r4
 8000f50:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000f54:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8000f56:	db06      	blt.n	8000f66 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_NVIC_SetPriority+0x64>)
 8000f5a:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f5c:	bc30      	pop	{r4, r5}
 8000f5e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f60:	2400      	movs	r4, #0
 8000f62:	4623      	mov	r3, r4
 8000f64:	e7e9      	b.n	8000f3a <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	f000 000f 	and.w	r0, r0, #15
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <HAL_NVIC_SetPriority+0x68>)
 8000f6c:	541a      	strb	r2, [r3, r0]
 8000f6e:	bc30      	pop	{r4, r5}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	e000e400 	.word	0xe000e400
 8000f7c:	e000ed14 	.word	0xe000ed14

08000f80 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f80:	2800      	cmp	r0, #0
 8000f82:	db07      	blt.n	8000f94 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f84:	f000 011f 	and.w	r1, r0, #31
 8000f88:	2301      	movs	r3, #1
 8000f8a:	0940      	lsrs	r0, r0, #5
 8000f8c:	4a02      	ldr	r2, [pc, #8]	; (8000f98 <HAL_NVIC_EnableIRQ+0x18>)
 8000f8e:	408b      	lsls	r3, r1
 8000f90:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	3801      	subs	r0, #1
 8000f9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fa2:	d20d      	bcs.n	8000fc0 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa8:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	25f0      	movs	r5, #240	; 0xf0
 8000fae:	4c06      	ldr	r4, [pc, #24]	; (8000fc8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb0:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb2:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000fbc:	bc30      	pop	{r4, r5}
 8000fbe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e010 	.word	0xe000e010
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8000fcc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	4904      	ldr	r1, [pc, #16]	; (8000fe8 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fd6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fdc:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8000fde:	6048      	str	r0, [r1, #4]
}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	e000ed90 	.word	0xe000ed90

08000fec <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000fee:	f040 0001 	orr.w	r0, r0, #1
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_MPU_Enable+0x20>)
 8000ff4:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000ff6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001002:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	e000ed90 	.word	0xe000ed90

08001010 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001010:	7843      	ldrb	r3, [r0, #1]
 8001012:	4a13      	ldr	r2, [pc, #76]	; (8001060 <HAL_MPU_ConfigRegion+0x50>)
 8001014:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001016:	7803      	ldrb	r3, [r0, #0]
 8001018:	b913      	cbnz	r3, 8001020 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 800101a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = 0x00;
 800101c:	6113      	str	r3, [r2, #16]
 800101e:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8001020:	6843      	ldr	r3, [r0, #4]
{
 8001022:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8001024:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001026:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001028:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800102a:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800102c:	7805      	ldrb	r5, [r0, #0]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800102e:	7a84      	ldrb	r4, [r0, #10]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001030:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001034:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001036:	7b86      	ldrb	r6, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001038:	432b      	orrs	r3, r5
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800103a:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800103c:	ea43 43c4 	orr.w	r3, r3, r4, lsl #19
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001040:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001042:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001046:	7a01      	ldrb	r1, [r0, #8]
 8001048:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800104c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001050:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001054:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001058:	6113      	str	r3, [r2, #16]
  }
}
 800105a:	bc70      	pop	{r4, r5, r6}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed90 	.word	0xe000ed90

08001064 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001064:	4b35      	ldr	r3, [pc, #212]	; (800113c <DMA_CalcBaseAndBitshift+0xd8>)
{
 8001066:	4601      	mov	r1, r0
 8001068:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800106a:	4c35      	ldr	r4, [pc, #212]	; (8001140 <DMA_CalcBaseAndBitshift+0xdc>)
 800106c:	6802      	ldr	r2, [r0, #0]
 800106e:	4835      	ldr	r0, [pc, #212]	; (8001144 <DMA_CalcBaseAndBitshift+0xe0>)
 8001070:	42a2      	cmp	r2, r4
 8001072:	bf18      	it	ne
 8001074:	429a      	cmpne	r2, r3
 8001076:	4d34      	ldr	r5, [pc, #208]	; (8001148 <DMA_CalcBaseAndBitshift+0xe4>)
 8001078:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800107c:	bf0c      	ite	eq
 800107e:	2301      	moveq	r3, #1
 8001080:	2300      	movne	r3, #0
 8001082:	4282      	cmp	r2, r0
 8001084:	bf08      	it	eq
 8001086:	f043 0301 	orreq.w	r3, r3, #1
 800108a:	3048      	adds	r0, #72	; 0x48
 800108c:	42aa      	cmp	r2, r5
 800108e:	bf08      	it	eq
 8001090:	f043 0301 	orreq.w	r3, r3, #1
 8001094:	3548      	adds	r5, #72	; 0x48
 8001096:	42a2      	cmp	r2, r4
 8001098:	bf08      	it	eq
 800109a:	f043 0301 	orreq.w	r3, r3, #1
 800109e:	3448      	adds	r4, #72	; 0x48
 80010a0:	4282      	cmp	r2, r0
 80010a2:	bf08      	it	eq
 80010a4:	f043 0301 	orreq.w	r3, r3, #1
 80010a8:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80010ac:	42aa      	cmp	r2, r5
 80010ae:	bf08      	it	eq
 80010b0:	f043 0301 	orreq.w	r3, r3, #1
 80010b4:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80010b8:	42a2      	cmp	r2, r4
 80010ba:	bf08      	it	eq
 80010bc:	f043 0301 	orreq.w	r3, r3, #1
 80010c0:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80010c4:	4282      	cmp	r2, r0
 80010c6:	bf08      	it	eq
 80010c8:	f043 0301 	orreq.w	r3, r3, #1
 80010cc:	3048      	adds	r0, #72	; 0x48
 80010ce:	42aa      	cmp	r2, r5
 80010d0:	bf08      	it	eq
 80010d2:	f043 0301 	orreq.w	r3, r3, #1
 80010d6:	3548      	adds	r5, #72	; 0x48
 80010d8:	42a2      	cmp	r2, r4
 80010da:	bf08      	it	eq
 80010dc:	f043 0301 	orreq.w	r3, r3, #1
 80010e0:	3448      	adds	r4, #72	; 0x48
 80010e2:	4282      	cmp	r2, r0
 80010e4:	bf08      	it	eq
 80010e6:	f043 0301 	orreq.w	r3, r3, #1
 80010ea:	3048      	adds	r0, #72	; 0x48
 80010ec:	42aa      	cmp	r2, r5
 80010ee:	bf08      	it	eq
 80010f0:	f043 0301 	orreq.w	r3, r3, #1
 80010f4:	42a2      	cmp	r2, r4
 80010f6:	bf08      	it	eq
 80010f8:	f043 0301 	orreq.w	r3, r3, #1
 80010fc:	4282      	cmp	r2, r0
 80010fe:	bf08      	it	eq
 8001100:	f043 0301 	orreq.w	r3, r3, #1
 8001104:	b913      	cbnz	r3, 800110c <DMA_CalcBaseAndBitshift+0xa8>
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <DMA_CalcBaseAndBitshift+0xe8>)
 8001108:	429a      	cmp	r2, r3
 800110a:	d112      	bne.n	8001132 <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800110c:	b2d3      	uxtb	r3, r2
 800110e:	4d10      	ldr	r5, [pc, #64]	; (8001150 <DMA_CalcBaseAndBitshift+0xec>)
 8001110:	4810      	ldr	r0, [pc, #64]	; (8001154 <DMA_CalcBaseAndBitshift+0xf0>)
 8001112:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001114:	4c10      	ldr	r4, [pc, #64]	; (8001158 <DMA_CalcBaseAndBitshift+0xf4>)
 8001116:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001118:	fba5 5303 	umull	r5, r3, r5, r3
 800111c:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800111e:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 8001122:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001124:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001126:	bf88      	it	hi
 8001128:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800112a:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800112c:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800112e:	bc30      	pop	{r4, r5}
 8001130:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001132:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8001136:	6588      	str	r0, [r1, #88]	; 0x58
 8001138:	e7f9      	b.n	800112e <DMA_CalcBaseAndBitshift+0xca>
 800113a:	bf00      	nop
 800113c:	40020010 	.word	0x40020010
 8001140:	40020028 	.word	0x40020028
 8001144:	40020040 	.word	0x40020040
 8001148:	40020058 	.word	0x40020058
 800114c:	400204b8 	.word	0x400204b8
 8001150:	aaaaaaab 	.word	0xaaaaaaab
 8001154:	fffffc00 	.word	0xfffffc00
 8001158:	0800bc88 	.word	0x0800bc88

0800115c <HAL_DMA_Init>:
{
 800115c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001160:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001162:	f7ff f91d 	bl	80003a0 <HAL_GetTick>
  if(hdma == NULL)
 8001166:	2c00      	cmp	r4, #0
 8001168:	f000 81ab 	beq.w	80014c2 <HAL_DMA_Init+0x366>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800116c:	6822      	ldr	r2, [r4, #0]
 800116e:	4605      	mov	r5, r0
 8001170:	4b56      	ldr	r3, [pc, #344]	; (80012cc <HAL_DMA_Init+0x170>)
 8001172:	429a      	cmp	r2, r3
 8001174:	d049      	beq.n	800120a <HAL_DMA_Init+0xae>
 8001176:	3318      	adds	r3, #24
 8001178:	429a      	cmp	r2, r3
 800117a:	d046      	beq.n	800120a <HAL_DMA_Init+0xae>
 800117c:	3330      	adds	r3, #48	; 0x30
 800117e:	4854      	ldr	r0, [pc, #336]	; (80012d0 <HAL_DMA_Init+0x174>)
 8001180:	4954      	ldr	r1, [pc, #336]	; (80012d4 <HAL_DMA_Init+0x178>)
 8001182:	4282      	cmp	r2, r0
 8001184:	bf18      	it	ne
 8001186:	429a      	cmpne	r2, r3
 8001188:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	428a      	cmp	r2, r1
 8001194:	bf08      	it	eq
 8001196:	f043 0301 	orreq.w	r3, r3, #1
 800119a:	3130      	adds	r1, #48	; 0x30
 800119c:	4282      	cmp	r2, r0
 800119e:	bf08      	it	eq
 80011a0:	f043 0301 	orreq.w	r3, r3, #1
 80011a4:	3030      	adds	r0, #48	; 0x30
 80011a6:	428a      	cmp	r2, r1
 80011a8:	bf08      	it	eq
 80011aa:	f043 0301 	orreq.w	r3, r3, #1
 80011ae:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80011b2:	4282      	cmp	r2, r0
 80011b4:	bf08      	it	eq
 80011b6:	f043 0301 	orreq.w	r3, r3, #1
 80011ba:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80011be:	428a      	cmp	r2, r1
 80011c0:	bf08      	it	eq
 80011c2:	f043 0301 	orreq.w	r3, r3, #1
 80011c6:	3130      	adds	r1, #48	; 0x30
 80011c8:	4282      	cmp	r2, r0
 80011ca:	bf08      	it	eq
 80011cc:	f043 0301 	orreq.w	r3, r3, #1
 80011d0:	3030      	adds	r0, #48	; 0x30
 80011d2:	428a      	cmp	r2, r1
 80011d4:	bf08      	it	eq
 80011d6:	f043 0301 	orreq.w	r3, r3, #1
 80011da:	3130      	adds	r1, #48	; 0x30
 80011dc:	4282      	cmp	r2, r0
 80011de:	bf08      	it	eq
 80011e0:	f043 0301 	orreq.w	r3, r3, #1
 80011e4:	3030      	adds	r0, #48	; 0x30
 80011e6:	428a      	cmp	r2, r1
 80011e8:	bf08      	it	eq
 80011ea:	f043 0301 	orreq.w	r3, r3, #1
 80011ee:	3130      	adds	r1, #48	; 0x30
 80011f0:	4282      	cmp	r2, r0
 80011f2:	bf08      	it	eq
 80011f4:	f043 0301 	orreq.w	r3, r3, #1
 80011f8:	428a      	cmp	r2, r1
 80011fa:	bf08      	it	eq
 80011fc:	f043 0301 	orreq.w	r3, r3, #1
 8001200:	b91b      	cbnz	r3, 800120a <HAL_DMA_Init+0xae>
 8001202:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <HAL_DMA_Init+0x17c>)
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 81eb 	bne.w	80015e0 <HAL_DMA_Init+0x484>
    hdma->State = HAL_DMA_STATE_BUSY;
 800120a:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 800120c:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800120e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001212:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e005      	b.n	800122c <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001220:	f7ff f8be 	bl	80003a0 <HAL_GetTick>
 8001224:	1b40      	subs	r0, r0, r5
 8001226:	2805      	cmp	r0, #5
 8001228:	f200 8143 	bhi.w	80014b2 <HAL_DMA_Init+0x356>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	07d0      	lsls	r0, r2, #31
 8001232:	d4f5      	bmi.n	8001220 <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 8001234:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001238:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800123a:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123c:	e9d4 5005 	ldrd	r5, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001240:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001242:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001244:	432a      	orrs	r2, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8001246:	6a25      	ldr	r5, [r4, #32]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001248:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800124a:	6818      	ldr	r0, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124c:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800124e:	4923      	ldr	r1, [pc, #140]	; (80012dc <HAL_DMA_Init+0x180>)
 8001250:	4001      	ands	r1, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001252:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8001254:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001256:	2804      	cmp	r0, #4
    registerValue |=  hdma->Init.Direction           |
 8001258:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800125c:	d103      	bne.n	8001266 <HAL_DMA_Init+0x10a>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800125e:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8001262:	4301      	orrs	r1, r0
 8001264:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001266:	481e      	ldr	r0, [pc, #120]	; (80012e0 <HAL_DMA_Init+0x184>)
 8001268:	491e      	ldr	r1, [pc, #120]	; (80012e4 <HAL_DMA_Init+0x188>)
 800126a:	6800      	ldr	r0, [r0, #0]
 800126c:	4001      	ands	r1, r0
 800126e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001272:	d30a      	bcc.n	800128a <HAL_DMA_Init+0x12e>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001274:	6860      	ldr	r0, [r4, #4]
 8001276:	f1a0 0529 	sub.w	r5, r0, #41	; 0x29
 800127a:	2d1f      	cmp	r5, #31
 800127c:	f240 8124 	bls.w	80014c8 <HAL_DMA_Init+0x36c>
 8001280:	384f      	subs	r0, #79	; 0x4f
 8001282:	2803      	cmp	r0, #3
 8001284:	d801      	bhi.n	800128a <HAL_DMA_Init+0x12e>
        registerValue |= DMA_SxCR_TRBUFF;
 8001286:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800128a:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800128c:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 800128e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001290:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001292:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001294:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001298:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800129c:	d12a      	bne.n	80012f4 <HAL_DMA_Init+0x198>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800129e:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 80012a2:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012a4:	b330      	cbz	r0, 80012f4 <HAL_DMA_Init+0x198>
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012a6:	69a5      	ldr	r5, [r4, #24]
 80012a8:	b1f5      	cbz	r5, 80012e8 <HAL_DMA_Init+0x18c>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012aa:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80012ae:	f000 81fb 	beq.w	80016a8 <HAL_DMA_Init+0x54c>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80012b2:	2a02      	cmp	r2, #2
 80012b4:	d903      	bls.n	80012be <HAL_DMA_Init+0x162>
 80012b6:	2a03      	cmp	r2, #3
 80012b8:	d11c      	bne.n	80012f4 <HAL_DMA_Init+0x198>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012ba:	01c2      	lsls	r2, r0, #7
 80012bc:	d51a      	bpl.n	80012f4 <HAL_DMA_Init+0x198>
          hdma->State = HAL_DMA_STATE_READY;
 80012be:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012c0:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80012c2:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012c4:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80012c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 80012ca:	e0f0      	b.n	80014ae <HAL_DMA_Init+0x352>
 80012cc:	40020010 	.word	0x40020010
 80012d0:	40020040 	.word	0x40020040
 80012d4:	40020070 	.word	0x40020070
 80012d8:	400204b8 	.word	0x400204b8
 80012dc:	fe10803f 	.word	0xfe10803f
 80012e0:	5c001000 	.word	0x5c001000
 80012e4:	ffff0000 	.word	0xffff0000
    switch (hdma->Init.FIFOThreshold)
 80012e8:	2a01      	cmp	r2, #1
 80012ea:	f000 81d8 	beq.w	800169e <HAL_DMA_Init+0x542>
 80012ee:	d3e4      	bcc.n	80012ba <HAL_DMA_Init+0x15e>
 80012f0:	2a02      	cmp	r2, #2
 80012f2:	d0e2      	beq.n	80012ba <HAL_DMA_Init+0x15e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80012f4:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012f6:	4620      	mov	r0, r4
 80012f8:	f7ff feb4 	bl	8001064 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80012fc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012fe:	233f      	movs	r3, #63	; 0x3f
 8001300:	f002 021f 	and.w	r2, r2, #31
 8001304:	4093      	lsls	r3, r2
 8001306:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001308:	6822      	ldr	r2, [r4, #0]
 800130a:	4b9d      	ldr	r3, [pc, #628]	; (8001580 <HAL_DMA_Init+0x424>)
 800130c:	489d      	ldr	r0, [pc, #628]	; (8001584 <HAL_DMA_Init+0x428>)
 800130e:	499e      	ldr	r1, [pc, #632]	; (8001588 <HAL_DMA_Init+0x42c>)
 8001310:	4282      	cmp	r2, r0
 8001312:	bf18      	it	ne
 8001314:	429a      	cmpne	r2, r3
 8001316:	4e9d      	ldr	r6, [pc, #628]	; (800158c <HAL_DMA_Init+0x430>)
 8001318:	4d9d      	ldr	r5, [pc, #628]	; (8001590 <HAL_DMA_Init+0x434>)
 800131a:	f100 0060 	add.w	r0, r0, #96	; 0x60
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	f8df e2a8 	ldr.w	lr, [pc, #680]	; 80015d0 <HAL_DMA_Init+0x474>
 8001328:	428a      	cmp	r2, r1
 800132a:	bf08      	it	eq
 800132c:	f043 0301 	orreq.w	r3, r3, #1
 8001330:	3160      	adds	r1, #96	; 0x60
 8001332:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 80015d4 <HAL_DMA_Init+0x478>
 8001336:	42b2      	cmp	r2, r6
 8001338:	bf08      	it	eq
 800133a:	f043 0301 	orreq.w	r3, r3, #1
 800133e:	4f95      	ldr	r7, [pc, #596]	; (8001594 <HAL_DMA_Init+0x438>)
 8001340:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8001344:	f8df 8290 	ldr.w	r8, [pc, #656]	; 80015d8 <HAL_DMA_Init+0x47c>
 8001348:	42aa      	cmp	r2, r5
 800134a:	bf08      	it	eq
 800134c:	f043 0301 	orreq.w	r3, r3, #1
 8001350:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
 8001354:	f8df a258 	ldr.w	sl, [pc, #600]	; 80015b0 <HAL_DMA_Init+0x454>
 8001358:	4282      	cmp	r2, r0
 800135a:	bf08      	it	eq
 800135c:	f043 0301 	orreq.w	r3, r3, #1
 8001360:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8001364:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80015dc <HAL_DMA_Init+0x480>
 8001368:	428a      	cmp	r2, r1
 800136a:	bf08      	it	eq
 800136c:	f043 0301 	orreq.w	r3, r3, #1
 8001370:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8001374:	4572      	cmp	r2, lr
 8001376:	bf08      	it	eq
 8001378:	f043 0301 	orreq.w	r3, r3, #1
 800137c:	f8df e228 	ldr.w	lr, [pc, #552]	; 80015a8 <HAL_DMA_Init+0x44c>
 8001380:	4562      	cmp	r2, ip
 8001382:	bf08      	it	eq
 8001384:	f043 0301 	orreq.w	r3, r3, #1
 8001388:	eba2 0e0e 	sub.w	lr, r2, lr
 800138c:	f8df c21c 	ldr.w	ip, [pc, #540]	; 80015ac <HAL_DMA_Init+0x450>
 8001390:	42ba      	cmp	r2, r7
 8001392:	bf08      	it	eq
 8001394:	f043 0301 	orreq.w	r3, r3, #1
 8001398:	fabe fe8e 	clz	lr, lr
 800139c:	eba2 070c 	sub.w	r7, r2, ip
 80013a0:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80013a4:	42b2      	cmp	r2, r6
 80013a6:	bf08      	it	eq
 80013a8:	f043 0301 	orreq.w	r3, r3, #1
 80013ac:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80013b0:	eba2 060a 	sub.w	r6, r2, sl
 80013b4:	fab7 f787 	clz	r7, r7
 80013b8:	42aa      	cmp	r2, r5
 80013ba:	bf08      	it	eq
 80013bc:	f043 0301 	orreq.w	r3, r3, #1
 80013c0:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 80013c4:	eba2 050c 	sub.w	r5, r2, ip
 80013c8:	097f      	lsrs	r7, r7, #5
 80013ca:	4282      	cmp	r2, r0
 80013cc:	bf08      	it	eq
 80013ce:	f043 0301 	orreq.w	r3, r3, #1
 80013d2:	fab6 f686 	clz	r6, r6
 80013d6:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80013da:	fab5 f585 	clz	r5, r5
 80013de:	428a      	cmp	r2, r1
 80013e0:	bf08      	it	eq
 80013e2:	f043 0301 	orreq.w	r3, r3, #1
 80013e6:	0976      	lsrs	r6, r6, #5
 80013e8:	eba2 000a 	sub.w	r0, r2, sl
 80013ec:	eba2 010c 	sub.w	r1, r2, ip
 80013f0:	4542      	cmp	r2, r8
 80013f2:	bf08      	it	eq
 80013f4:	f043 0301 	orreq.w	r3, r3, #1
 80013f8:	096d      	lsrs	r5, r5, #5
 80013fa:	fab0 f080 	clz	r0, r0
 80013fe:	f10c 0c14 	add.w	ip, ip, #20
 8001402:	454a      	cmp	r2, r9
 8001404:	bf08      	it	eq
 8001406:	f043 0301 	orreq.w	r3, r3, #1
 800140a:	fab1 f181 	clz	r1, r1
 800140e:	0940      	lsrs	r0, r0, #5
 8001410:	eba2 0c0c 	sub.w	ip, r2, ip
 8001414:	ea4e 0303 	orr.w	r3, lr, r3
 8001418:	0949      	lsrs	r1, r1, #5
 800141a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80015b4 <HAL_DMA_Init+0x458>
 800141e:	fabc fc8c 	clz	ip, ip
 8001422:	433b      	orrs	r3, r7
 8001424:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001428:	eba2 0808 	sub.w	r8, r2, r8
 800142c:	4333      	orrs	r3, r6
 800142e:	fab8 f888 	clz	r8, r8
 8001432:	432b      	orrs	r3, r5
 8001434:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8001438:	4303      	orrs	r3, r0
 800143a:	430b      	orrs	r3, r1
 800143c:	ea5c 0303 	orrs.w	r3, ip, r3
 8001440:	d102      	bne.n	8001448 <HAL_DMA_Init+0x2ec>
 8001442:	f1b8 0f00 	cmp.w	r8, #0
 8001446:	d02d      	beq.n	80014a4 <HAL_DMA_Init+0x348>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001448:	ea47 070e 	orr.w	r7, r7, lr
 800144c:	b2d3      	uxtb	r3, r2
 800144e:	433e      	orrs	r6, r7
 8001450:	4335      	orrs	r5, r6
 8001452:	4328      	orrs	r0, r5
 8001454:	4301      	orrs	r1, r0
 8001456:	ea5c 0101 	orrs.w	r1, ip, r1
 800145a:	d102      	bne.n	8001462 <HAL_DMA_Init+0x306>
 800145c:	f1b8 0f00 	cmp.w	r8, #0
 8001460:	d076      	beq.n	8001550 <HAL_DMA_Init+0x3f4>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001462:	484d      	ldr	r0, [pc, #308]	; (8001598 <HAL_DMA_Init+0x43c>)
 8001464:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001466:	4a4d      	ldr	r2, [pc, #308]	; (800159c <HAL_DMA_Init+0x440>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001468:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800146a:	fba0 0303 	umull	r0, r3, r0, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800146e:	484c      	ldr	r0, [pc, #304]	; (80015a0 <HAL_DMA_Init+0x444>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001470:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001472:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001474:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001476:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800147a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001480:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001482:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001484:	68a3      	ldr	r3, [r4, #8]
 8001486:	2b80      	cmp	r3, #128	; 0x80
 8001488:	d026      	beq.n	80014d8 <HAL_DMA_Init+0x37c>
 800148a:	7923      	ldrb	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800148c:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800148e:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8001492:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001494:	6860      	ldr	r0, [r4, #4]
 8001496:	1e41      	subs	r1, r0, #1
 8001498:	2907      	cmp	r1, #7
 800149a:	d921      	bls.n	80014e0 <HAL_DMA_Init+0x384>
      hdma->DMAmuxRequestGen = 0U;
 800149c:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800149e:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80014a2:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80014a6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80014aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80014ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b2:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80014b4:	2303      	movs	r3, #3
        return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b8:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80014ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80014be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
}
 80014c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80014c8:	4936      	ldr	r1, [pc, #216]	; (80015a4 <HAL_DMA_Init+0x448>)
 80014ca:	40e9      	lsrs	r1, r5
 80014cc:	07c9      	lsls	r1, r1, #31
 80014ce:	f57f aed7 	bpl.w	8001280 <HAL_DMA_Init+0x124>
        registerValue |= DMA_SxCR_TRBUFF;
 80014d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014d6:	e6d8      	b.n	800128a <HAL_DMA_Init+0x12e>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014d8:	2100      	movs	r1, #0
 80014da:	460b      	mov	r3, r1
 80014dc:	6061      	str	r1, [r4, #4]
 80014de:	e7d5      	b.n	800148c <HAL_DMA_Init+0x330>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80014e0:	6822      	ldr	r2, [r4, #0]
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <HAL_DMA_Init+0x44c>)
 80014e4:	4e31      	ldr	r6, [pc, #196]	; (80015ac <HAL_DMA_Init+0x450>)
 80014e6:	4d32      	ldr	r5, [pc, #200]	; (80015b0 <HAL_DMA_Init+0x454>)
 80014e8:	42b2      	cmp	r2, r6
 80014ea:	bf18      	it	ne
 80014ec:	429a      	cmpne	r2, r3
 80014ee:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80014f2:	bf0c      	ite	eq
 80014f4:	2301      	moveq	r3, #1
 80014f6:	2300      	movne	r3, #0
 80014f8:	42aa      	cmp	r2, r5
 80014fa:	bf08      	it	eq
 80014fc:	f043 0301 	orreq.w	r3, r3, #1
 8001500:	3528      	adds	r5, #40	; 0x28
 8001502:	42b2      	cmp	r2, r6
 8001504:	bf08      	it	eq
 8001506:	f043 0301 	orreq.w	r3, r3, #1
 800150a:	3628      	adds	r6, #40	; 0x28
 800150c:	42aa      	cmp	r2, r5
 800150e:	bf08      	it	eq
 8001510:	f043 0301 	orreq.w	r3, r3, #1
 8001514:	3528      	adds	r5, #40	; 0x28
 8001516:	42b2      	cmp	r2, r6
 8001518:	bf08      	it	eq
 800151a:	f043 0301 	orreq.w	r3, r3, #1
 800151e:	42aa      	cmp	r2, r5
 8001520:	bf08      	it	eq
 8001522:	f043 0301 	orreq.w	r3, r3, #1
 8001526:	b91b      	cbnz	r3, 8001530 <HAL_DMA_Init+0x3d4>
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <HAL_DMA_Init+0x458>)
 800152a:	429a      	cmp	r2, r3
 800152c:	f040 80ca 	bne.w	80016c4 <HAL_DMA_Init+0x568>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_DMA_Init+0x45c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001532:	4d22      	ldr	r5, [pc, #136]	; (80015bc <HAL_DMA_Init+0x460>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001534:	4403      	add	r3, r0
 8001536:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001538:	2201      	movs	r2, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800153a:	2000      	movs	r0, #0
 800153c:	6725      	str	r5, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800153e:	fa02 f101 	lsl.w	r1, r2, r1
 8001542:	66e3      	str	r3, [r4, #108]	; 0x6c
 8001544:	6761      	str	r1, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001546:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001548:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	e7a9      	b.n	80014a4 <HAL_DMA_Init+0x348>
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001550:	491b      	ldr	r1, [pc, #108]	; (80015c0 <HAL_DMA_Init+0x464>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001552:	3b10      	subs	r3, #16
 8001554:	481b      	ldr	r0, [pc, #108]	; (80015c4 <HAL_DMA_Init+0x468>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001556:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001558:	fba0 0303 	umull	r0, r3, r0, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800155c:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800155e:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001562:	d800      	bhi.n	8001566 <HAL_DMA_Init+0x40a>
      stream_number += 8U;
 8001564:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001566:	4a18      	ldr	r2, [pc, #96]	; (80015c8 <HAL_DMA_Init+0x46c>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001568:	f003 051f 	and.w	r5, r3, #31
 800156c:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800156e:	4817      	ldr	r0, [pc, #92]	; (80015cc <HAL_DMA_Init+0x470>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001570:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001572:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001574:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001576:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001578:	66a1      	str	r1, [r4, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800157a:	6622      	str	r2, [r4, #96]	; 0x60
 800157c:	e782      	b.n	8001484 <HAL_DMA_Init+0x328>
 800157e:	bf00      	nop
 8001580:	40020010 	.word	0x40020010
 8001584:	40020028 	.word	0x40020028
 8001588:	40020040 	.word	0x40020040
 800158c:	40020058 	.word	0x40020058
 8001590:	40020070 	.word	0x40020070
 8001594:	40020428 	.word	0x40020428
 8001598:	cccccccd 	.word	0xcccccccd
 800159c:	16009600 	.word	0x16009600
 80015a0:	58025880 	.word	0x58025880
 80015a4:	c3c0003f 	.word	0xc3c0003f
 80015a8:	58025408 	.word	0x58025408
 80015ac:	5802541c 	.word	0x5802541c
 80015b0:	58025430 	.word	0x58025430
 80015b4:	58025494 	.word	0x58025494
 80015b8:	1600963f 	.word	0x1600963f
 80015bc:	58025940 	.word	0x58025940
 80015c0:	bffdfbf0 	.word	0xbffdfbf0
 80015c4:	aaaaaaab 	.word	0xaaaaaaab
 80015c8:	10008200 	.word	0x10008200
 80015cc:	40020880 	.word	0x40020880
 80015d0:	400200b8 	.word	0x400200b8
 80015d4:	40020410 	.word	0x40020410
 80015d8:	400204a0 	.word	0x400204a0
 80015dc:	400204b8 	.word	0x400204b8
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80015e0:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <HAL_DMA_Init+0x584>)
 80015e2:	4940      	ldr	r1, [pc, #256]	; (80016e4 <HAL_DMA_Init+0x588>)
 80015e4:	4840      	ldr	r0, [pc, #256]	; (80016e8 <HAL_DMA_Init+0x58c>)
 80015e6:	428a      	cmp	r2, r1
 80015e8:	bf18      	it	ne
 80015ea:	429a      	cmpne	r2, r3
 80015ec:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80015f0:	4d3e      	ldr	r5, [pc, #248]	; (80016ec <HAL_DMA_Init+0x590>)
 80015f2:	bf0c      	ite	eq
 80015f4:	2301      	moveq	r3, #1
 80015f6:	2300      	movne	r3, #0
 80015f8:	4282      	cmp	r2, r0
 80015fa:	bf08      	it	eq
 80015fc:	f043 0301 	orreq.w	r3, r3, #1
 8001600:	303c      	adds	r0, #60	; 0x3c
 8001602:	428a      	cmp	r2, r1
 8001604:	bf08      	it	eq
 8001606:	f043 0301 	orreq.w	r3, r3, #1
 800160a:	313c      	adds	r1, #60	; 0x3c
 800160c:	42aa      	cmp	r2, r5
 800160e:	bf08      	it	eq
 8001610:	f043 0301 	orreq.w	r3, r3, #1
 8001614:	4282      	cmp	r2, r0
 8001616:	bf08      	it	eq
 8001618:	f043 0301 	orreq.w	r3, r3, #1
 800161c:	428a      	cmp	r2, r1
 800161e:	bf08      	it	eq
 8001620:	f043 0301 	orreq.w	r3, r3, #1
 8001624:	b913      	cbnz	r3, 800162c <HAL_DMA_Init+0x4d0>
 8001626:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <HAL_DMA_Init+0x594>)
 8001628:	429a      	cmp	r2, r3
 800162a:	d152      	bne.n	80016d2 <HAL_DMA_Init+0x576>
    hdma->State = HAL_DMA_STATE_BUSY;
 800162c:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 800162e:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001630:	4f30      	ldr	r7, [pc, #192]	; (80016f4 <HAL_DMA_Init+0x598>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8001632:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001636:	68a3      	ldr	r3, [r4, #8]
    __HAL_UNLOCK(hdma);
 8001638:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800163c:	2b40      	cmp	r3, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800163e:	6811      	ldr	r1, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001640:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001644:	d043      	beq.n	80016ce <HAL_DMA_Init+0x572>
 8001646:	2b80      	cmp	r3, #128	; 0x80
 8001648:	bf14      	ite	ne
 800164a:	2100      	movne	r1, #0
 800164c:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001650:	6923      	ldr	r3, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001652:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001654:	68e5      	ldr	r5, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001656:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001658:	6966      	ldr	r6, [r4, #20]
 800165a:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800165e:	69a5      	ldr	r5, [r4, #24]
 8001660:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001664:	69e6      	ldr	r6, [r4, #28]
 8001666:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800166a:	6a25      	ldr	r5, [r4, #32]
 800166c:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001670:	4e21      	ldr	r6, [pc, #132]	; (80016f8 <HAL_DMA_Init+0x59c>)
 8001672:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8001676:	4d21      	ldr	r5, [pc, #132]	; (80016fc <HAL_DMA_Init+0x5a0>)
 8001678:	433b      	orrs	r3, r7
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800167a:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800167c:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	441e      	add	r6, r3
 8001682:	fba5 2306 	umull	r2, r3, r5, r6
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800168c:	f7ff fcea 	bl	8001064 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001690:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001692:	2301      	movs	r3, #1
 8001694:	f002 021f 	and.w	r2, r2, #31
 8001698:	4093      	lsls	r3, r2
 800169a:	6043      	str	r3, [r0, #4]
 800169c:	e634      	b.n	8001308 <HAL_DMA_Init+0x1ac>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800169e:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80016a2:	f47f ae27 	bne.w	80012f4 <HAL_DMA_Init+0x198>
 80016a6:	e60a      	b.n	80012be <HAL_DMA_Init+0x162>
    switch (hdma->Init.FIFOThreshold)
 80016a8:	2a03      	cmp	r2, #3
 80016aa:	f63f ae23 	bhi.w	80012f4 <HAL_DMA_Init+0x198>
 80016ae:	a501      	add	r5, pc, #4	; (adr r5, 80016b4 <HAL_DMA_Init+0x558>)
 80016b0:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 80016b4:	080012bf 	.word	0x080012bf
 80016b8:	080012bb 	.word	0x080012bb
 80016bc:	080012bf 	.word	0x080012bf
 80016c0:	0800169f 	.word	0x0800169f
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_DMA_Init+0x5a4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016c6:	4d0f      	ldr	r5, [pc, #60]	; (8001704 <HAL_DMA_Init+0x5a8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016c8:	4403      	add	r3, r0
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	e734      	b.n	8001538 <HAL_DMA_Init+0x3dc>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016ce:	2110      	movs	r1, #16
 80016d0:	e7be      	b.n	8001650 <HAL_DMA_Init+0x4f4>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016d2:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016d4:	2303      	movs	r3, #3
    return HAL_ERROR;
 80016d6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016d8:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80016de:	e6e6      	b.n	80014ae <HAL_DMA_Init+0x352>
 80016e0:	58025408 	.word	0x58025408
 80016e4:	5802541c 	.word	0x5802541c
 80016e8:	58025430 	.word	0x58025430
 80016ec:	58025458 	.word	0x58025458
 80016f0:	58025494 	.word	0x58025494
 80016f4:	fffe000f 	.word	0xfffe000f
 80016f8:	a7fdabf8 	.word	0xa7fdabf8
 80016fc:	cccccccd 	.word	0xcccccccd
 8001700:	1000823f 	.word	0x1000823f
 8001704:	40020940 	.word	0x40020940

08001708 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8001708:	2800      	cmp	r0, #0
 800170a:	f000 8268 	beq.w	8001bde <HAL_DMA_Start_IT+0x4d6>
{
 800170e:	b4f0      	push	{r4, r5, r6, r7}
 8001710:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 8001712:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001716:	2801      	cmp	r0, #1
 8001718:	f000 8268 	beq.w	8001bec <HAL_DMA_Start_IT+0x4e4>
 800171c:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800171e:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 8001722:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8001724:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001728:	d007      	beq.n	800173a <HAL_DMA_Start_IT+0x32>
    __HAL_UNLOCK(hdma);
 800172a:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800172c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8001730:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001734:	656b      	str	r3, [r5, #84]	; 0x54
}
 8001736:	bcf0      	pop	{r4, r5, r6, r7}
 8001738:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800173a:	2702      	movs	r7, #2
    __HAL_DMA_DISABLE(hdma);
 800173c:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800173e:	4e9e      	ldr	r6, [pc, #632]	; (80019b8 <HAL_DMA_Start_IT+0x2b0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8001740:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001744:	2700      	movs	r7, #0
 8001746:	656f      	str	r7, [r5, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001748:	6820      	ldr	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800174a:	4f9c      	ldr	r7, [pc, #624]	; (80019bc <HAL_DMA_Start_IT+0x2b4>)
    __HAL_DMA_DISABLE(hdma);
 800174c:	f020 0001 	bic.w	r0, r0, #1
 8001750:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001752:	489b      	ldr	r0, [pc, #620]	; (80019c0 <HAL_DMA_Start_IT+0x2b8>)
 8001754:	682c      	ldr	r4, [r5, #0]
 8001756:	42b4      	cmp	r4, r6
 8001758:	bf18      	it	ne
 800175a:	4284      	cmpne	r4, r0
 800175c:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8001760:	bf0c      	ite	eq
 8001762:	2001      	moveq	r0, #1
 8001764:	2000      	movne	r0, #0
 8001766:	42bc      	cmp	r4, r7
 8001768:	bf08      	it	eq
 800176a:	f040 0001 	orreq.w	r0, r0, #1
 800176e:	3730      	adds	r7, #48	; 0x30
 8001770:	42b4      	cmp	r4, r6
 8001772:	bf08      	it	eq
 8001774:	f040 0001 	orreq.w	r0, r0, #1
 8001778:	3630      	adds	r6, #48	; 0x30
 800177a:	42bc      	cmp	r4, r7
 800177c:	bf08      	it	eq
 800177e:	f040 0001 	orreq.w	r0, r0, #1
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	42b4      	cmp	r4, r6
 8001786:	bf08      	it	eq
 8001788:	f040 0001 	orreq.w	r0, r0, #1
 800178c:	3630      	adds	r6, #48	; 0x30
 800178e:	42bc      	cmp	r4, r7
 8001790:	bf08      	it	eq
 8001792:	f040 0001 	orreq.w	r0, r0, #1
 8001796:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800179a:	42b4      	cmp	r4, r6
 800179c:	bf08      	it	eq
 800179e:	f040 0001 	orreq.w	r0, r0, #1
 80017a2:	f506 765c 	add.w	r6, r6, #880	; 0x370
 80017a6:	42bc      	cmp	r4, r7
 80017a8:	bf08      	it	eq
 80017aa:	f040 0001 	orreq.w	r0, r0, #1
 80017ae:	3730      	adds	r7, #48	; 0x30
 80017b0:	42b4      	cmp	r4, r6
 80017b2:	bf08      	it	eq
 80017b4:	f040 0001 	orreq.w	r0, r0, #1
 80017b8:	3630      	adds	r6, #48	; 0x30
 80017ba:	42bc      	cmp	r4, r7
 80017bc:	bf08      	it	eq
 80017be:	f040 0001 	orreq.w	r0, r0, #1
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	42b4      	cmp	r4, r6
 80017c6:	bf08      	it	eq
 80017c8:	f040 0001 	orreq.w	r0, r0, #1
 80017cc:	3630      	adds	r6, #48	; 0x30
 80017ce:	42bc      	cmp	r4, r7
 80017d0:	bf08      	it	eq
 80017d2:	f040 0001 	orreq.w	r0, r0, #1
 80017d6:	3730      	adds	r7, #48	; 0x30
 80017d8:	42b4      	cmp	r4, r6
 80017da:	bf08      	it	eq
 80017dc:	f040 0001 	orreq.w	r0, r0, #1
 80017e0:	3630      	adds	r6, #48	; 0x30
 80017e2:	42bc      	cmp	r4, r7
 80017e4:	bf08      	it	eq
 80017e6:	f040 0001 	orreq.w	r0, r0, #1
 80017ea:	4f76      	ldr	r7, [pc, #472]	; (80019c4 <HAL_DMA_Start_IT+0x2bc>)
 80017ec:	42b4      	cmp	r4, r6
 80017ee:	bf08      	it	eq
 80017f0:	f040 0001 	orreq.w	r0, r0, #1
 80017f4:	4e74      	ldr	r6, [pc, #464]	; (80019c8 <HAL_DMA_Start_IT+0x2c0>)
 80017f6:	42bc      	cmp	r4, r7
 80017f8:	bf08      	it	eq
 80017fa:	f040 0001 	orreq.w	r0, r0, #1
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	42b4      	cmp	r4, r6
 8001802:	bf08      	it	eq
 8001804:	f040 0001 	orreq.w	r0, r0, #1
 8001808:	3628      	adds	r6, #40	; 0x28
 800180a:	42bc      	cmp	r4, r7
 800180c:	bf08      	it	eq
 800180e:	f040 0001 	orreq.w	r0, r0, #1
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	42b4      	cmp	r4, r6
 8001816:	bf08      	it	eq
 8001818:	f040 0001 	orreq.w	r0, r0, #1
 800181c:	3628      	adds	r6, #40	; 0x28
 800181e:	42bc      	cmp	r4, r7
 8001820:	bf08      	it	eq
 8001822:	f040 0001 	orreq.w	r0, r0, #1
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	42b4      	cmp	r4, r6
 800182a:	bf08      	it	eq
 800182c:	f040 0001 	orreq.w	r0, r0, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001830:	6dae      	ldr	r6, [r5, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001832:	42bc      	cmp	r4, r7
 8001834:	bf08      	it	eq
 8001836:	f040 0001 	orreq.w	r0, r0, #1
 800183a:	b910      	cbnz	r0, 8001842 <HAL_DMA_Start_IT+0x13a>
 800183c:	4863      	ldr	r0, [pc, #396]	; (80019cc <HAL_DMA_Start_IT+0x2c4>)
 800183e:	4284      	cmp	r4, r0
 8001840:	d108      	bne.n	8001854 <HAL_DMA_Start_IT+0x14c>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001842:	e9d5 0419 	ldrd	r0, r4, [r5, #100]	; 0x64
 8001846:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001848:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800184a:	b110      	cbz	r0, 8001852 <HAL_DMA_Start_IT+0x14a>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800184c:	e9d5 041c 	ldrd	r0, r4, [r5, #112]	; 0x70
 8001850:	6044      	str	r4, [r0, #4]
 8001852:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001854:	485a      	ldr	r0, [pc, #360]	; (80019c0 <HAL_DMA_Start_IT+0x2b8>)
 8001856:	f8df c160 	ldr.w	ip, [pc, #352]	; 80019b8 <HAL_DMA_Start_IT+0x2b0>
 800185a:	4f58      	ldr	r7, [pc, #352]	; (80019bc <HAL_DMA_Start_IT+0x2b4>)
 800185c:	4564      	cmp	r4, ip
 800185e:	bf18      	it	ne
 8001860:	4284      	cmpne	r4, r0
 8001862:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001866:	bf0c      	ite	eq
 8001868:	2001      	moveq	r0, #1
 800186a:	2000      	movne	r0, #0
 800186c:	42bc      	cmp	r4, r7
 800186e:	bf08      	it	eq
 8001870:	f040 0001 	orreq.w	r0, r0, #1
 8001874:	3730      	adds	r7, #48	; 0x30
 8001876:	4564      	cmp	r4, ip
 8001878:	bf08      	it	eq
 800187a:	f040 0001 	orreq.w	r0, r0, #1
 800187e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001882:	42bc      	cmp	r4, r7
 8001884:	bf08      	it	eq
 8001886:	f040 0001 	orreq.w	r0, r0, #1
 800188a:	3730      	adds	r7, #48	; 0x30
 800188c:	4564      	cmp	r4, ip
 800188e:	bf08      	it	eq
 8001890:	f040 0001 	orreq.w	r0, r0, #1
 8001894:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001898:	42bc      	cmp	r4, r7
 800189a:	bf08      	it	eq
 800189c:	f040 0001 	orreq.w	r0, r0, #1
 80018a0:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80018a4:	4564      	cmp	r4, ip
 80018a6:	bf08      	it	eq
 80018a8:	f040 0001 	orreq.w	r0, r0, #1
 80018ac:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 80018b0:	42bc      	cmp	r4, r7
 80018b2:	bf08      	it	eq
 80018b4:	f040 0001 	orreq.w	r0, r0, #1
 80018b8:	3730      	adds	r7, #48	; 0x30
 80018ba:	4564      	cmp	r4, ip
 80018bc:	bf08      	it	eq
 80018be:	f040 0001 	orreq.w	r0, r0, #1
 80018c2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80018c6:	42bc      	cmp	r4, r7
 80018c8:	bf08      	it	eq
 80018ca:	f040 0001 	orreq.w	r0, r0, #1
 80018ce:	3730      	adds	r7, #48	; 0x30
 80018d0:	4564      	cmp	r4, ip
 80018d2:	bf08      	it	eq
 80018d4:	f040 0001 	orreq.w	r0, r0, #1
 80018d8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80018dc:	42bc      	cmp	r4, r7
 80018de:	bf08      	it	eq
 80018e0:	f040 0001 	orreq.w	r0, r0, #1
 80018e4:	3730      	adds	r7, #48	; 0x30
 80018e6:	4564      	cmp	r4, ip
 80018e8:	bf08      	it	eq
 80018ea:	f040 0001 	orreq.w	r0, r0, #1
 80018ee:	42bc      	cmp	r4, r7
 80018f0:	bf08      	it	eq
 80018f2:	f040 0001 	orreq.w	r0, r0, #1
 80018f6:	b918      	cbnz	r0, 8001900 <HAL_DMA_Start_IT+0x1f8>
 80018f8:	4835      	ldr	r0, [pc, #212]	; (80019d0 <HAL_DMA_Start_IT+0x2c8>)
 80018fa:	4284      	cmp	r4, r0
 80018fc:	f040 8179 	bne.w	8001bf2 <HAL_DMA_Start_IT+0x4ea>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001900:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8001902:	203f      	movs	r0, #63	; 0x3f
 8001904:	f004 041f 	and.w	r4, r4, #31
 8001908:	40a0      	lsls	r0, r4
 800190a:	60b0      	str	r0, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800190c:	682c      	ldr	r4, [r5, #0]
 800190e:	6820      	ldr	r0, [r4, #0]
 8001910:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8001914:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001916:	6828      	ldr	r0, [r5, #0]
 8001918:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800191a:	68ab      	ldr	r3, [r5, #8]
 800191c:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800191e:	682b      	ldr	r3, [r5, #0]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001920:	f000 815f 	beq.w	8001be2 <HAL_DMA_Start_IT+0x4da>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001924:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001926:	682b      	ldr	r3, [r5, #0]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	682c      	ldr	r4, [r5, #0]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_DMA_Start_IT+0x2b8>)
 800192e:	4922      	ldr	r1, [pc, #136]	; (80019b8 <HAL_DMA_Start_IT+0x2b0>)
 8001930:	4a22      	ldr	r2, [pc, #136]	; (80019bc <HAL_DMA_Start_IT+0x2b4>)
 8001932:	428c      	cmp	r4, r1
 8001934:	bf18      	it	ne
 8001936:	429c      	cmpne	r4, r3
 8001938:	4826      	ldr	r0, [pc, #152]	; (80019d4 <HAL_DMA_Start_IT+0x2cc>)
 800193a:	f101 0148 	add.w	r1, r1, #72	; 0x48
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	4294      	cmp	r4, r2
 8001946:	bf08      	it	eq
 8001948:	f043 0301 	orreq.w	r3, r3, #1
 800194c:	3248      	adds	r2, #72	; 0x48
 800194e:	4284      	cmp	r4, r0
 8001950:	bf08      	it	eq
 8001952:	f043 0301 	orreq.w	r3, r3, #1
 8001956:	3048      	adds	r0, #72	; 0x48
 8001958:	428c      	cmp	r4, r1
 800195a:	bf08      	it	eq
 800195c:	f043 0301 	orreq.w	r3, r3, #1
 8001960:	3148      	adds	r1, #72	; 0x48
 8001962:	4294      	cmp	r4, r2
 8001964:	bf08      	it	eq
 8001966:	f043 0301 	orreq.w	r3, r3, #1
 800196a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800196e:	4284      	cmp	r4, r0
 8001970:	bf08      	it	eq
 8001972:	f043 0301 	orreq.w	r3, r3, #1
 8001976:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800197a:	428c      	cmp	r4, r1
 800197c:	bf08      	it	eq
 800197e:	f043 0301 	orreq.w	r3, r3, #1
 8001982:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001986:	4294      	cmp	r4, r2
 8001988:	bf08      	it	eq
 800198a:	f043 0301 	orreq.w	r3, r3, #1
 800198e:	3248      	adds	r2, #72	; 0x48
 8001990:	4284      	cmp	r4, r0
 8001992:	bf08      	it	eq
 8001994:	f043 0301 	orreq.w	r3, r3, #1
 8001998:	3048      	adds	r0, #72	; 0x48
 800199a:	428c      	cmp	r4, r1
 800199c:	bf08      	it	eq
 800199e:	f043 0301 	orreq.w	r3, r3, #1
 80019a2:	3148      	adds	r1, #72	; 0x48
 80019a4:	4294      	cmp	r4, r2
 80019a6:	bf08      	it	eq
 80019a8:	f043 0301 	orreq.w	r3, r3, #1
 80019ac:	3248      	adds	r2, #72	; 0x48
 80019ae:	4284      	cmp	r4, r0
 80019b0:	bf08      	it	eq
 80019b2:	f043 0301 	orreq.w	r3, r3, #1
 80019b6:	e00f      	b.n	80019d8 <HAL_DMA_Start_IT+0x2d0>
 80019b8:	40020028 	.word	0x40020028
 80019bc:	40020040 	.word	0x40020040
 80019c0:	40020010 	.word	0x40020010
 80019c4:	58025408 	.word	0x58025408
 80019c8:	5802541c 	.word	0x5802541c
 80019cc:	58025494 	.word	0x58025494
 80019d0:	400204b8 	.word	0x400204b8
 80019d4:	40020058 	.word	0x40020058
 80019d8:	428c      	cmp	r4, r1
 80019da:	bf08      	it	eq
 80019dc:	f043 0301 	orreq.w	r3, r3, #1
 80019e0:	4294      	cmp	r4, r2
 80019e2:	bf08      	it	eq
 80019e4:	f043 0301 	orreq.w	r3, r3, #1
 80019e8:	b91b      	cbnz	r3, 80019f2 <HAL_DMA_Start_IT+0x2ea>
 80019ea:	4b9c      	ldr	r3, [pc, #624]	; (8001c5c <HAL_DMA_Start_IT+0x554>)
 80019ec:	429c      	cmp	r4, r3
 80019ee:	f040 8149 	bne.w	8001c84 <HAL_DMA_Start_IT+0x57c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	f023 031e 	bic.w	r3, r3, #30
 80019f8:	f043 0316 	orr.w	r3, r3, #22
 80019fc:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80019fe:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001a00:	b123      	cbz	r3, 8001a0c <HAL_DMA_Start_IT+0x304>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001a02:	682a      	ldr	r2, [r5, #0]
 8001a04:	6813      	ldr	r3, [r2, #0]
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a0c:	682c      	ldr	r4, [r5, #0]
 8001a0e:	4b94      	ldr	r3, [pc, #592]	; (8001c60 <HAL_DMA_Start_IT+0x558>)
 8001a10:	4a94      	ldr	r2, [pc, #592]	; (8001c64 <HAL_DMA_Start_IT+0x55c>)
 8001a12:	4895      	ldr	r0, [pc, #596]	; (8001c68 <HAL_DMA_Start_IT+0x560>)
 8001a14:	4294      	cmp	r4, r2
 8001a16:	bf18      	it	ne
 8001a18:	429c      	cmpne	r4, r3
 8001a1a:	4994      	ldr	r1, [pc, #592]	; (8001c6c <HAL_DMA_Start_IT+0x564>)
 8001a1c:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	4284      	cmp	r4, r0
 8001a28:	bf08      	it	eq
 8001a2a:	f043 0301 	orreq.w	r3, r3, #1
 8001a2e:	3048      	adds	r0, #72	; 0x48
 8001a30:	428c      	cmp	r4, r1
 8001a32:	bf08      	it	eq
 8001a34:	f043 0301 	orreq.w	r3, r3, #1
 8001a38:	3148      	adds	r1, #72	; 0x48
 8001a3a:	4294      	cmp	r4, r2
 8001a3c:	bf08      	it	eq
 8001a3e:	f043 0301 	orreq.w	r3, r3, #1
 8001a42:	3248      	adds	r2, #72	; 0x48
 8001a44:	4284      	cmp	r4, r0
 8001a46:	bf08      	it	eq
 8001a48:	f043 0301 	orreq.w	r3, r3, #1
 8001a4c:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001a50:	428c      	cmp	r4, r1
 8001a52:	bf08      	it	eq
 8001a54:	f043 0301 	orreq.w	r3, r3, #1
 8001a58:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001a5c:	4294      	cmp	r4, r2
 8001a5e:	bf08      	it	eq
 8001a60:	f043 0301 	orreq.w	r3, r3, #1
 8001a64:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001a68:	4284      	cmp	r4, r0
 8001a6a:	bf08      	it	eq
 8001a6c:	f043 0301 	orreq.w	r3, r3, #1
 8001a70:	3048      	adds	r0, #72	; 0x48
 8001a72:	428c      	cmp	r4, r1
 8001a74:	bf08      	it	eq
 8001a76:	f043 0301 	orreq.w	r3, r3, #1
 8001a7a:	3148      	adds	r1, #72	; 0x48
 8001a7c:	4294      	cmp	r4, r2
 8001a7e:	bf08      	it	eq
 8001a80:	f043 0301 	orreq.w	r3, r3, #1
 8001a84:	3248      	adds	r2, #72	; 0x48
 8001a86:	4284      	cmp	r4, r0
 8001a88:	bf08      	it	eq
 8001a8a:	f043 0301 	orreq.w	r3, r3, #1
 8001a8e:	3048      	adds	r0, #72	; 0x48
 8001a90:	428c      	cmp	r4, r1
 8001a92:	bf08      	it	eq
 8001a94:	f043 0301 	orreq.w	r3, r3, #1
 8001a98:	3148      	adds	r1, #72	; 0x48
 8001a9a:	4294      	cmp	r4, r2
 8001a9c:	bf08      	it	eq
 8001a9e:	f043 0301 	orreq.w	r3, r3, #1
 8001aa2:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8001aa6:	4284      	cmp	r4, r0
 8001aa8:	bf08      	it	eq
 8001aaa:	f043 0301 	orreq.w	r3, r3, #1
 8001aae:	f502 429f 	add.w	r2, r2, #20352	; 0x4f80
 8001ab2:	486f      	ldr	r0, [pc, #444]	; (8001c70 <HAL_DMA_Start_IT+0x568>)
 8001ab4:	428c      	cmp	r4, r1
 8001ab6:	bf08      	it	eq
 8001ab8:	f043 0301 	orreq.w	r3, r3, #1
 8001abc:	496d      	ldr	r1, [pc, #436]	; (8001c74 <HAL_DMA_Start_IT+0x56c>)
 8001abe:	4294      	cmp	r4, r2
 8001ac0:	bf08      	it	eq
 8001ac2:	f043 0301 	orreq.w	r3, r3, #1
 8001ac6:	323c      	adds	r2, #60	; 0x3c
 8001ac8:	4284      	cmp	r4, r0
 8001aca:	bf08      	it	eq
 8001acc:	f043 0301 	orreq.w	r3, r3, #1
 8001ad0:	303c      	adds	r0, #60	; 0x3c
 8001ad2:	428c      	cmp	r4, r1
 8001ad4:	bf08      	it	eq
 8001ad6:	f043 0301 	orreq.w	r3, r3, #1
 8001ada:	313c      	adds	r1, #60	; 0x3c
 8001adc:	4294      	cmp	r4, r2
 8001ade:	bf08      	it	eq
 8001ae0:	f043 0301 	orreq.w	r3, r3, #1
 8001ae4:	323c      	adds	r2, #60	; 0x3c
 8001ae6:	4284      	cmp	r4, r0
 8001ae8:	bf08      	it	eq
 8001aea:	f043 0301 	orreq.w	r3, r3, #1
 8001aee:	428c      	cmp	r4, r1
 8001af0:	bf08      	it	eq
 8001af2:	f043 0301 	orreq.w	r3, r3, #1
 8001af6:	4294      	cmp	r4, r2
 8001af8:	bf08      	it	eq
 8001afa:	f043 0301 	orreq.w	r3, r3, #1
 8001afe:	b913      	cbnz	r3, 8001b06 <HAL_DMA_Start_IT+0x3fe>
 8001b00:	4b5d      	ldr	r3, [pc, #372]	; (8001c78 <HAL_DMA_Start_IT+0x570>)
 8001b02:	429c      	cmp	r4, r3
 8001b04:	d10e      	bne.n	8001b24 <HAL_DMA_Start_IT+0x41c>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b06:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	03d2      	lsls	r2, r2, #15
 8001b0c:	d503      	bpl.n	8001b16 <HAL_DMA_Start_IT+0x40e>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b14:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8001b16:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8001b18:	b11b      	cbz	r3, 8001b22 <HAL_DMA_Start_IT+0x41a>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	682c      	ldr	r4, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b24:	4b4e      	ldr	r3, [pc, #312]	; (8001c60 <HAL_DMA_Start_IT+0x558>)
 8001b26:	494f      	ldr	r1, [pc, #316]	; (8001c64 <HAL_DMA_Start_IT+0x55c>)
 8001b28:	4a4f      	ldr	r2, [pc, #316]	; (8001c68 <HAL_DMA_Start_IT+0x560>)
 8001b2a:	428c      	cmp	r4, r1
 8001b2c:	bf18      	it	ne
 8001b2e:	429c      	cmpne	r4, r3
 8001b30:	4d4e      	ldr	r5, [pc, #312]	; (8001c6c <HAL_DMA_Start_IT+0x564>)
 8001b32:	4852      	ldr	r0, [pc, #328]	; (8001c7c <HAL_DMA_Start_IT+0x574>)
 8001b34:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8001b38:	bf0c      	ite	eq
 8001b3a:	2301      	moveq	r3, #1
 8001b3c:	2300      	movne	r3, #0
 8001b3e:	4294      	cmp	r4, r2
 8001b40:	bf08      	it	eq
 8001b42:	f043 0301 	orreq.w	r3, r3, #1
 8001b46:	3260      	adds	r2, #96	; 0x60
 8001b48:	42ac      	cmp	r4, r5
 8001b4a:	bf08      	it	eq
 8001b4c:	f043 0301 	orreq.w	r3, r3, #1
 8001b50:	3560      	adds	r5, #96	; 0x60
 8001b52:	4284      	cmp	r4, r0
 8001b54:	bf08      	it	eq
 8001b56:	f043 0301 	orreq.w	r3, r3, #1
 8001b5a:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8001b5e:	428c      	cmp	r4, r1
 8001b60:	bf08      	it	eq
 8001b62:	f043 0301 	orreq.w	r3, r3, #1
 8001b66:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 8001b6a:	4294      	cmp	r4, r2
 8001b6c:	bf08      	it	eq
 8001b6e:	f043 0301 	orreq.w	r3, r3, #1
 8001b72:	f502 7268 	add.w	r2, r2, #928	; 0x3a0
 8001b76:	42ac      	cmp	r4, r5
 8001b78:	bf08      	it	eq
 8001b7a:	f043 0301 	orreq.w	r3, r3, #1
 8001b7e:	f505 7568 	add.w	r5, r5, #928	; 0x3a0
 8001b82:	4284      	cmp	r4, r0
 8001b84:	bf08      	it	eq
 8001b86:	f043 0301 	orreq.w	r3, r3, #1
 8001b8a:	3060      	adds	r0, #96	; 0x60
 8001b8c:	428c      	cmp	r4, r1
 8001b8e:	bf08      	it	eq
 8001b90:	f043 0301 	orreq.w	r3, r3, #1
 8001b94:	3160      	adds	r1, #96	; 0x60
 8001b96:	4294      	cmp	r4, r2
 8001b98:	bf08      	it	eq
 8001b9a:	f043 0301 	orreq.w	r3, r3, #1
 8001b9e:	3260      	adds	r2, #96	; 0x60
 8001ba0:	42ac      	cmp	r4, r5
 8001ba2:	bf08      	it	eq
 8001ba4:	f043 0301 	orreq.w	r3, r3, #1
 8001ba8:	4284      	cmp	r4, r0
 8001baa:	bf08      	it	eq
 8001bac:	f043 0301 	orreq.w	r3, r3, #1
 8001bb0:	428c      	cmp	r4, r1
 8001bb2:	bf08      	it	eq
 8001bb4:	f043 0301 	orreq.w	r3, r3, #1
 8001bb8:	4294      	cmp	r4, r2
 8001bba:	bf08      	it	eq
 8001bbc:	f043 0301 	orreq.w	r3, r3, #1
 8001bc0:	b933      	cbnz	r3, 8001bd0 <HAL_DMA_Start_IT+0x4c8>
 8001bc2:	3048      	adds	r0, #72	; 0x48
 8001bc4:	1a20      	subs	r0, r4, r0
 8001bc6:	fab0 f080 	clz	r0, r0
 8001bca:	0940      	lsrs	r0, r0, #5
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d040      	beq.n	8001c52 <HAL_DMA_Start_IT+0x54a>
 8001bd0:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6023      	str	r3, [r4, #0]
}
 8001bda:	bcf0      	pop	{r4, r5, r6, r7}
 8001bdc:	4770      	bx	lr
    return HAL_ERROR;
 8001bde:	2001      	movs	r0, #1
}
 8001be0:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001be2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	60d9      	str	r1, [r3, #12]
 8001be8:	682c      	ldr	r4, [r5, #0]
 8001bea:	e69f      	b.n	800192c <HAL_DMA_Start_IT+0x224>
  __HAL_LOCK(hdma);
 8001bec:	2002      	movs	r0, #2
}
 8001bee:	bcf0      	pop	{r4, r5, r6, r7}
 8001bf0:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001bf2:	4823      	ldr	r0, [pc, #140]	; (8001c80 <HAL_DMA_Start_IT+0x578>)
 8001bf4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8001c70 <HAL_DMA_Start_IT+0x568>
 8001bf8:	4f1e      	ldr	r7, [pc, #120]	; (8001c74 <HAL_DMA_Start_IT+0x56c>)
 8001bfa:	4564      	cmp	r4, ip
 8001bfc:	bf18      	it	ne
 8001bfe:	4284      	cmpne	r4, r0
 8001c00:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001c04:	bf0c      	ite	eq
 8001c06:	2001      	moveq	r0, #1
 8001c08:	2000      	movne	r0, #0
 8001c0a:	42bc      	cmp	r4, r7
 8001c0c:	bf08      	it	eq
 8001c0e:	f040 0001 	orreq.w	r0, r0, #1
 8001c12:	3728      	adds	r7, #40	; 0x28
 8001c14:	4564      	cmp	r4, ip
 8001c16:	bf08      	it	eq
 8001c18:	f040 0001 	orreq.w	r0, r0, #1
 8001c1c:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001c20:	42bc      	cmp	r4, r7
 8001c22:	bf08      	it	eq
 8001c24:	f040 0001 	orreq.w	r0, r0, #1
 8001c28:	3728      	adds	r7, #40	; 0x28
 8001c2a:	4564      	cmp	r4, ip
 8001c2c:	bf08      	it	eq
 8001c2e:	f040 0001 	orreq.w	r0, r0, #1
 8001c32:	42bc      	cmp	r4, r7
 8001c34:	bf08      	it	eq
 8001c36:	f040 0001 	orreq.w	r0, r0, #1
 8001c3a:	b918      	cbnz	r0, 8001c44 <HAL_DMA_Start_IT+0x53c>
 8001c3c:	480e      	ldr	r0, [pc, #56]	; (8001c78 <HAL_DMA_Start_IT+0x570>)
 8001c3e:	4284      	cmp	r4, r0
 8001c40:	f47f ae74 	bne.w	800192c <HAL_DMA_Start_IT+0x224>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001c44:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8001c46:	2001      	movs	r0, #1
 8001c48:	f004 041f 	and.w	r4, r4, #31
 8001c4c:	40a0      	lsls	r0, r4
 8001c4e:	6070      	str	r0, [r6, #4]
 8001c50:	e661      	b.n	8001916 <HAL_DMA_Start_IT+0x20e>
    __HAL_DMA_ENABLE(hdma);
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6023      	str	r3, [r4, #0]
 8001c5a:	e56c      	b.n	8001736 <HAL_DMA_Start_IT+0x2e>
 8001c5c:	400204b8 	.word	0x400204b8
 8001c60:	40020010 	.word	0x40020010
 8001c64:	40020028 	.word	0x40020028
 8001c68:	40020040 	.word	0x40020040
 8001c6c:	40020058 	.word	0x40020058
 8001c70:	5802541c 	.word	0x5802541c
 8001c74:	58025430 	.word	0x58025430
 8001c78:	58025494 	.word	0x58025494
 8001c7c:	40020070 	.word	0x40020070
 8001c80:	58025408 	.word	0x58025408
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	f023 030e 	bic.w	r3, r3, #14
 8001c8a:	f043 030a 	orr.w	r3, r3, #10
 8001c8e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001c90:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f43f aeba 	beq.w	8001a0c <HAL_DMA_Start_IT+0x304>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001c98:	682a      	ldr	r2, [r5, #0]
 8001c9a:	6813      	ldr	r3, [r2, #0]
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e6b3      	b.n	8001a0c <HAL_DMA_Start_IT+0x304>

08001ca4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d06a      	beq.n	8001d7e <HAL_DMA_Abort_IT+0xda>
{
 8001ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cac:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2a02      	cmp	r2, #2
 8001cb4:	d004      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb6:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8001cb8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001cbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cc0:	6802      	ldr	r2, [r0, #0]
 8001cc2:	4986      	ldr	r1, [pc, #536]	; (8001edc <HAL_DMA_Abort_IT+0x238>)
 8001cc4:	428a      	cmp	r2, r1
 8001cc6:	d050      	beq.n	8001d6a <HAL_DMA_Abort_IT+0xc6>
 8001cc8:	4885      	ldr	r0, [pc, #532]	; (8001ee0 <HAL_DMA_Abort_IT+0x23c>)
 8001cca:	4282      	cmp	r2, r0
 8001ccc:	d04d      	beq.n	8001d6a <HAL_DMA_Abort_IT+0xc6>
 8001cce:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8001ef8 <HAL_DMA_Abort_IT+0x254>
 8001cd2:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8001ef4 <HAL_DMA_Abort_IT+0x250>
 8001cd6:	f8df e230 	ldr.w	lr, [pc, #560]	; 8001f08 <HAL_DMA_Abort_IT+0x264>
 8001cda:	454a      	cmp	r2, r9
 8001cdc:	bf18      	it	ne
 8001cde:	4542      	cmpne	r2, r8
 8001ce0:	f8df c228 	ldr.w	ip, [pc, #552]	; 8001f0c <HAL_DMA_Abort_IT+0x268>
 8001ce4:	4f7f      	ldr	r7, [pc, #508]	; (8001ee4 <HAL_DMA_Abort_IT+0x240>)
 8001ce6:	bf0c      	ite	eq
 8001ce8:	f04f 0a01 	moveq.w	sl, #1
 8001cec:	f04f 0a00 	movne.w	sl, #0
 8001cf0:	4c7d      	ldr	r4, [pc, #500]	; (8001ee8 <HAL_DMA_Abort_IT+0x244>)
 8001cf2:	4572      	cmp	r2, lr
 8001cf4:	bf08      	it	eq
 8001cf6:	f04a 0a01 	orreq.w	sl, sl, #1
 8001cfa:	f8df b214 	ldr.w	fp, [pc, #532]	; 8001f10 <HAL_DMA_Abort_IT+0x26c>
 8001cfe:	4e7b      	ldr	r6, [pc, #492]	; (8001eec <HAL_DMA_Abort_IT+0x248>)
 8001d00:	4562      	cmp	r2, ip
 8001d02:	bf08      	it	eq
 8001d04:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d08:	4d79      	ldr	r5, [pc, #484]	; (8001ef0 <HAL_DMA_Abort_IT+0x24c>)
 8001d0a:	42ba      	cmp	r2, r7
 8001d0c:	bf08      	it	eq
 8001d0e:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d12:	42a2      	cmp	r2, r4
 8001d14:	bf08      	it	eq
 8001d16:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d1a:	f504 7456 	add.w	r4, r4, #856	; 0x358
 8001d1e:	42a2      	cmp	r2, r4
 8001d20:	bf08      	it	eq
 8001d22:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d26:	3418      	adds	r4, #24
 8001d28:	42a2      	cmp	r2, r4
 8001d2a:	bf08      	it	eq
 8001d2c:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d30:	3418      	adds	r4, #24
 8001d32:	42a2      	cmp	r2, r4
 8001d34:	bf08      	it	eq
 8001d36:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d3a:	3460      	adds	r4, #96	; 0x60
 8001d3c:	455a      	cmp	r2, fp
 8001d3e:	bf08      	it	eq
 8001d40:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d44:	42b2      	cmp	r2, r6
 8001d46:	bf08      	it	eq
 8001d48:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d4c:	42aa      	cmp	r2, r5
 8001d4e:	bf08      	it	eq
 8001d50:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d54:	42a2      	cmp	r2, r4
 8001d56:	bf08      	it	eq
 8001d58:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d5c:	f1ba 0f00 	cmp.w	sl, #0
 8001d60:	d103      	bne.n	8001d6a <HAL_DMA_Abort_IT+0xc6>
 8001d62:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8001f14 <HAL_DMA_Abort_IT+0x270>
 8001d66:	4552      	cmp	r2, sl
 8001d68:	d10b      	bne.n	8001d82 <HAL_DMA_Abort_IT+0xde>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d6a:	2104      	movs	r1, #4
  return HAL_OK;
 8001d6c:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d6e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001d72:	6813      	ldr	r3, [r2, #0]
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6013      	str	r3, [r2, #0]
}
 8001d7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8001d7e:	2001      	movs	r0, #1
}
 8001d80:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d82:	6814      	ldr	r4, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d84:	4856      	ldr	r0, [pc, #344]	; (8001ee0 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d86:	f024 040e 	bic.w	r4, r4, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d8a:	4d5a      	ldr	r5, [pc, #360]	; (8001ef4 <HAL_DMA_Abort_IT+0x250>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d8c:	6014      	str	r4, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 8001d8e:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d90:	4c59      	ldr	r4, [pc, #356]	; (8001ef8 <HAL_DMA_Abort_IT+0x254>)
      __HAL_DMA_DISABLE(hdma);
 8001d92:	6811      	ldr	r1, [r2, #0]
 8001d94:	f021 0101 	bic.w	r1, r1, #1
 8001d98:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d9a:	4a50      	ldr	r2, [pc, #320]	; (8001edc <HAL_DMA_Abort_IT+0x238>)
 8001d9c:	6819      	ldr	r1, [r3, #0]
 8001d9e:	4281      	cmp	r1, r0
 8001da0:	bf18      	it	ne
 8001da2:	4291      	cmpne	r1, r2
 8001da4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001da8:	bf0c      	ite	eq
 8001daa:	2201      	moveq	r2, #1
 8001dac:	2200      	movne	r2, #0
 8001dae:	42a9      	cmp	r1, r5
 8001db0:	bf08      	it	eq
 8001db2:	f042 0201 	orreq.w	r2, r2, #1
 8001db6:	3548      	adds	r5, #72	; 0x48
 8001db8:	42a1      	cmp	r1, r4
 8001dba:	bf08      	it	eq
 8001dbc:	f042 0201 	orreq.w	r2, r2, #1
 8001dc0:	3448      	adds	r4, #72	; 0x48
 8001dc2:	4281      	cmp	r1, r0
 8001dc4:	bf08      	it	eq
 8001dc6:	f042 0201 	orreq.w	r2, r2, #1
 8001dca:	3048      	adds	r0, #72	; 0x48
 8001dcc:	42a9      	cmp	r1, r5
 8001dce:	bf08      	it	eq
 8001dd0:	f042 0201 	orreq.w	r2, r2, #1
 8001dd4:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8001dd8:	42a1      	cmp	r1, r4
 8001dda:	bf08      	it	eq
 8001ddc:	f042 0201 	orreq.w	r2, r2, #1
 8001de0:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8001de4:	4281      	cmp	r1, r0
 8001de6:	bf08      	it	eq
 8001de8:	f042 0201 	orreq.w	r2, r2, #1
 8001dec:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001df0:	42a9      	cmp	r1, r5
 8001df2:	bf08      	it	eq
 8001df4:	f042 0201 	orreq.w	r2, r2, #1
 8001df8:	3548      	adds	r5, #72	; 0x48
 8001dfa:	42a1      	cmp	r1, r4
 8001dfc:	bf08      	it	eq
 8001dfe:	f042 0201 	orreq.w	r2, r2, #1
 8001e02:	3448      	adds	r4, #72	; 0x48
 8001e04:	4281      	cmp	r1, r0
 8001e06:	bf08      	it	eq
 8001e08:	f042 0201 	orreq.w	r2, r2, #1
 8001e0c:	3048      	adds	r0, #72	; 0x48
 8001e0e:	42a9      	cmp	r1, r5
 8001e10:	bf08      	it	eq
 8001e12:	f042 0201 	orreq.w	r2, r2, #1
 8001e16:	3548      	adds	r5, #72	; 0x48
 8001e18:	42a1      	cmp	r1, r4
 8001e1a:	bf08      	it	eq
 8001e1c:	f042 0201 	orreq.w	r2, r2, #1
 8001e20:	3448      	adds	r4, #72	; 0x48
 8001e22:	4281      	cmp	r1, r0
 8001e24:	bf08      	it	eq
 8001e26:	f042 0201 	orreq.w	r2, r2, #1
 8001e2a:	f100 50c0 	add.w	r0, r0, #402653184	; 0x18000000
 8001e2e:	42a9      	cmp	r1, r5
 8001e30:	bf08      	it	eq
 8001e32:	f042 0201 	orreq.w	r2, r2, #1
 8001e36:	f500 409f 	add.w	r0, r0, #20352	; 0x4f80
 8001e3a:	4d30      	ldr	r5, [pc, #192]	; (8001efc <HAL_DMA_Abort_IT+0x258>)
 8001e3c:	42a1      	cmp	r1, r4
 8001e3e:	bf08      	it	eq
 8001e40:	f042 0201 	orreq.w	r2, r2, #1
 8001e44:	4c2e      	ldr	r4, [pc, #184]	; (8001f00 <HAL_DMA_Abort_IT+0x25c>)
 8001e46:	4281      	cmp	r1, r0
 8001e48:	bf08      	it	eq
 8001e4a:	f042 0201 	orreq.w	r2, r2, #1
 8001e4e:	303c      	adds	r0, #60	; 0x3c
 8001e50:	42a9      	cmp	r1, r5
 8001e52:	bf08      	it	eq
 8001e54:	f042 0201 	orreq.w	r2, r2, #1
 8001e58:	353c      	adds	r5, #60	; 0x3c
 8001e5a:	42a1      	cmp	r1, r4
 8001e5c:	bf08      	it	eq
 8001e5e:	f042 0201 	orreq.w	r2, r2, #1
 8001e62:	343c      	adds	r4, #60	; 0x3c
 8001e64:	4281      	cmp	r1, r0
 8001e66:	bf08      	it	eq
 8001e68:	f042 0201 	orreq.w	r2, r2, #1
 8001e6c:	303c      	adds	r0, #60	; 0x3c
 8001e6e:	42a9      	cmp	r1, r5
 8001e70:	bf08      	it	eq
 8001e72:	f042 0201 	orreq.w	r2, r2, #1
 8001e76:	42a1      	cmp	r1, r4
 8001e78:	bf08      	it	eq
 8001e7a:	f042 0201 	orreq.w	r2, r2, #1
 8001e7e:	4281      	cmp	r1, r0
 8001e80:	bf08      	it	eq
 8001e82:	f042 0201 	orreq.w	r2, r2, #1
 8001e86:	b912      	cbnz	r2, 8001e8e <HAL_DMA_Abort_IT+0x1ea>
 8001e88:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <HAL_DMA_Abort_IT+0x260>)
 8001e8a:	4291      	cmp	r1, r2
 8001e8c:	d117      	bne.n	8001ebe <HAL_DMA_Abort_IT+0x21a>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e8e:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e90:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e92:	6801      	ldr	r1, [r0, #0]
 8001e94:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001e98:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e9e:	f001 011f 	and.w	r1, r1, #31
 8001ea2:	408a      	lsls	r2, r1
 8001ea4:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ea6:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8001eaa:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8001eac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001eae:	b132      	cbz	r2, 8001ebe <HAL_DMA_Abort_IT+0x21a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eb0:	6811      	ldr	r1, [r2, #0]
 8001eb2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001eb6:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eb8:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8001ebc:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 8001ebe:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001ec0:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8001ec2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8001ec4:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001ec8:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8001ecc:	b11a      	cbz	r2, 8001ed6 <HAL_DMA_Abort_IT+0x232>
 8001ece:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8001ed0:	4790      	blx	r2
  return HAL_OK;
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	e6f2      	b.n	8001cbc <HAL_DMA_Abort_IT+0x18>
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	e6f0      	b.n	8001cbc <HAL_DMA_Abort_IT+0x18>
 8001eda:	bf00      	nop
 8001edc:	40020010 	.word	0x40020010
 8001ee0:	40020028 	.word	0x40020028
 8001ee4:	400200a0 	.word	0x400200a0
 8001ee8:	400200b8 	.word	0x400200b8
 8001eec:	40020470 	.word	0x40020470
 8001ef0:	40020488 	.word	0x40020488
 8001ef4:	40020040 	.word	0x40020040
 8001ef8:	40020058 	.word	0x40020058
 8001efc:	5802541c 	.word	0x5802541c
 8001f00:	58025430 	.word	0x58025430
 8001f04:	58025494 	.word	0x58025494
 8001f08:	40020070 	.word	0x40020070
 8001f0c:	40020088 	.word	0x40020088
 8001f10:	40020458 	.word	0x40020458
 8001f14:	400204b8 	.word	0x400204b8

08001f18 <HAL_DMA_IRQHandler>:
{
 8001f18:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f1a:	4ba5      	ldr	r3, [pc, #660]	; (80021b0 <HAL_DMA_IRQHandler+0x298>)
{
 8001f1c:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f1e:	6804      	ldr	r4, [r0, #0]
  __IO uint32_t count = 0U;
 8001f20:	2100      	movs	r1, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f22:	4aa4      	ldr	r2, [pc, #656]	; (80021b4 <HAL_DMA_IRQHandler+0x29c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f24:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f26:	429c      	cmp	r4, r3
  __IO uint32_t count = 0U;
 8001f28:	9101      	str	r1, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f2a:	6816      	ldr	r6, [r2, #0]
  tmpisr_dma  = regs_dma->ISR;
 8001f2c:	682f      	ldr	r7, [r5, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8001f2e:	682a      	ldr	r2, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f30:	d04d      	beq.n	8001fce <HAL_DMA_IRQHandler+0xb6>
 8001f32:	3318      	adds	r3, #24
 8001f34:	429c      	cmp	r4, r3
 8001f36:	d04a      	beq.n	8001fce <HAL_DMA_IRQHandler+0xb6>
 8001f38:	3330      	adds	r3, #48	; 0x30
 8001f3a:	f8df c284 	ldr.w	ip, [pc, #644]	; 80021c0 <HAL_DMA_IRQHandler+0x2a8>
 8001f3e:	499e      	ldr	r1, [pc, #632]	; (80021b8 <HAL_DMA_IRQHandler+0x2a0>)
 8001f40:	4564      	cmp	r4, ip
 8001f42:	bf18      	it	ne
 8001f44:	429c      	cmpne	r4, r3
 8001f46:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	428c      	cmp	r4, r1
 8001f52:	bf08      	it	eq
 8001f54:	f043 0301 	orreq.w	r3, r3, #1
 8001f58:	3130      	adds	r1, #48	; 0x30
 8001f5a:	4564      	cmp	r4, ip
 8001f5c:	bf08      	it	eq
 8001f5e:	f043 0301 	orreq.w	r3, r3, #1
 8001f62:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001f66:	428c      	cmp	r4, r1
 8001f68:	bf08      	it	eq
 8001f6a:	f043 0301 	orreq.w	r3, r3, #1
 8001f6e:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8001f72:	4564      	cmp	r4, ip
 8001f74:	bf08      	it	eq
 8001f76:	f043 0301 	orreq.w	r3, r3, #1
 8001f7a:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8001f7e:	428c      	cmp	r4, r1
 8001f80:	bf08      	it	eq
 8001f82:	f043 0301 	orreq.w	r3, r3, #1
 8001f86:	3130      	adds	r1, #48	; 0x30
 8001f88:	4564      	cmp	r4, ip
 8001f8a:	bf08      	it	eq
 8001f8c:	f043 0301 	orreq.w	r3, r3, #1
 8001f90:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001f94:	428c      	cmp	r4, r1
 8001f96:	bf08      	it	eq
 8001f98:	f043 0301 	orreq.w	r3, r3, #1
 8001f9c:	3130      	adds	r1, #48	; 0x30
 8001f9e:	4564      	cmp	r4, ip
 8001fa0:	bf08      	it	eq
 8001fa2:	f043 0301 	orreq.w	r3, r3, #1
 8001fa6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001faa:	428c      	cmp	r4, r1
 8001fac:	bf08      	it	eq
 8001fae:	f043 0301 	orreq.w	r3, r3, #1
 8001fb2:	3130      	adds	r1, #48	; 0x30
 8001fb4:	4564      	cmp	r4, ip
 8001fb6:	bf08      	it	eq
 8001fb8:	f043 0301 	orreq.w	r3, r3, #1
 8001fbc:	428c      	cmp	r4, r1
 8001fbe:	bf08      	it	eq
 8001fc0:	f043 0301 	orreq.w	r3, r3, #1
 8001fc4:	b91b      	cbnz	r3, 8001fce <HAL_DMA_IRQHandler+0xb6>
 8001fc6:	4b7d      	ldr	r3, [pc, #500]	; (80021bc <HAL_DMA_IRQHandler+0x2a4>)
 8001fc8:	429c      	cmp	r4, r3
 8001fca:	f040 821e 	bne.w	800240a <HAL_DMA_IRQHandler+0x4f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fce:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	f001 021f 	and.w	r2, r1, #31
 8001fd6:	4093      	lsls	r3, r2
 8001fd8:	423b      	tst	r3, r7
 8001fda:	f040 81fb 	bne.w	80023d4 <HAL_DMA_IRQHandler+0x4bc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fde:	fa27 f302 	lsr.w	r3, r7, r2
 8001fe2:	07dc      	lsls	r4, r3, #31
 8001fe4:	d563      	bpl.n	80020ae <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001fe6:	6801      	ldr	r1, [r0, #0]
 8001fe8:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <HAL_DMA_IRQHandler+0x298>)
 8001fea:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80021c4 <HAL_DMA_IRQHandler+0x2ac>
 8001fee:	4c74      	ldr	r4, [pc, #464]	; (80021c0 <HAL_DMA_IRQHandler+0x2a8>)
 8001ff0:	4561      	cmp	r1, ip
 8001ff2:	bf18      	it	ne
 8001ff4:	4299      	cmpne	r1, r3
 8001ff6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	42a1      	cmp	r1, r4
 8002002:	bf08      	it	eq
 8002004:	f043 0301 	orreq.w	r3, r3, #1
 8002008:	3430      	adds	r4, #48	; 0x30
 800200a:	4561      	cmp	r1, ip
 800200c:	bf08      	it	eq
 800200e:	f043 0301 	orreq.w	r3, r3, #1
 8002012:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002016:	42a1      	cmp	r1, r4
 8002018:	bf08      	it	eq
 800201a:	f043 0301 	orreq.w	r3, r3, #1
 800201e:	3430      	adds	r4, #48	; 0x30
 8002020:	4561      	cmp	r1, ip
 8002022:	bf08      	it	eq
 8002024:	f043 0301 	orreq.w	r3, r3, #1
 8002028:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800202c:	42a1      	cmp	r1, r4
 800202e:	bf08      	it	eq
 8002030:	f043 0301 	orreq.w	r3, r3, #1
 8002034:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8002038:	4561      	cmp	r1, ip
 800203a:	bf08      	it	eq
 800203c:	f043 0301 	orreq.w	r3, r3, #1
 8002040:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8002044:	42a1      	cmp	r1, r4
 8002046:	bf08      	it	eq
 8002048:	f043 0301 	orreq.w	r3, r3, #1
 800204c:	3430      	adds	r4, #48	; 0x30
 800204e:	4561      	cmp	r1, ip
 8002050:	bf08      	it	eq
 8002052:	f043 0301 	orreq.w	r3, r3, #1
 8002056:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800205a:	42a1      	cmp	r1, r4
 800205c:	bf08      	it	eq
 800205e:	f043 0301 	orreq.w	r3, r3, #1
 8002062:	3430      	adds	r4, #48	; 0x30
 8002064:	4561      	cmp	r1, ip
 8002066:	bf08      	it	eq
 8002068:	f043 0301 	orreq.w	r3, r3, #1
 800206c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002070:	42a1      	cmp	r1, r4
 8002072:	bf08      	it	eq
 8002074:	f043 0301 	orreq.w	r3, r3, #1
 8002078:	3430      	adds	r4, #48	; 0x30
 800207a:	4561      	cmp	r1, ip
 800207c:	bf08      	it	eq
 800207e:	f043 0301 	orreq.w	r3, r3, #1
 8002082:	42a1      	cmp	r1, r4
 8002084:	bf08      	it	eq
 8002086:	f043 0301 	orreq.w	r3, r3, #1
 800208a:	b91b      	cbnz	r3, 8002094 <HAL_DMA_IRQHandler+0x17c>
 800208c:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <HAL_DMA_IRQHandler+0x2a4>)
 800208e:	4299      	cmp	r1, r3
 8002090:	f040 8285 	bne.w	800259e <HAL_DMA_IRQHandler+0x686>
 8002094:	694b      	ldr	r3, [r1, #20]
 8002096:	0619      	lsls	r1, r3, #24
 8002098:	d509      	bpl.n	80020ae <HAL_DMA_IRQHandler+0x196>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800209a:	2101      	movs	r1, #1
 800209c:	4091      	lsls	r1, r2
 800209e:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80020a2:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	f001 021f 	and.w	r2, r1, #31
 80020ac:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020ae:	2404      	movs	r4, #4
 80020b0:	4094      	lsls	r4, r2
 80020b2:	423c      	tst	r4, r7
 80020b4:	d067      	beq.n	8002186 <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80020b6:	6801      	ldr	r1, [r0, #0]
 80020b8:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <HAL_DMA_IRQHandler+0x298>)
 80020ba:	f8df e108 	ldr.w	lr, [pc, #264]	; 80021c4 <HAL_DMA_IRQHandler+0x2ac>
 80020be:	f8df c100 	ldr.w	ip, [pc, #256]	; 80021c0 <HAL_DMA_IRQHandler+0x2a8>
 80020c2:	4571      	cmp	r1, lr
 80020c4:	bf18      	it	ne
 80020c6:	4299      	cmpne	r1, r3
 80020c8:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80020cc:	bf0c      	ite	eq
 80020ce:	2301      	moveq	r3, #1
 80020d0:	2300      	movne	r3, #0
 80020d2:	4561      	cmp	r1, ip
 80020d4:	bf08      	it	eq
 80020d6:	f043 0301 	orreq.w	r3, r3, #1
 80020da:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80020de:	4571      	cmp	r1, lr
 80020e0:	bf08      	it	eq
 80020e2:	f043 0301 	orreq.w	r3, r3, #1
 80020e6:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80020ea:	4561      	cmp	r1, ip
 80020ec:	bf08      	it	eq
 80020ee:	f043 0301 	orreq.w	r3, r3, #1
 80020f2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80020f6:	4571      	cmp	r1, lr
 80020f8:	bf08      	it	eq
 80020fa:	f043 0301 	orreq.w	r3, r3, #1
 80020fe:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002102:	4561      	cmp	r1, ip
 8002104:	bf08      	it	eq
 8002106:	f043 0301 	orreq.w	r3, r3, #1
 800210a:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 800210e:	4571      	cmp	r1, lr
 8002110:	bf08      	it	eq
 8002112:	f043 0301 	orreq.w	r3, r3, #1
 8002116:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 800211a:	4561      	cmp	r1, ip
 800211c:	bf08      	it	eq
 800211e:	f043 0301 	orreq.w	r3, r3, #1
 8002122:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002126:	4571      	cmp	r1, lr
 8002128:	bf08      	it	eq
 800212a:	f043 0301 	orreq.w	r3, r3, #1
 800212e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002132:	4561      	cmp	r1, ip
 8002134:	bf08      	it	eq
 8002136:	f043 0301 	orreq.w	r3, r3, #1
 800213a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800213e:	4571      	cmp	r1, lr
 8002140:	bf08      	it	eq
 8002142:	f043 0301 	orreq.w	r3, r3, #1
 8002146:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800214a:	4561      	cmp	r1, ip
 800214c:	bf08      	it	eq
 800214e:	f043 0301 	orreq.w	r3, r3, #1
 8002152:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002156:	4571      	cmp	r1, lr
 8002158:	bf08      	it	eq
 800215a:	f043 0301 	orreq.w	r3, r3, #1
 800215e:	4561      	cmp	r1, ip
 8002160:	bf08      	it	eq
 8002162:	f043 0301 	orreq.w	r3, r3, #1
 8002166:	b91b      	cbnz	r3, 8002170 <HAL_DMA_IRQHandler+0x258>
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_DMA_IRQHandler+0x2a4>)
 800216a:	4299      	cmp	r1, r3
 800216c:	f040 8215 	bne.w	800259a <HAL_DMA_IRQHandler+0x682>
 8002170:	680b      	ldr	r3, [r1, #0]
 8002172:	079b      	lsls	r3, r3, #30
 8002174:	d507      	bpl.n	8002186 <HAL_DMA_IRQHandler+0x26e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002176:	60ac      	str	r4, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002178:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800217a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	f001 021f 	and.w	r2, r1, #31
 8002184:	6543      	str	r3, [r0, #84]	; 0x54
 8002186:	4604      	mov	r4, r0
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002188:	2010      	movs	r0, #16
 800218a:	4090      	lsls	r0, r2
 800218c:	4238      	tst	r0, r7
 800218e:	f000 8086 	beq.w	800229e <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002192:	6821      	ldr	r1, [r4, #0]
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_DMA_IRQHandler+0x298>)
 8002196:	f8df e02c 	ldr.w	lr, [pc, #44]	; 80021c4 <HAL_DMA_IRQHandler+0x2ac>
 800219a:	f8df c024 	ldr.w	ip, [pc, #36]	; 80021c0 <HAL_DMA_IRQHandler+0x2a8>
 800219e:	4571      	cmp	r1, lr
 80021a0:	bf18      	it	ne
 80021a2:	4299      	cmpne	r1, r3
 80021a4:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80021a8:	bf08      	it	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	e00c      	b.n	80021c8 <HAL_DMA_IRQHandler+0x2b0>
 80021ae:	bf00      	nop
 80021b0:	40020010 	.word	0x40020010
 80021b4:	20000038 	.word	0x20000038
 80021b8:	40020070 	.word	0x40020070
 80021bc:	400204b8 	.word	0x400204b8
 80021c0:	40020040 	.word	0x40020040
 80021c4:	40020028 	.word	0x40020028
 80021c8:	bf18      	it	ne
 80021ca:	2300      	movne	r3, #0
 80021cc:	4561      	cmp	r1, ip
 80021ce:	bf08      	it	eq
 80021d0:	f043 0301 	orreq.w	r3, r3, #1
 80021d4:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80021d8:	4571      	cmp	r1, lr
 80021da:	bf08      	it	eq
 80021dc:	f043 0301 	orreq.w	r3, r3, #1
 80021e0:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80021e4:	4561      	cmp	r1, ip
 80021e6:	bf08      	it	eq
 80021e8:	f043 0301 	orreq.w	r3, r3, #1
 80021ec:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80021f0:	4571      	cmp	r1, lr
 80021f2:	bf08      	it	eq
 80021f4:	f043 0301 	orreq.w	r3, r3, #1
 80021f8:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80021fc:	4561      	cmp	r1, ip
 80021fe:	bf08      	it	eq
 8002200:	f043 0301 	orreq.w	r3, r3, #1
 8002204:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8002208:	4571      	cmp	r1, lr
 800220a:	bf08      	it	eq
 800220c:	f043 0301 	orreq.w	r3, r3, #1
 8002210:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8002214:	4561      	cmp	r1, ip
 8002216:	bf08      	it	eq
 8002218:	f043 0301 	orreq.w	r3, r3, #1
 800221c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002220:	4571      	cmp	r1, lr
 8002222:	bf08      	it	eq
 8002224:	f043 0301 	orreq.w	r3, r3, #1
 8002228:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800222c:	4561      	cmp	r1, ip
 800222e:	bf08      	it	eq
 8002230:	f043 0301 	orreq.w	r3, r3, #1
 8002234:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002238:	4571      	cmp	r1, lr
 800223a:	bf08      	it	eq
 800223c:	f043 0301 	orreq.w	r3, r3, #1
 8002240:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002244:	4561      	cmp	r1, ip
 8002246:	bf08      	it	eq
 8002248:	f043 0301 	orreq.w	r3, r3, #1
 800224c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002250:	4571      	cmp	r1, lr
 8002252:	bf08      	it	eq
 8002254:	f043 0301 	orreq.w	r3, r3, #1
 8002258:	4561      	cmp	r1, ip
 800225a:	bf08      	it	eq
 800225c:	f043 0301 	orreq.w	r3, r3, #1
 8002260:	b91b      	cbnz	r3, 800226a <HAL_DMA_IRQHandler+0x352>
 8002262:	4b9f      	ldr	r3, [pc, #636]	; (80024e0 <HAL_DMA_IRQHandler+0x5c8>)
 8002264:	4299      	cmp	r1, r3
 8002266:	f040 8194 	bne.w	8002592 <HAL_DMA_IRQHandler+0x67a>
 800226a:	680b      	ldr	r3, [r1, #0]
 800226c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002270:	b1ab      	cbz	r3, 800229e <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002272:	60a8      	str	r0, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	0350      	lsls	r0, r2, #13
 800227a:	f100 8102 	bmi.w	8002482 <HAL_DMA_IRQHandler+0x56a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	05d2      	lsls	r2, r2, #23
 8002282:	d403      	bmi.n	800228c <HAL_DMA_IRQHandler+0x374>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	f022 0208 	bic.w	r2, r2, #8
 800228a:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800228c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80ff 	beq.w	8002492 <HAL_DMA_IRQHandler+0x57a>
            hdma->XferHalfCpltCallback(hdma);
 8002294:	4620      	mov	r0, r4
 8002296:	4798      	blx	r3
 8002298:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800229a:	f001 021f 	and.w	r2, r1, #31
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800229e:	2120      	movs	r1, #32
 80022a0:	4091      	lsls	r1, r2
 80022a2:	4239      	tst	r1, r7
 80022a4:	d068      	beq.n	8002378 <HAL_DMA_IRQHandler+0x460>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80022a6:	6822      	ldr	r2, [r4, #0]
 80022a8:	4b8e      	ldr	r3, [pc, #568]	; (80024e4 <HAL_DMA_IRQHandler+0x5cc>)
 80022aa:	4f8f      	ldr	r7, [pc, #572]	; (80024e8 <HAL_DMA_IRQHandler+0x5d0>)
 80022ac:	488f      	ldr	r0, [pc, #572]	; (80024ec <HAL_DMA_IRQHandler+0x5d4>)
 80022ae:	42ba      	cmp	r2, r7
 80022b0:	bf18      	it	ne
 80022b2:	429a      	cmpne	r2, r3
 80022b4:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80022b8:	bf0c      	ite	eq
 80022ba:	2301      	moveq	r3, #1
 80022bc:	2300      	movne	r3, #0
 80022be:	4282      	cmp	r2, r0
 80022c0:	bf08      	it	eq
 80022c2:	f043 0301 	orreq.w	r3, r3, #1
 80022c6:	3030      	adds	r0, #48	; 0x30
 80022c8:	42ba      	cmp	r2, r7
 80022ca:	bf08      	it	eq
 80022cc:	f043 0301 	orreq.w	r3, r3, #1
 80022d0:	3730      	adds	r7, #48	; 0x30
 80022d2:	4282      	cmp	r2, r0
 80022d4:	bf08      	it	eq
 80022d6:	f043 0301 	orreq.w	r3, r3, #1
 80022da:	3030      	adds	r0, #48	; 0x30
 80022dc:	42ba      	cmp	r2, r7
 80022de:	bf08      	it	eq
 80022e0:	f043 0301 	orreq.w	r3, r3, #1
 80022e4:	3730      	adds	r7, #48	; 0x30
 80022e6:	4282      	cmp	r2, r0
 80022e8:	bf08      	it	eq
 80022ea:	f043 0301 	orreq.w	r3, r3, #1
 80022ee:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80022f2:	42ba      	cmp	r2, r7
 80022f4:	bf08      	it	eq
 80022f6:	f043 0301 	orreq.w	r3, r3, #1
 80022fa:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80022fe:	4282      	cmp	r2, r0
 8002300:	bf08      	it	eq
 8002302:	f043 0301 	orreq.w	r3, r3, #1
 8002306:	3030      	adds	r0, #48	; 0x30
 8002308:	42ba      	cmp	r2, r7
 800230a:	bf08      	it	eq
 800230c:	f043 0301 	orreq.w	r3, r3, #1
 8002310:	3730      	adds	r7, #48	; 0x30
 8002312:	4282      	cmp	r2, r0
 8002314:	bf08      	it	eq
 8002316:	f043 0301 	orreq.w	r3, r3, #1
 800231a:	3030      	adds	r0, #48	; 0x30
 800231c:	42ba      	cmp	r2, r7
 800231e:	bf08      	it	eq
 8002320:	f043 0301 	orreq.w	r3, r3, #1
 8002324:	3730      	adds	r7, #48	; 0x30
 8002326:	4282      	cmp	r2, r0
 8002328:	bf08      	it	eq
 800232a:	f043 0301 	orreq.w	r3, r3, #1
 800232e:	3030      	adds	r0, #48	; 0x30
 8002330:	42ba      	cmp	r2, r7
 8002332:	bf08      	it	eq
 8002334:	f043 0301 	orreq.w	r3, r3, #1
 8002338:	4282      	cmp	r2, r0
 800233a:	bf08      	it	eq
 800233c:	f043 0301 	orreq.w	r3, r3, #1
 8002340:	b91b      	cbnz	r3, 800234a <HAL_DMA_IRQHandler+0x432>
 8002342:	4b67      	ldr	r3, [pc, #412]	; (80024e0 <HAL_DMA_IRQHandler+0x5c8>)
 8002344:	429a      	cmp	r2, r3
 8002346:	f040 812c 	bne.w	80025a2 <HAL_DMA_IRQHandler+0x68a>
 800234a:	6813      	ldr	r3, [r2, #0]
 800234c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002350:	b193      	cbz	r3, 8002378 <HAL_DMA_IRQHandler+0x460>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002352:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002354:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002358:	2b04      	cmp	r3, #4
 800235a:	f000 809e 	beq.w	800249a <HAL_DMA_IRQHandler+0x582>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	0357      	lsls	r7, r2, #13
 8002364:	f140 80ce 	bpl.w	8002504 <HAL_DMA_IRQHandler+0x5ec>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	031d      	lsls	r5, r3, #12
 800236c:	f140 80d9 	bpl.w	8002522 <HAL_DMA_IRQHandler+0x60a>
          if(hdma->XferCpltCallback != NULL)
 8002370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002372:	b10b      	cbz	r3, 8002378 <HAL_DMA_IRQHandler+0x460>
            hdma->XferCpltCallback(hdma);
 8002374:	4620      	mov	r0, r4
 8002376:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002378:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800237a:	2b00      	cmp	r3, #0
 800237c:	d07f      	beq.n	800247e <HAL_DMA_IRQHandler+0x566>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800237e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002380:	07d8      	lsls	r0, r3, #31
 8002382:	d51f      	bpl.n	80023c4 <HAL_DMA_IRQHandler+0x4ac>
        __HAL_DMA_DISABLE(hdma);
 8002384:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8002386:	2004      	movs	r0, #4
 8002388:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002394:	4b56      	ldr	r3, [pc, #344]	; (80024f0 <HAL_DMA_IRQHandler+0x5d8>)
 8002396:	6822      	ldr	r2, [r4, #0]
 8002398:	fba3 3606 	umull	r3, r6, r3, r6
 800239c:	0ab6      	lsrs	r6, r6, #10
 800239e:	e002      	b.n	80023a6 <HAL_DMA_IRQHandler+0x48e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80023a0:	6813      	ldr	r3, [r2, #0]
 80023a2:	07d9      	lsls	r1, r3, #31
 80023a4:	d504      	bpl.n	80023b0 <HAL_DMA_IRQHandler+0x498>
          if (++count > timeout)
 80023a6:	9b01      	ldr	r3, [sp, #4]
 80023a8:	3301      	adds	r3, #1
 80023aa:	42b3      	cmp	r3, r6
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	d9f7      	bls.n	80023a0 <HAL_DMA_IRQHandler+0x488>
        __HAL_UNLOCK(hdma);
 80023b0:	2300      	movs	r3, #0
 80023b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023b6:	6813      	ldr	r3, [r2, #0]
 80023b8:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80023ba:	bf4c      	ite	mi
 80023bc:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80023be:	2301      	movpl	r3, #1
 80023c0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 80023c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d059      	beq.n	800247e <HAL_DMA_IRQHandler+0x566>
        hdma->XferErrorCallback(hdma);
 80023ca:	4620      	mov	r0, r4
}
 80023cc:	b003      	add	sp, #12
 80023ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 80023d2:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	075b      	lsls	r3, r3, #29
 80023d8:	f57f ae01 	bpl.w	8001fde <HAL_DMA_IRQHandler+0xc6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80023dc:	6822      	ldr	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023de:	2308      	movs	r3, #8
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80023e0:	f022 0204 	bic.w	r2, r2, #4
 80023e4:	6022      	str	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023e6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80023e8:	f002 021f 	and.w	r2, r2, #31
 80023ec:	4093      	lsls	r3, r2
 80023ee:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023f0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023f2:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	f001 021f 	and.w	r2, r1, #31
 80023fc:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023fe:	fa27 f302 	lsr.w	r3, r7, r2
 8002402:	07dc      	lsls	r4, r3, #31
 8002404:	f57f ae53 	bpl.w	80020ae <HAL_DMA_IRQHandler+0x196>
 8002408:	e5ed      	b.n	8001fe6 <HAL_DMA_IRQHandler+0xce>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800240a:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <HAL_DMA_IRQHandler+0x5dc>)
 800240c:	4e3a      	ldr	r6, [pc, #232]	; (80024f8 <HAL_DMA_IRQHandler+0x5e0>)
 800240e:	493b      	ldr	r1, [pc, #236]	; (80024fc <HAL_DMA_IRQHandler+0x5e4>)
 8002410:	42b4      	cmp	r4, r6
 8002412:	bf18      	it	ne
 8002414:	429c      	cmpne	r4, r3
 8002416:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	428c      	cmp	r4, r1
 8002422:	bf08      	it	eq
 8002424:	f043 0301 	orreq.w	r3, r3, #1
 8002428:	3128      	adds	r1, #40	; 0x28
 800242a:	42b4      	cmp	r4, r6
 800242c:	bf08      	it	eq
 800242e:	f043 0301 	orreq.w	r3, r3, #1
 8002432:	3628      	adds	r6, #40	; 0x28
 8002434:	428c      	cmp	r4, r1
 8002436:	bf08      	it	eq
 8002438:	f043 0301 	orreq.w	r3, r3, #1
 800243c:	3128      	adds	r1, #40	; 0x28
 800243e:	42b4      	cmp	r4, r6
 8002440:	bf08      	it	eq
 8002442:	f043 0301 	orreq.w	r3, r3, #1
 8002446:	428c      	cmp	r4, r1
 8002448:	bf08      	it	eq
 800244a:	f043 0301 	orreq.w	r3, r3, #1
 800244e:	b913      	cbnz	r3, 8002456 <HAL_DMA_IRQHandler+0x53e>
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_DMA_IRQHandler+0x5e8>)
 8002452:	429c      	cmp	r4, r3
 8002454:	d113      	bne.n	800247e <HAL_DMA_IRQHandler+0x566>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002456:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8002458:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800245a:	6823      	ldr	r3, [r4, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800245c:	f001 011f 	and.w	r1, r1, #31
 8002460:	408e      	lsls	r6, r1
 8002462:	4216      	tst	r6, r2
 8002464:	d066      	beq.n	8002534 <HAL_DMA_IRQHandler+0x61c>
 8002466:	075f      	lsls	r7, r3, #29
 8002468:	d564      	bpl.n	8002534 <HAL_DMA_IRQHandler+0x61c>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800246a:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800246c:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800246e:	f140 809c 	bpl.w	80025aa <HAL_DMA_IRQHandler+0x692>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002472:	03da      	lsls	r2, r3, #15
 8002474:	f100 80f1 	bmi.w	800265a <HAL_DMA_IRQHandler+0x742>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002478:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1a6      	bne.n	80023cc <HAL_DMA_IRQHandler+0x4b4>
}
 800247e:	b003      	add	sp, #12
 8002480:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0319      	lsls	r1, r3, #12
 8002486:	f57f af01 	bpl.w	800228c <HAL_DMA_IRQHandler+0x374>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800248a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800248c:	2b00      	cmp	r3, #0
 800248e:	f47f af01 	bne.w	8002294 <HAL_DMA_IRQHandler+0x37c>
 8002492:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002494:	f002 021f 	and.w	r2, r2, #31
 8002498:	e701      	b.n	800229e <HAL_DMA_IRQHandler+0x386>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800249a:	6822      	ldr	r2, [r4, #0]
 800249c:	6813      	ldr	r3, [r2, #0]
 800249e:	f023 0316 	bic.w	r3, r3, #22
 80024a2:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024a4:	6822      	ldr	r2, [r4, #0]
 80024a6:	6953      	ldr	r3, [r2, #20]
 80024a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ac:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d03b      	beq.n	800252c <HAL_DMA_IRQHandler+0x614>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80024b4:	6822      	ldr	r2, [r4, #0]
 80024b6:	6813      	ldr	r3, [r2, #0]
 80024b8:	f023 0308 	bic.w	r3, r3, #8
 80024bc:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024be:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80024c0:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 80024c2:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 80024c4:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024c6:	f002 021f 	and.w	r2, r2, #31
 80024ca:	4093      	lsls	r3, r2
 80024cc:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 80024ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
          __HAL_UNLOCK(hdma);
 80024d0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80024d4:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f47f af76 	bne.w	80023ca <HAL_DMA_IRQHandler+0x4b2>
 80024de:	e7ce      	b.n	800247e <HAL_DMA_IRQHandler+0x566>
 80024e0:	400204b8 	.word	0x400204b8
 80024e4:	40020010 	.word	0x40020010
 80024e8:	40020028 	.word	0x40020028
 80024ec:	40020040 	.word	0x40020040
 80024f0:	1b4e81b5 	.word	0x1b4e81b5
 80024f4:	58025408 	.word	0x58025408
 80024f8:	5802541c 	.word	0x5802541c
 80024fc:	58025430 	.word	0x58025430
 8002500:	58025494 	.word	0x58025494
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800250a:	f47f af31 	bne.w	8002370 <HAL_DMA_IRQHandler+0x458>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800250e:	6819      	ldr	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8002510:	2001      	movs	r0, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002512:	f021 0110 	bic.w	r1, r1, #16
 8002516:	6019      	str	r1, [r3, #0]
            __HAL_UNLOCK(hdma);
 8002518:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800251c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8002520:	e726      	b.n	8002370 <HAL_DMA_IRQHandler+0x458>
            if(hdma->XferM1CpltCallback != NULL)
 8002522:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f af25 	bne.w	8002374 <HAL_DMA_IRQHandler+0x45c>
 800252a:	e725      	b.n	8002378 <HAL_DMA_IRQHandler+0x460>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800252c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1c0      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x59c>
 8002532:	e7c4      	b.n	80024be <HAL_DMA_IRQHandler+0x5a6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002534:	2602      	movs	r6, #2
 8002536:	408e      	lsls	r6, r1
 8002538:	4216      	tst	r6, r2
 800253a:	d00d      	beq.n	8002558 <HAL_DMA_IRQHandler+0x640>
 800253c:	079f      	lsls	r7, r3, #30
 800253e:	d50b      	bpl.n	8002558 <HAL_DMA_IRQHandler+0x640>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002540:	041c      	lsls	r4, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002542:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002544:	f140 808e 	bpl.w	8002664 <HAL_DMA_IRQHandler+0x74c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002548:	03d9      	lsls	r1, r3, #15
 800254a:	f100 80e9 	bmi.w	8002720 <HAL_DMA_IRQHandler+0x808>
          if(hdma->XferM1CpltCallback != NULL)
 800254e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002550:	2b00      	cmp	r3, #0
 8002552:	f47f af3b 	bne.w	80023cc <HAL_DMA_IRQHandler+0x4b4>
 8002556:	e792      	b.n	800247e <HAL_DMA_IRQHandler+0x566>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002558:	2608      	movs	r6, #8
 800255a:	fa06 f101 	lsl.w	r1, r6, r1
 800255e:	4211      	tst	r1, r2
 8002560:	d08d      	beq.n	800247e <HAL_DMA_IRQHandler+0x566>
 8002562:	071b      	lsls	r3, r3, #28
 8002564:	d58b      	bpl.n	800247e <HAL_DMA_IRQHandler+0x566>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002566:	6823      	ldr	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002568:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800256a:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256c:	f023 030e 	bic.w	r3, r3, #14
 8002570:	6023      	str	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002572:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 800257e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002580:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8002582:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002586:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800258a:	2b00      	cmp	r3, #0
 800258c:	f47f af1e 	bne.w	80023cc <HAL_DMA_IRQHandler+0x4b4>
 8002590:	e775      	b.n	800247e <HAL_DMA_IRQHandler+0x566>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002592:	680b      	ldr	r3, [r1, #0]
 8002594:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002598:	e66a      	b.n	8002270 <HAL_DMA_IRQHandler+0x358>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800259a:	680b      	ldr	r3, [r1, #0]
 800259c:	e5f3      	b.n	8002186 <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800259e:	680b      	ldr	r3, [r1, #0]
 80025a0:	e585      	b.n	80020ae <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80025a2:	6813      	ldr	r3, [r2, #0]
 80025a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80025a8:	e6d2      	b.n	8002350 <HAL_DMA_IRQHandler+0x438>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80025aa:	069b      	lsls	r3, r3, #26
 80025ac:	d455      	bmi.n	800265a <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ae:	6802      	ldr	r2, [r0, #0]
 80025b0:	4b63      	ldr	r3, [pc, #396]	; (8002740 <HAL_DMA_IRQHandler+0x828>)
 80025b2:	4c64      	ldr	r4, [pc, #400]	; (8002744 <HAL_DMA_IRQHandler+0x82c>)
 80025b4:	4964      	ldr	r1, [pc, #400]	; (8002748 <HAL_DMA_IRQHandler+0x830>)
 80025b6:	42a2      	cmp	r2, r4
 80025b8:	bf18      	it	ne
 80025ba:	429a      	cmpne	r2, r3
 80025bc:	4d63      	ldr	r5, [pc, #396]	; (800274c <HAL_DMA_IRQHandler+0x834>)
 80025be:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	428a      	cmp	r2, r1
 80025ca:	bf08      	it	eq
 80025cc:	f043 0301 	orreq.w	r3, r3, #1
 80025d0:	3148      	adds	r1, #72	; 0x48
 80025d2:	42aa      	cmp	r2, r5
 80025d4:	bf08      	it	eq
 80025d6:	f043 0301 	orreq.w	r3, r3, #1
 80025da:	3548      	adds	r5, #72	; 0x48
 80025dc:	42a2      	cmp	r2, r4
 80025de:	bf08      	it	eq
 80025e0:	f043 0301 	orreq.w	r3, r3, #1
 80025e4:	3448      	adds	r4, #72	; 0x48
 80025e6:	428a      	cmp	r2, r1
 80025e8:	bf08      	it	eq
 80025ea:	f043 0301 	orreq.w	r3, r3, #1
 80025ee:	f501 7162 	add.w	r1, r1, #904	; 0x388
 80025f2:	42aa      	cmp	r2, r5
 80025f4:	bf08      	it	eq
 80025f6:	f043 0301 	orreq.w	r3, r3, #1
 80025fa:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80025fe:	42a2      	cmp	r2, r4
 8002600:	bf08      	it	eq
 8002602:	f043 0301 	orreq.w	r3, r3, #1
 8002606:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800260a:	428a      	cmp	r2, r1
 800260c:	bf08      	it	eq
 800260e:	f043 0301 	orreq.w	r3, r3, #1
 8002612:	3148      	adds	r1, #72	; 0x48
 8002614:	42aa      	cmp	r2, r5
 8002616:	bf08      	it	eq
 8002618:	f043 0301 	orreq.w	r3, r3, #1
 800261c:	3548      	adds	r5, #72	; 0x48
 800261e:	42a2      	cmp	r2, r4
 8002620:	bf08      	it	eq
 8002622:	f043 0301 	orreq.w	r3, r3, #1
 8002626:	3448      	adds	r4, #72	; 0x48
 8002628:	428a      	cmp	r2, r1
 800262a:	bf08      	it	eq
 800262c:	f043 0301 	orreq.w	r3, r3, #1
 8002630:	3148      	adds	r1, #72	; 0x48
 8002632:	42aa      	cmp	r2, r5
 8002634:	bf08      	it	eq
 8002636:	f043 0301 	orreq.w	r3, r3, #1
 800263a:	42a2      	cmp	r2, r4
 800263c:	bf08      	it	eq
 800263e:	f043 0301 	orreq.w	r3, r3, #1
 8002642:	428a      	cmp	r2, r1
 8002644:	bf08      	it	eq
 8002646:	f043 0301 	orreq.w	r3, r3, #1
 800264a:	b913      	cbnz	r3, 8002652 <HAL_DMA_IRQHandler+0x73a>
 800264c:	4b40      	ldr	r3, [pc, #256]	; (8002750 <HAL_DMA_IRQHandler+0x838>)
 800264e:	429a      	cmp	r2, r3
 8002650:	d16b      	bne.n	800272a <HAL_DMA_IRQHandler+0x812>
 8002652:	6813      	ldr	r3, [r2, #0]
 8002654:	f023 0308 	bic.w	r3, r3, #8
 8002658:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800265a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800265c:	2b00      	cmp	r3, #0
 800265e:	f47f aeb5 	bne.w	80023cc <HAL_DMA_IRQHandler+0x4b4>
 8002662:	e70c      	b.n	800247e <HAL_DMA_IRQHandler+0x566>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002664:	069a      	lsls	r2, r3, #26
 8002666:	d45b      	bmi.n	8002720 <HAL_DMA_IRQHandler+0x808>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002668:	6802      	ldr	r2, [r0, #0]
 800266a:	4b35      	ldr	r3, [pc, #212]	; (8002740 <HAL_DMA_IRQHandler+0x828>)
 800266c:	4c35      	ldr	r4, [pc, #212]	; (8002744 <HAL_DMA_IRQHandler+0x82c>)
 800266e:	4936      	ldr	r1, [pc, #216]	; (8002748 <HAL_DMA_IRQHandler+0x830>)
 8002670:	42a2      	cmp	r2, r4
 8002672:	bf18      	it	ne
 8002674:	429a      	cmpne	r2, r3
 8002676:	4d35      	ldr	r5, [pc, #212]	; (800274c <HAL_DMA_IRQHandler+0x834>)
 8002678:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800267c:	bf0c      	ite	eq
 800267e:	2301      	moveq	r3, #1
 8002680:	2300      	movne	r3, #0
 8002682:	428a      	cmp	r2, r1
 8002684:	bf08      	it	eq
 8002686:	f043 0301 	orreq.w	r3, r3, #1
 800268a:	3148      	adds	r1, #72	; 0x48
 800268c:	42aa      	cmp	r2, r5
 800268e:	bf08      	it	eq
 8002690:	f043 0301 	orreq.w	r3, r3, #1
 8002694:	3548      	adds	r5, #72	; 0x48
 8002696:	42a2      	cmp	r2, r4
 8002698:	bf08      	it	eq
 800269a:	f043 0301 	orreq.w	r3, r3, #1
 800269e:	3448      	adds	r4, #72	; 0x48
 80026a0:	428a      	cmp	r2, r1
 80026a2:	bf08      	it	eq
 80026a4:	f043 0301 	orreq.w	r3, r3, #1
 80026a8:	f501 7162 	add.w	r1, r1, #904	; 0x388
 80026ac:	42aa      	cmp	r2, r5
 80026ae:	bf08      	it	eq
 80026b0:	f043 0301 	orreq.w	r3, r3, #1
 80026b4:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80026b8:	42a2      	cmp	r2, r4
 80026ba:	bf08      	it	eq
 80026bc:	f043 0301 	orreq.w	r3, r3, #1
 80026c0:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80026c4:	428a      	cmp	r2, r1
 80026c6:	bf08      	it	eq
 80026c8:	f043 0301 	orreq.w	r3, r3, #1
 80026cc:	3148      	adds	r1, #72	; 0x48
 80026ce:	42aa      	cmp	r2, r5
 80026d0:	bf08      	it	eq
 80026d2:	f043 0301 	orreq.w	r3, r3, #1
 80026d6:	3548      	adds	r5, #72	; 0x48
 80026d8:	42a2      	cmp	r2, r4
 80026da:	bf08      	it	eq
 80026dc:	f043 0301 	orreq.w	r3, r3, #1
 80026e0:	3448      	adds	r4, #72	; 0x48
 80026e2:	428a      	cmp	r2, r1
 80026e4:	bf08      	it	eq
 80026e6:	f043 0301 	orreq.w	r3, r3, #1
 80026ea:	3148      	adds	r1, #72	; 0x48
 80026ec:	42aa      	cmp	r2, r5
 80026ee:	bf08      	it	eq
 80026f0:	f043 0301 	orreq.w	r3, r3, #1
 80026f4:	42a2      	cmp	r2, r4
 80026f6:	bf08      	it	eq
 80026f8:	f043 0301 	orreq.w	r3, r3, #1
 80026fc:	428a      	cmp	r2, r1
 80026fe:	bf08      	it	eq
 8002700:	f043 0301 	orreq.w	r3, r3, #1
 8002704:	b913      	cbnz	r3, 800270c <HAL_DMA_IRQHandler+0x7f4>
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_DMA_IRQHandler+0x838>)
 8002708:	429a      	cmp	r2, r3
 800270a:	d113      	bne.n	8002734 <HAL_DMA_IRQHandler+0x81c>
 800270c:	6813      	ldr	r3, [r2, #0]
 800270e:	f023 0314 	bic.w	r3, r3, #20
 8002712:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(hdma);
 8002714:	2200      	movs	r2, #0
          hdma->State = HAL_DMA_STATE_READY;
 8002716:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002718:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800271c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002720:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002722:	2b00      	cmp	r3, #0
 8002724:	f47f ae52 	bne.w	80023cc <HAL_DMA_IRQHandler+0x4b4>
 8002728:	e6a9      	b.n	800247e <HAL_DMA_IRQHandler+0x566>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800272a:	6813      	ldr	r3, [r2, #0]
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e792      	b.n	800265a <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002734:	6813      	ldr	r3, [r2, #0]
 8002736:	f023 030a 	bic.w	r3, r3, #10
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e7ea      	b.n	8002714 <HAL_DMA_IRQHandler+0x7fc>
 800273e:	bf00      	nop
 8002740:	40020010 	.word	0x40020010
 8002744:	40020028 	.word	0x40020028
 8002748:	40020040 	.word	0x40020040
 800274c:	40020058 	.word	0x40020058
 8002750:	400204b8 	.word	0x400204b8

08002754 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002754:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8002756:	4770      	bx	lr

08002758 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002758:	680b      	ldr	r3, [r1, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80e8 	beq.w	8002930 <HAL_GPIO_Init+0x1d8>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002760:	f8df c224 	ldr.w	ip, [pc, #548]	; 8002988 <HAL_GPIO_Init+0x230>
{
 8002764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8002768:	2500      	movs	r5, #0
{
 800276a:	b083      	sub	sp, #12
 800276c:	f8df e21c 	ldr.w	lr, [pc, #540]	; 800298c <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002770:	4f7f      	ldr	r7, [pc, #508]	; (8002970 <HAL_GPIO_Init+0x218>)
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002772:	2201      	movs	r2, #1
 8002774:	40aa      	lsls	r2, r5
    if (iocurrent != 0x00U)
 8002776:	ea12 0603 	ands.w	r6, r2, r3
 800277a:	f000 80bf 	beq.w	80028fc <HAL_GPIO_Init+0x1a4>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800277e:	684b      	ldr	r3, [r1, #4]
 8002780:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8002784:	2403      	movs	r4, #3
 8002786:	f023 0910 	bic.w	r9, r3, #16
 800278a:	fa04 f408 	lsl.w	r4, r4, r8
 800278e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002792:	43e4      	mvns	r4, r4
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002794:	f1b9 0f01 	cmp.w	r9, #1
 8002798:	d814      	bhi.n	80027c4 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->OSPEEDR;
 800279a:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800279c:	ea03 0904 	and.w	r9, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a0:	68cb      	ldr	r3, [r1, #12]
 80027a2:	fa03 f308 	lsl.w	r3, r3, r8
 80027a6:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OSPEEDR = temp;
 80027aa:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027ac:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 80027ae:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027b6:	ea29 0902 	bic.w	r9, r9, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027ba:	fa03 f205 	lsl.w	r2, r3, r5
 80027be:	ea42 0209 	orr.w	r2, r2, r9
        GPIOx->OTYPER = temp;
 80027c2:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80027c4:	68c2      	ldr	r2, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c6:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027c8:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ca:	fa03 f308 	lsl.w	r3, r3, r8
 80027ce:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 80027d0:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d2:	684b      	ldr	r3, [r1, #4]
 80027d4:	f023 0210 	bic.w	r2, r3, #16
 80027d8:	2a02      	cmp	r2, #2
 80027da:	d115      	bne.n	8002808 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 80027dc:	08ea      	lsrs	r2, r5, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027de:	f005 0907 	and.w	r9, r5, #7
 80027e2:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027e6:	690b      	ldr	r3, [r1, #16]
 80027e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027ec:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80027f0:	f8d2 a020 	ldr.w	sl, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027f4:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027f8:	fa03 f309 	lsl.w	r3, r3, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027fc:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002800:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002804:	6213      	str	r3, [r2, #32]
 8002806:	684b      	ldr	r3, [r1, #4]
      temp = GPIOx->MODER;
 8002808:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800280a:	f003 0303 	and.w	r3, r3, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800280e:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002810:	fa03 f308 	lsl.w	r3, r3, r8
 8002814:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8002816:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002818:	684b      	ldr	r3, [r1, #4]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	d56d      	bpl.n	80028fa <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281e:	f8dc 40f4 	ldr.w	r4, [ip, #244]	; 0xf4
 8002822:	f025 0903 	bic.w	r9, r5, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002826:	f005 0303 	and.w	r3, r5, #3
 800282a:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282c:	f044 0802 	orr.w	r8, r4, #2
 8002830:	eb09 040e 	add.w	r4, r9, lr
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002834:	ea4f 0983 	mov.w	r9, r3, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002838:	4b4e      	ldr	r3, [pc, #312]	; (8002974 <HAL_GPIO_Init+0x21c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	f8cc 80f4 	str.w	r8, [ip, #244]	; 0xf4
 800283e:	f8dc 80f4 	ldr.w	r8, [ip, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002842:	fa02 f209 	lsl.w	r2, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002846:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002848:	f008 0802 	and.w	r8, r8, #2
 800284c:	f8cd 8004 	str.w	r8, [sp, #4]
 8002850:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002854:	f8d4 8008 	ldr.w	r8, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002858:	ea28 0202 	bic.w	r2, r8, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800285c:	d026      	beq.n	80028ac <HAL_GPIO_Init+0x154>
 800285e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002862:	4298      	cmp	r0, r3
 8002864:	d058      	beq.n	8002918 <HAL_GPIO_Init+0x1c0>
 8002866:	4b44      	ldr	r3, [pc, #272]	; (8002978 <HAL_GPIO_Init+0x220>)
 8002868:	4298      	cmp	r0, r3
 800286a:	d04f      	beq.n	800290c <HAL_GPIO_Init+0x1b4>
 800286c:	4b43      	ldr	r3, [pc, #268]	; (800297c <HAL_GPIO_Init+0x224>)
 800286e:	4298      	cmp	r0, r3
 8002870:	d05f      	beq.n	8002932 <HAL_GPIO_Init+0x1da>
 8002872:	4b43      	ldr	r3, [pc, #268]	; (8002980 <HAL_GPIO_Init+0x228>)
 8002874:	4298      	cmp	r0, r3
 8002876:	d062      	beq.n	800293e <HAL_GPIO_Init+0x1e6>
 8002878:	4b42      	ldr	r3, [pc, #264]	; (8002984 <HAL_GPIO_Init+0x22c>)
 800287a:	4298      	cmp	r0, r3
 800287c:	d052      	beq.n	8002924 <HAL_GPIO_Init+0x1cc>
 800287e:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8002990 <HAL_GPIO_Init+0x238>
 8002882:	4540      	cmp	r0, r8
 8002884:	d061      	beq.n	800294a <HAL_GPIO_Init+0x1f2>
 8002886:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002994 <HAL_GPIO_Init+0x23c>
 800288a:	4540      	cmp	r0, r8
 800288c:	d063      	beq.n	8002956 <HAL_GPIO_Init+0x1fe>
 800288e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8002998 <HAL_GPIO_Init+0x240>
 8002892:	4540      	cmp	r0, r8
 8002894:	d065      	beq.n	8002962 <HAL_GPIO_Init+0x20a>
 8002896:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800299c <HAL_GPIO_Init+0x244>
 800289a:	4540      	cmp	r0, r8
 800289c:	bf0c      	ite	eq
 800289e:	f04f 0809 	moveq.w	r8, #9
 80028a2:	f04f 080a 	movne.w	r8, #10
 80028a6:	fa08 f309 	lsl.w	r3, r8, r9
 80028aa:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ac:	60a2      	str	r2, [r4, #8]
        temp &= ~(iocurrent);
 80028ae:	43f2      	mvns	r2, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b0:	684c      	ldr	r4, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80028b2:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp = EXTI_CurrentCPU->IMR1;
 80028b6:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b8:	03e4      	lsls	r4, r4, #15
          temp |= iocurrent;
 80028ba:	bf4c      	ite	mi
 80028bc:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 80028be:	4013      	andpl	r3, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80028c0:	603b      	str	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c2:	684c      	ldr	r4, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80028c4:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c6:	03a4      	lsls	r4, r4, #14
          temp |= iocurrent;
 80028c8:	bf4c      	ite	mi
 80028ca:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 80028cc:	4013      	andpl	r3, r2
        EXTI_CurrentCPU->EMR1 = temp;
 80028ce:	607b      	str	r3, [r7, #4]
        temp = EXTI->RTSR1;
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d4:	684c      	ldr	r4, [r1, #4]
        temp = EXTI->RTSR1;
 80028d6:	681b      	ldr	r3, [r3, #0]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d8:	02e4      	lsls	r4, r4, #11
          temp |= iocurrent;
 80028da:	bf4c      	ite	mi
 80028dc:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 80028de:	4013      	andpl	r3, r2
        EXTI->RTSR1 = temp;
 80028e0:	f8c8 3000 	str.w	r3, [r8]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028e4:	684c      	ldr	r4, [r1, #4]
        temp = EXTI->FTSR1;
 80028e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ea:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80028ec:	bf54      	ite	pl
 80028ee:	ea02 0603 	andpl.w	r6, r2, r3
        {
          temp |= iocurrent;
 80028f2:	431e      	orrmi	r6, r3
        }
        EXTI->FTSR1 = temp;
 80028f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f8:	605e      	str	r6, [r3, #4]
 80028fa:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 80028fc:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028fe:	fa33 f205 	lsrs.w	r2, r3, r5
 8002902:	f47f af36 	bne.w	8002772 <HAL_GPIO_Init+0x1a>
  }
}
 8002906:	b003      	add	sp, #12
 8002908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800290c:	f04f 0802 	mov.w	r8, #2
 8002910:	fa08 f309 	lsl.w	r3, r8, r9
 8002914:	431a      	orrs	r2, r3
 8002916:	e7c9      	b.n	80028ac <HAL_GPIO_Init+0x154>
 8002918:	f04f 0801 	mov.w	r8, #1
 800291c:	fa08 f309 	lsl.w	r3, r8, r9
 8002920:	431a      	orrs	r2, r3
 8002922:	e7c3      	b.n	80028ac <HAL_GPIO_Init+0x154>
 8002924:	f04f 0805 	mov.w	r8, #5
 8002928:	fa08 f309 	lsl.w	r3, r8, r9
 800292c:	431a      	orrs	r2, r3
 800292e:	e7bd      	b.n	80028ac <HAL_GPIO_Init+0x154>
 8002930:	4770      	bx	lr
 8002932:	f04f 0803 	mov.w	r8, #3
 8002936:	fa08 f309 	lsl.w	r3, r8, r9
 800293a:	431a      	orrs	r2, r3
 800293c:	e7b6      	b.n	80028ac <HAL_GPIO_Init+0x154>
 800293e:	f04f 0804 	mov.w	r8, #4
 8002942:	fa08 f309 	lsl.w	r3, r8, r9
 8002946:	431a      	orrs	r2, r3
 8002948:	e7b0      	b.n	80028ac <HAL_GPIO_Init+0x154>
 800294a:	f04f 0806 	mov.w	r8, #6
 800294e:	fa08 f309 	lsl.w	r3, r8, r9
 8002952:	431a      	orrs	r2, r3
 8002954:	e7aa      	b.n	80028ac <HAL_GPIO_Init+0x154>
 8002956:	f04f 0807 	mov.w	r8, #7
 800295a:	fa08 f309 	lsl.w	r3, r8, r9
 800295e:	431a      	orrs	r2, r3
 8002960:	e7a4      	b.n	80028ac <HAL_GPIO_Init+0x154>
 8002962:	f04f 0808 	mov.w	r8, #8
 8002966:	fa08 f309 	lsl.w	r3, r8, r9
 800296a:	431a      	orrs	r2, r3
 800296c:	e79e      	b.n	80028ac <HAL_GPIO_Init+0x154>
 800296e:	bf00      	nop
 8002970:	58000080 	.word	0x58000080
 8002974:	58020000 	.word	0x58020000
 8002978:	58020800 	.word	0x58020800
 800297c:	58020c00 	.word	0x58020c00
 8002980:	58021000 	.word	0x58021000
 8002984:	58021400 	.word	0x58021400
 8002988:	58024400 	.word	0x58024400
 800298c:	58000400 	.word	0x58000400
 8002990:	58021800 	.word	0x58021800
 8002994:	58021c00 	.word	0x58021c00
 8002998:	58022000 	.word	0x58022000
 800299c:	58022400 	.word	0x58022400

080029a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80029a0:	6903      	ldr	r3, [r0, #16]
 80029a2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80029a4:	bf14      	ite	ne
 80029a6:	2001      	movne	r0, #1
 80029a8:	2000      	moveq	r0, #0
 80029aa:	4770      	bx	lr

080029ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ac:	b902      	cbnz	r2, 80029b0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029ae:	0409      	lsls	r1, r1, #16
 80029b0:	6181      	str	r1, [r0, #24]
  }
}
 80029b2:	4770      	bx	lr

080029b4 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d056      	beq.n	8002a66 <HAL_I2C_Init+0xb2>
{
 80029b8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029be:	4604      	mov	r4, r0
 80029c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d049      	beq.n	8002a5c <HAL_I2C_Init+0xa8>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c8:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80029ca:	2324      	movs	r3, #36	; 0x24
 80029cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80029d0:	6813      	ldr	r3, [r2, #0]
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029d8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80029dc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80029e0:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029e2:	6822      	ldr	r2, [r4, #0]
 80029e4:	6893      	ldr	r3, [r2, #8]
 80029e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029ea:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ec:	68e3      	ldr	r3, [r4, #12]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029ee:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f0:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029f2:	68a3      	ldr	r3, [r4, #8]
 80029f4:	bf0c      	ite	eq
 80029f6:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029fa:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 80029fe:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a00:	68e3      	ldr	r3, [r4, #12]
 8002a02:	6825      	ldr	r5, [r4, #0]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d024      	beq.n	8002a52 <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a08:	6868      	ldr	r0, [r5, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0a:	2200      	movs	r2, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a0c:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_I2C_Init+0xb8>)
  hi2c->State = HAL_I2C_STATE_READY;
 8002a0e:	2120      	movs	r1, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a10:	4303      	orrs	r3, r0
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8002a12:	4610      	mov	r0, r2
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a14:	606b      	str	r3, [r5, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a16:	6825      	ldr	r5, [r4, #0]
 8002a18:	68eb      	ldr	r3, [r5, #12]
 8002a1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a1e:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a20:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
 8002a24:	432b      	orrs	r3, r5
 8002a26:	69a5      	ldr	r5, [r4, #24]
 8002a28:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002a2c:	6825      	ldr	r5, [r4, #0]
 8002a2e:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a30:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8002a34:	432b      	orrs	r3, r5
 8002a36:	6825      	ldr	r5, [r4, #0]
 8002a38:	602b      	str	r3, [r5, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002a3a:	6825      	ldr	r5, [r4, #0]
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	602b      	str	r3, [r5, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a44:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4a:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8002a50:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a56:	606b      	str	r3, [r5, #4]
 8002a58:	6825      	ldr	r5, [r4, #0]
 8002a5a:	e7d5      	b.n	8002a08 <HAL_I2C_Init+0x54>
    hi2c->Lock = HAL_UNLOCKED;
 8002a5c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002a60:	f005 fcac 	bl	80083bc <HAL_I2C_MspInit>
 8002a64:	e7b0      	b.n	80029c8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002a66:	2001      	movs	r0, #1
}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	02008000 	.word	0x02008000

08002a70 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a70:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	2a20      	cmp	r2, #32
 8002a78:	d126      	bne.n	8002ac8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002a7a:	4603      	mov	r3, r0
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002a80:	2801      	cmp	r0, #1
 8002a82:	d021      	beq.n	8002ac8 <HAL_I2CEx_ConfigAnalogFilter+0x58>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a84:	2024      	movs	r0, #36	; 0x24
{
 8002a86:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(hi2c);
 8002a88:	2401      	movs	r4, #1

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a8a:	681e      	ldr	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a90:	2500      	movs	r5, #0
    __HAL_LOCK(hi2c);
 8002a92:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002a96:	6834      	ldr	r4, [r6, #0]

    return HAL_OK;
 8002a98:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 8002a9a:	f024 0401 	bic.w	r4, r4, #1
 8002a9e:	6034      	str	r4, [r6, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002aa0:	681e      	ldr	r6, [r3, #0]
 8002aa2:	6834      	ldr	r4, [r6, #0]
 8002aa4:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002aa8:	6034      	str	r4, [r6, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002aaa:	681e      	ldr	r6, [r3, #0]
 8002aac:	6834      	ldr	r4, [r6, #0]
 8002aae:	4321      	orrs	r1, r4
 8002ab0:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002ab2:	681c      	ldr	r4, [r3, #0]
 8002ab4:	6821      	ldr	r1, [r4, #0]
 8002ab6:	f041 0101 	orr.w	r1, r1, #1
 8002aba:	6021      	str	r1, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002ac0:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002ac4:	bc70      	pop	{r4, r5, r6}
 8002ac6:	4770      	bx	lr
    return HAL_BUSY;
 8002ac8:	2002      	movs	r0, #2
}
 8002aca:	4770      	bx	lr

08002acc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002acc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	2a20      	cmp	r2, #32
 8002ad4:	d124      	bne.n	8002b20 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002ad6:	4603      	mov	r3, r0
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002adc:	2801      	cmp	r0, #1
 8002ade:	d01f      	beq.n	8002b20 <HAL_I2CEx_ConfigDigitalFilter+0x54>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	2024      	movs	r0, #36	; 0x24
{
 8002ae2:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(hi2c);
 8002ae4:	2401      	movs	r4, #1

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ae6:	681e      	ldr	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aec:	2500      	movs	r5, #0
    __HAL_LOCK(hi2c);
 8002aee:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002af2:	6834      	ldr	r4, [r6, #0]

    return HAL_OK;
 8002af4:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 8002af6:	f024 0401 	bic.w	r4, r4, #1
 8002afa:	6034      	str	r4, [r6, #0]
    tmpreg = hi2c->Instance->CR1;
 8002afc:	681e      	ldr	r6, [r3, #0]
 8002afe:	6834      	ldr	r4, [r6, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002b00:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002b04:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002b08:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002b0a:	681c      	ldr	r4, [r3, #0]
 8002b0c:	6821      	ldr	r1, [r4, #0]
 8002b0e:	f041 0101 	orr.w	r1, r1, #1
 8002b12:	6021      	str	r1, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002b18:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002b1c:	bc70      	pop	{r4, r5, r6}
 8002b1e:	4770      	bx	lr
    return HAL_BUSY;
 8002b20:	2002      	movs	r0, #2
}
 8002b22:	4770      	bx	lr

08002b24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b24:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <HAL_PWREx_ConfigSupply+0x48>)
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	0752      	lsls	r2, r2, #29
 8002b2c:	d406      	bmi.n	8002b3c <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b34:	1a18      	subs	r0, r3, r0
 8002b36:	bf18      	it	ne
 8002b38:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002b3a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b3c:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b3e:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b40:	f022 0207 	bic.w	r2, r2, #7
 8002b44:	4310      	orrs	r0, r2
 8002b46:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8002b48:	f7fd fc2a 	bl	80003a0 <HAL_GetTick>
 8002b4c:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b4e:	e005      	b.n	8002b5c <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b50:	f7fd fc26 	bl	80003a0 <HAL_GetTick>
 8002b54:	1b40      	subs	r0, r0, r5
 8002b56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b5a:	d804      	bhi.n	8002b66 <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b5c:	6863      	ldr	r3, [r4, #4]
 8002b5e:	049b      	lsls	r3, r3, #18
 8002b60:	d5f6      	bpl.n	8002b50 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8002b62:	2000      	movs	r0, #0
}
 8002b64:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002b66:	2001      	movs	r0, #1
}
 8002b68:	bd38      	pop	{r3, r4, r5, pc}
 8002b6a:	bf00      	nop
 8002b6c:	58024800 	.word	0x58024800

08002b70 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b70:	2800      	cmp	r0, #0
 8002b72:	f000 8195 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x330>
{
 8002b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b78:	6803      	ldr	r3, [r0, #0]
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	07d9      	lsls	r1, r3, #31
 8002b7e:	d52e      	bpl.n	8002bde <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b80:	49a7      	ldr	r1, [pc, #668]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002b82:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b84:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b86:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b8a:	2a10      	cmp	r2, #16
 8002b8c:	f000 810d 	beq.w	8002daa <HAL_RCC_OscConfig+0x23a>
 8002b90:	2a18      	cmp	r2, #24
 8002b92:	f000 8105 	beq.w	8002da0 <HAL_RCC_OscConfig+0x230>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b96:	6863      	ldr	r3, [r4, #4]
 8002b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9c:	f000 8130 	beq.w	8002e00 <HAL_RCC_OscConfig+0x290>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f040 81a5 	bne.w	8002ef0 <HAL_RCC_OscConfig+0x380>
 8002ba6:	4b9e      	ldr	r3, [pc, #632]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb8:	6863      	ldr	r3, [r4, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8162 	beq.w	8002e84 <HAL_RCC_OscConfig+0x314>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fd fbee 	bl	80003a0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bc4:	4d96      	ldr	r5, [pc, #600]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8002bc6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bc8:	e005      	b.n	8002bd6 <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bca:	f7fd fbe9 	bl	80003a0 <HAL_GetTick>
 8002bce:	1b80      	subs	r0, r0, r6
 8002bd0:	2864      	cmp	r0, #100	; 0x64
 8002bd2:	f200 8155 	bhi.w	8002e80 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bd6:	682b      	ldr	r3, [r5, #0]
 8002bd8:	039f      	lsls	r7, r3, #14
 8002bda:	d5f6      	bpl.n	8002bca <HAL_RCC_OscConfig+0x5a>
 8002bdc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	0799      	lsls	r1, r3, #30
 8002be0:	f100 808e 	bmi.w	8002d00 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002be4:	06d9      	lsls	r1, r3, #27
 8002be6:	d534      	bpl.n	8002c52 <HAL_RCC_OscConfig+0xe2>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be8:	4a8d      	ldr	r2, [pc, #564]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002bea:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bec:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	f000 80e9 	beq.w	8002dca <HAL_RCC_OscConfig+0x25a>
 8002bf8:	2b18      	cmp	r3, #24
 8002bfa:	f000 80e1 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002bfe:	69e3      	ldr	r3, [r4, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8183 	beq.w	8002f0c <HAL_RCC_OscConfig+0x39c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c06:	4b86      	ldr	r3, [pc, #536]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002c08:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c0a:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8002c0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c12:	f7fd fbc5 	bl	80003a0 <HAL_GetTick>
 8002c16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c18:	e005      	b.n	8002c26 <HAL_RCC_OscConfig+0xb6>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c1a:	f7fd fbc1 	bl	80003a0 <HAL_GetTick>
 8002c1e:	1b80      	subs	r0, r0, r6
 8002c20:	2802      	cmp	r0, #2
 8002c22:	f200 812d 	bhi.w	8002e80 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c26:	682b      	ldr	r3, [r5, #0]
 8002c28:	05db      	lsls	r3, r3, #23
 8002c2a:	d5f6      	bpl.n	8002c1a <HAL_RCC_OscConfig+0xaa>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c2c:	f7fd fbd0 	bl	80003d0 <HAL_GetREVID>
 8002c30:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c34:	4298      	cmp	r0, r3
 8002c36:	f200 8257 	bhi.w	80030e8 <HAL_RCC_OscConfig+0x578>
 8002c3a:	6a22      	ldr	r2, [r4, #32]
 8002c3c:	686b      	ldr	r3, [r5, #4]
 8002c3e:	2a20      	cmp	r2, #32
 8002c40:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c44:	bf0c      	ite	eq
 8002c46:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002c4a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8002c4e:	606b      	str	r3, [r5, #4]
 8002c50:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c52:	071d      	lsls	r5, r3, #28
 8002c54:	d517      	bpl.n	8002c86 <HAL_RCC_OscConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c56:	6963      	ldr	r3, [r4, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8123 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x334>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5e:	4b70      	ldr	r3, [pc, #448]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002c60:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c62:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002c6a:	f7fd fb99 	bl	80003a0 <HAL_GetTick>
 8002c6e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c70:	e005      	b.n	8002c7e <HAL_RCC_OscConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c72:	f7fd fb95 	bl	80003a0 <HAL_GetTick>
 8002c76:	1b80      	subs	r0, r0, r6
 8002c78:	2802      	cmp	r0, #2
 8002c7a:	f200 8101 	bhi.w	8002e80 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c7e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002c80:	0798      	lsls	r0, r3, #30
 8002c82:	d5f6      	bpl.n	8002c72 <HAL_RCC_OscConfig+0x102>
 8002c84:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c86:	069a      	lsls	r2, r3, #26
 8002c88:	d517      	bpl.n	8002cba <HAL_RCC_OscConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c8a:	69a3      	ldr	r3, [r4, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 811c 	beq.w	8002eca <HAL_RCC_OscConfig+0x35a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c92:	4b63      	ldr	r3, [pc, #396]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002c94:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c96:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8002c98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c9c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002c9e:	f7fd fb7f 	bl	80003a0 <HAL_GetTick>
 8002ca2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ca4:	e005      	b.n	8002cb2 <HAL_RCC_OscConfig+0x142>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ca6:	f7fd fb7b 	bl	80003a0 <HAL_GetTick>
 8002caa:	1b80      	subs	r0, r0, r6
 8002cac:	2802      	cmp	r0, #2
 8002cae:	f200 80e7 	bhi.w	8002e80 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cb2:	682b      	ldr	r3, [r5, #0]
 8002cb4:	049f      	lsls	r7, r3, #18
 8002cb6:	d5f6      	bpl.n	8002ca6 <HAL_RCC_OscConfig+0x136>
 8002cb8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cba:	0759      	lsls	r1, r3, #29
 8002cbc:	f100 80a6 	bmi.w	8002e0c <HAL_RCC_OscConfig+0x29c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002cc2:	b1d8      	cbz	r0, 8002cfc <HAL_RCC_OscConfig+0x18c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cc4:	4b56      	ldr	r3, [pc, #344]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002ccc:	2a18      	cmp	r2, #24
 8002cce:	f000 81cc 	beq.w	800306a <HAL_RCC_OscConfig+0x4fa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd2:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd4:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd6:	f000 815e 	beq.w	8002f96 <HAL_RCC_OscConfig+0x426>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cda:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cde:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8002ce0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ce2:	f7fd fb5d 	bl	80003a0 <HAL_GetTick>
 8002ce6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ce8:	e005      	b.n	8002cf6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cea:	f7fd fb59 	bl	80003a0 <HAL_GetTick>
 8002cee:	1b40      	subs	r0, r0, r5
 8002cf0:	2802      	cmp	r0, #2
 8002cf2:	f200 80c5 	bhi.w	8002e80 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	019b      	lsls	r3, r3, #6
 8002cfa:	d4f6      	bmi.n	8002cea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002cfc:	2000      	movs	r0, #0
}
 8002cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d00:	4a47      	ldr	r2, [pc, #284]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002d02:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d04:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d06:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002d0a:	d02f      	beq.n	8002d6c <HAL_RCC_OscConfig+0x1fc>
 8002d0c:	2b18      	cmp	r3, #24
 8002d0e:	d02b      	beq.n	8002d68 <HAL_RCC_OscConfig+0x1f8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d10:	68e2      	ldr	r2, [r4, #12]
 8002d12:	2a00      	cmp	r2, #0
 8002d14:	f000 810e 	beq.w	8002f34 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d18:	4941      	ldr	r1, [pc, #260]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002d1a:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1c:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d1e:	f023 0319 	bic.w	r3, r3, #25
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8002d26:	f7fd fb3b 	bl	80003a0 <HAL_GetTick>
 8002d2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d2c:	e005      	b.n	8002d3a <HAL_RCC_OscConfig+0x1ca>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fd fb37 	bl	80003a0 <HAL_GetTick>
 8002d32:	1b80      	subs	r0, r0, r6
 8002d34:	2802      	cmp	r0, #2
 8002d36:	f200 80a3 	bhi.w	8002e80 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d3a:	682b      	ldr	r3, [r5, #0]
 8002d3c:	075f      	lsls	r7, r3, #29
 8002d3e:	d5f6      	bpl.n	8002d2e <HAL_RCC_OscConfig+0x1be>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d40:	f7fd fb46 	bl	80003d0 <HAL_GetREVID>
 8002d44:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d48:	4298      	cmp	r0, r3
 8002d4a:	f200 81d6 	bhi.w	80030fa <HAL_RCC_OscConfig+0x58a>
 8002d4e:	6922      	ldr	r2, [r4, #16]
 8002d50:	686b      	ldr	r3, [r5, #4]
 8002d52:	2a40      	cmp	r2, #64	; 0x40
 8002d54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d58:	bf0c      	ite	eq
 8002d5a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8002d5e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8002d62:	606b      	str	r3, [r5, #4]
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	e73d      	b.n	8002be4 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d68:	0792      	lsls	r2, r2, #30
 8002d6a:	d1d1      	bne.n	8002d10 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d6c:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	075b      	lsls	r3, r3, #29
 8002d72:	d501      	bpl.n	8002d78 <HAL_RCC_OscConfig+0x208>
 8002d74:	68e3      	ldr	r3, [r4, #12]
 8002d76:	b30b      	cbz	r3, 8002dbc <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	f7fd fb2a 	bl	80003d0 <HAL_GetREVID>
 8002d7c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d80:	4298      	cmp	r0, r3
 8002d82:	f200 80eb 	bhi.w	8002f5c <HAL_RCC_OscConfig+0x3ec>
 8002d86:	6922      	ldr	r2, [r4, #16]
 8002d88:	2a40      	cmp	r2, #64	; 0x40
 8002d8a:	f000 80fb 	beq.w	8002f84 <HAL_RCC_OscConfig+0x414>
 8002d8e:	4924      	ldr	r1, [pc, #144]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002d90:	684b      	ldr	r3, [r1, #4]
 8002d92:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d96:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002d9a:	604b      	str	r3, [r1, #4]
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	e721      	b.n	8002be4 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002da0:	f001 0103 	and.w	r1, r1, #3
 8002da4:	2902      	cmp	r1, #2
 8002da6:	f47f aef6 	bne.w	8002b96 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002daa:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	0392      	lsls	r2, r2, #14
 8002db0:	f57f af15 	bpl.w	8002bde <HAL_RCC_OscConfig+0x6e>
 8002db4:	6862      	ldr	r2, [r4, #4]
 8002db6:	2a00      	cmp	r2, #0
 8002db8:	f47f af11 	bne.w	8002bde <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8002dbc:	2001      	movs	r0, #1
}
 8002dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002dc0:	f002 0203 	and.w	r2, r2, #3
 8002dc4:	2a01      	cmp	r2, #1
 8002dc6:	f47f af1a 	bne.w	8002bfe <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	05da      	lsls	r2, r3, #23
 8002dd0:	d502      	bpl.n	8002dd8 <HAL_RCC_OscConfig+0x268>
 8002dd2:	69e3      	ldr	r3, [r4, #28]
 8002dd4:	2b80      	cmp	r3, #128	; 0x80
 8002dd6:	d1f1      	bne.n	8002dbc <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dd8:	f7fd fafa 	bl	80003d0 <HAL_GetREVID>
 8002ddc:	f241 0303 	movw	r3, #4099	; 0x1003
 8002de0:	4298      	cmp	r0, r3
 8002de2:	f200 80c5 	bhi.w	8002f70 <HAL_RCC_OscConfig+0x400>
 8002de6:	6a22      	ldr	r2, [r4, #32]
 8002de8:	2a20      	cmp	r2, #32
 8002dea:	f000 81a8 	beq.w	800313e <HAL_RCC_OscConfig+0x5ce>
 8002dee:	490c      	ldr	r1, [pc, #48]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002df0:	684b      	ldr	r3, [r1, #4]
 8002df2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002df6:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002dfa:	604b      	str	r3, [r1, #4]
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	e728      	b.n	8002c52 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e00:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <HAL_RCC_OscConfig+0x2b0>)
 8002e02:	6813      	ldr	r3, [r2, #0]
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e6d5      	b.n	8002bb8 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_OscConfig+0x2b4>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e10:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8002e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e16:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002e18:	f7fd fac2 	bl	80003a0 <HAL_GetTick>
 8002e1c:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x2c2>
 8002e20:	58024400 	.word	0x58024400
 8002e24:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e28:	f7fd faba 	bl	80003a0 <HAL_GetTick>
 8002e2c:	1b80      	subs	r0, r0, r6
 8002e2e:	2864      	cmp	r0, #100	; 0x64
 8002e30:	d826      	bhi.n	8002e80 <HAL_RCC_OscConfig+0x310>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e32:	682b      	ldr	r3, [r5, #0]
 8002e34:	05da      	lsls	r2, r3, #23
 8002e36:	d5f7      	bpl.n	8002e28 <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	68a3      	ldr	r3, [r4, #8]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	f000 816c 	beq.w	8003118 <HAL_RCC_OscConfig+0x5a8>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f040 816f 	bne.w	8003124 <HAL_RCC_OscConfig+0x5b4>
 8002e46:	4bb1      	ldr	r3, [pc, #708]	; (800310c <HAL_RCC_OscConfig+0x59c>)
 8002e48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	671a      	str	r2, [r3, #112]	; 0x70
 8002e50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e52:	f022 0204 	bic.w	r2, r2, #4
 8002e56:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e58:	68a3      	ldr	r3, [r4, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8133 	beq.w	80030c6 <HAL_RCC_OscConfig+0x556>
      tickstart = HAL_GetTick();
 8002e60:	f7fd fa9e 	bl	80003a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e64:	4da9      	ldr	r5, [pc, #676]	; (800310c <HAL_RCC_OscConfig+0x59c>)
      tickstart = HAL_GetTick();
 8002e66:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e68:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e6c:	e004      	b.n	8002e78 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fd fa97 	bl	80003a0 <HAL_GetTick>
 8002e72:	1bc0      	subs	r0, r0, r7
 8002e74:	42b0      	cmp	r0, r6
 8002e76:	d803      	bhi.n	8002e80 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002e7a:	079b      	lsls	r3, r3, #30
 8002e7c:	d5f7      	bpl.n	8002e6e <HAL_RCC_OscConfig+0x2fe>
 8002e7e:	e71f      	b.n	8002cc0 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8002e80:	2003      	movs	r0, #3
}
 8002e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8002e84:	f7fd fa8c 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e88:	4da0      	ldr	r5, [pc, #640]	; (800310c <HAL_RCC_OscConfig+0x59c>)
        tickstart = HAL_GetTick();
 8002e8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e8c:	e004      	b.n	8002e98 <HAL_RCC_OscConfig+0x328>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e8e:	f7fd fa87 	bl	80003a0 <HAL_GetTick>
 8002e92:	1b80      	subs	r0, r0, r6
 8002e94:	2864      	cmp	r0, #100	; 0x64
 8002e96:	d8f3      	bhi.n	8002e80 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e98:	682b      	ldr	r3, [r5, #0]
 8002e9a:	0398      	lsls	r0, r3, #14
 8002e9c:	d4f7      	bmi.n	8002e8e <HAL_RCC_OscConfig+0x31e>
 8002e9e:	e69d      	b.n	8002bdc <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8002ea0:	2001      	movs	r0, #1
}
 8002ea2:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8002ea4:	4b99      	ldr	r3, [pc, #612]	; (800310c <HAL_RCC_OscConfig+0x59c>)
 8002ea6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ea8:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002eb0:	f7fd fa76 	bl	80003a0 <HAL_GetTick>
 8002eb4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eb6:	e004      	b.n	8002ec2 <HAL_RCC_OscConfig+0x352>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7fd fa72 	bl	80003a0 <HAL_GetTick>
 8002ebc:	1b80      	subs	r0, r0, r6
 8002ebe:	2802      	cmp	r0, #2
 8002ec0:	d8de      	bhi.n	8002e80 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ec2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002ec4:	0799      	lsls	r1, r3, #30
 8002ec6:	d4f7      	bmi.n	8002eb8 <HAL_RCC_OscConfig+0x348>
 8002ec8:	e6dc      	b.n	8002c84 <HAL_RCC_OscConfig+0x114>
      __HAL_RCC_HSI48_DISABLE();
 8002eca:	4b90      	ldr	r3, [pc, #576]	; (800310c <HAL_RCC_OscConfig+0x59c>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ece:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8002ed0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ed4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002ed6:	f7fd fa63 	bl	80003a0 <HAL_GetTick>
 8002eda:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002edc:	e004      	b.n	8002ee8 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ede:	f7fd fa5f 	bl	80003a0 <HAL_GetTick>
 8002ee2:	1b80      	subs	r0, r0, r6
 8002ee4:	2802      	cmp	r0, #2
 8002ee6:	d8cb      	bhi.n	8002e80 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ee8:	682b      	ldr	r3, [r5, #0]
 8002eea:	0498      	lsls	r0, r3, #18
 8002eec:	d4f7      	bmi.n	8002ede <HAL_RCC_OscConfig+0x36e>
 8002eee:	e6e3      	b.n	8002cb8 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef4:	4b85      	ldr	r3, [pc, #532]	; (800310c <HAL_RCC_OscConfig+0x59c>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	f47f ae57 	bne.w	8002baa <HAL_RCC_OscConfig+0x3a>
 8002efc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e655      	b.n	8002bb8 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_CSI_DISABLE();
 8002f0c:	4b7f      	ldr	r3, [pc, #508]	; (800310c <HAL_RCC_OscConfig+0x59c>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f10:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8002f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f18:	f7fd fa42 	bl	80003a0 <HAL_GetTick>
 8002f1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f1e:	e004      	b.n	8002f2a <HAL_RCC_OscConfig+0x3ba>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f20:	f7fd fa3e 	bl	80003a0 <HAL_GetTick>
 8002f24:	1b80      	subs	r0, r0, r6
 8002f26:	2802      	cmp	r0, #2
 8002f28:	d8aa      	bhi.n	8002e80 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	05df      	lsls	r7, r3, #23
 8002f2e:	d4f7      	bmi.n	8002f20 <HAL_RCC_OscConfig+0x3b0>
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	e68e      	b.n	8002c52 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 8002f34:	4b75      	ldr	r3, [pc, #468]	; (800310c <HAL_RCC_OscConfig+0x59c>)
 8002f36:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f38:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f40:	f7fd fa2e 	bl	80003a0 <HAL_GetTick>
 8002f44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f46:	e004      	b.n	8002f52 <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f48:	f7fd fa2a 	bl	80003a0 <HAL_GetTick>
 8002f4c:	1b80      	subs	r0, r0, r6
 8002f4e:	2802      	cmp	r0, #2
 8002f50:	d896      	bhi.n	8002e80 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f52:	682b      	ldr	r3, [r5, #0]
 8002f54:	0758      	lsls	r0, r3, #29
 8002f56:	d4f7      	bmi.n	8002f48 <HAL_RCC_OscConfig+0x3d8>
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	e643      	b.n	8002be4 <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5c:	4a6b      	ldr	r2, [pc, #428]	; (800310c <HAL_RCC_OscConfig+0x59c>)
 8002f5e:	6921      	ldr	r1, [r4, #16]
 8002f60:	6853      	ldr	r3, [r2, #4]
 8002f62:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f66:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f6a:	6053      	str	r3, [r2, #4]
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	e639      	b.n	8002be4 <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f70:	4a66      	ldr	r2, [pc, #408]	; (800310c <HAL_RCC_OscConfig+0x59c>)
 8002f72:	6a21      	ldr	r1, [r4, #32]
 8002f74:	68d3      	ldr	r3, [r2, #12]
 8002f76:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002f7a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f7e:	60d3      	str	r3, [r2, #12]
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	e666      	b.n	8002c52 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f84:	4a61      	ldr	r2, [pc, #388]	; (800310c <HAL_RCC_OscConfig+0x59c>)
 8002f86:	6853      	ldr	r3, [r2, #4]
 8002f88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f90:	6053      	str	r3, [r2, #4]
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	e626      	b.n	8002be4 <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_PLL_DISABLE();
 8002f96:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f9a:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8002f9c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f9e:	f7fd f9ff 	bl	80003a0 <HAL_GetTick>
 8002fa2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fa4:	e005      	b.n	8002fb2 <HAL_RCC_OscConfig+0x442>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fd f9fb 	bl	80003a0 <HAL_GetTick>
 8002faa:	1b80      	subs	r0, r0, r6
 8002fac:	2802      	cmp	r0, #2
 8002fae:	f63f af67 	bhi.w	8002e80 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fb2:	682b      	ldr	r3, [r5, #0]
 8002fb4:	0199      	lsls	r1, r3, #6
 8002fb6:	d4f6      	bmi.n	8002fa6 <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002fba:	4b55      	ldr	r3, [pc, #340]	; (8003110 <HAL_RCC_OscConfig+0x5a0>)
 8002fbc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fc2:	4954      	ldr	r1, [pc, #336]	; (8003114 <HAL_RCC_OscConfig+0x5a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc4:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fc6:	4e51      	ldr	r6, [pc, #324]	; (800310c <HAL_RCC_OscConfig+0x59c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002fcc:	62ab      	str	r3, [r5, #40]	; 0x28
 8002fce:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8002fd0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8002fd4:	3f01      	subs	r7, #1
 8002fd6:	1e50      	subs	r0, r2, #1
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002fdc:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8002fe0:	025b      	lsls	r3, r3, #9
 8002fe2:	0400      	lsls	r0, r0, #16
 8002fe4:	3a01      	subs	r2, #1
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8002fec:	0612      	lsls	r2, r2, #24
 8002fee:	4303      	orrs	r3, r0
 8002ff0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002ff4:	433b      	orrs	r3, r7
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8002ffa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003002:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003004:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003006:	4011      	ands	r1, r2
 8003008:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800300c:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800300e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003010:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003012:	f023 030c 	bic.w	r3, r3, #12
 8003016:	4313      	orrs	r3, r2
 8003018:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800301a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800301c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800301e:	f023 0302 	bic.w	r3, r3, #2
 8003022:	4313      	orrs	r3, r2
 8003024:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003026:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800302e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003034:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003036:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800303c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800303e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003046:	682b      	ldr	r3, [r5, #0]
 8003048:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800304e:	f7fd f9a7 	bl	80003a0 <HAL_GetTick>
 8003052:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003054:	e005      	b.n	8003062 <HAL_RCC_OscConfig+0x4f2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003056:	f7fd f9a3 	bl	80003a0 <HAL_GetTick>
 800305a:	1b00      	subs	r0, r0, r4
 800305c:	2802      	cmp	r0, #2
 800305e:	f63f af0f 	bhi.w	8002e80 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003062:	6833      	ldr	r3, [r6, #0]
 8003064:	019a      	lsls	r2, r3, #6
 8003066:	d5f6      	bpl.n	8003056 <HAL_RCC_OscConfig+0x4e6>
 8003068:	e648      	b.n	8002cfc <HAL_RCC_OscConfig+0x18c>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306a:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800306c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800306e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003070:	f43f ae45 	beq.w	8002cfe <HAL_RCC_OscConfig+0x18e>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003074:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003078:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800307a:	428b      	cmp	r3, r1
 800307c:	f47f ae9e 	bne.w	8002dbc <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003080:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003084:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003086:	429a      	cmp	r2, r3
 8003088:	f47f ae98 	bne.w	8002dbc <HAL_RCC_OscConfig+0x24c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800308c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800308e:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8003092:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	f47f ae91 	bne.w	8002dbc <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800309a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800309c:	f3c5 2246 	ubfx	r2, r5, #9, #7
 80030a0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	f47f ae8a 	bne.w	8002dbc <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030aa:	f3c5 4206 	ubfx	r2, r5, #16, #7
 80030ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f47f ae83 	bne.w	8002dbc <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80030b8:	f3c5 6506 	ubfx	r5, r5, #24, #7
 80030bc:	3801      	subs	r0, #1
    return HAL_ERROR;
 80030be:	1a28      	subs	r0, r5, r0
 80030c0:	bf18      	it	ne
 80030c2:	2001      	movne	r0, #1
 80030c4:	e61b      	b.n	8002cfe <HAL_RCC_OscConfig+0x18e>
      tickstart = HAL_GetTick();
 80030c6:	f7fd f96b 	bl	80003a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030ca:	4d10      	ldr	r5, [pc, #64]	; (800310c <HAL_RCC_OscConfig+0x59c>)
      tickstart = HAL_GetTick();
 80030cc:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ce:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030d2:	e005      	b.n	80030e0 <HAL_RCC_OscConfig+0x570>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7fd f964 	bl	80003a0 <HAL_GetTick>
 80030d8:	1bc0      	subs	r0, r0, r7
 80030da:	42b0      	cmp	r0, r6
 80030dc:	f63f aed0 	bhi.w	8002e80 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030e2:	0798      	lsls	r0, r3, #30
 80030e4:	d4f6      	bmi.n	80030d4 <HAL_RCC_OscConfig+0x564>
 80030e6:	e5eb      	b.n	8002cc0 <HAL_RCC_OscConfig+0x150>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030e8:	68eb      	ldr	r3, [r5, #12]
 80030ea:	6a22      	ldr	r2, [r4, #32]
 80030ec:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80030f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80030f4:	60eb      	str	r3, [r5, #12]
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	e5ab      	b.n	8002c52 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fa:	686b      	ldr	r3, [r5, #4]
 80030fc:	6922      	ldr	r2, [r4, #16]
 80030fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003102:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003106:	606b      	str	r3, [r5, #4]
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	e56b      	b.n	8002be4 <HAL_RCC_OscConfig+0x74>
 800310c:	58024400 	.word	0x58024400
 8003110:	fffffc0c 	.word	0xfffffc0c
 8003114:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003118:	4a0d      	ldr	r2, [pc, #52]	; (8003150 <HAL_RCC_OscConfig+0x5e0>)
 800311a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
 8003122:	e699      	b.n	8002e58 <HAL_RCC_OscConfig+0x2e8>
 8003124:	2b05      	cmp	r3, #5
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_RCC_OscConfig+0x5e0>)
 8003128:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800312a:	f47f ae8e 	bne.w	8002e4a <HAL_RCC_OscConfig+0x2da>
 800312e:	f042 0204 	orr.w	r2, r2, #4
 8003132:	671a      	str	r2, [r3, #112]	; 0x70
 8003134:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	671a      	str	r2, [r3, #112]	; 0x70
 800313c:	e68c      	b.n	8002e58 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800313e:	4a04      	ldr	r2, [pc, #16]	; (8003150 <HAL_RCC_OscConfig+0x5e0>)
 8003140:	6853      	ldr	r3, [r2, #4]
 8003142:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003146:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800314a:	6053      	str	r3, [r2, #4]
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	e580      	b.n	8002c52 <HAL_RCC_OscConfig+0xe2>
 8003150:	58024400 	.word	0x58024400

08003154 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003154:	4a3e      	ldr	r2, [pc, #248]	; (8003250 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003156:	6913      	ldr	r3, [r2, #16]
 8003158:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800315c:	2b10      	cmp	r3, #16
 800315e:	d04f      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0xac>
 8003160:	2b18      	cmp	r3, #24
 8003162:	d00b      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x28>
 8003164:	b10b      	cbz	r3, 800316a <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003166:	483b      	ldr	r0, [pc, #236]	; (8003254 <HAL_RCC_GetSysClockFreq+0x100>)
 8003168:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800316a:	6813      	ldr	r3, [r2, #0]
 800316c:	0699      	lsls	r1, r3, #26
 800316e:	d549      	bpl.n	8003204 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003170:	6813      	ldr	r3, [r2, #0]
 8003172:	4839      	ldr	r0, [pc, #228]	; (8003258 <HAL_RCC_GetSysClockFreq+0x104>)
 8003174:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003178:	40d8      	lsrs	r0, r3
 800317a:	4770      	bx	lr
{
 800317c:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800317e:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003180:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003182:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003184:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003188:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 800318a:	b3b0      	cbz	r0, 80031fa <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800318c:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003190:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003194:	f001 0103 	and.w	r1, r1, #3
 8003198:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800319c:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 80031a0:	2901      	cmp	r1, #1
 80031a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031a6:	ee07 3a10 	vmov	s14, r3
 80031aa:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 80031ae:	d002      	beq.n	80031b6 <HAL_RCC_GetSysClockFreq+0x62>
 80031b0:	d32d      	bcc.n	800320e <HAL_RCC_GetSysClockFreq+0xba>
 80031b2:	2902      	cmp	r1, #2
 80031b4:	d028      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031b6:	eddf 5a29 	vldr	s11, [pc, #164]	; 800325c <HAL_RCC_GetSysClockFreq+0x108>
 80031ba:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80031be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80031c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c4:	ee07 3a90 	vmov	s15, r3
 80031c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80031cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031d0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80031d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031d8:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80031dc:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80031e4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031f6:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80031fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031fe:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8003200:	4817      	ldr	r0, [pc, #92]	; (8003260 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003202:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003204:	4814      	ldr	r0, [pc, #80]	; (8003258 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8003206:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003208:	eddf 5a16 	vldr	s11, [pc, #88]	; 8003264 <HAL_RCC_GetSysClockFreq+0x110>
 800320c:	e7d5      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800320e:	6813      	ldr	r3, [r2, #0]
 8003210:	069b      	lsls	r3, r3, #26
 8003212:	d51a      	bpl.n	800324a <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003214:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003216:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800321a:	490f      	ldr	r1, [pc, #60]	; (8003258 <HAL_RCC_GetSysClockFreq+0x104>)
 800321c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003220:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003222:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003228:	ee06 1a90 	vmov	s13, r1
 800322c:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8003230:	ee06 3a90 	vmov	s13, r3
 8003234:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8003238:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800323c:	ee76 7a05 	vadd.f32	s15, s12, s10
 8003240:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003244:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003248:	e7c8      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800324a:	eddf 5a07 	vldr	s11, [pc, #28]	; 8003268 <HAL_RCC_GetSysClockFreq+0x114>
 800324e:	e7b4      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x66>
 8003250:	58024400 	.word	0x58024400
 8003254:	003d0900 	.word	0x003d0900
 8003258:	03d09000 	.word	0x03d09000
 800325c:	4a742400 	.word	0x4a742400
 8003260:	017d7840 	.word	0x017d7840
 8003264:	4bbebc20 	.word	0x4bbebc20
 8003268:	4c742400 	.word	0x4c742400

0800326c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800326c:	b178      	cbz	r0, 800328e <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800326e:	4a91      	ldr	r2, [pc, #580]	; (80034b4 <HAL_RCC_ClockConfig+0x248>)
 8003270:	6813      	ldr	r3, [r2, #0]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	428b      	cmp	r3, r1
 8003278:	d20b      	bcs.n	8003292 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	6813      	ldr	r3, [r2, #0]
 800327c:	f023 030f 	bic.w	r3, r3, #15
 8003280:	430b      	orrs	r3, r1
 8003282:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003284:	6813      	ldr	r3, [r2, #0]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	428b      	cmp	r3, r1
 800328c:	d001      	beq.n	8003292 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800328e:	2001      	movs	r0, #1
}
 8003290:	4770      	bx	lr
{
 8003292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003296:	6803      	ldr	r3, [r0, #0]
 8003298:	075f      	lsls	r7, r3, #29
 800329a:	d50c      	bpl.n	80032b6 <HAL_RCC_ClockConfig+0x4a>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800329c:	4c86      	ldr	r4, [pc, #536]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
 800329e:	6905      	ldr	r5, [r0, #16]
 80032a0:	69a2      	ldr	r2, [r4, #24]
 80032a2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80032a6:	4295      	cmp	r5, r2
 80032a8:	d905      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032aa:	69a3      	ldr	r3, [r4, #24]
 80032ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b0:	432b      	orrs	r3, r5
 80032b2:	61a3      	str	r3, [r4, #24]
 80032b4:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b6:	071e      	lsls	r6, r3, #28
 80032b8:	d50c      	bpl.n	80032d4 <HAL_RCC_ClockConfig+0x68>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032ba:	4c7f      	ldr	r4, [pc, #508]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
 80032bc:	6945      	ldr	r5, [r0, #20]
 80032be:	69e2      	ldr	r2, [r4, #28]
 80032c0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80032c4:	4295      	cmp	r5, r2
 80032c6:	d905      	bls.n	80032d4 <HAL_RCC_ClockConfig+0x68>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032c8:	69e3      	ldr	r3, [r4, #28]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	432b      	orrs	r3, r5
 80032d0:	61e3      	str	r3, [r4, #28]
 80032d2:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d4:	06dd      	lsls	r5, r3, #27
 80032d6:	d50c      	bpl.n	80032f2 <HAL_RCC_ClockConfig+0x86>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032d8:	4c77      	ldr	r4, [pc, #476]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
 80032da:	6985      	ldr	r5, [r0, #24]
 80032dc:	69e2      	ldr	r2, [r4, #28]
 80032de:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80032e2:	4295      	cmp	r5, r2
 80032e4:	d905      	bls.n	80032f2 <HAL_RCC_ClockConfig+0x86>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032e6:	69e3      	ldr	r3, [r4, #28]
 80032e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032ec:	432b      	orrs	r3, r5
 80032ee:	61e3      	str	r3, [r4, #28]
 80032f0:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032f2:	069c      	lsls	r4, r3, #26
 80032f4:	d50c      	bpl.n	8003310 <HAL_RCC_ClockConfig+0xa4>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032f6:	4c70      	ldr	r4, [pc, #448]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
 80032f8:	69c5      	ldr	r5, [r0, #28]
 80032fa:	6a22      	ldr	r2, [r4, #32]
 80032fc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003300:	4295      	cmp	r5, r2
 8003302:	d905      	bls.n	8003310 <HAL_RCC_ClockConfig+0xa4>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003304:	6a23      	ldr	r3, [r4, #32]
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330a:	432b      	orrs	r3, r5
 800330c:	6223      	str	r3, [r4, #32]
 800330e:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003310:	079a      	lsls	r2, r3, #30
 8003312:	4604      	mov	r4, r0
 8003314:	460d      	mov	r5, r1
 8003316:	d512      	bpl.n	800333e <HAL_RCC_ClockConfig+0xd2>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003318:	4867      	ldr	r0, [pc, #412]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
 800331a:	68e1      	ldr	r1, [r4, #12]
 800331c:	6982      	ldr	r2, [r0, #24]
 800331e:	f002 020f 	and.w	r2, r2, #15
 8003322:	4291      	cmp	r1, r2
 8003324:	d93d      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003326:	6983      	ldr	r3, [r0, #24]
 8003328:	f023 030f 	bic.w	r3, r3, #15
 800332c:	4319      	orrs	r1, r3
 800332e:	6181      	str	r1, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	07df      	lsls	r7, r3, #31
 8003334:	d405      	bmi.n	8003342 <HAL_RCC_ClockConfig+0xd6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003336:	079f      	lsls	r7, r3, #30
 8003338:	d540      	bpl.n	80033bc <HAL_RCC_ClockConfig+0x150>
 800333a:	68e1      	ldr	r1, [r4, #12]
 800333c:	e033      	b.n	80033a6 <HAL_RCC_ClockConfig+0x13a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333e:	07db      	lsls	r3, r3, #31
 8003340:	d53c      	bpl.n	80033bc <HAL_RCC_ClockConfig+0x150>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003342:	4a5d      	ldr	r2, [pc, #372]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
 8003344:	68a1      	ldr	r1, [r4, #8]
 8003346:	6993      	ldr	r3, [r2, #24]
 8003348:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800334c:	430b      	orrs	r3, r1
 800334e:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003350:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003352:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003354:	2b02      	cmp	r3, #2
 8003356:	f000 809e 	beq.w	8003496 <HAL_RCC_ClockConfig+0x22a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800335a:	2b03      	cmp	r3, #3
 800335c:	f000 80a1 	beq.w	80034a2 <HAL_RCC_ClockConfig+0x236>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003360:	2b01      	cmp	r3, #1
 8003362:	f000 80a2 	beq.w	80034aa <HAL_RCC_ClockConfig+0x23e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003366:	0752      	lsls	r2, r2, #29
 8003368:	d538      	bpl.n	80033dc <HAL_RCC_ClockConfig+0x170>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800336a:	4953      	ldr	r1, [pc, #332]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336c:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003370:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003374:	f022 0207 	bic.w	r2, r2, #7
 8003378:	4313      	orrs	r3, r2
 800337a:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800337c:	f7fd f810 	bl	80003a0 <HAL_GetTick>
 8003380:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	e005      	b.n	8003390 <HAL_RCC_ClockConfig+0x124>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003384:	f7fd f80c 	bl	80003a0 <HAL_GetTick>
 8003388:	1bc0      	subs	r0, r0, r7
 800338a:	4540      	cmp	r0, r8
 800338c:	f200 8087 	bhi.w	800349e <HAL_RCC_ClockConfig+0x232>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003390:	6933      	ldr	r3, [r6, #16]
 8003392:	6862      	ldr	r2, [r4, #4]
 8003394:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003398:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800339c:	d1f2      	bne.n	8003384 <HAL_RCC_ClockConfig+0x118>
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	e7c9      	b.n	8003336 <HAL_RCC_ClockConfig+0xca>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a2:	07da      	lsls	r2, r3, #31
 80033a4:	d4cd      	bmi.n	8003342 <HAL_RCC_ClockConfig+0xd6>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033a6:	4a44      	ldr	r2, [pc, #272]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
 80033a8:	6993      	ldr	r3, [r2, #24]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	428b      	cmp	r3, r1
 80033b0:	d904      	bls.n	80033bc <HAL_RCC_ClockConfig+0x150>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b2:	6993      	ldr	r3, [r2, #24]
 80033b4:	f023 030f 	bic.w	r3, r3, #15
 80033b8:	4319      	orrs	r1, r3
 80033ba:	6191      	str	r1, [r2, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033bc:	4a3d      	ldr	r2, [pc, #244]	; (80034b4 <HAL_RCC_ClockConfig+0x248>)
 80033be:	6813      	ldr	r3, [r2, #0]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	42ab      	cmp	r3, r5
 80033c6:	d90c      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x176>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c8:	6813      	ldr	r3, [r2, #0]
 80033ca:	f023 030f 	bic.w	r3, r3, #15
 80033ce:	432b      	orrs	r3, r5
 80033d0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	6813      	ldr	r3, [r2, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	42ab      	cmp	r3, r5
 80033da:	d002      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x176>
    return HAL_ERROR;
 80033dc:	2001      	movs	r0, #1
}
 80033de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	075e      	lsls	r6, r3, #29
 80033e6:	d50c      	bpl.n	8003402 <HAL_RCC_ClockConfig+0x196>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033e8:	4933      	ldr	r1, [pc, #204]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
 80033ea:	6920      	ldr	r0, [r4, #16]
 80033ec:	698a      	ldr	r2, [r1, #24]
 80033ee:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80033f2:	4290      	cmp	r0, r2
 80033f4:	d205      	bcs.n	8003402 <HAL_RCC_ClockConfig+0x196>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033f6:	698b      	ldr	r3, [r1, #24]
 80033f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fc:	4303      	orrs	r3, r0
 80033fe:	618b      	str	r3, [r1, #24]
 8003400:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003402:	071d      	lsls	r5, r3, #28
 8003404:	d50c      	bpl.n	8003420 <HAL_RCC_ClockConfig+0x1b4>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003406:	492c      	ldr	r1, [pc, #176]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
 8003408:	6960      	ldr	r0, [r4, #20]
 800340a:	69ca      	ldr	r2, [r1, #28]
 800340c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003410:	4290      	cmp	r0, r2
 8003412:	d205      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x1b4>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003414:	69cb      	ldr	r3, [r1, #28]
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	4303      	orrs	r3, r0
 800341c:	61cb      	str	r3, [r1, #28]
 800341e:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	06d8      	lsls	r0, r3, #27
 8003422:	d50c      	bpl.n	800343e <HAL_RCC_ClockConfig+0x1d2>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003424:	4924      	ldr	r1, [pc, #144]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
 8003426:	69a0      	ldr	r0, [r4, #24]
 8003428:	69ca      	ldr	r2, [r1, #28]
 800342a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800342e:	4290      	cmp	r0, r2
 8003430:	d205      	bcs.n	800343e <HAL_RCC_ClockConfig+0x1d2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003432:	69cb      	ldr	r3, [r1, #28]
 8003434:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003438:	4303      	orrs	r3, r0
 800343a:	61cb      	str	r3, [r1, #28]
 800343c:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800343e:	0699      	lsls	r1, r3, #26
 8003440:	d50b      	bpl.n	800345a <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003442:	4a1d      	ldr	r2, [pc, #116]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
 8003444:	69e1      	ldr	r1, [r4, #28]
 8003446:	6a13      	ldr	r3, [r2, #32]
 8003448:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800344c:	4299      	cmp	r1, r3
 800344e:	d204      	bcs.n	800345a <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003450:	6a13      	ldr	r3, [r2, #32]
 8003452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003456:	430b      	orrs	r3, r1
 8003458:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800345a:	f7ff fe7b 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 800345e:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
 8003460:	4916      	ldr	r1, [pc, #88]	; (80034bc <HAL_RCC_ClockConfig+0x250>)
 8003462:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003464:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003466:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 800346a:	4d15      	ldr	r5, [pc, #84]	; (80034c0 <HAL_RCC_ClockConfig+0x254>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800346c:	f002 020f 	and.w	r2, r2, #15
 8003470:	4c14      	ldr	r4, [pc, #80]	; (80034c4 <HAL_RCC_ClockConfig+0x258>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003472:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003474:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003476:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800347a:	4913      	ldr	r1, [pc, #76]	; (80034c8 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800347c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003480:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8003484:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003486:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800348a:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800348c:	6022      	str	r2, [r4, #0]
}
 800348e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8003492:	f7fc bf21 	b.w	80002d8 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003496:	0396      	lsls	r6, r2, #14
 8003498:	f53f af67 	bmi.w	800336a <HAL_RCC_ClockConfig+0xfe>
 800349c:	e79e      	b.n	80033dc <HAL_RCC_ClockConfig+0x170>
            return HAL_TIMEOUT;
 800349e:	2003      	movs	r0, #3
 80034a0:	e79d      	b.n	80033de <HAL_RCC_ClockConfig+0x172>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034a2:	0190      	lsls	r0, r2, #6
 80034a4:	f53f af61 	bmi.w	800336a <HAL_RCC_ClockConfig+0xfe>
 80034a8:	e798      	b.n	80033dc <HAL_RCC_ClockConfig+0x170>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034aa:	05d1      	lsls	r1, r2, #23
 80034ac:	f53f af5d 	bmi.w	800336a <HAL_RCC_ClockConfig+0xfe>
 80034b0:	e794      	b.n	80033dc <HAL_RCC_ClockConfig+0x170>
 80034b2:	bf00      	nop
 80034b4:	52002000 	.word	0x52002000
 80034b8:	58024400 	.word	0x58024400
 80034bc:	0800bca4 	.word	0x0800bca4
 80034c0:	20000004 	.word	0x20000004
 80034c4:	2000003c 	.word	0x2000003c
 80034c8:	20000038 	.word	0x20000038

080034cc <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034cc:	4a49      	ldr	r2, [pc, #292]	; (80035f4 <HAL_RCC_GetHCLKFreq+0x128>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ce:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034d0:	6913      	ldr	r3, [r2, #16]
 80034d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d064      	beq.n	80035a4 <HAL_RCC_GetHCLKFreq+0xd8>
 80034da:	2b18      	cmp	r3, #24
 80034dc:	d022      	beq.n	8003524 <HAL_RCC_GetHCLKFreq+0x58>
 80034de:	b1bb      	cbz	r3, 8003510 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 80034e0:	4b45      	ldr	r3, [pc, #276]	; (80035f8 <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034e2:	4944      	ldr	r1, [pc, #272]	; (80035f4 <HAL_RCC_GetHCLKFreq+0x128>)
 80034e4:	4845      	ldr	r0, [pc, #276]	; (80035fc <HAL_RCC_GetHCLKFreq+0x130>)
 80034e6:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034e8:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ea:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ee:	4c44      	ldr	r4, [pc, #272]	; (8003600 <HAL_RCC_GetHCLKFreq+0x134>)
 80034f0:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034f4:	4d43      	ldr	r5, [pc, #268]	; (8003604 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034f6:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034f8:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034fa:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034fe:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003502:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003504:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8003508:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800350a:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800350c:	bc30      	pop	{r4, r5}
 800350e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003510:	6813      	ldr	r3, [r2, #0]
 8003512:	0699      	lsls	r1, r3, #26
 8003514:	d548      	bpl.n	80035a8 <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003516:	6813      	ldr	r3, [r2, #0]
 8003518:	4a3b      	ldr	r2, [pc, #236]	; (8003608 <HAL_RCC_GetHCLKFreq+0x13c>)
 800351a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	e7de      	b.n	80034e2 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003524:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003526:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003528:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800352a:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800352e:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0d6      	beq.n	80034e2 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003534:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003538:	f001 0101 	and.w	r1, r1, #1
 800353c:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003540:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003544:	fb01 f304 	mul.w	r3, r1, r4
 8003548:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800354c:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8003556:	d002      	beq.n	800355e <HAL_RCC_GetHCLKFreq+0x92>
 8003558:	d32b      	bcc.n	80035b2 <HAL_RCC_GetHCLKFreq+0xe6>
 800355a:	2802      	cmp	r0, #2
 800355c:	d026      	beq.n	80035ac <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800355e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800360c <HAL_RCC_GetHCLKFreq+0x140>
 8003562:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8003566:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356c:	ee07 3a10 	vmov	s14, r3
 8003570:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003574:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003578:	ee37 7a25 	vadd.f32	s14, s14, s11
 800357c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003580:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCC_GetHCLKFreq+0x128>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800358c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800358e:	ee07 3a10 	vmov	s14, r3
 8003592:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003596:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800359a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800359e:	ee17 3a90 	vmov	r3, s15
 80035a2:	e79e      	b.n	80034e2 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <HAL_RCC_GetHCLKFreq+0x144>)
 80035a6:	e79c      	b.n	80034e2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <HAL_RCC_GetHCLKFreq+0x13c>)
 80035aa:	e79a      	b.n	80034e2 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035ac:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003614 <HAL_RCC_GetHCLKFreq+0x148>
 80035b0:	e7d7      	b.n	8003562 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035b2:	6813      	ldr	r3, [r2, #0]
 80035b4:	069b      	lsls	r3, r3, #26
 80035b6:	d51a      	bpl.n	80035ee <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035b8:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035ba:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035be:	4912      	ldr	r1, [pc, #72]	; (8003608 <HAL_RCC_GetHCLKFreq+0x13c>)
 80035c0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035c6:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035cc:	ee07 1a10 	vmov	s14, r1
 80035d0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80035d4:	ee07 3a10 	vmov	s14, r3
 80035d8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80035dc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80035e0:	ee76 6a05 	vadd.f32	s13, s12, s10
 80035e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ec:	e7ca      	b.n	8003584 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035ee:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003618 <HAL_RCC_GetHCLKFreq+0x14c>
 80035f2:	e7b6      	b.n	8003562 <HAL_RCC_GetHCLKFreq+0x96>
 80035f4:	58024400 	.word	0x58024400
 80035f8:	003d0900 	.word	0x003d0900
 80035fc:	0800bca4 	.word	0x0800bca4
 8003600:	2000003c 	.word	0x2000003c
 8003604:	20000038 	.word	0x20000038
 8003608:	03d09000 	.word	0x03d09000
 800360c:	4a742400 	.word	0x4a742400
 8003610:	017d7840 	.word	0x017d7840
 8003614:	4bbebc20 	.word	0x4bbebc20
 8003618:	4c742400 	.word	0x4c742400

0800361c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800361c:	4a3b      	ldr	r2, [pc, #236]	; (800370c <RCCEx_PLL2_Config+0xf0>)
{
 800361e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003620:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	2b03      	cmp	r3, #3
 8003628:	d067      	beq.n	80036fa <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800362a:	6813      	ldr	r3, [r2, #0]
 800362c:	460f      	mov	r7, r1
 800362e:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003630:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8003632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003636:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003638:	f7fc feb2 	bl	80003a0 <HAL_GetTick>
 800363c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800363e:	e004      	b.n	800364a <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003640:	f7fc feae 	bl	80003a0 <HAL_GetTick>
 8003644:	1b80      	subs	r0, r0, r6
 8003646:	2802      	cmp	r0, #2
 8003648:	d859      	bhi.n	80036fe <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	011a      	lsls	r2, r3, #4
 800364e:	d4f7      	bmi.n	8003640 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003652:	682a      	ldr	r2, [r5, #0]
 8003654:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003658:	492d      	ldr	r1, [pc, #180]	; (8003710 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800365a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800365e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003660:	686e      	ldr	r6, [r5, #4]
 8003662:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8003666:	3e01      	subs	r6, #1
 8003668:	1e50      	subs	r0, r2, #1
 800366a:	3b01      	subs	r3, #1
 800366c:	692a      	ldr	r2, [r5, #16]
 800366e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8003672:	025b      	lsls	r3, r3, #9
 8003674:	0400      	lsls	r0, r0, #16
 8003676:	3a01      	subs	r2, #1
 8003678:	b29b      	uxth	r3, r3
 800367a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800367e:	0612      	lsls	r2, r2, #24
 8003680:	4303      	orrs	r3, r0
 8003682:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003686:	4333      	orrs	r3, r6
 8003688:	4313      	orrs	r3, r2
 800368a:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800368c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800368e:	696a      	ldr	r2, [r5, #20]
 8003690:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003694:	4313      	orrs	r3, r2
 8003696:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003698:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800369a:	69aa      	ldr	r2, [r5, #24]
 800369c:	f023 0320 	bic.w	r3, r3, #32
 80036a0:	4313      	orrs	r3, r2
 80036a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80036a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036a6:	f023 0310 	bic.w	r3, r3, #16
 80036aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80036ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80036ae:	69eb      	ldr	r3, [r5, #28]
 80036b0:	4011      	ands	r1, r2
 80036b2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80036b6:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80036b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036ba:	f043 0310 	orr.w	r3, r3, #16
 80036be:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80036c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80036c2:	b1f7      	cbz	r7, 8003702 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80036c4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80036c6:	bf0c      	ite	eq
 80036c8:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80036cc:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80036d0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80036d2:	4b0e      	ldr	r3, [pc, #56]	; (800370c <RCCEx_PLL2_Config+0xf0>)
 80036d4:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036d6:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 80036d8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036dc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80036de:	f7fc fe5f 	bl	80003a0 <HAL_GetTick>
 80036e2:	4605      	mov	r5, r0
 80036e4:	e004      	b.n	80036f0 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80036e6:	f7fc fe5b 	bl	80003a0 <HAL_GetTick>
 80036ea:	1b40      	subs	r0, r0, r5
 80036ec:	2802      	cmp	r0, #2
 80036ee:	d806      	bhi.n	80036fe <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	d5f7      	bpl.n	80036e6 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 80036f6:	2000      	movs	r0, #0
}
 80036f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80036fa:	2001      	movs	r0, #1
}
 80036fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80036fe:	2003      	movs	r0, #3
}
 8003700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003706:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003708:	e7e3      	b.n	80036d2 <RCCEx_PLL2_Config+0xb6>
 800370a:	bf00      	nop
 800370c:	58024400 	.word	0x58024400
 8003710:	ffff0007 	.word	0xffff0007

08003714 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003714:	4a3b      	ldr	r2, [pc, #236]	; (8003804 <RCCEx_PLL3_Config+0xf0>)
{
 8003716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003718:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b03      	cmp	r3, #3
 8003720:	d067      	beq.n	80037f2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003722:	6813      	ldr	r3, [r2, #0]
 8003724:	460f      	mov	r7, r1
 8003726:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003728:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800372a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003730:	f7fc fe36 	bl	80003a0 <HAL_GetTick>
 8003734:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003736:	e004      	b.n	8003742 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003738:	f7fc fe32 	bl	80003a0 <HAL_GetTick>
 800373c:	1b80      	subs	r0, r0, r6
 800373e:	2802      	cmp	r0, #2
 8003740:	d859      	bhi.n	80037f6 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	009a      	lsls	r2, r3, #2
 8003746:	d4f7      	bmi.n	8003738 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003748:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800374a:	682a      	ldr	r2, [r5, #0]
 800374c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003750:	492d      	ldr	r1, [pc, #180]	; (8003808 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003752:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003756:	62a3      	str	r3, [r4, #40]	; 0x28
 8003758:	686e      	ldr	r6, [r5, #4]
 800375a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800375e:	3e01      	subs	r6, #1
 8003760:	1e50      	subs	r0, r2, #1
 8003762:	3b01      	subs	r3, #1
 8003764:	692a      	ldr	r2, [r5, #16]
 8003766:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800376a:	025b      	lsls	r3, r3, #9
 800376c:	0400      	lsls	r0, r0, #16
 800376e:	3a01      	subs	r2, #1
 8003770:	b29b      	uxth	r3, r3
 8003772:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8003776:	0612      	lsls	r2, r2, #24
 8003778:	4303      	orrs	r3, r0
 800377a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800377e:	4333      	orrs	r3, r6
 8003780:	4313      	orrs	r3, r2
 8003782:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003784:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003786:	696a      	ldr	r2, [r5, #20]
 8003788:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800378c:	4313      	orrs	r3, r2
 800378e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003792:	69aa      	ldr	r2, [r5, #24]
 8003794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003798:	4313      	orrs	r3, r2
 800379a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800379c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800379e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80037a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80037a6:	69eb      	ldr	r3, [r5, #28]
 80037a8:	4011      	ands	r1, r2
 80037aa:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80037ae:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80037b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80037b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80037ba:	b1f7      	cbz	r7, 80037fa <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80037bc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80037be:	bf0c      	ite	eq
 80037c0:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80037c4:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80037c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80037ca:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <RCCEx_PLL3_Config+0xf0>)
 80037cc:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037ce:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 80037d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037d4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80037d6:	f7fc fde3 	bl	80003a0 <HAL_GetTick>
 80037da:	4605      	mov	r5, r0
 80037dc:	e004      	b.n	80037e8 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80037de:	f7fc fddf 	bl	80003a0 <HAL_GetTick>
 80037e2:	1b40      	subs	r0, r0, r5
 80037e4:	2802      	cmp	r0, #2
 80037e6:	d806      	bhi.n	80037f6 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	d5f7      	bpl.n	80037de <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 80037ee:	2000      	movs	r0, #0
}
 80037f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80037f2:	2001      	movs	r0, #1
}
 80037f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80037f6:	2003      	movs	r0, #3
}
 80037f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80037fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003800:	e7e3      	b.n	80037ca <RCCEx_PLL3_Config+0xb6>
 8003802:	bf00      	nop
 8003804:	58024400 	.word	0x58024400
 8003808:	ffff0007 	.word	0xffff0007

0800380c <HAL_RCCEx_PeriphCLKConfig>:
{
 800380c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003810:	6803      	ldr	r3, [r0, #0]
{
 8003812:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003814:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8003818:	d016      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800381a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800381c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003820:	f000 8450 	beq.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003824:	f240 851a 	bls.w	800425c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003828:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800382c:	f000 848a 	beq.w	8004144 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003830:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8003834:	f040 8538 	bne.w	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xa9c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003838:	499d      	ldr	r1, [pc, #628]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800383a:	2600      	movs	r6, #0
 800383c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800383e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003842:	431a      	orrs	r2, r3
 8003844:	650a      	str	r2, [r1, #80]	; 0x50
 8003846:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003848:	05dd      	lsls	r5, r3, #23
 800384a:	d50a      	bpl.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 800384c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800384e:	2a04      	cmp	r2, #4
 8003850:	d806      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003852:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003856:	03eb      	.short	0x03eb
 8003858:	03da03f2 	.word	0x03da03f2
 800385c:	03a703a7 	.word	0x03a703a7
      ret = HAL_ERROR;
 8003860:	2601      	movs	r6, #1
 8003862:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003864:	0598      	lsls	r0, r3, #22
 8003866:	d515      	bpl.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003868:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800386a:	2a80      	cmp	r2, #128	; 0x80
 800386c:	f000 8449 	beq.w	8004102 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8003870:	f200 84dd 	bhi.w	800422e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003874:	2a00      	cmp	r2, #0
 8003876:	f000 8457 	beq.w	8004128 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800387a:	2a40      	cmp	r2, #64	; 0x40
 800387c:	f040 84de 	bne.w	800423c <HAL_RCCEx_PeriphCLKConfig+0xa30>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003880:	2100      	movs	r1, #0
 8003882:	1d20      	adds	r0, r4, #4
 8003884:	f7ff feca 	bl	800361c <RCCEx_PLL2_Config>
 8003888:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800388a:	2d00      	cmp	r5, #0
 800388c:	f000 8442 	beq.w	8004114 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003894:	0559      	lsls	r1, r3, #21
 8003896:	d518      	bpl.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003898:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800389c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80038a0:	f000 841b 	beq.w	80040da <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 80038a4:	f200 84ef 	bhi.w	8004286 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80038a8:	2a00      	cmp	r2, #0
 80038aa:	f000 8451 	beq.w	8004150 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80038ae:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80038b2:	f040 84f0 	bne.w	8004296 <HAL_RCCEx_PeriphCLKConfig+0xa8a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038b6:	2100      	movs	r1, #0
 80038b8:	1d20      	adds	r0, r4, #4
 80038ba:	f7ff feaf 	bl	800361c <RCCEx_PLL2_Config>
 80038be:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80038c0:	2d00      	cmp	r5, #0
 80038c2:	f000 8413 	beq.w	80040ec <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038ca:	051a      	lsls	r2, r3, #20
 80038cc:	d518      	bpl.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 80038ce:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80038d2:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80038d6:	f000 83ce 	beq.w	8004076 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 80038da:	f200 84c8 	bhi.w	800426e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80038de:	2a00      	cmp	r2, #0
 80038e0:	f000 8429 	beq.w	8004136 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 80038e4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80038e8:	f040 84c9 	bne.w	800427e <HAL_RCCEx_PeriphCLKConfig+0xa72>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038ec:	2100      	movs	r1, #0
 80038ee:	1d20      	adds	r0, r4, #4
 80038f0:	f7ff fe94 	bl	800361c <RCCEx_PLL2_Config>
 80038f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80038f6:	2d00      	cmp	r5, #0
 80038f8:	f000 83c6 	beq.w	8004088 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003900:	019f      	lsls	r7, r3, #6
 8003902:	d50d      	bpl.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x114>
    switch(PeriphClkInit->QspiClockSelection)
 8003904:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003906:	2a10      	cmp	r2, #16
 8003908:	f000 8338 	beq.w	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x770>
 800390c:	f240 84c7 	bls.w	800429e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003910:	2a20      	cmp	r2, #32
 8003912:	f000 836a 	beq.w	8003fea <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8003916:	2a30      	cmp	r2, #48	; 0x30
 8003918:	f000 8335 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = HAL_ERROR;
 800391c:	2601      	movs	r6, #1
 800391e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003920:	04d8      	lsls	r0, r3, #19
 8003922:	d517      	bpl.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003924:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003926:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800392a:	f000 83b9 	beq.w	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800392e:	f200 8489 	bhi.w	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8003932:	2a00      	cmp	r2, #0
 8003934:	f000 8413 	beq.w	800415e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003938:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800393c:	f040 848a 	bne.w	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa48>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003940:	2100      	movs	r1, #0
 8003942:	1d20      	adds	r0, r4, #4
 8003944:	f7ff fe6a 	bl	800361c <RCCEx_PLL2_Config>
 8003948:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800394a:	2d00      	cmp	r5, #0
 800394c:	f000 83b1 	beq.w	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003954:	0499      	lsls	r1, r3, #18
 8003956:	d51b      	bpl.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003958:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800395a:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800395e:	f000 8331 	beq.w	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8003962:	f200 8454 	bhi.w	800420e <HAL_RCCEx_PeriphCLKConfig+0xa02>
 8003966:	b142      	cbz	r2, 800397a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003968:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800396c:	f040 845b 	bne.w	8004226 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003970:	2101      	movs	r1, #1
 8003972:	1d20      	adds	r0, r4, #4
 8003974:	f7ff fe52 	bl	800361c <RCCEx_PLL2_Config>
 8003978:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800397a:	2d00      	cmp	r5, #0
 800397c:	f040 8288 	bne.w	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x684>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003980:	4a4b      	ldr	r2, [pc, #300]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003982:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003984:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003986:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800398a:	430b      	orrs	r3, r1
 800398c:	6513      	str	r3, [r2, #80]	; 0x50
 800398e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003990:	045a      	lsls	r2, r3, #17
 8003992:	d51d      	bpl.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003994:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8003998:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800399c:	f000 82e4 	beq.w	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80039a0:	f200 83f9 	bhi.w	8004196 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80039a4:	b142      	cbz	r2, 80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80039a6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80039aa:	f040 8400 	bne.w	80041ae <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039ae:	2101      	movs	r1, #1
 80039b0:	1d20      	adds	r0, r4, #4
 80039b2:	f7ff fe33 	bl	800361c <RCCEx_PLL2_Config>
 80039b6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80039b8:	2d00      	cmp	r5, #0
 80039ba:	f040 8266 	bne.w	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039be:	4a3c      	ldr	r2, [pc, #240]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80039c0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80039c4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80039c6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80039ca:	430b      	orrs	r3, r1
 80039cc:	6593      	str	r3, [r2, #88]	; 0x58
 80039ce:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039d0:	041f      	lsls	r7, r3, #16
 80039d2:	d50d      	bpl.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->FdcanClockSelection)
 80039d4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80039d6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80039da:	f000 82fd 	beq.w	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80039de:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80039e2:	f000 8202 	beq.w	8003dea <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80039e6:	2a00      	cmp	r2, #0
 80039e8:	f000 8204 	beq.w	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      ret = HAL_ERROR;
 80039ec:	2601      	movs	r6, #1
 80039ee:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039f0:	01d8      	lsls	r0, r3, #7
 80039f2:	d50a      	bpl.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->FmcClockSelection)
 80039f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80039f6:	2a03      	cmp	r2, #3
 80039f8:	d805      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80039fa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80039fe:	018c      	.short	0x018c
 8003a00:	01870276 	.word	0x01870276
 8003a04:	018c      	.short	0x018c
      ret = HAL_ERROR;
 8003a06:	2601      	movs	r6, #1
 8003a08:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a0a:	0259      	lsls	r1, r3, #9
 8003a0c:	f100 8191 	bmi.w	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x526>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a10:	07df      	lsls	r7, r3, #31
 8003a12:	d52f      	bpl.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003a14:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003a16:	2a28      	cmp	r2, #40	; 0x28
 8003a18:	d82a      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003a1a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003a1e:	01db      	.short	0x01db
 8003a20:	00290029 	.word	0x00290029
 8003a24:	00290029 	.word	0x00290029
 8003a28:	00290029 	.word	0x00290029
 8003a2c:	02810029 	.word	0x02810029
 8003a30:	00290029 	.word	0x00290029
 8003a34:	00290029 	.word	0x00290029
 8003a38:	00290029 	.word	0x00290029
 8003a3c:	01d50029 	.word	0x01d50029
 8003a40:	00290029 	.word	0x00290029
 8003a44:	00290029 	.word	0x00290029
 8003a48:	00290029 	.word	0x00290029
 8003a4c:	01db0029 	.word	0x01db0029
 8003a50:	00290029 	.word	0x00290029
 8003a54:	00290029 	.word	0x00290029
 8003a58:	00290029 	.word	0x00290029
 8003a5c:	01db0029 	.word	0x01db0029
 8003a60:	00290029 	.word	0x00290029
 8003a64:	00290029 	.word	0x00290029
 8003a68:	00290029 	.word	0x00290029
 8003a6c:	01db0029 	.word	0x01db0029
      ret = HAL_ERROR;
 8003a70:	2601      	movs	r6, #1
 8003a72:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a74:	0798      	lsls	r0, r3, #30
 8003a76:	d50c      	bpl.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003a78:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003a7a:	2a05      	cmp	r2, #5
 8003a7c:	d807      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x282>
 8003a7e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003a82:	0139      	.short	0x0139
 8003a84:	01330246 	.word	0x01330246
 8003a88:	01390139 	.word	0x01390139
 8003a8c:	0139      	.short	0x0139
      ret = HAL_ERROR;
 8003a8e:	2601      	movs	r6, #1
 8003a90:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a92:	0759      	lsls	r1, r3, #29
 8003a94:	d510      	bpl.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003a96:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003a9a:	2a05      	cmp	r2, #5
 8003a9c:	d80a      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a9e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003aa2:	0116      	.short	0x0116
 8003aa4:	0110022d 	.word	0x0110022d
 8003aa8:	01160116 	.word	0x01160116
 8003aac:	0116      	.short	0x0116
 8003aae:	bf00      	nop
 8003ab0:	58024400 	.word	0x58024400
      ret = HAL_ERROR;
 8003ab4:	2601      	movs	r6, #1
 8003ab6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ab8:	069a      	lsls	r2, r3, #26
 8003aba:	d51d      	bpl.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003abc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003ac0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003ac4:	f000 8264 	beq.w	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x784>
 8003ac8:	f200 8383 	bhi.w	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 8003acc:	b142      	cbz	r2, 8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003ace:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003ad2:	f040 838a 	bne.w	80041ea <HAL_RCCEx_PeriphCLKConfig+0x9de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	1d20      	adds	r0, r4, #4
 8003ada:	f7ff fd9f 	bl	800361c <RCCEx_PLL2_Config>
 8003ade:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ae0:	2d00      	cmp	r5, #0
 8003ae2:	f040 81cf 	bne.w	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x678>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ae6:	4ab6      	ldr	r2, [pc, #728]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003ae8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003aec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003aee:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003af2:	430b      	orrs	r3, r1
 8003af4:	6553      	str	r3, [r2, #84]	; 0x54
 8003af6:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003af8:	065f      	lsls	r7, r3, #25
 8003afa:	d51d      	bpl.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003afc:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8003b00:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003b04:	f000 8254 	beq.w	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8003b08:	f200 8372 	bhi.w	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
 8003b0c:	b142      	cbz	r2, 8003b20 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003b0e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003b12:	f040 8379 	bne.w	8004208 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b16:	2100      	movs	r1, #0
 8003b18:	1d20      	adds	r0, r4, #4
 8003b1a:	f7ff fd7f 	bl	800361c <RCCEx_PLL2_Config>
 8003b1e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b20:	2d00      	cmp	r5, #0
 8003b22:	f040 81bb 	bne.w	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x690>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b26:	4aa6      	ldr	r2, [pc, #664]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b28:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003b2c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003b2e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003b32:	430b      	orrs	r3, r1
 8003b34:	6593      	str	r3, [r2, #88]	; 0x58
 8003b36:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b38:	0618      	lsls	r0, r3, #24
 8003b3a:	d51d      	bpl.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003b3c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8003b40:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003b44:	f000 8206 	beq.w	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003b48:	f200 8334 	bhi.w	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8003b4c:	b142      	cbz	r2, 8003b60 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003b4e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003b52:	f040 833b 	bne.w	80041cc <HAL_RCCEx_PeriphCLKConfig+0x9c0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b56:	2100      	movs	r1, #0
 8003b58:	1d20      	adds	r0, r4, #4
 8003b5a:	f7ff fd5f 	bl	800361c <RCCEx_PLL2_Config>
 8003b5e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b60:	2d00      	cmp	r5, #0
 8003b62:	f040 819e 	bne.w	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x696>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b66:	4a96      	ldr	r2, [pc, #600]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b68:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8003b6c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003b6e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003b72:	430b      	orrs	r3, r1
 8003b74:	6593      	str	r3, [r2, #88]	; 0x58
 8003b76:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b78:	0719      	lsls	r1, r3, #28
 8003b7a:	d50c      	bpl.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003b7c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003b80:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003b84:	f000 825f 	beq.w	8004046 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b88:	498d      	ldr	r1, [pc, #564]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b8a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003b8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b90:	4313      	orrs	r3, r2
 8003b92:	654b      	str	r3, [r1, #84]	; 0x54
 8003b94:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b96:	06da      	lsls	r2, r3, #27
 8003b98:	d50c      	bpl.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003b9a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8003b9e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003ba2:	f000 825c 	beq.w	800405e <HAL_RCCEx_PeriphCLKConfig+0x852>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ba6:	4986      	ldr	r1, [pc, #536]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003ba8:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8003baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	658b      	str	r3, [r1, #88]	; 0x58
 8003bb2:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb4:	031f      	lsls	r7, r3, #12
 8003bb6:	d50e      	bpl.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    switch(PeriphClkInit->AdcClockSelection)
 8003bb8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003bbc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003bc0:	f000 8123 	beq.w	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8003bc4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8003bc8:	f000 8125 	beq.w	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	f000 82cd 	beq.w	800416c <HAL_RCCEx_PeriphCLKConfig+0x960>
      ret = HAL_ERROR;
 8003bd2:	2601      	movs	r6, #1
 8003bd4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bd6:	0358      	lsls	r0, r3, #13
 8003bd8:	d50f      	bpl.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    switch(PeriphClkInit->UsbClockSelection)
 8003bda:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003bde:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003be2:	f000 8124 	beq.w	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x622>
 8003be6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8003bea:	f000 8126 	beq.w	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8003bee:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003bf2:	f000 82c3 	beq.w	800417c <HAL_RCCEx_PeriphCLKConfig+0x970>
      ret = HAL_ERROR;
 8003bf6:	2601      	movs	r6, #1
 8003bf8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003bfa:	03d9      	lsls	r1, r3, #15
 8003bfc:	d511      	bpl.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch(PeriphClkInit->SdmmcClockSelection)
 8003bfe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003c00:	2a00      	cmp	r2, #0
 8003c02:	f000 8161 	beq.w	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003c06:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003c0a:	f040 8150 	bne.w	8003eae <HAL_RCCEx_PeriphCLKConfig+0x6a2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c0e:	2102      	movs	r1, #2
 8003c10:	1d20      	adds	r0, r4, #4
 8003c12:	f7ff fd03 	bl	800361c <RCCEx_PLL2_Config>
 8003c16:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003c18:	2d00      	cmp	r5, #0
 8003c1a:	f000 815d 	beq.w	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c22:	009a      	lsls	r2, r3, #2
 8003c24:	f100 8114 	bmi.w	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x644>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c28:	039f      	lsls	r7, r3, #14
 8003c2a:	d439      	bmi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003c2c:	1c30      	adds	r0, r6, #0
 8003c2e:	bf18      	it	ne
 8003c30:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c32:	02de      	lsls	r6, r3, #11
 8003c34:	d507      	bpl.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c36:	4a62      	ldr	r2, [pc, #392]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c38:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003c3a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6513      	str	r3, [r2, #80]	; 0x50
 8003c44:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c46:	00dd      	lsls	r5, r3, #3
 8003c48:	d508      	bpl.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x450>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c4a:	4a5d      	ldr	r2, [pc, #372]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c4c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8003c50:	6913      	ldr	r3, [r2, #16]
 8003c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c56:	430b      	orrs	r3, r1
 8003c58:	6113      	str	r3, [r2, #16]
 8003c5a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c5c:	0299      	lsls	r1, r3, #10
 8003c5e:	d507      	bpl.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x464>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c60:	4a57      	ldr	r2, [pc, #348]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c62:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003c64:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	6513      	str	r3, [r2, #80]	; 0x50
 8003c6e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c70:	005a      	lsls	r2, r3, #1
 8003c72:	d50a      	bpl.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x47e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c74:	4b52      	ldr	r3, [pc, #328]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c7c:	611a      	str	r2, [r3, #16]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8003c84:	430a      	orrs	r2, r1
 8003c86:	611a      	str	r2, [r3, #16]
 8003c88:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da06      	bge.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x490>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c8e:	4a4c      	ldr	r2, [pc, #304]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c90:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003c92:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003c94:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8003c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8003ca0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003ca2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003ca6:	f000 8105 	beq.w	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8003caa:	f240 8142 	bls.w	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003cae:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003cb2:	f000 8104 	beq.w	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003cb6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003cba:	f000 8100 	beq.w	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	e7b7      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003cc8:	f7ff fd24 	bl	8003714 <RCCEx_PLL3_Config>
 8003ccc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003cce:	2d00      	cmp	r5, #0
 8003cd0:	f040 80d5 	bne.w	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x672>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cd4:	4a3a      	ldr	r2, [pc, #232]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003cd6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003cda:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003cdc:	f023 0307 	bic.w	r3, r3, #7
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	e6e7      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ce8:	2101      	movs	r1, #1
 8003cea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003cee:	f7ff fd11 	bl	8003714 <RCCEx_PLL3_Config>
 8003cf2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003cf4:	2d00      	cmp	r5, #0
 8003cf6:	f040 80bf 	bne.w	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cfa:	4a31      	ldr	r2, [pc, #196]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003cfc:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003cfe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003d00:	f023 0307 	bic.w	r3, r3, #7
 8003d04:	430b      	orrs	r3, r1
 8003d06:	6553      	str	r3, [r2, #84]	; 0x54
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	e6c2      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	1d20      	adds	r0, r4, #4
 8003d10:	f7ff fc84 	bl	800361c <RCCEx_PLL2_Config>
 8003d14:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003d16:	2d00      	cmp	r5, #0
 8003d18:	f040 80ab 	bne.w	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d1c:	4a28      	ldr	r2, [pc, #160]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003d1e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003d20:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	430b      	orrs	r3, r1
 8003d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d2a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d2c:	0259      	lsls	r1, r3, #9
 8003d2e:	f57f ae6f 	bpl.w	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x204>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d32:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>)
 8003d34:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d36:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d3c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003d3e:	f7fc fb2f 	bl	80003a0 <HAL_GetTick>
 8003d42:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d44:	e006      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x548>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d46:	f7fc fb2b 	bl	80003a0 <HAL_GetTick>
 8003d4a:	eba0 0008 	sub.w	r0, r0, r8
 8003d4e:	2864      	cmp	r0, #100	; 0x64
 8003d50:	f200 821d 	bhi.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x982>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	05da      	lsls	r2, r3, #23
 8003d58:	d5f5      	bpl.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    if(ret == HAL_OK)
 8003d5a:	2d00      	cmp	r5, #0
 8003d5c:	f040 82c5 	bne.w	80042ea <HAL_RCCEx_PeriphCLKConfig+0xade>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d60:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003d62:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003d66:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d68:	4051      	eors	r1, r2
 8003d6a:	f411 7f40 	tst.w	r1, #768	; 0x300
 8003d6e:	d00d      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x580>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d72:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d78:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003d7c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d7e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d80:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003d84:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8003d86:	671a      	str	r2, [r3, #112]	; 0x70
 8003d88:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d8c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003d90:	f000 828d 	beq.w	80042ae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d94:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8003d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d9c:	f000 829b 	beq.w	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003da0:	4a07      	ldr	r2, [pc, #28]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003da2:	6913      	ldr	r3, [r2, #16]
 8003da4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003da8:	6113      	str	r3, [r2, #16]
 8003daa:	4a05      	ldr	r2, [pc, #20]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003dac:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003db0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db6:	430b      	orrs	r3, r1
 8003db8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	e628      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003dbe:	bf00      	nop
 8003dc0:	58024400 	.word	0x58024400
 8003dc4:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dc8:	2101      	movs	r1, #1
 8003dca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003dce:	f7ff fca1 	bl	8003714 <RCCEx_PLL3_Config>
 8003dd2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003dd4:	2d00      	cmp	r5, #0
 8003dd6:	d149      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x660>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dd8:	4ab0      	ldr	r2, [pc, #704]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003dda:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003ddc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003dde:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003de2:	430b      	orrs	r3, r1
 8003de4:	6553      	str	r3, [r2, #84]	; 0x54
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	e644      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x268>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dea:	2101      	movs	r1, #1
 8003dec:	1d20      	adds	r0, r4, #4
 8003dee:	f7ff fc15 	bl	800361c <RCCEx_PLL2_Config>
 8003df2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003df4:	2d00      	cmp	r5, #0
 8003df6:	d14e      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003df8:	4aa8      	ldr	r2, [pc, #672]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003dfa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003dfc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003dfe:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003e02:	430b      	orrs	r3, r1
 8003e04:	6513      	str	r3, [r2, #80]	; 0x50
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	e5f2      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e10:	f7ff fc80 	bl	8003714 <RCCEx_PLL3_Config>
 8003e14:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003e16:	2d00      	cmp	r5, #0
 8003e18:	d146      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e1a:	4aa0      	ldr	r2, [pc, #640]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003e1c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003e20:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003e22:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e26:	430b      	orrs	r3, r1
 8003e28:	6593      	str	r3, [r2, #88]	; 0x58
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	e6d3      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e2e:	2101      	movs	r1, #1
 8003e30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e34:	f7ff fc6e 	bl	8003714 <RCCEx_PLL3_Config>
 8003e38:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003e3a:	b9a5      	cbnz	r5, 8003e66 <HAL_RCCEx_PeriphCLKConfig+0x65a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e3c:	4a97      	ldr	r2, [pc, #604]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003e3e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003e42:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003e44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6553      	str	r3, [r2, #84]	; 0x54
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	e6d4      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003e50:	2102      	movs	r1, #2
 8003e52:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e56:	f7ff fc5d 	bl	8003714 <RCCEx_PLL3_Config>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	f43f aee3 	beq.w	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      status=HAL_ERROR;
 8003e62:	2601      	movs	r6, #1
 8003e64:	e6e0      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e66:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e68:	462e      	mov	r6, r5
 8003e6a:	e6c6      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8003e6c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e6e:	462e      	mov	r6, r5
 8003e70:	e600      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003e72:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e74:	462e      	mov	r6, r5
 8003e76:	e5c8      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003e78:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e7a:	462e      	mov	r6, r5
 8003e7c:	e609      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003e7e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e80:	462e      	mov	r6, r5
 8003e82:	e619      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003e84:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e86:	462e      	mov	r6, r5
 8003e88:	e636      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8003e8a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e8c:	462e      	mov	r6, r5
 8003e8e:	e59f      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8003e90:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e92:	462e      	mov	r6, r5
 8003e94:	e57c      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8003e96:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e98:	462e      	mov	r6, r5
 8003e9a:	e5a9      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003e9c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e9e:	462e      	mov	r6, r5
 8003ea0:	e64a      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003ea2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003ea4:	462e      	mov	r6, r5
 8003ea6:	e667      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003ea8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003eaa:	462e      	mov	r6, r5
 8003eac:	e693      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = HAL_ERROR;
 8003eae:	2601      	movs	r6, #1
 8003eb0:	4635      	mov	r5, r6
 8003eb2:	e6b6      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb4:	4a79      	ldr	r2, [pc, #484]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003eb6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ebc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003ebe:	2d00      	cmp	r5, #0
 8003ec0:	d03c      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x730>
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	2001      	movs	r0, #1
 8003ec6:	e6b4      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x426>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec8:	4a74      	ldr	r2, [pc, #464]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003eca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003ed2:	2d00      	cmp	r5, #0
 8003ed4:	f47f aea3 	bne.w	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x412>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ed8:	4a70      	ldr	r2, [pc, #448]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003eda:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003edc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee2:	430b      	orrs	r3, r1
 8003ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	e69b      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eea:	4a6c      	ldr	r2, [pc, #432]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003eec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003ef4:	2d00      	cmp	r5, #0
 8003ef6:	f43f af11 	beq.w	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003efa:	e7ba      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x666>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003efc:	2101      	movs	r1, #1
 8003efe:	1d20      	adds	r0, r4, #4
 8003f00:	f7ff fb8c 	bl	800361c <RCCEx_PLL2_Config>
 8003f04:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f06:	2d00      	cmp	r5, #0
 8003f08:	f43f aee4 	beq.w	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8003f0c:	e7b7      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x672>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f0e:	2101      	movs	r1, #1
 8003f10:	1d20      	adds	r0, r4, #4
 8003f12:	f7ff fb83 	bl	800361c <RCCEx_PLL2_Config>
 8003f16:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f18:	2d00      	cmp	r5, #0
 8003f1a:	f43f aeee 	beq.w	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003f1e:	e7ab      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f20:	2101      	movs	r1, #1
 8003f22:	1d20      	adds	r0, r4, #4
 8003f24:	f7ff fb7a 	bl	800361c <RCCEx_PLL2_Config>
 8003f28:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f2a:	2d00      	cmp	r5, #0
 8003f2c:	f43f af54 	beq.w	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003f30:	e79c      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x660>
    switch(PeriphClkInit->RngClockSelection)
 8003f32:	2a00      	cmp	r2, #0
 8003f34:	f47f aec3 	bne.w	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
    if(ret == HAL_OK)
 8003f38:	2d00      	cmp	r5, #0
 8003f3a:	d1c2      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f3c:	4a57      	ldr	r2, [pc, #348]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003f3e:	1c30      	adds	r0, r6, #0
 8003f40:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003f42:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f44:	bf18      	it	ne
 8003f46:	2001      	movne	r0, #1
 8003f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6553      	str	r3, [r2, #84]	; 0x54
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	e66e      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f54:	2102      	movs	r1, #2
 8003f56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f5a:	f7ff fbdb 	bl	8003714 <RCCEx_PLL3_Config>
 8003f5e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f60:	2d00      	cmp	r5, #0
 8003f62:	f43f ae00 	beq.w	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003f66:	e79c      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x696>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f68:	2101      	movs	r1, #1
 8003f6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f6e:	f7ff fbd1 	bl	8003714 <RCCEx_PLL3_Config>
 8003f72:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f74:	2d00      	cmp	r5, #0
 8003f76:	f43f ad22 	beq.w	80039be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003f7a:	e786      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f7c:	4a47      	ldr	r2, [pc, #284]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003f7e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f84:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	d036      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	462e      	mov	r6, r5
 8003f8e:	e4c7      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f90:	2102      	movs	r1, #2
 8003f92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f96:	f7ff fbbd 	bl	8003714 <RCCEx_PLL3_Config>
 8003f9a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f9c:	2d00      	cmp	r5, #0
 8003f9e:	f43f ada2 	beq.w	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003fa2:	e76f      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003fa4:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8003fa6:	2d00      	cmp	r5, #0
 8003fa8:	d037      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	462e      	mov	r6, r5
 8003fae:	e459      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x58>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003fb6:	f7ff fbad 	bl	8003714 <RCCEx_PLL3_Config>
 8003fba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003fbc:	2d00      	cmp	r5, #0
 8003fbe:	f43f adb2 	beq.w	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8003fc2:	e76b      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x690>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003fca:	f7ff fba3 	bl	8003714 <RCCEx_PLL3_Config>
 8003fce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003fd0:	2d00      	cmp	r5, #0
 8003fd2:	f43f acd5 	beq.w	8003980 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003fd6:	e75b      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x684>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd8:	4a30      	ldr	r2, [pc, #192]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003fda:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003fe2:	2d00      	cmp	r5, #0
 8003fe4:	f43f af08 	beq.w	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8003fe8:	e755      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fea:	2102      	movs	r1, #2
 8003fec:	1d20      	adds	r0, r4, #4
 8003fee:	f7ff fb15 	bl	800361c <RCCEx_PLL2_Config>
 8003ff2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ff4:	2d00      	cmp	r5, #0
 8003ff6:	d1c8      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ff8:	4a28      	ldr	r2, [pc, #160]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003ffa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003ffc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003ffe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004002:	430b      	orrs	r3, r1
 8004004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	e48a      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800400a:	2100      	movs	r1, #0
 800400c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004010:	f7ff fb80 	bl	8003714 <RCCEx_PLL3_Config>
 8004014:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004016:	2d00      	cmp	r5, #0
 8004018:	d1c7      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800401a:	4a20      	ldr	r2, [pc, #128]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800401c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800401e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004020:	f023 0307 	bic.w	r3, r3, #7
 8004024:	430b      	orrs	r3, r1
 8004026:	6513      	str	r3, [r2, #80]	; 0x50
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	e41b      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800402c:	4a1b      	ldr	r2, [pc, #108]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
      break;
 800402e:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004030:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004036:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004038:	e7b5      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800403a:	2100      	movs	r1, #0
 800403c:	1d20      	adds	r0, r4, #4
 800403e:	f7ff faed 	bl	800361c <RCCEx_PLL2_Config>
 8004042:	4605      	mov	r5, r0
      break;
 8004044:	e7af      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004046:	2102      	movs	r1, #2
 8004048:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800404c:	f7ff fb62 	bl	8003714 <RCCEx_PLL3_Config>
 8004050:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004054:	2800      	cmp	r0, #0
 8004056:	f43f ad97 	beq.w	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x37c>
          status = HAL_ERROR;
 800405a:	2601      	movs	r6, #1
 800405c:	e594      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800405e:	2102      	movs	r1, #2
 8004060:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004064:	f7ff fb56 	bl	8003714 <RCCEx_PLL3_Config>
 8004068:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800406c:	2800      	cmp	r0, #0
 800406e:	f43f ad9a 	beq.w	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        status = HAL_ERROR;
 8004072:	2601      	movs	r6, #1
 8004074:	e597      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004076:	2100      	movs	r1, #0
 8004078:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800407c:	f7ff fb4a 	bl	8003714 <RCCEx_PLL3_Config>
 8004080:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004082:	2d00      	cmp	r5, #0
 8004084:	f47f ac3a 	bne.w	80038fc <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004088:	4a04      	ldr	r2, [pc, #16]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800408a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800408e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004090:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004094:	430b      	orrs	r3, r1
 8004096:	6593      	str	r3, [r2, #88]	; 0x58
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	e431      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800409c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040a0:	2100      	movs	r1, #0
 80040a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040a6:	f7ff fb35 	bl	8003714 <RCCEx_PLL3_Config>
 80040aa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80040ac:	2d00      	cmp	r5, #0
 80040ae:	f47f ac4f 	bne.w	8003950 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040b2:	4a90      	ldr	r2, [pc, #576]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 80040b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80040b6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80040b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040bc:	430b      	orrs	r3, r1
 80040be:	6513      	str	r3, [r2, #80]	; 0x50
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	e447      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x148>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040c4:	2102      	movs	r1, #2
 80040c6:	3004      	adds	r0, #4
 80040c8:	f7ff faa8 	bl	800361c <RCCEx_PLL2_Config>
 80040cc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80040ce:	2e00      	cmp	r6, #0
 80040d0:	f47f abb9 	bne.w	8003846 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80040d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040d6:	f7ff bbaf 	b.w	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040da:	2100      	movs	r1, #0
 80040dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040e0:	f7ff fb18 	bl	8003714 <RCCEx_PLL3_Config>
 80040e4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80040e6:	2d00      	cmp	r5, #0
 80040e8:	f47f abed 	bne.w	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80040ec:	4a81      	ldr	r2, [pc, #516]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 80040ee:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80040f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80040f4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6593      	str	r3, [r2, #88]	; 0x58
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	f7ff bbe4 	b.w	80038ca <HAL_RCCEx_PeriphCLKConfig+0xbe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004102:	2100      	movs	r1, #0
 8004104:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004108:	f7ff fb04 	bl	8003714 <RCCEx_PLL3_Config>
 800410c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800410e:	2d00      	cmp	r5, #0
 8004110:	f47f abbe 	bne.w	8003890 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004114:	4a77      	ldr	r2, [pc, #476]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8004116:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004118:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800411a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800411e:	430b      	orrs	r3, r1
 8004120:	6513      	str	r3, [r2, #80]	; 0x50
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	f7ff bbb6 	b.w	8003894 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004128:	4a72      	ldr	r2, [pc, #456]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 800412a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800412c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004130:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004132:	f7ff bbaa 	b.w	800388a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004136:	4a6f      	ldr	r2, [pc, #444]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8004138:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800413a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800413e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004140:	f7ff bbd9 	b.w	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004144:	2102      	movs	r1, #2
 8004146:	3024      	adds	r0, #36	; 0x24
 8004148:	f7ff fae4 	bl	8003714 <RCCEx_PLL3_Config>
 800414c:	4606      	mov	r6, r0
      break;
 800414e:	e7be      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004150:	4a68      	ldr	r2, [pc, #416]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8004152:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004158:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800415a:	f7ff bbb1 	b.w	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800415e:	4a65      	ldr	r2, [pc, #404]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8004160:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004166:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004168:	f7ff bbef 	b.w	800394a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800416c:	1d20      	adds	r0, r4, #4
 800416e:	f7ff fa55 	bl	800361c <RCCEx_PLL2_Config>
 8004172:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004174:	2d00      	cmp	r5, #0
 8004176:	f43f ae50 	beq.w	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x60e>
 800417a:	e695      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800417c:	4a5d      	ldr	r2, [pc, #372]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 800417e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004184:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004186:	2d00      	cmp	r5, #0
 8004188:	f43f ae58 	beq.w	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x630>
 800418c:	e66b      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x65a>
            ret = HAL_TIMEOUT;
 800418e:	2603      	movs	r6, #3
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	4635      	mov	r5, r6
 8004194:	e43c      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x204>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004196:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800419a:	f43f ac0d 	beq.w	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800419e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80041a2:	f43f ac09 	beq.w	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80041a6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80041aa:	f43f ac05 	beq.w	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      ret = HAL_ERROR;
 80041ae:	2601      	movs	r6, #1
 80041b0:	4635      	mov	r5, r6
 80041b2:	e40d      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80041b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80041b8:	f43f acd2 	beq.w	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80041bc:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 80041c0:	f43f acce 	beq.w	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80041c4:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80041c8:	f43f acca 	beq.w	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x354>
      ret = HAL_ERROR;
 80041cc:	2601      	movs	r6, #1
 80041ce:	4635      	mov	r5, r6
 80041d0:	e4d2      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80041d2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80041d6:	f43f ac83 	beq.w	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80041da:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80041de:	f43f ac7f 	beq.w	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80041e2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80041e6:	f43f ac7b 	beq.w	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      ret = HAL_ERROR;
 80041ea:	2601      	movs	r6, #1
 80041ec:	4635      	mov	r5, r6
 80041ee:	e483      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80041f0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80041f4:	f43f ac94 	beq.w	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80041f8:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80041fc:	f43f ac90 	beq.w	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004200:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004204:	f43f ac8c 	beq.w	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = HAL_ERROR;
 8004208:	2601      	movs	r6, #1
 800420a:	4635      	mov	r5, r6
 800420c:	e494      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi45ClockSelection)
 800420e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8004212:	f43f abb2 	beq.w	800397a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004216:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800421a:	f43f abae 	beq.w	800397a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800421e:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8004222:	f43f abaa 	beq.w	800397a <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = HAL_ERROR;
 8004226:	2601      	movs	r6, #1
 8004228:	4635      	mov	r5, r6
 800422a:	f7ff bbb1 	b.w	8003990 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Sai23ClockSelection)
 800422e:	2ac0      	cmp	r2, #192	; 0xc0
 8004230:	f43f ab2b 	beq.w	800388a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004234:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004238:	f43f ab27 	beq.w	800388a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 800423c:	2601      	movs	r6, #1
 800423e:	4635      	mov	r5, r6
 8004240:	f7ff bb28 	b.w	8003894 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004244:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8004248:	f43f ab7f 	beq.w	800394a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800424c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004250:	f43f ab7b 	beq.w	800394a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = HAL_ERROR;
 8004254:	2601      	movs	r6, #1
 8004256:	4635      	mov	r5, r6
 8004258:	f7ff bb7c 	b.w	8003954 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800425c:	bb22      	cbnz	r2, 80042a8 <HAL_RCCEx_PeriphCLKConfig+0xa9c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425e:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8004260:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004266:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004268:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800426a:	f7ff bae5 	b.w	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai4BClockSelection)
 800426e:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8004272:	f43f ab40 	beq.w	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8004276:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800427a:	f43f ab3c 	beq.w	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = HAL_ERROR;
 800427e:	2601      	movs	r6, #1
 8004280:	4635      	mov	r5, r6
 8004282:	f7ff bb3d 	b.w	8003900 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004286:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800428a:	f43f ab19 	beq.w	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800428e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004292:	f43f ab15 	beq.w	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = HAL_ERROR;
 8004296:	2601      	movs	r6, #1
 8004298:	4635      	mov	r5, r6
 800429a:	f7ff bb16 	b.w	80038ca <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->QspiClockSelection)
 800429e:	2a00      	cmp	r2, #0
 80042a0:	f43f ae71 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x77a>
 80042a4:	f7ff bb3a 	b.w	800391c <HAL_RCCEx_PeriphCLKConfig+0x110>
      ret = HAL_ERROR;
 80042a8:	2601      	movs	r6, #1
 80042aa:	f7ff bacd 	b.w	8003848 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        tickstart = HAL_GetTick();
 80042ae:	f7fc f877 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042b2:	4f10      	ldr	r7, [pc, #64]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
        tickstart = HAL_GetTick();
 80042b4:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ba:	e006      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xabe>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042bc:	f7fc f870 	bl	80003a0 <HAL_GetTick>
 80042c0:	eba0 0009 	sub.w	r0, r0, r9
 80042c4:	4540      	cmp	r0, r8
 80042c6:	f63f af62 	bhi.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x982>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042cc:	079b      	lsls	r3, r3, #30
 80042ce:	d5f5      	bpl.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80042d0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80042d4:	e55e      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x588>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d6:	4807      	ldr	r0, [pc, #28]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 80042d8:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 80042da:	6901      	ldr	r1, [r0, #16]
 80042dc:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 80042e0:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 80042e4:	4313      	orrs	r3, r2
 80042e6:	6103      	str	r3, [r0, #16]
 80042e8:	e55f      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80042ea:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80042ec:	462e      	mov	r6, r5
 80042ee:	f7ff bb8f 	b.w	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80042f2:	bf00      	nop
 80042f4:	58024400 	.word	0x58024400
 80042f8:	00ffffcf 	.word	0x00ffffcf

080042fc <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042fc:	4a46      	ldr	r2, [pc, #280]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 80042fe:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004300:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004302:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004304:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004306:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800430a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800430c:	2b00      	cmp	r3, #0
 800430e:	d059      	beq.n	80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004310:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004314:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004318:	f004 0403 	and.w	r4, r4, #3
 800431c:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004320:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8004324:	2c01      	cmp	r4, #1
 8004326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800432a:	ee06 1a90 	vmov	s13, r1
 800432e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004332:	d002      	beq.n	800433a <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8004334:	d34e      	bcc.n	80043d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8004336:	2c02      	cmp	r4, #2
 8004338:	d049      	beq.n	80043ce <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800433a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800441c <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 800433e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004342:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004348:	ee07 3a10 	vmov	s14, r3
 800434c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004350:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004354:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004358:	ee77 7a26 	vadd.f32	s15, s14, s13
 800435c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004360:	4a2d      	ldr	r2, [pc, #180]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 8004362:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004366:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004368:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800436c:	ee06 3a90 	vmov	s13, r3
 8004370:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8004374:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004376:	ee76 6a86 	vadd.f32	s13, s13, s12
 800437a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800437e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004382:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004386:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004388:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800438c:	ee06 3a90 	vmov	s13, r3
 8004390:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004394:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004398:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800439c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80043a0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80043a4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80043a6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80043aa:	ee07 3a10 	vmov	s14, r3
 80043ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80043b2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80043b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80043ba:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80043be:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80043c2:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80043c4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80043c8:	6083      	str	r3, [r0, #8]
}
 80043ca:	bc30      	pop	{r4, r5}
 80043cc:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043ce:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004420 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80043d2:	e7b4      	b.n	800433e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043d4:	6813      	ldr	r3, [r2, #0]
 80043d6:	069b      	lsls	r3, r3, #26
 80043d8:	d51a      	bpl.n	8004410 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043da:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043dc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043e0:	4910      	ldr	r1, [pc, #64]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 80043e2:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043e6:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043e8:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	ee07 1a10 	vmov	s14, r1
 80043f2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80043f6:	ee07 3a10 	vmov	s14, r3
 80043fa:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80043fe:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004402:	ee76 7a05 	vadd.f32	s15, s12, s10
 8004406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440e:	e7a7      	b.n	8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004410:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8004414:	e793      	b.n	800433e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8004416:	bf00      	nop
 8004418:	58024400 	.word	0x58024400
 800441c:	4a742400 	.word	0x4a742400
 8004420:	4bbebc20 	.word	0x4bbebc20
 8004424:	03d09000 	.word	0x03d09000
 8004428:	4c742400 	.word	0x4c742400

0800442c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800442c:	4a46      	ldr	r2, [pc, #280]	; (8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 800442e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004430:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004432:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004434:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004436:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800443a:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800443c:	2b00      	cmp	r3, #0
 800443e:	d059      	beq.n	80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004440:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004444:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004448:	f004 0403 	and.w	r4, r4, #3
 800444c:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004450:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8004454:	2c01      	cmp	r4, #1
 8004456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800445a:	ee06 1a90 	vmov	s13, r1
 800445e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004462:	d002      	beq.n	800446a <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 8004464:	d34e      	bcc.n	8004504 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8004466:	2c02      	cmp	r4, #2
 8004468:	d049      	beq.n	80044fe <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800446a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800454c <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 800446e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004472:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004478:	ee07 3a10 	vmov	s14, r3
 800447c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004480:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004484:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004488:	ee77 7a26 	vadd.f32	s15, s14, s13
 800448c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004490:	4a2d      	ldr	r2, [pc, #180]	; (8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 8004492:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004496:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004498:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800449c:	ee06 3a90 	vmov	s13, r3
 80044a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80044a4:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80044a6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80044aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80044ae:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80044b2:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80044b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80044b8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80044bc:	ee06 3a90 	vmov	s13, r3
 80044c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80044c4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80044c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80044cc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80044d0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80044d4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80044d6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80044da:	ee07 3a10 	vmov	s14, r3
 80044de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80044e2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80044e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80044ea:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80044ee:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80044f2:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80044f4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80044f8:	6083      	str	r3, [r0, #8]
}
 80044fa:	bc30      	pop	{r4, r5}
 80044fc:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044fe:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8004502:	e7b4      	b.n	800446e <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004504:	6813      	ldr	r3, [r2, #0]
 8004506:	069b      	lsls	r3, r3, #26
 8004508:	d51a      	bpl.n	8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800450a:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800450c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004510:	4910      	ldr	r1, [pc, #64]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8004512:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004516:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004518:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451e:	ee07 1a10 	vmov	s14, r1
 8004522:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004526:	ee07 3a10 	vmov	s14, r3
 800452a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800452e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004532:	ee76 7a05 	vadd.f32	s15, s12, s10
 8004536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	e7a7      	b.n	8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004540:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004558 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8004544:	e793      	b.n	800446e <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8004546:	bf00      	nop
 8004548:	58024400 	.word	0x58024400
 800454c:	4a742400 	.word	0x4a742400
 8004550:	4bbebc20 	.word	0x4bbebc20
 8004554:	03d09000 	.word	0x03d09000
 8004558:	4c742400 	.word	0x4c742400

0800455c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800455c:	4a46      	ldr	r2, [pc, #280]	; (8004678 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 800455e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004560:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004562:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004564:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004566:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800456a:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 800456c:	2b00      	cmp	r3, #0
 800456e:	d059      	beq.n	8004624 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004570:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004574:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004578:	f004 0403 	and.w	r4, r4, #3
 800457c:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004580:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8004584:	2c01      	cmp	r4, #1
 8004586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800458a:	ee06 1a90 	vmov	s13, r1
 800458e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004592:	d002      	beq.n	800459a <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 8004594:	d34e      	bcc.n	8004634 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8004596:	2c02      	cmp	r4, #2
 8004598:	d049      	beq.n	800462e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800459a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800467c <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 800459e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80045a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80045a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a8:	ee07 3a10 	vmov	s14, r3
 80045ac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80045b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80045b4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80045b8:	ee77 7a26 	vadd.f32	s15, s14, s13
 80045bc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80045c0:	4a2d      	ldr	r2, [pc, #180]	; (8004678 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 80045c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80045c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80045c8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80045cc:	ee06 3a90 	vmov	s13, r3
 80045d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80045d4:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80045d6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80045da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80045de:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80045e2:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80045e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80045e8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80045ec:	ee06 3a90 	vmov	s13, r3
 80045f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80045f4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80045f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80045fc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004600:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004604:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004606:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800460a:	ee07 3a10 	vmov	s14, r3
 800460e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004612:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004616:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800461a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800461e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004622:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004624:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004628:	6083      	str	r3, [r0, #8]
}
 800462a:	bc30      	pop	{r4, r5}
 800462c:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800462e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004680 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8004632:	e7b4      	b.n	800459e <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004634:	6813      	ldr	r3, [r2, #0]
 8004636:	069b      	lsls	r3, r3, #26
 8004638:	d51a      	bpl.n	8004670 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800463a:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800463c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004640:	4910      	ldr	r1, [pc, #64]	; (8004684 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8004642:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004646:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004648:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 1a10 	vmov	s14, r1
 8004652:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004656:	ee07 3a10 	vmov	s14, r3
 800465a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800465e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004662:	ee76 7a05 	vadd.f32	s15, s12, s10
 8004666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466e:	e7a7      	b.n	80045c0 <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004670:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004688 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8004674:	e793      	b.n	800459e <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 8004676:	bf00      	nop
 8004678:	58024400 	.word	0x58024400
 800467c:	4a742400 	.word	0x4a742400
 8004680:	4bbebc20 	.word	0x4bbebc20
 8004684:	03d09000 	.word	0x03d09000
 8004688:	4c742400 	.word	0x4c742400

0800468c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800468c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8004690:	b500      	push	{lr}
 8004692:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004694:	d02d      	beq.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004696:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800469a:	d018      	beq.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800469c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80046a0:	d04e      	beq.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80046a2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80046a6:	d037      	beq.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80046a8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80046ac:	f000 808b 	beq.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80046b0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80046b4:	f000 80ac 	beq.w	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80046b8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80046bc:	f000 80b6 	beq.w	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80046c0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80046c4:	d062      	beq.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 80046c6:	2000      	movs	r0, #0
}
 80046c8:	b005      	add	sp, #20
 80046ca:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80046ce:	4a70      	ldr	r2, [pc, #448]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80046d0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80046d2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 80046d6:	2b80      	cmp	r3, #128	; 0x80
 80046d8:	d043      	beq.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80046da:	d86a      	bhi.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d039      	beq.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	d1f0      	bne.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046e4:	a801      	add	r0, sp, #4
 80046e6:	f7ff fe09 	bl	80042fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046ea:	9801      	ldr	r0, [sp, #4]
}
 80046ec:	b005      	add	sp, #20
 80046ee:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80046f2:	4b67      	ldr	r3, [pc, #412]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80046f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f6:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d8e3      	bhi.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80046fe:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004755 	.word	0x08004755
 8004708:	080046e5 	.word	0x080046e5
 800470c:	08004763 	.word	0x08004763
 8004710:	08004739 	.word	0x08004739
 8004714:	08004771 	.word	0x08004771
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004718:	4a5d      	ldr	r2, [pc, #372]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800471a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800471c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8004720:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004724:	d01d      	beq.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004726:	d85c      	bhi.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8004728:	b1a3      	cbz	r3, 8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800472a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800472e:	d0d9      	beq.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8004730:	e7c9      	b.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8004732:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004736:	d15b      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004738:	4856      	ldr	r0, [pc, #344]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 800473a:	b005      	add	sp, #20
 800473c:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004740:	4a53      	ldr	r2, [pc, #332]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004742:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004744:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8004748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800474c:	d009      	beq.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800474e:	d8f0      	bhi.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d151      	bne.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004754:	a801      	add	r0, sp, #4
 8004756:	f7ff ff01 	bl	800455c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800475a:	9802      	ldr	r0, [sp, #8]
}
 800475c:	b005      	add	sp, #20
 800475e:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004762:	a801      	add	r0, sp, #4
 8004764:	f7ff fe62 	bl	800442c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004768:	9801      	ldr	r0, [sp, #4]
}
 800476a:	b005      	add	sp, #20
 800476c:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004770:	4b47      	ldr	r3, [pc, #284]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004774:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004778:	d019      	beq.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800477a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800477e:	d062      	beq.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 8004780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004784:	4844      	ldr	r0, [pc, #272]	; (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8004786:	bf18      	it	ne
 8004788:	2000      	movne	r0, #0
 800478a:	e79d      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800478c:	4b40      	ldr	r3, [pc, #256]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800478e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004790:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8004794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004798:	d068      	beq.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800479a:	d95b      	bls.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 800479c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a0:	d051      	beq.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80047a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047a6:	d05f      	beq.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80047a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047ac:	d18b      	bne.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 80047ae:	483b      	ldr	r0, [pc, #236]	; (800489c <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 80047b0:	e78a      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 80047b2:	2bc0      	cmp	r3, #192	; 0xc0
 80047b4:	d0c0      	beq.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80047b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ba:	d184      	bne.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80047bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80047be:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80047c2:	d1da      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80047c4:	e7f3      	b.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80047c6:	4a32      	ldr	r2, [pc, #200]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80047c8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80047ca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80047ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d2:	d0c6      	beq.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80047d4:	d815      	bhi.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0bc      	beq.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d081      	beq.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80047e0:	e771      	b.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 80047e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047e6:	d0a7      	beq.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80047e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ec:	d0e6      	beq.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80047ee:	e76a      	b.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 80047f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047f4:	d0e2      	beq.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80047f6:	e766      	b.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047fc:	f43f af72 	beq.w	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8004800:	e761      	b.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 8004802:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004806:	d097      	beq.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8004808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800480c:	d0d6      	beq.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800480e:	e75a      	b.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004810:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004812:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8004818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481c:	d015      	beq.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800481e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004822:	d0cb      	beq.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8004824:	2b00      	cmp	r3, #0
 8004826:	f47f af4e 	bne.w	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800482a:	e75b      	b.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800482c:	4b18      	ldr	r3, [pc, #96]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800482e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8004830:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004834:	d08e      	beq.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8004836:	2b00      	cmp	r3, #0
 8004838:	f43f af45 	beq.w	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800483c:	a801      	add	r0, sp, #4
 800483e:	f7ff fd5d 	bl	80042fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004842:	9803      	ldr	r0, [sp, #12]
          break;
 8004844:	e740      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 8004846:	4816      	ldr	r0, [pc, #88]	; (80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8004848:	e73e      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800484a:	a801      	add	r0, sp, #4
 800484c:	f7ff fdee 	bl	800442c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004850:	9803      	ldr	r0, [sp, #12]
          break;
 8004852:	e739      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8004854:	b17b      	cbz	r3, 8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800485a:	f47f af34 	bne.w	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800485e:	a801      	add	r0, sp, #4
 8004860:	f7ff fd4c 	bl	80042fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004864:	9802      	ldr	r0, [sp, #8]
          break;
 8004866:	e72f      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 8004868:	480b      	ldr	r0, [pc, #44]	; (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 800486a:	e72d      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800486c:	a801      	add	r0, sp, #4
 800486e:	f7ff fddd 	bl	800442c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004872:	9802      	ldr	r0, [sp, #8]
          break;
 8004874:	e728      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004876:	f7fe fe29 	bl	80034cc <HAL_RCC_GetHCLKFreq>
 800487a:	4b05      	ldr	r3, [pc, #20]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800487c:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004884:	5cd3      	ldrb	r3, [r2, r3]
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	40d8      	lsrs	r0, r3
          break;
 800488c:	e71c      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800488e:	bf00      	nop
 8004890:	58024400 	.word	0x58024400
 8004894:	00bb8000 	.word	0x00bb8000
 8004898:	017d7840 	.word	0x017d7840
 800489c:	03d09000 	.word	0x03d09000
 80048a0:	003d0900 	.word	0x003d0900
 80048a4:	0800bca4 	.word	0x0800bca4

080048a8 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80048a8:	b390      	cbz	r0, 8004910 <HAL_RNG_Init+0x68>
{
 80048aa:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80048ac:	7a43      	ldrb	r3, [r0, #9]
 80048ae:	4604      	mov	r4, r0
 80048b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80048b4:	b343      	cbz	r3, 8004908 <HAL_RNG_Init+0x60>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80048b6:	2302      	movs	r3, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80048b8:	e9d4 2100 	ldrd	r2, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 80048bc:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80048be:	6813      	ldr	r3, [r2, #0]
 80048c0:	f023 0320 	bic.w	r3, r3, #32
 80048c4:	430b      	orrs	r3, r1
 80048c6:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80048c8:	6822      	ldr	r2, [r4, #0]
 80048ca:	6813      	ldr	r3, [r2, #0]
 80048cc:	f043 0304 	orr.w	r3, r3, #4
 80048d0:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	065b      	lsls	r3, r3, #25
 80048d8:	d503      	bpl.n	80048e2 <HAL_RNG_Init+0x3a>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80048da:	2304      	movs	r3, #4
    return HAL_ERROR;
 80048dc:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 80048de:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 80048e0:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 80048e2:	f7fb fd5d 	bl	80003a0 <HAL_GetTick>
 80048e6:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80048e8:	e004      	b.n	80048f4 <HAL_RNG_Init+0x4c>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80048ea:	f7fb fd59 	bl	80003a0 <HAL_GetTick>
 80048ee:	1b40      	subs	r0, r0, r5
 80048f0:	2802      	cmp	r0, #2
 80048f2:	d80f      	bhi.n	8004914 <HAL_RNG_Init+0x6c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f013 0304 	ands.w	r3, r3, #4
 80048fc:	d1f5      	bne.n	80048ea <HAL_RNG_Init+0x42>
  hrng->State = HAL_RNG_STATE_READY;
 80048fe:	2201      	movs	r2, #1
  return HAL_OK;
 8004900:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8004902:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004904:	60e3      	str	r3, [r4, #12]
}
 8004906:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8004908:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800490a:	f004 fa4b 	bl	8008da4 <HAL_RNG_MspInit>
 800490e:	e7d2      	b.n	80048b6 <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 8004910:	2001      	movs	r0, #1
}
 8004912:	4770      	bx	lr
      hrng->State = HAL_RNG_STATE_ERROR;
 8004914:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004916:	2302      	movs	r3, #2
      return HAL_ERROR;
 8004918:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 800491a:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800491c:	60e3      	str	r3, [r4, #12]
}
 800491e:	bd38      	pop	{r3, r4, r5, pc}

08004920 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004922:	7a03      	ldrb	r3, [r0, #8]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d00b      	beq.n	8004940 <HAL_RNG_GenerateRandomNumber+0x20>
 8004928:	4604      	mov	r4, r0
 800492a:	2001      	movs	r0, #1
 800492c:	460e      	mov	r6, r1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800492e:	7a63      	ldrb	r3, [r4, #9]
  __HAL_LOCK(hrng);
 8004930:	7220      	strb	r0, [r4, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8004932:	4283      	cmp	r3, r0
 8004934:	d006      	beq.n	8004944 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004936:	2304      	movs	r3, #4
 8004938:	60e3      	str	r3, [r4, #12]
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800493a:	2300      	movs	r3, #0
 800493c:	7223      	strb	r3, [r4, #8]

  return status;
}
 800493e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng);
 8004940:	2002      	movs	r0, #2
}
 8004942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8004944:	2302      	movs	r3, #2
 8004946:	7263      	strb	r3, [r4, #9]
    tickstart = HAL_GetTick();
 8004948:	f7fb fd2a 	bl	80003a0 <HAL_GetTick>
 800494c:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800494e:	e004      	b.n	800495a <HAL_RNG_GenerateRandomNumber+0x3a>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004950:	f7fb fd26 	bl	80003a0 <HAL_GetTick>
 8004954:	1bc0      	subs	r0, r0, r7
 8004956:	2802      	cmp	r0, #2
 8004958:	d80b      	bhi.n	8004972 <HAL_RNG_GenerateRandomNumber+0x52>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	6855      	ldr	r5, [r2, #4]
 800495e:	f015 0501 	ands.w	r5, r5, #1
 8004962:	d0f5      	beq.n	8004950 <HAL_RNG_GenerateRandomNumber+0x30>
    hrng->RandomNumber = hrng->Instance->DR;
 8004964:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 8004966:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8004968:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 800496a:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800496c:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800496e:	7262      	strb	r2, [r4, #9]
 8004970:	e7e3      	b.n	800493a <HAL_RNG_GenerateRandomNumber+0x1a>
        hrng->State = HAL_RNG_STATE_READY;
 8004972:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004974:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 8004976:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 8004978:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800497a:	60e3      	str	r3, [r4, #12]
}
 800497c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800497e:	bf00      	nop

08004980 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004982:	2904      	cmp	r1, #4
 8004984:	d813      	bhi.n	80049ae <HAL_SAI_InitProtocol+0x2e>
 8004986:	e8df f001 	tbb	[pc, r1]
 800498a:	3535      	.short	0x3535
 800498c:	1435      	.short	0x1435
 800498e:	14          	.byte	0x14
 800498f:	00          	.byte	0x00
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8004990:	4a8b      	ldr	r2, [pc, #556]	; (8004bc0 <HAL_SAI_InitProtocol+0x240>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d005      	beq.n	80049a2 <HAL_SAI_InitProtocol+0x22>
 8004996:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800499a:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800499e:	4293      	cmp	r3, r2
 80049a0:	d105      	bne.n	80049ae <HAL_SAI_InitProtocol+0x2e>
 80049a2:	6862      	ldr	r2, [r4, #4]
 80049a4:	2a01      	cmp	r2, #1
 80049a6:	d102      	bne.n	80049ae <HAL_SAI_InitProtocol+0x2e>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80049a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80049aa:	2a00      	cmp	r2, #0
 80049ac:	d053      	beq.n	8004a56 <HAL_SAI_InitProtocol+0xd6>
  hsai->SlotInit.SlotNumber      = nbslot;

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
  {
    return HAL_ERROR;
 80049ae:	2001      	movs	r0, #1
}
 80049b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049b2:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80049b4:	2400      	movs	r4, #0
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80049b6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
  hsai->SlotInit.FirstBitOffset  = 0;
  hsai->SlotInit.SlotNumber      = nbslot;
 80049ba:	6703      	str	r3, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049bc:	f035 0502 	bics.w	r5, r5, #2
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80049c0:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80049c4:	6444      	str	r4, [r0, #68]	; 0x44
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049c6:	bf0c      	ite	eq
 80049c8:	2701      	moveq	r7, #1
 80049ca:	4627      	movne	r7, r4
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;

  if (protocol == SAI_PCM_SHORT)
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 80049cc:	2904      	cmp	r1, #4
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80049ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049d2:	6507      	str	r7, [r0, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 1;
 80049d4:	bf14      	ite	ne
 80049d6:	270d      	movne	r7, #13
 80049d8:	2701      	moveq	r7, #1
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80049da:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80049dc:	65c4      	str	r4, [r0, #92]	; 0x5c
 80049de:	6587      	str	r7, [r0, #88]	; 0x58
  hsai->SlotInit.FirstBitOffset  = 0;
 80049e0:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80049e2:	6741      	str	r1, [r0, #116]	; 0x74
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80049e4:	e9c0 6518 	strd	r6, r5, [r0, #96]	; 0x60
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
  }

  switch (datasize)
 80049e8:	2a03      	cmp	r2, #3
 80049ea:	d8e0      	bhi.n	80049ae <HAL_SAI_InitProtocol+0x2e>
 80049ec:	e8df f002 	tbb	[pc, r2]
 80049f0:	259e9197 	.word	0x259e9197
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049f4:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80049f6:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 80049f8:	6703      	str	r3, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049fa:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80049fe:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004a00:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004a02:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a06:	bf08      	it	eq
 8004a08:	4626      	moveq	r6, r4
  hsai->SlotInit.FirstBitOffset  = 0;
 8004a0a:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004a0c:	f64f 74ff 	movw	r4, #65535	; 0xffff
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a10:	bf18      	it	ne
 8004a12:	2601      	movne	r6, #1
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004a14:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004a16:	6744      	str	r4, [r0, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 8004a18:	f013 0401 	ands.w	r4, r3, #1
 8004a1c:	6506      	str	r6, [r0, #80]	; 0x50
 8004a1e:	d1c6      	bne.n	80049ae <HAL_SAI_InitProtocol+0x2e>
  if (protocol == SAI_I2S_STANDARD)
 8004a20:	2900      	cmp	r1, #0
 8004a22:	f000 808a 	beq.w	8004b3a <HAL_SAI_InitProtocol+0x1ba>
 8004a26:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8004a2a:	e9c0 5418 	strd	r5, r4, [r0, #96]	; 0x60
  switch (datasize)
 8004a2e:	2a03      	cmp	r2, #3
 8004a30:	d8bd      	bhi.n	80049ae <HAL_SAI_InitProtocol+0x2e>
 8004a32:	e8df f002 	tbb	[pc, r2]
 8004a36:	a0b0      	.short	0xa0b0
 8004a38:	ba8f      	.short	0xba8f
      hsai->FrameInit.FrameLength = 32U * nbslot;
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
      break;
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004a3a:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004a3c:	21e0      	movs	r1, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004a3e:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004a40:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004a42:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004a44:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004a46:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004a48:	f7fb fcc2 	bl	80003d0 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004a4c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004a50:	2b01      	cmp	r3, #1
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8004a52:	6823      	ldr	r3, [r4, #0]
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004a54:	d09c      	beq.n	8004990 <HAL_SAI_InitProtocol+0x10>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a56:	4a5a      	ldr	r2, [pc, #360]	; (8004bc0 <HAL_SAI_InitProtocol+0x240>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d079      	beq.n	8004b50 <HAL_SAI_InitProtocol+0x1d0>
 8004a5c:	3220      	adds	r2, #32
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d076      	beq.n	8004b50 <HAL_SAI_InitProtocol+0x1d0>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004a62:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8004a66:	4293      	cmp	r3, r2
 8004a68:	f000 819b 	beq.w	8004da2 <HAL_SAI_InitProtocol+0x422>
 8004a6c:	3220      	adds	r2, #32
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	f000 8197 	beq.w	8004da2 <HAL_SAI_InitProtocol+0x422>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004a74:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	f000 81c3 	beq.w	8004e04 <HAL_SAI_InitProtocol+0x484>
 8004a7e:	3220      	adds	r2, #32
 8004a80:	4293      	cmp	r3, r2
 8004a82:	f000 81bf 	beq.w	8004e04 <HAL_SAI_InitProtocol+0x484>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8004a86:	4a4f      	ldr	r2, [pc, #316]	; (8004bc4 <HAL_SAI_InitProtocol+0x244>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d002      	beq.n	8004a92 <HAL_SAI_InitProtocol+0x112>
 8004a8c:	3220      	adds	r2, #32
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d18d      	bne.n	80049ae <HAL_SAI_InitProtocol+0x2e>
    SaiBaseAddress = SAI4;
 8004a92:	4d4d      	ldr	r5, [pc, #308]	; (8004bc8 <HAL_SAI_InitProtocol+0x248>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8004a94:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
 8004a98:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8004a9c:	2a00      	cmp	r2, #0
 8004a9e:	f000 8179 	beq.w	8004d94 <HAL_SAI_InitProtocol+0x414>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004aa2:	4a4a      	ldr	r2, [pc, #296]	; (8004bcc <HAL_SAI_InitProtocol+0x24c>)
 8004aa4:	484a      	ldr	r0, [pc, #296]	; (8004bd0 <HAL_SAI_InitProtocol+0x250>)
 8004aa6:	6812      	ldr	r2, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004aa8:	6819      	ldr	r1, [r3, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004aaa:	fba0 0202 	umull	r0, r2, r0, r2
  __HAL_SAI_DISABLE(hsai);
 8004aae:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004ab2:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 8004ab4:	6019      	str	r1, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004ab6:	0093      	lsls	r3, r2, #2
 8004ab8:	2a00      	cmp	r2, #0
 8004aba:	f000 8163 	beq.w	8004d84 <HAL_SAI_InitProtocol+0x404>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004abe:	6821      	ldr	r1, [r4, #0]
    count--;
 8004ac0:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004ac2:	680a      	ldr	r2, [r1, #0]
 8004ac4:	03d7      	lsls	r7, r2, #15
 8004ac6:	d506      	bpl.n	8004ad6 <HAL_SAI_InitProtocol+0x156>
    if (count == 0U)
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 815b 	beq.w	8004d84 <HAL_SAI_InitProtocol+0x404>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004ace:	680a      	ldr	r2, [r1, #0]
    count--;
 8004ad0:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004ad2:	03d2      	lsls	r2, r2, #15
 8004ad4:	d4f8      	bmi.n	8004ac8 <HAL_SAI_InitProtocol+0x148>
  switch (hsai->Init.SynchroExt)
 8004ad6:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 8004ad8:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 8004ada:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 8004adc:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8004ae0:	f000 818b 	beq.w	8004dfa <HAL_SAI_InitProtocol+0x47a>
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	bf15      	itete	ne
 8004ae8:	4610      	movne	r0, r2
 8004aea:	2123      	moveq	r1, #35	; 0x23
 8004aec:	2103      	movne	r1, #3
 8004aee:	2022      	moveq	r0, #34	; 0x22
 8004af0:	bf0b      	itete	eq
 8004af2:	2621      	moveq	r6, #33	; 0x21
 8004af4:	2601      	movne	r6, #1
 8004af6:	2220      	moveq	r2, #32
 8004af8:	2200      	movne	r2, #0
  switch (hsai->Init.Synchro)
 8004afa:	68a3      	ldr	r3, [r4, #8]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	f200 813e 	bhi.w	8004d80 <HAL_SAI_InitProtocol+0x400>
 8004b04:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b08:	00690135 	.word	0x00690135
 8004b0c:	00680138 	.word	0x00680138
 8004b10:	018e      	.short	0x018e
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b12:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004b14:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b16:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004b18:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b1a:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004b1c:	e793      	b.n	8004a46 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004b1e:	011b      	lsls	r3, r3, #4
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b20:	2180      	movs	r1, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004b22:	2240      	movs	r2, #64	; 0x40
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004b24:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b26:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004b28:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004b2a:	e78c      	b.n	8004a46 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004b2c:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004b2e:	21c0      	movs	r1, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b30:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004b32:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004b34:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b36:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004b38:	e785      	b.n	8004a46 <HAL_SAI_InitProtocol+0xc6>
 8004b3a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004b3e:	e9c0 1418 	strd	r1, r4, [r0, #96]	; 0x60
  switch (datasize)
 8004b42:	2a03      	cmp	r2, #3
 8004b44:	f63f af33 	bhi.w	80049ae <HAL_SAI_InitProtocol+0x2e>
 8004b48:	e8df f002 	tbb	[pc, r2]
 8004b4c:	2f041525 	.word	0x2f041525
    SaiBaseAddress = SAI1;
 8004b50:	4d20      	ldr	r5, [pc, #128]	; (8004bd4 <HAL_SAI_InitProtocol+0x254>)
 8004b52:	e79f      	b.n	8004a94 <HAL_SAI_InitProtocol+0x114>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b54:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004b56:	25c0      	movs	r5, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b58:	2480      	movs	r4, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004b5a:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b5c:	ea4f 1283 	mov.w	r2, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004b60:	6485      	str	r5, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b62:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b66:	66c4      	str	r4, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b68:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004b6c:	f47f af6b 	bne.w	8004a46 <HAL_SAI_InitProtocol+0xc6>
      hsai->SlotInit.FirstBitOffset = 8;
 8004b70:	2308      	movs	r3, #8
 8004b72:	6683      	str	r3, [r0, #104]	; 0x68
 8004b74:	e767      	b.n	8004a46 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b76:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b78:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004b7a:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b7c:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b80:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b82:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b86:	66c2      	str	r2, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b88:	e9c0 4315 	strd	r4, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004b8c:	f47f af5b 	bne.w	8004a46 <HAL_SAI_InitProtocol+0xc6>
      hsai->SlotInit.FirstBitOffset = 16;
 8004b90:	2310      	movs	r3, #16
 8004b92:	6683      	str	r3, [r0, #104]	; 0x68
 8004b94:	e757      	b.n	8004a46 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004b96:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b98:	2480      	movs	r4, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004b9a:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004b9c:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b9e:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004ba0:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004ba2:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004ba4:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
 8004ba8:	e74d      	b.n	8004a46 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004baa:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004bac:	24e0      	movs	r4, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004bae:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004bb0:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004bb2:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004bb4:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004bb6:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004bb8:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
 8004bbc:	e743      	b.n	8004a46 <HAL_SAI_InitProtocol+0xc6>
 8004bbe:	bf00      	nop
 8004bc0:	40015804 	.word	0x40015804
 8004bc4:	58005404 	.word	0x58005404
 8004bc8:	58005400 	.word	0x58005400
 8004bcc:	20000038 	.word	0x20000038
 8004bd0:	95cbec1b 	.word	0x95cbec1b
 8004bd4:	40015800 	.word	0x40015800
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8004bd8:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004bda:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 8004bde:	602a      	str	r2, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004be0:	6a23      	ldr	r3, [r4, #32]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d04b      	beq.n	8004c7e <HAL_SAI_InitProtocol+0x2fe>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	4aa1      	ldr	r2, [pc, #644]	; (8004e70 <HAL_SAI_InitProtocol+0x4f0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	f000 812a 	beq.w	8004e44 <HAL_SAI_InitProtocol+0x4c4>
 8004bf0:	48a0      	ldr	r0, [pc, #640]	; (8004e74 <HAL_SAI_InitProtocol+0x4f4>)
 8004bf2:	1a18      	subs	r0, r3, r0
 8004bf4:	fab0 f080 	clz	r0, r0
 8004bf8:	0940      	lsrs	r0, r0, #5
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	f040 8122 	bne.w	8004e44 <HAL_SAI_InitProtocol+0x4c4>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004c00:	4a9d      	ldr	r2, [pc, #628]	; (8004e78 <HAL_SAI_InitProtocol+0x4f8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	f000 8118 	beq.w	8004e38 <HAL_SAI_InitProtocol+0x4b8>
 8004c08:	3220      	adds	r2, #32
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	f000 8114 	beq.w	8004e38 <HAL_SAI_InitProtocol+0x4b8>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004c10:	4a9a      	ldr	r2, [pc, #616]	; (8004e7c <HAL_SAI_InitProtocol+0x4fc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	f000 810a 	beq.w	8004e2c <HAL_SAI_InitProtocol+0x4ac>
 8004c18:	3220      	adds	r2, #32
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	f000 8106 	beq.w	8004e2c <HAL_SAI_InitProtocol+0x4ac>
    if (hsai->Instance == SAI4_Block_A)
 8004c20:	4a97      	ldr	r2, [pc, #604]	; (8004e80 <HAL_SAI_InitProtocol+0x500>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	f000 8119 	beq.w	8004e5a <HAL_SAI_InitProtocol+0x4da>
    if (hsai->Instance == SAI4_Block_B)
 8004c28:	4a96      	ldr	r2, [pc, #600]	; (8004e84 <HAL_SAI_InitProtocol+0x504>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	f000 8110 	beq.w	8004e50 <HAL_SAI_InitProtocol+0x4d0>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004c30:	69a3      	ldr	r3, [r4, #24]
 8004c32:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004c34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c38:	f000 80e6 	beq.w	8004e08 <HAL_SAI_InitProtocol+0x488>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004c3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004c3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c42:	6a22      	ldr	r2, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004c48:	ea4f 0340 	mov.w	r3, r0, lsl #1
 8004c4c:	ea4f 2002 	mov.w	r0, r2, lsl #8
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004c50:	bf14      	ite	ne
 8004c52:	2201      	movne	r2, #1
 8004c54:	2202      	moveq	r2, #2
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004c56:	fb02 f200 	mul.w	r2, r2, r0
 8004c5a:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 8004c5e:	4a8a      	ldr	r2, [pc, #552]	; (8004e88 <HAL_SAI_InitProtocol+0x508>)
 8004c60:	fba2 0203 	umull	r0, r2, r2, r3
 8004c64:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 8004c66:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8004c6a:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8004c6e:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 8004c70:	bf08      	it	eq
 8004c72:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004c74:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 8004c76:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004c78:	d101      	bne.n	8004c7e <HAL_SAI_InitProtocol+0x2fe>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004c7a:	0852      	lsrs	r2, r2, #1
 8004c7c:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004c7e:	6863      	ldr	r3, [r4, #4]
 8004c80:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004c82:	f033 0702 	bics.w	r7, r3, #2
 8004c86:	f040 80b2 	bne.w	8004dee <HAL_SAI_InitProtocol+0x46e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004c8a:	2a01      	cmp	r2, #1
 8004c8c:	bf18      	it	ne
 8004c8e:	f44f 7700 	movne.w	r7, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004c92:	f7fb fb9d 	bl	80003d0 <HAL_GetREVID>
 8004c96:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004c9a:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004c9c:	f0c0 8096 	bcc.w	8004dcc <HAL_SAI_InitProtocol+0x44c>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004ca0:	6811      	ldr	r1, [r2, #0]
 8004ca2:	4b7a      	ldr	r3, [pc, #488]	; (8004e8c <HAL_SAI_InitProtocol+0x50c>)
 8004ca4:	400b      	ands	r3, r1
 8004ca6:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004ca8:	6863      	ldr	r3, [r4, #4]
 8004caa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004cac:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	6962      	ldr	r2, [r4, #20]
 8004cb8:	4303      	orrs	r3, r0
 8004cba:	69a0      	ldr	r0, [r4, #24]
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	6922      	ldr	r2, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004cc4:	4303      	orrs	r3, r0
 8004cc6:	6820      	ldr	r0, [r4, #0]
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6801      	ldr	r1, [r0, #0]
 8004ccc:	4313      	orrs	r3, r2
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004cce:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004cd0:	430b      	orrs	r3, r1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004cd2:	f24f 0120 	movw	r1, #61472	; 0xf020
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004cd6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004cda:	4333      	orrs	r3, r6
 8004cdc:	433b      	orrs	r3, r7
 8004cde:	6003      	str	r3, [r0, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004ce0:	6826      	ldr	r6, [r4, #0]
 8004ce2:	4b6b      	ldr	r3, [pc, #428]	; (8004e90 <HAL_SAI_InitProtocol+0x510>)
 8004ce4:	6872      	ldr	r2, [r6, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004ce6:	486b      	ldr	r0, [pc, #428]	; (8004e94 <HAL_SAI_InitProtocol+0x514>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004ce8:	4013      	ands	r3, r2
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8004cea:	4a61      	ldr	r2, [pc, #388]	; (8004e70 <HAL_SAI_InitProtocol+0x4f0>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004cec:	6073      	str	r3, [r6, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004cee:	69e3      	ldr	r3, [r4, #28]
 8004cf0:	e9d4 760c 	ldrd	r7, r6, [r4, #48]	; 0x30
 8004cf4:	433b      	orrs	r3, r7
 8004cf6:	6827      	ldr	r7, [r4, #0]
 8004cf8:	4333      	orrs	r3, r6
 8004cfa:	687e      	ldr	r6, [r7, #4]
 8004cfc:	4333      	orrs	r3, r6
 8004cfe:	607b      	str	r3, [r7, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	689e      	ldr	r6, [r3, #8]
 8004d04:	4030      	ands	r0, r6
 8004d06:	6098      	str	r0, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004d08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d0a:	6827      	ldr	r7, [r4, #0]
 8004d0c:	e9d4 6017 	ldrd	r6, r0, [r4, #92]	; 0x5c
 8004d10:	4333      	orrs	r3, r6
 8004d12:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8004d14:	4303      	orrs	r3, r0
 8004d16:	68b8      	ldr	r0, [r7, #8]
 8004d18:	3e01      	subs	r6, #1
 8004d1a:	4303      	orrs	r3, r0
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004d1e:	4333      	orrs	r3, r6
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004d20:	3801      	subs	r0, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004d22:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004d26:	60bb      	str	r3, [r7, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004d28:	6820      	ldr	r0, [r4, #0]
 8004d2a:	68c3      	ldr	r3, [r0, #12]
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	60c3      	str	r3, [r0, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004d30:	6820      	ldr	r0, [r4, #0]
 8004d32:	e9d4 361a 	ldrd	r3, r6, [r4, #104]	; 0x68
 8004d36:	68c1      	ldr	r1, [r0, #12]
 8004d38:	4333      	orrs	r3, r6
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004d3a:	6f66      	ldr	r6, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004d3c:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004d3e:	6f21      	ldr	r1, [r4, #112]	; 0x70
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004d40:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004d44:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004d46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d4a:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d029      	beq.n	8004da6 <HAL_SAI_InitProtocol+0x426>
 8004d52:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8004d56:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d023      	beq.n	8004da6 <HAL_SAI_InitProtocol+0x426>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004d5e:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8004d60:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004d62:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 8004d66:	4618      	mov	r0, r3
  __HAL_UNLOCK(hsai);
 8004d68:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 8004d6c:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
}
 8004d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004d72:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004d76:	e732      	b.n	8004bde <HAL_SAI_InitProtocol+0x25e>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004d78:	4632      	mov	r2, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004d7a:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8004d7e:	e72e      	b.n	8004bde <HAL_SAI_InitProtocol+0x25e>
      syncen_bits = 0;
 8004d80:	2600      	movs	r6, #0
 8004d82:	e72c      	b.n	8004bde <HAL_SAI_InitProtocol+0x25e>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004d84:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 8004d88:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d8e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8004d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hsai->Lock = HAL_UNLOCKED;
 8004d94:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f004 f85b 	bl	8008e54 <HAL_SAI_MspInit>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	e67f      	b.n	8004aa2 <HAL_SAI_InitProtocol+0x122>
    SaiBaseAddress = SAI2;
 8004da2:	4d3d      	ldr	r5, [pc, #244]	; (8004e98 <HAL_SAI_InitProtocol+0x518>)
 8004da4:	e676      	b.n	8004a94 <HAL_SAI_InitProtocol+0x114>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8004da6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8004dae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d1d3      	bne.n	8004d5e <HAL_SAI_InitProtocol+0x3de>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004db6:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8004dba:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004dbc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004dc0:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8004dc2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004dc4:	f043 0301 	orr.w	r3, r3, #1
 8004dc8:	646b      	str	r3, [r5, #68]	; 0x44
 8004dca:	e7c8      	b.n	8004d5e <HAL_SAI_InitProtocol+0x3de>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004dcc:	6811      	ldr	r1, [r2, #0]
 8004dce:	4b33      	ldr	r3, [pc, #204]	; (8004e9c <HAL_SAI_InitProtocol+0x51c>)
 8004dd0:	400b      	ands	r3, r1
 8004dd2:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004dd4:	6863      	ldr	r3, [r4, #4]
 8004dd6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004dd8:	e9d4 2011 	ldrd	r2, r0, [r4, #68]	; 0x44
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004de0:	4303      	orrs	r3, r0
 8004de2:	6960      	ldr	r0, [r4, #20]
 8004de4:	430b      	orrs	r3, r1
 8004de6:	69a1      	ldr	r1, [r4, #24]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004dec:	e76a      	b.n	8004cc4 <HAL_SAI_InitProtocol+0x344>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004dee:	2a01      	cmp	r2, #1
 8004df0:	bf14      	ite	ne
 8004df2:	2700      	movne	r7, #0
 8004df4:	f44f 7700 	moveq.w	r7, #512	; 0x200
 8004df8:	e74b      	b.n	8004c92 <HAL_SAI_InitProtocol+0x312>
  switch (hsai->Init.SynchroExt)
 8004dfa:	2113      	movs	r1, #19
 8004dfc:	2012      	movs	r0, #18
 8004dfe:	2611      	movs	r6, #17
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004e00:	2210      	movs	r2, #16
 8004e02:	e67a      	b.n	8004afa <HAL_SAI_InitProtocol+0x17a>
    SaiBaseAddress = SAI3;
 8004e04:	4d26      	ldr	r5, [pc, #152]	; (8004ea0 <HAL_SAI_InitProtocol+0x520>)
 8004e06:	e645      	b.n	8004a94 <HAL_SAI_InitProtocol+0x114>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004e08:	2904      	cmp	r1, #4
 8004e0a:	d02c      	beq.n	8004e66 <HAL_SAI_InitProtocol+0x4e6>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004e0c:	2908      	cmp	r1, #8
 8004e0e:	d02c      	beq.n	8004e6a <HAL_SAI_InitProtocol+0x4ea>
        tmpframelength = hsai->FrameInit.FrameLength;
 8004e10:	6d67      	ldr	r7, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004e12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004e16:	6a22      	ldr	r2, [r4, #32]
 8004e18:	0043      	lsls	r3, r0, #1
 8004e1a:	fb02 f207 	mul.w	r2, r2, r7
 8004e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e22:	e71c      	b.n	8004c5e <HAL_SAI_InitProtocol+0x2de>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8004e24:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e26:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8004e2a:	e6d8      	b.n	8004bde <HAL_SAI_InitProtocol+0x25e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8004e2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e30:	f7ff fc2c 	bl	800468c <HAL_RCCEx_GetPeriphCLKFreq>
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	e6f3      	b.n	8004c20 <HAL_SAI_InitProtocol+0x2a0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004e38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e3c:	f7ff fc26 	bl	800468c <HAL_RCCEx_GetPeriphCLKFreq>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	e6e5      	b.n	8004c10 <HAL_SAI_InitProtocol+0x290>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004e44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004e48:	f7ff fc20 	bl	800468c <HAL_RCCEx_GetPeriphCLKFreq>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	e6d7      	b.n	8004c00 <HAL_SAI_InitProtocol+0x280>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8004e50:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e54:	f7ff fc1a 	bl	800468c <HAL_RCCEx_GetPeriphCLKFreq>
 8004e58:	e6ea      	b.n	8004c30 <HAL_SAI_InitProtocol+0x2b0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8004e5a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004e5e:	f7ff fc15 	bl	800468c <HAL_RCCEx_GetPeriphCLKFreq>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	e6e0      	b.n	8004c28 <HAL_SAI_InitProtocol+0x2a8>
        tmpframelength = 64U;
 8004e66:	2740      	movs	r7, #64	; 0x40
 8004e68:	e7d3      	b.n	8004e12 <HAL_SAI_InitProtocol+0x492>
        tmpframelength = 256U;
 8004e6a:	f44f 7780 	mov.w	r7, #256	; 0x100
 8004e6e:	e7d0      	b.n	8004e12 <HAL_SAI_InitProtocol+0x492>
 8004e70:	40015804 	.word	0x40015804
 8004e74:	40015824 	.word	0x40015824
 8004e78:	40015c04 	.word	0x40015c04
 8004e7c:	40016004 	.word	0x40016004
 8004e80:	58005404 	.word	0x58005404
 8004e84:	58005424 	.word	0x58005424
 8004e88:	cccccccd 	.word	0xcccccccd
 8004e8c:	f005c010 	.word	0xf005c010
 8004e90:	ffff1ff0 	.word	0xffff1ff0
 8004e94:	fff88000 	.word	0xfff88000
 8004e98:	40015c00 	.word	0x40015c00
 8004e9c:	f805c010 	.word	0xf805c010
 8004ea0:	40016000 	.word	0x40016000

08004ea4 <HAL_SAI_Transmit_DMA>:
{
 8004ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ea8:	460f      	mov	r7, r1
 8004eaa:	4604      	mov	r4, r0
 8004eac:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8004eae:	f7fb fa77 	bl	80003a0 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8004eb2:	2f00      	cmp	r7, #0
 8004eb4:	d064      	beq.n	8004f80 <HAL_SAI_Transmit_DMA+0xdc>
 8004eb6:	fab8 f588 	clz	r5, r8
 8004eba:	096d      	lsrs	r5, r5, #5
 8004ebc:	2d00      	cmp	r5, #0
 8004ebe:	d15f      	bne.n	8004f80 <HAL_SAI_Transmit_DMA+0xdc>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004ec0:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 8004ec4:	b2f6      	uxtb	r6, r6
 8004ec6:	2e01      	cmp	r6, #1
 8004ec8:	d156      	bne.n	8004f78 <HAL_SAI_Transmit_DMA+0xd4>
    __HAL_LOCK(hsai);
 8004eca:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d052      	beq.n	8004f78 <HAL_SAI_Transmit_DMA+0xd4>
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004ed2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004ed6:	2112      	movs	r1, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004ed8:	4a37      	ldr	r2, [pc, #220]	; (8004fb8 <HAL_SAI_Transmit_DMA+0x114>)
 8004eda:	4681      	mov	r9, r0
    hsai->pBuffPtr = pData;
 8004edc:	67a7      	str	r7, [r4, #120]	; 0x78
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004ede:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferSize = Size;
 8004ee2:	f8a4 807c 	strh.w	r8, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004ee6:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    __HAL_LOCK(hsai);
 8004eea:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->XferCount = Size;
 8004eee:	f8a4 807e 	strh.w	r8, [r4, #126]	; 0x7e
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004ef2:	4932      	ldr	r1, [pc, #200]	; (8004fbc <HAL_SAI_Transmit_DMA+0x118>)
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004ef4:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004ef6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004efa:	4a31      	ldr	r2, [pc, #196]	; (8004fc0 <HAL_SAI_Transmit_DMA+0x11c>)
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004efc:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004efe:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004f02:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8004f04:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004f08:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004f0a:	6822      	ldr	r2, [r4, #0]
 8004f0c:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8004f10:	321c      	adds	r2, #28
 8004f12:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004f14:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004f18:	f7fc fbf6 	bl	8001708 <HAL_DMA_Start_IT>
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d132      	bne.n	8004f88 <HAL_SAI_Transmit_DMA+0xe4>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004f22:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004f24:	6863      	ldr	r3, [r4, #4]
 8004f26:	2a08      	cmp	r2, #8
 8004f28:	d03c      	beq.n	8004fa4 <HAL_SAI_Transmit_DMA+0x100>
 8004f2a:	2005      	movs	r0, #5
 8004f2c:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004f2e:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004f30:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	bf88      	it	hi
 8004f36:	4602      	movhi	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004f38:	690b      	ldr	r3, [r1, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004f3e:	6822      	ldr	r2, [r4, #0]
 8004f40:	6813      	ldr	r3, [r2, #0]
 8004f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f46:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004f48:	e006      	b.n	8004f58 <HAL_SAI_Transmit_DMA+0xb4>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004f4a:	f7fb fa29 	bl	80003a0 <HAL_GetTick>
 8004f4e:	eba0 0009 	sub.w	r0, r0, r9
 8004f52:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f56:	d81b      	bhi.n	8004f90 <HAL_SAI_Transmit_DMA+0xec>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004f58:	6822      	ldr	r2, [r4, #0]
 8004f5a:	6955      	ldr	r5, [r2, #20]
 8004f5c:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8004f60:	d0f3      	beq.n	8004f4a <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004f62:	6813      	ldr	r3, [r2, #0]
 8004f64:	03db      	lsls	r3, r3, #15
 8004f66:	d403      	bmi.n	8004f70 <HAL_SAI_Transmit_DMA+0xcc>
      __HAL_SAI_ENABLE(hsai);
 8004f68:	6813      	ldr	r3, [r2, #0]
 8004f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f6e:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8004f70:	2300      	movs	r3, #0
 8004f72:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8004f76:	e000      	b.n	8004f7a <HAL_SAI_Transmit_DMA+0xd6>
    return HAL_BUSY;
 8004f78:	2702      	movs	r7, #2
}
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 8004f80:	2701      	movs	r7, #1
}
 8004f82:	4638      	mov	r0, r7
 8004f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_UNLOCK(hsai);
 8004f88:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8004f8c:	4637      	mov	r7, r6
 8004f8e:	e7f4      	b.n	8004f7a <HAL_SAI_Transmit_DMA+0xd6>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004f90:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8004f94:	2703      	movs	r7, #3
        __HAL_UNLOCK(hsai);
 8004f96:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f9e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8004fa2:	e7ea      	b.n	8004f7a <HAL_SAI_Transmit_DMA+0xd6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004fa4:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004fa8:	2a01      	cmp	r2, #1
 8004faa:	bf0b      	itete	eq
 8004fac:	2015      	moveq	r0, #21
 8004fae:	2005      	movne	r0, #5
 8004fb0:	2271      	moveq	r2, #113	; 0x71
 8004fb2:	2261      	movne	r2, #97	; 0x61
 8004fb4:	e7bb      	b.n	8004f2e <HAL_SAI_Transmit_DMA+0x8a>
 8004fb6:	bf00      	nop
 8004fb8:	08005111 	.word	0x08005111
 8004fbc:	080050a9 	.word	0x080050a9
 8004fc0:	08005199 	.word	0x08005199

08004fc4 <HAL_SAI_Receive_DMA>:
  if ((pData == NULL) || (Size == 0U))
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	d057      	beq.n	8005078 <HAL_SAI_Receive_DMA+0xb4>
{
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0U))
 8004fca:	fab2 f582 	clz	r5, r2
 8004fce:	096d      	lsrs	r5, r5, #5
 8004fd0:	2d00      	cmp	r5, #0
 8004fd2:	d14f      	bne.n	8005074 <HAL_SAI_Receive_DMA+0xb0>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004fd4:	f890 6091 	ldrb.w	r6, [r0, #145]	; 0x91
 8004fd8:	b2f6      	uxtb	r6, r6
 8004fda:	2e01      	cmp	r6, #1
 8004fdc:	d148      	bne.n	8005070 <HAL_SAI_Receive_DMA+0xac>
    __HAL_LOCK(hsai);
 8004fde:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d044      	beq.n	8005070 <HAL_SAI_Receive_DMA+0xac>
 8004fe6:	4604      	mov	r4, r0
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004fe8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004fec:	2722      	movs	r7, #34	; 0x22
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004fee:	482a      	ldr	r0, [pc, #168]	; (8005098 <HAL_SAI_Receive_DMA+0xd4>)
    hsai->pBuffPtr = pData;
 8004ff0:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8004ff2:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004ff6:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferCount = Size;
 8004ffa:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
    __HAL_LOCK(hsai);
 8004ffe:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005002:	f884 7091 	strb.w	r7, [r4, #145]	; 0x91
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005006:	4925      	ldr	r1, [pc, #148]	; (800509c <HAL_SAI_Receive_DMA+0xd8>)
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005008:	6418      	str	r0, [r3, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800500a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800500e:	4a24      	ldr	r2, [pc, #144]	; (80050a0 <HAL_SAI_Receive_DMA+0xdc>)
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005010:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005012:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005016:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8005018:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800501c:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800501e:	6821      	ldr	r1, [r4, #0]
 8005020:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8005024:	311c      	adds	r1, #28
 8005026:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005028:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800502c:	f7fc fb6c 	bl	8001708 <HAL_DMA_Start_IT>
 8005030:	bb20      	cbnz	r0, 800507c <HAL_SAI_Receive_DMA+0xb8>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005032:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005034:	6863      	ldr	r3, [r4, #4]
 8005036:	2a08      	cmp	r2, #8
 8005038:	d024      	beq.n	8005084 <HAL_SAI_Receive_DMA+0xc0>
 800503a:	2505      	movs	r5, #5
 800503c:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800503e:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005040:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8005042:	2b01      	cmp	r3, #1
 8005044:	bf88      	it	hi
 8005046:	462a      	movhi	r2, r5
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005048:	690b      	ldr	r3, [r1, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	6813      	ldr	r3, [r2, #0]
 8005052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005056:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	03d2      	lsls	r2, r2, #15
 800505e:	d403      	bmi.n	8005068 <HAL_SAI_Receive_DMA+0xa4>
      __HAL_SAI_ENABLE(hsai);
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005066:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8005068:	2300      	movs	r3, #0
 800506a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800506e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005070:	2002      	movs	r0, #2
}
 8005072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8005074:	2001      	movs	r0, #1
}
 8005076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8005078:	2001      	movs	r0, #1
}
 800507a:	4770      	bx	lr
      __HAL_UNLOCK(hsai);
 800507c:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8005080:	4630      	mov	r0, r6
}
 8005082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005084:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005088:	2a01      	cmp	r2, #1
 800508a:	bf0b      	itete	eq
 800508c:	2515      	moveq	r5, #21
 800508e:	2505      	movne	r5, #5
 8005090:	2271      	moveq	r2, #113	; 0x71
 8005092:	2261      	movne	r2, #97	; 0x61
 8005094:	e7d3      	b.n	800503e <HAL_SAI_Receive_DMA+0x7a>
 8005096:	bf00      	nop
 8005098:	08005189 	.word	0x08005189
 800509c:	08005121 	.word	0x08005121
 80050a0:	08005199 	.word	0x08005199

080050a4 <HAL_SAI_TxCpltCallback>:
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop

080050a8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80050a8:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80050aa:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80050ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b2:	d01a      	beq.n	80050ea <SAI_DMATxCplt+0x42>
  {
    hsai->XferCount = 0;
 80050b4:	2300      	movs	r3, #0

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80050b6:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 80050b8:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80050bc:	6813      	ldr	r3, [r2, #0]
 80050be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050c2:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80050c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80050c6:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80050c8:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80050ca:	d011      	beq.n	80050f0 <SAI_DMATxCplt+0x48>
 80050cc:	f06f 0261 	mvn.w	r2, #97	; 0x61
 80050d0:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80050d4:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80050d6:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 80050d8:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80050da:	42a3      	cmp	r3, r4
 80050dc:	bf88      	it	hi
 80050de:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80050e0:	690b      	ldr	r3, [r1, #16]
 80050e2:	4013      	ands	r3, r2
 80050e4:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 80050e6:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80050ea:	f7ff ffdb 	bl	80050a4 <HAL_SAI_TxCpltCallback>
#endif
}
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80050f0:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80050f4:	2a01      	cmp	r2, #1
 80050f6:	bf0b      	itete	eq
 80050f8:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 80050fc:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 8005100:	f06f 0515 	mvneq.w	r5, #21
 8005104:	f06f 0505 	mvnne.w	r5, #5
 8005108:	e7e4      	b.n	80050d4 <SAI_DMATxCplt+0x2c>
 800510a:	bf00      	nop

0800510c <HAL_SAI_TxHalfCpltCallback>:
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop

08005110 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005110:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005112:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005114:	f7ff fffa 	bl	800510c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005118:	bd08      	pop	{r3, pc}
 800511a:	bf00      	nop

0800511c <HAL_SAI_RxCpltCallback>:
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop

08005120 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005120:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005122:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005124:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512a:	d01a      	beq.n	8005162 <SAI_DMARxCplt+0x42>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800512c:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 800512e:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005130:	6813      	ldr	r3, [r2, #0]
 8005132:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005136:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005138:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
 800513a:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800513e:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005140:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005142:	d011      	beq.n	8005168 <SAI_DMARxCplt+0x48>
 8005144:	f06f 0261 	mvn.w	r2, #97	; 0x61
 8005148:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800514c:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800514e:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 8005150:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005152:	42a3      	cmp	r3, r4
 8005154:	bf88      	it	hi
 8005156:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005158:	690b      	ldr	r3, [r1, #16]
 800515a:	4013      	ands	r3, r2
 800515c:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800515e:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005162:	f7ff ffdb 	bl	800511c <HAL_SAI_RxCpltCallback>
#endif
}
 8005166:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005168:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800516c:	2a01      	cmp	r2, #1
 800516e:	bf0b      	itete	eq
 8005170:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 8005174:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 8005178:	f06f 0515 	mvneq.w	r5, #21
 800517c:	f06f 0505 	mvnne.w	r5, #5
 8005180:	e7e4      	b.n	800514c <SAI_DMARxCplt+0x2c>
 8005182:	bf00      	nop

08005184 <HAL_SAI_RxHalfCpltCallback>:
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop

08005188 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005188:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800518a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800518c:	f7ff fffa 	bl	8005184 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8005190:	bd08      	pop	{r3, pc}
 8005192:	bf00      	nop

08005194 <HAL_SAI_ErrorCallback>:
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop

08005198 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005198:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800519a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800519c:	f7fd fada 	bl	8002754 <HAL_DMA_GetError>
 80051a0:	2802      	cmp	r0, #2
 80051a2:	d02a      	beq.n	80051fa <SAI_DMAError+0x62>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80051a4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80051a8:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80051aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80051ae:	4a17      	ldr	r2, [pc, #92]	; (800520c <SAI_DMAError+0x74>)
 80051b0:	4d17      	ldr	r5, [pc, #92]	; (8005210 <SAI_DMAError+0x78>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80051b2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80051b6:	680b      	ldr	r3, [r1, #0]
 80051b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051bc:	600b      	str	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80051be:	6812      	ldr	r2, [r2, #0]
  __HAL_SAI_DISABLE(hsai);
 80051c0:	6820      	ldr	r0, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80051c2:	fba5 3202 	umull	r3, r2, r5, r2
  __HAL_SAI_DISABLE(hsai);
 80051c6:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80051c8:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 80051ca:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    if (count == 0U)
 80051ce:	0093      	lsls	r3, r2, #2
  __HAL_SAI_DISABLE(hsai);
 80051d0:	6001      	str	r1, [r0, #0]
    if (count == 0U)
 80051d2:	b19a      	cbz	r2, 80051fc <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80051d4:	6821      	ldr	r1, [r4, #0]
    count--;
 80051d6:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80051d8:	680a      	ldr	r2, [r1, #0]
 80051da:	03d0      	lsls	r0, r2, #15
 80051dc:	d504      	bpl.n	80051e8 <SAI_DMAError+0x50>
    if (count == 0U)
 80051de:	b16b      	cbz	r3, 80051fc <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80051e0:	680a      	ldr	r2, [r1, #0]
    count--;
 80051e2:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80051e4:	03d2      	lsls	r2, r2, #15
 80051e6:	d4fa      	bmi.n	80051de <SAI_DMAError+0x46>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80051e8:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80051ea:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80051ec:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 80051ee:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 80051f2:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 80051f6:	f7ff ffcd 	bl	8005194 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80051fc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005204:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8005208:	e7ee      	b.n	80051e8 <SAI_DMAError+0x50>
 800520a:	bf00      	nop
 800520c:	20000038 	.word	0x20000038
 8005210:	95cbec1b 	.word	0x95cbec1b

08005214 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	4605      	mov	r5, r0
 800521a:	b087      	sub	sp, #28
 800521c:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800521e:	f7fb f8bf 	bl	80003a0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005222:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8005224:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005226:	6828      	ldr	r0, [r5, #0]
 8005228:	f001 ff74 	bl	8007114 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800522c:	4604      	mov	r4, r0
 800522e:	b118      	cbz	r0, 8005238 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8005230:	4620      	mov	r0, r4
 8005232:	b007      	add	sp, #28
 8005234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005238:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800523a:	6828      	ldr	r0, [r5, #0]
 800523c:	0409      	lsls	r1, r1, #16
 800523e:	f002 f9d5 	bl	80075ec <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005242:	4604      	mov	r4, r0
 8005244:	2800      	cmp	r0, #0
 8005246:	d1f3      	bne.n	8005230 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 8U;
 800524c:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800524e:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005250:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005252:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005254:	2202      	movs	r2, #2
  config.DataLength    = 8U;
 8005256:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005258:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800525a:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800525c:	4669      	mov	r1, sp
 800525e:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005260:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005262:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005264:	f001 ff40 	bl	80070e8 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005268:	6828      	ldr	r0, [r5, #0]
 800526a:	f002 fa7b 	bl	8007764 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800526e:	4604      	mov	r4, r0
 8005270:	2800      	cmp	r0, #0
 8005272:	d1dd      	bne.n	8005230 <SD_FindSCR+0x1c>
  uint32_t index = 0U;
 8005274:	4681      	mov	r9, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005276:	4683      	mov	fp, r0
 8005278:	4682      	mov	sl, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800527a:	f240 582a 	movw	r8, #1322	; 0x52a
 800527e:	e004      	b.n	800528a <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005280:	f7fb f88e 	bl	80003a0 <HAL_GetTick>
 8005284:	1b80      	subs	r0, r0, r6
 8005286:	3001      	adds	r0, #1
 8005288:	d025      	beq.n	80052d6 <SD_FindSCR+0xc2>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800528a:	6828      	ldr	r0, [r5, #0]
 800528c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800528e:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005292:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8005294:	d10e      	bne.n	80052b4 <SD_FindSCR+0xa0>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005296:	031b      	lsls	r3, r3, #12
 8005298:	d4f2      	bmi.n	8005280 <SD_FindSCR+0x6c>
 800529a:	f1b9 0f00 	cmp.w	r9, #0
 800529e:	d1ef      	bne.n	8005280 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80052a0:	f001 ff08 	bl	80070b4 <SDMMC_ReadFIFO>
 80052a4:	4682      	mov	sl, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80052a6:	6828      	ldr	r0, [r5, #0]
      index++;
 80052a8:	f04f 0901 	mov.w	r9, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80052ac:	f001 ff02 	bl	80070b4 <SDMMC_ReadFIFO>
 80052b0:	4683      	mov	fp, r0
 80052b2:	e7e5      	b.n	8005280 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80052b4:	0719      	lsls	r1, r3, #28
 80052b6:	d411      	bmi.n	80052dc <SD_FindSCR+0xc8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80052b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052ba:	079a      	lsls	r2, r3, #30
 80052bc:	d411      	bmi.n	80052e2 <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80052be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052c0:	069b      	lsls	r3, r3, #26
 80052c2:	d411      	bmi.n	80052e8 <SD_FindSCR+0xd4>
 80052c4:	fa9b f28b 	rev.w	r2, fp
 80052c8:	fa9a f38a 	rev.w	r3, sl
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80052cc:	4908      	ldr	r1, [pc, #32]	; (80052f0 <SD_FindSCR+0xdc>)
 80052ce:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80052d0:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 80052d4:	e7ac      	b.n	8005230 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 80052d6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80052da:	e7a9      	b.n	8005230 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80052dc:	2408      	movs	r4, #8
 80052de:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80052e0:	e7a6      	b.n	8005230 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80052e2:	2402      	movs	r4, #2
 80052e4:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80052e6:	e7a3      	b.n	8005230 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80052e8:	2420      	movs	r4, #32
 80052ea:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80052ec:	e7a0      	b.n	8005230 <SD_FindSCR+0x1c>
 80052ee:	bf00      	nop
 80052f0:	18000f3a 	.word	0x18000f3a

080052f4 <HAL_SD_ReadBlocks>:
{
 80052f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f8:	460d      	mov	r5, r1
 80052fa:	b086      	sub	sp, #24
 80052fc:	4604      	mov	r4, r0
 80052fe:	4690      	mov	r8, r2
 8005300:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8005302:	f7fb f84d 	bl	80003a0 <HAL_GetTick>
  if(NULL == pData)
 8005306:	2d00      	cmp	r5, #0
 8005308:	d070      	beq.n	80053ec <HAL_SD_ReadBlocks+0xf8>
 800530a:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800530c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8005310:	b2c0      	uxtb	r0, r0
 8005312:	2801      	cmp	r0, #1
 8005314:	d007      	beq.n	8005326 <HAL_SD_ReadBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005316:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005318:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800531a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800531e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005320:	b006      	add	sp, #24
 8005322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005326:	eb08 0306 	add.w	r3, r8, r6
 800532a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800532c:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800532e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005330:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005332:	d863      	bhi.n	80053fc <HAL_SD_ReadBlocks+0x108>
    hsd->Instance->DCTRL = 0U;
 8005334:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8005336:	2203      	movs	r2, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005338:	f04f 0902 	mov.w	r9, #2
    hsd->State = HAL_SD_STATE_BUSY;
 800533c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005340:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 8005342:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005344:	0271      	lsls	r1, r6, #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005346:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005348:	9101      	str	r1, [sp, #4]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800534a:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800534c:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800534e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005352:	6820      	ldr	r0, [r4, #0]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005354:	9300      	str	r3, [sp, #0]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005356:	f04f 0300 	mov.w	r3, #0
      add *= 512U;
 800535a:	bf18      	it	ne
 800535c:	ea4f 2848 	movne.w	r8, r8, lsl #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005360:	9202      	str	r2, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005362:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005364:	e9cd 9303 	strd	r9, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005368:	f001 febe 	bl	80070e8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800536c:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 800536e:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005370:	68d3      	ldr	r3, [r2, #12]
 8005372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005376:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8005378:	d953      	bls.n	8005422 <HAL_SD_ReadBlocks+0x12e>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800537a:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800537e:	4641      	mov	r1, r8
 8005380:	6820      	ldr	r0, [r4, #0]
 8005382:	f001 ff4f 	bl	8007224 <SDMMC_CmdReadMultiBlock>
 8005386:	4603      	mov	r3, r0
 8005388:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800538a:	2b00      	cmp	r3, #0
 800538c:	d13d      	bne.n	800540a <HAL_SD_ReadBlocks+0x116>
    dataremaining = config.DataLength;
 800538e:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005392:	e006      	b.n	80053a2 <HAL_SD_ReadBlocks+0xae>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005394:	f7fb f804 	bl	80003a0 <HAL_GetTick>
 8005398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800539a:	1bc0      	subs	r0, r0, r7
 800539c:	4298      	cmp	r0, r3
 800539e:	d274      	bcs.n	800548a <HAL_SD_ReadBlocks+0x196>
 80053a0:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80053a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80053a4:	f413 7f95 	tst.w	r3, #298	; 0x12a
 80053a8:	d143      	bne.n	8005432 <HAL_SD_ReadBlocks+0x13e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80053aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80053ac:	0419      	lsls	r1, r3, #16
 80053ae:	d5f1      	bpl.n	8005394 <HAL_SD_ReadBlocks+0xa0>
 80053b0:	f1b9 0f1f 	cmp.w	r9, #31
 80053b4:	d9ee      	bls.n	8005394 <HAL_SD_ReadBlocks+0xa0>
 80053b6:	f105 0a04 	add.w	sl, r5, #4
 80053ba:	f105 0824 	add.w	r8, r5, #36	; 0x24
 80053be:	e000      	b.n	80053c2 <HAL_SD_ReadBlocks+0xce>
 80053c0:	6820      	ldr	r0, [r4, #0]
          data = SDMMC_ReadFIFO(hsd->Instance);
 80053c2:	f001 fe77 	bl	80070b4 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 80053c6:	f80a 0c04 	strb.w	r0, [sl, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80053ca:	0a02      	lsrs	r2, r0, #8
 80053cc:	f10a 0a04 	add.w	sl, sl, #4
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80053d0:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80053d2:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80053d4:	f80a 2c07 	strb.w	r2, [sl, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80053d8:	f80a 3c06 	strb.w	r3, [sl, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80053dc:	f80a 0c05 	strb.w	r0, [sl, #-5]
        for(count = 0U; count < 8U; count++)
 80053e0:	45c2      	cmp	sl, r8
 80053e2:	d1ed      	bne.n	80053c0 <HAL_SD_ReadBlocks+0xcc>
 80053e4:	3520      	adds	r5, #32
        dataremaining -= 32U;
 80053e6:	f1a9 0920 	sub.w	r9, r9, #32
 80053ea:	e7d3      	b.n	8005394 <HAL_SD_ReadBlocks+0xa0>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80053ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80053ee:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80053f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053f4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80053f6:	b006      	add	sp, #24
 80053f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80053fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005402:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005404:	b006      	add	sp, #24
 8005406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800540a:	4a39      	ldr	r2, [pc, #228]	; (80054f0 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 800540c:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800540e:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005410:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005412:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 8005414:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 8005416:	4313      	orrs	r3, r2
 8005418:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800541a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800541e:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 8005420:	e77e      	b.n	8005320 <HAL_SD_ReadBlocks+0x2c>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005422:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005424:	4641      	mov	r1, r8
 8005426:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005428:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800542a:	f001 feb7 	bl	800719c <SDMMC_CmdReadSingleBlock>
 800542e:	4603      	mov	r3, r0
 8005430:	e7aa      	b.n	8005388 <HAL_SD_ReadBlocks+0x94>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005432:	68c3      	ldr	r3, [r0, #12]
 8005434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005438:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800543e:	05d2      	lsls	r2, r2, #23
 8005440:	d50b      	bpl.n	800545a <HAL_SD_ReadBlocks+0x166>
 8005442:	2e01      	cmp	r6, #1
 8005444:	d909      	bls.n	800545a <HAL_SD_ReadBlocks+0x166>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005446:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005448:	2a03      	cmp	r2, #3
 800544a:	d006      	beq.n	800545a <HAL_SD_ReadBlocks+0x166>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800544c:	4618      	mov	r0, r3
 800544e:	f001 ffb5 	bl	80073bc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005452:	4603      	mov	r3, r0
 8005454:	2800      	cmp	r0, #0
 8005456:	d145      	bne.n	80054e4 <HAL_SD_ReadBlocks+0x1f0>
 8005458:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800545a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800545c:	f012 0208 	ands.w	r2, r2, #8
 8005460:	d121      	bne.n	80054a6 <HAL_SD_ReadBlocks+0x1b2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005464:	f011 0102 	ands.w	r1, r1, #2
 8005468:	d12a      	bne.n	80054c0 <HAL_SD_ReadBlocks+0x1cc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800546a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800546c:	f010 0020 	ands.w	r0, r0, #32
 8005470:	d032      	beq.n	80054d8 <HAL_SD_ReadBlocks+0x1e4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005472:	481f      	ldr	r0, [pc, #124]	; (80054f0 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 8005474:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005476:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005478:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800547a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800547c:	f043 0320 	orr.w	r3, r3, #32
 8005480:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005482:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005486:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005488:	e74a      	b.n	8005320 <HAL_SD_ReadBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800548a:	6823      	ldr	r3, [r4, #0]
        hsd->State= HAL_SD_STATE_READY;
 800548c:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800548e:	4d18      	ldr	r5, [pc, #96]	; (80054f0 <HAL_SD_ReadBlocks+0x1fc>)
        hsd->Context = SD_CONTEXT_NONE;
 8005490:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8005492:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005494:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005496:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800549c:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800549e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80054a2:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80054a4:	e73c      	b.n	8005320 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054a6:	4812      	ldr	r0, [pc, #72]	; (80054f0 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 80054a8:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 80054aa:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054ac:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80054ae:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80054b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054b2:	f043 0308 	orr.w	r3, r3, #8
 80054b6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054b8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054bc:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 80054be:	e72f      	b.n	8005320 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054c0:	480b      	ldr	r0, [pc, #44]	; (80054f0 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 80054c2:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054c4:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80054c6:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80054c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054ca:	f043 0302 	orr.w	r3, r3, #2
 80054ce:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054d0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054d4:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80054d6:	e723      	b.n	8005320 <HAL_SD_ReadBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80054d8:	4906      	ldr	r1, [pc, #24]	; (80054f4 <HAL_SD_ReadBlocks+0x200>)
    hsd->State = HAL_SD_STATE_READY;
 80054da:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80054dc:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80054de:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 80054e2:	e71d      	b.n	8005320 <HAL_SD_ReadBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054e4:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 80054e6:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054e8:	4801      	ldr	r0, [pc, #4]	; (80054f0 <HAL_SD_ReadBlocks+0x1fc>)
          hsd->Context = SD_CONTEXT_NONE;
 80054ea:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054ec:	6390      	str	r0, [r2, #56]	; 0x38
 80054ee:	e790      	b.n	8005412 <HAL_SD_ReadBlocks+0x11e>
 80054f0:	1fe00fff 	.word	0x1fe00fff
 80054f4:	18000f3a 	.word	0x18000f3a

080054f8 <HAL_SD_WriteBlocks>:
{
 80054f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054fc:	460d      	mov	r5, r1
 80054fe:	b089      	sub	sp, #36	; 0x24
 8005500:	4604      	mov	r4, r0
 8005502:	4616      	mov	r6, r2
 8005504:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8005506:	f7fa ff4b 	bl	80003a0 <HAL_GetTick>
  if(NULL == pData)
 800550a:	2d00      	cmp	r5, #0
 800550c:	d05d      	beq.n	80055ca <HAL_SD_WriteBlocks+0xd2>
 800550e:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005510:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8005514:	b2c0      	uxtb	r0, r0
 8005516:	2801      	cmp	r0, #1
 8005518:	d007      	beq.n	800552a <HAL_SD_WriteBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800551a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800551c:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800551e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005522:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005524:	b009      	add	sp, #36	; 0x24
 8005526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800552a:	19f3      	adds	r3, r6, r7
 800552c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800552e:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005530:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005532:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005534:	d851      	bhi.n	80055da <HAL_SD_WriteBlocks+0xe2>
    hsd->Instance->DCTRL = 0U;
 8005536:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8005538:	2203      	movs	r2, #3
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800553a:	0278      	lsls	r0, r7, #9
    hsd->State = HAL_SD_STATE_BUSY;
 800553c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005540:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 8005542:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005544:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005548:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800554a:	9102      	str	r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800554c:	a902      	add	r1, sp, #8
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800554e:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005550:	f04f 0300 	mov.w	r3, #0
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005554:	e9cd 0203 	strd	r0, r2, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005558:	6820      	ldr	r0, [r4, #0]
      add *= 512U;
 800555a:	bf18      	it	ne
 800555c:	0276      	lslne	r6, r6, #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800555e:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005560:	e9cd 3305 	strd	r3, r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005564:	f001 fdc0 	bl	80070e8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005568:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 800556a:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800556c:	68d3      	ldr	r3, [r2, #12]
 800556e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005572:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8005574:	d944      	bls.n	8005600 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005576:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005578:	4631      	mov	r1, r6
 800557a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800557c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800557e:	f001 fed9 	bl	8007334 <SDMMC_CmdWriteMultiBlock>
 8005582:	4603      	mov	r3, r0
 8005584:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005586:	bb7b      	cbnz	r3, 80055e8 <HAL_SD_WriteBlocks+0xf0>
    dataremaining = config.DataLength;
 8005588:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800558a:	e007      	b.n	800559c <HAL_SD_WriteBlocks+0xa4>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800558c:	f7fa ff08 	bl	80003a0 <HAL_GetTick>
 8005590:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005592:	eba0 0008 	sub.w	r0, r0, r8
 8005596:	4298      	cmp	r0, r3
 8005598:	d266      	bcs.n	8005668 <HAL_SD_WriteBlocks+0x170>
 800559a:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800559c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800559e:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 80055a2:	d135      	bne.n	8005610 <HAL_SD_WriteBlocks+0x118>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80055a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80055a6:	0459      	lsls	r1, r3, #17
 80055a8:	d5f0      	bpl.n	800558c <HAL_SD_WriteBlocks+0x94>
 80055aa:	2e1f      	cmp	r6, #31
 80055ac:	d9ee      	bls.n	800558c <HAL_SD_WriteBlocks+0x94>
 80055ae:	f105 0920 	add.w	r9, r5, #32
 80055b2:	e000      	b.n	80055b6 <HAL_SD_WriteBlocks+0xbe>
 80055b4:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 80055b6:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80055ba:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 80055bc:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80055be:	f001 fd7d 	bl	80070bc <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80055c2:	454d      	cmp	r5, r9
 80055c4:	d1f6      	bne.n	80055b4 <HAL_SD_WriteBlocks+0xbc>
        dataremaining -= 32U;
 80055c6:	3e20      	subs	r6, #32
 80055c8:	e7e0      	b.n	800558c <HAL_SD_WriteBlocks+0x94>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80055cc:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055d2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80055d4:	b009      	add	sp, #36	; 0x24
 80055d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80055da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80055e0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80055e2:	b009      	add	sp, #36	; 0x24
 80055e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055e8:	4a38      	ldr	r2, [pc, #224]	; (80056cc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 80055ea:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 80055ec:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055ee:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80055f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 80055f2:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 80055f4:	4313      	orrs	r3, r2
 80055f6:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80055f8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80055fc:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 80055fe:	e791      	b.n	8005524 <HAL_SD_WriteBlocks+0x2c>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005600:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005602:	4631      	mov	r1, r6
 8005604:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005606:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005608:	f001 fe50 	bl	80072ac <SDMMC_CmdWriteSingleBlock>
 800560c:	4603      	mov	r3, r0
 800560e:	e7b9      	b.n	8005584 <HAL_SD_WriteBlocks+0x8c>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005610:	68c3      	ldr	r3, [r0, #12]
 8005612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005616:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561c:	05d2      	lsls	r2, r2, #23
 800561e:	d50b      	bpl.n	8005638 <HAL_SD_WriteBlocks+0x140>
 8005620:	2f01      	cmp	r7, #1
 8005622:	d909      	bls.n	8005638 <HAL_SD_WriteBlocks+0x140>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005624:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005626:	2a03      	cmp	r2, #3
 8005628:	d006      	beq.n	8005638 <HAL_SD_WriteBlocks+0x140>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800562a:	4618      	mov	r0, r3
 800562c:	f001 fec6 	bl	80073bc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005630:	4603      	mov	r3, r0
 8005632:	2800      	cmp	r0, #0
 8005634:	d143      	bne.n	80056be <HAL_SD_WriteBlocks+0x1c6>
 8005636:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563a:	f012 0208 	ands.w	r2, r2, #8
 800563e:	d11f      	bne.n	8005680 <HAL_SD_WriteBlocks+0x188>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005640:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005642:	f011 0102 	ands.w	r1, r1, #2
 8005646:	d128      	bne.n	800569a <HAL_SD_WriteBlocks+0x1a2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005648:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800564a:	f010 0010 	ands.w	r0, r0, #16
 800564e:	d030      	beq.n	80056b2 <HAL_SD_WriteBlocks+0x1ba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005650:	481e      	ldr	r0, [pc, #120]	; (80056cc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8005652:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005654:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005656:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800565a:	f043 0310 	orr.w	r3, r3, #16
 800565e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005660:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005664:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005666:	e75d      	b.n	8005524 <HAL_SD_WriteBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005668:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800566a:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800566c:	4d17      	ldr	r5, [pc, #92]	; (80056cc <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 800566e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8005670:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005672:	638d      	str	r5, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005674:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005676:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005678:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800567c:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800567e:	e751      	b.n	8005524 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005680:	4812      	ldr	r0, [pc, #72]	; (80056cc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8005682:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8005684:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005686:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005688:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800568a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800568c:	f043 0308 	orr.w	r3, r3, #8
 8005690:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005692:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005696:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005698:	e744      	b.n	8005524 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800569a:	480c      	ldr	r0, [pc, #48]	; (80056cc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800569c:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800569e:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80056a0:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80056a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056a4:	f043 0302 	orr.w	r3, r3, #2
 80056a8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056aa:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056ae:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80056b0:	e738      	b.n	8005524 <HAL_SD_WriteBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80056b2:	4907      	ldr	r1, [pc, #28]	; (80056d0 <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 80056b4:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80056b6:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056b8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 80056bc:	e732      	b.n	8005524 <HAL_SD_WriteBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056be:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 80056c0:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056c2:	4802      	ldr	r0, [pc, #8]	; (80056cc <HAL_SD_WriteBlocks+0x1d4>)
          hsd->Context = SD_CONTEXT_NONE;
 80056c4:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056c6:	6390      	str	r0, [r2, #56]	; 0x38
 80056c8:	e792      	b.n	80055f0 <HAL_SD_WriteBlocks+0xf8>
 80056ca:	bf00      	nop
 80056cc:	1fe00fff 	.word	0x1fe00fff
 80056d0:	18000f3a 	.word	0x18000f3a

080056d4 <HAL_SD_ErrorCallback>:
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop

080056d8 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop

080056dc <HAL_SD_GetCardCSD>:
{
 80056dc:	4603      	mov	r3, r0
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80056de:	2000      	movs	r0, #0
{
 80056e0:	b430      	push	{r4, r5}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80056e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056e4:	0f92      	lsrs	r2, r2, #30
 80056e6:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80056e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056ea:	f3c2 6283 	ubfx	r2, r2, #26, #4
 80056ee:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80056f0:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 80056f4:	f002 0203 	and.w	r2, r2, #3
 80056f8:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80056fa:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 80056fe:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005700:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8005704:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005706:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800570a:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800570c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800570e:	0d12      	lsrs	r2, r2, #20
 8005710:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005712:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8005716:	f002 020f 	and.w	r2, r2, #15
 800571a:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800571c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800571e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005722:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005724:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005726:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800572a:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800572c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800572e:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8005732:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005734:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005736:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800573a:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800573c:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800573e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005740:	2a00      	cmp	r2, #0
 8005742:	f040 8086 	bne.w	8005852 <HAL_SD_GetCardCSD+0x176>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005746:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8005748:	f640 72fc 	movw	r2, #4092	; 0xffc
 800574c:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800574e:	2401      	movs	r4, #1
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005750:	ea02 0285 	and.w	r2, r2, r5, lsl #2
    hsd->SdCard.LogBlockSize = 512U;
 8005754:	f44f 7500 	mov.w	r5, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005758:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800575c:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800575e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005760:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8005764:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005766:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 800576a:	f002 0207 	and.w	r2, r2, #7
 800576e:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005770:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005772:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8005776:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005778:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800577a:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800577e:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005780:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005782:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8005786:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005788:	690a      	ldr	r2, [r1, #16]
 800578a:	4422      	add	r2, r4
 800578c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800578e:	7e08      	ldrb	r0, [r1, #24]
 8005790:	f000 0007 	and.w	r0, r0, #7
 8005794:	3002      	adds	r0, #2
 8005796:	4082      	lsls	r2, r0
 8005798:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800579a:	7a08      	ldrb	r0, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 800579c:	659d      	str	r5, [r3, #88]	; 0x58
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800579e:	f000 000f 	and.w	r0, r0, #15
 80057a2:	fa04 f000 	lsl.w	r0, r4, r0
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80057a6:	0a44      	lsrs	r4, r0, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80057a8:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80057aa:	fb02 f204 	mul.w	r2, r2, r4
 80057ae:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80057b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  pCSD->Reserved3 = 0;
 80057b2:	2500      	movs	r5, #0
  pCSD->Reserved4 = 1;
 80057b4:	2401      	movs	r4, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80057b6:	f3c2 3280 	ubfx	r2, r2, #14, #1
  return HAL_OK;
 80057ba:	4628      	mov	r0, r5
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80057bc:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80057be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80057c0:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80057c4:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80057c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80057c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057cc:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80057ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80057d0:	0fd2      	lsrs	r2, r2, #31
 80057d2:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80057d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80057d6:	f3c2 7241 	ubfx	r2, r2, #29, #2
 80057da:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80057dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80057de:	f3c2 6282 	ubfx	r2, r2, #26, #3
 80057e2:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80057e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80057e6:	f3c2 5283 	ubfx	r2, r2, #22, #4
 80057ea:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80057ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80057ee:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80057f2:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 80057f6:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80057fa:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 80057fe:	4022      	ands	r2, r4
 8005800:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005804:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005806:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800580a:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800580e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005810:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8005814:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005818:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800581a:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800581e:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005822:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005824:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8005828:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800582c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800582e:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8005832:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005836:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005838:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800583c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005842:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8005846:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800584a:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
}
 800584e:	bc30      	pop	{r4, r5}
 8005850:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005852:	2a01      	cmp	r2, #1
 8005854:	d00c      	beq.n	8005870 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005856:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8005858:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800585a:	4c0e      	ldr	r4, [pc, #56]	; (8005894 <HAL_SD_GetCardCSD+0x1b8>)
    return HAL_ERROR;
 800585c:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800585e:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005862:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005866:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005868:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800586c:	bc30      	pop	{r4, r5}
 800586e:	4770      	bx	lr
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005870:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.BlockSize = 512U;
 8005872:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005876:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 800587a:	0412      	lsls	r2, r2, #16
 800587c:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8005880:	4322      	orrs	r2, r4
 8005882:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005884:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8005886:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005888:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800588a:	6598      	str	r0, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800588c:	0292      	lsls	r2, r2, #10
 800588e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005890:	655a      	str	r2, [r3, #84]	; 0x54
 8005892:	e78d      	b.n	80057b0 <HAL_SD_GetCardCSD+0xd4>
 8005894:	1fe00fff 	.word	0x1fe00fff

08005898 <HAL_SD_InitCard>:
{
 8005898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800589c:	2300      	movs	r3, #0
{
 800589e:	b098      	sub	sp, #96	; 0x60
 80058a0:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80058a2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80058a6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80058aa:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80058ae:	f7fe feed 	bl	800468c <HAL_RCCEx_GetPeriphCLKFreq>
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80058b2:	4aad      	ldr	r2, [pc, #692]	; (8005b68 <HAL_SD_InitCard+0x2d0>)
 80058b4:	0a05      	lsrs	r5, r0, #8
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80058b6:	69a3      	ldr	r3, [r4, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80058b8:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80058ba:	fba2 2505 	umull	r2, r5, r2, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80058be:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80058c0:	ea4f 1515 	mov.w	r5, r5, lsr #4
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80058c4:	d104      	bne.n	80058d0 <HAL_SD_InitCard+0x38>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	6813      	ldr	r3, [r2, #0]
 80058ca:	f043 0310 	orr.w	r3, r3, #16
 80058ce:	6013      	str	r3, [r2, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 80058d0:	aa0a      	add	r2, sp, #40	; 0x28
 80058d2:	950b      	str	r5, [sp, #44]	; 0x2c
 80058d4:	6827      	ldr	r7, [r4, #0]
 80058d6:	ab07      	add	r3, sp, #28
 80058d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80058da:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80058de:	4638      	mov	r0, r7
 80058e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058e2:	f001 fbcd 	bl	8007080 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80058e6:	6820      	ldr	r0, [r4, #0]
 80058e8:	f001 fbee 	bl	80070c8 <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80058ec:	0068      	lsls	r0, r5, #1
 80058ee:	fbb6 f0f0 	udiv	r0, r6, r0
  if(sdmmc_clk != 0U)
 80058f2:	b1c8      	cbz	r0, 8005928 <HAL_SD_InitCard+0x90>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80058f4:	4d9d      	ldr	r5, [pc, #628]	; (8005b6c <HAL_SD_InitCard+0x2d4>)
 80058f6:	fbb5 f0f0 	udiv	r0, r5, r0
 80058fa:	3001      	adds	r0, #1
 80058fc:	f7fa fd56 	bl	80003ac <HAL_Delay>
  __IO uint32_t count = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 8005904:	f7fa fd4c 	bl	80003a0 <HAL_GetTick>
 8005908:	4680      	mov	r8, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800590a:	6820      	ldr	r0, [r4, #0]
 800590c:	f001 fe00 	bl	8007510 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005910:	4605      	mov	r5, r0
 8005912:	b168      	cbz	r0, 8005930 <HAL_SD_InitCard+0x98>
    hsd->State = HAL_SD_STATE_READY;
 8005914:	2601      	movs	r6, #1
 8005916:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800591a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800591c:	431d      	orrs	r5, r3
 800591e:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8005920:	4630      	mov	r0, r6
 8005922:	b018      	add	sp, #96	; 0x60
 8005924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 8005928:	2002      	movs	r0, #2
 800592a:	f7fa fd3f 	bl	80003ac <HAL_Delay>
 800592e:	e7e7      	b.n	8005900 <HAL_SD_InitCard+0x68>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005930:	6820      	ldr	r0, [r4, #0]
 8005932:	f001 fe1b 	bl	800756c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005936:	2800      	cmp	r0, #0
 8005938:	d179      	bne.n	8005a2e <HAL_SD_InitCard+0x196>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800593a:	2301      	movs	r3, #1
 800593c:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800593e:	2100      	movs	r1, #0
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	f001 fe53 	bl	80075ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005946:	bb08      	cbnz	r0, 800598c <HAL_SD_InitCard+0xf4>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005948:	9b06      	ldr	r3, [sp, #24]
 800594a:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800594e:	42b3      	cmp	r3, r6
 8005950:	f200 8112 	bhi.w	8005b78 <HAL_SD_InitCard+0x2e0>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005954:	4f86      	ldr	r7, [pc, #536]	; (8005b70 <HAL_SD_InitCard+0x2d8>)
 8005956:	e00c      	b.n	8005972 <HAL_SD_InitCard+0xda>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005958:	4601      	mov	r1, r0
 800595a:	6820      	ldr	r0, [r4, #0]
 800595c:	f001 fbc0 	bl	80070e0 <SDMMC_GetResponse>
    count++;
 8005960:	9b06      	ldr	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005962:	1e02      	subs	r2, r0, #0
    count++;
 8005964:	f103 0301 	add.w	r3, r3, #1
 8005968:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800596a:	9b06      	ldr	r3, [sp, #24]
 800596c:	db11      	blt.n	8005992 <HAL_SD_InitCard+0xfa>
 800596e:	42b3      	cmp	r3, r6
 8005970:	d80f      	bhi.n	8005992 <HAL_SD_InitCard+0xfa>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005972:	2100      	movs	r1, #0
 8005974:	6820      	ldr	r0, [r4, #0]
 8005976:	f001 fe39 	bl	80075ec <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800597a:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 800597c:	4605      	mov	r5, r0
 800597e:	2800      	cmp	r0, #0
 8005980:	d1c8      	bne.n	8005914 <HAL_SD_InitCard+0x7c>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005982:	6820      	ldr	r0, [r4, #0]
 8005984:	f001 fe76 	bl	8007674 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005988:	2800      	cmp	r0, #0
 800598a:	d0e5      	beq.n	8005958 <HAL_SD_InitCard+0xc0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800598c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005990:	e7c0      	b.n	8005914 <HAL_SD_InitCard+0x7c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005992:	9906      	ldr	r1, [sp, #24]
 8005994:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005998:	4299      	cmp	r1, r3
 800599a:	f200 809e 	bhi.w	8005ada <HAL_SD_InitCard+0x242>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800599e:	0057      	lsls	r7, r2, #1
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	d504      	bpl.n	80059ae <HAL_SD_InitCard+0x116>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80059a4:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80059a6:	2101      	movs	r1, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80059a8:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80059aa:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80059ac:	d051      	beq.n	8005a52 <HAL_SD_InitCard+0x1ba>
  uint16_t sd_rca = 1U;
 80059ae:	2301      	movs	r3, #1
 80059b0:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80059b4:	f001 fb90 	bl	80070d8 <SDMMC_GetPowerState>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d044      	beq.n	8005a46 <HAL_SD_InitCard+0x1ae>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80059bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	2a03      	cmp	r2, #3
 80059c2:	d125      	bne.n	8005a10 <HAL_SD_InitCard+0x178>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80059c4:	4618      	mov	r0, r3
 80059c6:	2104      	movs	r1, #4
 80059c8:	f001 fb8a 	bl	80070e0 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80059cc:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80059ce:	0d03      	lsrs	r3, r0, #20
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80059d0:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80059d2:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80059d4:	f7ff fe82 	bl	80056dc <HAL_SD_GetCardCSD>
 80059d8:	4606      	mov	r6, r0
 80059da:	2800      	cmp	r0, #0
 80059dc:	d136      	bne.n	8005a4c <HAL_SD_InitCard+0x1b4>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80059de:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80059e0:	4603      	mov	r3, r0
 80059e2:	6820      	ldr	r0, [r4, #0]
 80059e4:	0412      	lsls	r2, r2, #16
 80059e6:	f001 fd4f 	bl	8007488 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80059ea:	b9b0      	cbnz	r0, 8005a1a <HAL_SD_InitCard+0x182>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80059ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	f001 fb8f 	bl	8007114 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d092      	beq.n	8005920 <HAL_SD_InitCard+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059fa:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 80059fc:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059fe:	495d      	ldr	r1, [pc, #372]	; (8005b74 <HAL_SD_InitCard+0x2dc>)
    return HAL_ERROR;
 8005a00:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a02:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005a04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a06:	4318      	orrs	r0, r3
 8005a08:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a0a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 8005a0e:	e787      	b.n	8005920 <HAL_SD_InitCard+0x88>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 feed 	bl	80077f0 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d062      	beq.n	8005ae0 <HAL_SD_InitCard+0x248>
    hsd->State = HAL_SD_STATE_READY;
 8005a1a:	2601      	movs	r6, #1
 8005a1c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005a22:	4308      	orrs	r0, r1
 8005a24:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005a26:	4630      	mov	r0, r6
 8005a28:	b018      	add	sp, #96	; 0x60
 8005a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005a2e:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a30:	6820      	ldr	r0, [r4, #0]
 8005a32:	f001 fd6d 	bl	8007510 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a36:	4605      	mov	r5, r0
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f47f af6b 	bne.w	8005914 <HAL_SD_InitCard+0x7c>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005a3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d181      	bne.n	8005948 <HAL_SD_InitCard+0xb0>
 8005a44:	e77b      	b.n	800593e <HAL_SD_InitCard+0xa6>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a46:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005a4a:	e7e6      	b.n	8005a1a <HAL_SD_InitCard+0x182>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a4c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005a50:	e7e3      	b.n	8005a1a <HAL_SD_InitCard+0x182>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8005a52:	01d6      	lsls	r6, r2, #7
 8005a54:	d5ab      	bpl.n	80059ae <HAL_SD_InitCard+0x116>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a5a:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005a5c:	6803      	ldr	r3, [r0, #0]
 8005a5e:	f043 0308 	orr.w	r3, r3, #8
 8005a62:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005a64:	6820      	ldr	r0, [r4, #0]
 8005a66:	f002 f819 	bl	8007a9c <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005a6a:	4605      	mov	r5, r0
 8005a6c:	b138      	cbz	r0, 8005a7e <HAL_SD_InitCard+0x1e6>
 8005a6e:	e751      	b.n	8005914 <HAL_SD_InitCard+0x7c>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005a70:	f7fa fc96 	bl	80003a0 <HAL_GetTick>
 8005a74:	eba0 0008 	sub.w	r0, r0, r8
 8005a78:	3001      	adds	r0, #1
 8005a7a:	f000 8082 	beq.w	8005b82 <HAL_SD_InitCard+0x2ea>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a82:	0155      	lsls	r5, r2, #5
 8005a84:	d5f4      	bpl.n	8005a70 <HAL_SD_InitCard+0x1d8>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005a86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a90:	02d8      	lsls	r0, r3, #11
 8005a92:	f57f af7b 	bpl.w	800598c <HAL_SD_InitCard+0xf4>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8005a96:	2001      	movs	r0, #1
 8005a98:	f7ff fe1e 	bl	80056d8 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005a9c:	6822      	ldr	r2, [r4, #0]
 8005a9e:	6813      	ldr	r3, [r2, #0]
 8005aa0:	f043 0304 	orr.w	r3, r3, #4
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	e005      	b.n	8005ab4 <HAL_SD_InitCard+0x21c>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005aa8:	f7fa fc7a 	bl	80003a0 <HAL_GetTick>
 8005aac:	eba0 0008 	sub.w	r0, r0, r8
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d066      	beq.n	8005b82 <HAL_SD_InitCard+0x2ea>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab8:	0191      	lsls	r1, r2, #6
 8005aba:	d5f5      	bpl.n	8005aa8 <HAL_SD_InitCard+0x210>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005abc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ac6:	02d2      	lsls	r2, r2, #11
 8005ac8:	d407      	bmi.n	8005ada <HAL_SD_InitCard+0x242>
          hsd->Instance->POWER = 0x13U;
 8005aca:	2113      	movs	r1, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
          hsd->Instance->POWER = 0x13U;
 8005ad0:	6019      	str	r1, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	639a      	str	r2, [r3, #56]	; 0x38
 8005ad6:	6820      	ldr	r0, [r4, #0]
 8005ad8:	e769      	b.n	80059ae <HAL_SD_InitCard+0x116>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005ada:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8005ade:	e719      	b.n	8005914 <HAL_SD_InitCard+0x7c>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ae0:	4601      	mov	r1, r0
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	f001 fafc 	bl	80070e0 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005ae8:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005aea:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	f001 faf7 	bl	80070e0 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005af2:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005af4:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005af6:	6820      	ldr	r0, [r4, #0]
 8005af8:	f001 faf2 	bl	80070e0 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005afc:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005afe:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b00:	6820      	ldr	r0, [r4, #0]
 8005b02:	f001 faed 	bl	80070e0 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b08:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d03c      	beq.n	8005b88 <HAL_SD_InitCard+0x2f0>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005b0e:	f10d 0116 	add.w	r1, sp, #22
 8005b12:	6820      	ldr	r0, [r4, #0]
 8005b14:	f001 fee4 	bl	80078e0 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	f47f af7e 	bne.w	8005a1a <HAL_SD_InitCard+0x182>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	2a03      	cmp	r2, #3
 8005b24:	f43f af4e 	beq.w	80059c4 <HAL_SD_InitCard+0x12c>
    hsd->SdCard.RelCardAdd = sd_rca;
 8005b28:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b2c:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 8005b2e:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b30:	0409      	lsls	r1, r1, #16
 8005b32:	f001 fe99 	bl	8007868 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b36:	2800      	cmp	r0, #0
 8005b38:	f47f af6f 	bne.w	8005a1a <HAL_SD_InitCard+0x182>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b3c:	4601      	mov	r1, r0
 8005b3e:	6820      	ldr	r0, [r4, #0]
 8005b40:	f001 face 	bl	80070e0 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b44:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b46:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b48:	6820      	ldr	r0, [r4, #0]
 8005b4a:	f001 fac9 	bl	80070e0 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b4e:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b50:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b52:	6820      	ldr	r0, [r4, #0]
 8005b54:	f001 fac4 	bl	80070e0 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b58:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b5a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	f001 fabf 	bl	80070e0 <SDMMC_GetResponse>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	66e0      	str	r0, [r4, #108]	; 0x6c
 8005b66:	e72d      	b.n	80059c4 <HAL_SD_InitCard+0x12c>
 8005b68:	014f8b59 	.word	0x014f8b59
 8005b6c:	00012110 	.word	0x00012110
 8005b70:	c1100000 	.word	0xc1100000
 8005b74:	1fe00fff 	.word	0x1fe00fff
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005b78:	9b06      	ldr	r3, [sp, #24]
 8005b7a:	42b3      	cmp	r3, r6
 8005b7c:	d8ad      	bhi.n	8005ada <HAL_SD_InitCard+0x242>
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	e715      	b.n	80059ae <HAL_SD_InitCard+0x116>
            return HAL_SD_ERROR_TIMEOUT;
 8005b82:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005b86:	e6c5      	b.n	8005914 <HAL_SD_InitCard+0x7c>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	e71b      	b.n	80059c4 <HAL_SD_InitCard+0x12c>

08005b8c <HAL_SD_GetCardStatus>:
{
 8005b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b90:	4604      	mov	r4, r0
 8005b92:	b097      	sub	sp, #92	; 0x5c
 8005b94:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8005b96:	f7fa fc03 	bl	80003a0 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005b9a:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8005b9c:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005b9e:	6820      	ldr	r0, [r4, #0]
 8005ba0:	f001 fa9e 	bl	80070e0 <SDMMC_GetResponse>
 8005ba4:	0187      	lsls	r7, r0, #6
 8005ba6:	d422      	bmi.n	8005bee <HAL_SD_GetCardStatus+0x62>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005ba8:	2140      	movs	r1, #64	; 0x40
 8005baa:	6820      	ldr	r0, [r4, #0]
 8005bac:	f001 fab2 	bl	8007114 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bb0:	b308      	cbz	r0, 8005bf6 <HAL_SD_GetCardStatus+0x6a>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005bb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bb4:	63a3      	str	r3, [r4, #56]	; 0x38
 8005bb6:	6823      	ldr	r3, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bb8:	495b      	ldr	r1, [pc, #364]	; (8005d28 <HAL_SD_GetCardStatus+0x19c>)
    hsd->State = HAL_SD_STATE_READY;
 8005bba:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bbc:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005bbe:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 8005bc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bc2:	4318      	orrs	r0, r3
 8005bc4:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005bc6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005bca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	f001 faa0 	bl	8007114 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bd4:	b138      	cbz	r0, 8005be6 <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 8005bd6:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	4953      	ldr	r1, [pc, #332]	; (8005d28 <HAL_SD_GetCardStatus+0x19c>)
    status = HAL_ERROR;
 8005bdc:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bde:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005be0:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005be2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005be6:	4630      	mov	r0, r6
 8005be8:	b017      	add	sp, #92	; 0x5c
 8005bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bee:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005bf0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005bf4:	e7e0      	b.n	8005bb8 <HAL_SD_GetCardStatus+0x2c>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bf6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005bf8:	6820      	ldr	r0, [r4, #0]
 8005bfa:	0409      	lsls	r1, r1, #16
 8005bfc:	f001 fcf6 	bl	80075ec <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d1d6      	bne.n	8005bb2 <HAL_SD_GetCardStatus+0x26>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 64U;
 8005c08:	2340      	movs	r3, #64	; 0x40
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005c0a:	2160      	movs	r1, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005c0c:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c0e:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005c10:	2202      	movs	r2, #2
  config.DataLength    = 64U;
 8005c12:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005c14:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005c16:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005c18:	4669      	mov	r1, sp
 8005c1a:	6820      	ldr	r0, [r4, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005c1c:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005c1e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005c20:	f001 fa62 	bl	80070e8 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005c24:	6820      	ldr	r0, [r4, #0]
 8005c26:	f001 fef3 	bl	8007a10 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d1c1      	bne.n	8005bb2 <HAL_SD_GetCardStatus+0x26>
  uint32_t *pData = pSDstatus;
 8005c2e:	af06      	add	r7, sp, #24
 8005c30:	e005      	b.n	8005c3e <HAL_SD_GetCardStatus+0xb2>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005c32:	f7fa fbb5 	bl	80003a0 <HAL_GetTick>
 8005c36:	eba0 0008 	sub.w	r0, r0, r8
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	d013      	beq.n	8005c66 <HAL_SD_GetCardStatus+0xda>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c42:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c48:	d110      	bne.n	8005c6c <HAL_SD_GetCardStatus+0xe0>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005c4a:	0416      	lsls	r6, r2, #16
 8005c4c:	d5f1      	bpl.n	8005c32 <HAL_SD_GetCardStatus+0xa6>
 8005c4e:	f107 0620 	add.w	r6, r7, #32
 8005c52:	e000      	b.n	8005c56 <HAL_SD_GetCardStatus+0xca>
 8005c54:	6823      	ldr	r3, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 fa2c 	bl	80070b4 <SDMMC_ReadFIFO>
 8005c5c:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 8005c60:	42b7      	cmp	r7, r6
 8005c62:	d1f7      	bne.n	8005c54 <HAL_SD_GetCardStatus+0xc8>
 8005c64:	e7e5      	b.n	8005c32 <HAL_SD_GetCardStatus+0xa6>
      return HAL_SD_ERROR_TIMEOUT;
 8005c66:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005c6a:	e7a4      	b.n	8005bb6 <HAL_SD_GetCardStatus+0x2a>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005c6c:	0710      	lsls	r0, r2, #28
 8005c6e:	d455      	bmi.n	8005d1c <HAL_SD_GetCardStatus+0x190>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c72:	0791      	lsls	r1, r2, #30
 8005c74:	d454      	bmi.n	8005d20 <HAL_SD_GetCardStatus+0x194>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c78:	0692      	lsls	r2, r2, #26
 8005c7a:	d50b      	bpl.n	8005c94 <HAL_SD_GetCardStatus+0x108>
 8005c7c:	e052      	b.n	8005d24 <HAL_SD_GetCardStatus+0x198>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005c7e:	f001 fa19 	bl	80070b4 <SDMMC_ReadFIFO>
 8005c82:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005c86:	f7fa fb8b 	bl	80003a0 <HAL_GetTick>
 8005c8a:	eba0 0008 	sub.w	r0, r0, r8
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d0e9      	beq.n	8005c66 <HAL_SD_GetCardStatus+0xda>
 8005c92:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005c94:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005c96:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005c98:	f416 5680 	ands.w	r6, r6, #4096	; 0x1000
 8005c9c:	d1ef      	bne.n	8005c7e <HAL_SD_GetCardStatus+0xf2>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005c9e:	9f06      	ldr	r7, [sp, #24]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005ca0:	9808      	ldr	r0, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005ca2:	0a39      	lsrs	r1, r7, #8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005ca4:	f3c7 1e81 	ubfx	lr, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005ca8:	ea4f 4810 	mov.w	r8, r0, lsr #16
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005cac:	f3c7 1c40 	ubfx	ip, r7, #5, #1
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005cb0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005cb6:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005cba:	f028 07ff 	bic.w	r7, r8, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005cbe:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8005d2c <HAL_SD_GetCardStatus+0x1a0>
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005cc2:	fa5f f982 	uxtb.w	r9, r2
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005cc6:	b289      	uxth	r1, r1
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005cc8:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005ccc:	fa5f f880 	uxtb.w	r8, r0
 8005cd0:	9b07      	ldr	r3, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005cd2:	ea47 0709 	orr.w	r7, r7, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005cd6:	f885 e000 	strb.w	lr, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005cda:	f885 c001 	strb.w	ip, [r5, #1]
 8005cde:	fa93 fe83 	rev.w	lr, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005ce2:	8069      	strh	r1, [r5, #2]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005ce4:	f3c0 5303 	ubfx	r3, r0, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005ce8:	f3c0 2107 	ubfx	r1, r0, #8, #8
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005cec:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005cf0:	f3c2 2c85 	ubfx	ip, r2, #10, #6
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005cf4:	f885 8008 	strb.w	r8, [r5, #8]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005cf8:	f3c2 2001 	ubfx	r0, r2, #8, #2
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005cfc:	7269      	strb	r1, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005cfe:	72ab      	strb	r3, [r5, #10]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005d00:	f3c2 1103 	ubfx	r1, r2, #4, #4
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005d04:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005d08:	f002 020f 	and.w	r2, r2, #15
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005d0c:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005d0e:	f885 c00e 	strb.w	ip, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005d12:	73e8      	strb	r0, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005d14:	7429      	strb	r1, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005d16:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005d18:	74ab      	strb	r3, [r5, #18]
 8005d1a:	e756      	b.n	8005bca <HAL_SD_GetCardStatus+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005d1c:	2008      	movs	r0, #8
 8005d1e:	e74b      	b.n	8005bb8 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d20:	2002      	movs	r0, #2
 8005d22:	e749      	b.n	8005bb8 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 8005d24:	2020      	movs	r0, #32
 8005d26:	e747      	b.n	8005bb8 <HAL_SD_GetCardStatus+0x2c>
 8005d28:	1fe00fff 	.word	0x1fe00fff
 8005d2c:	18000f3a 	.word	0x18000f3a

08005d30 <HAL_SD_GetCardInfo>:
{
 8005d30:	4603      	mov	r3, r0
}
 8005d32:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d36:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d3a:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3e:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d42:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005d44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d46:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d4a:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d4e:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d52:	61cb      	str	r3, [r1, #28]
}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop

08005d58 <HAL_SD_ConfigWideBusOperation>:
{
 8005d58:	b570      	push	{r4, r5, r6, lr}
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d5a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 8005d5c:	2303      	movs	r3, #3
{
 8005d5e:	b08a      	sub	sp, #40	; 0x28
 8005d60:	4604      	mov	r4, r0
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d62:	2a03      	cmp	r2, #3
  hsd->State = HAL_SD_STATE_BUSY;
 8005d64:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8005d68:	460d      	mov	r5, r1
 8005d6a:	6803      	ldr	r3, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d6c:	d025      	beq.n	8005dba <HAL_SD_ConfigWideBusOperation+0x62>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005d6e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005d72:	d022      	beq.n	8005dba <HAL_SD_ConfigWideBusOperation+0x62>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005d74:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005d78:	d064      	beq.n	8005e44 <HAL_SD_ConfigWideBusOperation+0xec>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005d7a:	2900      	cmp	r1, #0
 8005d7c:	d043      	beq.n	8005e06 <HAL_SD_ConfigWideBusOperation+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d7e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005d80:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005d84:	6382      	str	r2, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005d86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d88:	b9f2      	cbnz	r2, 8005dc8 <HAL_SD_ConfigWideBusOperation+0x70>
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8005d8a:	6962      	ldr	r2, [r4, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005d8c:	6921      	ldr	r1, [r4, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8005d8e:	2a03      	cmp	r2, #3
    Init.BusWide             = WideMode;
 8005d90:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005d92:	9107      	str	r1, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005d94:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8005d98:	e9cd 6004 	strd	r6, r0, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8005d9c:	d92a      	bls.n	8005df4 <HAL_SD_ConfigWideBusOperation+0x9c>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8005d9e:	9208      	str	r2, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005da0:	aa0a      	add	r2, sp, #40	; 0x28
 8005da2:	ae04      	add	r6, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005da4:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 8005da6:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8005daa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005dae:	4618      	mov	r0, r3
 8005db0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8005db4:	f001 f964 	bl	8007080 <SDMMC_Init>
 8005db8:	e009      	b.n	8005dce <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005dbc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005dc0:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005dc2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005dc4:	2a00      	cmp	r2, #0
 8005dc6:	d0e0      	beq.n	8005d8a <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dc8:	4a33      	ldr	r2, [pc, #204]	; (8005e98 <HAL_SD_ConfigWideBusOperation+0x140>)
    status = HAL_ERROR;
 8005dca:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005dce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dd2:	6820      	ldr	r0, [r4, #0]
 8005dd4:	f001 f99e 	bl	8007114 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dd8:	b130      	cbz	r0, 8005de8 <HAL_SD_ConfigWideBusOperation+0x90>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dda:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8005ddc:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dde:	4a2e      	ldr	r2, [pc, #184]	; (8005e98 <HAL_SD_ConfigWideBusOperation+0x140>)
 8005de0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005de2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005de4:	4318      	orrs	r0, r3
 8005de6:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8005de8:	2301      	movs	r3, #1
}
 8005dea:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8005dec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005df0:	b00a      	add	sp, #40	; 0x28
 8005df2:	bd70      	pop	{r4, r5, r6, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005df4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005df6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005dfa:	d0d0      	beq.n	8005d9e <HAL_SD_ConfigWideBusOperation+0x46>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005dfc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005e00:	d02d      	beq.n	8005e5e <HAL_SD_ConfigWideBusOperation+0x106>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8005e02:	2204      	movs	r2, #4
 8005e04:	e7cb      	b.n	8005d9e <HAL_SD_ConfigWideBusOperation+0x46>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e06:	4618      	mov	r0, r3
  uint32_t scr[2U] = {0UL, 0UL};
 8005e08:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e0c:	f001 f968 	bl	80070e0 <SDMMC_GetResponse>
 8005e10:	0181      	lsls	r1, r0, #6
 8005e12:	d420      	bmi.n	8005e56 <HAL_SD_ConfigWideBusOperation+0xfe>
  errorstate = SD_FindSCR(hsd, scr);
 8005e14:	a904      	add	r1, sp, #16
 8005e16:	4620      	mov	r0, r4
 8005e18:	f7ff f9fc 	bl	8005214 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e1c:	b968      	cbnz	r0, 8005e3a <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005e1e:	9a05      	ldr	r2, [sp, #20]
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	03d2      	lsls	r2, r2, #15
 8005e24:	d534      	bpl.n	8005e90 <HAL_SD_ConfigWideBusOperation+0x138>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e26:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005e28:	4618      	mov	r0, r3
 8005e2a:	0409      	lsls	r1, r1, #16
 8005e2c:	f001 fbde 	bl	80075ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e30:	b918      	cbnz	r0, 8005e3a <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005e32:	4601      	mov	r1, r0
 8005e34:	6820      	ldr	r0, [r4, #0]
 8005e36:	f001 fc51 	bl	80076dc <SDMMC_CmdBusWidth>
 8005e3a:	6823      	ldr	r3, [r4, #0]
      hsd->ErrorCode |= errorstate;
 8005e3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e3e:	4310      	orrs	r0, r2
 8005e40:	63a0      	str	r0, [r4, #56]	; 0x38
 8005e42:	e7be      	b.n	8005dc2 <HAL_SD_ConfigWideBusOperation+0x6a>
  uint32_t scr[2U] = {0UL, 0UL};
 8005e44:	2200      	movs	r2, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e46:	4618      	mov	r0, r3
 8005e48:	4611      	mov	r1, r2
  uint32_t scr[2U] = {0UL, 0UL};
 8005e4a:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e4e:	f001 f947 	bl	80070e0 <SDMMC_GetResponse>
 8005e52:	0186      	lsls	r6, r0, #6
 8005e54:	d506      	bpl.n	8005e64 <HAL_SD_ConfigWideBusOperation+0x10c>
 8005e56:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005e58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e5c:	e7ee      	b.n	8005e3c <HAL_SD_ConfigWideBusOperation+0xe4>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8005e5e:	2202      	movs	r2, #2
 8005e60:	9208      	str	r2, [sp, #32]
 8005e62:	e79d      	b.n	8005da0 <HAL_SD_ConfigWideBusOperation+0x48>
  errorstate = SD_FindSCR(hsd, scr);
 8005e64:	a904      	add	r1, sp, #16
 8005e66:	4620      	mov	r0, r4
 8005e68:	f7ff f9d4 	bl	8005214 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d1e4      	bne.n	8005e3a <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005e70:	9a05      	ldr	r2, [sp, #20]
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	0350      	lsls	r0, r2, #13
 8005e76:	d50b      	bpl.n	8005e90 <HAL_SD_ConfigWideBusOperation+0x138>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	0409      	lsls	r1, r1, #16
 8005e7e:	f001 fbb5 	bl	80075ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d1d9      	bne.n	8005e3a <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005e86:	2102      	movs	r1, #2
 8005e88:	6820      	ldr	r0, [r4, #0]
 8005e8a:	f001 fc27 	bl	80076dc <SDMMC_CmdBusWidth>
 8005e8e:	e7d4      	b.n	8005e3a <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005e90:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005e94:	e7d2      	b.n	8005e3c <HAL_SD_ConfigWideBusOperation+0xe4>
 8005e96:	bf00      	nop
 8005e98:	1fe00fff 	.word	0x1fe00fff

08005e9c <HAL_SD_Init>:
{
 8005e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9e:	b087      	sub	sp, #28
  if(hsd == NULL)
 8005ea0:	b1a0      	cbz	r0, 8005ecc <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8005ea2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005eac:	b93b      	cbnz	r3, 8005ebe <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8005eae:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 8005eb0:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8005eb2:	b90b      	cbnz	r3, 8005eb8 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f003 f90d 	bl	80090d8 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8005ebe:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005ec0:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8005ec2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005ec6:	f7ff fce7 	bl	8005898 <HAL_SD_InitCard>
 8005eca:	b118      	cbz	r0, 8005ed4 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 8005ecc:	2501      	movs	r5, #1
}
 8005ece:	4628      	mov	r0, r5
 8005ed0:	b007      	add	sp, #28
 8005ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005ed4:	a901      	add	r1, sp, #4
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f7ff fe58 	bl	8005b8c <HAL_SD_GetCardStatus>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d1f5      	bne.n	8005ecc <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005ee0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 8005ee2:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005ee6:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005ee8:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8005eec:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005eee:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005ef0:	d029      	beq.n	8005f46 <HAL_SD_Init+0xaa>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005ef2:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005ef4:	68e1      	ldr	r1, [r4, #12]
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7ff ff2e 	bl	8005d58 <HAL_SD_ConfigWideBusOperation>
 8005efc:	4605      	mov	r5, r0
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d1e4      	bne.n	8005ecc <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 8005f02:	f7fa fa4d 	bl	80003a0 <HAL_GetTick>
 8005f06:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005f08:	e007      	b.n	8005f1a <HAL_SD_Init+0x7e>
    hsd->ErrorCode |= errorstate;
 8005f0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f0c:	431e      	orrs	r6, r3
 8005f0e:	63a6      	str	r6, [r4, #56]	; 0x38
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005f10:	f7fa fa46 	bl	80003a0 <HAL_GetTick>
 8005f14:	1bc0      	subs	r0, r0, r7
 8005f16:	3001      	adds	r0, #1
 8005f18:	d01d      	beq.n	8005f56 <HAL_SD_Init+0xba>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f1a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005f1c:	6820      	ldr	r0, [r4, #0]
 8005f1e:	0409      	lsls	r1, r1, #16
 8005f20:	f001 fd32 	bl	8007988 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f24:	4606      	mov	r6, r0
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d1ef      	bne.n	8005f0a <HAL_SD_Init+0x6e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	6820      	ldr	r0, [r4, #0]
 8005f2e:	f001 f8d7 	bl	80070e0 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005f32:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005f36:	2804      	cmp	r0, #4
 8005f38:	d1ea      	bne.n	8005f10 <HAL_SD_Init+0x74>
  hsd->State = HAL_SD_STATE_READY;
 8005f3a:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f3c:	63a6      	str	r6, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005f3e:	6326      	str	r6, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005f40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005f44:	e7c3      	b.n	8005ece <HAL_SD_Init+0x32>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005f46:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005f48:	bf14      	ite	ne
 8005f4a:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005f4e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8005f52:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005f54:	e7ce      	b.n	8005ef4 <HAL_SD_Init+0x58>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005f56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 8005f5a:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8005f5c:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005f5e:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005f60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8005f64:	e7b3      	b.n	8005ece <HAL_SD_Init+0x32>
 8005f66:	bf00      	nop

08005f68 <HAL_SD_GetCardState>:
{
 8005f68:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f6a:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8005f6c:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f6e:	6800      	ldr	r0, [r0, #0]
 8005f70:	0409      	lsls	r1, r1, #16
 8005f72:	f001 fd09 	bl	8007988 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f76:	4601      	mov	r1, r0
 8005f78:	b120      	cbz	r0, 8005f84 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8005f7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	4319      	orrs	r1, r3
 8005f80:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8005f82:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f84:	6820      	ldr	r0, [r4, #0]
 8005f86:	f001 f8ab 	bl	80070e0 <SDMMC_GetResponse>
 8005f8a:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8005f8e:	bd10      	pop	{r4, pc}

08005f90 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop

08005f94 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop

08005f98 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop

08005f9c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop

08005fa0 <HAL_SD_IRQHandler>:
{
 8005fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fa2:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005fa4:	6800      	ldr	r0, [r0, #0]
{
 8005fa6:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 8005fa8:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005faa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005fac:	041b      	lsls	r3, r3, #16
 8005fae:	d502      	bpl.n	8005fb6 <HAL_SD_IRQHandler+0x16>
 8005fb0:	072f      	lsls	r7, r5, #28
 8005fb2:	f100 80b6 	bmi.w	8006122 <HAL_SD_IRQHandler+0x182>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005fb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005fb8:	05de      	lsls	r6, r3, #23
 8005fba:	d528      	bpl.n	800600e <HAL_SD_IRQHandler+0x6e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005fc0:	4b98      	ldr	r3, [pc, #608]	; (8006224 <HAL_SD_IRQHandler+0x284>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005fc2:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005fc4:	6822      	ldr	r2, [r4, #0]
 8005fc6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005fc8:	400b      	ands	r3, r1
 8005fca:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005fcc:	6822      	ldr	r2, [r4, #0]
 8005fce:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd4:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005fd6:	6822      	ldr	r2, [r4, #0]
 8005fd8:	68d3      	ldr	r3, [r2, #12]
 8005fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fde:	60d3      	str	r3, [r2, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 8005fe0:	f015 0308 	ands.w	r3, r5, #8
 8005fe4:	d075      	beq.n	80060d2 <HAL_SD_IRQHandler+0x132>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005fe6:	f015 0f22 	tst.w	r5, #34	; 0x22
 8005fea:	6820      	ldr	r0, [r4, #0]
 8005fec:	f040 80be 	bne.w	800616c <HAL_SD_IRQHandler+0x1cc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ff0:	498d      	ldr	r1, [pc, #564]	; (8006228 <HAL_SD_IRQHandler+0x288>)
      hsd->State = HAL_SD_STATE_READY;
 8005ff2:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8005ff4:	2300      	movs	r3, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ff6:	6381      	str	r1, [r0, #56]	; 0x38
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005ff8:	07a9      	lsls	r1, r5, #30
      hsd->State = HAL_SD_STATE_READY;
 8005ffa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ffe:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006000:	f000 80af 	beq.w	8006162 <HAL_SD_IRQHandler+0x1c2>
        HAL_SD_RxCpltCallback(hsd);
 8006004:	4620      	mov	r0, r4
 8006006:	f001 ff61 	bl	8007ecc <HAL_SD_RxCpltCallback>
}
 800600a:	b003      	add	sp, #12
 800600c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800600e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006010:	045e      	lsls	r6, r3, #17
 8006012:	d502      	bpl.n	800601a <HAL_SD_IRQHandler+0x7a>
 8006014:	0729      	lsls	r1, r5, #28
 8006016:	f100 80b0 	bmi.w	800617a <HAL_SD_IRQHandler+0x1da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800601a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800601c:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006020:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006022:	d06d      	beq.n	8006100 <HAL_SD_IRQHandler+0x160>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006024:	079a      	lsls	r2, r3, #30
 8006026:	d503      	bpl.n	8006030 <HAL_SD_IRQHandler+0x90>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006028:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800602a:	f043 0302 	orr.w	r3, r3, #2
 800602e:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006030:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006032:	071b      	lsls	r3, r3, #28
 8006034:	d503      	bpl.n	800603e <HAL_SD_IRQHandler+0x9e>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006036:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006038:	f043 0308 	orr.w	r3, r3, #8
 800603c:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800603e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006040:	069f      	lsls	r7, r3, #26
 8006042:	d503      	bpl.n	800604c <HAL_SD_IRQHandler+0xac>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006044:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006046:	f043 0320 	orr.w	r3, r3, #32
 800604a:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800604c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800604e:	06de      	lsls	r6, r3, #27
 8006050:	d503      	bpl.n	800605a <HAL_SD_IRQHandler+0xba>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006052:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006054:	f043 0310 	orr.w	r3, r3, #16
 8006058:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800605a:	4b73      	ldr	r3, [pc, #460]	; (8006228 <HAL_SD_IRQHandler+0x288>)
 800605c:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800605e:	6822      	ldr	r2, [r4, #0]
 8006060:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006062:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8006066:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006068:	6822      	ldr	r2, [r4, #0]
 800606a:	68d3      	ldr	r3, [r2, #12]
 800606c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006070:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006072:	6822      	ldr	r2, [r4, #0]
 8006074:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006076:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800607a:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800607c:	6822      	ldr	r2, [r4, #0]
 800607e:	68d3      	ldr	r3, [r2, #12]
 8006080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006084:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006086:	6820      	ldr	r0, [r4, #0]
 8006088:	f001 f998 	bl	80073bc <SDMMC_CmdStopTransfer>
 800608c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800608e:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006090:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006094:	4318      	orrs	r0, r3
 8006096:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006098:	68d3      	ldr	r3, [r2, #12]
 800609a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800609e:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	6399      	str	r1, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80060a4:	f015 0308 	ands.w	r3, r5, #8
 80060a8:	f040 808f 	bne.w	80061ca <HAL_SD_IRQHandler+0x22a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80060ac:	0629      	lsls	r1, r5, #24
 80060ae:	d5ac      	bpl.n	800600a <HAL_SD_IRQHandler+0x6a>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80060b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80060b2:	2a00      	cmp	r2, #0
 80060b4:	d0a9      	beq.n	800600a <HAL_SD_IRQHandler+0x6a>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80060b6:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 80060b8:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 80060ba:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80060bc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80060be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80060c2:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80060c4:	6822      	ldr	r2, [r4, #0]
 80060c6:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80060c8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80060cc:	f7ff fb02 	bl	80056d4 <HAL_SD_ErrorCallback>
 80060d0:	e79b      	b.n	800600a <HAL_SD_IRQHandler+0x6a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80060d2:	062a      	lsls	r2, r5, #24
 80060d4:	d599      	bpl.n	800600a <HAL_SD_IRQHandler+0x6a>
      hsd->Instance->DLEN = 0;
 80060d6:	6822      	ldr	r2, [r4, #0]
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80060d8:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 80060dc:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	6513      	str	r3, [r2, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80060e6:	f040 8088 	bne.w	80061fa <HAL_SD_IRQHandler+0x25a>
      hsd->State = HAL_SD_STATE_READY;
 80060ea:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 80060ec:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80060ee:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 80060f2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060f6:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80060f8:	d17b      	bne.n	80061f2 <HAL_SD_IRQHandler+0x252>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80060fa:	07af      	lsls	r7, r5, #30
 80060fc:	d085      	beq.n	800600a <HAL_SD_IRQHandler+0x6a>
 80060fe:	e781      	b.n	8006004 <HAL_SD_IRQHandler+0x64>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006100:	00da      	lsls	r2, r3, #3
 8006102:	d582      	bpl.n	800600a <HAL_SD_IRQHandler+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006104:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006108:	f005 0520 	and.w	r5, r5, #32
 800610c:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800610e:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006114:	075b      	lsls	r3, r3, #29
 8006116:	d461      	bmi.n	80061dc <HAL_SD_IRQHandler+0x23c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006118:	2d00      	cmp	r5, #0
 800611a:	d07c      	beq.n	8006216 <HAL_SD_IRQHandler+0x276>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800611c:	f7ff ff3e 	bl	8005f9c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 8006120:	e773      	b.n	800600a <HAL_SD_IRQHandler+0x6a>
  if (hsd->RxXferSize >= 32U)
 8006122:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006124:	2b1f      	cmp	r3, #31
 8006126:	f67f af70 	bls.w	800600a <HAL_SD_IRQHandler+0x6a>
  tmp = hsd->pRxBuffPtr;
 800612a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800612c:	1d3d      	adds	r5, r7, #4
 800612e:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8006132:	e000      	b.n	8006136 <HAL_SD_IRQHandler+0x196>
 8006134:	6820      	ldr	r0, [r4, #0]
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006136:	f000 ffbd 	bl	80070b4 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800613a:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800613e:	0a02      	lsrs	r2, r0, #8
 8006140:	3504      	adds	r5, #4
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006142:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006144:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006146:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800614a:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800614e:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 8006152:	42ae      	cmp	r6, r5
 8006154:	d1ee      	bne.n	8006134 <HAL_SD_IRQHandler+0x194>
    hsd->RxXferSize -= 32U;
 8006156:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hsd->pRxBuffPtr = tmp;
 8006158:	3720      	adds	r7, #32
    hsd->RxXferSize -= 32U;
 800615a:	3b20      	subs	r3, #32
 800615c:	e9c4 730a 	strd	r7, r3, [r4, #40]	; 0x28
 8006160:	e753      	b.n	800600a <HAL_SD_IRQHandler+0x6a>
        HAL_SD_TxCpltCallback(hsd);
 8006162:	4620      	mov	r0, r4
 8006164:	f001 feac 	bl	8007ec0 <HAL_SD_TxCpltCallback>
}
 8006168:	b003      	add	sp, #12
 800616a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800616c:	f001 f926 	bl	80073bc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006170:	4603      	mov	r3, r0
 8006172:	2800      	cmp	r0, #0
 8006174:	d136      	bne.n	80061e4 <HAL_SD_IRQHandler+0x244>
 8006176:	6820      	ldr	r0, [r4, #0]
 8006178:	e73a      	b.n	8005ff0 <HAL_SD_IRQHandler+0x50>
  if (hsd->TxXferSize >= 32U)
 800617a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800617c:	2b1f      	cmp	r3, #31
 800617e:	f67f af44 	bls.w	800600a <HAL_SD_IRQHandler+0x6a>
  tmp = hsd->pTxBuffPtr;
 8006182:	6a26      	ldr	r6, [r4, #32]
 8006184:	1d37      	adds	r7, r6, #4
 8006186:	f106 0524 	add.w	r5, r6, #36	; 0x24
 800618a:	e000      	b.n	800618e <HAL_SD_IRQHandler+0x1ee>
 800618c:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800618e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8006192:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006194:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 8006196:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8006198:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800619c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061a0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80061a2:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 80061a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061aa:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80061ac:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 80061b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80061b4:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80061b6:	f000 ff81 	bl	80070bc <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80061ba:	42bd      	cmp	r5, r7
 80061bc:	d1e6      	bne.n	800618c <HAL_SD_IRQHandler+0x1ec>
    hsd->TxXferSize -= 32U;
 80061be:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsd->pTxBuffPtr = tmp;
 80061c0:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 80061c2:	3b20      	subs	r3, #32
 80061c4:	e9c4 6308 	strd	r6, r3, [r4, #32]
 80061c8:	e71f      	b.n	800600a <HAL_SD_IRQHandler+0x6a>
      hsd->State = HAL_SD_STATE_READY;
 80061ca:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 80061cc:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 80061ce:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 80061d0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061d4:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80061d6:	f7ff fa7d 	bl	80056d4 <HAL_SD_ErrorCallback>
 80061da:	e716      	b.n	800600a <HAL_SD_IRQHandler+0x6a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80061dc:	b9f5      	cbnz	r5, 800621c <HAL_SD_IRQHandler+0x27c>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80061de:	f7ff fed7 	bl	8005f90 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80061e2:	e712      	b.n	800600a <HAL_SD_IRQHandler+0x6a>
          hsd->ErrorCode |= errorstate;
 80061e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80061e6:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 80061e8:	4313      	orrs	r3, r2
 80061ea:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80061ec:	f7ff fa72 	bl	80056d4 <HAL_SD_ErrorCallback>
 80061f0:	e7c1      	b.n	8006176 <HAL_SD_IRQHandler+0x1d6>
        HAL_SD_TxCpltCallback(hsd);
 80061f2:	4620      	mov	r0, r4
 80061f4:	f001 fe64 	bl	8007ec0 <HAL_SD_TxCpltCallback>
 80061f8:	e77f      	b.n	80060fa <HAL_SD_IRQHandler+0x15a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80061fa:	6820      	ldr	r0, [r4, #0]
 80061fc:	f001 f8de 	bl	80073bc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006200:	4603      	mov	r3, r0
 8006202:	2800      	cmp	r0, #0
 8006204:	f43f af71 	beq.w	80060ea <HAL_SD_IRQHandler+0x14a>
          hsd->ErrorCode |= errorstate;
 8006208:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800620a:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800620c:	4313      	orrs	r3, r2
 800620e:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006210:	f7ff fa60 	bl	80056d4 <HAL_SD_ErrorCallback>
 8006214:	e769      	b.n	80060ea <HAL_SD_IRQHandler+0x14a>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006216:	f7ff febd 	bl	8005f94 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800621a:	e6f6      	b.n	800600a <HAL_SD_IRQHandler+0x6a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800621c:	f7ff febc 	bl	8005f98 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 8006220:	e6f3      	b.n	800600a <HAL_SD_IRQHandler+0x6a>
 8006222:	bf00      	nop
 8006224:	ffff3ec5 	.word	0xffff3ec5
 8006228:	18000f3a 	.word	0x18000f3a

0800622c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800622c:	b310      	cbz	r0, 8006274 <HAL_SDRAM_Init+0x48>
{
 800622e:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006230:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006234:	4604      	mov	r4, r0
 8006236:	460d      	mov	r5, r1
 8006238:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800623c:	b1ab      	cbz	r3, 800626a <HAL_SDRAM_Init+0x3e>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800623e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006240:	1d21      	adds	r1, r4, #4
 8006242:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006244:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006248:	f000 fe18 	bl	8006e7c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800624c:	4629      	mov	r1, r5
 800624e:	e9d4 0200 	ldrd	r0, r2, [r4]
 8006252:	f000 fe4b 	bl	8006eec <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006256:	4a08      	ldr	r2, [pc, #32]	; (8006278 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006258:	2101      	movs	r1, #1

  return HAL_OK;
 800625a:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800625c:	6813      	ldr	r3, [r2, #0]
 800625e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006262:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006264:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 8006268:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800626a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800626e:	f001 fef7 	bl	8008060 <HAL_SDRAM_MspInit>
 8006272:	e7e4      	b.n	800623e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8006274:	2001      	movs	r0, #1
}
 8006276:	4770      	bx	lr
 8006278:	52004000 	.word	0x52004000

0800627c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800627c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006280:	b2db      	uxtb	r3, r3
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006282:	2b02      	cmp	r3, #2
 8006284:	d015      	beq.n	80062b2 <HAL_SDRAM_SendCommand+0x36>
{
 8006286:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006288:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
 800628c:	2c01      	cmp	r4, #1
 800628e:	d001      	beq.n	8006294 <HAL_SDRAM_SendCommand+0x18>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8006290:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006292:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006294:	2302      	movs	r3, #2
 8006296:	4605      	mov	r5, r0
 8006298:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800629a:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800629c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80062a0:	f000 fe6a 	bl	8006f78 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80062a4:	6833      	ldr	r3, [r6, #0]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d005      	beq.n	80062b6 <HAL_SDRAM_SendCommand+0x3a>
      hsdram->State = HAL_SDRAM_STATE_READY;
 80062aa:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  return HAL_OK;
 80062ae:	2000      	movs	r0, #0
}
 80062b0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80062b2:	4618      	mov	r0, r3
}
 80062b4:	4770      	bx	lr
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80062b6:	2305      	movs	r3, #5
  return HAL_OK;
 80062b8:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80062ba:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 80062be:	bd70      	pop	{r4, r5, r6, pc}

080062c0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80062c0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80062c2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d006      	beq.n	80062da <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80062cc:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80062d0:	b2ed      	uxtb	r5, r5
 80062d2:	2d01      	cmp	r5, #1
 80062d4:	d003      	beq.n	80062de <HAL_SDRAM_ProgramRefreshRate+0x1e>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 80062d6:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80062d8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80062da:	4618      	mov	r0, r3
}
 80062dc:	bd38      	pop	{r3, r4, r5, pc}
 80062de:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062e0:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80062e2:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80062e8:	f000 fe58 	bl	8006f9c <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 80062ec:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  return HAL_OK;
 80062f0:	2000      	movs	r0, #0
}
 80062f2:	bd38      	pop	{r3, r4, r5, pc}

080062f4 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 80062f4:	6801      	ldr	r1, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80062f6:	4a30      	ldr	r2, [pc, #192]	; (80063b8 <SPI_CloseTransfer+0xc4>)
{
 80062f8:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 80062fa:	694b      	ldr	r3, [r1, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80062fc:	698c      	ldr	r4, [r1, #24]
 80062fe:	f044 0408 	orr.w	r4, r4, #8
 8006302:	618c      	str	r4, [r1, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006304:	6804      	ldr	r4, [r0, #0]
 8006306:	69a1      	ldr	r1, [r4, #24]
 8006308:	f041 0110 	orr.w	r1, r1, #16
 800630c:	61a1      	str	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800630e:	6804      	ldr	r4, [r0, #0]
 8006310:	6821      	ldr	r1, [r4, #0]
 8006312:	f021 0101 	bic.w	r1, r1, #1
 8006316:	6021      	str	r1, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006318:	6801      	ldr	r1, [r0, #0]
 800631a:	690c      	ldr	r4, [r1, #16]
 800631c:	4022      	ands	r2, r4
 800631e:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006320:	6801      	ldr	r1, [r0, #0]
 8006322:	688a      	ldr	r2, [r1, #8]
 8006324:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006328:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800632a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800632e:	2a04      	cmp	r2, #4
 8006330:	d001      	beq.n	8006336 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006332:	069c      	lsls	r4, r3, #26
 8006334:	d433      	bmi.n	800639e <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006336:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800633a:	2a03      	cmp	r2, #3
 800633c:	d001      	beq.n	8006342 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800633e:	0659      	lsls	r1, r3, #25
 8006340:	d421      	bmi.n	8006386 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006342:	059a      	lsls	r2, r3, #22
 8006344:	d50a      	bpl.n	800635c <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006346:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800634a:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006354:	698a      	ldr	r2, [r1, #24]
 8006356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635a:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800635c:	05db      	lsls	r3, r3, #23
 800635e:	d50a      	bpl.n	8006376 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006360:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006364:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006366:	f043 0308 	orr.w	r3, r3, #8
 800636a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800636e:	6993      	ldr	r3, [r2, #24]
 8006370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006374:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006376:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8006378:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800637c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006380:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8006384:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006386:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800638a:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800638c:	f042 0204 	orr.w	r2, r2, #4
 8006390:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006394:	698a      	ldr	r2, [r1, #24]
 8006396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800639a:	618a      	str	r2, [r1, #24]
 800639c:	e7d1      	b.n	8006342 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800639e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80063a2:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80063a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063a8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80063ac:	698a      	ldr	r2, [r1, #24]
 80063ae:	f042 0220 	orr.w	r2, r2, #32
 80063b2:	618a      	str	r2, [r1, #24]
 80063b4:	e7bf      	b.n	8006336 <SPI_CloseTransfer+0x42>
 80063b6:	bf00      	nop
 80063b8:	fffffc90 	.word	0xfffffc90

080063bc <HAL_SPI_Init>:
  if (hspi == NULL)
 80063bc:	2800      	cmp	r0, #0
 80063be:	f000 809b 	beq.w	80064f8 <HAL_SPI_Init+0x13c>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80063c2:	4955      	ldr	r1, [pc, #340]	; (8006518 <HAL_SPI_Init+0x15c>)
{
 80063c4:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80063c6:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063c8:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80063ca:	428a      	cmp	r2, r1
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063cc:	6283      	str	r3, [r0, #40]	; 0x28
 80063ce:	68c3      	ldr	r3, [r0, #12]
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80063d0:	d013      	beq.n	80063fa <HAL_SPI_Init+0x3e>
 80063d2:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 80063d6:	428a      	cmp	r2, r1
 80063d8:	d00f      	beq.n	80063fa <HAL_SPI_Init+0x3e>
 80063da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063de:	428a      	cmp	r2, r1
 80063e0:	d075      	beq.n	80064ce <HAL_SPI_Init+0x112>
 80063e2:	2b0f      	cmp	r3, #15
 80063e4:	d807      	bhi.n	80063f6 <HAL_SPI_Init+0x3a>
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80063e6:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80063e8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80063ea:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80063ec:	0949      	lsrs	r1, r1, #5

  return data_size * fifo_threashold;
 80063ee:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	d907      	bls.n	8006406 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 80063f6:	2001      	movs	r0, #1
}
 80063f8:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 80063fa:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80063fc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80063fe:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006400:	0949      	lsrs	r1, r1, #5
  return data_size * fifo_threashold;
 8006402:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006406:	4c44      	ldr	r4, [pc, #272]	; (8006518 <HAL_SPI_Init+0x15c>)
 8006408:	4944      	ldr	r1, [pc, #272]	; (800651c <HAL_SPI_Init+0x160>)
 800640a:	428a      	cmp	r2, r1
 800640c:	bf18      	it	ne
 800640e:	42a2      	cmpne	r2, r4
 8006410:	d063      	beq.n	80064da <HAL_SPI_Init+0x11e>
 8006412:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006416:	428a      	cmp	r2, r1
 8006418:	d05f      	beq.n	80064da <HAL_SPI_Init+0x11e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800641a:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800641e:	4604      	mov	r4, r0
 8006420:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8006424:	2b00      	cmp	r3, #0
 8006426:	d061      	beq.n	80064ec <HAL_SPI_Init+0x130>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006428:	2302      	movs	r3, #2
 800642a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800642e:	6813      	ldr	r3, [r2, #0]
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006436:	69a3      	ldr	r3, [r4, #24]
 8006438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800643c:	d05e      	beq.n	80064fc <HAL_SPI_Init+0x140>
 800643e:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006440:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006442:	69e3      	ldr	r3, [r4, #28]
 8006444:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006446:	430b      	orrs	r3, r1
 8006448:	68e1      	ldr	r1, [r4, #12]
 800644a:	4303      	orrs	r3, r0
 800644c:	430b      	orrs	r3, r1
 800644e:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006450:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006454:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006456:	4313      	orrs	r3, r2
 8006458:	69a1      	ldr	r1, [r4, #24]
 800645a:	6922      	ldr	r2, [r4, #16]
 800645c:	4303      	orrs	r3, r0
 800645e:	6965      	ldr	r5, [r4, #20]
 8006460:	6a20      	ldr	r0, [r4, #32]
 8006462:	430b      	orrs	r3, r1
 8006464:	6861      	ldr	r1, [r4, #4]
 8006466:	4313      	orrs	r3, r2
 8006468:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800646a:	432b      	orrs	r3, r5
 800646c:	68a5      	ldr	r5, [r4, #8]
 800646e:	4303      	orrs	r3, r0
 8006470:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006472:	430b      	orrs	r3, r1
 8006474:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006476:	4313      	orrs	r3, r2
 8006478:	6822      	ldr	r2, [r4, #0]
 800647a:	432b      	orrs	r3, r5
 800647c:	4303      	orrs	r3, r0
 800647e:	430b      	orrs	r3, r1
 8006480:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006482:	6863      	ldr	r3, [r4, #4]
 8006484:	b96b      	cbnz	r3, 80064a2 <HAL_SPI_Init+0xe6>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006486:	6822      	ldr	r2, [r4, #0]
 8006488:	6893      	ldr	r3, [r2, #8]
 800648a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800648e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006492:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006494:	6822      	ldr	r2, [r4, #0]
 8006496:	6893      	ldr	r3, [r2, #8]
 8006498:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800649c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064a0:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064a2:	6822      	ldr	r2, [r4, #0]
 80064a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80064a6:	f023 0301 	bic.w	r3, r3, #1
 80064aa:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80064ac:	6863      	ldr	r3, [r4, #4]
 80064ae:	025b      	lsls	r3, r3, #9
 80064b0:	d506      	bpl.n	80064c0 <HAL_SPI_Init+0x104>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80064b2:	6822      	ldr	r2, [r4, #0]
 80064b4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80064b6:	68d3      	ldr	r3, [r2, #12]
 80064b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064bc:	430b      	orrs	r3, r1
 80064be:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064c0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80064c2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064c4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80064c8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80064cc:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 80064ce:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80064d0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80064d2:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80064d4:	0949      	lsrs	r1, r1, #5
  return data_size * fifo_threashold;
 80064d6:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80064da:	2b10      	cmp	r3, #16
 80064dc:	d88b      	bhi.n	80063f6 <HAL_SPI_Init+0x3a>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80064de:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80064e2:	4604      	mov	r4, r0
 80064e4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d19d      	bne.n	8006428 <HAL_SPI_Init+0x6c>
    hspi->Lock = HAL_UNLOCKED;
 80064ec:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 80064f0:	f002 feaa 	bl	8009248 <HAL_SPI_MspInit>
 80064f4:	6822      	ldr	r2, [r4, #0]
 80064f6:	e797      	b.n	8006428 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 80064f8:	2001      	movs	r0, #1
}
 80064fa:	4770      	bx	lr
 80064fc:	e9d4 2300 	ldrd	r2, r3, [r4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006504:	d19c      	bne.n	8006440 <HAL_SPI_Init+0x84>
 8006506:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006508:	2b00      	cmp	r3, #0
 800650a:	d199      	bne.n	8006440 <HAL_SPI_Init+0x84>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800650c:	6813      	ldr	r3, [r2, #0]
 800650e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	e793      	b.n	800643e <HAL_SPI_Init+0x82>
 8006516:	bf00      	nop
 8006518:	40013000 	.word	0x40013000
 800651c:	40003800 	.word	0x40003800

08006520 <HAL_SPI_Transmit_DMA>:
{
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 8006524:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 8006528:	2801      	cmp	r0, #1
 800652a:	f000 8082 	beq.w	8006632 <HAL_SPI_Transmit_DMA+0x112>
 800652e:	2401      	movs	r4, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 8006530:	f893 0081 	ldrb.w	r0, [r3, #129]	; 0x81
 8006534:	42a0      	cmp	r0, r4
  __HAL_LOCK(hspi);
 8006536:	f883 4080 	strb.w	r4, [r3, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800653a:	d167      	bne.n	800660c <HAL_SPI_Transmit_DMA+0xec>
  if ((pData == NULL) || (Size == 0UL))
 800653c:	2900      	cmp	r1, #0
 800653e:	d06d      	beq.n	800661c <HAL_SPI_Transmit_DMA+0xfc>
 8006540:	fab2 f082 	clz	r0, r2
 8006544:	0940      	lsrs	r0, r0, #5
 8006546:	2800      	cmp	r0, #0
 8006548:	d168      	bne.n	800661c <HAL_SPI_Transmit_DMA+0xfc>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800654a:	689c      	ldr	r4, [r3, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800654c:	2503      	movs	r5, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800654e:	65d9      	str	r1, [r3, #92]	; 0x5c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006550:	f5b4 2fc0 	cmp.w	r4, #393216	; 0x60000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006554:	f883 5081 	strb.w	r5, [r3, #129]	; 0x81
  hspi->TxXferSize  = Size;
 8006558:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800655c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = NULL;
 8006560:	6658      	str	r0, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8006562:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferSize  = (uint16_t)0UL;
 8006566:	f8a3 0068 	strh.w	r0, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800656a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800656e:	e9c3 001c 	strd	r0, r0, [r3, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006572:	d058      	beq.n	8006626 <HAL_SPI_Transmit_DMA+0x106>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006574:	68dc      	ldr	r4, [r3, #12]
 8006576:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8006578:	2c0f      	cmp	r4, #15
 800657a:	6988      	ldr	r0, [r1, #24]
 800657c:	d84b      	bhi.n	8006616 <HAL_SPI_Transmit_DMA+0xf6>
 800657e:	2c07      	cmp	r4, #7
 8006580:	d879      	bhi.n	8006676 <HAL_SPI_Transmit_DMA+0x156>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006582:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8006586:	d067      	beq.n	8006658 <HAL_SPI_Transmit_DMA+0x138>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006588:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800658c:	d06c      	beq.n	8006668 <HAL_SPI_Transmit_DMA+0x148>
 800658e:	461d      	mov	r5, r3
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006590:	4b41      	ldr	r3, [pc, #260]	; (8006698 <HAL_SPI_Transmit_DMA+0x178>)
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006592:	4842      	ldr	r0, [pc, #264]	; (800669c <HAL_SPI_Transmit_DMA+0x17c>)
 8006594:	4614      	mov	r4, r2
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006596:	640b      	str	r3, [r1, #64]	; 0x40
  hspi->hdmatx->XferAbortCallback = NULL;
 8006598:	2200      	movs	r2, #0
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800659a:	6fab      	ldr	r3, [r5, #120]	; 0x78
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800659c:	4940      	ldr	r1, [pc, #256]	; (80066a0 <HAL_SPI_Transmit_DMA+0x180>)
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800659e:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80065a0:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80065a2:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 80065a4:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80065a6:	651a      	str	r2, [r3, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80065a8:	682a      	ldr	r2, [r5, #0]
 80065aa:	6893      	ldr	r3, [r2, #8]
 80065ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065b0:	6093      	str	r3, [r2, #8]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 80065b2:	682a      	ldr	r2, [r5, #0]
 80065b4:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 80065b8:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80065ba:	3220      	adds	r2, #32
 80065bc:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 80065be:	f7fb f8a3 	bl	8001708 <HAL_DMA_Start_IT>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d137      	bne.n	8006636 <HAL_SPI_Transmit_DMA+0x116>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80065c6:	6faa      	ldr	r2, [r5, #120]	; 0x78
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	69d2      	ldr	r2, [r2, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80065cc:	6859      	ldr	r1, [r3, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80065ce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80065d2:	4a34      	ldr	r2, [pc, #208]	; (80066a4 <HAL_SPI_Transmit_DMA+0x184>)
 80065d4:	ea02 0201 	and.w	r2, r2, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80065d8:	bf18      	it	ne
 80065da:	4322      	orrne	r2, r4
 80065dc:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80065de:	682a      	ldr	r2, [r5, #0]
 80065e0:	6893      	ldr	r3, [r2, #8]
 80065e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e6:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80065e8:	682a      	ldr	r2, [r5, #0]
 80065ea:	6913      	ldr	r3, [r2, #16]
 80065ec:	f443 7348 	orr.w	r3, r3, #800	; 0x320
 80065f0:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 80065f2:	682a      	ldr	r2, [r5, #0]
 80065f4:	6813      	ldr	r3, [r2, #0]
 80065f6:	f043 0301 	orr.w	r3, r3, #1
 80065fa:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065fc:	686b      	ldr	r3, [r5, #4]
 80065fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006602:	d023      	beq.n	800664c <HAL_SPI_Transmit_DMA+0x12c>
  __HAL_UNLOCK(hspi);
 8006604:	2300      	movs	r3, #0
 8006606:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
}
 800660a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hspi);
 800660c:	2200      	movs	r2, #0
    return errorcode;
 800660e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 8006610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8006614:	bd38      	pop	{r3, r4, r5, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006616:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800661a:	d0b8      	beq.n	800658e <HAL_SPI_Transmit_DMA+0x6e>
    __HAL_UNLOCK(hspi);
 800661c:	2200      	movs	r2, #0
    return errorcode;
 800661e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8006620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8006624:	bd38      	pop	{r3, r4, r5, pc}
    SPI_1LINE_TX(hspi);
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	6801      	ldr	r1, [r0, #0]
 800662a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800662e:	6001      	str	r1, [r0, #0]
 8006630:	e7a0      	b.n	8006574 <HAL_SPI_Transmit_DMA+0x54>
  __HAL_LOCK(hspi);
 8006632:	2002      	movs	r0, #2
}
 8006634:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006636:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800663a:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800663c:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 8006640:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006642:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006646:	f885 2081 	strb.w	r2, [r5, #129]	; 0x81
}
 800664a:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800664c:	682a      	ldr	r2, [r5, #0]
 800664e:	6813      	ldr	r3, [r2, #0]
 8006650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	e7d5      	b.n	8006604 <HAL_SPI_Transmit_DMA+0xe4>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006658:	f8b3 0062 	ldrh.w	r0, [r3, #98]	; 0x62
 800665c:	3001      	adds	r0, #1
 800665e:	0840      	lsrs	r0, r0, #1
 8006660:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
 8006664:	6988      	ldr	r0, [r1, #24]
 8006666:	e78f      	b.n	8006588 <HAL_SPI_Transmit_DMA+0x68>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006668:	f8b3 0062 	ldrh.w	r0, [r3, #98]	; 0x62
 800666c:	3003      	adds	r0, #3
 800666e:	0880      	lsrs	r0, r0, #2
 8006670:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
 8006674:	e78b      	b.n	800658e <HAL_SPI_Transmit_DMA+0x6e>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006676:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800667a:	d002      	beq.n	8006682 <HAL_SPI_Transmit_DMA+0x162>
 800667c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8006680:	d1cc      	bne.n	800661c <HAL_SPI_Transmit_DMA+0xfc>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006682:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8006686:	d182      	bne.n	800658e <HAL_SPI_Transmit_DMA+0x6e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006688:	f8b3 0062 	ldrh.w	r0, [r3, #98]	; 0x62
 800668c:	3001      	adds	r0, #1
 800668e:	0840      	lsrs	r0, r0, #1
 8006690:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
 8006694:	e77b      	b.n	800658e <HAL_SPI_Transmit_DMA+0x6e>
 8006696:	bf00      	nop
 8006698:	08006b01 	.word	0x08006b01
 800669c:	08006a81 	.word	0x08006a81
 80066a0:	08006b31 	.word	0x08006b31
 80066a4:	ffff0000 	.word	0xffff0000

080066a8 <HAL_SPI_TransmitReceive_DMA>:
{
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80066ac:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 80066b0:	2801      	cmp	r0, #1
 80066b2:	d068      	beq.n	8006786 <HAL_SPI_TransmitReceive_DMA+0xde>
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 80066b4:	6865      	ldr	r5, [r4, #4]
  __HAL_LOCK(hspi);
 80066b6:	2601      	movs	r6, #1
  tmp_state   = hspi->State;
 80066b8:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 80066bc:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
  __HAL_LOCK(hspi);
 80066c0:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
  tmp_state   = hspi->State;
 80066c4:	b2c0      	uxtb	r0, r0
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 80066c6:	d010      	beq.n	80066ea <HAL_SPI_TransmitReceive_DMA+0x42>
 80066c8:	2801      	cmp	r0, #1
 80066ca:	d109      	bne.n	80066e0 <HAL_SPI_TransmitReceive_DMA+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bf18      	it	ne
 80066d0:	2a00      	cmpne	r2, #0
 80066d2:	d000      	beq.n	80066d6 <HAL_SPI_TransmitReceive_DMA+0x2e>
 80066d4:	b979      	cbnz	r1, 80066f6 <HAL_SPI_TransmitReceive_DMA+0x4e>
    __HAL_UNLOCK(hspi);
 80066d6:	2300      	movs	r3, #0
    return errorcode;
 80066d8:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 80066da:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80066de:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 80066e0:	2300      	movs	r3, #0
    return errorcode;
 80066e2:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 80066e4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80066e8:	bd70      	pop	{r4, r5, r6, pc}
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 80066ea:	68a5      	ldr	r5, [r4, #8]
 80066ec:	2d00      	cmp	r5, #0
 80066ee:	d1eb      	bne.n	80066c8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80066f0:	2804      	cmp	r0, #4
 80066f2:	d1e9      	bne.n	80066c8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80066f4:	e7ea      	b.n	80066cc <HAL_SPI_TransmitReceive_DMA+0x24>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066f6:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
 80066fa:	2804      	cmp	r0, #4
 80066fc:	d002      	beq.n	8006704 <HAL_SPI_TransmitReceive_DMA+0x5c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066fe:	2005      	movs	r0, #5
 8006700:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006704:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006706:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006708:	65e1      	str	r1, [r4, #92]	; 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800670a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->TxXferSize  = Size;
 800670e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006712:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006716:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006718:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 800671c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006720:	e9c4 001c 	strd	r0, r0, [r4, #112]	; 0x70
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006724:	68aa      	ldr	r2, [r5, #8]
 8006726:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800672a:	60aa      	str	r2, [r5, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800672c:	68e1      	ldr	r1, [r4, #12]
 800672e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006730:	290f      	cmp	r1, #15
 8006732:	d92a      	bls.n	800678a <HAL_SPI_TransmitReceive_DMA+0xe2>
 8006734:	6991      	ldr	r1, [r2, #24]
 8006736:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800673a:	d1cc      	bne.n	80066d6 <HAL_SPI_TransmitReceive_DMA+0x2e>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800673c:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8006740:	2904      	cmp	r1, #4
 8006742:	d04e      	beq.n	80067e2 <HAL_SPI_TransmitReceive_DMA+0x13a>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006744:	4858      	ldr	r0, [pc, #352]	; (80068a8 <HAL_SPI_TransmitReceive_DMA+0x200>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006746:	4959      	ldr	r1, [pc, #356]	; (80068ac <HAL_SPI_TransmitReceive_DMA+0x204>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006748:	6410      	str	r0, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800674a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800674c:	63d1      	str	r1, [r2, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800674e:	4958      	ldr	r1, [pc, #352]	; (80068b0 <HAL_SPI_TransmitReceive_DMA+0x208>)
 8006750:	461d      	mov	r5, r3
 8006752:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  hspi->hdmarx->XferAbortCallback = NULL;
 8006754:	2200      	movs	r2, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006756:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8006758:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800675a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800675c:	6821      	ldr	r1, [r4, #0]
 800675e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006764:	3130      	adds	r1, #48	; 0x30
 8006766:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006768:	f7fa ffce 	bl	8001708 <HAL_DMA_Start_IT>
 800676c:	2800      	cmp	r0, #0
 800676e:	d05c      	beq.n	800682a <HAL_SPI_TransmitReceive_DMA+0x182>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006770:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006774:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006776:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 800677a:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800677c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006780:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 8006784:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hspi);
 8006786:	2002      	movs	r0, #2
}
 8006788:	bd70      	pop	{r4, r5, r6, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800678a:	2907      	cmp	r1, #7
 800678c:	d82f      	bhi.n	80067ee <HAL_SPI_TransmitReceive_DMA+0x146>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800678e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006790:	6981      	ldr	r1, [r0, #24]
 8006792:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006796:	d106      	bne.n	80067a6 <HAL_SPI_TransmitReceive_DMA+0xfe>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006798:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 800679c:	3101      	adds	r1, #1
 800679e:	0849      	lsrs	r1, r1, #1
 80067a0:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
 80067a4:	6981      	ldr	r1, [r0, #24]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80067a6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80067aa:	d105      	bne.n	80067b8 <HAL_SPI_TransmitReceive_DMA+0x110>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80067ac:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80067b0:	3103      	adds	r1, #3
 80067b2:	0889      	lsrs	r1, r1, #2
 80067b4:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067b8:	6991      	ldr	r1, [r2, #24]
 80067ba:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80067be:	d106      	bne.n	80067ce <HAL_SPI_TransmitReceive_DMA+0x126>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80067c0:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 80067c4:	3101      	adds	r1, #1
 80067c6:	0849      	lsrs	r1, r1, #1
 80067c8:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 80067cc:	6991      	ldr	r1, [r2, #24]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80067ce:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80067d2:	d1b3      	bne.n	800673c <HAL_SPI_TransmitReceive_DMA+0x94>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80067d4:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 80067d8:	3103      	adds	r1, #3
 80067da:	0889      	lsrs	r1, r1, #2
 80067dc:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 80067e0:	e7ac      	b.n	800673c <HAL_SPI_TransmitReceive_DMA+0x94>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80067e2:	4834      	ldr	r0, [pc, #208]	; (80068b4 <HAL_SPI_TransmitReceive_DMA+0x20c>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80067e4:	4934      	ldr	r1, [pc, #208]	; (80068b8 <HAL_SPI_TransmitReceive_DMA+0x210>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80067e6:	6410      	str	r0, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80067e8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80067ea:	63d1      	str	r1, [r2, #60]	; 0x3c
 80067ec:	e7af      	b.n	800674e <HAL_SPI_TransmitReceive_DMA+0xa6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80067ee:	6991      	ldr	r1, [r2, #24]
 80067f0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80067f4:	d003      	beq.n	80067fe <HAL_SPI_TransmitReceive_DMA+0x156>
 80067f6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80067fa:	f47f af6c 	bne.w	80066d6 <HAL_SPI_TransmitReceive_DMA+0x2e>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80067fe:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006800:	6980      	ldr	r0, [r0, #24]
 8006802:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8006806:	d106      	bne.n	8006816 <HAL_SPI_TransmitReceive_DMA+0x16e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006808:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 800680c:	3101      	adds	r1, #1
 800680e:	0849      	lsrs	r1, r1, #1
 8006810:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
 8006814:	6991      	ldr	r1, [r2, #24]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006816:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800681a:	d18f      	bne.n	800673c <HAL_SPI_TransmitReceive_DMA+0x94>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800681c:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8006820:	3101      	adds	r1, #1
 8006822:	0849      	lsrs	r1, r1, #1
 8006824:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8006828:	e788      	b.n	800673c <HAL_SPI_TransmitReceive_DMA+0x94>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	6893      	ldr	r3, [r2, #8]
 800682e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006832:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006834:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006836:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006838:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800683a:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800683c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800683e:	64d8      	str	r0, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006840:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006842:	6518      	str	r0, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8006844:	6822      	ldr	r2, [r4, #0]
 8006846:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800684a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800684c:	3220      	adds	r2, #32
 800684e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006850:	f7fa ff5a 	bl	8001708 <HAL_DMA_Start_IT>
 8006854:	2800      	cmp	r0, #0
 8006856:	d18b      	bne.n	8006770 <HAL_SPI_TransmitReceive_DMA+0xc8>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006858:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800685a:	6822      	ldr	r2, [r4, #0]
 800685c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800685e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006864:	4b15      	ldr	r3, [pc, #84]	; (80068bc <HAL_SPI_TransmitReceive_DMA+0x214>)
 8006866:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800686a:	bf18      	it	ne
 800686c:	432b      	orrne	r3, r5
 800686e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006870:	6822      	ldr	r2, [r4, #0]
 8006872:	6893      	ldr	r3, [r2, #8]
 8006874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006878:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800687a:	6822      	ldr	r2, [r4, #0]
 800687c:	6913      	ldr	r3, [r2, #16]
 800687e:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 8006882:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	6813      	ldr	r3, [r2, #0]
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800688e:	6863      	ldr	r3, [r4, #4]
 8006890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006894:	d104      	bne.n	80068a0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	6813      	ldr	r3, [r2, #0]
 800689a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800689e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 80068a0:	2300      	movs	r3, #0
 80068a2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	08006b21 	.word	0x08006b21
 80068ac:	08006ad5 	.word	0x08006ad5
 80068b0:	08006b31 	.word	0x08006b31
 80068b4:	08006b11 	.word	0x08006b11
 80068b8:	08006aa9 	.word	0x08006aa9
 80068bc:	ffff0000 	.word	0xffff0000

080068c0 <HAL_SPI_Receive_DMA>:
{
 80068c0:	b570      	push	{r4, r5, r6, lr}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80068c2:	6885      	ldr	r5, [r0, #8]
{
 80068c4:	4604      	mov	r4, r0
 80068c6:	460e      	mov	r6, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80068c8:	b925      	cbnz	r5, 80068d4 <HAL_SPI_Receive_DMA+0x14>
 80068ca:	6843      	ldr	r3, [r0, #4]
 80068cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068d0:	f000 808d 	beq.w	80069ee <HAL_SPI_Receive_DMA+0x12e>
  __HAL_LOCK(hspi);
 80068d4:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80068d8:	2b01      	cmp	r3, #1
 80068da:	f000 8097 	beq.w	8006a0c <HAL_SPI_Receive_DMA+0x14c>
 80068de:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80068e0:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 80068e4:	428b      	cmp	r3, r1
  __HAL_LOCK(hspi);
 80068e6:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 80068ea:	d168      	bne.n	80069be <HAL_SPI_Receive_DMA+0xfe>
  if ((pData == NULL) || (Size == 0UL))
 80068ec:	2e00      	cmp	r6, #0
 80068ee:	d073      	beq.n	80069d8 <HAL_SPI_Receive_DMA+0x118>
 80068f0:	fab2 f182 	clz	r1, r2
 80068f4:	0949      	lsrs	r1, r1, #5
 80068f6:	2900      	cmp	r1, #0
 80068f8:	d16e      	bne.n	80069d8 <HAL_SPI_Receive_DMA+0x118>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068fa:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068fc:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006900:	6666      	str	r6, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006902:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->RxXferSize  = Size;
 8006906:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800690a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800690e:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8006912:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006916:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 800691a:	e9c4 111c 	strd	r1, r1, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800691e:	d06f      	beq.n	8006a00 <HAL_SPI_Receive_DMA+0x140>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006920:	68e3      	ldr	r3, [r4, #12]
 8006922:	2b0f      	cmp	r3, #15
 8006924:	d85d      	bhi.n	80069e2 <HAL_SPI_Receive_DMA+0x122>
 8006926:	2b07      	cmp	r3, #7
 8006928:	d84e      	bhi.n	80069c8 <HAL_SPI_Receive_DMA+0x108>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800692a:	6821      	ldr	r1, [r4, #0]
 800692c:	688b      	ldr	r3, [r1, #8]
 800692e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006932:	608b      	str	r3, [r1, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006934:	68e1      	ldr	r1, [r4, #12]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006936:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006938:	2907      	cmp	r1, #7
 800693a:	d869      	bhi.n	8006a10 <HAL_SPI_Receive_DMA+0x150>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800693c:	6999      	ldr	r1, [r3, #24]
 800693e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006942:	f000 808a 	beq.w	8006a5a <HAL_SPI_Receive_DMA+0x19a>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006946:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800694a:	d07f      	beq.n	8006a4c <HAL_SPI_Receive_DMA+0x18c>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800694c:	4947      	ldr	r1, [pc, #284]	; (8006a6c <HAL_SPI_Receive_DMA+0x1ac>)
 800694e:	4615      	mov	r5, r2
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006950:	4847      	ldr	r0, [pc, #284]	; (8006a70 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 8006952:	2200      	movs	r2, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006954:	6419      	str	r1, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006956:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006958:	4946      	ldr	r1, [pc, #280]	; (8006a74 <HAL_SPI_Receive_DMA+0x1b4>)
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800695a:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800695c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800695e:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8006960:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006962:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8006964:	6821      	ldr	r1, [r4, #0]
 8006966:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800696a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800696c:	3130      	adds	r1, #48	; 0x30
 800696e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006970:	f7fa feca 	bl	8001708 <HAL_DMA_Start_IT>
 8006974:	2800      	cmp	r0, #0
 8006976:	d158      	bne.n	8006a2a <HAL_SPI_Receive_DMA+0x16a>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006978:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800697a:	6822      	ldr	r2, [r4, #0]
 800697c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800697e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006984:	4b3c      	ldr	r3, [pc, #240]	; (8006a78 <HAL_SPI_Receive_DMA+0x1b8>)
 8006986:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800698a:	bf18      	it	ne
 800698c:	432b      	orrne	r3, r5
 800698e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006990:	6822      	ldr	r2, [r4, #0]
 8006992:	6893      	ldr	r3, [r2, #8]
 8006994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006998:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800699a:	6822      	ldr	r2, [r4, #0]
 800699c:	6913      	ldr	r3, [r2, #16]
 800699e:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 80069a2:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 80069a4:	6822      	ldr	r2, [r4, #0]
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	f043 0301 	orr.w	r3, r3, #1
 80069ac:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ae:	6863      	ldr	r3, [r4, #4]
 80069b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069b4:	d044      	beq.n	8006a40 <HAL_SPI_Receive_DMA+0x180>
  __HAL_UNLOCK(hspi);
 80069b6:	2300      	movs	r3, #0
 80069b8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80069bc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 80069be:	2300      	movs	r3, #0
    return errorcode;
 80069c0:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 80069c2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80069c8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d0:	d0ab      	beq.n	800692a <HAL_SPI_Receive_DMA+0x6a>
 80069d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d6:	d0a8      	beq.n	800692a <HAL_SPI_Receive_DMA+0x6a>
    __HAL_UNLOCK(hspi);
 80069d8:	2300      	movs	r3, #0
    return errorcode;
 80069da:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 80069dc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80069e0:	bd70      	pop	{r4, r5, r6, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80069e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ea:	d1f5      	bne.n	80069d8 <HAL_SPI_Receive_DMA+0x118>
 80069ec:	e79d      	b.n	800692a <HAL_SPI_Receive_DMA+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069ee:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80069f0:	4613      	mov	r3, r2
 80069f2:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069f4:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
}
 80069f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80069fc:	f7ff be54 	b.w	80066a8 <HAL_SPI_TransmitReceive_DMA>
    SPI_1LINE_RX(hspi);
 8006a00:	6821      	ldr	r1, [r4, #0]
 8006a02:	680b      	ldr	r3, [r1, #0]
 8006a04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a08:	600b      	str	r3, [r1, #0]
 8006a0a:	e789      	b.n	8006920 <HAL_SPI_Receive_DMA+0x60>
  __HAL_LOCK(hspi);
 8006a0c:	2002      	movs	r0, #2
}
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006a10:	290f      	cmp	r1, #15
 8006a12:	d89b      	bhi.n	800694c <HAL_SPI_Receive_DMA+0x8c>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006a14:	6999      	ldr	r1, [r3, #24]
 8006a16:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006a1a:	d197      	bne.n	800694c <HAL_SPI_Receive_DMA+0x8c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006a1c:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8006a20:	3101      	adds	r1, #1
 8006a22:	0849      	lsrs	r1, r1, #1
 8006a24:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8006a28:	e790      	b.n	800694c <HAL_SPI_Receive_DMA+0x8c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a2a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006a2e:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a30:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 8006a34:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a36:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006a3a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 8006a3e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006a40:	6822      	ldr	r2, [r4, #0]
 8006a42:	6813      	ldr	r3, [r2, #0]
 8006a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	e7b4      	b.n	80069b6 <HAL_SPI_Receive_DMA+0xf6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8006a4c:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8006a50:	3103      	adds	r1, #3
 8006a52:	0889      	lsrs	r1, r1, #2
 8006a54:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8006a58:	e778      	b.n	800694c <HAL_SPI_Receive_DMA+0x8c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006a5a:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8006a5e:	3101      	adds	r1, #1
 8006a60:	0849      	lsrs	r1, r1, #1
 8006a62:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8006a66:	6999      	ldr	r1, [r3, #24]
 8006a68:	e76d      	b.n	8006946 <HAL_SPI_Receive_DMA+0x86>
 8006a6a:	bf00      	nop
 8006a6c:	08006b11 	.word	0x08006b11
 8006a70:	08006aa9 	.word	0x08006aa9
 8006a74:	08006b31 	.word	0x08006b31
 8006a78:	ffff0000 	.word	0xffff0000

08006a7c <HAL_SPI_TxCpltCallback>:
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop

08006a80 <SPI_DMATransmitCplt>:
{
 8006a80:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a82:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006a84:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006a88:	2b07      	cmp	r3, #7
 8006a8a:	d009      	beq.n	8006aa0 <SPI_DMATransmitCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006a8c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a94:	d005      	beq.n	8006aa2 <SPI_DMATransmitCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006a96:	6802      	ldr	r2, [r0, #0]
 8006a98:	6913      	ldr	r3, [r2, #16]
 8006a9a:	f043 0308 	orr.w	r3, r3, #8
 8006a9e:	6113      	str	r3, [r2, #16]
}
 8006aa0:	bd08      	pop	{r3, pc}
      HAL_SPI_TxCpltCallback(hspi);
 8006aa2:	f7ff ffeb 	bl	8006a7c <HAL_SPI_TxCpltCallback>
}
 8006aa6:	bd08      	pop	{r3, pc}

08006aa8 <SPI_DMAReceiveCplt>:
{
 8006aa8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aaa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006aac:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006ab0:	2b07      	cmp	r3, #7
 8006ab2:	d009      	beq.n	8006ac8 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006ab4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006abc:	d005      	beq.n	8006aca <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006abe:	6802      	ldr	r2, [r0, #0]
 8006ac0:	6913      	ldr	r3, [r2, #16]
 8006ac2:	f043 0308 	orr.w	r3, r3, #8
 8006ac6:	6113      	str	r3, [r2, #16]
}
 8006ac8:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8006aca:	f002 f953 	bl	8008d74 <HAL_SPI_RxCpltCallback>
}
 8006ace:	bd08      	pop	{r3, pc}

08006ad0 <HAL_SPI_TxRxCpltCallback>:
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop

08006ad4 <SPI_DMATransmitReceiveCplt>:
{
 8006ad4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ad6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006ad8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006adc:	2b07      	cmp	r3, #7
 8006ade:	d009      	beq.n	8006af4 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006ae0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae8:	d005      	beq.n	8006af6 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006aea:	6802      	ldr	r2, [r0, #0]
 8006aec:	6913      	ldr	r3, [r2, #16]
 8006aee:	f043 0308 	orr.w	r3, r3, #8
 8006af2:	6113      	str	r3, [r2, #16]
}
 8006af4:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 8006af6:	f7ff ffeb 	bl	8006ad0 <HAL_SPI_TxRxCpltCallback>
}
 8006afa:	bd08      	pop	{r3, pc}

08006afc <HAL_SPI_TxHalfCpltCallback>:
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop

08006b00 <SPI_DMAHalfTransmitCplt>:
{
 8006b00:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006b02:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006b04:	f7ff fffa 	bl	8006afc <HAL_SPI_TxHalfCpltCallback>
}
 8006b08:	bd08      	pop	{r3, pc}
 8006b0a:	bf00      	nop

08006b0c <HAL_SPI_RxHalfCpltCallback>:
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop

08006b10 <SPI_DMAHalfReceiveCplt>:
{
 8006b10:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006b12:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006b14:	f7ff fffa 	bl	8006b0c <HAL_SPI_RxHalfCpltCallback>
}
 8006b18:	bd08      	pop	{r3, pc}
 8006b1a:	bf00      	nop

08006b1c <HAL_SPI_TxRxHalfCpltCallback>:
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop

08006b20 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8006b20:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006b22:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006b24:	f7ff fffa 	bl	8006b1c <HAL_SPI_TxRxHalfCpltCallback>
}
 8006b28:	bd08      	pop	{r3, pc}
 8006b2a:	bf00      	nop

08006b2c <HAL_SPI_ErrorCallback>:
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop

08006b30 <SPI_DMAError>:
{
 8006b30:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b32:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006b34:	f7fb fe0e 	bl	8002754 <HAL_DMA_GetError>
 8006b38:	2802      	cmp	r0, #2
 8006b3a:	d066      	beq.n	8006c0a <SPI_DMAError+0xda>
  uint32_t itflag = hspi->Instance->SR;
 8006b3c:	6821      	ldr	r1, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006b3e:	4a33      	ldr	r2, [pc, #204]	; (8006c0c <SPI_DMAError+0xdc>)
  uint32_t itflag = hspi->Instance->SR;
 8006b40:	694b      	ldr	r3, [r1, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b42:	6988      	ldr	r0, [r1, #24]
 8006b44:	f040 0008 	orr.w	r0, r0, #8
 8006b48:	6188      	str	r0, [r1, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006b4a:	6820      	ldr	r0, [r4, #0]
 8006b4c:	6981      	ldr	r1, [r0, #24]
 8006b4e:	f041 0110 	orr.w	r1, r1, #16
 8006b52:	6181      	str	r1, [r0, #24]
  __HAL_SPI_DISABLE(hspi);
 8006b54:	6820      	ldr	r0, [r4, #0]
 8006b56:	6801      	ldr	r1, [r0, #0]
 8006b58:	f021 0101 	bic.w	r1, r1, #1
 8006b5c:	6001      	str	r1, [r0, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006b5e:	6821      	ldr	r1, [r4, #0]
 8006b60:	6908      	ldr	r0, [r1, #16]
 8006b62:	4002      	ands	r2, r0
 8006b64:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006b66:	6821      	ldr	r1, [r4, #0]
 8006b68:	688a      	ldr	r2, [r1, #8]
 8006b6a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b6e:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b70:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006b74:	2a04      	cmp	r2, #4
 8006b76:	d00c      	beq.n	8006b92 <SPI_DMAError+0x62>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006b78:	0698      	lsls	r0, r3, #26
 8006b7a:	d50a      	bpl.n	8006b92 <SPI_DMAError+0x62>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b7c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b80:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b86:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b8a:	698a      	ldr	r2, [r1, #24]
 8006b8c:	f042 0220 	orr.w	r2, r2, #32
 8006b90:	618a      	str	r2, [r1, #24]
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b92:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006b96:	2a03      	cmp	r2, #3
 8006b98:	d00c      	beq.n	8006bb4 <SPI_DMAError+0x84>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006b9a:	0659      	lsls	r1, r3, #25
 8006b9c:	d50a      	bpl.n	8006bb4 <SPI_DMAError+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b9e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ba2:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006ba4:	f042 0204 	orr.w	r2, r2, #4
 8006ba8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bac:	698a      	ldr	r2, [r1, #24]
 8006bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bb2:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006bb4:	059a      	lsls	r2, r3, #22
 8006bb6:	d50a      	bpl.n	8006bce <SPI_DMAError+0x9e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006bb8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006bbc:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006bc6:	698a      	ldr	r2, [r1, #24]
 8006bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bcc:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006bce:	05db      	lsls	r3, r3, #23
 8006bd0:	d50a      	bpl.n	8006be8 <SPI_DMAError+0xb8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006bd2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006bd6:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006bd8:	f043 0308 	orr.w	r3, r3, #8
 8006bdc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006be0:	6993      	ldr	r3, [r2, #24]
 8006be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006be6:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 8006be8:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 8006bea:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 8006bec:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 8006bee:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006bf2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006bf6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006bfa:	f043 0310 	orr.w	r3, r3, #16
 8006bfe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006c02:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8006c06:	f7ff ff91 	bl	8006b2c <HAL_SPI_ErrorCallback>
}
 8006c0a:	bd10      	pop	{r4, pc}
 8006c0c:	fffffc90 	.word	0xfffffc90

08006c10 <HAL_SPI_IRQHandler>:
{
 8006c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 8006c14:	6803      	ldr	r3, [r0, #0]
{
 8006c16:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8006c18:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006c1a:	695a      	ldr	r2, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006c1c:	f8d3 c008 	ldr.w	ip, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 8006c20:	ea01 0502 	and.w	r5, r1, r2
  HAL_SPI_StateTypeDef State = hspi->State;
 8006c24:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006c28:	f005 0664 	and.w	r6, r5, #100	; 0x64
 8006c2c:	2e04      	cmp	r6, #4
 8006c2e:	f040 8086 	bne.w	8006d3e <HAL_SPI_IRQHandler+0x12e>
    hspi->TxISR(hspi);
 8006c32:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006c34:	f005 0626 	and.w	r6, r5, #38	; 0x26
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006c38:	f005 0545 	and.w	r5, r5, #69	; 0x45
    hspi->TxISR(hspi);
 8006c3c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006c3e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006c40:	4620      	mov	r0, r4
 8006c42:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006c44:	2d01      	cmp	r5, #1
 8006c46:	d102      	bne.n	8006c4e <HAL_SPI_IRQHandler+0x3e>
    hspi->RxISR(hspi);
 8006c48:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006c4e:	2e02      	cmp	r6, #2
 8006c50:	d173      	bne.n	8006d3a <HAL_SPI_IRQHandler+0x12a>
    hspi->TxISR(hspi);
 8006c52:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006c54:	4620      	mov	r0, r4
}
 8006c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8006c5a:	4718      	bx	r3
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006c5c:	0517      	lsls	r7, r2, #20
 8006c5e:	f100 80d9 	bmi.w	8006e14 <HAL_SPI_IRQHandler+0x204>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006c62:	f415 7f58 	tst.w	r5, #864	; 0x360
 8006c66:	d068      	beq.n	8006d3a <HAL_SPI_IRQHandler+0x12a>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006c68:	0668      	lsls	r0, r5, #25
 8006c6a:	d509      	bpl.n	8006c80 <HAL_SPI_IRQHandler+0x70>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c6c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006c70:	f042 0204 	orr.w	r2, r2, #4
 8006c74:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c7e:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006c80:	05a9      	lsls	r1, r5, #22
 8006c82:	d50a      	bpl.n	8006c9a <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c88:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c92:	6993      	ldr	r3, [r2, #24]
 8006c94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c98:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006c9a:	05ea      	lsls	r2, r5, #23
 8006c9c:	d50a      	bpl.n	8006cb4 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c9e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ca2:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ca4:	f043 0308 	orr.w	r3, r3, #8
 8006ca8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006cac:	6993      	ldr	r3, [r2, #24]
 8006cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cb2:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006cb4:	06ab      	lsls	r3, r5, #26
 8006cb6:	d50a      	bpl.n	8006cce <HAL_SPI_IRQHandler+0xbe>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006cb8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006cbc:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006cc6:	6993      	ldr	r3, [r2, #24]
 8006cc8:	f043 0320 	orr.w	r3, r3, #32
 8006ccc:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cce:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d031      	beq.n	8006d3a <HAL_SPI_IRQHandler+0x12a>
      __HAL_SPI_DISABLE(hspi);
 8006cd6:	6821      	ldr	r1, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006cd8:	f40c 4c40 	and.w	ip, ip, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8006cdc:	4b5e      	ldr	r3, [pc, #376]	; (8006e58 <HAL_SPI_IRQHandler+0x248>)
      __HAL_SPI_DISABLE(hspi);
 8006cde:	680a      	ldr	r2, [r1, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006ce0:	f5bc 4f40 	cmp.w	ip, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8006ce4:	f022 0201 	bic.w	r2, r2, #1
 8006ce8:	600a      	str	r2, [r1, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8006cea:	6822      	ldr	r2, [r4, #0]
 8006cec:	6911      	ldr	r1, [r2, #16]
 8006cee:	ea03 0301 	and.w	r3, r3, r1
 8006cf2:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006cf4:	f040 80a9 	bne.w	8006e4a <HAL_SPI_IRQHandler+0x23a>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	6893      	ldr	r3, [r2, #8]
 8006cfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006d00:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8006d02:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006d04:	b15b      	cbz	r3, 8006d1e <HAL_SPI_IRQHandler+0x10e>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d06:	4a55      	ldr	r2, [pc, #340]	; (8006e5c <HAL_SPI_IRQHandler+0x24c>)
 8006d08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d0a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006d0c:	f7fa ffca 	bl	8001ca4 <HAL_DMA_Abort_IT>
 8006d10:	b128      	cbz	r0, 8006d1e <HAL_SPI_IRQHandler+0x10e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d12:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d1a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8006d1e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006d20:	b15b      	cbz	r3, 8006d3a <HAL_SPI_IRQHandler+0x12a>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d22:	4a4e      	ldr	r2, [pc, #312]	; (8006e5c <HAL_SPI_IRQHandler+0x24c>)
 8006d24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d26:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006d28:	f7fa ffbc 	bl	8001ca4 <HAL_DMA_Abort_IT>
 8006d2c:	b128      	cbz	r0, 8006d3a <HAL_SPI_IRQHandler+0x12a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d2e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d36:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8006d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006d3e:	f005 0045 	and.w	r0, r5, #69	; 0x45
 8006d42:	f005 0626 	and.w	r6, r5, #38	; 0x26
 8006d46:	2801      	cmp	r0, #1
 8006d48:	f43f af7e 	beq.w	8006c48 <HAL_SPI_IRQHandler+0x38>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006d4c:	2e02      	cmp	r6, #2
 8006d4e:	d080      	beq.n	8006c52 <HAL_SPI_IRQHandler+0x42>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006d50:	0728      	lsls	r0, r5, #28
 8006d52:	d583      	bpl.n	8006c5c <HAL_SPI_IRQHandler+0x4c>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006d54:	699a      	ldr	r2, [r3, #24]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8006d56:	f41c 4f40 	tst.w	ip, #49152	; 0xc000
 8006d5a:	b2ff      	uxtb	r7, r7
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006d5c:	f042 0208 	orr.w	r2, r2, #8
 8006d60:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006d62:	6821      	ldr	r1, [r4, #0]
 8006d64:	698a      	ldr	r2, [r1, #24]
 8006d66:	f042 0210 	orr.w	r2, r2, #16
 8006d6a:	618a      	str	r2, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006d6c:	6821      	ldr	r1, [r4, #0]
 8006d6e:	698a      	ldr	r2, [r1, #24]
 8006d70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d74:	618a      	str	r2, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006d76:	6821      	ldr	r1, [r4, #0]
 8006d78:	690a      	ldr	r2, [r1, #16]
 8006d7a:	f022 0208 	bic.w	r2, r2, #8
 8006d7e:	610a      	str	r2, [r1, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8006d80:	d00f      	beq.n	8006da2 <HAL_SPI_IRQHandler+0x192>
 8006d82:	2f04      	cmp	r7, #4
 8006d84:	d059      	beq.n	8006e3a <HAL_SPI_IRQHandler+0x22a>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8006d86:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006d88:	69d2      	ldr	r2, [r2, #28]
 8006d8a:	b152      	cbz	r2, 8006da2 <HAL_SPI_IRQHandler+0x192>
 8006d8c:	2f03      	cmp	r7, #3
 8006d8e:	d03d      	beq.n	8006e0c <HAL_SPI_IRQHandler+0x1fc>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8006d90:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006d92:	69d2      	ldr	r2, [r2, #28]
 8006d94:	b12a      	cbz	r2, 8006da2 <HAL_SPI_IRQHandler+0x192>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006d96:	2f05      	cmp	r7, #5
 8006d98:	d1cf      	bne.n	8006d3a <HAL_SPI_IRQHandler+0x12a>
      HAL_SPI_TxRxCpltCallback(hspi);
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f7ff fe98 	bl	8006ad0 <HAL_SPI_TxRxCpltCallback>
 8006da0:	e7cb      	b.n	8006d3a <HAL_SPI_IRQHandler+0x12a>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	6892      	ldr	r2, [r2, #8]
 8006da6:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8006daa:	d120      	bne.n	8006dee <HAL_SPI_IRQHandler+0x1de>
        while (hspi->RxXferCount != 0UL)
 8006dac:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006db0:	b292      	uxth	r2, r2
 8006db2:	b1e2      	cbz	r2, 8006dee <HAL_SPI_IRQHandler+0x1de>
 8006db4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006db6:	e00f      	b.n	8006dd8 <HAL_SPI_IRQHandler+0x1c8>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006db8:	6822      	ldr	r2, [r4, #0]
 8006dba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006dbc:	600a      	str	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8006dbe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006dc0:	3104      	adds	r1, #4
 8006dc2:	6661      	str	r1, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8006dc4:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006dc8:	3a01      	subs	r2, #1
 8006dca:	b292      	uxth	r2, r2
 8006dcc:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8006dd0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006dd4:	b292      	uxth	r2, r2
 8006dd6:	b152      	cbz	r2, 8006dee <HAL_SPI_IRQHandler+0x1de>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006dd8:	68e2      	ldr	r2, [r4, #12]
 8006dda:	2a0f      	cmp	r2, #15
 8006ddc:	d8ec      	bhi.n	8006db8 <HAL_SPI_IRQHandler+0x1a8>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dde:	2a07      	cmp	r2, #7
 8006de0:	d923      	bls.n	8006e2a <HAL_SPI_IRQHandler+0x21a>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006de2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8006de4:	800a      	strh	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8006de6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006de8:	3102      	adds	r1, #2
 8006dea:	6661      	str	r1, [r4, #100]	; 0x64
 8006dec:	e7ea      	b.n	8006dc4 <HAL_SPI_IRQHandler+0x1b4>
      SPI_CloseTransfer(hspi);
 8006dee:	4620      	mov	r0, r4
 8006df0:	f7ff fa80 	bl	80062f4 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8006df4:	2301      	movs	r3, #1
 8006df6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dfa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006dfe:	b98b      	cbnz	r3, 8006e24 <HAL_SPI_IRQHandler+0x214>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006e00:	2f05      	cmp	r7, #5
 8006e02:	d0ca      	beq.n	8006d9a <HAL_SPI_IRQHandler+0x18a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006e04:	2f04      	cmp	r7, #4
 8006e06:	d01c      	beq.n	8006e42 <HAL_SPI_IRQHandler+0x232>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006e08:	2f03      	cmp	r7, #3
 8006e0a:	d196      	bne.n	8006d3a <HAL_SPI_IRQHandler+0x12a>
      HAL_SPI_TxCpltCallback(hspi);
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f7ff fe35 	bl	8006a7c <HAL_SPI_TxCpltCallback>
 8006e12:	e792      	b.n	8006d3a <HAL_SPI_IRQHandler+0x12a>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006e14:	070e      	lsls	r6, r1, #28
 8006e16:	f57f af24 	bpl.w	8006c62 <HAL_SPI_IRQHandler+0x52>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006e1a:	699a      	ldr	r2, [r3, #24]
 8006e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e20:	619a      	str	r2, [r3, #24]
    return;
 8006e22:	e78a      	b.n	8006d3a <HAL_SPI_IRQHandler+0x12a>
        HAL_SPI_ErrorCallback(hspi);
 8006e24:	f7ff fe82 	bl	8006b2c <HAL_SPI_ErrorCallback>
        return;
 8006e28:	e787      	b.n	8006d3a <HAL_SPI_IRQHandler+0x12a>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006e30:	700a      	strb	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e32:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006e34:	3101      	adds	r1, #1
 8006e36:	6661      	str	r1, [r4, #100]	; 0x64
 8006e38:	e7c4      	b.n	8006dc4 <HAL_SPI_IRQHandler+0x1b4>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8006e3a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006e3c:	69d2      	ldr	r2, [r2, #28]
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	d0af      	beq.n	8006da2 <HAL_SPI_IRQHandler+0x192>
      HAL_SPI_RxCpltCallback(hspi);
 8006e42:	4620      	mov	r0, r4
 8006e44:	f001 ff96 	bl	8008d74 <HAL_SPI_RxCpltCallback>
 8006e48:	e777      	b.n	8006d3a <HAL_SPI_IRQHandler+0x12a>
        hspi->State = HAL_SPI_STATE_READY;
 8006e4a:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8006e4c:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8006e4e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006e52:	f7ff fe6b 	bl	8006b2c <HAL_SPI_ErrorCallback>
 8006e56:	e770      	b.n	8006d3a <HAL_SPI_IRQHandler+0x12a>
 8006e58:	fffffc94 	.word	0xfffffc94
 8006e5c:	08006e61 	.word	0x08006e61

08006e60 <SPI_DMAAbortOnError>:
{
 8006e60:	b508      	push	{r3, lr}
  hspi->RxXferCount = (uint16_t) 0UL;
 8006e62:	2200      	movs	r2, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e64:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_READY;
 8006e66:	2101      	movs	r1, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 8006e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  HAL_SPI_ErrorCallback(hspi);
 8006e6c:	4618      	mov	r0, r3
  hspi->TxXferCount = (uint16_t) 0UL;
 8006e6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8006e72:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006e76:	f7ff fe59 	bl	8006b2c <HAL_SPI_ErrorCallback>
}
 8006e7a:	bd08      	pop	{r3, pc}

08006e7c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006e7c:	b470      	push	{r4, r5, r6}
 8006e7e:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006e82:	680c      	ldr	r4, [r1, #0]
 8006e84:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e86:	4313      	orrs	r3, r2
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006e88:	b1c4      	cbz	r4, 8006ebc <FMC_SDRAM_Init+0x40>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e8a:	6804      	ldr	r4, [r0, #0]
 8006e8c:	432b      	orrs	r3, r5
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006e8e:	4a16      	ldr	r2, [pc, #88]	; (8006ee8 <FMC_SDRAM_Init+0x6c>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e90:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8006e94:	4323      	orrs	r3, r4
 8006e96:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006e98:	6843      	ldr	r3, [r0, #4]
 8006e9a:	684c      	ldr	r4, [r1, #4]
 8006e9c:	401a      	ands	r2, r3
 8006e9e:	690d      	ldr	r5, [r1, #16]
 8006ea0:	e9d1 3602 	ldrd	r3, r6, [r1, #8]
 8006ea4:	4322      	orrs	r2, r4
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	4333      	orrs	r3, r6
 8006eaa:	e9d1 4105 	ldrd	r4, r1, [r1, #20]
 8006eae:	432b      	orrs	r3, r5
 8006eb0:	4323      	orrs	r3, r4
 8006eb2:	430b      	orrs	r3, r1
 8006eb4:	6043      	str	r3, [r0, #4]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	bc70      	pop	{r4, r5, r6}
 8006eba:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006ebc:	6804      	ldr	r4, [r0, #0]
 8006ebe:	432b      	orrs	r3, r5
 8006ec0:	4a09      	ldr	r2, [pc, #36]	; (8006ee8 <FMC_SDRAM_Init+0x6c>)
 8006ec2:	684d      	ldr	r5, [r1, #4]
 8006ec4:	4022      	ands	r2, r4
 8006ec6:	688c      	ldr	r4, [r1, #8]
 8006ec8:	68ce      	ldr	r6, [r1, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	432b      	orrs	r3, r5
 8006ece:	690d      	ldr	r5, [r1, #16]
 8006ed0:	4323      	orrs	r3, r4
 8006ed2:	4333      	orrs	r3, r6
 8006ed4:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 8006ed8:	432b      	orrs	r3, r5
 8006eda:	4323      	orrs	r3, r4
 8006edc:	4313      	orrs	r3, r2
 8006ede:	6003      	str	r3, [r0, #0]
}
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	bc70      	pop	{r4, r5, r6}
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	ffff8000 	.word	0xffff8000

08006eec <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006eec:	b4f0      	push	{r4, r5, r6, r7}
 8006eee:	68cb      	ldr	r3, [r1, #12]
 8006ef0:	694c      	ldr	r4, [r1, #20]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	3c01      	subs	r4, #1
 8006ef6:	031b      	lsls	r3, r3, #12
 8006ef8:	0524      	lsls	r4, r4, #20
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006efa:	b1fa      	cbz	r2, 8006f3c <FMC_SDRAM_Timing_Init+0x50>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006efc:	6885      	ldr	r5, [r0, #8]
 8006efe:	4323      	orrs	r3, r4
 8006f00:	4a1c      	ldr	r2, [pc, #112]	; (8006f74 <FMC_SDRAM_Timing_Init+0x88>)
 8006f02:	402a      	ands	r2, r5
 8006f04:	4313      	orrs	r3, r2
 8006f06:	6083      	str	r3, [r0, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006f08:	684c      	ldr	r4, [r1, #4]
 8006f0a:	68c2      	ldr	r2, [r0, #12]
 8006f0c:	680d      	ldr	r5, [r1, #0]
 8006f0e:	1e63      	subs	r3, r4, #1
 8006f10:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006f14:	688c      	ldr	r4, [r1, #8]
 8006f16:	1e6e      	subs	r6, r5, #1
 8006f18:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8006f1c:	1e65      	subs	r5, r4, #1
 8006f1e:	690c      	ldr	r4, [r1, #16]
 8006f20:	4333      	orrs	r3, r6
 8006f22:	698a      	ldr	r2, [r1, #24]
 8006f24:	1e61      	subs	r1, r4, #1
 8006f26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006f2a:	3a01      	subs	r2, #1
 8006f2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006f30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f34:	60c3      	str	r3, [r0, #12]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006f36:	2000      	movs	r0, #0
 8006f38:	bcf0      	pop	{r4, r5, r6, r7}
 8006f3a:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006f3c:	680a      	ldr	r2, [r1, #0]
 8006f3e:	4323      	orrs	r3, r4
 8006f40:	6887      	ldr	r7, [r0, #8]
 8006f42:	3a01      	subs	r2, #1
 8006f44:	684c      	ldr	r4, [r1, #4]
 8006f46:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
 8006f4a:	688d      	ldr	r5, [r1, #8]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	1e66      	subs	r6, r4, #1
 8006f50:	3d01      	subs	r5, #1
 8006f52:	690c      	ldr	r4, [r1, #16]
 8006f54:	433b      	orrs	r3, r7
 8006f56:	698a      	ldr	r2, [r1, #24]
 8006f58:	1e61      	subs	r1, r4, #1
 8006f5a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8006f5e:	3a01      	subs	r2, #1
 8006f60:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006f64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006f68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f6c:	6083      	str	r3, [r0, #8]
}
 8006f6e:	2000      	movs	r0, #0
 8006f70:	bcf0      	pop	{r4, r5, r6, r7}
 8006f72:	4770      	bx	lr
 8006f74:	ff0f0fff 	.word	0xff0f0fff

08006f78 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006f78:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 8006f7a:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 8006f7e:	4604      	mov	r4, r0
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8006f80:	2000      	movs	r0, #0
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 8006f82:	4313      	orrs	r3, r2
 8006f84:	6926      	ldr	r6, [r4, #16]
 8006f86:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006f8a:	4333      	orrs	r3, r6
 8006f8c:	3a01      	subs	r2, #1
 8006f8e:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
 8006f92:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006f96:	6123      	str	r3, [r4, #16]
}
 8006f98:	bc70      	pop	{r4, r5, r6}
 8006f9a:	4770      	bx	lr

08006f9c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006f9c:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006f9e:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 8006fa0:	2000      	movs	r0, #0
{
 8006fa2:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006fa4:	6954      	ldr	r4, [r2, #20]
 8006fa6:	4023      	ands	r3, r4
 8006fa8:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006fac:	6151      	str	r1, [r2, #20]
}
 8006fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	ffffc001 	.word	0xffffc001

08006fb8 <SDMMC_GetCmdResp1.part.2>:
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006fb8:	4b30      	ldr	r3, [pc, #192]	; (800707c <SDMMC_GetCmdResp1.part.2+0xc4>)
  return (*(__IO uint32_t *) tmp);
 8006fba:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	b34b      	cbz	r3, 8007014 <SDMMC_GetCmdResp1.part.2+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006fc0:	2a00      	cmp	r2, #0
 8006fc2:	db29      	blt.n	8007018 <SDMMC_GetCmdResp1.part.2+0x60>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006fc4:	0051      	lsls	r1, r2, #1
 8006fc6:	d42d      	bmi.n	8007024 <SDMMC_GetCmdResp1.part.2+0x6c>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006fc8:	0093      	lsls	r3, r2, #2
 8006fca:	d42d      	bmi.n	8007028 <SDMMC_GetCmdResp1.part.2+0x70>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006fcc:	00d1      	lsls	r1, r2, #3
 8006fce:	d426      	bmi.n	800701e <SDMMC_GetCmdResp1.part.2+0x66>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006fd0:	0113      	lsls	r3, r2, #4
 8006fd2:	d42e      	bmi.n	8007032 <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006fd4:	0151      	lsls	r1, r2, #5
 8006fd6:	d42f      	bmi.n	8007038 <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006fd8:	01d3      	lsls	r3, r2, #7
 8006fda:	d427      	bmi.n	800702c <SDMMC_GetCmdResp1.part.2+0x74>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006fdc:	0211      	lsls	r1, r2, #8
 8006fde:	d42e      	bmi.n	800703e <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006fe0:	0253      	lsls	r3, r2, #9
 8006fe2:	d42f      	bmi.n	8007044 <SDMMC_GetCmdResp1.part.2+0x8c>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006fe4:	0291      	lsls	r1, r2, #10
 8006fe6:	d430      	bmi.n	800704a <SDMMC_GetCmdResp1.part.2+0x92>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006fe8:	02d3      	lsls	r3, r2, #11
 8006fea:	d431      	bmi.n	8007050 <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006fec:	0351      	lsls	r1, r2, #13
 8006fee:	d432      	bmi.n	8007056 <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006ff0:	0393      	lsls	r3, r2, #14
 8006ff2:	d433      	bmi.n	800705c <SDMMC_GetCmdResp1.part.2+0xa4>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006ff4:	03d1      	lsls	r1, r2, #15
 8006ff6:	d434      	bmi.n	8007062 <SDMMC_GetCmdResp1.part.2+0xaa>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006ff8:	0413      	lsls	r3, r2, #16
 8006ffa:	d435      	bmi.n	8007068 <SDMMC_GetCmdResp1.part.2+0xb0>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006ffc:	0451      	lsls	r1, r2, #17
 8006ffe:	d436      	bmi.n	800706e <SDMMC_GetCmdResp1.part.2+0xb6>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007000:	0493      	lsls	r3, r2, #18
 8007002:	d437      	bmi.n	8007074 <SDMMC_GetCmdResp1.part.2+0xbc>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007004:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007008:	bf14      	ite	ne
 800700a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800700e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007012:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 8007014:	4618      	mov	r0, r3
 8007016:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007018:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800701c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800701e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007022:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007024:	2040      	movs	r0, #64	; 0x40
 8007026:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007028:	2080      	movs	r0, #128	; 0x80
 800702a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800702c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007030:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007032:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007036:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007038:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800703c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800703e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007042:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007044:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007048:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800704a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800704e:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8007050:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007054:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007056:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800705a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800705c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007060:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007062:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007066:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007068:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800706c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800706e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007072:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8007074:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	fdffe008 	.word	0xfdffe008

08007080 <SDMMC_Init>:
{
 8007080:	b084      	sub	sp, #16
 8007082:	b470      	push	{r4, r5, r6}
 8007084:	ad04      	add	r5, sp, #16
 8007086:	4606      	mov	r6, r0
             Init.BusWide             |\
 8007088:	9c07      	ldr	r4, [sp, #28]
}
 800708a:	2000      	movs	r0, #0
{
 800708c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8007090:	460b      	mov	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007092:	6875      	ldr	r5, [r6, #4]
             Init.ClockPowerSave      |\
 8007094:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 8007098:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 800709a:	9908      	ldr	r1, [sp, #32]
             Init.ClockPowerSave      |\
 800709c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800709e:	4a04      	ldr	r2, [pc, #16]	; (80070b0 <SDMMC_Init+0x30>)
             Init.BusWide             |\
 80070a0:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80070a2:	402a      	ands	r2, r5
             Init.HardwareFlowControl |\
 80070a4:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80070a6:	4313      	orrs	r3, r2
 80070a8:	6073      	str	r3, [r6, #4]
}
 80070aa:	bc70      	pop	{r4, r5, r6}
 80070ac:	b004      	add	sp, #16
 80070ae:	4770      	bx	lr
 80070b0:	ffc02c00 	.word	0xffc02c00

080070b4 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 80070b4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop

080070bc <SDMMC_WriteFIFO>:
{
 80070bc:	4603      	mov	r3, r0
  SDMMCx->FIFO = *pWriteData;
 80070be:	680a      	ldr	r2, [r1, #0]
}
 80070c0:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 80070c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80070c6:	4770      	bx	lr

080070c8 <SDMMC_PowerState_ON>:
{
 80070c8:	4602      	mov	r2, r0
}
 80070ca:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80070cc:	6813      	ldr	r3, [r2, #0]
 80070ce:	f043 0303 	orr.w	r3, r3, #3
 80070d2:	6013      	str	r3, [r2, #0]
}
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop

080070d8 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80070d8:	6800      	ldr	r0, [r0, #0]
}
 80070da:	f000 0003 	and.w	r0, r0, #3
 80070de:	4770      	bx	lr

080070e0 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80070e0:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80070e2:	5840      	ldr	r0, [r0, r1]
}
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop

080070e8 <SDMMC_ConfigData>:
{
 80070e8:	b430      	push	{r4, r5}
 80070ea:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 80070ec:	680b      	ldr	r3, [r1, #0]
}
 80070ee:	2000      	movs	r0, #0
  SDMMCx->DTIMER = Data->DataTimeOut;
 80070f0:	6253      	str	r3, [r2, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80070f2:	684b      	ldr	r3, [r1, #4]
 80070f4:	6293      	str	r3, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 80070f6:	690d      	ldr	r5, [r1, #16]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80070f8:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 80070fc:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80070fe:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007100:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferDir   |\
 8007102:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007104:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
                       Data->TransferMode  |\
 8007108:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800710a:	430b      	orrs	r3, r1
 800710c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800710e:	bc30      	pop	{r4, r5}
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop

08007114 <SDMMC_CmdBlockLength>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007114:	4a1c      	ldr	r2, [pc, #112]	; (8007188 <SDMMC_CmdBlockLength+0x74>)
 8007116:	4b1d      	ldr	r3, [pc, #116]	; (800718c <SDMMC_CmdBlockLength+0x78>)
{
 8007118:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800711a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800711c:	f241 1410 	movw	r4, #4368	; 0x1110
  SDMMCx->ARG = Command->Argument;
 8007120:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007122:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007126:	68c1      	ldr	r1, [r0, #12]
 8007128:	4d19      	ldr	r5, [pc, #100]	; (8007190 <SDMMC_CmdBlockLength+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800712a:	f241 3388 	movw	r3, #5000	; 0x1388
 800712e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007130:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007132:	4918      	ldr	r1, [pc, #96]	; (8007194 <SDMMC_CmdBlockLength+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007134:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007138:	432c      	orrs	r4, r5
 800713a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800713c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007140:	d312      	bcc.n	8007168 <SDMMC_CmdBlockLength+0x54>
    sta_reg = SDMMCx->STA;
 8007142:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007144:	420a      	tst	r2, r1
 8007146:	d0f9      	beq.n	800713c <SDMMC_CmdBlockLength+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007148:	0494      	lsls	r4, r2, #18
 800714a:	d4f7      	bmi.n	800713c <SDMMC_CmdBlockLength+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800714c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800714e:	075a      	lsls	r2, r3, #29
 8007150:	d413      	bmi.n	800717a <SDMMC_CmdBlockLength+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007152:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007154:	07db      	lsls	r3, r3, #31
 8007156:	d40b      	bmi.n	8007170 <SDMMC_CmdBlockLength+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007158:	4b0f      	ldr	r3, [pc, #60]	; (8007198 <SDMMC_CmdBlockLength+0x84>)
 800715a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800715c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b10      	cmp	r3, #16
 8007162:	d00e      	beq.n	8007182 <SDMMC_CmdBlockLength+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007164:	2001      	movs	r0, #1
  return errorstate;
 8007166:	e001      	b.n	800716c <SDMMC_CmdBlockLength+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007168:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800716c:	bc30      	pop	{r4, r5}
 800716e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007170:	2301      	movs	r3, #1
 8007172:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007174:	4618      	mov	r0, r3
}
 8007176:	bc30      	pop	{r4, r5}
 8007178:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800717a:	2304      	movs	r3, #4
 800717c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800717e:	4618      	mov	r0, r3
 8007180:	e7f4      	b.n	800716c <SDMMC_CmdBlockLength+0x58>
}
 8007182:	bc30      	pop	{r4, r5}
 8007184:	f7ff bf18 	b.w	8006fb8 <SDMMC_GetCmdResp1.part.2>
 8007188:	20000038 	.word	0x20000038
 800718c:	10624dd3 	.word	0x10624dd3
 8007190:	fffee0c0 	.word	0xfffee0c0
 8007194:	00200045 	.word	0x00200045
 8007198:	002000c5 	.word	0x002000c5

0800719c <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800719c:	4a1c      	ldr	r2, [pc, #112]	; (8007210 <SDMMC_CmdReadSingleBlock+0x74>)
 800719e:	4b1d      	ldr	r3, [pc, #116]	; (8007214 <SDMMC_CmdReadSingleBlock+0x78>)
{
 80071a0:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071a2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071a4:	f241 1411 	movw	r4, #4369	; 0x1111
  SDMMCx->ARG = Command->Argument;
 80071a8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071aa:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071ae:	68c1      	ldr	r1, [r0, #12]
 80071b0:	4d19      	ldr	r5, [pc, #100]	; (8007218 <SDMMC_CmdReadSingleBlock+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80071b6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071b8:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80071ba:	4918      	ldr	r1, [pc, #96]	; (800721c <SDMMC_CmdReadSingleBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071bc:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071c0:	432c      	orrs	r4, r5
 80071c2:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80071c4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80071c8:	d312      	bcc.n	80071f0 <SDMMC_CmdReadSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 80071ca:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80071cc:	420a      	tst	r2, r1
 80071ce:	d0f9      	beq.n	80071c4 <SDMMC_CmdReadSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80071d0:	0494      	lsls	r4, r2, #18
 80071d2:	d4f7      	bmi.n	80071c4 <SDMMC_CmdReadSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80071d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80071d6:	075a      	lsls	r2, r3, #29
 80071d8:	d413      	bmi.n	8007202 <SDMMC_CmdReadSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80071da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80071dc:	07db      	lsls	r3, r3, #31
 80071de:	d40b      	bmi.n	80071f8 <SDMMC_CmdReadSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80071e0:	4b0f      	ldr	r3, [pc, #60]	; (8007220 <SDMMC_CmdReadSingleBlock+0x84>)
 80071e2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80071e4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b11      	cmp	r3, #17
 80071ea:	d00e      	beq.n	800720a <SDMMC_CmdReadSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071ec:	2001      	movs	r0, #1
  return errorstate;
 80071ee:	e001      	b.n	80071f4 <SDMMC_CmdReadSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80071f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80071f4:	bc30      	pop	{r4, r5}
 80071f6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80071f8:	2301      	movs	r3, #1
 80071fa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071fc:	4618      	mov	r0, r3
}
 80071fe:	bc30      	pop	{r4, r5}
 8007200:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007202:	2304      	movs	r3, #4
 8007204:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007206:	4618      	mov	r0, r3
 8007208:	e7f4      	b.n	80071f4 <SDMMC_CmdReadSingleBlock+0x58>
}
 800720a:	bc30      	pop	{r4, r5}
 800720c:	f7ff bed4 	b.w	8006fb8 <SDMMC_GetCmdResp1.part.2>
 8007210:	20000038 	.word	0x20000038
 8007214:	10624dd3 	.word	0x10624dd3
 8007218:	fffee0c0 	.word	0xfffee0c0
 800721c:	00200045 	.word	0x00200045
 8007220:	002000c5 	.word	0x002000c5

08007224 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007224:	4a1c      	ldr	r2, [pc, #112]	; (8007298 <SDMMC_CmdReadMultiBlock+0x74>)
 8007226:	4b1d      	ldr	r3, [pc, #116]	; (800729c <SDMMC_CmdReadMultiBlock+0x78>)
{
 8007228:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800722a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800722c:	f241 1412 	movw	r4, #4370	; 0x1112
  SDMMCx->ARG = Command->Argument;
 8007230:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007232:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007236:	68c1      	ldr	r1, [r0, #12]
 8007238:	4d19      	ldr	r5, [pc, #100]	; (80072a0 <SDMMC_CmdReadMultiBlock+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800723a:	f241 3388 	movw	r3, #5000	; 0x1388
 800723e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007240:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007242:	4918      	ldr	r1, [pc, #96]	; (80072a4 <SDMMC_CmdReadMultiBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007244:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007248:	432c      	orrs	r4, r5
 800724a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800724c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007250:	d312      	bcc.n	8007278 <SDMMC_CmdReadMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 8007252:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007254:	420a      	tst	r2, r1
 8007256:	d0f9      	beq.n	800724c <SDMMC_CmdReadMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007258:	0494      	lsls	r4, r2, #18
 800725a:	d4f7      	bmi.n	800724c <SDMMC_CmdReadMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800725c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800725e:	075a      	lsls	r2, r3, #29
 8007260:	d413      	bmi.n	800728a <SDMMC_CmdReadMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007262:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007264:	07db      	lsls	r3, r3, #31
 8007266:	d40b      	bmi.n	8007280 <SDMMC_CmdReadMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007268:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <SDMMC_CmdReadMultiBlock+0x84>)
 800726a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800726c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b12      	cmp	r3, #18
 8007272:	d00e      	beq.n	8007292 <SDMMC_CmdReadMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007274:	2001      	movs	r0, #1
  return errorstate;
 8007276:	e001      	b.n	800727c <SDMMC_CmdReadMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007278:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800727c:	bc30      	pop	{r4, r5}
 800727e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007280:	2301      	movs	r3, #1
 8007282:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007284:	4618      	mov	r0, r3
}
 8007286:	bc30      	pop	{r4, r5}
 8007288:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800728a:	2304      	movs	r3, #4
 800728c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800728e:	4618      	mov	r0, r3
 8007290:	e7f4      	b.n	800727c <SDMMC_CmdReadMultiBlock+0x58>
}
 8007292:	bc30      	pop	{r4, r5}
 8007294:	f7ff be90 	b.w	8006fb8 <SDMMC_GetCmdResp1.part.2>
 8007298:	20000038 	.word	0x20000038
 800729c:	10624dd3 	.word	0x10624dd3
 80072a0:	fffee0c0 	.word	0xfffee0c0
 80072a4:	00200045 	.word	0x00200045
 80072a8:	002000c5 	.word	0x002000c5

080072ac <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072ac:	4a1c      	ldr	r2, [pc, #112]	; (8007320 <SDMMC_CmdWriteSingleBlock+0x74>)
 80072ae:	4b1d      	ldr	r3, [pc, #116]	; (8007324 <SDMMC_CmdWriteSingleBlock+0x78>)
{
 80072b0:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072b2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80072b4:	f241 1418 	movw	r4, #4376	; 0x1118
  SDMMCx->ARG = Command->Argument;
 80072b8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072ba:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80072be:	68c1      	ldr	r1, [r0, #12]
 80072c0:	4d19      	ldr	r5, [pc, #100]	; (8007328 <SDMMC_CmdWriteSingleBlock+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80072c6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80072c8:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80072ca:	4918      	ldr	r1, [pc, #96]	; (800732c <SDMMC_CmdWriteSingleBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072cc:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80072d0:	432c      	orrs	r4, r5
 80072d2:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80072d4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80072d8:	d312      	bcc.n	8007300 <SDMMC_CmdWriteSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 80072da:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80072dc:	420a      	tst	r2, r1
 80072de:	d0f9      	beq.n	80072d4 <SDMMC_CmdWriteSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80072e0:	0494      	lsls	r4, r2, #18
 80072e2:	d4f7      	bmi.n	80072d4 <SDMMC_CmdWriteSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80072e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072e6:	075a      	lsls	r2, r3, #29
 80072e8:	d413      	bmi.n	8007312 <SDMMC_CmdWriteSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80072ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072ec:	07db      	lsls	r3, r3, #31
 80072ee:	d40b      	bmi.n	8007308 <SDMMC_CmdWriteSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072f0:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <SDMMC_CmdWriteSingleBlock+0x84>)
 80072f2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80072f4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b18      	cmp	r3, #24
 80072fa:	d00e      	beq.n	800731a <SDMMC_CmdWriteSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072fc:	2001      	movs	r0, #1
  return errorstate;
 80072fe:	e001      	b.n	8007304 <SDMMC_CmdWriteSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007300:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007304:	bc30      	pop	{r4, r5}
 8007306:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007308:	2301      	movs	r3, #1
 800730a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800730c:	4618      	mov	r0, r3
}
 800730e:	bc30      	pop	{r4, r5}
 8007310:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007312:	2304      	movs	r3, #4
 8007314:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007316:	4618      	mov	r0, r3
 8007318:	e7f4      	b.n	8007304 <SDMMC_CmdWriteSingleBlock+0x58>
}
 800731a:	bc30      	pop	{r4, r5}
 800731c:	f7ff be4c 	b.w	8006fb8 <SDMMC_GetCmdResp1.part.2>
 8007320:	20000038 	.word	0x20000038
 8007324:	10624dd3 	.word	0x10624dd3
 8007328:	fffee0c0 	.word	0xfffee0c0
 800732c:	00200045 	.word	0x00200045
 8007330:	002000c5 	.word	0x002000c5

08007334 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007334:	4a1c      	ldr	r2, [pc, #112]	; (80073a8 <SDMMC_CmdWriteMultiBlock+0x74>)
 8007336:	4b1d      	ldr	r3, [pc, #116]	; (80073ac <SDMMC_CmdWriteMultiBlock+0x78>)
{
 8007338:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800733a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800733c:	f241 1419 	movw	r4, #4377	; 0x1119
  SDMMCx->ARG = Command->Argument;
 8007340:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007342:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007346:	68c1      	ldr	r1, [r0, #12]
 8007348:	4d19      	ldr	r5, [pc, #100]	; (80073b0 <SDMMC_CmdWriteMultiBlock+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800734a:	f241 3388 	movw	r3, #5000	; 0x1388
 800734e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007350:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007352:	4918      	ldr	r1, [pc, #96]	; (80073b4 <SDMMC_CmdWriteMultiBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007354:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007358:	432c      	orrs	r4, r5
 800735a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800735c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007360:	d312      	bcc.n	8007388 <SDMMC_CmdWriteMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 8007362:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007364:	420a      	tst	r2, r1
 8007366:	d0f9      	beq.n	800735c <SDMMC_CmdWriteMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007368:	0494      	lsls	r4, r2, #18
 800736a:	d4f7      	bmi.n	800735c <SDMMC_CmdWriteMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800736c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800736e:	075a      	lsls	r2, r3, #29
 8007370:	d413      	bmi.n	800739a <SDMMC_CmdWriteMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007372:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007374:	07db      	lsls	r3, r3, #31
 8007376:	d40b      	bmi.n	8007390 <SDMMC_CmdWriteMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007378:	4b0f      	ldr	r3, [pc, #60]	; (80073b8 <SDMMC_CmdWriteMultiBlock+0x84>)
 800737a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800737c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b19      	cmp	r3, #25
 8007382:	d00e      	beq.n	80073a2 <SDMMC_CmdWriteMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007384:	2001      	movs	r0, #1
  return errorstate;
 8007386:	e001      	b.n	800738c <SDMMC_CmdWriteMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007388:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800738c:	bc30      	pop	{r4, r5}
 800738e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007390:	2301      	movs	r3, #1
 8007392:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007394:	4618      	mov	r0, r3
}
 8007396:	bc30      	pop	{r4, r5}
 8007398:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800739a:	2304      	movs	r3, #4
 800739c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800739e:	4618      	mov	r0, r3
 80073a0:	e7f4      	b.n	800738c <SDMMC_CmdWriteMultiBlock+0x58>
}
 80073a2:	bc30      	pop	{r4, r5}
 80073a4:	f7ff be08 	b.w	8006fb8 <SDMMC_GetCmdResp1.part.2>
 80073a8:	20000038 	.word	0x20000038
 80073ac:	10624dd3 	.word	0x10624dd3
 80073b0:	fffee0c0 	.word	0xfffee0c0
 80073b4:	00200045 	.word	0x00200045
 80073b8:	002000c5 	.word	0x002000c5

080073bc <SDMMC_CmdStopTransfer>:
{
 80073bc:	b570      	push	{r4, r5, r6, lr}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80073be:	68c3      	ldr	r3, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 80073c0:	2600      	movs	r6, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80073c2:	4a2b      	ldr	r2, [pc, #172]	; (8007470 <SDMMC_CmdStopTransfer+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073c4:	f241 140c 	movw	r4, #4364	; 0x110c
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80073c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073cc:	4d29      	ldr	r5, [pc, #164]	; (8007474 <SDMMC_CmdStopTransfer+0xb8>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80073ce:	6812      	ldr	r2, [r2, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80073d0:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80073d2:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80073d4:	4b28      	ldr	r3, [pc, #160]	; (8007478 <SDMMC_CmdStopTransfer+0xbc>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80073d6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80073da:	fba3 3202 	umull	r3, r2, r3, r2
 80073de:	4b27      	ldr	r3, [pc, #156]	; (800747c <SDMMC_CmdStopTransfer+0xc0>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80073e0:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 80073e2:	6086      	str	r6, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80073e4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073e6:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80073e8:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073ec:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80073ee:	4924      	ldr	r1, [pc, #144]	; (8007480 <SDMMC_CmdStopTransfer+0xc4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073f0:	432c      	orrs	r4, r5
 80073f2:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80073f4:	b1c3      	cbz	r3, 8007428 <SDMMC_CmdStopTransfer+0x6c>
    sta_reg = SDMMCx->STA;
 80073f6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80073f8:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80073fa:	420a      	tst	r2, r1
 80073fc:	d0fa      	beq.n	80073f4 <SDMMC_CmdStopTransfer+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80073fe:	0492      	lsls	r2, r2, #18
 8007400:	d4f8      	bmi.n	80073f4 <SDMMC_CmdStopTransfer+0x38>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007402:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007404:	075b      	lsls	r3, r3, #29
 8007406:	d41f      	bmi.n	8007448 <SDMMC_CmdStopTransfer+0x8c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007408:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800740a:	f014 0401 	ands.w	r4, r4, #1
 800740e:	d113      	bne.n	8007438 <SDMMC_CmdStopTransfer+0x7c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007410:	4b1c      	ldr	r3, [pc, #112]	; (8007484 <SDMMC_CmdStopTransfer+0xc8>)
 8007412:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007414:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b0c      	cmp	r3, #12
 800741a:	d01c      	beq.n	8007456 <SDMMC_CmdStopTransfer+0x9a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800741c:	68c3      	ldr	r3, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800741e:	2401      	movs	r4, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007424:	60c3      	str	r3, [r0, #12]
 8007426:	e005      	b.n	8007434 <SDMMC_CmdStopTransfer+0x78>
 8007428:	68c3      	ldr	r3, [r0, #12]
      return SDMMC_ERROR_TIMEOUT;
 800742a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800742e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007432:	60c3      	str	r3, [r0, #12]
}
 8007434:	4620      	mov	r0, r4
 8007436:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007438:	2401      	movs	r4, #1
 800743a:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800743c:	68c3      	ldr	r3, [r0, #12]
 800743e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007442:	60c3      	str	r3, [r0, #12]
}
 8007444:	4620      	mov	r0, r4
 8007446:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007448:	2404      	movs	r4, #4
 800744a:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800744c:	68c3      	ldr	r3, [r0, #12]
 800744e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007452:	60c3      	str	r3, [r0, #12]
 8007454:	e7ee      	b.n	8007434 <SDMMC_CmdStopTransfer+0x78>
 8007456:	4605      	mov	r5, r0
 8007458:	f7ff fdae 	bl	8006fb8 <SDMMC_GetCmdResp1.part.2>
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800745c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8007460:	bf18      	it	ne
 8007462:	4604      	movne	r4, r0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007464:	68eb      	ldr	r3, [r5, #12]
 8007466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800746a:	60eb      	str	r3, [r5, #12]
 800746c:	e7e2      	b.n	8007434 <SDMMC_CmdStopTransfer+0x78>
 800746e:	bf00      	nop
 8007470:	20000038 	.word	0x20000038
 8007474:	fffee0c0 	.word	0xfffee0c0
 8007478:	10624dd3 	.word	0x10624dd3
 800747c:	05f5e100 	.word	0x05f5e100
 8007480:	00200045 	.word	0x00200045
 8007484:	002000c5 	.word	0x002000c5

08007488 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007488:	4b1c      	ldr	r3, [pc, #112]	; (80074fc <SDMMC_CmdSelDesel+0x74>)
 800748a:	491d      	ldr	r1, [pc, #116]	; (8007500 <SDMMC_CmdSelDesel+0x78>)
{
 800748c:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800748e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007490:	f241 1407 	movw	r4, #4359	; 0x1107
  SDMMCx->ARG = Command->Argument;
 8007494:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007496:	4d1b      	ldr	r5, [pc, #108]	; (8007504 <SDMMC_CmdSelDesel+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007498:	fba1 3203 	umull	r3, r2, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800749c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800749e:	f241 3388 	movw	r3, #5000	; 0x1388
 80074a2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80074a4:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80074a6:	4918      	ldr	r1, [pc, #96]	; (8007508 <SDMMC_CmdSelDesel+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80074a8:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80074ac:	432c      	orrs	r4, r5
 80074ae:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80074b0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80074b4:	d312      	bcc.n	80074dc <SDMMC_CmdSelDesel+0x54>
    sta_reg = SDMMCx->STA;
 80074b6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80074b8:	420a      	tst	r2, r1
 80074ba:	d0f9      	beq.n	80074b0 <SDMMC_CmdSelDesel+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80074bc:	0494      	lsls	r4, r2, #18
 80074be:	d4f7      	bmi.n	80074b0 <SDMMC_CmdSelDesel+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80074c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80074c2:	075a      	lsls	r2, r3, #29
 80074c4:	d413      	bmi.n	80074ee <SDMMC_CmdSelDesel+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80074c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80074c8:	07db      	lsls	r3, r3, #31
 80074ca:	d40b      	bmi.n	80074e4 <SDMMC_CmdSelDesel+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80074cc:	4b0f      	ldr	r3, [pc, #60]	; (800750c <SDMMC_CmdSelDesel+0x84>)
 80074ce:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80074d0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b07      	cmp	r3, #7
 80074d6:	d00e      	beq.n	80074f6 <SDMMC_CmdSelDesel+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074d8:	2001      	movs	r0, #1
  return errorstate;
 80074da:	e001      	b.n	80074e0 <SDMMC_CmdSelDesel+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80074dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80074e0:	bc30      	pop	{r4, r5}
 80074e2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80074e4:	2301      	movs	r3, #1
 80074e6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074e8:	4618      	mov	r0, r3
}
 80074ea:	bc30      	pop	{r4, r5}
 80074ec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80074ee:	2304      	movs	r3, #4
 80074f0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074f2:	4618      	mov	r0, r3
 80074f4:	e7f4      	b.n	80074e0 <SDMMC_CmdSelDesel+0x58>
}
 80074f6:	bc30      	pop	{r4, r5}
 80074f8:	f7ff bd5e 	b.w	8006fb8 <SDMMC_GetCmdResp1.part.2>
 80074fc:	20000038 	.word	0x20000038
 8007500:	10624dd3 	.word	0x10624dd3
 8007504:	fffee0c0 	.word	0xfffee0c0
 8007508:	00200045 	.word	0x00200045
 800750c:	002000c5 	.word	0x002000c5

08007510 <SDMMC_CmdGoIdleState>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007510:	4b12      	ldr	r3, [pc, #72]	; (800755c <SDMMC_CmdGoIdleState+0x4c>)
{
 8007512:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8007514:	2200      	movs	r2, #0
{
 8007516:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007518:	4c11      	ldr	r4, [pc, #68]	; (8007560 <SDMMC_CmdGoIdleState+0x50>)
 800751a:	6818      	ldr	r0, [r3, #0]
 800751c:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8007520:	608a      	str	r2, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007522:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007526:	4a0f      	ldr	r2, [pc, #60]	; (8007564 <SDMMC_CmdGoIdleState+0x54>)
 8007528:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800752a:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800752c:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800752e:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007532:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007536:	60ca      	str	r2, [r1, #12]
 8007538:	e002      	b.n	8007540 <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800753a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800753c:	0612      	lsls	r2, r2, #24
 800753e:	d407      	bmi.n	8007550 <SDMMC_CmdGoIdleState+0x40>
    if (count-- == 0U)
 8007540:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007544:	d2f9      	bcs.n	800753a <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007546:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800754a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800754e:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007550:	4b05      	ldr	r3, [pc, #20]	; (8007568 <SDMMC_CmdGoIdleState+0x58>)
  return SDMMC_ERROR_NONE;
 8007552:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007554:	638b      	str	r3, [r1, #56]	; 0x38
}
 8007556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	20000038 	.word	0x20000038
 8007560:	10624dd3 	.word	0x10624dd3
 8007564:	fffee0c0 	.word	0xfffee0c0
 8007568:	002000c5 	.word	0x002000c5

0800756c <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800756c:	4a1c      	ldr	r2, [pc, #112]	; (80075e0 <SDMMC_CmdOperCond+0x74>)
{
 800756e:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007570:	4b1c      	ldr	r3, [pc, #112]	; (80075e4 <SDMMC_CmdOperCond+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007572:	f241 1008 	movw	r0, #4360	; 0x1108
{
 8007576:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8007578:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800757c:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800757e:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007580:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007584:	68cd      	ldr	r5, [r1, #12]
 8007586:	4c18      	ldr	r4, [pc, #96]	; (80075e8 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007588:	f241 3388 	movw	r3, #5000	; 0x1388
 800758c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800758e:	402c      	ands	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007590:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007594:	4320      	orrs	r0, r4
 8007596:	60c8      	str	r0, [r1, #12]

  do
  {
    if (count-- == 0U)
 8007598:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800759c:	d313      	bcc.n	80075c6 <SDMMC_CmdOperCond+0x5a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800759e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80075a0:	f012 0f45 	tst.w	r2, #69	; 0x45
 80075a4:	d0f8      	beq.n	8007598 <SDMMC_CmdOperCond+0x2c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80075a6:	0492      	lsls	r2, r2, #18
 80075a8:	d4f6      	bmi.n	8007598 <SDMMC_CmdOperCond+0x2c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80075aa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80075ac:	075b      	lsls	r3, r3, #29
 80075ae:	d412      	bmi.n	80075d6 <SDMMC_CmdOperCond+0x6a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80075b0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80075b2:	f010 0001 	ands.w	r0, r0, #1
 80075b6:	d10a      	bne.n	80075ce <SDMMC_CmdOperCond+0x62>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80075b8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80075ba:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80075be:	d00d      	beq.n	80075dc <SDMMC_CmdOperCond+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80075c0:	2340      	movs	r3, #64	; 0x40
 80075c2:	638b      	str	r3, [r1, #56]	; 0x38
 80075c4:	e001      	b.n	80075ca <SDMMC_CmdOperCond+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 80075c6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80075ca:	bc30      	pop	{r4, r5}
 80075cc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80075ce:	2001      	movs	r0, #1
 80075d0:	6388      	str	r0, [r1, #56]	; 0x38
}
 80075d2:	bc30      	pop	{r4, r5}
 80075d4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80075d6:	2004      	movs	r0, #4
 80075d8:	6388      	str	r0, [r1, #56]	; 0x38
 80075da:	e7f6      	b.n	80075ca <SDMMC_CmdOperCond+0x5e>
  }

  return SDMMC_ERROR_NONE;
 80075dc:	4618      	mov	r0, r3
  return errorstate;
 80075de:	e7f4      	b.n	80075ca <SDMMC_CmdOperCond+0x5e>
 80075e0:	20000038 	.word	0x20000038
 80075e4:	10624dd3 	.word	0x10624dd3
 80075e8:	fffee0c0 	.word	0xfffee0c0

080075ec <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80075ec:	4a1c      	ldr	r2, [pc, #112]	; (8007660 <SDMMC_CmdAppCommand+0x74>)
 80075ee:	4b1d      	ldr	r3, [pc, #116]	; (8007664 <SDMMC_CmdAppCommand+0x78>)
{
 80075f0:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80075f2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80075f4:	f241 1437 	movw	r4, #4407	; 0x1137
  SDMMCx->ARG = Command->Argument;
 80075f8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80075fa:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80075fe:	68c1      	ldr	r1, [r0, #12]
 8007600:	4d19      	ldr	r5, [pc, #100]	; (8007668 <SDMMC_CmdAppCommand+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007602:	f241 3388 	movw	r3, #5000	; 0x1388
 8007606:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007608:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800760a:	4918      	ldr	r1, [pc, #96]	; (800766c <SDMMC_CmdAppCommand+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800760c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007610:	432c      	orrs	r4, r5
 8007612:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007614:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007618:	d312      	bcc.n	8007640 <SDMMC_CmdAppCommand+0x54>
    sta_reg = SDMMCx->STA;
 800761a:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800761c:	420a      	tst	r2, r1
 800761e:	d0f9      	beq.n	8007614 <SDMMC_CmdAppCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007620:	0494      	lsls	r4, r2, #18
 8007622:	d4f7      	bmi.n	8007614 <SDMMC_CmdAppCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007624:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007626:	075a      	lsls	r2, r3, #29
 8007628:	d413      	bmi.n	8007652 <SDMMC_CmdAppCommand+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800762a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800762c:	07db      	lsls	r3, r3, #31
 800762e:	d40b      	bmi.n	8007648 <SDMMC_CmdAppCommand+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007630:	4b0f      	ldr	r3, [pc, #60]	; (8007670 <SDMMC_CmdAppCommand+0x84>)
 8007632:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007634:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b37      	cmp	r3, #55	; 0x37
 800763a:	d00e      	beq.n	800765a <SDMMC_CmdAppCommand+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800763c:	2001      	movs	r0, #1
  return errorstate;
 800763e:	e001      	b.n	8007644 <SDMMC_CmdAppCommand+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007640:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007644:	bc30      	pop	{r4, r5}
 8007646:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007648:	2301      	movs	r3, #1
 800764a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800764c:	4618      	mov	r0, r3
}
 800764e:	bc30      	pop	{r4, r5}
 8007650:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007652:	2304      	movs	r3, #4
 8007654:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007656:	4618      	mov	r0, r3
 8007658:	e7f4      	b.n	8007644 <SDMMC_CmdAppCommand+0x58>
}
 800765a:	bc30      	pop	{r4, r5}
 800765c:	f7ff bcac 	b.w	8006fb8 <SDMMC_GetCmdResp1.part.2>
 8007660:	20000038 	.word	0x20000038
 8007664:	10624dd3 	.word	0x10624dd3
 8007668:	fffee0c0 	.word	0xfffee0c0
 800766c:	00200045 	.word	0x00200045
 8007670:	002000c5 	.word	0x002000c5

08007674 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <SDMMC_CmdAppOperCommand+0x58>)
 8007676:	4b16      	ldr	r3, [pc, #88]	; (80076d0 <SDMMC_CmdAppOperCommand+0x5c>)
{
 8007678:	b430      	push	{r4, r5}
 800767a:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800767c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800767e:	f241 1029 	movw	r0, #4393	; 0x1129
  SDMMCx->ARG = Command->Argument;
 8007682:	60a1      	str	r1, [r4, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007684:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007688:	68e5      	ldr	r5, [r4, #12]
 800768a:	4912      	ldr	r1, [pc, #72]	; (80076d4 <SDMMC_CmdAppOperCommand+0x60>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800768c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007690:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007692:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007694:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007698:	4308      	orrs	r0, r1
 800769a:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 800769c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80076a0:	d30d      	bcc.n	80076be <SDMMC_CmdAppOperCommand+0x4a>
    sta_reg = SDMMCx->STA;
 80076a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80076a4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80076a8:	d0f8      	beq.n	800769c <SDMMC_CmdAppOperCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076aa:	0492      	lsls	r2, r2, #18
 80076ac:	d4f6      	bmi.n	800769c <SDMMC_CmdAppOperCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80076ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80076b0:	f010 0004 	ands.w	r0, r0, #4
 80076b4:	d107      	bne.n	80076c6 <SDMMC_CmdAppOperCommand+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80076b6:	4b08      	ldr	r3, [pc, #32]	; (80076d8 <SDMMC_CmdAppOperCommand+0x64>)
 80076b8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80076ba:	bc30      	pop	{r4, r5}
 80076bc:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80076be:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80076c2:	bc30      	pop	{r4, r5}
 80076c4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076c6:	2004      	movs	r0, #4
 80076c8:	63a0      	str	r0, [r4, #56]	; 0x38
 80076ca:	e7fa      	b.n	80076c2 <SDMMC_CmdAppOperCommand+0x4e>
 80076cc:	20000038 	.word	0x20000038
 80076d0:	10624dd3 	.word	0x10624dd3
 80076d4:	fffee0c0 	.word	0xfffee0c0
 80076d8:	002000c5 	.word	0x002000c5

080076dc <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076dc:	4a1c      	ldr	r2, [pc, #112]	; (8007750 <SDMMC_CmdBusWidth+0x74>)
 80076de:	4b1d      	ldr	r3, [pc, #116]	; (8007754 <SDMMC_CmdBusWidth+0x78>)
{
 80076e0:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076e2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076e4:	f241 1406 	movw	r4, #4358	; 0x1106
  SDMMCx->ARG = Command->Argument;
 80076e8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076ea:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076ee:	68c1      	ldr	r1, [r0, #12]
 80076f0:	4d19      	ldr	r5, [pc, #100]	; (8007758 <SDMMC_CmdBusWidth+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80076f6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076f8:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80076fa:	4918      	ldr	r1, [pc, #96]	; (800775c <SDMMC_CmdBusWidth+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076fc:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007700:	432c      	orrs	r4, r5
 8007702:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007704:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007708:	d312      	bcc.n	8007730 <SDMMC_CmdBusWidth+0x54>
    sta_reg = SDMMCx->STA;
 800770a:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800770c:	420a      	tst	r2, r1
 800770e:	d0f9      	beq.n	8007704 <SDMMC_CmdBusWidth+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007710:	0494      	lsls	r4, r2, #18
 8007712:	d4f7      	bmi.n	8007704 <SDMMC_CmdBusWidth+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007714:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007716:	075a      	lsls	r2, r3, #29
 8007718:	d413      	bmi.n	8007742 <SDMMC_CmdBusWidth+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800771a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800771c:	07db      	lsls	r3, r3, #31
 800771e:	d40b      	bmi.n	8007738 <SDMMC_CmdBusWidth+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007720:	4b0f      	ldr	r3, [pc, #60]	; (8007760 <SDMMC_CmdBusWidth+0x84>)
 8007722:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007724:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b06      	cmp	r3, #6
 800772a:	d00e      	beq.n	800774a <SDMMC_CmdBusWidth+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800772c:	2001      	movs	r0, #1
  return errorstate;
 800772e:	e001      	b.n	8007734 <SDMMC_CmdBusWidth+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007730:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007734:	bc30      	pop	{r4, r5}
 8007736:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007738:	2301      	movs	r3, #1
 800773a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800773c:	4618      	mov	r0, r3
}
 800773e:	bc30      	pop	{r4, r5}
 8007740:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007742:	2304      	movs	r3, #4
 8007744:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007746:	4618      	mov	r0, r3
 8007748:	e7f4      	b.n	8007734 <SDMMC_CmdBusWidth+0x58>
}
 800774a:	bc30      	pop	{r4, r5}
 800774c:	f7ff bc34 	b.w	8006fb8 <SDMMC_GetCmdResp1.part.2>
 8007750:	20000038 	.word	0x20000038
 8007754:	10624dd3 	.word	0x10624dd3
 8007758:	fffee0c0 	.word	0xfffee0c0
 800775c:	00200045 	.word	0x00200045
 8007760:	002000c5 	.word	0x002000c5

08007764 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007764:	4a1d      	ldr	r2, [pc, #116]	; (80077dc <SDMMC_CmdSendSCR+0x78>)
  SDMMCx->ARG = Command->Argument;
 8007766:	2100      	movs	r1, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007768:	4b1d      	ldr	r3, [pc, #116]	; (80077e0 <SDMMC_CmdSendSCR+0x7c>)
{
 800776a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800776c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800776e:	f241 1433 	movw	r4, #4403	; 0x1133
  SDMMCx->ARG = Command->Argument;
 8007772:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007774:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007778:	68c1      	ldr	r1, [r0, #12]
 800777a:	4d1a      	ldr	r5, [pc, #104]	; (80077e4 <SDMMC_CmdSendSCR+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800777c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007780:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007782:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007784:	4918      	ldr	r1, [pc, #96]	; (80077e8 <SDMMC_CmdSendSCR+0x84>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007786:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800778a:	432c      	orrs	r4, r5
 800778c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800778e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007792:	d312      	bcc.n	80077ba <SDMMC_CmdSendSCR+0x56>
    sta_reg = SDMMCx->STA;
 8007794:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007796:	420a      	tst	r2, r1
 8007798:	d0f9      	beq.n	800778e <SDMMC_CmdSendSCR+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800779a:	0494      	lsls	r4, r2, #18
 800779c:	d4f7      	bmi.n	800778e <SDMMC_CmdSendSCR+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800779e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80077a0:	075a      	lsls	r2, r3, #29
 80077a2:	d413      	bmi.n	80077cc <SDMMC_CmdSendSCR+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80077a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80077a6:	07db      	lsls	r3, r3, #31
 80077a8:	d40b      	bmi.n	80077c2 <SDMMC_CmdSendSCR+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80077aa:	4b10      	ldr	r3, [pc, #64]	; (80077ec <SDMMC_CmdSendSCR+0x88>)
 80077ac:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80077ae:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b33      	cmp	r3, #51	; 0x33
 80077b4:	d00e      	beq.n	80077d4 <SDMMC_CmdSendSCR+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077b6:	2001      	movs	r0, #1
  return errorstate;
 80077b8:	e001      	b.n	80077be <SDMMC_CmdSendSCR+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 80077ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80077be:	bc30      	pop	{r4, r5}
 80077c0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80077c2:	2301      	movs	r3, #1
 80077c4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077c6:	4618      	mov	r0, r3
}
 80077c8:	bc30      	pop	{r4, r5}
 80077ca:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077cc:	2304      	movs	r3, #4
 80077ce:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077d0:	4618      	mov	r0, r3
 80077d2:	e7f4      	b.n	80077be <SDMMC_CmdSendSCR+0x5a>
}
 80077d4:	bc30      	pop	{r4, r5}
 80077d6:	f7ff bbef 	b.w	8006fb8 <SDMMC_GetCmdResp1.part.2>
 80077da:	bf00      	nop
 80077dc:	20000038 	.word	0x20000038
 80077e0:	10624dd3 	.word	0x10624dd3
 80077e4:	fffee0c0 	.word	0xfffee0c0
 80077e8:	00200045 	.word	0x00200045
 80077ec:	002000c5 	.word	0x002000c5

080077f0 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077f0:	4a19      	ldr	r2, [pc, #100]	; (8007858 <SDMMC_CmdSendCID+0x68>)
{
 80077f2:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077f4:	4b19      	ldr	r3, [pc, #100]	; (800785c <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077f6:	f241 3002 	movw	r0, #4866	; 0x1302
{
 80077fa:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80077fc:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077fe:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8007800:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007802:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007806:	68cd      	ldr	r5, [r1, #12]
 8007808:	4c15      	ldr	r4, [pc, #84]	; (8007860 <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800780a:	f241 3388 	movw	r3, #5000	; 0x1388
 800780e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007810:	402c      	ands	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007812:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007816:	4320      	orrs	r0, r4
 8007818:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 800781a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800781e:	d310      	bcc.n	8007842 <SDMMC_CmdSendCID+0x52>
    sta_reg = SDMMCx->STA;
 8007820:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007822:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007826:	d0f8      	beq.n	800781a <SDMMC_CmdSendCID+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007828:	0492      	lsls	r2, r2, #18
 800782a:	d4f6      	bmi.n	800781a <SDMMC_CmdSendCID+0x2a>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800782c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800782e:	075b      	lsls	r3, r3, #29
 8007830:	d40f      	bmi.n	8007852 <SDMMC_CmdSendCID+0x62>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007832:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007834:	f010 0001 	ands.w	r0, r0, #1
 8007838:	d107      	bne.n	800784a <SDMMC_CmdSendCID+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800783a:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <SDMMC_CmdSendCID+0x74>)
 800783c:	638b      	str	r3, [r1, #56]	; 0x38
}
 800783e:	bc30      	pop	{r4, r5}
 8007840:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007842:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007846:	bc30      	pop	{r4, r5}
 8007848:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800784a:	2001      	movs	r0, #1
 800784c:	6388      	str	r0, [r1, #56]	; 0x38
}
 800784e:	bc30      	pop	{r4, r5}
 8007850:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007852:	2004      	movs	r0, #4
 8007854:	6388      	str	r0, [r1, #56]	; 0x38
 8007856:	e7f6      	b.n	8007846 <SDMMC_CmdSendCID+0x56>
 8007858:	20000038 	.word	0x20000038
 800785c:	10624dd3 	.word	0x10624dd3
 8007860:	fffee0c0 	.word	0xfffee0c0
 8007864:	002000c5 	.word	0x002000c5

08007868 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007868:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <SDMMC_CmdSendCSD+0x68>)
 800786a:	4b1a      	ldr	r3, [pc, #104]	; (80078d4 <SDMMC_CmdSendCSD+0x6c>)
{
 800786c:	b430      	push	{r4, r5}
 800786e:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007870:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007872:	f241 3009 	movw	r0, #4873	; 0x1309
  SDMMCx->ARG = Command->Argument;
 8007876:	60a1      	str	r1, [r4, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007878:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800787c:	68e5      	ldr	r5, [r4, #12]
 800787e:	4916      	ldr	r1, [pc, #88]	; (80078d8 <SDMMC_CmdSendCSD+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007880:	f241 3388 	movw	r3, #5000	; 0x1388
 8007884:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007886:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007888:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800788c:	4308      	orrs	r0, r1
 800788e:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 8007890:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007894:	d310      	bcc.n	80078b8 <SDMMC_CmdSendCSD+0x50>
    sta_reg = SDMMCx->STA;
 8007896:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007898:	f012 0f45 	tst.w	r2, #69	; 0x45
 800789c:	d0f8      	beq.n	8007890 <SDMMC_CmdSendCSD+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800789e:	0492      	lsls	r2, r2, #18
 80078a0:	d4f6      	bmi.n	8007890 <SDMMC_CmdSendCSD+0x28>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80078a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078a4:	075b      	lsls	r3, r3, #29
 80078a6:	d40f      	bmi.n	80078c8 <SDMMC_CmdSendCSD+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80078a8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80078aa:	f010 0001 	ands.w	r0, r0, #1
 80078ae:	d107      	bne.n	80078c0 <SDMMC_CmdSendCSD+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078b0:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <SDMMC_CmdSendCSD+0x74>)
 80078b2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80078b4:	bc30      	pop	{r4, r5}
 80078b6:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80078b8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80078bc:	bc30      	pop	{r4, r5}
 80078be:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078c0:	2001      	movs	r0, #1
 80078c2:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80078c4:	bc30      	pop	{r4, r5}
 80078c6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80078c8:	2004      	movs	r0, #4
 80078ca:	63a0      	str	r0, [r4, #56]	; 0x38
 80078cc:	e7f6      	b.n	80078bc <SDMMC_CmdSendCSD+0x54>
 80078ce:	bf00      	nop
 80078d0:	20000038 	.word	0x20000038
 80078d4:	10624dd3 	.word	0x10624dd3
 80078d8:	fffee0c0 	.word	0xfffee0c0
 80078dc:	002000c5 	.word	0x002000c5

080078e0 <SDMMC_CmdSetRelAdd>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078e0:	4b25      	ldr	r3, [pc, #148]	; (8007978 <SDMMC_CmdSetRelAdd+0x98>)
 80078e2:	4a26      	ldr	r2, [pc, #152]	; (800797c <SDMMC_CmdSetRelAdd+0x9c>)
{
 80078e4:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 80078e6:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078e8:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80078ea:	4d25      	ldr	r5, [pc, #148]	; (8007980 <SDMMC_CmdSetRelAdd+0xa0>)
  SDMMCx->ARG = Command->Argument;
 80078ec:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80078ee:	f241 1403 	movw	r4, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078f2:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80078f6:	68c6      	ldr	r6, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078f8:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80078fa:	4035      	ands	r5, r6
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078fc:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007900:	432c      	orrs	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007902:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007906:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007908:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800790c:	d311      	bcc.n	8007932 <SDMMC_CmdSetRelAdd+0x52>
    sta_reg = SDMMCx->STA;
 800790e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007910:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007914:	d0f8      	beq.n	8007908 <SDMMC_CmdSetRelAdd+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007916:	0496      	lsls	r6, r2, #18
 8007918:	d4f6      	bmi.n	8007908 <SDMMC_CmdSetRelAdd+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800791a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800791c:	075d      	lsls	r5, r3, #29
 800791e:	d411      	bmi.n	8007944 <SDMMC_CmdSetRelAdd+0x64>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007920:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007922:	07dc      	lsls	r4, r3, #31
 8007924:	d409      	bmi.n	800793a <SDMMC_CmdSetRelAdd+0x5a>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007926:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b03      	cmp	r3, #3
 800792c:	d00e      	beq.n	800794c <SDMMC_CmdSetRelAdd+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800792e:	2001      	movs	r0, #1
 8007930:	e001      	b.n	8007936 <SDMMC_CmdSetRelAdd+0x56>
      return SDMMC_ERROR_TIMEOUT;
 8007932:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007936:	bc70      	pop	{r4, r5, r6}
 8007938:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800793a:	2301      	movs	r3, #1
 800793c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800793e:	4618      	mov	r0, r3
}
 8007940:	bc70      	pop	{r4, r5, r6}
 8007942:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007944:	2304      	movs	r3, #4
 8007946:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007948:	4618      	mov	r0, r3
 800794a:	e7f4      	b.n	8007936 <SDMMC_CmdSetRelAdd+0x56>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800794c:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <SDMMC_CmdSetRelAdd+0xa4>)
 800794e:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8007950:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007952:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8007956:	d009      	beq.n	800796c <SDMMC_CmdSetRelAdd+0x8c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007958:	045a      	lsls	r2, r3, #17
 800795a:	d40a      	bmi.n	8007972 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800795c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007960:	bf0c      	ite	eq
 8007962:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007966:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800796a:	e7e4      	b.n	8007936 <SDMMC_CmdSetRelAdd+0x56>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800796c:	0c1b      	lsrs	r3, r3, #16
 800796e:	800b      	strh	r3, [r1, #0]
 8007970:	e7e1      	b.n	8007936 <SDMMC_CmdSetRelAdd+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007972:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007976:	e7de      	b.n	8007936 <SDMMC_CmdSetRelAdd+0x56>
 8007978:	20000038 	.word	0x20000038
 800797c:	10624dd3 	.word	0x10624dd3
 8007980:	fffee0c0 	.word	0xfffee0c0
 8007984:	002000c5 	.word	0x002000c5

08007988 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007988:	4a1c      	ldr	r2, [pc, #112]	; (80079fc <SDMMC_CmdSendStatus+0x74>)
 800798a:	4b1d      	ldr	r3, [pc, #116]	; (8007a00 <SDMMC_CmdSendStatus+0x78>)
{
 800798c:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800798e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007990:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 8007994:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007996:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800799a:	68c1      	ldr	r1, [r0, #12]
 800799c:	4d19      	ldr	r5, [pc, #100]	; (8007a04 <SDMMC_CmdSendStatus+0x7c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800799e:	f241 3388 	movw	r3, #5000	; 0x1388
 80079a2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079a4:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80079a6:	4918      	ldr	r1, [pc, #96]	; (8007a08 <SDMMC_CmdSendStatus+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80079a8:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079ac:	432c      	orrs	r4, r5
 80079ae:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80079b0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80079b4:	d312      	bcc.n	80079dc <SDMMC_CmdSendStatus+0x54>
    sta_reg = SDMMCx->STA;
 80079b6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80079b8:	420a      	tst	r2, r1
 80079ba:	d0f9      	beq.n	80079b0 <SDMMC_CmdSendStatus+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80079bc:	0494      	lsls	r4, r2, #18
 80079be:	d4f7      	bmi.n	80079b0 <SDMMC_CmdSendStatus+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079c2:	075a      	lsls	r2, r3, #29
 80079c4:	d413      	bmi.n	80079ee <SDMMC_CmdSendStatus+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079c8:	07db      	lsls	r3, r3, #31
 80079ca:	d40b      	bmi.n	80079e4 <SDMMC_CmdSendStatus+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079cc:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <SDMMC_CmdSendStatus+0x84>)
 80079ce:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80079d0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b0d      	cmp	r3, #13
 80079d6:	d00e      	beq.n	80079f6 <SDMMC_CmdSendStatus+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079d8:	2001      	movs	r0, #1
  return errorstate;
 80079da:	e001      	b.n	80079e0 <SDMMC_CmdSendStatus+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80079dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80079e0:	bc30      	pop	{r4, r5}
 80079e2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80079e4:	2301      	movs	r3, #1
 80079e6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079e8:	4618      	mov	r0, r3
}
 80079ea:	bc30      	pop	{r4, r5}
 80079ec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079ee:	2304      	movs	r3, #4
 80079f0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079f2:	4618      	mov	r0, r3
 80079f4:	e7f4      	b.n	80079e0 <SDMMC_CmdSendStatus+0x58>
}
 80079f6:	bc30      	pop	{r4, r5}
 80079f8:	f7ff bade 	b.w	8006fb8 <SDMMC_GetCmdResp1.part.2>
 80079fc:	20000038 	.word	0x20000038
 8007a00:	10624dd3 	.word	0x10624dd3
 8007a04:	fffee0c0 	.word	0xfffee0c0
 8007a08:	00200045 	.word	0x00200045
 8007a0c:	002000c5 	.word	0x002000c5

08007a10 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a10:	4a1d      	ldr	r2, [pc, #116]	; (8007a88 <SDMMC_CmdStatusRegister+0x78>)
  SDMMCx->ARG = Command->Argument;
 8007a12:	2100      	movs	r1, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a14:	4b1d      	ldr	r3, [pc, #116]	; (8007a8c <SDMMC_CmdStatusRegister+0x7c>)
{
 8007a16:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a18:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007a1a:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 8007a1e:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a20:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007a24:	68c1      	ldr	r1, [r0, #12]
 8007a26:	4d1a      	ldr	r5, [pc, #104]	; (8007a90 <SDMMC_CmdStatusRegister+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a28:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a2c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007a2e:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007a30:	4918      	ldr	r1, [pc, #96]	; (8007a94 <SDMMC_CmdStatusRegister+0x84>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a32:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007a36:	432c      	orrs	r4, r5
 8007a38:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007a3a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007a3e:	d312      	bcc.n	8007a66 <SDMMC_CmdStatusRegister+0x56>
    sta_reg = SDMMCx->STA;
 8007a40:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a42:	420a      	tst	r2, r1
 8007a44:	d0f9      	beq.n	8007a3a <SDMMC_CmdStatusRegister+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007a46:	0494      	lsls	r4, r2, #18
 8007a48:	d4f7      	bmi.n	8007a3a <SDMMC_CmdStatusRegister+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a4c:	075a      	lsls	r2, r3, #29
 8007a4e:	d413      	bmi.n	8007a78 <SDMMC_CmdStatusRegister+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a52:	07db      	lsls	r3, r3, #31
 8007a54:	d40b      	bmi.n	8007a6e <SDMMC_CmdStatusRegister+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a56:	4b10      	ldr	r3, [pc, #64]	; (8007a98 <SDMMC_CmdStatusRegister+0x88>)
 8007a58:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007a5a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b0d      	cmp	r3, #13
 8007a60:	d00e      	beq.n	8007a80 <SDMMC_CmdStatusRegister+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a62:	2001      	movs	r0, #1
  return errorstate;
 8007a64:	e001      	b.n	8007a6a <SDMMC_CmdStatusRegister+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8007a66:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007a6a:	bc30      	pop	{r4, r5}
 8007a6c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a6e:	2301      	movs	r3, #1
 8007a70:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a72:	4618      	mov	r0, r3
}
 8007a74:	bc30      	pop	{r4, r5}
 8007a76:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a78:	2304      	movs	r3, #4
 8007a7a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	e7f4      	b.n	8007a6a <SDMMC_CmdStatusRegister+0x5a>
}
 8007a80:	bc30      	pop	{r4, r5}
 8007a82:	f7ff ba99 	b.w	8006fb8 <SDMMC_GetCmdResp1.part.2>
 8007a86:	bf00      	nop
 8007a88:	20000038 	.word	0x20000038
 8007a8c:	10624dd3 	.word	0x10624dd3
 8007a90:	fffee0c0 	.word	0xfffee0c0
 8007a94:	00200045 	.word	0x00200045
 8007a98:	002000c5 	.word	0x002000c5

08007a9c <SDMMC_CmdVoltageSwitch>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a9c:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <SDMMC_CmdVoltageSwitch+0x78>)
  SDMMCx->ARG = Command->Argument;
 8007a9e:	2100      	movs	r1, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007aa0:	4b1d      	ldr	r3, [pc, #116]	; (8007b18 <SDMMC_CmdVoltageSwitch+0x7c>)
{
 8007aa2:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007aa4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007aa6:	f241 140b 	movw	r4, #4363	; 0x110b
  SDMMCx->ARG = Command->Argument;
 8007aaa:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007aac:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007ab0:	68c1      	ldr	r1, [r0, #12]
 8007ab2:	4d1a      	ldr	r5, [pc, #104]	; (8007b1c <SDMMC_CmdVoltageSwitch+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ab4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ab8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007aba:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007abc:	4918      	ldr	r1, [pc, #96]	; (8007b20 <SDMMC_CmdVoltageSwitch+0x84>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007abe:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007ac2:	432c      	orrs	r4, r5
 8007ac4:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007ac6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007aca:	d312      	bcc.n	8007af2 <SDMMC_CmdVoltageSwitch+0x56>
    sta_reg = SDMMCx->STA;
 8007acc:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007ace:	420a      	tst	r2, r1
 8007ad0:	d0f9      	beq.n	8007ac6 <SDMMC_CmdVoltageSwitch+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007ad2:	0494      	lsls	r4, r2, #18
 8007ad4:	d4f7      	bmi.n	8007ac6 <SDMMC_CmdVoltageSwitch+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ad6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ad8:	075a      	lsls	r2, r3, #29
 8007ada:	d413      	bmi.n	8007b04 <SDMMC_CmdVoltageSwitch+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007adc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ade:	07db      	lsls	r3, r3, #31
 8007ae0:	d40b      	bmi.n	8007afa <SDMMC_CmdVoltageSwitch+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ae2:	4b10      	ldr	r3, [pc, #64]	; (8007b24 <SDMMC_CmdVoltageSwitch+0x88>)
 8007ae4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007ae6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b0b      	cmp	r3, #11
 8007aec:	d00e      	beq.n	8007b0c <SDMMC_CmdVoltageSwitch+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007aee:	2001      	movs	r0, #1
  return errorstate;
 8007af0:	e001      	b.n	8007af6 <SDMMC_CmdVoltageSwitch+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8007af2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007af6:	bc30      	pop	{r4, r5}
 8007af8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007afa:	2301      	movs	r3, #1
 8007afc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007afe:	4618      	mov	r0, r3
}
 8007b00:	bc30      	pop	{r4, r5}
 8007b02:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b04:	2304      	movs	r3, #4
 8007b06:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b08:	4618      	mov	r0, r3
 8007b0a:	e7f4      	b.n	8007af6 <SDMMC_CmdVoltageSwitch+0x5a>
}
 8007b0c:	bc30      	pop	{r4, r5}
 8007b0e:	f7ff ba53 	b.w	8006fb8 <SDMMC_GetCmdResp1.part.2>
 8007b12:	bf00      	nop
 8007b14:	20000038 	.word	0x20000038
 8007b18:	10624dd3 	.word	0x10624dd3
 8007b1c:	fffee0c0 	.word	0xfffee0c0
 8007b20:	00200045 	.word	0x00200045
 8007b24:	002000c5 	.word	0x002000c5

08007b28 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8007b28:	4b11      	ldr	r3, [pc, #68]	; (8007b70 <FATFS_LinkDriver+0x48>)
 8007b2a:	7a5a      	ldrb	r2, [r3, #9]
 8007b2c:	b10a      	cbz	r2, 8007b32 <FATFS_LinkDriver+0xa>
  uint8_t ret = 1;
 8007b2e:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8007b30:	4770      	bx	lr
{
 8007b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b34:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 8007b38:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8007b3c:	7a5e      	ldrb	r6, [r3, #9]
    path[1] = ':';
 8007b3e:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 8007b42:	7a5d      	ldrb	r5, [r3, #9]
    path[2] = '/';
 8007b44:	272f      	movs	r7, #47	; 0x2f
    DiskNum = disk.nbr++;
 8007b46:	7a5a      	ldrb	r2, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8007b48:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 8007b4c:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 8007b4e:	f803 400e 	strb.w	r4, [r3, lr]
    DiskNum = disk.nbr++;
 8007b52:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 8007b54:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 8007b56:	722c      	strb	r4, [r5, #8]
    DiskNum = disk.nbr++;
 8007b58:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8007b5a:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8007b5c:	b2c0      	uxtb	r0, r0
 8007b5e:	7258      	strb	r0, [r3, #9]
    path[3] = 0;
 8007b60:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 8007b62:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 8007b64:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 8007b66:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 8007b6a:	708f      	strb	r7, [r1, #2]
}
 8007b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	200000c4 	.word	0x200000c4

08007b74 <MX_ADC1_Init>:
  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007b74:	4b6f      	ldr	r3, [pc, #444]	; (8007d34 <MX_ADC1_Init+0x1c0>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007b76:	2108      	movs	r1, #8
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 10;
 8007b78:	200a      	movs	r0, #10
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.NbrOfDiscConversion = 4;
 8007b7a:	2204      	movs	r2, #4
{
 8007b7c:	b530      	push	{r4, r5, lr}
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8007b7e:	f44f 2400 	mov.w	r4, #524288	; 0x80000
  hadc1.Instance = ADC1;
 8007b82:	4d6d      	ldr	r5, [pc, #436]	; (8007d38 <MX_ADC1_Init+0x1c4>)
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007b84:	6119      	str	r1, [r3, #16]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8007b86:	2103      	movs	r1, #3
  hadc1.Init.NbrOfConversion = 10;
 8007b88:	6198      	str	r0, [r3, #24]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = 1;
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 8007b8a:	f240 4001 	movw	r0, #1025	; 0x401
{
 8007b8e:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Instance = ADC1;
 8007b90:	601d      	str	r5, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8007b92:	605c      	str	r4, [r3, #4]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8007b94:	f44f 6598 	mov.w	r5, #1216	; 0x4c0
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8007b98:	f44f 6480 	mov.w	r4, #1024	; 0x400
  hadc1.Init.NbrOfDiscConversion = 4;
 8007b9c:	621a      	str	r2, [r3, #32]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8007b9e:	62d9      	str	r1, [r3, #44]	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8007ba0:	2200      	movs	r2, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007ba2:	2101      	movs	r1, #1
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 8007ba4:	6498      	str	r0, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007ba6:	4618      	mov	r0, r3
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8007ba8:	609a      	str	r2, [r3, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8007baa:	9200      	str	r2, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007bac:	9203      	str	r2, [sp, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007bae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007bb0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007bb2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007bb4:	60d9      	str	r1, [r3, #12]
  hadc1.Init.OversamplingMode = ENABLE;
 8007bb6:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8007bba:	63d9      	str	r1, [r3, #60]	; 0x3c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8007bbc:	e9c3 5409 	strd	r5, r4, [r3, #36]	; 0x24
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007bc0:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8007bc4:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
  ADC_MultiModeTypeDef multimode = {0};
 8007bc8:	e9cd 2201 	strd	r2, r2, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007bcc:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8007bd0:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8007bd4:	e9cd 2208 	strd	r2, r2, [sp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007bd8:	f7f8 ffee 	bl	8000bb8 <HAL_ADC_Init>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	f040 80a5 	bne.w	8007d2c <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007be2:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007be4:	4669      	mov	r1, sp
 8007be6:	4853      	ldr	r0, [pc, #332]	; (8007d34 <MX_ADC1_Init+0x1c0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007be8:	9300      	str	r3, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007bea:	f7f9 f8ff 	bl	8000dec <HAL_ADCEx_MultiModeConfigChannel>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f040 8099 	bne.w	8007d26 <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8007bf4:	4a51      	ldr	r2, [pc, #324]	; (8007d3c <MX_ADC1_Init+0x1c8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007bf6:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8007bf8:	2103      	movs	r1, #3
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007bfa:	f240 70ff 	movw	r0, #2047	; 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007bfe:	2404      	movs	r4, #4
  sConfig.Channel = ADC_CHANNEL_16;
 8007c00:	9203      	str	r2, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007c02:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 32768;
 8007c04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  sConfig.OffsetSignedSaturation = DISABLE;
 8007c08:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8007c0a:	9105      	str	r1, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007c0c:	9006      	str	r0, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c0e:	a903      	add	r1, sp, #12
 8007c10:	4848      	ldr	r0, [pc, #288]	; (8007d34 <MX_ADC1_Init+0x1c0>)
  sConfig.OffsetSignedSaturation = DISABLE;
 8007c12:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  sConfig.Offset = 32768;
 8007c16:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c1a:	f7f8 fd0d 	bl	8000638 <HAL_ADC_ConfigChannel>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d17e      	bne.n	8007d20 <MX_ADC1_Init+0x1ac>
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007c22:	230c      	movs	r3, #12
  sConfig.Channel = ADC_CHANNEL_17;
 8007c24:	4a46      	ldr	r2, [pc, #280]	; (8007d40 <MX_ADC1_Init+0x1cc>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c26:	4843      	ldr	r0, [pc, #268]	; (8007d34 <MX_ADC1_Init+0x1c0>)
 8007c28:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007c2c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c30:	f7f8 fd02 	bl	8000638 <HAL_ADC_ConfigChannel>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d170      	bne.n	8007d1a <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007c38:	4a42      	ldr	r2, [pc, #264]	; (8007d44 <MX_ADC1_Init+0x1d0>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007c3a:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c3c:	a903      	add	r1, sp, #12
 8007c3e:	483d      	ldr	r0, [pc, #244]	; (8007d34 <MX_ADC1_Init+0x1c0>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007c40:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c44:	f7f8 fcf8 	bl	8000638 <HAL_ADC_ConfigChannel>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d163      	bne.n	8007d14 <MX_ADC1_Init+0x1a0>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007c4c:	4a3e      	ldr	r2, [pc, #248]	; (8007d48 <MX_ADC1_Init+0x1d4>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007c4e:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c50:	a903      	add	r1, sp, #12
 8007c52:	4838      	ldr	r0, [pc, #224]	; (8007d34 <MX_ADC1_Init+0x1c0>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007c54:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c58:	f7f8 fcee 	bl	8000638 <HAL_ADC_ConfigChannel>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d156      	bne.n	8007d0e <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8007c60:	4c3a      	ldr	r4, [pc, #232]	; (8007d4c <MX_ADC1_Init+0x1d8>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007c62:	f44f 7280 	mov.w	r2, #256	; 0x100
  sConfig.Offset = 0;
 8007c66:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c68:	a903      	add	r1, sp, #12
 8007c6a:	4832      	ldr	r0, [pc, #200]	; (8007d34 <MX_ADC1_Init+0x1c0>)
  sConfig.Offset = 0;
 8007c6c:	9308      	str	r3, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007c6e:	e9cd 4203 	strd	r4, r2, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c72:	f7f8 fce1 	bl	8000638 <HAL_ADC_ConfigChannel>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d146      	bne.n	8007d08 <MX_ADC1_Init+0x194>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8007c7a:	4a35      	ldr	r2, [pc, #212]	; (8007d50 <MX_ADC1_Init+0x1dc>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8007c7c:	f44f 7383 	mov.w	r3, #262	; 0x106
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c80:	a903      	add	r1, sp, #12
 8007c82:	482c      	ldr	r0, [pc, #176]	; (8007d34 <MX_ADC1_Init+0x1c0>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8007c84:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c88:	f7f8 fcd6 	bl	8000638 <HAL_ADC_ConfigChannel>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d138      	bne.n	8007d02 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007c90:	4c30      	ldr	r4, [pc, #192]	; (8007d54 <MX_ADC1_Init+0x1e0>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8007c92:	f44f 7286 	mov.w	r2, #268	; 0x10c
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8007c96:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c98:	a903      	add	r1, sp, #12
 8007c9a:	4826      	ldr	r0, [pc, #152]	; (8007d34 <MX_ADC1_Init+0x1c0>)
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8007c9c:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8007c9e:	e9cd 4203 	strd	r4, r2, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ca2:	f7f8 fcc9 	bl	8000638 <HAL_ADC_ConfigChannel>
 8007ca6:	bb48      	cbnz	r0, 8007cfc <MX_ADC1_Init+0x188>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8007ca8:	4c2b      	ldr	r4, [pc, #172]	; (8007d58 <MX_ADC1_Init+0x1e4>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8007caa:	f44f 7289 	mov.w	r2, #274	; 0x112
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8007cae:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007cb0:	a903      	add	r1, sp, #12
 8007cb2:	4820      	ldr	r0, [pc, #128]	; (8007d34 <MX_ADC1_Init+0x1c0>)
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8007cb4:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8007cb6:	e9cd 4203 	strd	r4, r2, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007cba:	f7f8 fcbd 	bl	8000638 <HAL_ADC_ConfigChannel>
 8007cbe:	b9d0      	cbnz	r0, 8007cf6 <MX_ADC1_Init+0x182>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007cc0:	4a26      	ldr	r2, [pc, #152]	; (8007d5c <MX_ADC1_Init+0x1e8>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8007cc2:	f44f 738c 	mov.w	r3, #280	; 0x118
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007cc6:	a903      	add	r1, sp, #12
 8007cc8:	481a      	ldr	r0, [pc, #104]	; (8007d34 <MX_ADC1_Init+0x1c0>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8007cca:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007cce:	f7f8 fcb3 	bl	8000638 <HAL_ADC_ConfigChannel>
 8007cd2:	b968      	cbnz	r0, 8007cf0 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8007cd4:	4a22      	ldr	r2, [pc, #136]	; (8007d60 <MX_ADC1_Init+0x1ec>)
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8007cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007cda:	a903      	add	r1, sp, #12
 8007cdc:	4815      	ldr	r0, [pc, #84]	; (8007d34 <MX_ADC1_Init+0x1c0>)
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8007cde:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ce2:	f7f8 fca9 	bl	8000638 <HAL_ADC_ConfigChannel>
 8007ce6:	b108      	cbz	r0, 8007cec <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8007ce8:	f001 f846 	bl	8008d78 <Error_Handler>
  }

}
 8007cec:	b00b      	add	sp, #44	; 0x2c
 8007cee:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8007cf0:	f001 f842 	bl	8008d78 <Error_Handler>
 8007cf4:	e7ee      	b.n	8007cd4 <MX_ADC1_Init+0x160>
    Error_Handler();
 8007cf6:	f001 f83f 	bl	8008d78 <Error_Handler>
 8007cfa:	e7e1      	b.n	8007cc0 <MX_ADC1_Init+0x14c>
    Error_Handler();
 8007cfc:	f001 f83c 	bl	8008d78 <Error_Handler>
 8007d00:	e7d2      	b.n	8007ca8 <MX_ADC1_Init+0x134>
    Error_Handler();
 8007d02:	f001 f839 	bl	8008d78 <Error_Handler>
 8007d06:	e7c3      	b.n	8007c90 <MX_ADC1_Init+0x11c>
    Error_Handler();
 8007d08:	f001 f836 	bl	8008d78 <Error_Handler>
 8007d0c:	e7b5      	b.n	8007c7a <MX_ADC1_Init+0x106>
    Error_Handler();
 8007d0e:	f001 f833 	bl	8008d78 <Error_Handler>
 8007d12:	e7a5      	b.n	8007c60 <MX_ADC1_Init+0xec>
    Error_Handler();
 8007d14:	f001 f830 	bl	8008d78 <Error_Handler>
 8007d18:	e798      	b.n	8007c4c <MX_ADC1_Init+0xd8>
    Error_Handler();
 8007d1a:	f001 f82d 	bl	8008d78 <Error_Handler>
 8007d1e:	e78b      	b.n	8007c38 <MX_ADC1_Init+0xc4>
    Error_Handler();
 8007d20:	f001 f82a 	bl	8008d78 <Error_Handler>
 8007d24:	e77d      	b.n	8007c22 <MX_ADC1_Init+0xae>
    Error_Handler();
 8007d26:	f001 f827 	bl	8008d78 <Error_Handler>
 8007d2a:	e763      	b.n	8007bf4 <MX_ADC1_Init+0x80>
    Error_Handler();
 8007d2c:	f001 f824 	bl	8008d78 <Error_Handler>
 8007d30:	e757      	b.n	8007be2 <MX_ADC1_Init+0x6e>
 8007d32:	bf00      	nop
 8007d34:	2000013c 	.word	0x2000013c
 8007d38:	40022000 	.word	0x40022000
 8007d3c:	43210000 	.word	0x43210000
 8007d40:	47520000 	.word	0x47520000
 8007d44:	3ac04000 	.word	0x3ac04000
 8007d48:	3ef08000 	.word	0x3ef08000
 8007d4c:	4b840000 	.word	0x4b840000
 8007d50:	4fb80000 	.word	0x4fb80000
 8007d54:	0c900008 	.word	0x0c900008
 8007d58:	1d500080 	.word	0x1d500080
 8007d5c:	10c00010 	.word	0x10c00010
 8007d60:	21800100 	.word	0x21800100

08007d64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007d64:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8007d66:	4b35      	ldr	r3, [pc, #212]	; (8007e3c <HAL_ADC_MspInit+0xd8>)
{
 8007d68:	b089      	sub	sp, #36	; 0x24
  if(adcHandle->Instance==ADC1)
 8007d6a:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d6c:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8007d6e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d70:	9407      	str	r4, [sp, #28]
 8007d72:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8007d76:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(adcHandle->Instance==ADC1)
 8007d7a:	d001      	beq.n	8007d80 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007d7c:	b009      	add	sp, #36	; 0x24
 8007d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007d80:	4b2f      	ldr	r3, [pc, #188]	; (8007e40 <HAL_ADC_MspInit+0xdc>)
 8007d82:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007d84:	20ff      	movs	r0, #255	; 0xff
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d86:	2703      	movs	r7, #3
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007d88:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d8c:	a903      	add	r1, sp, #12
    hdma_adc1.Instance = DMA1_Stream0;
 8007d8e:	4d2d      	ldr	r5, [pc, #180]	; (8007e44 <HAL_ADC_MspInit+0xe0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007d90:	f042 0220 	orr.w	r2, r2, #32
 8007d94:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8007d98:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007d9c:	f002 0220 	and.w	r2, r2, #32
 8007da0:	9200      	str	r2, [sp, #0]
 8007da2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007da4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007da8:	f042 0201 	orr.w	r2, r2, #1
 8007dac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007db0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007db4:	f002 0201 	and.w	r2, r2, #1
 8007db8:	9201      	str	r2, [sp, #4]
 8007dba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007dbc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007dc0:	f042 0204 	orr.w	r2, r2, #4
 8007dc4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007dcc:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007dce:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dd2:	481d      	ldr	r0, [pc, #116]	; (8007e48 <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007dd4:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007dd6:	9302      	str	r3, [sp, #8]
 8007dd8:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dda:	f7fa fcbd 	bl	8002758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007dde:	2330      	movs	r3, #48	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007de0:	a903      	add	r1, sp, #12
 8007de2:	481a      	ldr	r0, [pc, #104]	; (8007e4c <HAL_ADC_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007de4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de6:	e9cd 7404 	strd	r7, r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dea:	f7fa fcb5 	bl	8002758 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8007dee:	4a18      	ldr	r2, [pc, #96]	; (8007e50 <HAL_ADC_MspInit+0xec>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8007df0:	2309      	movs	r3, #9
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007df2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007df6:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007dfa:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007dfe:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007e02:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_adc1.Instance = DMA1_Stream0;
 8007e06:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007e08:	2204      	movs	r2, #4
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8007e0a:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007e0c:	2301      	movs	r3, #1
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e0e:	60ac      	str	r4, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e10:	60ec      	str	r4, [r5, #12]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007e12:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007e14:	e9c5 e004 	strd	lr, r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007e18:	4628      	mov	r0, r5
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007e1a:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007e1e:	e9c5 c706 	strd	ip, r7, [r5, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007e22:	e9c5 1208 	strd	r1, r2, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007e26:	f7f9 f999 	bl	800115c <HAL_DMA_Init>
 8007e2a:	b918      	cbnz	r0, 8007e34 <HAL_ADC_MspInit+0xd0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007e2c:	64f5      	str	r5, [r6, #76]	; 0x4c
 8007e2e:	63ae      	str	r6, [r5, #56]	; 0x38
}
 8007e30:	b009      	add	sp, #36	; 0x24
 8007e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8007e34:	f000 ffa0 	bl	8008d78 <Error_Handler>
 8007e38:	e7f8      	b.n	8007e2c <HAL_ADC_MspInit+0xc8>
 8007e3a:	bf00      	nop
 8007e3c:	40022000 	.word	0x40022000
 8007e40:	58024400 	.word	0x58024400
 8007e44:	200001a0 	.word	0x200001a0
 8007e48:	58020000 	.word	0x58020000
 8007e4c:	58020800 	.word	0x58020800
 8007e50:	40020010 	.word	0x40020010

08007e54 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007e54:	b500      	push	{lr}
 8007e56:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	460a      	mov	r2, r1
 8007e5e:	4601      	mov	r1, r0
 8007e60:	4804      	ldr	r0, [pc, #16]	; (8007e74 <BSP_SD_ReadBlocks+0x20>)
 8007e62:	f7fd fa47 	bl	80052f4 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8007e66:	3000      	adds	r0, #0
 8007e68:	bf18      	it	ne
 8007e6a:	2001      	movne	r0, #1
 8007e6c:	b003      	add	sp, #12
 8007e6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e72:	bf00      	nop
 8007e74:	20019b54 	.word	0x20019b54

08007e78 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007e78:	b500      	push	{lr}
 8007e7a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	460a      	mov	r2, r1
 8007e82:	4601      	mov	r1, r0
 8007e84:	4804      	ldr	r0, [pc, #16]	; (8007e98 <BSP_SD_WriteBlocks+0x20>)
 8007e86:	f7fd fb37 	bl	80054f8 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8007e8a:	3000      	adds	r0, #0
 8007e8c:	bf18      	it	ne
 8007e8e:	2001      	movne	r0, #1
 8007e90:	b003      	add	sp, #12
 8007e92:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e96:	bf00      	nop
 8007e98:	20019b54 	.word	0x20019b54

08007e9c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007e9c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007e9e:	4803      	ldr	r0, [pc, #12]	; (8007eac <BSP_SD_GetCardState+0x10>)
 8007ea0:	f7fe f862 	bl	8005f68 <HAL_SD_GetCardState>
}
 8007ea4:	3804      	subs	r0, #4
 8007ea6:	bf18      	it	ne
 8007ea8:	2001      	movne	r0, #1
 8007eaa:	bd08      	pop	{r3, pc}
 8007eac:	20019b54 	.word	0x20019b54

08007eb0 <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007eb0:	4601      	mov	r1, r0
 8007eb2:	4801      	ldr	r0, [pc, #4]	; (8007eb8 <BSP_SD_GetCardInfo+0x8>)
 8007eb4:	f7fd bf3c 	b.w	8005d30 <HAL_SD_GetCardInfo>
 8007eb8:	20019b54 	.word	0x20019b54

08007ebc <BSP_SD_WriteCpltCallback>:
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop

08007ec0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007ec0:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8007ec2:	f7ff fffb 	bl	8007ebc <BSP_SD_WriteCpltCallback>
}
 8007ec6:	bd08      	pop	{r3, pc}

08007ec8 <BSP_SD_ReadCpltCallback>:
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop

08007ecc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007ecc:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8007ece:	f7ff fffb 	bl	8007ec8 <BSP_SD_ReadCpltCallback>
}
 8007ed2:	bd08      	pop	{r3, pc}

08007ed4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007ed4:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 8007ed6:	2301      	movs	r3, #1
{
 8007ed8:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8007eda:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007ede:	f000 f875 	bl	8007fcc <BSP_PlatformIsDetected>
 8007ee2:	b908      	cbnz	r0, 8007ee8 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 8007ee4:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8007ee8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8007eec:	b003      	add	sp, #12
 8007eee:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ef2:	bf00      	nop

08007ef4 <BSP_SD_Init>:
{
 8007ef4:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007ef6:	f7ff ffed 	bl	8007ed4 <BSP_SD_IsDetected>
 8007efa:	2801      	cmp	r0, #1
 8007efc:	d001      	beq.n	8007f02 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 8007efe:	2002      	movs	r0, #2
}
 8007f00:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 8007f02:	4807      	ldr	r0, [pc, #28]	; (8007f20 <BSP_SD_Init+0x2c>)
 8007f04:	f7fd ffca 	bl	8005e9c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d1f9      	bne.n	8007f00 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007f0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007f10:	4803      	ldr	r0, [pc, #12]	; (8007f20 <BSP_SD_Init+0x2c>)
 8007f12:	f7fd ff21 	bl	8005d58 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8007f16:	3000      	adds	r0, #0
 8007f18:	bf18      	it	ne
 8007f1a:	2001      	movne	r0, #1
}
 8007f1c:	bd08      	pop	{r3, pc}
 8007f1e:	bf00      	nop
 8007f20:	20019b54 	.word	0x20019b54

08007f24 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f24:	4b21      	ldr	r3, [pc, #132]	; (8007fac <MX_DMA_Init+0x88>)
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8007f26:	2101      	movs	r1, #1
 8007f28:	2200      	movs	r2, #0
 8007f2a:	200b      	movs	r0, #11
{
 8007f2c:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f2e:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8007f32:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f34:	430c      	orrs	r4, r1
 8007f36:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8007f3a:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 8007f3e:	400c      	ands	r4, r1
 8007f40:	9400      	str	r4, [sp, #0]
 8007f42:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007f44:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 8007f48:	f044 0402 	orr.w	r4, r4, #2
 8007f4c:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8007f50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	9301      	str	r3, [sp, #4]
 8007f5a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8007f5c:	f7f8 ffda 	bl	8000f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8007f60:	200b      	movs	r0, #11
 8007f62:	f7f9 f80d 	bl	8000f80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8007f66:	2200      	movs	r2, #0
 8007f68:	2102      	movs	r1, #2
 8007f6a:	200c      	movs	r0, #12
 8007f6c:	f7f8 ffd2 	bl	8000f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8007f70:	200c      	movs	r0, #12
 8007f72:	f7f9 f805 	bl	8000f80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
 8007f76:	2200      	movs	r2, #0
 8007f78:	2103      	movs	r1, #3
 8007f7a:	200d      	movs	r0, #13
 8007f7c:	f7f8 ffca 	bl	8000f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8007f80:	200d      	movs	r0, #13
 8007f82:	f7f8 fffd 	bl	8000f80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 2, 0);
 8007f86:	2200      	movs	r2, #0
 8007f88:	2102      	movs	r1, #2
 8007f8a:	200e      	movs	r0, #14
 8007f8c:	f7f8 ffc2 	bl	8000f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8007f90:	200e      	movs	r0, #14
 8007f92:	f7f8 fff5 	bl	8000f80 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8007f96:	2200      	movs	r2, #0
 8007f98:	2038      	movs	r0, #56	; 0x38
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	f7f8 ffba 	bl	8000f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007fa0:	2038      	movs	r0, #56	; 0x38

}
 8007fa2:	b002      	add	sp, #8
 8007fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007fa8:	f7f8 bfea 	b.w	8000f80 <HAL_NVIC_EnableIRQ>
 8007fac:	58024400 	.word	0x58024400

08007fb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007fb0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007fb2:	4903      	ldr	r1, [pc, #12]	; (8007fc0 <MX_FATFS_Init+0x10>)
 8007fb4:	4803      	ldr	r0, [pc, #12]	; (8007fc4 <MX_FATFS_Init+0x14>)
 8007fb6:	f7ff fdb7 	bl	8007b28 <FATFS_LinkDriver>
 8007fba:	4b03      	ldr	r3, [pc, #12]	; (8007fc8 <MX_FATFS_Init+0x18>)
 8007fbc:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007fbe:	bd08      	pop	{r3, pc}
 8007fc0:	2000021c 	.word	0x2000021c
 8007fc4:	0800bc90 	.word	0x0800bc90
 8007fc8:	20000218 	.word	0x20000218

08007fcc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007fcc:	b510      	push	{r4, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007fce:	4c08      	ldr	r4, [pc, #32]	; (8007ff0 <BSP_PlatformIsDetected+0x24>)
 8007fd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f7fa fce3 	bl	80029a0 <HAL_GPIO_ReadPin>
        status = SD_NOT_PRESENT;
    }
    /* USER CODE BEGIN 1 */
    status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007fe0:	f7fa fcde 	bl	80029a0 <HAL_GPIO_ReadPin>
    {
        status = SD_NOT_PRESENT;
    }
    /* USER CODE END 1 */
    return status;
}
 8007fe4:	f1a0 0001 	sub.w	r0, r0, #1
 8007fe8:	fab0 f080 	clz	r0, r0
 8007fec:	0940      	lsrs	r0, r0, #5
 8007fee:	bd10      	pop	{r4, pc}
 8007ff0:	58020800 	.word	0x58020800

08007ff4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8007ff4:	b570      	push	{r4, r5, r6, lr}
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007ff6:	4b18      	ldr	r3, [pc, #96]	; (8008058 <MX_FMC_Init+0x64>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8007ff8:	2001      	movs	r0, #1
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007ffa:	4d18      	ldr	r5, [pc, #96]	; (800805c <MX_FMC_Init+0x68>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8007ffc:	2108      	movs	r1, #8
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8007ffe:	2410      	movs	r4, #16
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008000:	2240      	movs	r2, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008002:	601d      	str	r5, [r3, #0]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8008004:	f44f 7580 	mov.w	r5, #256	; 0x100
{
 8008008:	b088      	sub	sp, #32
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
 800800a:	2604      	movs	r6, #4
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800800c:	6098      	str	r0, [r3, #8]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800800e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8008012:	60d9      	str	r1, [r3, #12]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8008014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8008018:	611c      	str	r4, [r3, #16]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800801a:	2400      	movs	r4, #0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800801c:	615a      	str	r2, [r3, #20]
  SdramTiming.LoadToActiveDelay = 2;
 800801e:	2202      	movs	r2, #2
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8008020:	619d      	str	r5, [r3, #24]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8008022:	2506      	movs	r5, #6
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8008024:	6218      	str	r0, [r3, #32]
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008026:	4618      	mov	r0, r3
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8008028:	6259      	str	r1, [r3, #36]	; 0x24
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800802a:	eb0d 0106 	add.w	r1, sp, r6
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800802e:	605c      	str	r4, [r3, #4]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008030:	61dc      	str	r4, [r3, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8008032:	629c      	str	r4, [r3, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8008034:	9201      	str	r2, [sp, #4]
  SdramTiming.RCDDelay = 2;
 8008036:	9207      	str	r2, [sp, #28]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8008038:	9502      	str	r5, [sp, #8]
  SdramTiming.RPDelay = 2;
 800803a:	e9cd 2205 	strd	r2, r2, [sp, #20]
  SdramTiming.SelfRefreshTime = 4;
 800803e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008042:	f7fe f8f3 	bl	800622c <HAL_SDRAM_Init>
 8008046:	b108      	cbz	r0, 800804c <MX_FMC_Init+0x58>
  {
    Error_Handler( );
 8008048:	f000 fe96 	bl	8008d78 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800804c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8008050:	f7f8 f9c4 	bl	80003dc <HAL_SetFMCMemorySwappingConfig>

}
 8008054:	b008      	add	sp, #32
 8008056:	bd70      	pop	{r4, r5, r6, pc}
 8008058:	20000684 	.word	0x20000684
 800805c:	52004140 	.word	0x52004140

08008060 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8008060:	4a2a      	ldr	r2, [pc, #168]	; (800810c <HAL_SDRAM_MspInit+0xac>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008062:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8008064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008066:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8008068:	6814      	ldr	r4, [r2, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800806a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800806e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8008072:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8008074:	b10c      	cbz	r4, 800807a <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8008076:	b007      	add	sp, #28
 8008078:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_RCC_FMC_CLK_ENABLE();
 800807a:	4b25      	ldr	r3, [pc, #148]	; (8008110 <HAL_SDRAM_MspInit+0xb0>)
  FMC_Initialized = 1;
 800807c:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800807e:	f64f 003f 	movw	r0, #63551	; 0xf83f
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008082:	2702      	movs	r7, #2
  FMC_Initialized = 1;
 8008084:	6011      	str	r1, [r2, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008086:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8008088:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800808c:	250c      	movs	r5, #12
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800808e:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8008090:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008094:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8008098:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800809c:	9001      	str	r0, [sp, #4]
  __HAL_RCC_FMC_CLK_ENABLE();
 800809e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80080a2:	481c      	ldr	r0, [pc, #112]	; (8008114 <HAL_SDRAM_MspInit+0xb4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080a4:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80080aa:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80080ae:	f7fa fb53 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80080b2:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080b4:	a901      	add	r1, sp, #4
 80080b6:	4818      	ldr	r0, [pc, #96]	; (8008118 <HAL_SDRAM_MspInit+0xb8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80080b8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ba:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080bc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80080be:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080c2:	f7fa fb49 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80080c6:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80080ca:	a901      	add	r1, sp, #4
 80080cc:	4813      	ldr	r0, [pc, #76]	; (800811c <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80080ce:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080d0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80080d4:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80080d8:	f7fa fb3e 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80080dc:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80080e0:	a901      	add	r1, sp, #4
 80080e2:	480f      	ldr	r0, [pc, #60]	; (8008120 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80080e4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80080ea:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80080ee:	f7fa fb33 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80080f2:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080f6:	a901      	add	r1, sp, #4
 80080f8:	480a      	ldr	r0, [pc, #40]	; (8008124 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080fa:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80080fe:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008100:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008104:	f7fa fb28 	bl	8002758 <HAL_GPIO_Init>
}
 8008108:	b007      	add	sp, #28
 800810a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800810c:	200000d0 	.word	0x200000d0
 8008110:	58024400 	.word	0x58024400
 8008114:	58021400 	.word	0x58021400
 8008118:	58020800 	.word	0x58020800
 800811c:	58021800 	.word	0x58021800
 8008120:	58021000 	.word	0x58021000
 8008124:	58020c00 	.word	0x58020c00

08008128 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8008128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800812c:	4b85      	ldr	r3, [pc, #532]	; (8008344 <MX_GPIO_Init+0x21c>)
{
 800812e:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008130:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008132:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008134:	f04f 0a02 	mov.w	sl, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8008138:	4f83      	ldr	r7, [pc, #524]	; (8008348 <MX_GPIO_Init+0x220>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800813a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800813c:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800813e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8008140:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008144:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC15 PC1 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008146:	2503      	movs	r5, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008148:	940c      	str	r4, [sp, #48]	; 0x30
 800814a:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800814c:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8008150:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8008354 <MX_GPIO_Init+0x22c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008154:	f040 0c10 	orr.w	ip, r0, #16
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8008158:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8008358 <MX_GPIO_Init+0x230>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800815c:	4638      	mov	r0, r7
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800815e:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800835c <MX_GPIO_Init+0x234>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008162:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 8008166:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800816a:	f00c 0c10 	and.w	ip, ip, #16
 800816e:	f8cd c004 	str.w	ip, [sp, #4]
 8008172:	f8dd c004 	ldr.w	ip, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008176:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800817a:	f04c 0c04 	orr.w	ip, ip, #4
 800817e:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 8008182:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8008186:	f00c 0c04 	and.w	ip, ip, #4
 800818a:	f8cd c008 	str.w	ip, [sp, #8]
 800818e:	f8dd c008 	ldr.w	ip, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008192:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8008196:	f04c 0c20 	orr.w	ip, ip, #32
 800819a:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800819e:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081a2:	f00c 0c20 	and.w	ip, ip, #32
 80081a6:	f8cd c00c 	str.w	ip, [sp, #12]
 80081aa:	f8dd c00c 	ldr.w	ip, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80081ae:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081b2:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80081b6:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 80081ba:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081be:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 80081c2:	f8cd c010 	str.w	ip, [sp, #16]
 80081c6:	f8dd c010 	ldr.w	ip, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80081ca:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081ce:	ea4c 0c06 	orr.w	ip, ip, r6
 80081d2:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 80081d6:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081da:	ea0c 0c06 	and.w	ip, ip, r6
 80081de:	f8cd c014 	str.w	ip, [sp, #20]
 80081e2:	f8dd c014 	ldr.w	ip, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80081e6:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081ea:	ea4c 0c0a 	orr.w	ip, ip, sl
 80081ee:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 80081f2:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80081f6:	ea0c 0c0a 	and.w	ip, ip, sl
 80081fa:	f8cd c018 	str.w	ip, [sp, #24]
 80081fe:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008202:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8008206:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 800820a:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800820e:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8008212:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 8008216:	f8cd c01c 	str.w	ip, [sp, #28]
 800821a:	f8dd c01c 	ldr.w	ip, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800821e:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8008222:	f04c 0c08 	orr.w	ip, ip, #8
 8008226:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800822a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800822e:	f003 0308 	and.w	r3, r3, #8
 8008232:	9308      	str	r3, [sp, #32]
 8008234:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8008236:	f7fa fbb9 	bl	80029ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800823a:	4622      	mov	r2, r4
 800823c:	4648      	mov	r0, r9
 800823e:	2180      	movs	r1, #128	; 0x80
 8008240:	f7fa fbb4 	bl	80029ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8008244:	4622      	mov	r2, r4
 8008246:	4640      	mov	r0, r8
 8008248:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800824c:	f7fa fbae 	bl	80029ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8008250:	4622      	mov	r2, r4
 8008252:	4658      	mov	r0, fp
 8008254:	2110      	movs	r1, #16
 8008256:	f7fa fba9 	bl	80029ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800825a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800825e:	a909      	add	r1, sp, #36	; 0x24
 8008260:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008262:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008266:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800826a:	f7fa fa75 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800826e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008272:	a909      	add	r1, sp, #36	; 0x24
 8008274:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008276:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800827a:	e9cd a40b 	strd	sl, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800827e:	f7fa fa6b 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8008282:	f248 03c2 	movw	r3, #32962	; 0x80c2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008286:	4638      	mov	r0, r7
 8008288:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800828a:	940b      	str	r4, [sp, #44]	; 0x2c

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800828c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008290:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008294:	f7fa fa60 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8008298:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800829c:	a909      	add	r1, sp, #36	; 0x24
 800829e:	482b      	ldr	r0, [pc, #172]	; (800834c <MX_GPIO_Init+0x224>)
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80082a0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a2:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80082a6:	f7fa fa57 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 80082aa:	f244 33e7 	movw	r3, #17383	; 0x43e7
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082ae:	a909      	add	r1, sp, #36	; 0x24
 80082b0:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 80082b2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b4:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082b8:	f7fa fa4e 	bl	8002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80082bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80082c0:	4b23      	ldr	r3, [pc, #140]	; (8008350 <MX_GPIO_Init+0x228>)
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082c2:	a909      	add	r1, sp, #36	; 0x24
 80082c4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c6:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80082c8:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082cc:	f7fa fa44 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 PD4
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4
 80082d0:	f243 0378 	movw	r3, #12408	; 0x3078
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082d4:	4638      	mov	r0, r7
 80082d6:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4
 80082d8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082da:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082de:	f7fa fa3b 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13
 80082e2:	f247 0348 	movw	r3, #28744	; 0x7048
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80082e6:	a909      	add	r1, sp, #36	; 0x24
 80082e8:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13
 80082ea:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ec:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80082f0:	f7fa fa32 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80082f4:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80082f6:	4648      	mov	r0, r9
 80082f8:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80082fa:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082fc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fe:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008302:	f7fa fa29 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8008306:	f44f 4315 	mov.w	r3, #38144	; 0x9500
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800830a:	a909      	add	r1, sp, #36	; 0x24
 800830c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 800830e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008310:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008314:	f7fa fa20 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8008318:	f44f 6320 	mov.w	r3, #2560	; 0xa00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800831c:	4640      	mov	r0, r8
 800831e:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8008320:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008322:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008324:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008328:	f7fa fa16 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800832c:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800832e:	a909      	add	r1, sp, #36	; 0x24
 8008330:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008332:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008334:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008336:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800833a:	f7fa fa0d 	bl	8002758 <HAL_GPIO_Init>

}
 800833e:	b00f      	add	sp, #60	; 0x3c
 8008340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008344:	58024400 	.word	0x58024400
 8008348:	58020800 	.word	0x58020800
 800834c:	58021400 	.word	0x58021400
 8008350:	11110000 	.word	0x11110000
 8008354:	58021800 	.word	0x58021800
 8008358:	58020000 	.word	0x58020000
 800835c:	58020400 	.word	0x58020400

08008360 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008360:	b538      	push	{r3, r4, r5, lr}

  hi2c2.Instance = I2C2;
 8008362:	4b13      	ldr	r3, [pc, #76]	; (80083b0 <MX_I2C2_Init+0x50>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
 8008364:	2200      	movs	r2, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008366:	2101      	movs	r1, #1
  hi2c2.Instance = I2C2;
 8008368:	4d12      	ldr	r5, [pc, #72]	; (80083b4 <MX_I2C2_Init+0x54>)
  hi2c2.Init.Timing = 0x00B03FDB;
 800836a:	4c13      	ldr	r4, [pc, #76]	; (80083b8 <MX_I2C2_Init+0x58>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800836c:	4618      	mov	r0, r3
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800836e:	621a      	str	r2, [r3, #32]
  hi2c2.Init.Timing = 0x00B03FDB;
 8008370:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c2.Init.OwnAddress1 = 0;
 8008374:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8008378:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800837c:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008380:	f7fa fb18 	bl	80029b4 <HAL_I2C_Init>
 8008384:	b988      	cbnz	r0, 80083aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008386:	2100      	movs	r1, #0
 8008388:	4809      	ldr	r0, [pc, #36]	; (80083b0 <MX_I2C2_Init+0x50>)
 800838a:	f7fa fb71 	bl	8002a70 <HAL_I2CEx_ConfigAnalogFilter>
 800838e:	b948      	cbnz	r0, 80083a4 <MX_I2C2_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008390:	2100      	movs	r1, #0
 8008392:	4807      	ldr	r0, [pc, #28]	; (80083b0 <MX_I2C2_Init+0x50>)
 8008394:	f7fa fb9a 	bl	8002acc <HAL_I2CEx_ConfigDigitalFilter>
 8008398:	b900      	cbnz	r0, 800839c <MX_I2C2_Init+0x3c>
  {
    Error_Handler();
  }

}
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80083a0:	f000 bcea 	b.w	8008d78 <Error_Handler>
    Error_Handler();
 80083a4:	f000 fce8 	bl	8008d78 <Error_Handler>
 80083a8:	e7f2      	b.n	8008390 <MX_I2C2_Init+0x30>
    Error_Handler();
 80083aa:	f000 fce5 	bl	8008d78 <Error_Handler>
 80083ae:	e7ea      	b.n	8008386 <MX_I2C2_Init+0x26>
 80083b0:	200006b8 	.word	0x200006b8
 80083b4:	40005800 	.word	0x40005800
 80083b8:	00b03fdb 	.word	0x00b03fdb

080083bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80083bc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C2)
 80083be:	4a1a      	ldr	r2, [pc, #104]	; (8008428 <HAL_I2C_MspInit+0x6c>)
{
 80083c0:	b088      	sub	sp, #32
  if(i2cHandle->Instance==I2C2)
 80083c2:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083c4:	2300      	movs	r3, #0
  if(i2cHandle->Instance==I2C2)
 80083c6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083c8:	9307      	str	r3, [sp, #28]
 80083ca:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80083ce:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(i2cHandle->Instance==I2C2)
 80083d2:	d001      	beq.n	80083d8 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80083d4:	b008      	add	sp, #32
 80083d6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083d8:	4c14      	ldr	r4, [pc, #80]	; (800842c <HAL_I2C_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083da:	2012      	movs	r0, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80083dc:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80083de:	f44f 6640 	mov.w	r6, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083e2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083e6:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083e8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083ea:	f043 0302 	orr.w	r3, r3, #2
 80083ee:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80083f2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083f6:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083f8:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083fc:	480c      	ldr	r0, [pc, #48]	; (8008430 <HAL_I2C_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80083fe:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008404:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008408:	f7fa f9a6 	bl	8002758 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800840c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8008410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008414:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8008418:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800841c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008420:	9302      	str	r3, [sp, #8]
 8008422:	9b02      	ldr	r3, [sp, #8]
}
 8008424:	b008      	add	sp, #32
 8008426:	bd70      	pop	{r4, r5, r6, pc}
 8008428:	40005800 	.word	0x40005800
 800842c:	58024400 	.word	0x58024400
 8008430:	58020400 	.word	0x58020400

08008434 <randomNumber>:
}

/* USER CODE BEGIN 4 */


float randomNumber(void) {
 8008434:	b500      	push	{lr}
 8008436:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8008438:	4807      	ldr	r0, [pc, #28]	; (8008458 <randomNumber+0x24>)
 800843a:	a901      	add	r1, sp, #4
 800843c:	f7fc fa70 	bl	8004920 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8008440:	eddd 7a01 	vldr	s15, [sp, #4]
 8008444:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800845c <randomNumber+0x28>
 8008448:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 800844c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008450:	b003      	add	sp, #12
 8008452:	f85d fb04 	ldr.w	pc, [sp], #4
 8008456:	bf00      	nop
 8008458:	20019920 	.word	0x20019920
 800845c:	2f80000d 	.word	0x2f80000d

08008460 <SystemClock_Config>:
{
 8008460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008464:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008466:	224c      	movs	r2, #76	; 0x4c
 8008468:	2100      	movs	r1, #0
 800846a:	a80a      	add	r0, sp, #40	; 0x28
 800846c:	f001 fd0c 	bl	8009e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008470:	2220      	movs	r2, #32
 8008472:	2100      	movs	r1, #0
 8008474:	a802      	add	r0, sp, #8
 8008476:	f001 fd07 	bl	8009e88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800847a:	22bc      	movs	r2, #188	; 0xbc
 800847c:	2100      	movs	r1, #0
 800847e:	a81d      	add	r0, sp, #116	; 0x74
 8008480:	f001 fd02 	bl	8009e88 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008484:	2002      	movs	r0, #2
 8008486:	f7fa fb4d 	bl	8002b24 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800848a:	4b39      	ldr	r3, [pc, #228]	; (8008570 <SystemClock_Config+0x110>)
 800848c:	2200      	movs	r2, #0
 800848e:	4939      	ldr	r1, [pc, #228]	; (8008574 <SystemClock_Config+0x114>)
 8008490:	9201      	str	r2, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8008492:	461a      	mov	r2, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8008494:	6998      	ldr	r0, [r3, #24]
 8008496:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800849a:	6198      	str	r0, [r3, #24]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80084a6:	f043 0301 	orr.w	r3, r3, #1
 80084aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80084ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80084b6:	6993      	ldr	r3, [r2, #24]
 80084b8:	049b      	lsls	r3, r3, #18
 80084ba:	d5fc      	bpl.n	80084b6 <SystemClock_Config+0x56>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80084bc:	4a2e      	ldr	r2, [pc, #184]	; (8008578 <SystemClock_Config+0x118>)
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80084be:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80084c0:	2423      	movs	r4, #35	; 0x23
  RCC_OscInitStruct.PLL.PLLM = 5;
 80084c2:	2005      	movs	r0, #5
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80084c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80084c6:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80084c8:	2640      	movs	r6, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80084ca:	f04f 0908 	mov.w	r9, #8
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80084ce:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80084d2:	f44f 3880 	mov.w	r8, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 192;
 80084d6:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80084d8:	432b      	orrs	r3, r5
 80084da:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80084dc:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80084de:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLM = 5;
 80084e0:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80084e2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80084e4:	960e      	str	r6, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80084e6:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80084e8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80084ec:	970d      	str	r7, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80084ee:	9710      	str	r7, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = 2;
 80084f0:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80084f2:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80084f4:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80084f8:	e9cd 5517 	strd	r5, r5, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80084fc:	e9cd 941a 	strd	r9, r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008500:	f7fa fb36 	bl	8002b70 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008504:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008508:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800850a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800850e:	eb0d 0009 	add.w	r0, sp, r9
 8008512:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8008514:	9609      	str	r6, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008516:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008518:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800851a:	f8cd 9014 	str.w	r9, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800851e:	e9cd c202 	strd	ip, r2, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008522:	e9cd 6606 	strd	r6, r6, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008526:	f7fa fea1 	bl	800326c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800852a:	f44f 76ac 	mov.w	r6, #344	; 0x158
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SPI1
 800852e:	f8df e04c 	ldr.w	lr, [pc, #76]	; 800857c <SystemClock_Config+0x11c>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8008532:	f04f 0c19 	mov.w	ip, #25
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8008536:	2107      	movs	r1, #7
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8008538:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800853c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008540:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8008542:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8008546:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8008548:	942e      	str	r4, [sp, #184]	; 0xb8
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800854a:	9234      	str	r2, [sp, #208]	; 0xd0
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800854c:	9345      	str	r3, [sp, #276]	; 0x114
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800854e:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8008552:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8008556:	e9cd 4731 	strd	r4, r7, [sp, #196]	; 0xc4
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800855a:	e9cd 443c 	strd	r4, r4, [sp, #240]	; 0xf0
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800855e:	e9cd ec1d 	strd	lr, ip, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8008562:	e9cd 611f 	strd	r6, r1, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008566:	f7fb f951 	bl	800380c <HAL_RCCEx_PeriphCLKConfig>
}
 800856a:	b04d      	add	sp, #308	; 0x134
 800856c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008570:	58024800 	.word	0x58024800
 8008574:	58000400 	.word	0x58000400
 8008578:	58024400 	.word	0x58024400
 800857c:	810b1108 	.word	0x810b1108

08008580 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 8008580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 1;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008584:	4c2b      	ldr	r4, [pc, #172]	; (8008634 <SDRAM_Initialization_sequence+0xb4>)
{
 8008586:	b087      	sub	sp, #28
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8008588:	2501      	movs	r5, #1
    __IO uint32_t tmpmrd = 0;
 800858a:	2600      	movs	r6, #0
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800858c:	2710      	movs	r7, #16
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800858e:	a902      	add	r1, sp, #8
 8008590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008594:	4620      	mov	r0, r4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
 8008596:	f04f 0808 	mov.w	r8, #8
    __IO uint32_t tmpmrd = 0;
 800859a:	9601      	str	r6, [sp, #4]
    Command.ModeRegisterDefinition = 0;
 800859c:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800859e:	f04f 0903 	mov.w	r9, #3
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80085a2:	9502      	str	r5, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80085a4:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085a8:	f7fd fe68 	bl	800627c <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 80085ac:	4628      	mov	r0, r5
 80085ae:	f7f7 fefd 	bl	80003ac <HAL_Delay>
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 80085b2:	2302      	movs	r3, #2
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085b4:	eb0d 0108 	add.w	r1, sp, r8
 80085b8:	4620      	mov	r0, r4
 80085ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 80085be:	9302      	str	r3, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 80085c0:	9605      	str	r6, [sp, #20]
    Command.AutoRefreshNumber = 1;
 80085c2:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085c6:	f7fd fe59 	bl	800627c <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 80085ca:	f240 2222 	movw	r2, #546	; 0x222
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80085ce:	2304      	movs	r3, #4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085d0:	eb0d 0108 	add.w	r1, sp, r8
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 80085d4:	9201      	str	r2, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085d6:	4620      	mov	r0, r4
    Command.ModeRegisterDefinition = tmpmrd;
 80085d8:	f8dd c004 	ldr.w	ip, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80085e0:	9302      	str	r3, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80085e2:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 80085e4:	e9cd 5c04 	strd	r5, ip, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085e8:	f7fd fe48 	bl	800627c <HAL_SDRAM_SendCommand>
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80085ec:	eb0d 0108 	add.w	r1, sp, r8
 80085f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085f4:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80085f6:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 80085f8:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80085fa:	f8cd 9008 	str.w	r9, [sp, #8]
    Command.AutoRefreshNumber = 8;
 80085fe:	f8cd 8010 	str.w	r8, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008602:	f7fd fe3b 	bl	800627c <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8008606:	4628      	mov	r0, r5
 8008608:	f7f7 fed0 	bl	80003ac <HAL_Delay>
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800860c:	eb0d 0108 	add.w	r1, sp, r8
 8008610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008614:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008616:	e9cd 9702 	strd	r9, r7, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 800861a:	e9cd 8604 	strd	r8, r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800861e:	f7fd fe2d 	bl	800627c <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 8008622:	f240 5169 	movw	r1, #1385	; 0x569
 8008626:	4620      	mov	r0, r4
 8008628:	f7fd fe4a 	bl	80062c0 <HAL_SDRAM_ProgramRefreshRate>
}
 800862c:	b007      	add	sp, #28
 800862e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008632:	bf00      	nop
 8008634:	20000684 	.word	0x20000684

08008638 <MPU_Conf>:
	*/
}
#endif

void MPU_Conf(void)
 {
 8008638:	b510      	push	{r4, lr}
 800863a:	b084      	sub	sp, #16
	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;

	  //D3 Domain�SRAM
	  MPU_InitStruct.BaseAddress = 0x38000000;
 800863c:	f04f 5460 	mov.w	r4, #939524096	; 0x38000000
	  HAL_MPU_Disable();
 8008640:	f7f8 fcc4 	bl	8000fcc <HAL_MPU_Disable>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008644:	2301      	movs	r3, #1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8008646:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800864a:	4a0d      	ldr	r2, [pc, #52]	; (8008680 <MPU_Conf+0x48>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800864c:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800864e:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8008652:	9101      	str	r1, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8008654:	e9cd 2302 	strd	r2, r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008658:	f7f8 fcda 	bl	8001010 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800865c:	f240 1101 	movw	r1, #257	; 0x101


	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8008660:	4a08      	ldr	r2, [pc, #32]	; (8008684 <MPU_Conf+0x4c>)


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008662:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8008664:	4b08      	ldr	r3, [pc, #32]	; (8008688 <MPU_Conf+0x50>)
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008666:	f8ad 1000 	strh.w	r1, [sp]
	  MPU_InitStruct.BaseAddress = 0x38000000;
 800866a:	9401      	str	r4, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800866c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008670:	f7f8 fcce 	bl	8001010 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8008674:	2004      	movs	r0, #4
 8008676:	f7f8 fcb9 	bl	8000fec <HAL_MPU_Enable>
}
 800867a:	b004      	add	sp, #16
 800867c:	bd10      	pop	{r4, pc}
 800867e:	bf00      	nop
 8008680:	03010011 	.word	0x03010011
 8008684:	0301000f 	.word	0x0301000f
 8008688:	01010100 	.word	0x01010100

0800868c <main>:
{
 800868c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	ed2d 8b06 	vpush	{d8-d10}
  MPU_Conf();
 8008694:	f7ff ffd0 	bl	8008638 <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 8008698:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800869c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80086a0:	4a8d      	ldr	r2, [pc, #564]	; (80088d8 <main+0x24c>)
 80086a2:	2100      	movs	r1, #0
 80086a4:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80086a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80086ac:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80086b0:	6953      	ldr	r3, [r2, #20]
 80086b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80086b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80086bc:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80086c0:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80086c4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80086c8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80086cc:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80086d0:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80086d4:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80086d8:	07b7      	lsls	r7, r6, #30
 80086da:	015c      	lsls	r4, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80086dc:	ea04 050c 	and.w	r5, r4, ip
 80086e0:	4638      	mov	r0, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80086e2:	4631      	mov	r1, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80086e4:	ea40 0305 	orr.w	r3, r0, r5
      } while (ways-- != 0U);
 80086e8:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80086ea:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 80086ee:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80086f2:	1c4b      	adds	r3, r1, #1
 80086f4:	d1f6      	bne.n	80086e4 <main+0x58>
 80086f6:	3c20      	subs	r4, #32
    } while(sets-- != 0U);
 80086f8:	f114 0f20 	cmn.w	r4, #32
 80086fc:	d1ee      	bne.n	80086dc <main+0x50>
 80086fe:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008702:	6953      	ldr	r3, [r2, #20]
 8008704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008708:	6153      	str	r3, [r2, #20]
 800870a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800870e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8008712:	f7f7 fe07 	bl	8000324 <HAL_Init>
  SystemClock_Config();
 8008716:	f7ff fea3 	bl	8008460 <SystemClock_Config>
  MX_GPIO_Init();
 800871a:	f7ff fd05 	bl	8008128 <MX_GPIO_Init>
  MX_DMA_Init();
 800871e:	f7ff fc01 	bl	8007f24 <MX_DMA_Init>
  MX_FMC_Init();
 8008722:	f7ff fc67 	bl	8007ff4 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8008726:	f000 fcc1 	bl	80090ac <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800872a:	f7ff fc41 	bl	8007fb0 <MX_FATFS_Init>
  MX_SAI1_Init();
 800872e:	f000 fb53 	bl	8008dd8 <MX_SAI1_Init>
  MX_RNG_Init();
 8008732:	f000 fb23 	bl	8008d7c <MX_RNG_Init>
  MX_SPI2_Init();
 8008736:	f000 fd5d 	bl	80091f4 <MX_SPI2_Init>
  MX_I2C2_Init();
 800873a:	f7ff fe11 	bl	8008360 <MX_I2C2_Init>
  MX_ADC1_Init();
 800873e:	f7ff fa19 	bl	8007b74 <MX_ADC1_Init>
  MX_SPI1_Init();
 8008742:	f000 fd29 	bl	8009198 <MX_SPI1_Init>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8008746:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 800874a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800874e:	eee1 3a10 	vmsr	fpscr, r3
 8008752:	4962      	ldr	r1, [pc, #392]	; (80088dc <main+0x250>)
 8008754:	2000      	movs	r0, #0
	  SPI_TX[i] = counter++;
 8008756:	4b62      	ldr	r3, [pc, #392]	; (80088e0 <main+0x254>)
  SPI_PLUCK_TX[0] = 254;//start message
 8008758:	26fe      	movs	r6, #254	; 0xfe
 800875a:	780a      	ldrb	r2, [r1, #0]
 800875c:	4604      	mov	r4, r0
  SPI_PLUCK_TX[21] = 253;//end message
 800875e:	f04f 0cfd 	mov.w	ip, #253	; 0xfd
 8008762:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8008940 <main+0x2b4>
 8008766:	1c55      	adds	r5, r2, #1
 8008768:	f362 0007 	bfi	r0, r2, #0, #8
 800876c:	f102 0e02 	add.w	lr, r2, #2
 8008770:	621c      	str	r4, [r3, #32]
 8008772:	f365 200f 	bfi	r0, r5, #8, #8
 8008776:	1cd5      	adds	r5, r2, #3
  SPI_PLUCK_TX[0] = 254;//start message
 8008778:	f883 6020 	strb.w	r6, [r3, #32]
 800877c:	f102 0808 	add.w	r8, r2, #8
 8008780:	f36e 4017 	bfi	r0, lr, #16, #8
 8008784:	869c      	strh	r4, [r3, #52]	; 0x34
 8008786:	625c      	str	r4, [r3, #36]	; 0x24
  HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 8008788:	2208      	movs	r2, #8
 800878a:	f365 601f 	bfi	r0, r5, #24, #8
 800878e:	629c      	str	r4, [r3, #40]	; 0x28
 8008790:	f881 8000 	strb.w	r8, [r1]
 8008794:	f103 0140 	add.w	r1, r3, #64	; 0x40
	  SPI_TX[i] = counter++;
 8008798:	f000 367f 	and.w	r6, r0, #2139062143	; 0x7f7f7f7f
 800879c:	f000 3e80 	and.w	lr, r0, #2155905152	; 0x80808080
 80087a0:	6018      	str	r0, [r3, #0]
LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 80087a2:	4625      	mov	r5, r4
	  SPI_TX[i] = counter++;
 80087a4:	f106 3604 	add.w	r6, r6, #67372036	; 0x4040404
  HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 80087a8:	484e      	ldr	r0, [pc, #312]	; (80088e4 <main+0x258>)
  SPI_PLUCK_TX[21] = 253;//end message
 80087aa:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
	  SPI_TX[i] = counter++;
 80087ae:	ea86 060e 	eor.w	r6, r6, lr
 80087b2:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8008944 <main+0x2b8>
 80087b6:	4f4c      	ldr	r7, [pc, #304]	; (80088e8 <main+0x25c>)
 80087b8:	605e      	str	r6, [r3, #4]
	tThreshold_init(&threshold[i],0.1f * (float)storedMaximums[i], 0.1f * (float)storedMaximums[i], &leaf);
 80087ba:	ed9f aa4c 	vldr	s20, [pc, #304]	; 80088ec <main+0x260>
 80087be:	4e4c      	ldr	r6, [pc, #304]	; (80088f0 <main+0x264>)
	tSlide_init(&fastSlide[i],1.0f,500.0f, &leaf); //500
 80087c0:	eddf 9a4c 	vldr	s19, [pc, #304]	; 80088f4 <main+0x268>
		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 1000.0f, 0.6f, &leaf);
 80087c4:	ed9f 9a4c 	vldr	s18, [pc, #304]	; 80088f8 <main+0x26c>
 80087c8:	eddf 8a4c 	vldr	s17, [pc, #304]	; 80088fc <main+0x270>
		tHighpass_init(&opticalHighpass[i][j], 100.0f, &leaf);
 80087cc:	ed9f 8a4c 	vldr	s16, [pc, #304]	; 8008900 <main+0x274>
 80087d0:	f8df b174 	ldr.w	fp, [pc, #372]	; 8008948 <main+0x2bc>
 80087d4:	f8df a174 	ldr.w	sl, [pc, #372]	; 800894c <main+0x2c0>
 80087d8:	e9c3 440b 	strd	r4, r4, [r3, #44]	; 0x2c
  HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 80087dc:	f7fe f870 	bl	80068c0 <HAL_SPI_Receive_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80087e0:	2201      	movs	r2, #1
 80087e2:	2140      	movs	r1, #64	; 0x40
 80087e4:	4847      	ldr	r0, [pc, #284]	; (8008904 <main+0x278>)
 80087e6:	f7fa f8e1 	bl	80029ac <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80087ea:	200a      	movs	r0, #10
 80087ec:	f7f7 fdde 	bl	80003ac <HAL_Delay>
	tThreshold_init(&threshold[i],0.1f * (float)storedMaximums[i], 0.1f * (float)storedMaximums[i], &leaf);
 80087f0:	4c45      	ldr	r4, [pc, #276]	; (8008908 <main+0x27c>)
  SDRAM_Initialization_sequence();
 80087f2:	f7ff fec5 	bl	8008580 <SDRAM_Initialization_sequence>
  HAL_Delay(10);
 80087f6:	200a      	movs	r0, #10
 80087f8:	f7f7 fdd8 	bl	80003ac <HAL_Delay>
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 80087fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008800:	4942      	ldr	r1, [pc, #264]	; (800890c <main+0x280>)
 8008802:	4843      	ldr	r0, [pc, #268]	; (8008910 <main+0x284>)
 8008804:	f7fc fb4e 	bl	8004ea4 <HAL_SAI_Transmit_DMA>
  HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8008808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800880c:	4941      	ldr	r1, [pc, #260]	; (8008914 <main+0x288>)
 800880e:	4842      	ldr	r0, [pc, #264]	; (8008918 <main+0x28c>)
 8008810:	f7fc fbd8 	bl	8004fc4 <HAL_SAI_Receive_DMA>
LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8008814:	4b41      	ldr	r3, [pc, #260]	; (800891c <main+0x290>)
 8008816:	4a42      	ldr	r2, [pc, #264]	; (8008920 <main+0x294>)
 8008818:	4942      	ldr	r1, [pc, #264]	; (8008924 <main+0x298>)
 800881a:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8008928 <main+0x29c>
 800881e:	483a      	ldr	r0, [pc, #232]	; (8008908 <main+0x27c>)
 8008820:	f001 fa66 	bl	8009cf0 <LEAF_init>
	tThreshold_init(&threshold[i],0.1f * (float)storedMaximums[i], 0.1f * (float)storedMaximums[i], &leaf);
 8008824:	edd8 7a00 	vldr	s15, [r8]
 8008828:	eb0b 0005 	add.w	r0, fp, r5
 800882c:	4621      	mov	r1, r4
 800882e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8008832:	ee60 0a8a 	vmul.f32	s1, s1, s20
 8008836:	eeb0 0a60 	vmov.f32	s0, s1
 800883a:	f000 feed 	bl	8009618 <tThreshold_init>
	tSlide_init(&fastSlide[i],1.0f,500.0f, &leaf); //500
 800883e:	eb0a 0005 	add.w	r0, sl, r5
 8008842:	4621      	mov	r1, r4
 8008844:	eef0 0a69 	vmov.f32	s1, s19
 8008848:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800884c:	f000 ff14 	bl	8009678 <tSlide_init>
	tSlide_init(&slowSlide[i],1.0f,500.0f, &leaf); //500
 8008850:	4b36      	ldr	r3, [pc, #216]	; (800892c <main+0x2a0>)
 8008852:	4621      	mov	r1, r4
 8008854:	eef0 0a69 	vmov.f32	s1, s19
 8008858:	1958      	adds	r0, r3, r5
 800885a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800885e:	f000 ff0b 	bl	8009678 <tSlide_init>
	storedMaxFloats[i] = (65535.0f / storedMaximums[i]);
 8008862:	ecf8 7a01 	vldmia	r8!, {s15}
 8008866:	eddf 6a32 	vldr	s13, [pc, #200]	; 8008930 <main+0x2a4>
		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 1000.0f, 0.6f, &leaf);
 800886a:	4622      	mov	r2, r4
	storedMaxFloats[i] = (65535.0f / storedMaximums[i]);
 800886c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 1000.0f, 0.6f, &leaf);
 8008870:	4638      	mov	r0, r7
 8008872:	eef0 0a49 	vmov.f32	s1, s18
 8008876:	2101      	movs	r1, #1
 8008878:	eeb0 0a68 	vmov.f32	s0, s17
 800887c:	3504      	adds	r5, #4
	storedMaxFloats[i] = (65535.0f / storedMaximums[i]);
 800887e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008882:	eca9 7a01 	vstmia	r9!, {s14}
		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 1000.0f, 0.6f, &leaf);
 8008886:	f000 ff7f 	bl	8009788 <tVZFilter_init>
		tHighpass_init(&opticalHighpass[i][j], 100.0f, &leaf);
 800888a:	4630      	mov	r0, r6
 800888c:	4621      	mov	r1, r4
 800888e:	eeb0 0a48 	vmov.f32	s0, s16
 8008892:	f000 ff49 	bl	8009728 <tHighpass_init>
		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 1000.0f, 0.6f, &leaf);
 8008896:	1d38      	adds	r0, r7, #4
 8008898:	4622      	mov	r2, r4
 800889a:	eef0 0a49 	vmov.f32	s1, s18
 800889e:	eeb0 0a68 	vmov.f32	s0, s17
 80088a2:	2101      	movs	r1, #1
 80088a4:	f000 ff70 	bl	8009788 <tVZFilter_init>
		tHighpass_init(&opticalHighpass[i][j], 100.0f, &leaf);
 80088a8:	1d30      	adds	r0, r6, #4
 80088aa:	4621      	mov	r1, r4
 80088ac:	eeb0 0a48 	vmov.f32	s0, s16
 80088b0:	f000 ff3a 	bl	8009728 <tHighpass_init>
for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 80088b4:	2d28      	cmp	r5, #40	; 0x28
 80088b6:	f107 0708 	add.w	r7, r7, #8
 80088ba:	f106 0608 	add.w	r6, r6, #8
 80088be:	d1b1      	bne.n	8008824 <main+0x198>
LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 80088c0:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80088c4:	481b      	ldr	r0, [pc, #108]	; (8008934 <main+0x2a8>)
 80088c6:	f001 f9a5 	bl	8009c14 <LEAF_generate_atodb>
 HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 80088ca:	2250      	movs	r2, #80	; 0x50
 80088cc:	491a      	ldr	r1, [pc, #104]	; (8008938 <main+0x2ac>)
 80088ce:	481b      	ldr	r0, [pc, #108]	; (800893c <main+0x2b0>)
 80088d0:	f7f7 fd8e 	bl	80003f0 <HAL_ADC_Start_DMA>
 80088d4:	e7fe      	b.n	80088d4 <main+0x248>
 80088d6:	bf00      	nop
 80088d8:	e000ed00 	.word	0xe000ed00
 80088dc:	20000e9c 	.word	0x20000e9c
 80088e0:	30000000 	.word	0x30000000
 80088e4:	20019bd4 	.word	0x20019bd4
 80088e8:	20019854 	.word	0x20019854
 80088ec:	3dcccccd 	.word	0x3dcccccd
 80088f0:	200009ec 	.word	0x200009ec
 80088f4:	43fa0000 	.word	0x43fa0000
 80088f8:	3f19999a 	.word	0x3f19999a
 80088fc:	447a0000 	.word	0x447a0000
 8008900:	42c80000 	.word	0x42c80000
 8008904:	58020800 	.word	0x58020800
 8008908:	20000740 	.word	0x20000740
 800890c:	300021a0 	.word	0x300021a0
 8008910:	20019abc 	.word	0x20019abc
 8008914:	300001a0 	.word	0x300001a0
 8008918:	20019934 	.word	0x20019934
 800891c:	08008435 	.word	0x08008435
 8008920:	000493e0 	.word	0x000493e0
 8008924:	24035b60 	.word	0x24035b60
 8008928:	473b8000 	.word	0x473b8000
 800892c:	2000113c 	.word	0x2000113c
 8008930:	477fff00 	.word	0x477fff00
 8008934:	200011b4 	.word	0x200011b4
 8008938:	30000060 	.word	0x30000060
 800893c:	2000013c 	.word	0x2000013c
 8008940:	20000e1c 	.word	0x20000e1c
 8008944:	2000000c 	.word	0x2000000c
 8008948:	20000718 	.word	0x20000718
 800894c:	200198f8 	.word	0x200198f8

08008950 <attackDetectPeak2>:
int totalMaximums[NUM_STRINGS];

int attackDetectPeak2 (int whichString, int tempInt)
{
	float output = -1;
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 8008950:	ee07 1a90 	vmov	s15, r1
 8008954:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8008b68 <attackDetectPeak2+0x218>
 8008958:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8008b6c <attackDetectPeak2+0x21c>
 800895c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8008960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 8008964:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008968:	00c6      	lsls	r6, r0, #3
	for (int k = 0; k < FILTER_ORDER; k++)
	{
		// a highpass filter, remove any slow moving signal (effectively centers the signal around zero and gets rid of the signal that isn't high frequency vibration) cutoff of 100Hz, // applied 8 times to get rid of a lot of low frequency bumbling around
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 800896a:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8008bc0 <attackDetectPeak2+0x270>
 800896e:	0085      	lsls	r5, r0, #2
		tempSamp = tVZFilter_tickEfficient(&opticalLowpass[whichString][k], tempSamp);
 8008970:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8008bc4 <attackDetectPeak2+0x274>
{
 8008974:	4604      	mov	r4, r0
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8008976:	ee27 0a80 	vmul.f32	s0, s15, s0
 800897a:	1d37      	adds	r7, r6, #4
 800897c:	eb09 0006 	add.w	r0, r9, r6
{
 8008980:	ed2d 8b02 	vpush	{d8}
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8008984:	f000 fef0 	bl	8009768 <tHighpass_tick>
		tempSamp = tVZFilter_tickEfficient(&opticalLowpass[whichString][k], tempSamp);
 8008988:	eb08 0006 	add.w	r0, r8, r6
 800898c:	f001 f8fc 	bl	8009b88 <tVZFilter_tickEfficient>
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8008990:	eb09 0007 	add.w	r0, r9, r7
 8008994:	f000 fee8 	bl	8009768 <tHighpass_tick>
		tempSamp = tVZFilter_tickEfficient(&opticalLowpass[whichString][k], tempSamp);
 8008998:	eb08 0007 	add.w	r0, r8, r7
 800899c:	f001 f8f4 	bl	8009b88 <tVZFilter_tickEfficient>
	}

	float tempAbs = fabsf(tempSamp);
 80089a0:	eeb0 0ac0 	vabs.f32	s0, s0
	tempAbsInt[whichString] = (tempAbs * (TWO_TO_16 - 1));
 80089a4:	eddf 8a72 	vldr	s17, [pc, #456]	; 8008b70 <attackDetectPeak2+0x220>
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80089a8:	4872      	ldr	r0, [pc, #456]	; (8008b74 <attackDetectPeak2+0x224>)
	tempAbsInt[whichString] = (tempAbs * (TWO_TO_16 - 1));
 80089aa:	ee60 7a28 	vmul.f32	s15, s0, s17
 80089ae:	4b72      	ldr	r3, [pc, #456]	; (8008b78 <attackDetectPeak2+0x228>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80089b0:	4428      	add	r0, r5
	smoothedInt[whichString] = (Dsmoothed * (TWO_TO_16 - 1));
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80089b2:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8008bc8 <attackDetectPeak2+0x278>
	//dbSmoothed2 = atodb(Dsmoothed2);
	dbSmoothed2 = LEAF_clip(-60.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
	dbSmoothedInt[whichString] = dbSmoothed2 * 100.0f;
	//dbSmoothed2 = LEAF_clip(-50.f, dbSmoothed2, 12.0f);
	//get the slope
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 80089b6:	4e71      	ldr	r6, [pc, #452]	; (8008b7c <attackDetectPeak2+0x22c>)
	tempAbsInt[whichString] = (tempAbs * (TWO_TO_16 - 1));
 80089b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	dbSmoothed2 = LEAF_clip(-60.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 80089bc:	4f70      	ldr	r7, [pc, #448]	; (8008b80 <attackDetectPeak2+0x230>)
	tempAbsInt[whichString] = (tempAbs * (TWO_TO_16 - 1));
 80089be:	ee17 2a90 	vmov	r2, s15
 80089c2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80089c6:	f000 fe7d 	bl	80096c4 <tSlide_tick>
	smoothedInt[whichString] = (Dsmoothed * (TWO_TO_16 - 1));
 80089ca:	ee60 7a28 	vmul.f32	s15, s0, s17
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80089ce:	4a6d      	ldr	r2, [pc, #436]	; (8008b84 <attackDetectPeak2+0x234>)
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80089d0:	486d      	ldr	r0, [pc, #436]	; (8008b88 <attackDetectPeak2+0x238>)
	smoothedInt[whichString] = (Dsmoothed * (TWO_TO_16 - 1));
 80089d2:	4b6e      	ldr	r3, [pc, #440]	; (8008b8c <attackDetectPeak2+0x23c>)
 80089d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80089d8:	ed82 0a00 	vstr	s0, [r2]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80089dc:	4428      	add	r0, r5
	smoothedInt[whichString] = (Dsmoothed * (TWO_TO_16 - 1));
 80089de:	ee17 2a90 	vmov	r2, s15
 80089e2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80089e6:	f000 fe6d 	bl	80096c4 <tSlide_tick>
 80089ea:	eef0 7a40 	vmov.f32	s15, s0
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 80089ee:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8008b90 <attackDetectPeak2+0x240>
 80089f2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80089f6:	eef0 0a67 	vmov.f32	s1, s15
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80089fa:	edc8 7a00 	vstr	s15, [r8]
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 80089fe:	f001 f8f5 	bl	8009bec <LEAF_clip>
	dbSmoothed2 = LEAF_clip(-60.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8008a02:	eddf 7a64 	vldr	s15, [pc, #400]	; 8008b94 <attackDetectPeak2+0x244>
	smoothedInt2[whichString] = (Dsmoothed2 * (TWO_TO_16 - 1));
 8008a06:	ee20 7a28 	vmul.f32	s14, s0, s17
 8008a0a:	4a63      	ldr	r2, [pc, #396]	; (8008b98 <attackDetectPeak2+0x248>)
	dbSmoothed2 = LEAF_clip(-60.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8008a0c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008a10:	4b62      	ldr	r3, [pc, #392]	; (8008b9c <attackDetectPeak2+0x24c>)
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8008a12:	eef0 6a40 	vmov.f32	s13, s0
	dbSmoothed2 = LEAF_clip(-60.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8008a16:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8008ba0 <attackDetectPeak2+0x250>
	smoothedInt2[whichString] = (Dsmoothed2 * (TWO_TO_16 - 1));
 8008a1a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	dbSmoothed2 = LEAF_clip(-60.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8008a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a22:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8008a26:	edc8 6a00 	vstr	s13, [r8]
	smoothedInt2[whichString] = (Dsmoothed2 * (TWO_TO_16 - 1));
 8008a2a:	ee17 1a10 	vmov	r1, s14
 8008a2e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
	dbSmoothed2 = LEAF_clip(-60.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8008a32:	ee17 2a90 	vmov	r2, s15
 8008a36:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008a3a:	edd3 0a00 	vldr	s1, [r3]
 8008a3e:	f001 f8d5 	bl	8009bec <LEAF_clip>
	dbSmoothedInt[whichString] = dbSmoothed2 * 100.0f;
 8008a42:	eddf 7a58 	vldr	s15, [pc, #352]	; 8008ba4 <attackDetectPeak2+0x254>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8008a46:	1973      	adds	r3, r6, r5
	slopeStorage[whichString] = slope;
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8008a48:	ed98 7a00 	vldr	s14, [r8]
	dbSmoothedInt[whichString] = dbSmoothed2 * 100.0f;
 8008a4c:	ee60 7a27 	vmul.f32	s15, s0, s15
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8008a50:	4855      	ldr	r0, [pc, #340]	; (8008ba8 <attackDetectPeak2+0x258>)
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8008a52:	ed93 8a00 	vldr	s16, [r3]
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8008a56:	ee67 8a28 	vmul.f32	s17, s14, s17
	slopeStorage[whichString] = slope;
 8008a5a:	4b54      	ldr	r3, [pc, #336]	; (8008bac <attackDetectPeak2+0x25c>)
	dbSmoothed2 = LEAF_clip(-60.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8008a5c:	eef0 6a40 	vmov.f32	s13, s0
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8008a60:	ee30 8a48 	vsub.f32	s16, s0, s16
	dbSmoothedInt[whichString] = dbSmoothed2 * 100.0f;
 8008a64:	4a52      	ldr	r2, [pc, #328]	; (8008bb0 <attackDetectPeak2+0x260>)
 8008a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	slopeStorage[whichString] = slope;
 8008a6a:	442b      	add	r3, r5
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8008a6c:	eeb0 0a68 	vmov.f32	s0, s17
 8008a70:	4428      	add	r0, r5
	slopeStorage[whichString] = slope;
 8008a72:	ed83 8a00 	vstr	s16, [r3]
	dbSmoothedInt[whichString] = dbSmoothed2 * 100.0f;
 8008a76:	ee17 3a90 	vmov	r3, s15
	dbSmoothed2 = LEAF_clip(-60.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8008a7a:	edc7 6a00 	vstr	s13, [r7]
	if ((slope > 0.1f) && (threshOut > 0))
	{
		armed[whichString] = 1;
 8008a7e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8008bcc <attackDetectPeak2+0x27c>
	dbSmoothedInt[whichString] = dbSmoothed2 * 100.0f;
 8008a82:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8008a86:	f000 fddf 	bl	8009648 <tThreshold_tick>
 8008a8a:	4b4a      	ldr	r3, [pc, #296]	; (8008bb4 <attackDetectPeak2+0x264>)
	if ((slope > 0.1f) && (threshOut > 0))
 8008a8c:	2800      	cmp	r0, #0
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8008a8e:	6018      	str	r0, [r3, #0]
	if ((slope > 0.1f) && (threshOut > 0))
 8008a90:	dd06      	ble.n	8008aa0 <attackDetectPeak2+0x150>
 8008a92:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008bb8 <attackDetectPeak2+0x268>
 8008a96:	eeb4 8a67 	vcmp.f32	s16, s15
 8008a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a9e:	dc0c      	bgt.n	8008aba <attackDetectPeak2+0x16a>
	}

	if (armed[whichString] == 1)
 8008aa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d00b      	beq.n	8008ac0 <attackDetectPeak2+0x170>
{
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			downCounter[whichString] = 0;
			stringMaxes[whichString] = 0;
		}
	}

	prevdbSmoothed2[whichString] = dbSmoothed2;
 8008aac:	4435      	add	r5, r6
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	602b      	str	r3, [r5, #0]
	return (int)output;
}
 8008ab2:	ecbd 8b02 	vpop	{d8}
 8008ab6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		armed[whichString] = 1;
 8008aba:	2301      	movs	r3, #1
 8008abc:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
		if (integerVersion > stringMaxes[whichString])
 8008ac0:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8008bd0 <attackDetectPeak2+0x280>
 8008ac4:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8008ac8:	ee07 3a90 	vmov	s15, r3
 8008acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ad0:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad8:	d43e      	bmi.n	8008b58 <attackDetectPeak2+0x208>
		armedCounter[whichString]++;
 8008ada:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008bd4 <attackDetectPeak2+0x284>
		if (slope <= 0.0f)
 8008ade:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
			downCounter[whichString]++;
 8008ae2:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8008bd8 <attackDetectPeak2+0x288>
		armedCounter[whichString]++;
 8008ae6:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
		if (slope <= 0.0f)
 8008aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		armedCounter[whichString]++;
 8008aee:	f103 0301 	add.w	r3, r3, #1
 8008af2:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
		if (slope <= 0.0f)
 8008af6:	d804      	bhi.n	8008b02 <attackDetectPeak2+0x1b2>
			downCounter[whichString]++;
 8008af8:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 8008afc:	3301      	adds	r3, #1
 8008afe:	f84b 3024 	str.w	r3, [fp, r4, lsl #2]
		if (slope > 0.01f)
 8008b02:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8008bbc <attackDetectPeak2+0x26c>
 8008b06:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b0e:	dc1d      	bgt.n	8008b4c <attackDetectPeak2+0x1fc>
		if (downCounter[whichString] > 128)
 8008b10:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 8008b14:	2b80      	cmp	r3, #128	; 0x80
 8008b16:	ddc7      	ble.n	8008aa8 <attackDetectPeak2+0x158>
			output = LEAF_clip(0.0f, output, 65535.0f);
 8008b18:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8008b1c:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8008b70 <attackDetectPeak2+0x220>
 8008b20:	ee07 3a90 	vmov	s15, r3
 8008b24:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8008b90 <attackDetectPeak2+0x240>
 8008b28:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8008b2c:	f001 f85e 	bl	8009bec <LEAF_clip>
 8008b30:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			armed[whichString] = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	ee17 0a90 	vmov	r0, s15
 8008b3a:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
			armedCounter[whichString] = 0;
 8008b3e:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
			downCounter[whichString] = 0;
 8008b42:	f84b 3024 	str.w	r3, [fp, r4, lsl #2]
			stringMaxes[whichString] = 0;
 8008b46:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
 8008b4a:	e7af      	b.n	8008aac <attackDetectPeak2+0x15c>
			downCounter[whichString] = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b52:	f84b 3024 	str.w	r3, [fp, r4, lsl #2]
 8008b56:	e7a9      	b.n	8008aac <attackDetectPeak2+0x15c>
			stringMaxes[whichString] = integerVersion;
 8008b58:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8008b5c:	ee18 3a90 	vmov	r3, s17
 8008b60:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
 8008b64:	e7b9      	b.n	8008ada <attackDetectPeak2+0x18a>
 8008b66:	bf00      	nop
 8008b68:	47000000 	.word	0x47000000
 8008b6c:	37fffffc 	.word	0x37fffffc
 8008b70:	477fff00 	.word	0x477fff00
 8008b74:	200198f8 	.word	0x200198f8
 8008b78:	20000d58 	.word	0x20000d58
 8008b7c:	20000d30 	.word	0x20000d30
 8008b80:	20000d14 	.word	0x20000d14
 8008b84:	20000ea0 	.word	0x20000ea0
 8008b88:	2000113c 	.word	0x2000113c
 8008b8c:	200198a4 	.word	0x200198a4
 8008b90:	00000000 	.word	0x00000000
 8008b94:	46c34e00 	.word	0x46c34e00
 8008b98:	20000e74 	.word	0x20000e74
 8008b9c:	200011b4 	.word	0x200011b4
 8008ba0:	c2700000 	.word	0xc2700000
 8008ba4:	42c80000 	.word	0x42c80000
 8008ba8:	20000718 	.word	0x20000718
 8008bac:	20000cc4 	.word	0x20000cc4
 8008bb0:	200009c0 	.word	0x200009c0
 8008bb4:	20000124 	.word	0x20000124
 8008bb8:	3dcccccd 	.word	0x3dcccccd
 8008bbc:	3c23d70a 	.word	0x3c23d70a
 8008bc0:	200009ec 	.word	0x200009ec
 8008bc4:	20019854 	.word	0x20019854
 8008bc8:	20000da8 	.word	0x20000da8
 8008bcc:	200000d4 	.word	0x200000d4
 8008bd0:	200000fc 	.word	0x200000fc
 8008bd4:	20000cec 	.word	0x20000cec
 8008bd8:	20001164 	.word	0x20001164

08008bdc <ADC_Frame>:

int stringStates[10];

void ADC_Frame(int offset)
{
 8008bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be0:	4682      	mov	sl, r0
 8008be2:	b083      	sub	sp, #12
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8008be4:	2201      	movs	r2, #1
 8008be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bea:	4853      	ldr	r0, [pc, #332]	; (8008d38 <ADC_Frame+0x15c>)
 8008bec:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8008bf0:	f7f9 fedc 	bl	80029ac <HAL_GPIO_WritePin>
 8008bf4:	4b51      	ldr	r3, [pc, #324]	; (8008d3c <ADC_Frame+0x160>)
 8008bf6:	2204      	movs	r2, #4
 8008bf8:	4e51      	ldr	r6, [pc, #324]	; (8008d40 <ADC_Frame+0x164>)
 8008bfa:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008bfe:	f1a3 0860 	sub.w	r8, r3, #96	; 0x60
 8008c02:	9201      	str	r2, [sp, #4]
	int changeHappened = 0;
 8008c04:	f04f 0b00 	mov.w	fp, #0
 8008c08:	f1aa 0204 	sub.w	r2, sl, #4
 8008c0c:	6833      	ldr	r3, [r6, #0]
					changeHappened = 1;
					stringSounding[j] = 1;
					//HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 4);
				}

				if ((stringTouchRH[j]) && (stringSounding[j]))
 8008c0e:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8008d60 <ADC_Frame+0x184>
 8008c12:	9200      	str	r2, [sp, #0]
		if (howManyFrames > 0)
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	dd01      	ble.n	8008c1c <ADC_Frame+0x40>
			howManyFrames--;
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	6033      	str	r3, [r6, #0]
 8008c1c:	4d49      	ldr	r5, [pc, #292]	; (8008d44 <ADC_Frame+0x168>)
	int changeHappened = 0;
 8008c1e:	2400      	movs	r4, #0
 8008c20:	f8dd a000 	ldr.w	sl, [sp]
 8008c24:	e044      	b.n	8008cb0 <ADC_Frame+0xd4>
				stringTouchRH[j] = (SPI_RX[4] >> j) & 1;
 8008c26:	f898 3044 	ldrb.w	r3, [r8, #68]	; 0x44
 8008c2a:	4123      	asrs	r3, r4
 8008c2c:	f003 0301 	and.w	r3, r3, #1
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8008c30:	4620      	mov	r0, r4
 8008c32:	f825 3b02 	strh.w	r3, [r5], #2
 8008c36:	f7ff fe8b 	bl	8008950 <attackDetectPeak2>
 8008c3a:	4a43      	ldr	r2, [pc, #268]	; (8008d48 <ADC_Frame+0x16c>)
			if (howManyFrames == 0)
 8008c3c:	6833      	ldr	r3, [r6, #0]
 8008c3e:	00a1      	lsls	r1, r4, #2
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8008c40:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
			if (howManyFrames == 0)
 8008c44:	bb8b      	cbnz	r3, 8008caa <ADC_Frame+0xce>
				if ((didPlucked[j] > 0) && (!stringSounding[j]) && (!stringTouchRH[j]))
 8008c46:	2800      	cmp	r0, #0
 8008c48:	f835 2c02 	ldrh.w	r2, [r5, #-2]
 8008c4c:	dd3c      	ble.n	8008cc8 <ADC_Frame+0xec>
 8008c4e:	f859 7001 	ldr.w	r7, [r9, r1]
 8008c52:	2f00      	cmp	r7, #0
 8008c54:	d13c      	bne.n	8008cd0 <ADC_Frame+0xf4>
 8008c56:	bb42      	cbnz	r2, 8008caa <ADC_Frame+0xce>
					if (didPlucked[j] > totalMaximums[j])
 8008c58:	4f3c      	ldr	r7, [pc, #240]	; (8008d4c <ADC_Frame+0x170>)
					didPlucked[j] = (float)didPlucked[j] * storedMaxFloats[j];
 8008c5a:	ee07 0a90 	vmov	s15, r0
					if (didPlucked[j] > totalMaximums[j])
 8008c5e:	59ca      	ldr	r2, [r1, r7]
					didPlucked[j] = (float)didPlucked[j] * storedMaxFloats[j];
 8008c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					if (didPlucked[j] > totalMaximums[j])
 8008c64:	4290      	cmp	r0, r2
					didPlucked[j] = (float)didPlucked[j] * storedMaxFloats[j];
 8008c66:	4a3a      	ldr	r2, [pc, #232]	; (8008d50 <ADC_Frame+0x174>)
 8008c68:	440a      	add	r2, r1
						totalMaximums[j] = didPlucked[j];
 8008c6a:	bfc8      	it	gt
 8008c6c:	51c8      	strgt	r0, [r1, r7]
					didPlucked[j] = (float)didPlucked[j] * storedMaxFloats[j];
 8008c6e:	edd2 7a00 	vldr	s15, [r2]
 8008c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c7a:	ee17 2a90 	vmov	r2, s15
					if (didPlucked[j] > 65535)
 8008c7e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008c82:	da48      	bge.n	8008d16 <ADC_Frame+0x13a>
					didPlucked[j] = (float)didPlucked[j] * storedMaxFloats[j];
 8008c84:	4830      	ldr	r0, [pc, #192]	; (8008d48 <ADC_Frame+0x16c>)
 8008c86:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 8008c8a:	fa5f fc82 	uxtb.w	ip, r2
 8008c8e:	5042      	str	r2, [r0, r1]
 8008c90:	4830      	ldr	r0, [pc, #192]	; (8008d54 <ADC_Frame+0x178>)
 8008c92:	eb00 0b44 	add.w	fp, r0, r4, lsl #1
					stringStates[j] = didPlucked[j];
 8008c96:	4830      	ldr	r0, [pc, #192]	; (8008d58 <ADC_Frame+0x17c>)
 8008c98:	500a      	str	r2, [r1, r0]
					stringSounding[j] = 1;
 8008c9a:	2001      	movs	r0, #1
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] >> 8);
 8008c9c:	f88b e001 	strb.w	lr, [fp, #1]
					SPI_PLUCK_TX[(j * 2) + 2] = (didPlucked[j] & 0xff);
 8008ca0:	f88b c002 	strb.w	ip, [fp, #2]
					changeHappened = 1;
 8008ca4:	4683      	mov	fp, r0
					stringSounding[j] = 1;
 8008ca6:	f849 0001 	str.w	r0, [r9, r1]
 8008caa:	3401      	adds	r4, #1
		for (int j = 0; j < 10; j++)
 8008cac:	2c0a      	cmp	r4, #10
 8008cae:	d020      	beq.n	8008cf2 <ADC_Frame+0x116>
			if (j < 8)
 8008cb0:	2c07      	cmp	r4, #7
			int tempInt = ADC_values[(i*NUM_ADC_CHANNELS) + j];
 8008cb2:	f85a 1f04 	ldr.w	r1, [sl, #4]!
			if (j < 8)
 8008cb6:	d9b6      	bls.n	8008c26 <ADC_Frame+0x4a>
				stringTouchRH[j] = (SPI_RX[5] >> (j-8)) & 1;
 8008cb8:	f898 3045 	ldrb.w	r3, [r8, #69]	; 0x45
 8008cbc:	f1a4 0208 	sub.w	r2, r4, #8
 8008cc0:	4113      	asrs	r3, r2
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	e7b3      	b.n	8008c30 <ADC_Frame+0x54>
				if ((stringTouchRH[j]) && (stringSounding[j]))
 8008cc8:	2a00      	cmp	r2, #0
 8008cca:	d0ee      	beq.n	8008caa <ADC_Frame+0xce>
 8008ccc:	f859 2001 	ldr.w	r2, [r9, r1]
 8008cd0:	2a00      	cmp	r2, #0
 8008cd2:	d0ea      	beq.n	8008caa <ADC_Frame+0xce>
 8008cd4:	4a1f      	ldr	r2, [pc, #124]	; (8008d54 <ADC_Frame+0x178>)
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);

					//}
					//HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 20);
					stringStates[j] = 0;
					changeHappened = 1;
 8008cd6:	f04f 0b01 	mov.w	fp, #1
 8008cda:	eb02 0044 	add.w	r0, r2, r4, lsl #1
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 8008cde:	2200      	movs	r2, #0
 8008ce0:	3401      	adds	r4, #1
 8008ce2:	7042      	strb	r2, [r0, #1]
					SPI_PLUCK_TX[(j * 2) + 2] = 0;
 8008ce4:	7082      	strb	r2, [r0, #2]
		for (int j = 0; j < 10; j++)
 8008ce6:	2c0a      	cmp	r4, #10
					stringStates[j] = 0;
 8008ce8:	481b      	ldr	r0, [pc, #108]	; (8008d58 <ADC_Frame+0x17c>)
					stringSounding[j] = 0;
 8008cea:	f849 2001 	str.w	r2, [r9, r1]
					stringStates[j] = 0;
 8008cee:	500a      	str	r2, [r1, r0]
		for (int j = 0; j < 10; j++)
 8008cf0:	d1de      	bne.n	8008cb0 <ADC_Frame+0xd4>
 8008cf2:	9a00      	ldr	r2, [sp, #0]
 8008cf4:	3228      	adds	r2, #40	; 0x28
 8008cf6:	9200      	str	r2, [sp, #0]
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8008cf8:	9a01      	ldr	r2, [sp, #4]
 8008cfa:	3a01      	subs	r2, #1
 8008cfc:	9201      	str	r2, [sp, #4]
 8008cfe:	d189      	bne.n	8008c14 <ADC_Frame+0x38>


		}

	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8008d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d04:	480c      	ldr	r0, [pc, #48]	; (8008d38 <ADC_Frame+0x15c>)
 8008d06:	f7f9 fe51 	bl	80029ac <HAL_GPIO_WritePin>
	if (changeHappened)
 8008d0a:	f1bb 0f00 	cmp.w	fp, #0
 8008d0e:	d10b      	bne.n	8008d28 <ADC_Frame+0x14c>
	{
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 22);
	}
}
 8008d10:	b003      	add	sp, #12
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						didPlucked[j] = 65535;
 8008d16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008d1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008d1e:	4f0a      	ldr	r7, [pc, #40]	; (8008d48 <ADC_Frame+0x16c>)
 8008d20:	4602      	mov	r2, r0
 8008d22:	46e6      	mov	lr, ip
 8008d24:	5078      	str	r0, [r7, r1]
 8008d26:	e7b3      	b.n	8008c90 <ADC_Frame+0xb4>
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 22);
 8008d28:	2216      	movs	r2, #22
 8008d2a:	490a      	ldr	r1, [pc, #40]	; (8008d54 <ADC_Frame+0x178>)
 8008d2c:	480b      	ldr	r0, [pc, #44]	; (8008d5c <ADC_Frame+0x180>)
}
 8008d2e:	b003      	add	sp, #12
 8008d30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 22);
 8008d34:	f7fd bbf4 	b.w	8006520 <HAL_SPI_Transmit_DMA>
 8008d38:	58020000 	.word	0x58020000
 8008d3c:	30000060 	.word	0x30000060
 8008d40:	20000008 	.word	0x20000008
 8008d44:	20000d18 	.word	0x20000d18
 8008d48:	20000dd4 	.word	0x20000dd4
 8008d4c:	200198d0 	.word	0x200198d0
 8008d50:	20000e1c 	.word	0x20000e1c
 8008d54:	30000020 	.word	0x30000020
 8008d58:	2000118c 	.word	0x2000118c
 8008d5c:	20019cd4 	.word	0x20019cd4
 8008d60:	20000c74 	.word	0x20000c74

08008d64 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{


	ADC_Frame(ADC_FRAME_SIZE);
 8008d64:	2004      	movs	r0, #4
 8008d66:	f7ff bf39 	b.w	8008bdc <ADC_Frame>
 8008d6a:	bf00      	nop

08008d6c <HAL_ADC_ConvHalfCpltCallback>:


}
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
	ADC_Frame(0);
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	f7ff bf35 	b.w	8008bdc <ADC_Frame>
 8008d72:	bf00      	nop

08008d74 <HAL_SPI_RxCpltCallback>:
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
}
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop

08008d78 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop

08008d7c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8008d7c:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 8008d7e:	4b07      	ldr	r3, [pc, #28]	; (8008d9c <MX_RNG_Init+0x20>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8008d80:	2100      	movs	r1, #0
  hrng.Instance = RNG;
 8008d82:	4a07      	ldr	r2, [pc, #28]	; (8008da0 <MX_RNG_Init+0x24>)
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8008d84:	4618      	mov	r0, r3
  hrng.Instance = RNG;
 8008d86:	e9c3 2100 	strd	r2, r1, [r3]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8008d8a:	f7fb fd8d 	bl	80048a8 <HAL_RNG_Init>
 8008d8e:	b900      	cbnz	r0, 8008d92 <MX_RNG_Init+0x16>
  {
    Error_Handler();
  }

}
 8008d90:	bd08      	pop	{r3, pc}
 8008d92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8008d96:	f7ff bfef 	b.w	8008d78 <Error_Handler>
 8008d9a:	bf00      	nop
 8008d9c:	20019920 	.word	0x20019920
 8008da0:	48021800 	.word	0x48021800

08008da4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 8008da4:	6802      	ldr	r2, [r0, #0]
 8008da6:	4b0a      	ldr	r3, [pc, #40]	; (8008dd0 <HAL_RNG_MspInit+0x2c>)
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d000      	beq.n	8008dae <HAL_RNG_MspInit+0xa>
 8008dac:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8008dae:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <HAL_RNG_MspInit+0x30>)
{
 8008db0:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8008db2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8008db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dba:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8008dbe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8008dca:	b002      	add	sp, #8
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	48021800 	.word	0x48021800
 8008dd4:	58024400 	.word	0x58024400

08008dd8 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8008dd8:	b570      	push	{r4, r5, r6, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 8008dda:	481a      	ldr	r0, [pc, #104]	; (8008e44 <MX_SAI1_Init+0x6c>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8008ddc:	2500      	movs	r5, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 8008dde:	4c1a      	ldr	r4, [pc, #104]	; (8008e48 <MX_SAI1_Init+0x70>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8008de0:	2101      	movs	r1, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8008de2:	f64b 3280 	movw	r2, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008de6:	2302      	movs	r3, #2
  hsai_BlockA1.Instance = SAI1_Block_A;
 8008de8:	6020      	str	r0, [r4, #0]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008dea:	4620      	mov	r0, r4
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8008dec:	61e1      	str	r1, [r4, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008dee:	4629      	mov	r1, r5
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8008df0:	6222      	str	r2, [r4, #32]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008df2:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008df4:	60e5      	str	r5, [r4, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008df6:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8008df8:	e9c4 5501 	strd	r5, r5, [r4, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8008dfc:	e9c4 5505 	strd	r5, r5, [r4, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8008e00:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008e04:	f7fb fdbc 	bl	8004980 <HAL_SAI_InitProtocol>
 8008e08:	b9c8      	cbnz	r0, 8008e3e <MX_SAI1_Init+0x66>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8008e0a:	4c10      	ldr	r4, [pc, #64]	; (8008e4c <MX_SAI1_Init+0x74>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008e0c:	2500      	movs	r5, #0
  hsai_BlockB1.Instance = SAI1_Block_B;
 8008e0e:	4910      	ldr	r1, [pc, #64]	; (8008e50 <MX_SAI1_Init+0x78>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8008e10:	2203      	movs	r2, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008e12:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8008e14:	2601      	movs	r6, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 8008e16:	6021      	str	r1, [r4, #0]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008e18:	4620      	mov	r0, r4
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8008e1a:	6062      	str	r2, [r4, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8008e20:	60a6      	str	r6, [r4, #8]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8008e22:	61e6      	str	r6, [r4, #28]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008e24:	6165      	str	r5, [r4, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008e26:	60e5      	str	r5, [r4, #12]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008e28:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8008e2a:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008e2e:	f7fb fda7 	bl	8004980 <HAL_SAI_InitProtocol>
 8008e32:	b900      	cbnz	r0, 8008e36 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
  }

}
 8008e34:	bd70      	pop	{r4, r5, r6, pc}
 8008e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8008e3a:	f7ff bf9d 	b.w	8008d78 <Error_Handler>
    Error_Handler();
 8008e3e:	f7ff ff9b 	bl	8008d78 <Error_Handler>
 8008e42:	e7e2      	b.n	8008e0a <MX_SAI1_Init+0x32>
 8008e44:	40015804 	.word	0x40015804
 8008e48:	20019abc 	.word	0x20019abc
 8008e4c:	20019934 	.word	0x20019934
 8008e50:	40015824 	.word	0x40015824

08008e54 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8008e54:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8008e56:	4a50      	ldr	r2, [pc, #320]	; (8008f98 <HAL_SAI_MspInit+0x144>)
{
 8008e58:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI1_Block_A)
 8008e5a:	6803      	ldr	r3, [r0, #0]
{
 8008e5c:	4605      	mov	r5, r0
    if(hsai->Instance==SAI1_Block_A)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d03f      	beq.n	8008ee2 <HAL_SAI_MspInit+0x8e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 8008e62:	4a4e      	ldr	r2, [pc, #312]	; (8008f9c <HAL_SAI_MspInit+0x148>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d001      	beq.n	8008e6c <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 8008e68:	b009      	add	sp, #36	; 0x24
 8008e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (SAI1_client == 0)
 8008e6c:	4b4c      	ldr	r3, [pc, #304]	; (8008fa0 <HAL_SAI_MspInit+0x14c>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	2a00      	cmp	r2, #0
 8008e72:	d06f      	beq.n	8008f54 <HAL_SAI_MspInit+0x100>
    SAI1_client ++;
 8008e74:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008e76:	2108      	movs	r1, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e78:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e7a:	2600      	movs	r6, #0
    SAI1_client ++;
 8008e7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e7e:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008e80:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008e82:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e84:	9004      	str	r0, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008e86:	a903      	add	r1, sp, #12
 8008e88:	4846      	ldr	r0, [pc, #280]	; (8008fa4 <HAL_SAI_MspInit+0x150>)
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008e8a:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai1_b.Instance = DMA1_Stream2;
 8008e8e:	4c46      	ldr	r4, [pc, #280]	; (8008fa8 <HAL_SAI_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008e90:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e92:	e9cd 6205 	strd	r6, r2, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008e96:	f7f9 fc5f 	bl	8002758 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8008e9a:	4a44      	ldr	r2, [pc, #272]	; (8008fac <HAL_SAI_MspInit+0x158>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8008e9c:	2358      	movs	r3, #88	; 0x58
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008e9e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8008ea2:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8008ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_b.Instance = DMA1_Stream2;
 8008eaa:	6022      	str	r2, [r4, #0]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008eac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8008eb0:	6063      	str	r3, [r4, #4]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008eb2:	2304      	movs	r3, #4
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008eb4:	60a6      	str	r6, [r4, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8008eb6:	60e6      	str	r6, [r4, #12]
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008eb8:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008eba:	e9c4 c004 	strd	ip, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8008ebe:	4620      	mov	r0, r4
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8008ec0:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8008ec4:	e9c4 7106 	strd	r7, r1, [r4, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008ec8:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8008ecc:	f7f8 f946 	bl	800115c <HAL_DMA_Init>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d15b      	bne.n	8008f8c <HAL_SAI_MspInit+0x138>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8008ed4:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
 8008ed8:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8008eda:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
}
 8008ede:	b009      	add	sp, #36	; 0x24
 8008ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 8008ee2:	4b2f      	ldr	r3, [pc, #188]	; (8008fa0 <HAL_SAI_MspInit+0x14c>)
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	2a00      	cmp	r2, #0
 8008ee8:	d042      	beq.n	8008f70 <HAL_SAI_MspInit+0x11c>
    SAI1_client ++;
 8008eea:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8008eec:	2174      	movs	r1, #116	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eee:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef0:	2600      	movs	r6, #0
    SAI1_client ++;
 8008ef2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ef4:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008ef6:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8008ef8:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008efa:	9004      	str	r0, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008efc:	a903      	add	r1, sp, #12
 8008efe:	4829      	ldr	r0, [pc, #164]	; (8008fa4 <HAL_SAI_MspInit+0x150>)
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8008f00:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_sai1_a.Instance = DMA1_Stream1;
 8008f04:	4c2a      	ldr	r4, [pc, #168]	; (8008fb0 <HAL_SAI_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008f06:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f08:	e9cd 6205 	strd	r6, r2, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008f0c:	f7f9 fc24 	bl	8002758 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8008f10:	4928      	ldr	r1, [pc, #160]	; (8008fb4 <HAL_SAI_MspInit+0x160>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8008f12:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008f14:	2340      	movs	r3, #64	; 0x40
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008f16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f1a:	60e6      	str	r6, [r4, #12]
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008f1c:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai1_a.Instance = DMA1_Stream1;
 8008f1e:	6021      	str	r1, [r4, #0]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8008f20:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8008f24:	6062      	str	r2, [r4, #4]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008f26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008f2a:	60a3      	str	r3, [r4, #8]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008f2c:	2304      	movs	r3, #4
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8008f2e:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008f32:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008f36:	e9c4 7004 	strd	r7, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8008f3a:	4620      	mov	r0, r4
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8008f3c:	e9c4 6106 	strd	r6, r1, [r4, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008f40:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8008f44:	f7f8 f90a 	bl	800115c <HAL_DMA_Init>
 8008f48:	bb18      	cbnz	r0, 8008f92 <HAL_SAI_MspInit+0x13e>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8008f4a:	63a5      	str	r5, [r4, #56]	; 0x38
 8008f4c:	682b      	ldr	r3, [r5, #0]
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8008f4e:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
 8008f52:	e786      	b.n	8008e62 <HAL_SAI_MspInit+0xe>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008f54:	4918      	ldr	r1, [pc, #96]	; (8008fb8 <HAL_SAI_MspInit+0x164>)
 8008f56:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8008f5a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8008f5e:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8008f62:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8008f66:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008f6a:	9102      	str	r1, [sp, #8]
 8008f6c:	9902      	ldr	r1, [sp, #8]
 8008f6e:	e781      	b.n	8008e74 <HAL_SAI_MspInit+0x20>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008f70:	4911      	ldr	r1, [pc, #68]	; (8008fb8 <HAL_SAI_MspInit+0x164>)
 8008f72:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8008f76:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8008f7a:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8008f7e:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8008f82:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008f86:	9101      	str	r1, [sp, #4]
 8008f88:	9901      	ldr	r1, [sp, #4]
 8008f8a:	e7ae      	b.n	8008eea <HAL_SAI_MspInit+0x96>
      Error_Handler();
 8008f8c:	f7ff fef4 	bl	8008d78 <Error_Handler>
 8008f90:	e7a0      	b.n	8008ed4 <HAL_SAI_MspInit+0x80>
      Error_Handler();
 8008f92:	f7ff fef1 	bl	8008d78 <Error_Handler>
 8008f96:	e7d8      	b.n	8008f4a <HAL_SAI_MspInit+0xf6>
 8008f98:	40015804 	.word	0x40015804
 8008f9c:	40015824 	.word	0x40015824
 8008fa0:	20000128 	.word	0x20000128
 8008fa4:	58021000 	.word	0x58021000
 8008fa8:	20019a44 	.word	0x20019a44
 8008fac:	40020040 	.word	0x40020040
 8008fb0:	200199cc 	.word	0x200199cc
 8008fb4:	40020028 	.word	0x40020028
 8008fb8:	58024400 	.word	0x58024400

08008fbc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008fbc:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 8008fbe:	4c0a      	ldr	r4, [pc, #40]	; (8008fe8 <SD_initialize+0x2c>)
 8008fc0:	2501      	movs	r5, #1
 8008fc2:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008fc4:	f7fe ff96 	bl	8007ef4 <BSP_SD_Init>
 8008fc8:	b108      	cbz	r0, 8008fce <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008fca:	7820      	ldrb	r0, [r4, #0]
}
 8008fcc:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 8008fce:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8008fd0:	f7fe ff64 	bl	8007e9c <BSP_SD_GetCardState>
 8008fd4:	b918      	cbnz	r0, 8008fde <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 8008fd6:	7823      	ldrb	r3, [r4, #0]
 8008fd8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008fdc:	7023      	strb	r3, [r4, #0]
  return Stat;
 8008fde:	7823      	ldrb	r3, [r4, #0]
 8008fe0:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8008fe2:	7023      	strb	r3, [r4, #0]
  return Stat;
 8008fe4:	7820      	ldrb	r0, [r4, #0]
}
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	20000034 	.word	0x20000034

08008fec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008fec:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4c05      	ldr	r4, [pc, #20]	; (8009008 <SD_status+0x1c>)
 8008ff2:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8008ff4:	f7fe ff52 	bl	8007e9c <BSP_SD_GetCardState>
 8008ff8:	b918      	cbnz	r0, 8009002 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8008ffa:	7823      	ldrb	r3, [r4, #0]
 8008ffc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009000:	7023      	strb	r3, [r4, #0]
  return Stat;
 8009002:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8009004:	bd10      	pop	{r4, pc}
 8009006:	bf00      	nop
 8009008:	20000034 	.word	0x20000034

0800900c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800900c:	b508      	push	{r3, lr}
 800900e:	4608      	mov	r0, r1
 8009010:	4611      	mov	r1, r2
 8009012:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009018:	f7fe ff1c 	bl	8007e54 <BSP_SD_ReadBlocks>
 800901c:	b920      	cbnz	r0, 8009028 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800901e:	f7fe ff3d 	bl	8007e9c <BSP_SD_GetCardState>
 8009022:	2800      	cmp	r0, #0
 8009024:	d1fb      	bne.n	800901e <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8009026:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8009028:	2001      	movs	r0, #1
}
 800902a:	bd08      	pop	{r3, pc}

0800902c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800902c:	4b16      	ldr	r3, [pc, #88]	; (8009088 <SD_ioctl+0x5c>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	07db      	lsls	r3, r3, #31
 8009032:	d408      	bmi.n	8009046 <SD_ioctl+0x1a>
{
 8009034:	b510      	push	{r4, lr}
 8009036:	4614      	mov	r4, r2
 8009038:	b08a      	sub	sp, #40	; 0x28

  switch (cmd)
 800903a:	2903      	cmp	r1, #3
 800903c:	d821      	bhi.n	8009082 <SD_ioctl+0x56>
 800903e:	e8df f001 	tbb	[pc, r1]
 8009042:	0704      	.short	0x0704
 8009044:	170f      	.short	0x170f
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009046:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8009048:	4770      	bx	lr
    res = RES_OK;
 800904a:	2000      	movs	r0, #0
}
 800904c:	b00a      	add	sp, #40	; 0x28
 800904e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8009050:	a801      	add	r0, sp, #4
 8009052:	f7fe ff2d 	bl	8007eb0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009056:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 8009058:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800905a:	6023      	str	r3, [r4, #0]
}
 800905c:	b00a      	add	sp, #40	; 0x28
 800905e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8009060:	a801      	add	r0, sp, #4
 8009062:	f7fe ff25 	bl	8007eb0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009066:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 8009068:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 800906a:	8023      	strh	r3, [r4, #0]
}
 800906c:	b00a      	add	sp, #40	; 0x28
 800906e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8009070:	a801      	add	r0, sp, #4
 8009072:	f7fe ff1d 	bl	8007eb0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009076:	9b08      	ldr	r3, [sp, #32]
 8009078:	2000      	movs	r0, #0
 800907a:	0a5b      	lsrs	r3, r3, #9
 800907c:	6023      	str	r3, [r4, #0]
}
 800907e:	b00a      	add	sp, #40	; 0x28
 8009080:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 8009082:	2004      	movs	r0, #4
}
 8009084:	b00a      	add	sp, #40	; 0x28
 8009086:	bd10      	pop	{r4, pc}
 8009088:	20000034 	.word	0x20000034

0800908c <SD_write>:
{
 800908c:	b508      	push	{r3, lr}
 800908e:	4608      	mov	r0, r1
 8009090:	4611      	mov	r1, r2
 8009092:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009098:	f7fe feee 	bl	8007e78 <BSP_SD_WriteBlocks>
 800909c:	b920      	cbnz	r0, 80090a8 <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800909e:	f7fe fefd 	bl	8007e9c <BSP_SD_GetCardState>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d1fb      	bne.n	800909e <SD_write+0x12>
}
 80090a6:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80090a8:	2001      	movs	r0, #1
}
 80090aa:	bd08      	pop	{r3, pc}

080090ac <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80090ac:	b430      	push	{r4, r5}

  hsd1.Instance = SDMMC1;
 80090ae:	4b08      	ldr	r3, [pc, #32]	; (80090d0 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80090b0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hsd1.Instance = SDMMC1;
 80090b4:	4d07      	ldr	r5, [pc, #28]	; (80090d4 <MX_SDMMC1_SD_Init+0x28>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80090b6:	2200      	movs	r2, #0
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 16;
 80090b8:	2010      	movs	r0, #16
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80090ba:	2101      	movs	r1, #1
  hsd1.Instance = SDMMC1;
 80090bc:	601d      	str	r5, [r3, #0]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80090be:	60dc      	str	r4, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80090c0:	611a      	str	r2, [r3, #16]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80090c2:	e9c3 0105 	strd	r0, r1, [r3, #20]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80090c6:	e9c3 2201 	strd	r2, r2, [r3, #4]

}
 80090ca:	bc30      	pop	{r4, r5}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20019b54 	.word	0x20019b54
 80090d4:	52007000 	.word	0x52007000

080090d8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80090d8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 80090da:	4b2b      	ldr	r3, [pc, #172]	; (8009188 <HAL_SD_MspInit+0xb0>)
{
 80090dc:	b089      	sub	sp, #36	; 0x24
  if(sdHandle->Instance==SDMMC1)
 80090de:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090e0:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 80090e2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090e4:	9407      	str	r4, [sp, #28]
 80090e6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80090ea:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(sdHandle->Instance==SDMMC1)
 80090ee:	d001      	beq.n	80090f4 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80090f0:	b009      	add	sp, #36	; 0x24
 80090f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80090f4:	4b25      	ldr	r3, [pc, #148]	; (800918c <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80090f6:	260c      	movs	r6, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80090f8:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80090fc:	2501      	movs	r5, #1
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80090fe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009102:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009104:	eb0d 0106 	add.w	r1, sp, r6
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8009108:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800910c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8009110:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009114:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8009118:	9200      	str	r2, [sp, #0]
 800911a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800911c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009120:	f042 0204 	orr.w	r2, r2, #4
 8009124:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009128:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800912c:	f002 0204 	and.w	r2, r2, #4
 8009130:	9201      	str	r2, [sp, #4]
 8009132:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009134:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009138:	f042 0208 	orr.w	r2, r2, #8
 800913c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8009144:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009146:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800914a:	4811      	ldr	r0, [pc, #68]	; (8009190 <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800914c:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800914e:	9302      	str	r3, [sp, #8]
 8009150:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8009152:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009154:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009158:	f7f9 fafe 	bl	8002758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800915c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800915e:	eb0d 0106 	add.w	r1, sp, r6
 8009162:	480c      	ldr	r0, [pc, #48]	; (8009194 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009164:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009166:	e9cd 7504 	strd	r7, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800916a:	e9cd 5606 	strd	r5, r6, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800916e:	f7f9 faf3 	bl	8002758 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 8009172:	4622      	mov	r2, r4
 8009174:	2107      	movs	r1, #7
 8009176:	2031      	movs	r0, #49	; 0x31
 8009178:	f7f7 fecc 	bl	8000f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800917c:	2031      	movs	r0, #49	; 0x31
 800917e:	f7f7 feff 	bl	8000f80 <HAL_NVIC_EnableIRQ>
}
 8009182:	b009      	add	sp, #36	; 0x24
 8009184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009186:	bf00      	nop
 8009188:	52007000 	.word	0x52007000
 800918c:	58024400 	.word	0x58024400
 8009190:	58020800 	.word	0x58020800
 8009194:	58020c00 	.word	0x58020c00

08009198 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009198:	b538      	push	{r3, r4, r5, lr}

  hspi1.Instance = SPI1;
 800919a:	4a14      	ldr	r2, [pc, #80]	; (80091ec <MX_SPI1_Init+0x54>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800919c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  hspi1.Instance = SPI1;
 80091a0:	4b13      	ldr	r3, [pc, #76]	; (80091f0 <MX_SPI1_Init+0x58>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80091a2:	2507      	movs	r5, #7
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80091a4:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80091a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hspi1.Instance = SPI1;
 80091ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80091ae:	2200      	movs	r2, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80091b0:	6058      	str	r0, [r3, #4]
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80091b2:	4618      	mov	r0, r3
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80091b4:	60dd      	str	r5, [r3, #12]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80091b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80091b8:	e9c3 4106 	strd	r4, r1, [r3, #24]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80091bc:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80091c0:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 80091c4:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80091c8:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80091cc:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80091d0:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80091d4:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80091d8:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80091dc:	f7fd f8ee 	bl	80063bc <HAL_SPI_Init>
 80091e0:	b900      	cbnz	r0, 80091e4 <MX_SPI1_Init+0x4c>
  {
    Error_Handler();
  }

}
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80091e8:	f7ff bdc6 	b.w	8008d78 <Error_Handler>
 80091ec:	40013000 	.word	0x40013000
 80091f0:	20019cd4 	.word	0x20019cd4

080091f4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80091f4:	b538      	push	{r3, r4, r5, lr}

  hspi2.Instance = SPI2;
 80091f6:	4b12      	ldr	r3, [pc, #72]	; (8009240 <MX_SPI2_Init+0x4c>)
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80091f8:	2200      	movs	r2, #0
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80091fa:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  hspi2.Instance = SPI2;
 80091fe:	4d11      	ldr	r5, [pc, #68]	; (8009244 <MX_SPI2_Init+0x50>)
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009200:	2107      	movs	r1, #7
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009202:	4618      	mov	r0, r3
  hspi2.Instance = SPI2;
 8009204:	601d      	str	r5, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8009206:	605a      	str	r2, [r3, #4]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8009208:	619a      	str	r2, [r3, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800920a:	e9c3 4102 	strd	r4, r1, [r3, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800920e:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009212:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi2.Init.CRCPolynomial = 0x0;
 8009216:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800921a:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800921e:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8009222:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8009226:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800922a:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800922e:	f7fd f8c5 	bl	80063bc <HAL_SPI_Init>
 8009232:	b900      	cbnz	r0, 8009236 <MX_SPI2_Init+0x42>
  {
    Error_Handler();
  }

}
 8009234:	bd38      	pop	{r3, r4, r5, pc}
 8009236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800923a:	f7ff bd9d 	b.w	8008d78 <Error_Handler>
 800923e:	bf00      	nop
 8009240:	20019bd4 	.word	0x20019bd4
 8009244:	40003800 	.word	0x40003800

08009248 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800924c:	4a62      	ldr	r2, [pc, #392]	; (80093d8 <HAL_SPI_MspInit+0x190>)
{
 800924e:	b08a      	sub	sp, #40	; 0x28
  if(spiHandle->Instance==SPI1)
 8009250:	6803      	ldr	r3, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009252:	2400      	movs	r4, #0
{
 8009254:	4606      	mov	r6, r0
  if(spiHandle->Instance==SPI1)
 8009256:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009258:	9409      	str	r4, [sp, #36]	; 0x24
 800925a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800925e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8009262:	d005      	beq.n	8009270 <HAL_SPI_MspInit+0x28>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8009264:	4a5d      	ldr	r2, [pc, #372]	; (80093dc <HAL_SPI_MspInit+0x194>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d064      	beq.n	8009334 <HAL_SPI_MspInit+0xec>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800926a:	b00a      	add	sp, #40	; 0x28
 800926c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009270:	4b5b      	ldr	r3, [pc, #364]	; (80093e0 <HAL_SPI_MspInit+0x198>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009272:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009274:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009276:	f04f 0805 	mov.w	r8, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 800927a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800927e:	a905      	add	r1, sp, #20
    hdma_spi1_tx.Instance = DMA2_Stream0;
 8009280:	4d58      	ldr	r5, [pc, #352]	; (80093e4 <HAL_SPI_MspInit+0x19c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009282:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009286:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800928a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800928e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009292:	9200      	str	r2, [sp, #0]
 8009294:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009296:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800929a:	f042 0208 	orr.w	r2, r2, #8
 800929e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80092a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80092a6:	f002 0208 	and.w	r2, r2, #8
 80092aa:	9201      	str	r2, [sp, #4]
 80092ac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80092ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80092b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80092ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80092be:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80092c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80092c4:	4848      	ldr	r0, [pc, #288]	; (80093e8 <HAL_SPI_MspInit+0x1a0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092c6:	9706      	str	r7, [sp, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80092c8:	9302      	str	r3, [sp, #8]
 80092ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80092cc:	e9cd 7808 	strd	r7, r8, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80092d0:	f7f9 fa42 	bl	8002758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80092d4:	f44f 6360 	mov.w	r3, #3584	; 0xe00
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80092d8:	a905      	add	r1, sp, #20
 80092da:	4844      	ldr	r0, [pc, #272]	; (80093ec <HAL_SPI_MspInit+0x1a4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092dc:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80092de:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092e0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80092e2:	e9cd 7808 	strd	r7, r8, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80092e6:	f7f9 fa37 	bl	8002758 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80092ea:	2726      	movs	r7, #38	; 0x26
    hdma_spi1_tx.Instance = DMA2_Stream0;
 80092ec:	f8df c10c 	ldr.w	ip, [pc, #268]	; 80093fc <HAL_SPI_MspInit+0x1b4>
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80092f0:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80092f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80092f6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80092fa:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80092fc:	60ec      	str	r4, [r5, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80092fe:	616c      	str	r4, [r5, #20]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009300:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009302:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009304:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009306:	622b      	str	r3, [r5, #32]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8009308:	e9c5 4406 	strd	r4, r4, [r5, #24]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800930c:	e9c5 c700 	strd	ip, r7, [r5]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8009310:	f7f7 ff24 	bl	800115c <HAL_DMA_Init>
 8009314:	b108      	cbz	r0, 800931a <HAL_SPI_MspInit+0xd2>
      Error_Handler();
 8009316:	f7ff fd2f 	bl	8008d78 <Error_Handler>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800931a:	2200      	movs	r2, #0
 800931c:	2102      	movs	r1, #2
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800931e:	67b5      	str	r5, [r6, #120]	; 0x78
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8009320:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8009322:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8009324:	f7f7 fdf6 	bl	8000f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8009328:	2023      	movs	r0, #35	; 0x23
 800932a:	f7f7 fe29 	bl	8000f80 <HAL_NVIC_EnableIRQ>
}
 800932e:	b00a      	add	sp, #40	; 0x28
 8009330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009334:	4b2a      	ldr	r3, [pc, #168]	; (80093e0 <HAL_SPI_MspInit+0x198>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009336:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8009338:	f44f 4530 	mov.w	r5, #45056	; 0xb000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800933c:	a905      	add	r1, sp, #20
    __HAL_RCC_SPI2_CLK_ENABLE();
 800933e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8009342:	f44f 7780 	mov.w	r7, #256	; 0x100
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800934a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800934e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8009352:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8009356:	9203      	str	r2, [sp, #12]
 8009358:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800935a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800935e:	4302      	orrs	r2, r0
 8009360:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009364:	2205      	movs	r2, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800936a:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800936c:	4003      	ands	r3, r0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800936e:	9008      	str	r0, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009370:	481f      	ldr	r0, [pc, #124]	; (80093f0 <HAL_SPI_MspInit+0x1a8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009372:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8009374:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009376:	9b04      	ldr	r3, [sp, #16]
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8009378:	4d1e      	ldr	r5, [pc, #120]	; (80093f4 <HAL_SPI_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800937a:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800937c:	f7f9 f9ec 	bl	8002758 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8009380:	4b1d      	ldr	r3, [pc, #116]	; (80093f8 <HAL_SPI_MspInit+0x1b0>)
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009382:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8009386:	f04f 0c27 	mov.w	ip, #39	; 0x27
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800938a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800938e:	2204      	movs	r2, #4
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8009390:	602b      	str	r3, [r5, #0]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8009392:	2301      	movs	r3, #1
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009394:	6128      	str	r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8009396:	4628      	mov	r0, r5
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009398:	60ac      	str	r4, [r5, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800939a:	60ec      	str	r4, [r5, #12]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800939c:	f8c5 c004 	str.w	ip, [r5, #4]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80093a0:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80093a4:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80093a8:	e9c5 7107 	strd	r7, r1, [r5, #28]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80093ac:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80093b0:	f7f7 fed4 	bl	800115c <HAL_DMA_Init>
 80093b4:	b960      	cbnz	r0, 80093d0 <HAL_SPI_MspInit+0x188>
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 80093b6:	2200      	movs	r2, #0
 80093b8:	2103      	movs	r1, #3
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80093ba:	67f5      	str	r5, [r6, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 80093bc:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80093be:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 80093c0:	f7f7 fda8 	bl	8000f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80093c4:	2024      	movs	r0, #36	; 0x24
 80093c6:	f7f7 fddb 	bl	8000f80 <HAL_NVIC_EnableIRQ>
}
 80093ca:	b00a      	add	sp, #40	; 0x28
 80093cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 80093d0:	f7ff fcd2 	bl	8008d78 <Error_Handler>
 80093d4:	e7ef      	b.n	80093b6 <HAL_SPI_MspInit+0x16e>
 80093d6:	bf00      	nop
 80093d8:	40013000 	.word	0x40013000
 80093dc:	40003800 	.word	0x40003800
 80093e0:	58024400 	.word	0x58024400
 80093e4:	20019d5c 	.word	0x20019d5c
 80093e8:	58020c00 	.word	0x58020c00
 80093ec:	58021800 	.word	0x58021800
 80093f0:	58020400 	.word	0x58020400
 80093f4:	20019c5c 	.word	0x20019c5c
 80093f8:	40020058 	.word	0x40020058
 80093fc:	40020410 	.word	0x40020410

08009400 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009400:	4b07      	ldr	r3, [pc, #28]	; (8009420 <HAL_MspInit+0x20>)
{
 8009402:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009404:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8009408:	f042 0202 	orr.w	r2, r2, #2
 800940c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8009410:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009414:	f003 0302 	and.w	r3, r3, #2
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800941c:	b002      	add	sp, #8
 800941e:	4770      	bx	lr
 8009420:	58024400 	.word	0x58024400

08009424 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop

08009428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009428:	e7fe      	b.n	8009428 <HardFault_Handler>
 800942a:	bf00      	nop

0800942c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800942c:	e7fe      	b.n	800942c <MemManage_Handler>
 800942e:	bf00      	nop

08009430 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009430:	e7fe      	b.n	8009430 <BusFault_Handler>
 8009432:	bf00      	nop

08009434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009434:	e7fe      	b.n	8009434 <UsageFault_Handler>
 8009436:	bf00      	nop

08009438 <SVC_Handler>:
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop

0800943c <DebugMon_Handler>:
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop

08009440 <PendSV_Handler>:
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop

08009444 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009444:	f7f6 bfa0 	b.w	8000388 <HAL_IncTick>

08009448 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009448:	4801      	ldr	r0, [pc, #4]	; (8009450 <DMA1_Stream0_IRQHandler+0x8>)
 800944a:	f7f8 bd65 	b.w	8001f18 <HAL_DMA_IRQHandler>
 800944e:	bf00      	nop
 8009450:	200001a0 	.word	0x200001a0

08009454 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8009454:	4801      	ldr	r0, [pc, #4]	; (800945c <DMA1_Stream1_IRQHandler+0x8>)
 8009456:	f7f8 bd5f 	b.w	8001f18 <HAL_DMA_IRQHandler>
 800945a:	bf00      	nop
 800945c:	200199cc 	.word	0x200199cc

08009460 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8009460:	4801      	ldr	r0, [pc, #4]	; (8009468 <DMA1_Stream2_IRQHandler+0x8>)
 8009462:	f7f8 bd59 	b.w	8001f18 <HAL_DMA_IRQHandler>
 8009466:	bf00      	nop
 8009468:	20019a44 	.word	0x20019a44

0800946c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800946c:	4801      	ldr	r0, [pc, #4]	; (8009474 <DMA1_Stream3_IRQHandler+0x8>)
 800946e:	f7f8 bd53 	b.w	8001f18 <HAL_DMA_IRQHandler>
 8009472:	bf00      	nop
 8009474:	20019c5c 	.word	0x20019c5c

08009478 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8009478:	4801      	ldr	r0, [pc, #4]	; (8009480 <SPI1_IRQHandler+0x8>)
 800947a:	f7fd bbc9 	b.w	8006c10 <HAL_SPI_IRQHandler>
 800947e:	bf00      	nop
 8009480:	20019cd4 	.word	0x20019cd4

08009484 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8009484:	4801      	ldr	r0, [pc, #4]	; (800948c <SPI2_IRQHandler+0x8>)
 8009486:	f7fd bbc3 	b.w	8006c10 <HAL_SPI_IRQHandler>
 800948a:	bf00      	nop
 800948c:	20019bd4 	.word	0x20019bd4

08009490 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8009490:	4801      	ldr	r0, [pc, #4]	; (8009498 <SDMMC1_IRQHandler+0x8>)
 8009492:	f7fc bd85 	b.w	8005fa0 <HAL_SD_IRQHandler>
 8009496:	bf00      	nop
 8009498:	20019b54 	.word	0x20019b54

0800949c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800949c:	4801      	ldr	r0, [pc, #4]	; (80094a4 <DMA2_Stream0_IRQHandler+0x8>)
 800949e:	f7f8 bd3b 	b.w	8001f18 <HAL_DMA_IRQHandler>
 80094a2:	bf00      	nop
 80094a4:	20019d5c 	.word	0x20019d5c

080094a8 <_exit>:
	errno = EINVAL;
	return -1;
}

void _exit (int status)
{
 80094a8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80094aa:	f000 fc53 	bl	8009d54 <__errno>
 80094ae:	2316      	movs	r3, #22
 80094b0:	6003      	str	r3, [r0, #0]
 80094b2:	e7fe      	b.n	80094b2 <_exit+0xa>

080094b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80094b4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094b6:	1e16      	subs	r6, r2, #0
 80094b8:	dd07      	ble.n	80094ca <_read+0x16>
 80094ba:	460c      	mov	r4, r1
 80094bc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80094be:	f3af 8000 	nop.w
 80094c2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094c6:	42a5      	cmp	r5, r4
 80094c8:	d1f9      	bne.n	80094be <_read+0xa>
	}

return len;
}
 80094ca:	4630      	mov	r0, r6
 80094cc:	bd70      	pop	{r4, r5, r6, pc}
 80094ce:	bf00      	nop

080094d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80094d0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094d2:	1e16      	subs	r6, r2, #0
 80094d4:	dd07      	ble.n	80094e6 <_write+0x16>
 80094d6:	460c      	mov	r4, r1
 80094d8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80094da:	f814 0b01 	ldrb.w	r0, [r4], #1
 80094de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094e2:	42ac      	cmp	r4, r5
 80094e4:	d1f9      	bne.n	80094da <_write+0xa>
	}
	return len;
}
 80094e6:	4630      	mov	r0, r6
 80094e8:	bd70      	pop	{r4, r5, r6, pc}
 80094ea:	bf00      	nop

080094ec <_close>:

int _close(int file)
{
	return -1;
}
 80094ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop

080094f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80094f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80094f8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80094fa:	604b      	str	r3, [r1, #4]
}
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop

08009500 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8009500:	2001      	movs	r0, #1
 8009502:	4770      	bx	lr

08009504 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8009504:	2000      	movs	r0, #0
 8009506:	4770      	bx	lr

08009508 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009508:	4a0c      	ldr	r2, [pc, #48]	; (800953c <_sbrk+0x34>)
{
 800950a:	b508      	push	{r3, lr}
	if (heap_end == 0)
 800950c:	6813      	ldr	r3, [r2, #0]
 800950e:	b133      	cbz	r3, 800951e <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8009510:	4418      	add	r0, r3
 8009512:	4669      	mov	r1, sp
 8009514:	4288      	cmp	r0, r1
 8009516:	d809      	bhi.n	800952c <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8009518:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800951a:	4618      	mov	r0, r3
 800951c:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800951e:	4908      	ldr	r1, [pc, #32]	; (8009540 <_sbrk+0x38>)
 8009520:	460b      	mov	r3, r1
 8009522:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8009524:	4669      	mov	r1, sp
 8009526:	4418      	add	r0, r3
 8009528:	4288      	cmp	r0, r1
 800952a:	d9f5      	bls.n	8009518 <_sbrk+0x10>
		errno = ENOMEM;
 800952c:	f000 fc12 	bl	8009d54 <__errno>
 8009530:	220c      	movs	r2, #12
		return (caddr_t) -1;
 8009532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		errno = ENOMEM;
 8009536:	6002      	str	r2, [r0, #0]
}
 8009538:	4618      	mov	r0, r3
 800953a:	bd08      	pop	{r3, pc}
 800953c:	2000012c 	.word	0x2000012c
 8009540:	20019dd8 	.word	0x20019dd8

08009544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009544:	b430      	push	{r4, r5}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009546:	4c19      	ldr	r4, [pc, #100]	; (80095ac <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009548:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 800954a:	4b19      	ldr	r3, [pc, #100]	; (80095b0 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800954c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009550:	4818      	ldr	r0, [pc, #96]	; (80095b4 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009552:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009556:	4d18      	ldr	r5, [pc, #96]	; (80095b8 <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009558:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800955c:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800955e:	4917      	ldr	r1, [pc, #92]	; (80095bc <SystemInit+0x78>)
  RCC->CR |= RCC_CR_HSION;
 8009560:	f044 0401 	orr.w	r4, r4, #1
 8009564:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 8009566:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8009568:	681c      	ldr	r4, [r3, #0]
 800956a:	4020      	ands	r0, r4
 800956c:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 800956e:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8009570:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8009572:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8009574:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 8009576:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8009578:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800957a:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 800957c:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800957e:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8009580:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8009582:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800958a:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800958c:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800958e:	682b      	ldr	r3, [r5, #0]
 8009590:	4019      	ands	r1, r3
 8009592:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8009596:	d202      	bcs.n	800959e <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009598:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <SystemInit+0x7c>)
 800959a:	2201      	movs	r2, #1
 800959c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800959e:	4b03      	ldr	r3, [pc, #12]	; (80095ac <SystemInit+0x68>)
 80095a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80095a4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80095a6:	bc30      	pop	{r4, r5}
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	e000ed00 	.word	0xe000ed00
 80095b0:	58024400 	.word	0x58024400
 80095b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80095b8:	5c001000 	.word	0x5c001000
 80095bc:	ffff0000 	.word	0xffff0000
 80095c0:	51008108 	.word	0x51008108

080095c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80095c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80095fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80095c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80095ca:	e003      	b.n	80095d4 <LoopCopyDataInit>

080095cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80095cc:	4b0c      	ldr	r3, [pc, #48]	; (8009600 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80095ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80095d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80095d2:	3104      	adds	r1, #4

080095d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80095d4:	480b      	ldr	r0, [pc, #44]	; (8009604 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80095d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80095da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80095dc:	d3f6      	bcc.n	80095cc <CopyDataInit>
  ldr  r2, =_sbss
 80095de:	4a0b      	ldr	r2, [pc, #44]	; (800960c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80095e0:	e002      	b.n	80095e8 <LoopFillZerobss>

080095e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80095e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80095e4:	f842 3b04 	str.w	r3, [r2], #4

080095e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80095e8:	4b09      	ldr	r3, [pc, #36]	; (8009610 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80095ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80095ec:	d3f9      	bcc.n	80095e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80095ee:	f7ff ffa9 	bl	8009544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80095f2:	f000 fc25 	bl	8009e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80095f6:	f7ff f849 	bl	800868c <main>
  bx  lr    
 80095fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80095fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009600:	0800c4a0 	.word	0x0800c4a0
  ldr  r0, =_sdata
 8009604:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009608:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 800960c:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8009610:	20019dd8 	.word	0x20019dd8

08009614 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009614:	e7fe      	b.n	8009614 <ADC3_IRQHandler>
	...

08009618 <tThreshold_init>:
}



void tThreshold_init (tThreshold* const th, float low, float high, LEAF* const leaf)
{
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	ed2d 8b02 	vpush	{d8}
	tThreshold_initToPool(th, low, high, &leaf->mempool);
}

void tThreshold_initToPool (tThreshold* const th, float low, float high, tMempool* const mp)
{
    _tMempool* m = *mp;
 800961e:	698c      	ldr	r4, [r1, #24]
{
 8009620:	eeb0 8a40 	vmov.f32	s16, s0
 8009624:	eef0 8a60 	vmov.f32	s17, s1
 8009628:	4605      	mov	r5, r0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 800962a:	4621      	mov	r1, r4
 800962c:	2010      	movs	r0, #16
 800962e:	f000 fb45 	bl	8009cbc <mpool_alloc>
    t->mempool = m;
    
    t->highThresh = high;
    t->lowThresh = low;

    t->currentValue = 0;
 8009632:	2300      	movs	r3, #0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 8009634:	6028      	str	r0, [r5, #0]
    t->mempool = m;
 8009636:	6004      	str	r4, [r0, #0]
    t->highThresh = high;
 8009638:	edc0 8a01 	vstr	s17, [r0, #4]
    t->lowThresh = low;
 800963c:	ed80 8a02 	vstr	s16, [r0, #8]
    t->currentValue = 0;
 8009640:	60c3      	str	r3, [r0, #12]
}
 8009642:	ecbd 8b02 	vpop	{d8}
 8009646:	bd38      	pop	{r3, r4, r5, pc}

08009648 <tThreshold_tick>:
    mpool_free((char*)t, t->mempool);
}

int tThreshold_tick(tThreshold* const th, float in)
{
    _tThreshold* t = *th;
 8009648:	6803      	ldr	r3, [r0, #0]

    if (in >= t->highThresh)
 800964a:	edd3 7a01 	vldr	s15, [r3, #4]
 800964e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8009652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009656:	d90c      	bls.n	8009672 <tThreshold_tick+0x2a>
    {
    	t->currentValue = 1;
    }
    else if (in <= t->lowThresh)
 8009658:	edd3 7a02 	vldr	s15, [r3, #8]
 800965c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8009660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009664:	db03      	blt.n	800966e <tThreshold_tick+0x26>
	{
    	t->currentValue = 0;
 8009666:	2200      	movs	r2, #0
 8009668:	4610      	mov	r0, r2
 800966a:	60da      	str	r2, [r3, #12]
	}

    return t->currentValue;
}
 800966c:	4770      	bx	lr
 800966e:	68d8      	ldr	r0, [r3, #12]
 8009670:	4770      	bx	lr
    	t->currentValue = 1;
 8009672:	2001      	movs	r0, #1
 8009674:	60d8      	str	r0, [r3, #12]
 8009676:	4770      	bx	lr

08009678 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	ed2d 8b02 	vpush	{d8}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 800967e:	698c      	ldr	r4, [r1, #24]
{
 8009680:	4605      	mov	r5, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8009682:	201c      	movs	r0, #28
{
 8009684:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8009688:	4621      	mov	r1, r4
{
 800968a:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800968e:	f000 fb15 	bl	8009cbc <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8009692:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8009696:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8009698:	6028      	str	r0, [r5, #0]
    s->mempool = m;
 800969a:	6004      	str	r4, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 800969c:	fec8 8aa7 	vmaxnm.f32	s17, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 80096a0:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 80096a4:	eec7 6aa8 	vdiv.f32	s13, s15, s17
    s->prevIn = 0.0f;
 80096a8:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 80096aa:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 80096ac:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 80096ae:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 80096b0:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 80096b4:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 80096b8:	ed80 7a05 	vstr	s14, [r0, #20]
}
 80096bc:	ecbd 8b02 	vpop	{d8}
 80096c0:	bd38      	pop	{r3, r4, r5, pc}
 80096c2:	bf00      	nop

080096c4 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 80096c4:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 80096c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80096ca:	eef4 7ac0 	vcmpe.f32	s15, s0
 80096ce:	ee30 7a67 	vsub.f32	s14, s0, s15
 80096d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 80096d6:	bf94      	ite	ls
 80096d8:	edd3 6a04 	vldrls	s13, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 80096dc:	edd3 6a05 	vldrhi	s13, [r3, #20]
 80096e0:	eee6 7a87 	vfma.f32	s15, s13, s14
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 80096e4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009720 <tSlide_tick+0x5c>
 80096e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f0:	d50c      	bpl.n	800970c <tSlide_tick+0x48>
 80096f2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009724 <tSlide_tick+0x60>
#endif
    s->prevIn = in;
 80096f6:	ed83 0a03 	vstr	s0, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 80096fa:	eef0 7a47 	vmov.f32	s15, s14
 80096fe:	ed83 7a02 	vstr	s14, [r3, #8]
    s->prevOut = s->currentOut;
    return s->currentOut;
}
 8009702:	eeb0 0a67 	vmov.f32	s0, s15
    s->prevOut = s->currentOut;
 8009706:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800970a:	4770      	bx	lr
    s->prevIn = in;
 800970c:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8009710:	eeb0 0a67 	vmov.f32	s0, s15
 8009714:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 8009718:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	006ce3ee 	.word	0x006ce3ee
 8009724:	00000000 	.word	0x00000000

08009728 <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 800972e:	698c      	ldr	r4, [r1, #24]
{
 8009730:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8009732:	2018      	movs	r0, #24
{
 8009734:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8009738:	4621      	mov	r1, r4
 800973a:	f000 facb 	bl	8009cd4 <mpool_calloc>
 800973e:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8009740:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8009742:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8009746:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8009748:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800974a:	ed92 7a03 	vldr	s14, [r2, #12]
    f->xs = 0.0f;
    
    f->frequency = freq;
 800974e:	ed80 8a04 	vstr	s16, [r0, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8009752:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8009756:	ed80 7a05 	vstr	s14, [r0, #20]
    f->ys = 0.0f;
 800975a:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 800975c:	6043      	str	r3, [r0, #4]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800975e:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8009762:	ecbd 8b02 	vpop	{d8}
 8009766:	bd38      	pop	{r3, r4, r5, pc}

08009768 <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8009768:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 800976a:	edd3 7a01 	vldr	s15, [r3, #4]
 800976e:	ed93 7a02 	vldr	s14, [r3, #8]
 8009772:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8009776:	ed83 0a01 	vstr	s0, [r3, #4]
    f->ys = x - f->xs + f->R * f->ys;
 800977a:	eed6 7a87 	vfnms.f32	s15, s13, s14
 800977e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009782:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8009786:	4770      	bx	lr

08009788 <tVZFilter_init>:
}

/////

void    tVZFilter_init  (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth, LEAF* const leaf)
{
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	ed2d 8b04 	vpush	{d8-d9}
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
}

void    tVZFilter_initToPool     (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth, tMempool* const mp)
{
    _tMempool* m = *mp;
 800978e:	6995      	ldr	r5, [r2, #24]
{
 8009790:	4606      	mov	r6, r0
 8009792:	460f      	mov	r7, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8009794:	2044      	movs	r0, #68	; 0x44
 8009796:	4629      	mov	r1, r5
{
 8009798:	eef0 8a60 	vmov.f32	s17, s1
 800979c:	eeb0 9a40 	vmov.f32	s18, s0
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 80097a0:	f000 fa8c 	bl	8009cbc <mpool_alloc>
 80097a4:	6030      	str	r0, [r6, #0]
    
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80097a6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    f->mempool = m;
 80097aa:	6005      	str	r5, [r0, #0]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 80097ac:	4604      	mov	r4, r0
    LEAF* leaf = f->mempool->leaf;
 80097ae:	686b      	ldr	r3, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80097b0:	eef0 0a49 	vmov.f32	s1, s18
 80097b4:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 8009adc <tVZFilter_init+0x354>
    f->sampleRate = leaf->sampleRate;
 80097b8:	edd3 7a00 	vldr	s15, [r3]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80097bc:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
 80097c0:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80097c4:	ee27 1a81 	vmul.f32	s2, s15, s2
    f->invSampleRate = leaf->invSampleRate;
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	6403      	str	r3, [r0, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80097cc:	f000 fa0e 	bl	8009bec <LEAF_clip>
    f->type = type;
    f->G    = ONE_OVER_SQRT2;
    f->invG = 1.0f/ONE_OVER_SQRT2;
 80097d0:	4bbe      	ldr	r3, [pc, #760]	; (8009acc <tVZFilter_init+0x344>)
    f->G    = ONE_OVER_SQRT2;
 80097d2:	4abf      	ldr	r2, [pc, #764]	; (8009ad0 <tVZFilter_init+0x348>)
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80097d4:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->B    = bandWidth;
 80097d8:	edc4 8a0d 	vstr	s17, [r4, #52]	; 0x34
    f->m    = 0.0f;
 80097dc:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
    f->s1 = 0.0f;
 80097e0:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2 = 0.0f;
 80097e4:	ed84 8a03 	vstr	s16, [r4, #12]
    f->invG = 1.0f/ONE_OVER_SQRT2;
 80097e8:	6323      	str	r3, [r4, #48]	; 0x30
    f->type = type;
 80097ea:	7127      	strb	r7, [r4, #4]
    f->G    = ONE_OVER_SQRT2;
 80097ec:	62e2      	str	r2, [r4, #44]	; 0x2c
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
    _tVZFilter* f = *vf;
 80097ee:	6834      	ldr	r4, [r6, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80097f0:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8009ad4 <tVZFilter_init+0x34c>
 80097f4:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 80097f8:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 80097fc:	ee28 8a07 	vmul.f32	s16, s16, s14
 8009800:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009804:	eeb0 0a48 	vmov.f32	s0, s16
 8009808:	f001 f99c 	bl	800ab44 <tanf>
    
    switch( f->type )
 800980c:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800980e:	eef0 8a40 	vmov.f32	s17, s0
 8009812:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8009816:	2b0a      	cmp	r3, #10
 8009818:	f200 81b2 	bhi.w	8009b80 <tVZFilter_init+0x3f8>
 800981c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009820:	005e0053 	.word	0x005e0053
 8009824:	00740069 	.word	0x00740069
 8009828:	00e300ab 	.word	0x00e300ab
 800982c:	01360116 	.word	0x01360116
 8009830:	01a50160 	.word	0x01a50160
 8009834:	000b      	.short	0x000b
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009836:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800983a:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800983e:	6835      	ldr	r5, [r6, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009840:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009844:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009848:	f001 f83e 	bl	800a8c8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800984c:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8009850:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8009854:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8009ad4 <tVZFilter_init+0x34c>
 8009858:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800985c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009860:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009864:	f001 f96e 	bl	800ab44 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009868:	ed95 7a04 	vldr	s14, [r5, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800986c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009870:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8009874:	edc4 7a07 	vstr	s15, [r4, #28]
 8009878:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800987c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009880:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009884:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009888:	ee20 0a07 	vmul.f32	s0, s0, s14
 800988c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009890:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8009894:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8009898:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800989c:	eeb1 7a67 	vneg.f32	s14, s15
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 80098a0:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80098a4:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 80098a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098ac:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80098b0:	eef0 6a47 	vmov.f32	s13, s14
 80098b4:	eee7 6aa8 	vfma.f32	s13, s15, s17
 80098b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80098bc:	edc4 7a06 	vstr	s15, [r4, #24]
}
 80098c0:	ecbd 8b04 	vpop	{d8-d9}
 80098c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80098c6:	2300      	movs	r3, #0
 80098c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 80098cc:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80098d0:	6262      	str	r2, [r4, #36]	; 0x24
            f->R2 = f->invG;
 80098d2:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80098d6:	61e3      	str	r3, [r4, #28]
 80098d8:	6223      	str	r3, [r4, #32]
 80098da:	e7e5      	b.n	80098a8 <tVZFilter_init+0x120>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80098dc:	2300      	movs	r3, #0
 80098de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 80098e2:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80098e6:	61e2      	str	r2, [r4, #28]
            f->R2 = f->invG;
 80098e8:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80098ec:	6223      	str	r3, [r4, #32]
 80098ee:	6263      	str	r3, [r4, #36]	; 0x24
 80098f0:	e7da      	b.n	80098a8 <tVZFilter_init+0x120>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80098f2:	2300      	movs	r3, #0
 80098f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 80098f8:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80098fc:	6222      	str	r2, [r4, #32]
            f->R2 = f->invG;
 80098fe:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8009902:	61e3      	str	r3, [r4, #28]
 8009904:	6263      	str	r3, [r4, #36]	; 0x24
 8009906:	e7cf      	b.n	80098a8 <tVZFilter_init+0x120>
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009908:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800990c:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 8009910:	6835      	ldr	r5, [r6, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009912:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009916:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800991a:	f000 ffd5 	bl	800a8c8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800991e:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8009922:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8009926:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8009ad4 <tVZFilter_init+0x34c>
 800992a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800992e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009932:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009936:	f001 f905 	bl	800ab44 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800993a:	ed95 7a04 	vldr	s14, [r5, #16]
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800993e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8009942:	2300      	movs	r3, #0
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009944:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8009948:	61e3      	str	r3, [r4, #28]
 800994a:	6263      	str	r3, [r4, #36]	; 0x24
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800994c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009950:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009954:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009958:	ee20 0a07 	vmul.f32	s0, s0, s14
 800995c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009960:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8009964:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8009968:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800996c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8009970:	edc4 7a08 	vstr	s15, [r4, #32]
 8009974:	e798      	b.n	80098a8 <tVZFilter_init+0x120>
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009976:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800997a:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800997e:	6835      	ldr	r5, [r6, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009980:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009984:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009988:	f000 ff9e 	bl	800a8c8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800998c:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8009990:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8009994:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8009ad4 <tVZFilter_init+0x34c>
 8009998:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800999c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099a0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80099a4:	f001 f8ce 	bl	800ab44 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80099a8:	ed95 7a04 	vldr	s14, [r5, #16]
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80099ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80099b0:	2300      	movs	r3, #0
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80099b2:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80099b6:	6223      	str	r3, [r4, #32]
 80099b8:	edc4 7a07 	vstr	s15, [r4, #28]
 80099bc:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80099c0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80099c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80099c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80099cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80099d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80099d4:	ee87 7a80 	vdiv.f32	s14, s15, s0
 80099d8:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 80099dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80099e0:	edc4 7a05 	vstr	s15, [r4, #20]
 80099e4:	e760      	b.n	80098a8 <tVZFilter_init+0x120>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80099e6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80099ea:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 80099ee:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80099f2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80099f6:	f000 ff67 	bl	800a8c8 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80099fa:	ee28 0a00 	vmul.f32	s0, s16, s0
 80099fe:	f001 f8a1 	bl	800ab44 <tanf>
            float r  = f->g/wl;
 8009a02:	ee88 0a80 	vdiv.f32	s0, s17, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8009a06:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8009a0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009a0e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009a12:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8009a16:	edc4 7a07 	vstr	s15, [r4, #28]
 8009a1a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8009a1e:	ee67 6a26 	vmul.f32	s13, s14, s13
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8009a22:	ee20 0a00 	vmul.f32	s0, s0, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8009a26:	eee0 7a00 	vfma.f32	s15, s0, s0
 8009a2a:	ee87 6a80 	vdiv.f32	s12, s15, s0
 8009a2e:	ee76 7a65 	vsub.f32	s15, s12, s11
 8009a32:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8009a36:	eef1 7ac6 	vsqrt.f32	s15, s12
 8009a3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8009a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8009a42:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8009a46:	ed84 7a08 	vstr	s14, [r4, #32]
 8009a4a:	e72d      	b.n	80098a8 <tVZFilter_init+0x120>
            float A = sqrtf(f->G);
 8009a4c:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8009a50:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8009a54:	eddf 7a20 	vldr	s15, [pc, #128]	; 8009ad8 <tVZFilter_init+0x350>
            float A = sqrtf(f->G);
 8009a58:	eeb1 8ac9 	vsqrt.f32	s16, s18
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8009a5c:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8009a60:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009a64:	eef1 7ac8 	vsqrt.f32	s15, s16
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8009a68:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 8009a6c:	edc4 8a04 	vstr	s17, [r4, #16]
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8009a70:	f001 f902 	bl	800ac78 <sinhf>
 8009a74:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8009a78:	ed84 9a07 	vstr	s18, [r4, #28]
 8009a7c:	6265      	str	r5, [r4, #36]	; 0x24
 8009a7e:	ee28 8a27 	vmul.f32	s16, s16, s15
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8009a82:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8009a86:	ed84 8a08 	vstr	s16, [r4, #32]
 8009a8a:	e70d      	b.n	80098a8 <tVZFilter_init+0x120>
            float A = sqrtf(f->G);
 8009a8c:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8009a90:	eddf 7a11 	vldr	s15, [pc, #68]	; 8009ad8 <tVZFilter_init+0x350>
            float A = sqrtf(f->G);
 8009a94:	eeb1 8ac9 	vsqrt.f32	s16, s18
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8009a98:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8009a9c:	ee20 0a27 	vmul.f32	s0, s0, s15
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8009aa0:	eef1 7ac8 	vsqrt.f32	s15, s16
 8009aa4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8009aa8:	edc4 8a04 	vstr	s17, [r4, #16]
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8009aac:	f001 f8e4 	bl	800ac78 <sinhf>
 8009ab0:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8009ab4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009ab8:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 8009abc:	ee28 8a27 	vmul.f32	s16, s16, s15
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8009ac0:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8009ac4:	61e3      	str	r3, [r4, #28]
 8009ac6:	ed84 8a08 	vstr	s16, [r4, #32]
 8009aca:	e6ed      	b.n	80098a8 <tVZFilter_init+0x120>
 8009acc:	3fb504f3 	.word	0x3fb504f3
 8009ad0:	3f3504f3 	.word	0x3f3504f3
 8009ad4:	40490fdb 	.word	0x40490fdb
 8009ad8:	3eb17218 	.word	0x3eb17218
 8009adc:	00000000 	.word	0x00000000
            float x  = 2.0f*f->m-1.0f;
 8009ae0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009ae4:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8009ae8:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
            f->R2 = f->invG;
 8009aec:	6b23      	ldr	r3, [r4, #48]	; 0x30
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8009aee:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 8009adc <tVZFilter_init+0x354>
            f->R2 = f->invG;
 8009af2:	6163      	str	r3, [r4, #20]
            float x  = 2.0f*f->m-1.0f;
 8009af4:	eea7 8a27 	vfma.f32	s16, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8009af8:	eef1 8a48 	vneg.f32	s17, s16
 8009afc:	eeb0 0a68 	vmov.f32	s0, s17
 8009b00:	f000 f8ae 	bl	8009c60 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8009b04:	ed5f 0a0b 	vldr	s1, [pc, #-44]	; 8009adc <tVZFilter_init+0x354>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8009b08:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8009b0c:	eeb0 0a48 	vmov.f32	s0, s16
 8009b10:	f000 f8aa 	bl	8009c68 <minimum>
            f->cB = 1.0f-x*x;
 8009b14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8009b18:	edd4 6a07 	vldr	s13, [r4, #28]
 8009b1c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cB = 1.0f-x*x;
 8009b20:	eea8 7a88 	vfma.f32	s14, s17, s16
            float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8009b24:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 8009b28:	ee36 5aa6 	vadd.f32	s10, s13, s13
 8009b2c:	edd4 8a04 	vldr	s17, [r4, #16]
 8009b30:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009b34:	ee27 6a07 	vmul.f32	s12, s14, s14
 8009b38:	eea6 6aa6 	vfma.f32	s12, s13, s13
 8009b3c:	eea0 6a00 	vfma.f32	s12, s0, s0
 8009b40:	eea0 6a45 	vfms.f32	s12, s0, s10
 8009b44:	ee84 5a86 	vdiv.f32	s10, s9, s12
 8009b48:	eeb1 6ac5 	vsqrt.f32	s12, s10
 8009b4c:	ee26 6a25 	vmul.f32	s12, s12, s11
            f->cL *= s; f->cB *= s; f->cH *= s;
 8009b50:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009b54:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009b58:	ee20 0a06 	vmul.f32	s0, s0, s12
 8009b5c:	edc4 6a07 	vstr	s13, [r4, #28]
 8009b60:	ed84 7a08 	vstr	s14, [r4, #32]
 8009b64:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 8009b68:	e69e      	b.n	80098a8 <tVZFilter_init+0x120>
            f->cL = 1.0f;
 8009b6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8009b6e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8009b72:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8009b74:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cH = 1.0f;
 8009b78:	6263      	str	r3, [r4, #36]	; 0x24
            f->cB = f->R2;
 8009b7a:	edc4 7a08 	vstr	s15, [r4, #32]
 8009b7e:	e693      	b.n	80098a8 <tVZFilter_init+0x120>
 8009b80:	edd4 7a05 	vldr	s15, [r4, #20]
 8009b84:	e690      	b.n	80098a8 <tVZFilter_init+0x120>
 8009b86:	bf00      	nop

08009b88 <tVZFilter_tickEfficient>:
    _tVZFilter* f = *vf;
 8009b88:	6803      	ldr	r3, [r0, #0]
    yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 8009b8a:	ed93 7a02 	vldr	s14, [r3, #8]
 8009b8e:	edd3 7a05 	vldr	s15, [r3, #20]
 8009b92:	edd3 5a04 	vldr	s11, [r3, #16]
 8009b96:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009b9a:	ed93 6a03 	vldr	s12, [r3, #12]
 8009b9e:	ed93 4a06 	vldr	s8, [r3, #24]
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8009ba2:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8009ba6:	edd3 4a08 	vldr	s9, [r3, #32]
 8009baa:	ed93 5a07 	vldr	s10, [r3, #28]
    yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 8009bae:	eea7 0a65 	vfms.f32	s0, s14, s11
 8009bb2:	ee70 7a46 	vsub.f32	s15, s0, s12
 8009bb6:	ee67 7a84 	vmul.f32	s15, s15, s8
    yB = (f->g*yH) + f->s1;
 8009bba:	eea5 7aa7 	vfma.f32	s14, s11, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8009bbe:	ee27 0aa6 	vmul.f32	s0, s15, s13
    yL = (f->g*yB) + f->s2;
 8009bc2:	eef0 6a46 	vmov.f32	s13, s12
 8009bc6:	eee5 6a87 	vfma.f32	s13, s11, s14
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 8009bca:	eeb0 6a47 	vmov.f32	s12, s14
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8009bce:	eea4 0a87 	vfma.f32	s0, s9, s14
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 8009bd2:	eea5 6aa7 	vfma.f32	s12, s11, s15
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8009bd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8009bda:	eea5 0a26 	vfma.f32	s0, s10, s13
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8009bde:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 8009be2:	ed83 6a02 	vstr	s12, [r3, #8]
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8009be6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8009bea:	4770      	bx	lr

08009bec <LEAF_clip>:

float   LEAF_clip(float min, float val, float max)
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 8009bec:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8009bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf4:	dd05      	ble.n	8009c02 <LEAF_clip+0x16>
 8009bf6:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 8009bfa:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 8009bfe:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 8009c02:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8009c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c0a:	dc01      	bgt.n	8009c10 <LEAF_clip+0x24>
 8009c0c:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop

08009c14 <LEAF_generate_atodb>:
    }
}

void LEAF_generate_atodb(float* buffer, int size)
{
    float increment = 1.0f / (float)size;
 8009c14:	ee07 1a90 	vmov	s15, r1
 8009c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    for (int i = 0; i < size; i++)
 8009c1c:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)size;
 8009c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8009c22:	b538      	push	{r3, r4, r5, lr}
 8009c24:	ed2d 8b04 	vpush	{d8-d9}
    float increment = 1.0f / (float)size;
 8009c28:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 8009c2c:	dd12      	ble.n	8009c54 <LEAF_generate_atodb+0x40>
 8009c2e:	4604      	mov	r4, r0
    float x = 0.0f;
 8009c30:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8009c5c <LEAF_generate_atodb+0x48>
 8009c34:	eb00 0581 	add.w	r5, r0, r1, lsl #2
}


float atodb(float a)
{
    return 20.0f*log10f(a);
 8009c38:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 8009c3c:	eeb0 0a48 	vmov.f32	s0, s16
 8009c40:	f000 ffa8 	bl	800ab94 <log10f>
 8009c44:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 8009c48:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 8009c4c:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8009c50:	42a5      	cmp	r5, r4
 8009c52:	d1f3      	bne.n	8009c3c <LEAF_generate_atodb+0x28>
}
 8009c54:	ecbd 8b04 	vpop	{d8-d9}
 8009c58:	bd38      	pop	{r3, r4, r5, pc}
 8009c5a:	bf00      	nop
 8009c5c:	00000000 	.word	0x00000000

08009c60 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8009c60:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop

08009c68 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8009c68:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop

08009c70 <mpool_alloc.part.0>:
}

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
 8009c70:	b508      	push	{r3, lr}
#if LEAF_USE_DYNAMIC_ALLOCATION
    char* temp = (char*) malloc(asize);
    if (temp == NULL)
    {
        // allocation failed, exit from the program
        fprintf(stderr, "Out of memory.\n");
 8009c72:	4b05      	ldr	r3, [pc, #20]	; (8009c88 <mpool_alloc.part.0+0x18>)
 8009c74:	220f      	movs	r2, #15
 8009c76:	2101      	movs	r1, #1
 8009c78:	4804      	ldr	r0, [pc, #16]	; (8009c8c <mpool_alloc.part.0+0x1c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	f000 f8d1 	bl	8009e24 <fwrite>
        exit(1);
 8009c82:	2001      	movs	r0, #1
 8009c84:	f000 f86c 	bl	8009d60 <exit>
 8009c88:	20000040 	.word	0x20000040
 8009c8c:	0800bcb4 	.word	0x0800bcb4

08009c90 <leaf_pool_init>:
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8009c90:	6a03      	ldr	r3, [r0, #32]
{
 8009c92:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8009c94:	2510      	movs	r5, #16
    pool->usize  = 0;
 8009c96:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8009c98:	635d      	str	r5, [r3, #52]	; 0x34
    mpool_create(memory, size, &leaf->_internal_mempool);
 8009c9a:	f100 051c 	add.w	r5, r0, #28
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8009c9e:	6a03      	ldr	r3, [r0, #32]
    pool->mpool = (char*)memory;
 8009ca0:	6241      	str	r1, [r0, #36]	; 0x24
    pool->usize  = 0;
 8009ca2:	e9c0 420a 	strd	r4, r2, [r0, #40]	; 0x28
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8009ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
    node->next = next;
 8009ca8:	604c      	str	r4, [r1, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8009caa:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 8009cac:	440b      	add	r3, r1
    node->prev = prev;
 8009cae:	608c      	str	r4, [r1, #8]
    node->pool = block_location + header_size;
 8009cb0:	600b      	str	r3, [r1, #0]
    node->size = size;
 8009cb2:	60ca      	str	r2, [r1, #12]
    leaf->mempool = &leaf->_internal_mempool;
 8009cb4:	6185      	str	r5, [r0, #24]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8009cb6:	6301      	str	r1, [r0, #48]	; 0x30
}
 8009cb8:	bc30      	pop	{r4, r5}
 8009cba:	4770      	bx	lr

08009cbc <mpool_alloc>:
{
 8009cbc:	b508      	push	{r3, lr}
    pool->leaf->allocCount++;
 8009cbe:	684a      	ldr	r2, [r1, #4]
    char* temp = (char*) malloc(asize);
 8009cc0:	2101      	movs	r1, #1
    pool->leaf->allocCount++;
 8009cc2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8009cc4:	440b      	add	r3, r1
 8009cc6:	6493      	str	r3, [r2, #72]	; 0x48
    char* temp = (char*) malloc(asize);
 8009cc8:	f000 f83c 	bl	8009d44 <calloc>
    if (temp == NULL)
 8009ccc:	b100      	cbz	r0, 8009cd0 <mpool_alloc+0x14>
}
 8009cce:	bd08      	pop	{r3, pc}
 8009cd0:	f7ff ffce 	bl	8009c70 <mpool_alloc.part.0>

08009cd4 <mpool_calloc>:
{
 8009cd4:	b508      	push	{r3, lr}
    pool->leaf->allocCount++;
 8009cd6:	684a      	ldr	r2, [r1, #4]
    char* ret = (char*) malloc(asize);
 8009cd8:	2101      	movs	r1, #1
    pool->leaf->allocCount++;
 8009cda:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8009cdc:	440b      	add	r3, r1
 8009cde:	6493      	str	r3, [r2, #72]	; 0x48
    char* ret = (char*) malloc(asize);
 8009ce0:	f000 f830 	bl	8009d44 <calloc>
    if (ret == NULL)
 8009ce4:	b100      	cbz	r0, 8009ce8 <mpool_calloc+0x14>
}
 8009ce6:	bd08      	pop	{r3, pc}
 8009ce8:	f7ff ffc2 	bl	8009c70 <mpool_alloc.part.0>

08009cec <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop

08009cf0 <LEAF_init>:
{
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	461d      	mov	r5, r3
 8009cf6:	ed2d 8b02 	vpush	{d8}
    leaf->_internal_mempool.leaf = leaf;
 8009cfa:	6220      	str	r0, [r4, #32]
{
 8009cfc:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 8009d00:	f7ff ffc6 	bl	8009c90 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 8009d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8009d08:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8009d3c <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 8009d0c:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8009d0e:	490c      	ldr	r1, [pc, #48]	; (8009d40 <LEAF_init+0x50>)
    leaf->invSampleRate = 1.0f/sr;
 8009d10:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 8009d14:	6125      	str	r5, [r4, #16]
    leaf->sampleRate = sr;
 8009d16:	ed84 8a00 	vstr	s16, [r4]
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8009d1a:	63a1      	str	r1, [r4, #56]	; 0x38
    leaf->clearOnAllocation = 0;
 8009d1c:	6162      	str	r2, [r4, #20]
    leaf->freeCount = 0;
 8009d1e:	64e2      	str	r2, [r4, #76]	; 0x4c
        leaf->errorState[i] = 0;
 8009d20:	e9c4 220f 	strd	r2, r2, [r4, #60]	; 0x3c
    leaf->allocCount = 0;
 8009d24:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8009d28:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 8009d2c:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8009d30:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8009d34:	ecbd 8b02 	vpop	{d8}
 8009d38:	bd38      	pop	{r3, r4, r5, pc}
 8009d3a:	bf00      	nop
 8009d3c:	40c90fdb 	.word	0x40c90fdb
 8009d40:	08009ced 	.word	0x08009ced

08009d44 <calloc>:
 8009d44:	4b02      	ldr	r3, [pc, #8]	; (8009d50 <calloc+0xc>)
 8009d46:	460a      	mov	r2, r1
 8009d48:	4601      	mov	r1, r0
 8009d4a:	6818      	ldr	r0, [r3, #0]
 8009d4c:	f000 b8a4 	b.w	8009e98 <_calloc_r>
 8009d50:	20000040 	.word	0x20000040

08009d54 <__errno>:
 8009d54:	4b01      	ldr	r3, [pc, #4]	; (8009d5c <__errno+0x8>)
 8009d56:	6818      	ldr	r0, [r3, #0]
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	20000040 	.word	0x20000040

08009d60 <exit>:
 8009d60:	b508      	push	{r3, lr}
 8009d62:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <exit+0x20>)
 8009d64:	4604      	mov	r4, r0
 8009d66:	b113      	cbz	r3, 8009d6e <exit+0xe>
 8009d68:	2100      	movs	r1, #0
 8009d6a:	f3af 8000 	nop.w
 8009d6e:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <exit+0x24>)
 8009d70:	6818      	ldr	r0, [r3, #0]
 8009d72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009d74:	b103      	cbz	r3, 8009d78 <exit+0x18>
 8009d76:	4798      	blx	r3
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f7ff fb95 	bl	80094a8 <_exit>
 8009d7e:	bf00      	nop
 8009d80:	00000000 	.word	0x00000000
 8009d84:	0800bcc4 	.word	0x0800bcc4

08009d88 <_fwrite_r>:
 8009d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d8c:	9c08      	ldr	r4, [sp, #32]
 8009d8e:	4689      	mov	r9, r1
 8009d90:	4617      	mov	r7, r2
 8009d92:	fb02 f803 	mul.w	r8, r2, r3
 8009d96:	4606      	mov	r6, r0
 8009d98:	b118      	cbz	r0, 8009da2 <_fwrite_r+0x1a>
 8009d9a:	6983      	ldr	r3, [r0, #24]
 8009d9c:	b90b      	cbnz	r3, 8009da2 <_fwrite_r+0x1a>
 8009d9e:	f000 faf1 	bl	800a384 <__sinit>
 8009da2:	4b1d      	ldr	r3, [pc, #116]	; (8009e18 <_fwrite_r+0x90>)
 8009da4:	429c      	cmp	r4, r3
 8009da6:	d11a      	bne.n	8009dde <_fwrite_r+0x56>
 8009da8:	6874      	ldr	r4, [r6, #4]
 8009daa:	89a3      	ldrh	r3, [r4, #12]
 8009dac:	071b      	lsls	r3, r3, #28
 8009dae:	d520      	bpl.n	8009df2 <_fwrite_r+0x6a>
 8009db0:	6923      	ldr	r3, [r4, #16]
 8009db2:	b1f3      	cbz	r3, 8009df2 <_fwrite_r+0x6a>
 8009db4:	2500      	movs	r5, #0
 8009db6:	4545      	cmp	r5, r8
 8009db8:	d029      	beq.n	8009e0e <_fwrite_r+0x86>
 8009dba:	68a3      	ldr	r3, [r4, #8]
 8009dbc:	f819 1005 	ldrb.w	r1, [r9, r5]
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	60a3      	str	r3, [r4, #8]
 8009dc6:	da04      	bge.n	8009dd2 <_fwrite_r+0x4a>
 8009dc8:	69a2      	ldr	r2, [r4, #24]
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	db19      	blt.n	8009e02 <_fwrite_r+0x7a>
 8009dce:	290a      	cmp	r1, #10
 8009dd0:	d017      	beq.n	8009e02 <_fwrite_r+0x7a>
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	1c5a      	adds	r2, r3, #1
 8009dd6:	6022      	str	r2, [r4, #0]
 8009dd8:	7019      	strb	r1, [r3, #0]
 8009dda:	3501      	adds	r5, #1
 8009ddc:	e7eb      	b.n	8009db6 <_fwrite_r+0x2e>
 8009dde:	4b0f      	ldr	r3, [pc, #60]	; (8009e1c <_fwrite_r+0x94>)
 8009de0:	429c      	cmp	r4, r3
 8009de2:	d101      	bne.n	8009de8 <_fwrite_r+0x60>
 8009de4:	68b4      	ldr	r4, [r6, #8]
 8009de6:	e7e0      	b.n	8009daa <_fwrite_r+0x22>
 8009de8:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <_fwrite_r+0x98>)
 8009dea:	429c      	cmp	r4, r3
 8009dec:	bf08      	it	eq
 8009dee:	68f4      	ldreq	r4, [r6, #12]
 8009df0:	e7db      	b.n	8009daa <_fwrite_r+0x22>
 8009df2:	4621      	mov	r1, r4
 8009df4:	4630      	mov	r0, r6
 8009df6:	f000 f967 	bl	800a0c8 <__swsetup_r>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d0da      	beq.n	8009db4 <_fwrite_r+0x2c>
 8009dfe:	2500      	movs	r5, #0
 8009e00:	e005      	b.n	8009e0e <_fwrite_r+0x86>
 8009e02:	4622      	mov	r2, r4
 8009e04:	4630      	mov	r0, r6
 8009e06:	f000 f90d 	bl	800a024 <__swbuf_r>
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	d1e5      	bne.n	8009dda <_fwrite_r+0x52>
 8009e0e:	fbb5 f0f7 	udiv	r0, r5, r7
 8009e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e16:	bf00      	nop
 8009e18:	0800bce8 	.word	0x0800bce8
 8009e1c:	0800bd08 	.word	0x0800bd08
 8009e20:	0800bcc8 	.word	0x0800bcc8

08009e24 <fwrite>:
 8009e24:	b507      	push	{r0, r1, r2, lr}
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	460a      	mov	r2, r1
 8009e2c:	4601      	mov	r1, r0
 8009e2e:	4803      	ldr	r0, [pc, #12]	; (8009e3c <fwrite+0x18>)
 8009e30:	6800      	ldr	r0, [r0, #0]
 8009e32:	f7ff ffa9 	bl	8009d88 <_fwrite_r>
 8009e36:	b003      	add	sp, #12
 8009e38:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e3c:	20000040 	.word	0x20000040

08009e40 <__libc_init_array>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	4e0d      	ldr	r6, [pc, #52]	; (8009e78 <__libc_init_array+0x38>)
 8009e44:	4c0d      	ldr	r4, [pc, #52]	; (8009e7c <__libc_init_array+0x3c>)
 8009e46:	1ba4      	subs	r4, r4, r6
 8009e48:	10a4      	asrs	r4, r4, #2
 8009e4a:	2500      	movs	r5, #0
 8009e4c:	42a5      	cmp	r5, r4
 8009e4e:	d109      	bne.n	8009e64 <__libc_init_array+0x24>
 8009e50:	4e0b      	ldr	r6, [pc, #44]	; (8009e80 <__libc_init_array+0x40>)
 8009e52:	4c0c      	ldr	r4, [pc, #48]	; (8009e84 <__libc_init_array+0x44>)
 8009e54:	f001 ff0a 	bl	800bc6c <_init>
 8009e58:	1ba4      	subs	r4, r4, r6
 8009e5a:	10a4      	asrs	r4, r4, #2
 8009e5c:	2500      	movs	r5, #0
 8009e5e:	42a5      	cmp	r5, r4
 8009e60:	d105      	bne.n	8009e6e <__libc_init_array+0x2e>
 8009e62:	bd70      	pop	{r4, r5, r6, pc}
 8009e64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e68:	4798      	blx	r3
 8009e6a:	3501      	adds	r5, #1
 8009e6c:	e7ee      	b.n	8009e4c <__libc_init_array+0xc>
 8009e6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e72:	4798      	blx	r3
 8009e74:	3501      	adds	r5, #1
 8009e76:	e7f2      	b.n	8009e5e <__libc_init_array+0x1e>
 8009e78:	0800c498 	.word	0x0800c498
 8009e7c:	0800c498 	.word	0x0800c498
 8009e80:	0800c498 	.word	0x0800c498
 8009e84:	0800c49c 	.word	0x0800c49c

08009e88 <memset>:
 8009e88:	4402      	add	r2, r0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d100      	bne.n	8009e92 <memset+0xa>
 8009e90:	4770      	bx	lr
 8009e92:	f803 1b01 	strb.w	r1, [r3], #1
 8009e96:	e7f9      	b.n	8009e8c <memset+0x4>

08009e98 <_calloc_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	fb02 f401 	mul.w	r4, r2, r1
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	f000 f856 	bl	8009f50 <_malloc_r>
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	b118      	cbz	r0, 8009eb0 <_calloc_r+0x18>
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	2100      	movs	r1, #0
 8009eac:	f7ff ffec 	bl	8009e88 <memset>
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}

08009eb4 <_free_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	2900      	cmp	r1, #0
 8009eba:	d045      	beq.n	8009f48 <_free_r+0x94>
 8009ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ec0:	1f0c      	subs	r4, r1, #4
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	bfb8      	it	lt
 8009ec6:	18e4      	addlt	r4, r4, r3
 8009ec8:	f000 fb4a 	bl	800a560 <__malloc_lock>
 8009ecc:	4a1f      	ldr	r2, [pc, #124]	; (8009f4c <_free_r+0x98>)
 8009ece:	6813      	ldr	r3, [r2, #0]
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	b933      	cbnz	r3, 8009ee2 <_free_r+0x2e>
 8009ed4:	6063      	str	r3, [r4, #4]
 8009ed6:	6014      	str	r4, [r2, #0]
 8009ed8:	4628      	mov	r0, r5
 8009eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ede:	f000 bb40 	b.w	800a562 <__malloc_unlock>
 8009ee2:	42a3      	cmp	r3, r4
 8009ee4:	d90c      	bls.n	8009f00 <_free_r+0x4c>
 8009ee6:	6821      	ldr	r1, [r4, #0]
 8009ee8:	1862      	adds	r2, r4, r1
 8009eea:	4293      	cmp	r3, r2
 8009eec:	bf04      	itt	eq
 8009eee:	681a      	ldreq	r2, [r3, #0]
 8009ef0:	685b      	ldreq	r3, [r3, #4]
 8009ef2:	6063      	str	r3, [r4, #4]
 8009ef4:	bf04      	itt	eq
 8009ef6:	1852      	addeq	r2, r2, r1
 8009ef8:	6022      	streq	r2, [r4, #0]
 8009efa:	6004      	str	r4, [r0, #0]
 8009efc:	e7ec      	b.n	8009ed8 <_free_r+0x24>
 8009efe:	4613      	mov	r3, r2
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	b10a      	cbz	r2, 8009f08 <_free_r+0x54>
 8009f04:	42a2      	cmp	r2, r4
 8009f06:	d9fa      	bls.n	8009efe <_free_r+0x4a>
 8009f08:	6819      	ldr	r1, [r3, #0]
 8009f0a:	1858      	adds	r0, r3, r1
 8009f0c:	42a0      	cmp	r0, r4
 8009f0e:	d10b      	bne.n	8009f28 <_free_r+0x74>
 8009f10:	6820      	ldr	r0, [r4, #0]
 8009f12:	4401      	add	r1, r0
 8009f14:	1858      	adds	r0, r3, r1
 8009f16:	4282      	cmp	r2, r0
 8009f18:	6019      	str	r1, [r3, #0]
 8009f1a:	d1dd      	bne.n	8009ed8 <_free_r+0x24>
 8009f1c:	6810      	ldr	r0, [r2, #0]
 8009f1e:	6852      	ldr	r2, [r2, #4]
 8009f20:	605a      	str	r2, [r3, #4]
 8009f22:	4401      	add	r1, r0
 8009f24:	6019      	str	r1, [r3, #0]
 8009f26:	e7d7      	b.n	8009ed8 <_free_r+0x24>
 8009f28:	d902      	bls.n	8009f30 <_free_r+0x7c>
 8009f2a:	230c      	movs	r3, #12
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	e7d3      	b.n	8009ed8 <_free_r+0x24>
 8009f30:	6820      	ldr	r0, [r4, #0]
 8009f32:	1821      	adds	r1, r4, r0
 8009f34:	428a      	cmp	r2, r1
 8009f36:	bf04      	itt	eq
 8009f38:	6811      	ldreq	r1, [r2, #0]
 8009f3a:	6852      	ldreq	r2, [r2, #4]
 8009f3c:	6062      	str	r2, [r4, #4]
 8009f3e:	bf04      	itt	eq
 8009f40:	1809      	addeq	r1, r1, r0
 8009f42:	6021      	streq	r1, [r4, #0]
 8009f44:	605c      	str	r4, [r3, #4]
 8009f46:	e7c7      	b.n	8009ed8 <_free_r+0x24>
 8009f48:	bd38      	pop	{r3, r4, r5, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20000130 	.word	0x20000130

08009f50 <_malloc_r>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	1ccd      	adds	r5, r1, #3
 8009f54:	f025 0503 	bic.w	r5, r5, #3
 8009f58:	3508      	adds	r5, #8
 8009f5a:	2d0c      	cmp	r5, #12
 8009f5c:	bf38      	it	cc
 8009f5e:	250c      	movcc	r5, #12
 8009f60:	2d00      	cmp	r5, #0
 8009f62:	4606      	mov	r6, r0
 8009f64:	db01      	blt.n	8009f6a <_malloc_r+0x1a>
 8009f66:	42a9      	cmp	r1, r5
 8009f68:	d903      	bls.n	8009f72 <_malloc_r+0x22>
 8009f6a:	230c      	movs	r3, #12
 8009f6c:	6033      	str	r3, [r6, #0]
 8009f6e:	2000      	movs	r0, #0
 8009f70:	bd70      	pop	{r4, r5, r6, pc}
 8009f72:	f000 faf5 	bl	800a560 <__malloc_lock>
 8009f76:	4a21      	ldr	r2, [pc, #132]	; (8009ffc <_malloc_r+0xac>)
 8009f78:	6814      	ldr	r4, [r2, #0]
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	b991      	cbnz	r1, 8009fa4 <_malloc_r+0x54>
 8009f7e:	4c20      	ldr	r4, [pc, #128]	; (800a000 <_malloc_r+0xb0>)
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	b91b      	cbnz	r3, 8009f8c <_malloc_r+0x3c>
 8009f84:	4630      	mov	r0, r6
 8009f86:	f000 f83d 	bl	800a004 <_sbrk_r>
 8009f8a:	6020      	str	r0, [r4, #0]
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f000 f838 	bl	800a004 <_sbrk_r>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d124      	bne.n	8009fe2 <_malloc_r+0x92>
 8009f98:	230c      	movs	r3, #12
 8009f9a:	6033      	str	r3, [r6, #0]
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f000 fae0 	bl	800a562 <__malloc_unlock>
 8009fa2:	e7e4      	b.n	8009f6e <_malloc_r+0x1e>
 8009fa4:	680b      	ldr	r3, [r1, #0]
 8009fa6:	1b5b      	subs	r3, r3, r5
 8009fa8:	d418      	bmi.n	8009fdc <_malloc_r+0x8c>
 8009faa:	2b0b      	cmp	r3, #11
 8009fac:	d90f      	bls.n	8009fce <_malloc_r+0x7e>
 8009fae:	600b      	str	r3, [r1, #0]
 8009fb0:	50cd      	str	r5, [r1, r3]
 8009fb2:	18cc      	adds	r4, r1, r3
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f000 fad4 	bl	800a562 <__malloc_unlock>
 8009fba:	f104 000b 	add.w	r0, r4, #11
 8009fbe:	1d23      	adds	r3, r4, #4
 8009fc0:	f020 0007 	bic.w	r0, r0, #7
 8009fc4:	1ac3      	subs	r3, r0, r3
 8009fc6:	d0d3      	beq.n	8009f70 <_malloc_r+0x20>
 8009fc8:	425a      	negs	r2, r3
 8009fca:	50e2      	str	r2, [r4, r3]
 8009fcc:	e7d0      	b.n	8009f70 <_malloc_r+0x20>
 8009fce:	428c      	cmp	r4, r1
 8009fd0:	684b      	ldr	r3, [r1, #4]
 8009fd2:	bf16      	itet	ne
 8009fd4:	6063      	strne	r3, [r4, #4]
 8009fd6:	6013      	streq	r3, [r2, #0]
 8009fd8:	460c      	movne	r4, r1
 8009fda:	e7eb      	b.n	8009fb4 <_malloc_r+0x64>
 8009fdc:	460c      	mov	r4, r1
 8009fde:	6849      	ldr	r1, [r1, #4]
 8009fe0:	e7cc      	b.n	8009f7c <_malloc_r+0x2c>
 8009fe2:	1cc4      	adds	r4, r0, #3
 8009fe4:	f024 0403 	bic.w	r4, r4, #3
 8009fe8:	42a0      	cmp	r0, r4
 8009fea:	d005      	beq.n	8009ff8 <_malloc_r+0xa8>
 8009fec:	1a21      	subs	r1, r4, r0
 8009fee:	4630      	mov	r0, r6
 8009ff0:	f000 f808 	bl	800a004 <_sbrk_r>
 8009ff4:	3001      	adds	r0, #1
 8009ff6:	d0cf      	beq.n	8009f98 <_malloc_r+0x48>
 8009ff8:	6025      	str	r5, [r4, #0]
 8009ffa:	e7db      	b.n	8009fb4 <_malloc_r+0x64>
 8009ffc:	20000130 	.word	0x20000130
 800a000:	20000134 	.word	0x20000134

0800a004 <_sbrk_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4c06      	ldr	r4, [pc, #24]	; (800a020 <_sbrk_r+0x1c>)
 800a008:	2300      	movs	r3, #0
 800a00a:	4605      	mov	r5, r0
 800a00c:	4608      	mov	r0, r1
 800a00e:	6023      	str	r3, [r4, #0]
 800a010:	f7ff fa7a 	bl	8009508 <_sbrk>
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	d102      	bne.n	800a01e <_sbrk_r+0x1a>
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	b103      	cbz	r3, 800a01e <_sbrk_r+0x1a>
 800a01c:	602b      	str	r3, [r5, #0]
 800a01e:	bd38      	pop	{r3, r4, r5, pc}
 800a020:	20019dd4 	.word	0x20019dd4

0800a024 <__swbuf_r>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	460e      	mov	r6, r1
 800a028:	4614      	mov	r4, r2
 800a02a:	4605      	mov	r5, r0
 800a02c:	b118      	cbz	r0, 800a036 <__swbuf_r+0x12>
 800a02e:	6983      	ldr	r3, [r0, #24]
 800a030:	b90b      	cbnz	r3, 800a036 <__swbuf_r+0x12>
 800a032:	f000 f9a7 	bl	800a384 <__sinit>
 800a036:	4b21      	ldr	r3, [pc, #132]	; (800a0bc <__swbuf_r+0x98>)
 800a038:	429c      	cmp	r4, r3
 800a03a:	d12a      	bne.n	800a092 <__swbuf_r+0x6e>
 800a03c:	686c      	ldr	r4, [r5, #4]
 800a03e:	69a3      	ldr	r3, [r4, #24]
 800a040:	60a3      	str	r3, [r4, #8]
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	071a      	lsls	r2, r3, #28
 800a046:	d52e      	bpl.n	800a0a6 <__swbuf_r+0x82>
 800a048:	6923      	ldr	r3, [r4, #16]
 800a04a:	b363      	cbz	r3, 800a0a6 <__swbuf_r+0x82>
 800a04c:	6923      	ldr	r3, [r4, #16]
 800a04e:	6820      	ldr	r0, [r4, #0]
 800a050:	1ac0      	subs	r0, r0, r3
 800a052:	6963      	ldr	r3, [r4, #20]
 800a054:	b2f6      	uxtb	r6, r6
 800a056:	4283      	cmp	r3, r0
 800a058:	4637      	mov	r7, r6
 800a05a:	dc04      	bgt.n	800a066 <__swbuf_r+0x42>
 800a05c:	4621      	mov	r1, r4
 800a05e:	4628      	mov	r0, r5
 800a060:	f000 f926 	bl	800a2b0 <_fflush_r>
 800a064:	bb28      	cbnz	r0, 800a0b2 <__swbuf_r+0x8e>
 800a066:	68a3      	ldr	r3, [r4, #8]
 800a068:	3b01      	subs	r3, #1
 800a06a:	60a3      	str	r3, [r4, #8]
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	6022      	str	r2, [r4, #0]
 800a072:	701e      	strb	r6, [r3, #0]
 800a074:	6963      	ldr	r3, [r4, #20]
 800a076:	3001      	adds	r0, #1
 800a078:	4283      	cmp	r3, r0
 800a07a:	d004      	beq.n	800a086 <__swbuf_r+0x62>
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	07db      	lsls	r3, r3, #31
 800a080:	d519      	bpl.n	800a0b6 <__swbuf_r+0x92>
 800a082:	2e0a      	cmp	r6, #10
 800a084:	d117      	bne.n	800a0b6 <__swbuf_r+0x92>
 800a086:	4621      	mov	r1, r4
 800a088:	4628      	mov	r0, r5
 800a08a:	f000 f911 	bl	800a2b0 <_fflush_r>
 800a08e:	b190      	cbz	r0, 800a0b6 <__swbuf_r+0x92>
 800a090:	e00f      	b.n	800a0b2 <__swbuf_r+0x8e>
 800a092:	4b0b      	ldr	r3, [pc, #44]	; (800a0c0 <__swbuf_r+0x9c>)
 800a094:	429c      	cmp	r4, r3
 800a096:	d101      	bne.n	800a09c <__swbuf_r+0x78>
 800a098:	68ac      	ldr	r4, [r5, #8]
 800a09a:	e7d0      	b.n	800a03e <__swbuf_r+0x1a>
 800a09c:	4b09      	ldr	r3, [pc, #36]	; (800a0c4 <__swbuf_r+0xa0>)
 800a09e:	429c      	cmp	r4, r3
 800a0a0:	bf08      	it	eq
 800a0a2:	68ec      	ldreq	r4, [r5, #12]
 800a0a4:	e7cb      	b.n	800a03e <__swbuf_r+0x1a>
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f000 f80d 	bl	800a0c8 <__swsetup_r>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d0cc      	beq.n	800a04c <__swbuf_r+0x28>
 800a0b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	0800bce8 	.word	0x0800bce8
 800a0c0:	0800bd08 	.word	0x0800bd08
 800a0c4:	0800bcc8 	.word	0x0800bcc8

0800a0c8 <__swsetup_r>:
 800a0c8:	4b32      	ldr	r3, [pc, #200]	; (800a194 <__swsetup_r+0xcc>)
 800a0ca:	b570      	push	{r4, r5, r6, lr}
 800a0cc:	681d      	ldr	r5, [r3, #0]
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	b125      	cbz	r5, 800a0de <__swsetup_r+0x16>
 800a0d4:	69ab      	ldr	r3, [r5, #24]
 800a0d6:	b913      	cbnz	r3, 800a0de <__swsetup_r+0x16>
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f000 f953 	bl	800a384 <__sinit>
 800a0de:	4b2e      	ldr	r3, [pc, #184]	; (800a198 <__swsetup_r+0xd0>)
 800a0e0:	429c      	cmp	r4, r3
 800a0e2:	d10f      	bne.n	800a104 <__swsetup_r+0x3c>
 800a0e4:	686c      	ldr	r4, [r5, #4]
 800a0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	0715      	lsls	r5, r2, #28
 800a0ee:	d42c      	bmi.n	800a14a <__swsetup_r+0x82>
 800a0f0:	06d0      	lsls	r0, r2, #27
 800a0f2:	d411      	bmi.n	800a118 <__swsetup_r+0x50>
 800a0f4:	2209      	movs	r2, #9
 800a0f6:	6032      	str	r2, [r6, #0]
 800a0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0fc:	81a3      	strh	r3, [r4, #12]
 800a0fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a102:	e03e      	b.n	800a182 <__swsetup_r+0xba>
 800a104:	4b25      	ldr	r3, [pc, #148]	; (800a19c <__swsetup_r+0xd4>)
 800a106:	429c      	cmp	r4, r3
 800a108:	d101      	bne.n	800a10e <__swsetup_r+0x46>
 800a10a:	68ac      	ldr	r4, [r5, #8]
 800a10c:	e7eb      	b.n	800a0e6 <__swsetup_r+0x1e>
 800a10e:	4b24      	ldr	r3, [pc, #144]	; (800a1a0 <__swsetup_r+0xd8>)
 800a110:	429c      	cmp	r4, r3
 800a112:	bf08      	it	eq
 800a114:	68ec      	ldreq	r4, [r5, #12]
 800a116:	e7e6      	b.n	800a0e6 <__swsetup_r+0x1e>
 800a118:	0751      	lsls	r1, r2, #29
 800a11a:	d512      	bpl.n	800a142 <__swsetup_r+0x7a>
 800a11c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a11e:	b141      	cbz	r1, 800a132 <__swsetup_r+0x6a>
 800a120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a124:	4299      	cmp	r1, r3
 800a126:	d002      	beq.n	800a12e <__swsetup_r+0x66>
 800a128:	4630      	mov	r0, r6
 800a12a:	f7ff fec3 	bl	8009eb4 <_free_r>
 800a12e:	2300      	movs	r3, #0
 800a130:	6363      	str	r3, [r4, #52]	; 0x34
 800a132:	89a3      	ldrh	r3, [r4, #12]
 800a134:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a138:	81a3      	strh	r3, [r4, #12]
 800a13a:	2300      	movs	r3, #0
 800a13c:	6063      	str	r3, [r4, #4]
 800a13e:	6923      	ldr	r3, [r4, #16]
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	89a3      	ldrh	r3, [r4, #12]
 800a144:	f043 0308 	orr.w	r3, r3, #8
 800a148:	81a3      	strh	r3, [r4, #12]
 800a14a:	6923      	ldr	r3, [r4, #16]
 800a14c:	b94b      	cbnz	r3, 800a162 <__swsetup_r+0x9a>
 800a14e:	89a3      	ldrh	r3, [r4, #12]
 800a150:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a158:	d003      	beq.n	800a162 <__swsetup_r+0x9a>
 800a15a:	4621      	mov	r1, r4
 800a15c:	4630      	mov	r0, r6
 800a15e:	f000 f9bf 	bl	800a4e0 <__smakebuf_r>
 800a162:	89a2      	ldrh	r2, [r4, #12]
 800a164:	f012 0301 	ands.w	r3, r2, #1
 800a168:	d00c      	beq.n	800a184 <__swsetup_r+0xbc>
 800a16a:	2300      	movs	r3, #0
 800a16c:	60a3      	str	r3, [r4, #8]
 800a16e:	6963      	ldr	r3, [r4, #20]
 800a170:	425b      	negs	r3, r3
 800a172:	61a3      	str	r3, [r4, #24]
 800a174:	6923      	ldr	r3, [r4, #16]
 800a176:	b953      	cbnz	r3, 800a18e <__swsetup_r+0xc6>
 800a178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a17c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a180:	d1ba      	bne.n	800a0f8 <__swsetup_r+0x30>
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	0792      	lsls	r2, r2, #30
 800a186:	bf58      	it	pl
 800a188:	6963      	ldrpl	r3, [r4, #20]
 800a18a:	60a3      	str	r3, [r4, #8]
 800a18c:	e7f2      	b.n	800a174 <__swsetup_r+0xac>
 800a18e:	2000      	movs	r0, #0
 800a190:	e7f7      	b.n	800a182 <__swsetup_r+0xba>
 800a192:	bf00      	nop
 800a194:	20000040 	.word	0x20000040
 800a198:	0800bce8 	.word	0x0800bce8
 800a19c:	0800bd08 	.word	0x0800bd08
 800a1a0:	0800bcc8 	.word	0x0800bcc8

0800a1a4 <__sflush_r>:
 800a1a4:	898a      	ldrh	r2, [r1, #12]
 800a1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	0710      	lsls	r0, r2, #28
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	d458      	bmi.n	800a264 <__sflush_r+0xc0>
 800a1b2:	684b      	ldr	r3, [r1, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	dc05      	bgt.n	800a1c4 <__sflush_r+0x20>
 800a1b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	dc02      	bgt.n	800a1c4 <__sflush_r+0x20>
 800a1be:	2000      	movs	r0, #0
 800a1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1c6:	2e00      	cmp	r6, #0
 800a1c8:	d0f9      	beq.n	800a1be <__sflush_r+0x1a>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1d0:	682f      	ldr	r7, [r5, #0]
 800a1d2:	6a21      	ldr	r1, [r4, #32]
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	d032      	beq.n	800a23e <__sflush_r+0x9a>
 800a1d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	075a      	lsls	r2, r3, #29
 800a1de:	d505      	bpl.n	800a1ec <__sflush_r+0x48>
 800a1e0:	6863      	ldr	r3, [r4, #4]
 800a1e2:	1ac0      	subs	r0, r0, r3
 800a1e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1e6:	b10b      	cbz	r3, 800a1ec <__sflush_r+0x48>
 800a1e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1ea:	1ac0      	subs	r0, r0, r3
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1f2:	6a21      	ldr	r1, [r4, #32]
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	47b0      	blx	r6
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	d106      	bne.n	800a20c <__sflush_r+0x68>
 800a1fe:	6829      	ldr	r1, [r5, #0]
 800a200:	291d      	cmp	r1, #29
 800a202:	d848      	bhi.n	800a296 <__sflush_r+0xf2>
 800a204:	4a29      	ldr	r2, [pc, #164]	; (800a2ac <__sflush_r+0x108>)
 800a206:	40ca      	lsrs	r2, r1
 800a208:	07d6      	lsls	r6, r2, #31
 800a20a:	d544      	bpl.n	800a296 <__sflush_r+0xf2>
 800a20c:	2200      	movs	r2, #0
 800a20e:	6062      	str	r2, [r4, #4]
 800a210:	04d9      	lsls	r1, r3, #19
 800a212:	6922      	ldr	r2, [r4, #16]
 800a214:	6022      	str	r2, [r4, #0]
 800a216:	d504      	bpl.n	800a222 <__sflush_r+0x7e>
 800a218:	1c42      	adds	r2, r0, #1
 800a21a:	d101      	bne.n	800a220 <__sflush_r+0x7c>
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	b903      	cbnz	r3, 800a222 <__sflush_r+0x7e>
 800a220:	6560      	str	r0, [r4, #84]	; 0x54
 800a222:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a224:	602f      	str	r7, [r5, #0]
 800a226:	2900      	cmp	r1, #0
 800a228:	d0c9      	beq.n	800a1be <__sflush_r+0x1a>
 800a22a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a22e:	4299      	cmp	r1, r3
 800a230:	d002      	beq.n	800a238 <__sflush_r+0x94>
 800a232:	4628      	mov	r0, r5
 800a234:	f7ff fe3e 	bl	8009eb4 <_free_r>
 800a238:	2000      	movs	r0, #0
 800a23a:	6360      	str	r0, [r4, #52]	; 0x34
 800a23c:	e7c0      	b.n	800a1c0 <__sflush_r+0x1c>
 800a23e:	2301      	movs	r3, #1
 800a240:	4628      	mov	r0, r5
 800a242:	47b0      	blx	r6
 800a244:	1c41      	adds	r1, r0, #1
 800a246:	d1c8      	bne.n	800a1da <__sflush_r+0x36>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0c5      	beq.n	800a1da <__sflush_r+0x36>
 800a24e:	2b1d      	cmp	r3, #29
 800a250:	d001      	beq.n	800a256 <__sflush_r+0xb2>
 800a252:	2b16      	cmp	r3, #22
 800a254:	d101      	bne.n	800a25a <__sflush_r+0xb6>
 800a256:	602f      	str	r7, [r5, #0]
 800a258:	e7b1      	b.n	800a1be <__sflush_r+0x1a>
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a260:	81a3      	strh	r3, [r4, #12]
 800a262:	e7ad      	b.n	800a1c0 <__sflush_r+0x1c>
 800a264:	690f      	ldr	r7, [r1, #16]
 800a266:	2f00      	cmp	r7, #0
 800a268:	d0a9      	beq.n	800a1be <__sflush_r+0x1a>
 800a26a:	0793      	lsls	r3, r2, #30
 800a26c:	680e      	ldr	r6, [r1, #0]
 800a26e:	bf08      	it	eq
 800a270:	694b      	ldreq	r3, [r1, #20]
 800a272:	600f      	str	r7, [r1, #0]
 800a274:	bf18      	it	ne
 800a276:	2300      	movne	r3, #0
 800a278:	eba6 0807 	sub.w	r8, r6, r7
 800a27c:	608b      	str	r3, [r1, #8]
 800a27e:	f1b8 0f00 	cmp.w	r8, #0
 800a282:	dd9c      	ble.n	800a1be <__sflush_r+0x1a>
 800a284:	4643      	mov	r3, r8
 800a286:	463a      	mov	r2, r7
 800a288:	6a21      	ldr	r1, [r4, #32]
 800a28a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a28c:	4628      	mov	r0, r5
 800a28e:	47b0      	blx	r6
 800a290:	2800      	cmp	r0, #0
 800a292:	dc06      	bgt.n	800a2a2 <__sflush_r+0xfe>
 800a294:	89a3      	ldrh	r3, [r4, #12]
 800a296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a29a:	81a3      	strh	r3, [r4, #12]
 800a29c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2a0:	e78e      	b.n	800a1c0 <__sflush_r+0x1c>
 800a2a2:	4407      	add	r7, r0
 800a2a4:	eba8 0800 	sub.w	r8, r8, r0
 800a2a8:	e7e9      	b.n	800a27e <__sflush_r+0xda>
 800a2aa:	bf00      	nop
 800a2ac:	20400001 	.word	0x20400001

0800a2b0 <_fflush_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	690b      	ldr	r3, [r1, #16]
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	b1db      	cbz	r3, 800a2f2 <_fflush_r+0x42>
 800a2ba:	b118      	cbz	r0, 800a2c4 <_fflush_r+0x14>
 800a2bc:	6983      	ldr	r3, [r0, #24]
 800a2be:	b90b      	cbnz	r3, 800a2c4 <_fflush_r+0x14>
 800a2c0:	f000 f860 	bl	800a384 <__sinit>
 800a2c4:	4b0c      	ldr	r3, [pc, #48]	; (800a2f8 <_fflush_r+0x48>)
 800a2c6:	429c      	cmp	r4, r3
 800a2c8:	d109      	bne.n	800a2de <_fflush_r+0x2e>
 800a2ca:	686c      	ldr	r4, [r5, #4]
 800a2cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2d0:	b17b      	cbz	r3, 800a2f2 <_fflush_r+0x42>
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2da:	f7ff bf63 	b.w	800a1a4 <__sflush_r>
 800a2de:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <_fflush_r+0x4c>)
 800a2e0:	429c      	cmp	r4, r3
 800a2e2:	d101      	bne.n	800a2e8 <_fflush_r+0x38>
 800a2e4:	68ac      	ldr	r4, [r5, #8]
 800a2e6:	e7f1      	b.n	800a2cc <_fflush_r+0x1c>
 800a2e8:	4b05      	ldr	r3, [pc, #20]	; (800a300 <_fflush_r+0x50>)
 800a2ea:	429c      	cmp	r4, r3
 800a2ec:	bf08      	it	eq
 800a2ee:	68ec      	ldreq	r4, [r5, #12]
 800a2f0:	e7ec      	b.n	800a2cc <_fflush_r+0x1c>
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	bd38      	pop	{r3, r4, r5, pc}
 800a2f6:	bf00      	nop
 800a2f8:	0800bce8 	.word	0x0800bce8
 800a2fc:	0800bd08 	.word	0x0800bd08
 800a300:	0800bcc8 	.word	0x0800bcc8

0800a304 <std>:
 800a304:	2300      	movs	r3, #0
 800a306:	b510      	push	{r4, lr}
 800a308:	4604      	mov	r4, r0
 800a30a:	e9c0 3300 	strd	r3, r3, [r0]
 800a30e:	6083      	str	r3, [r0, #8]
 800a310:	8181      	strh	r1, [r0, #12]
 800a312:	6643      	str	r3, [r0, #100]	; 0x64
 800a314:	81c2      	strh	r2, [r0, #14]
 800a316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a31a:	6183      	str	r3, [r0, #24]
 800a31c:	4619      	mov	r1, r3
 800a31e:	2208      	movs	r2, #8
 800a320:	305c      	adds	r0, #92	; 0x5c
 800a322:	f7ff fdb1 	bl	8009e88 <memset>
 800a326:	4b05      	ldr	r3, [pc, #20]	; (800a33c <std+0x38>)
 800a328:	6263      	str	r3, [r4, #36]	; 0x24
 800a32a:	4b05      	ldr	r3, [pc, #20]	; (800a340 <std+0x3c>)
 800a32c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a32e:	4b05      	ldr	r3, [pc, #20]	; (800a344 <std+0x40>)
 800a330:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a332:	4b05      	ldr	r3, [pc, #20]	; (800a348 <std+0x44>)
 800a334:	6224      	str	r4, [r4, #32]
 800a336:	6323      	str	r3, [r4, #48]	; 0x30
 800a338:	bd10      	pop	{r4, pc}
 800a33a:	bf00      	nop
 800a33c:	0800a565 	.word	0x0800a565
 800a340:	0800a587 	.word	0x0800a587
 800a344:	0800a5bf 	.word	0x0800a5bf
 800a348:	0800a5e3 	.word	0x0800a5e3

0800a34c <_cleanup_r>:
 800a34c:	4901      	ldr	r1, [pc, #4]	; (800a354 <_cleanup_r+0x8>)
 800a34e:	f000 b885 	b.w	800a45c <_fwalk_reent>
 800a352:	bf00      	nop
 800a354:	0800a2b1 	.word	0x0800a2b1

0800a358 <__sfmoreglue>:
 800a358:	b570      	push	{r4, r5, r6, lr}
 800a35a:	1e4a      	subs	r2, r1, #1
 800a35c:	2568      	movs	r5, #104	; 0x68
 800a35e:	4355      	muls	r5, r2
 800a360:	460e      	mov	r6, r1
 800a362:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a366:	f7ff fdf3 	bl	8009f50 <_malloc_r>
 800a36a:	4604      	mov	r4, r0
 800a36c:	b140      	cbz	r0, 800a380 <__sfmoreglue+0x28>
 800a36e:	2100      	movs	r1, #0
 800a370:	e9c0 1600 	strd	r1, r6, [r0]
 800a374:	300c      	adds	r0, #12
 800a376:	60a0      	str	r0, [r4, #8]
 800a378:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a37c:	f7ff fd84 	bl	8009e88 <memset>
 800a380:	4620      	mov	r0, r4
 800a382:	bd70      	pop	{r4, r5, r6, pc}

0800a384 <__sinit>:
 800a384:	6983      	ldr	r3, [r0, #24]
 800a386:	b510      	push	{r4, lr}
 800a388:	4604      	mov	r4, r0
 800a38a:	bb33      	cbnz	r3, 800a3da <__sinit+0x56>
 800a38c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a390:	6503      	str	r3, [r0, #80]	; 0x50
 800a392:	4b12      	ldr	r3, [pc, #72]	; (800a3dc <__sinit+0x58>)
 800a394:	4a12      	ldr	r2, [pc, #72]	; (800a3e0 <__sinit+0x5c>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6282      	str	r2, [r0, #40]	; 0x28
 800a39a:	4298      	cmp	r0, r3
 800a39c:	bf04      	itt	eq
 800a39e:	2301      	moveq	r3, #1
 800a3a0:	6183      	streq	r3, [r0, #24]
 800a3a2:	f000 f81f 	bl	800a3e4 <__sfp>
 800a3a6:	6060      	str	r0, [r4, #4]
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 f81b 	bl	800a3e4 <__sfp>
 800a3ae:	60a0      	str	r0, [r4, #8]
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f000 f817 	bl	800a3e4 <__sfp>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	60e0      	str	r0, [r4, #12]
 800a3ba:	2104      	movs	r1, #4
 800a3bc:	6860      	ldr	r0, [r4, #4]
 800a3be:	f7ff ffa1 	bl	800a304 <std>
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	2109      	movs	r1, #9
 800a3c6:	68a0      	ldr	r0, [r4, #8]
 800a3c8:	f7ff ff9c 	bl	800a304 <std>
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	2112      	movs	r1, #18
 800a3d0:	68e0      	ldr	r0, [r4, #12]
 800a3d2:	f7ff ff97 	bl	800a304 <std>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	61a3      	str	r3, [r4, #24]
 800a3da:	bd10      	pop	{r4, pc}
 800a3dc:	0800bcc4 	.word	0x0800bcc4
 800a3e0:	0800a34d 	.word	0x0800a34d

0800a3e4 <__sfp>:
 800a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e6:	4b1b      	ldr	r3, [pc, #108]	; (800a454 <__sfp+0x70>)
 800a3e8:	681e      	ldr	r6, [r3, #0]
 800a3ea:	69b3      	ldr	r3, [r6, #24]
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	b913      	cbnz	r3, 800a3f6 <__sfp+0x12>
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f7ff ffc7 	bl	800a384 <__sinit>
 800a3f6:	3648      	adds	r6, #72	; 0x48
 800a3f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	d503      	bpl.n	800a408 <__sfp+0x24>
 800a400:	6833      	ldr	r3, [r6, #0]
 800a402:	b133      	cbz	r3, 800a412 <__sfp+0x2e>
 800a404:	6836      	ldr	r6, [r6, #0]
 800a406:	e7f7      	b.n	800a3f8 <__sfp+0x14>
 800a408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a40c:	b16d      	cbz	r5, 800a42a <__sfp+0x46>
 800a40e:	3468      	adds	r4, #104	; 0x68
 800a410:	e7f4      	b.n	800a3fc <__sfp+0x18>
 800a412:	2104      	movs	r1, #4
 800a414:	4638      	mov	r0, r7
 800a416:	f7ff ff9f 	bl	800a358 <__sfmoreglue>
 800a41a:	6030      	str	r0, [r6, #0]
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d1f1      	bne.n	800a404 <__sfp+0x20>
 800a420:	230c      	movs	r3, #12
 800a422:	603b      	str	r3, [r7, #0]
 800a424:	4604      	mov	r4, r0
 800a426:	4620      	mov	r0, r4
 800a428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a42a:	4b0b      	ldr	r3, [pc, #44]	; (800a458 <__sfp+0x74>)
 800a42c:	6665      	str	r5, [r4, #100]	; 0x64
 800a42e:	e9c4 5500 	strd	r5, r5, [r4]
 800a432:	60a5      	str	r5, [r4, #8]
 800a434:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a438:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a43c:	2208      	movs	r2, #8
 800a43e:	4629      	mov	r1, r5
 800a440:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a444:	f7ff fd20 	bl	8009e88 <memset>
 800a448:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a44c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a450:	e7e9      	b.n	800a426 <__sfp+0x42>
 800a452:	bf00      	nop
 800a454:	0800bcc4 	.word	0x0800bcc4
 800a458:	ffff0001 	.word	0xffff0001

0800a45c <_fwalk_reent>:
 800a45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a460:	4680      	mov	r8, r0
 800a462:	4689      	mov	r9, r1
 800a464:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a468:	2600      	movs	r6, #0
 800a46a:	b914      	cbnz	r4, 800a472 <_fwalk_reent+0x16>
 800a46c:	4630      	mov	r0, r6
 800a46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a472:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a476:	3f01      	subs	r7, #1
 800a478:	d501      	bpl.n	800a47e <_fwalk_reent+0x22>
 800a47a:	6824      	ldr	r4, [r4, #0]
 800a47c:	e7f5      	b.n	800a46a <_fwalk_reent+0xe>
 800a47e:	89ab      	ldrh	r3, [r5, #12]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d907      	bls.n	800a494 <_fwalk_reent+0x38>
 800a484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a488:	3301      	adds	r3, #1
 800a48a:	d003      	beq.n	800a494 <_fwalk_reent+0x38>
 800a48c:	4629      	mov	r1, r5
 800a48e:	4640      	mov	r0, r8
 800a490:	47c8      	blx	r9
 800a492:	4306      	orrs	r6, r0
 800a494:	3568      	adds	r5, #104	; 0x68
 800a496:	e7ee      	b.n	800a476 <_fwalk_reent+0x1a>

0800a498 <__swhatbuf_r>:
 800a498:	b570      	push	{r4, r5, r6, lr}
 800a49a:	460e      	mov	r6, r1
 800a49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a0:	2900      	cmp	r1, #0
 800a4a2:	b096      	sub	sp, #88	; 0x58
 800a4a4:	4614      	mov	r4, r2
 800a4a6:	461d      	mov	r5, r3
 800a4a8:	da07      	bge.n	800a4ba <__swhatbuf_r+0x22>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	602b      	str	r3, [r5, #0]
 800a4ae:	89b3      	ldrh	r3, [r6, #12]
 800a4b0:	061a      	lsls	r2, r3, #24
 800a4b2:	d410      	bmi.n	800a4d6 <__swhatbuf_r+0x3e>
 800a4b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4b8:	e00e      	b.n	800a4d8 <__swhatbuf_r+0x40>
 800a4ba:	466a      	mov	r2, sp
 800a4bc:	f000 f8b8 	bl	800a630 <_fstat_r>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	dbf2      	blt.n	800a4aa <__swhatbuf_r+0x12>
 800a4c4:	9a01      	ldr	r2, [sp, #4]
 800a4c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a4ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a4ce:	425a      	negs	r2, r3
 800a4d0:	415a      	adcs	r2, r3
 800a4d2:	602a      	str	r2, [r5, #0]
 800a4d4:	e7ee      	b.n	800a4b4 <__swhatbuf_r+0x1c>
 800a4d6:	2340      	movs	r3, #64	; 0x40
 800a4d8:	2000      	movs	r0, #0
 800a4da:	6023      	str	r3, [r4, #0]
 800a4dc:	b016      	add	sp, #88	; 0x58
 800a4de:	bd70      	pop	{r4, r5, r6, pc}

0800a4e0 <__smakebuf_r>:
 800a4e0:	898b      	ldrh	r3, [r1, #12]
 800a4e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4e4:	079d      	lsls	r5, r3, #30
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	d507      	bpl.n	800a4fc <__smakebuf_r+0x1c>
 800a4ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	6123      	str	r3, [r4, #16]
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	6163      	str	r3, [r4, #20]
 800a4f8:	b002      	add	sp, #8
 800a4fa:	bd70      	pop	{r4, r5, r6, pc}
 800a4fc:	ab01      	add	r3, sp, #4
 800a4fe:	466a      	mov	r2, sp
 800a500:	f7ff ffca 	bl	800a498 <__swhatbuf_r>
 800a504:	9900      	ldr	r1, [sp, #0]
 800a506:	4605      	mov	r5, r0
 800a508:	4630      	mov	r0, r6
 800a50a:	f7ff fd21 	bl	8009f50 <_malloc_r>
 800a50e:	b948      	cbnz	r0, 800a524 <__smakebuf_r+0x44>
 800a510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a514:	059a      	lsls	r2, r3, #22
 800a516:	d4ef      	bmi.n	800a4f8 <__smakebuf_r+0x18>
 800a518:	f023 0303 	bic.w	r3, r3, #3
 800a51c:	f043 0302 	orr.w	r3, r3, #2
 800a520:	81a3      	strh	r3, [r4, #12]
 800a522:	e7e3      	b.n	800a4ec <__smakebuf_r+0xc>
 800a524:	4b0d      	ldr	r3, [pc, #52]	; (800a55c <__smakebuf_r+0x7c>)
 800a526:	62b3      	str	r3, [r6, #40]	; 0x28
 800a528:	89a3      	ldrh	r3, [r4, #12]
 800a52a:	6020      	str	r0, [r4, #0]
 800a52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a530:	81a3      	strh	r3, [r4, #12]
 800a532:	9b00      	ldr	r3, [sp, #0]
 800a534:	6163      	str	r3, [r4, #20]
 800a536:	9b01      	ldr	r3, [sp, #4]
 800a538:	6120      	str	r0, [r4, #16]
 800a53a:	b15b      	cbz	r3, 800a554 <__smakebuf_r+0x74>
 800a53c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a540:	4630      	mov	r0, r6
 800a542:	f000 f887 	bl	800a654 <_isatty_r>
 800a546:	b128      	cbz	r0, 800a554 <__smakebuf_r+0x74>
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	f023 0303 	bic.w	r3, r3, #3
 800a54e:	f043 0301 	orr.w	r3, r3, #1
 800a552:	81a3      	strh	r3, [r4, #12]
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	431d      	orrs	r5, r3
 800a558:	81a5      	strh	r5, [r4, #12]
 800a55a:	e7cd      	b.n	800a4f8 <__smakebuf_r+0x18>
 800a55c:	0800a34d 	.word	0x0800a34d

0800a560 <__malloc_lock>:
 800a560:	4770      	bx	lr

0800a562 <__malloc_unlock>:
 800a562:	4770      	bx	lr

0800a564 <__sread>:
 800a564:	b510      	push	{r4, lr}
 800a566:	460c      	mov	r4, r1
 800a568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a56c:	f000 f894 	bl	800a698 <_read_r>
 800a570:	2800      	cmp	r0, #0
 800a572:	bfab      	itete	ge
 800a574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a576:	89a3      	ldrhlt	r3, [r4, #12]
 800a578:	181b      	addge	r3, r3, r0
 800a57a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a57e:	bfac      	ite	ge
 800a580:	6563      	strge	r3, [r4, #84]	; 0x54
 800a582:	81a3      	strhlt	r3, [r4, #12]
 800a584:	bd10      	pop	{r4, pc}

0800a586 <__swrite>:
 800a586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a58a:	461f      	mov	r7, r3
 800a58c:	898b      	ldrh	r3, [r1, #12]
 800a58e:	05db      	lsls	r3, r3, #23
 800a590:	4605      	mov	r5, r0
 800a592:	460c      	mov	r4, r1
 800a594:	4616      	mov	r6, r2
 800a596:	d505      	bpl.n	800a5a4 <__swrite+0x1e>
 800a598:	2302      	movs	r3, #2
 800a59a:	2200      	movs	r2, #0
 800a59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a0:	f000 f868 	bl	800a674 <_lseek_r>
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5ae:	81a3      	strh	r3, [r4, #12]
 800a5b0:	4632      	mov	r2, r6
 800a5b2:	463b      	mov	r3, r7
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ba:	f000 b817 	b.w	800a5ec <_write_r>

0800a5be <__sseek>:
 800a5be:	b510      	push	{r4, lr}
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c6:	f000 f855 	bl	800a674 <_lseek_r>
 800a5ca:	1c43      	adds	r3, r0, #1
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	bf15      	itete	ne
 800a5d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5da:	81a3      	strheq	r3, [r4, #12]
 800a5dc:	bf18      	it	ne
 800a5de:	81a3      	strhne	r3, [r4, #12]
 800a5e0:	bd10      	pop	{r4, pc}

0800a5e2 <__sclose>:
 800a5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e6:	f000 b813 	b.w	800a610 <_close_r>
	...

0800a5ec <_write_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4c07      	ldr	r4, [pc, #28]	; (800a60c <_write_r+0x20>)
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	4608      	mov	r0, r1
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	6022      	str	r2, [r4, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f7fe ff68 	bl	80094d0 <_write>
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	d102      	bne.n	800a60a <_write_r+0x1e>
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	b103      	cbz	r3, 800a60a <_write_r+0x1e>
 800a608:	602b      	str	r3, [r5, #0]
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	20019dd4 	.word	0x20019dd4

0800a610 <_close_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4c06      	ldr	r4, [pc, #24]	; (800a62c <_close_r+0x1c>)
 800a614:	2300      	movs	r3, #0
 800a616:	4605      	mov	r5, r0
 800a618:	4608      	mov	r0, r1
 800a61a:	6023      	str	r3, [r4, #0]
 800a61c:	f7fe ff66 	bl	80094ec <_close>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d102      	bne.n	800a62a <_close_r+0x1a>
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	b103      	cbz	r3, 800a62a <_close_r+0x1a>
 800a628:	602b      	str	r3, [r5, #0]
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	20019dd4 	.word	0x20019dd4

0800a630 <_fstat_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4c07      	ldr	r4, [pc, #28]	; (800a650 <_fstat_r+0x20>)
 800a634:	2300      	movs	r3, #0
 800a636:	4605      	mov	r5, r0
 800a638:	4608      	mov	r0, r1
 800a63a:	4611      	mov	r1, r2
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	f7fe ff59 	bl	80094f4 <_fstat>
 800a642:	1c43      	adds	r3, r0, #1
 800a644:	d102      	bne.n	800a64c <_fstat_r+0x1c>
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	b103      	cbz	r3, 800a64c <_fstat_r+0x1c>
 800a64a:	602b      	str	r3, [r5, #0]
 800a64c:	bd38      	pop	{r3, r4, r5, pc}
 800a64e:	bf00      	nop
 800a650:	20019dd4 	.word	0x20019dd4

0800a654 <_isatty_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4c06      	ldr	r4, [pc, #24]	; (800a670 <_isatty_r+0x1c>)
 800a658:	2300      	movs	r3, #0
 800a65a:	4605      	mov	r5, r0
 800a65c:	4608      	mov	r0, r1
 800a65e:	6023      	str	r3, [r4, #0]
 800a660:	f7fe ff4e 	bl	8009500 <_isatty>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d102      	bne.n	800a66e <_isatty_r+0x1a>
 800a668:	6823      	ldr	r3, [r4, #0]
 800a66a:	b103      	cbz	r3, 800a66e <_isatty_r+0x1a>
 800a66c:	602b      	str	r3, [r5, #0]
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	20019dd4 	.word	0x20019dd4

0800a674 <_lseek_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4c07      	ldr	r4, [pc, #28]	; (800a694 <_lseek_r+0x20>)
 800a678:	4605      	mov	r5, r0
 800a67a:	4608      	mov	r0, r1
 800a67c:	4611      	mov	r1, r2
 800a67e:	2200      	movs	r2, #0
 800a680:	6022      	str	r2, [r4, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	f7fe ff3e 	bl	8009504 <_lseek>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d102      	bne.n	800a692 <_lseek_r+0x1e>
 800a68c:	6823      	ldr	r3, [r4, #0]
 800a68e:	b103      	cbz	r3, 800a692 <_lseek_r+0x1e>
 800a690:	602b      	str	r3, [r5, #0]
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	20019dd4 	.word	0x20019dd4

0800a698 <_read_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4c07      	ldr	r4, [pc, #28]	; (800a6b8 <_read_r+0x20>)
 800a69c:	4605      	mov	r5, r0
 800a69e:	4608      	mov	r0, r1
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	6022      	str	r2, [r4, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f7fe ff04 	bl	80094b4 <_read>
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	d102      	bne.n	800a6b6 <_read_r+0x1e>
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	b103      	cbz	r3, 800a6b6 <_read_r+0x1e>
 800a6b4:	602b      	str	r3, [r5, #0]
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}
 800a6b8:	20019dd4 	.word	0x20019dd4

0800a6bc <expf>:
 800a6bc:	ee10 2a10 	vmov	r2, s0
 800a6c0:	f240 412a 	movw	r1, #1066	; 0x42a
 800a6c4:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800a6c8:	428b      	cmp	r3, r1
 800a6ca:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 800a6ce:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800a6d2:	d92e      	bls.n	800a732 <expf+0x76>
 800a6d4:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800a6d8:	d061      	beq.n	800a79e <expf+0xe2>
 800a6da:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800a6de:	d304      	bcc.n	800a6ea <expf+0x2e>
 800a6e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a6e4:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800a6e8:	4770      	bx	lr
 800a6ea:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800a7a4 <expf+0xe8>
 800a6ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f6:	dd04      	ble.n	800a702 <expf+0x46>
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800a6fe:	f001 b8a3 	b.w	800b848 <__math_oflowf>
 800a702:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a7a8 <expf+0xec>
 800a706:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70e:	d504      	bpl.n	800a71a <expf+0x5e>
 800a710:	2000      	movs	r0, #0
 800a712:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800a716:	f001 b88b 	b.w	800b830 <__math_uflowf>
 800a71a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800a7ac <expf+0xf0>
 800a71e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a726:	d504      	bpl.n	800a732 <expf+0x76>
 800a728:	2000      	movs	r0, #0
 800a72a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800a72e:	f001 b885 	b.w	800b83c <__math_may_uflowf>
 800a732:	491f      	ldr	r1, [pc, #124]	; (800a7b0 <expf+0xf4>)
 800a734:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a738:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 800a73c:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 800a740:	eeb0 4b47 	vmov.f64	d4, d7
 800a744:	eea5 4b06 	vfma.f64	d4, d5, d6
 800a748:	ec55 4b14 	vmov	r4, r5, d4
 800a74c:	ee34 7b47 	vsub.f64	d7, d4, d7
 800a750:	f004 021f 	and.w	r2, r4, #31
 800a754:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800a758:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a75c:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 800a760:	e9d2 4500 	ldrd	r4, r5, [r2]
 800a764:	eea6 0b07 	vfma.f64	d0, d6, d7
 800a768:	ee14 0a10 	vmov	r0, s8
 800a76c:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 800a770:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 800a774:	f04f 0b00 	mov.w	fp, #0
 800a778:	eb1b 0204 	adds.w	r2, fp, r4
 800a77c:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 800a780:	eb4c 0305 	adc.w	r3, ip, r5
 800a784:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a788:	ee27 7b07 	vmul.f64	d7, d7, d7
 800a78c:	eea6 0b07 	vfma.f64	d0, d6, d7
 800a790:	ec43 2b17 	vmov	d7, r2, r3
 800a794:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a798:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a79c:	e7a2      	b.n	800a6e4 <expf+0x28>
 800a79e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800a7b4 <expf+0xf8>
 800a7a2:	e79f      	b.n	800a6e4 <expf+0x28>
 800a7a4:	42b17217 	.word	0x42b17217
 800a7a8:	c2cff1b4 	.word	0xc2cff1b4
 800a7ac:	c2ce8ecf 	.word	0xc2ce8ecf
 800a7b0:	0800bd28 	.word	0x0800bd28
 800a7b4:	00000000 	.word	0x00000000

0800a7b8 <fabsf>:
 800a7b8:	ee10 3a10 	vmov	r3, s0
 800a7bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7c0:	ee00 3a10 	vmov	s0, r3
 800a7c4:	4770      	bx	lr
	...

0800a7c8 <logf>:
 800a7c8:	ee10 3a10 	vmov	r3, s0
 800a7cc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a7d0:	b410      	push	{r4}
 800a7d2:	d057      	beq.n	800a884 <logf+0xbc>
 800a7d4:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800a7d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800a7dc:	d31a      	bcc.n	800a814 <logf+0x4c>
 800a7de:	005a      	lsls	r2, r3, #1
 800a7e0:	d104      	bne.n	800a7ec <logf+0x24>
 800a7e2:	2001      	movs	r0, #1
 800a7e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7e8:	f001 b834 	b.w	800b854 <__math_divzerof>
 800a7ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a7f0:	d045      	beq.n	800a87e <logf+0xb6>
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	db02      	blt.n	800a7fc <logf+0x34>
 800a7f6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800a7fa:	d303      	bcc.n	800a804 <logf+0x3c>
 800a7fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a800:	f001 b838 	b.w	800b874 <__math_invalidf>
 800a804:	eddf 7a21 	vldr	s15, [pc, #132]	; 800a88c <logf+0xc4>
 800a808:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a80c:	ee10 3a10 	vmov	r3, s0
 800a810:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800a814:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800a818:	491d      	ldr	r1, [pc, #116]	; (800a890 <logf+0xc8>)
 800a81a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a81e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800a822:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800a826:	0dd4      	lsrs	r4, r2, #23
 800a828:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800a82c:	05e4      	lsls	r4, r4, #23
 800a82e:	ed90 5b00 	vldr	d5, [r0]
 800a832:	1b1b      	subs	r3, r3, r4
 800a834:	ee07 3a90 	vmov	s15, r3
 800a838:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a83c:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a840:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800a844:	ee26 3b06 	vmul.f64	d3, d6, d6
 800a848:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800a84c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a850:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800a854:	15d2      	asrs	r2, r2, #23
 800a856:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 800a85a:	eea5 7b03 	vfma.f64	d7, d5, d3
 800a85e:	eeb0 5b47 	vmov.f64	d5, d7
 800a862:	ed90 0b02 	vldr	d0, [r0, #8]
 800a866:	ee07 2a90 	vmov	s15, r2
 800a86a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a86e:	eea7 0b04 	vfma.f64	d0, d7, d4
 800a872:	ee30 0b06 	vadd.f64	d0, d0, d6
 800a876:	eea3 0b05 	vfma.f64	d0, d3, d5
 800a87a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a87e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800a894 <logf+0xcc>
 800a888:	e7f9      	b.n	800a87e <logf+0xb6>
 800a88a:	bf00      	nop
 800a88c:	4b000000 	.word	0x4b000000
 800a890:	0800be70 	.word	0x0800be70
 800a894:	00000000 	.word	0x00000000

0800a898 <checkint>:
 800a898:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a89c:	2b7e      	cmp	r3, #126	; 0x7e
 800a89e:	dd10      	ble.n	800a8c2 <checkint+0x2a>
 800a8a0:	2b96      	cmp	r3, #150	; 0x96
 800a8a2:	dc0c      	bgt.n	800a8be <checkint+0x26>
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a8aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ae:	1e5a      	subs	r2, r3, #1
 800a8b0:	4202      	tst	r2, r0
 800a8b2:	d106      	bne.n	800a8c2 <checkint+0x2a>
 800a8b4:	4203      	tst	r3, r0
 800a8b6:	bf0c      	ite	eq
 800a8b8:	2002      	moveq	r0, #2
 800a8ba:	2001      	movne	r0, #1
 800a8bc:	4770      	bx	lr
 800a8be:	2002      	movs	r0, #2
 800a8c0:	4770      	bx	lr
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	4770      	bx	lr
	...

0800a8c8 <powf>:
 800a8c8:	ee10 1a10 	vmov	r1, s0
 800a8cc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a8d0:	ee10 4a90 	vmov	r4, s1
 800a8d4:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800a8d8:	0062      	lsls	r2, r4, #1
 800a8da:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a8de:	eef0 4a60 	vmov.f32	s9, s1
 800a8e2:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800a8e6:	4b92      	ldr	r3, [pc, #584]	; (800ab30 <powf+0x268>)
 800a8e8:	d255      	bcs.n	800a996 <powf+0xce>
 800a8ea:	4298      	cmp	r0, r3
 800a8ec:	d855      	bhi.n	800a99a <powf+0xd2>
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800a8f4:	4a8f      	ldr	r2, [pc, #572]	; (800ab34 <powf+0x26c>)
 800a8f6:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 800a8fa:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 800a8fe:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800a902:	0ddb      	lsrs	r3, r3, #23
 800a904:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800a908:	05db      	lsls	r3, r3, #23
 800a90a:	ed94 6b00 	vldr	d6, [r4]
 800a90e:	1ac9      	subs	r1, r1, r3
 800a910:	ee07 1a90 	vmov	s15, r1
 800a914:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 800a918:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a91c:	eea6 2b07 	vfma.f64	d2, d6, d7
 800a920:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 800a924:	ee22 6b02 	vmul.f64	d6, d2, d2
 800a928:	eea2 7b05 	vfma.f64	d7, d2, d5
 800a92c:	15db      	asrs	r3, r3, #23
 800a92e:	ed94 5b02 	vldr	d5, [r4, #8]
 800a932:	ee00 3a10 	vmov	s0, r3
 800a936:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800a93a:	ee30 0b05 	vadd.f64	d0, d0, d5
 800a93e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 800a942:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 800a946:	eea2 0b05 	vfma.f64	d0, d2, d5
 800a94a:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 800a94e:	eea2 5b03 	vfma.f64	d5, d2, d3
 800a952:	eea6 0b05 	vfma.f64	d0, d6, d5
 800a956:	ee26 6b06 	vmul.f64	d6, d6, d6
 800a95a:	eea7 0b06 	vfma.f64	d0, d7, d6
 800a95e:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 800a962:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a966:	ee10 3a90 	vmov	r3, s1
 800a96a:	2500      	movs	r5, #0
 800a96c:	0bda      	lsrs	r2, r3, #15
 800a96e:	2300      	movs	r3, #0
 800a970:	b292      	uxth	r2, r2
 800a972:	f248 04be 	movw	r4, #32958	; 0x80be
 800a976:	429d      	cmp	r5, r3
 800a978:	bf08      	it	eq
 800a97a:	4294      	cmpeq	r4, r2
 800a97c:	f080 8094 	bcs.w	800aaa8 <powf+0x1e0>
 800a980:	ed9f 7b65 	vldr	d7, [pc, #404]	; 800ab18 <powf+0x250>
 800a984:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a98c:	dd76      	ble.n	800aa7c <powf+0x1b4>
 800a98e:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800a992:	f000 bf59 	b.w	800b848 <__math_oflowf>
 800a996:	4298      	cmp	r0, r3
 800a998:	d92d      	bls.n	800a9f6 <powf+0x12e>
 800a99a:	b952      	cbnz	r2, 800a9b2 <powf+0xea>
 800a99c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800a9a0:	005b      	lsls	r3, r3, #1
 800a9a2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800a9a6:	f240 80ae 	bls.w	800ab06 <powf+0x23e>
 800a9aa:	ee30 0a24 	vadd.f32	s0, s0, s9
 800a9ae:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a9b2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800a9b6:	d105      	bne.n	800a9c4 <powf+0xfc>
 800a9b8:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800a9bc:	0064      	lsls	r4, r4, #1
 800a9be:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800a9c2:	e7f0      	b.n	800a9a6 <powf+0xde>
 800a9c4:	004b      	lsls	r3, r1, #1
 800a9c6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800a9ca:	d8ee      	bhi.n	800a9aa <powf+0xe2>
 800a9cc:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800a9d0:	d1eb      	bne.n	800a9aa <powf+0xe2>
 800a9d2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a9d6:	f000 8096 	beq.w	800ab06 <powf+0x23e>
 800a9da:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a9de:	ea6f 0404 	mvn.w	r4, r4
 800a9e2:	bf34      	ite	cc
 800a9e4:	2300      	movcc	r3, #0
 800a9e6:	2301      	movcs	r3, #1
 800a9e8:	0fe4      	lsrs	r4, r4, #31
 800a9ea:	42a3      	cmp	r3, r4
 800a9ec:	f040 808e 	bne.w	800ab0c <powf+0x244>
 800a9f0:	ee24 0aa4 	vmul.f32	s0, s9, s9
 800a9f4:	e7db      	b.n	800a9ae <powf+0xe6>
 800a9f6:	004d      	lsls	r5, r1, #1
 800a9f8:	1e6a      	subs	r2, r5, #1
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d91b      	bls.n	800aa36 <powf+0x16e>
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	ee20 0a00 	vmul.f32	s0, s0, s0
 800aa04:	da0e      	bge.n	800aa24 <powf+0x15c>
 800aa06:	ee10 0a90 	vmov	r0, s1
 800aa0a:	f7ff ff45 	bl	800a898 <checkint>
 800aa0e:	2801      	cmp	r0, #1
 800aa10:	d108      	bne.n	800aa24 <powf+0x15c>
 800aa12:	eeb1 0a40 	vneg.f32	s0, s0
 800aa16:	b93d      	cbnz	r5, 800aa28 <powf+0x160>
 800aa18:	2c00      	cmp	r4, #0
 800aa1a:	dac8      	bge.n	800a9ae <powf+0xe6>
 800aa1c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800aa20:	f000 bf18 	b.w	800b854 <__math_divzerof>
 800aa24:	2000      	movs	r0, #0
 800aa26:	e7f6      	b.n	800aa16 <powf+0x14e>
 800aa28:	2c00      	cmp	r4, #0
 800aa2a:	dac0      	bge.n	800a9ae <powf+0xe6>
 800aa2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aa30:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800aa34:	e7bb      	b.n	800a9ae <powf+0xe6>
 800aa36:	2900      	cmp	r1, #0
 800aa38:	da1e      	bge.n	800aa78 <powf+0x1b0>
 800aa3a:	ee10 0a90 	vmov	r0, s1
 800aa3e:	f7ff ff2b 	bl	800a898 <checkint>
 800aa42:	b918      	cbnz	r0, 800aa4c <powf+0x184>
 800aa44:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800aa48:	f000 bf14 	b.w	800b874 <__math_invalidf>
 800aa4c:	2801      	cmp	r0, #1
 800aa4e:	bf0c      	ite	eq
 800aa50:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800aa54:	2000      	movne	r0, #0
 800aa56:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aa5a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800aa5e:	f4bf af47 	bcs.w	800a8f0 <powf+0x28>
 800aa62:	eddf 0a35 	vldr	s1, [pc, #212]	; 800ab38 <powf+0x270>
 800aa66:	ee20 0a20 	vmul.f32	s0, s0, s1
 800aa6a:	ee10 3a10 	vmov	r3, s0
 800aa6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa72:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800aa76:	e73b      	b.n	800a8f0 <powf+0x28>
 800aa78:	2000      	movs	r0, #0
 800aa7a:	e7ee      	b.n	800aa5a <powf+0x192>
 800aa7c:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800ab20 <powf+0x258>
 800aa80:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800aa84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa88:	d803      	bhi.n	800aa92 <powf+0x1ca>
 800aa8a:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800aa8e:	f000 becf 	b.w	800b830 <__math_uflowf>
 800aa92:	ed9f 7b25 	vldr	d7, [pc, #148]	; 800ab28 <powf+0x260>
 800aa96:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800aa9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa9e:	d503      	bpl.n	800aaa8 <powf+0x1e0>
 800aaa0:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800aaa4:	f000 beca 	b.w	800b83c <__math_may_uflowf>
 800aaa8:	4924      	ldr	r1, [pc, #144]	; (800ab3c <powf+0x274>)
 800aaaa:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 800aaae:	ee30 6b07 	vadd.f64	d6, d0, d7
 800aab2:	ec55 4b16 	vmov	r4, r5, d6
 800aab6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800aaba:	f004 021f 	and.w	r2, r4, #31
 800aabe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800aac2:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 800aac6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800aaca:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800aace:	e9d2 6700 	ldrd	r6, r7, [r2]
 800aad2:	eea0 7b06 	vfma.f64	d7, d0, d6
 800aad6:	1824      	adds	r4, r4, r0
 800aad8:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800aadc:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 800aae0:	2000      	movs	r0, #0
 800aae2:	1982      	adds	r2, r0, r6
 800aae4:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 800aae8:	eb41 0307 	adc.w	r3, r1, r7
 800aaec:	eea0 6b05 	vfma.f64	d6, d0, d5
 800aaf0:	ee20 0b00 	vmul.f64	d0, d0, d0
 800aaf4:	eea6 7b00 	vfma.f64	d7, d6, d0
 800aaf8:	ec43 2b16 	vmov	d6, r2, r3
 800aafc:	ee27 0b06 	vmul.f64	d0, d7, d6
 800ab00:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ab04:	e753      	b.n	800a9ae <powf+0xe6>
 800ab06:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ab0a:	e750      	b.n	800a9ae <powf+0xe6>
 800ab0c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ab40 <powf+0x278>
 800ab10:	e74d      	b.n	800a9ae <powf+0xe6>
 800ab12:	bf00      	nop
 800ab14:	f3af 8000 	nop.w
 800ab18:	ffd1d571 	.word	0xffd1d571
 800ab1c:	405fffff 	.word	0x405fffff
 800ab20:	00000000 	.word	0x00000000
 800ab24:	c062c000 	.word	0xc062c000
 800ab28:	00000000 	.word	0x00000000
 800ab2c:	c062a000 	.word	0xc062a000
 800ab30:	fefffffe 	.word	0xfefffffe
 800ab34:	0800bf90 	.word	0x0800bf90
 800ab38:	4b000000 	.word	0x4b000000
 800ab3c:	0800bd28 	.word	0x0800bd28
 800ab40:	00000000 	.word	0x00000000

0800ab44 <tanf>:
 800ab44:	ee10 3a10 	vmov	r3, s0
 800ab48:	b507      	push	{r0, r1, r2, lr}
 800ab4a:	4a10      	ldr	r2, [pc, #64]	; (800ab8c <tanf+0x48>)
 800ab4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab50:	4293      	cmp	r3, r2
 800ab52:	dc05      	bgt.n	800ab60 <tanf+0x1c>
 800ab54:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800ab90 <tanf+0x4c>
 800ab58:	2001      	movs	r0, #1
 800ab5a:	f000 fd6b 	bl	800b634 <__kernel_tanf>
 800ab5e:	e004      	b.n	800ab6a <tanf+0x26>
 800ab60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ab64:	db04      	blt.n	800ab70 <tanf+0x2c>
 800ab66:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ab6a:	b003      	add	sp, #12
 800ab6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab70:	4668      	mov	r0, sp
 800ab72:	f000 f943 	bl	800adfc <__ieee754_rem_pio2f>
 800ab76:	0040      	lsls	r0, r0, #1
 800ab78:	f000 0002 	and.w	r0, r0, #2
 800ab7c:	f1c0 0001 	rsb	r0, r0, #1
 800ab80:	eddd 0a01 	vldr	s1, [sp, #4]
 800ab84:	ed9d 0a00 	vldr	s0, [sp]
 800ab88:	e7e7      	b.n	800ab5a <tanf+0x16>
 800ab8a:	bf00      	nop
 800ab8c:	3f490fda 	.word	0x3f490fda
 800ab90:	00000000 	.word	0x00000000

0800ab94 <log10f>:
 800ab94:	b500      	push	{lr}
 800ab96:	ed2d 8b02 	vpush	{d8}
 800ab9a:	b08b      	sub	sp, #44	; 0x2c
 800ab9c:	eeb0 8a40 	vmov.f32	s16, s0
 800aba0:	f000 f8d6 	bl	800ad50 <__ieee754_log10f>
 800aba4:	4b2f      	ldr	r3, [pc, #188]	; (800ac64 <log10f+0xd0>)
 800aba6:	f993 3000 	ldrsb.w	r3, [r3]
 800abaa:	1c5a      	adds	r2, r3, #1
 800abac:	d055      	beq.n	800ac5a <log10f+0xc6>
 800abae:	eeb4 8a48 	vcmp.f32	s16, s16
 800abb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb6:	d650      	bvs.n	800ac5a <log10f+0xc6>
 800abb8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800abbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc0:	d84b      	bhi.n	800ac5a <log10f+0xc6>
 800abc2:	4a29      	ldr	r2, [pc, #164]	; (800ac68 <log10f+0xd4>)
 800abc4:	9201      	str	r2, [sp, #4]
 800abc6:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 800abca:	2200      	movs	r2, #0
 800abcc:	9208      	str	r2, [sp, #32]
 800abce:	ed8d 7b04 	vstr	d7, [sp, #16]
 800abd2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800abd6:	b993      	cbnz	r3, 800abfe <log10f+0x6a>
 800abd8:	4924      	ldr	r1, [pc, #144]	; (800ac6c <log10f+0xd8>)
 800abda:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800abde:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800abe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800abea:	d025      	beq.n	800ac38 <log10f+0xa4>
 800abec:	2201      	movs	r2, #1
 800abee:	2b02      	cmp	r3, #2
 800abf0:	9200      	str	r2, [sp, #0]
 800abf2:	d116      	bne.n	800ac22 <log10f+0x8e>
 800abf4:	f7ff f8ae 	bl	8009d54 <__errno>
 800abf8:	2321      	movs	r3, #33	; 0x21
 800abfa:	6003      	str	r3, [r0, #0]
 800abfc:	e016      	b.n	800ac2c <log10f+0x98>
 800abfe:	491c      	ldr	r1, [pc, #112]	; (800ac70 <log10f+0xdc>)
 800ac00:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ac04:	2000      	movs	r0, #0
 800ac06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac0e:	d1ed      	bne.n	800abec <log10f+0x58>
 800ac10:	2202      	movs	r2, #2
 800ac12:	4293      	cmp	r3, r2
 800ac14:	9200      	str	r2, [sp, #0]
 800ac16:	d111      	bne.n	800ac3c <log10f+0xa8>
 800ac18:	f7ff f89c 	bl	8009d54 <__errno>
 800ac1c:	2322      	movs	r3, #34	; 0x22
 800ac1e:	6003      	str	r3, [r0, #0]
 800ac20:	e011      	b.n	800ac46 <log10f+0xb2>
 800ac22:	4668      	mov	r0, sp
 800ac24:	f000 fe35 	bl	800b892 <matherr>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d0e3      	beq.n	800abf4 <log10f+0x60>
 800ac2c:	4811      	ldr	r0, [pc, #68]	; (800ac74 <log10f+0xe0>)
 800ac2e:	f000 fe33 	bl	800b898 <nan>
 800ac32:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ac36:	e006      	b.n	800ac46 <log10f+0xb2>
 800ac38:	2302      	movs	r3, #2
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	4668      	mov	r0, sp
 800ac3e:	f000 fe28 	bl	800b892 <matherr>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d0e8      	beq.n	800ac18 <log10f+0x84>
 800ac46:	9b08      	ldr	r3, [sp, #32]
 800ac48:	b11b      	cbz	r3, 800ac52 <log10f+0xbe>
 800ac4a:	f7ff f883 	bl	8009d54 <__errno>
 800ac4e:	9b08      	ldr	r3, [sp, #32]
 800ac50:	6003      	str	r3, [r0, #0]
 800ac52:	ed9d 0b06 	vldr	d0, [sp, #24]
 800ac56:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ac5a:	b00b      	add	sp, #44	; 0x2c
 800ac5c:	ecbd 8b02 	vpop	{d8}
 800ac60:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac64:	200000a4 	.word	0x200000a4
 800ac68:	0800c0b8 	.word	0x0800c0b8
 800ac6c:	c7efffff 	.word	0xc7efffff
 800ac70:	fff00000 	.word	0xfff00000
 800ac74:	0800c0be 	.word	0x0800c0be

0800ac78 <sinhf>:
 800ac78:	b530      	push	{r4, r5, lr}
 800ac7a:	ed2d 8b02 	vpush	{d8}
 800ac7e:	4c32      	ldr	r4, [pc, #200]	; (800ad48 <sinhf+0xd0>)
 800ac80:	b08b      	sub	sp, #44	; 0x2c
 800ac82:	eef0 8a40 	vmov.f32	s17, s0
 800ac86:	f000 f9e5 	bl	800b054 <__ieee754_sinhf>
 800ac8a:	f994 3000 	ldrsb.w	r3, [r4]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	eeb0 8a40 	vmov.f32	s16, s0
 800ac94:	d030      	beq.n	800acf8 <sinhf+0x80>
 800ac96:	f000 ff31 	bl	800bafc <finitef>
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	bb60      	cbnz	r0, 800acf8 <sinhf+0x80>
 800ac9e:	eeb0 0a68 	vmov.f32	s0, s17
 800aca2:	f000 ff2b 	bl	800bafc <finitef>
 800aca6:	b338      	cbz	r0, 800acf8 <sinhf+0x80>
 800aca8:	2303      	movs	r3, #3
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	4b27      	ldr	r3, [pc, #156]	; (800ad4c <sinhf+0xd4>)
 800acae:	9301      	str	r3, [sp, #4]
 800acb0:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 800acb4:	f994 3000 	ldrsb.w	r3, [r4]
 800acb8:	9508      	str	r5, [sp, #32]
 800acba:	ed8d 7b04 	vstr	d7, [sp, #16]
 800acbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800acc2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800acc6:	b9eb      	cbnz	r3, 800ad04 <sinhf+0x8c>
 800acc8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800ad28 <sinhf+0xb0>
 800accc:	ed9f 6b18 	vldr	d6, [pc, #96]	; 800ad30 <sinhf+0xb8>
 800acd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd4:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800acd8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800acdc:	4668      	mov	r0, sp
 800acde:	f000 fdd8 	bl	800b892 <matherr>
 800ace2:	b1d8      	cbz	r0, 800ad1c <sinhf+0xa4>
 800ace4:	9b08      	ldr	r3, [sp, #32]
 800ace6:	b11b      	cbz	r3, 800acf0 <sinhf+0x78>
 800ace8:	f7ff f834 	bl	8009d54 <__errno>
 800acec:	9b08      	ldr	r3, [sp, #32]
 800acee:	6003      	str	r3, [r0, #0]
 800acf0:	ed9d 8b06 	vldr	d8, [sp, #24]
 800acf4:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 800acf8:	eeb0 0a48 	vmov.f32	s0, s16
 800acfc:	b00b      	add	sp, #44	; 0x2c
 800acfe:	ecbd 8b02 	vpop	{d8}
 800ad02:	bd30      	pop	{r4, r5, pc}
 800ad04:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ad38 <sinhf+0xc0>
 800ad08:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800ad40 <sinhf+0xc8>
 800ad0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad10:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad1a:	d1df      	bne.n	800acdc <sinhf+0x64>
 800ad1c:	f7ff f81a 	bl	8009d54 <__errno>
 800ad20:	2322      	movs	r3, #34	; 0x22
 800ad22:	6003      	str	r3, [r0, #0]
 800ad24:	e7de      	b.n	800ace4 <sinhf+0x6c>
 800ad26:	bf00      	nop
 800ad28:	e0000000 	.word	0xe0000000
 800ad2c:	47efffff 	.word	0x47efffff
 800ad30:	e0000000 	.word	0xe0000000
 800ad34:	c7efffff 	.word	0xc7efffff
 800ad38:	00000000 	.word	0x00000000
 800ad3c:	7ff00000 	.word	0x7ff00000
 800ad40:	00000000 	.word	0x00000000
 800ad44:	fff00000 	.word	0xfff00000
 800ad48:	200000a4 	.word	0x200000a4
 800ad4c:	0800c0bf 	.word	0x0800c0bf

0800ad50 <__ieee754_log10f>:
 800ad50:	b508      	push	{r3, lr}
 800ad52:	ee10 2a10 	vmov	r2, s0
 800ad56:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800ad5a:	ed2d 8b02 	vpush	{d8}
 800ad5e:	d108      	bne.n	800ad72 <__ieee754_log10f+0x22>
 800ad60:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800ade4 <__ieee754_log10f+0x94>
 800ad64:	eddf 7a20 	vldr	s15, [pc, #128]	; 800ade8 <__ieee754_log10f+0x98>
 800ad68:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ad6c:	ecbd 8b02 	vpop	{d8}
 800ad70:	bd08      	pop	{r3, pc}
 800ad72:	2a00      	cmp	r2, #0
 800ad74:	da02      	bge.n	800ad7c <__ieee754_log10f+0x2c>
 800ad76:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ad7a:	e7f3      	b.n	800ad64 <__ieee754_log10f+0x14>
 800ad7c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ad80:	db02      	blt.n	800ad88 <__ieee754_log10f+0x38>
 800ad82:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ad86:	e7f1      	b.n	800ad6c <__ieee754_log10f+0x1c>
 800ad88:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800ad8c:	bfbf      	itttt	lt
 800ad8e:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 800adec <__ieee754_log10f+0x9c>
 800ad92:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800ad96:	f06f 0118 	mvnlt.w	r1, #24
 800ad9a:	ee17 2a90 	vmovlt	r2, s15
 800ad9e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800ada2:	bfa8      	it	ge
 800ada4:	2100      	movge	r1, #0
 800ada6:	3b7f      	subs	r3, #127	; 0x7f
 800ada8:	440b      	add	r3, r1
 800adaa:	0fd9      	lsrs	r1, r3, #31
 800adac:	440b      	add	r3, r1
 800adae:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800adb2:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 800adb6:	ee07 3a90 	vmov	s15, r3
 800adba:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 800adbe:	ee00 3a10 	vmov	s0, r3
 800adc2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800adc6:	f7ff fcff 	bl	800a7c8 <logf>
 800adca:	eddf 7a09 	vldr	s15, [pc, #36]	; 800adf0 <__ieee754_log10f+0xa0>
 800adce:	ee20 0a27 	vmul.f32	s0, s0, s15
 800add2:	eddf 7a08 	vldr	s15, [pc, #32]	; 800adf4 <__ieee754_log10f+0xa4>
 800add6:	eea8 0a27 	vfma.f32	s0, s16, s15
 800adda:	eddf 7a07 	vldr	s15, [pc, #28]	; 800adf8 <__ieee754_log10f+0xa8>
 800adde:	eea8 0a27 	vfma.f32	s0, s16, s15
 800ade2:	e7c3      	b.n	800ad6c <__ieee754_log10f+0x1c>
 800ade4:	cc000000 	.word	0xcc000000
 800ade8:	00000000 	.word	0x00000000
 800adec:	4c000000 	.word	0x4c000000
 800adf0:	3ede5bd9 	.word	0x3ede5bd9
 800adf4:	355427db 	.word	0x355427db
 800adf8:	3e9a2080 	.word	0x3e9a2080

0800adfc <__ieee754_rem_pio2f>:
 800adfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adfe:	ee10 6a10 	vmov	r6, s0
 800ae02:	4b86      	ldr	r3, [pc, #536]	; (800b01c <__ieee754_rem_pio2f+0x220>)
 800ae04:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800ae08:	429c      	cmp	r4, r3
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	4605      	mov	r5, r0
 800ae0e:	dc05      	bgt.n	800ae1c <__ieee754_rem_pio2f+0x20>
 800ae10:	2300      	movs	r3, #0
 800ae12:	ed85 0a00 	vstr	s0, [r5]
 800ae16:	6043      	str	r3, [r0, #4]
 800ae18:	2000      	movs	r0, #0
 800ae1a:	e020      	b.n	800ae5e <__ieee754_rem_pio2f+0x62>
 800ae1c:	4b80      	ldr	r3, [pc, #512]	; (800b020 <__ieee754_rem_pio2f+0x224>)
 800ae1e:	429c      	cmp	r4, r3
 800ae20:	dc38      	bgt.n	800ae94 <__ieee754_rem_pio2f+0x98>
 800ae22:	2e00      	cmp	r6, #0
 800ae24:	f024 040f 	bic.w	r4, r4, #15
 800ae28:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800b024 <__ieee754_rem_pio2f+0x228>
 800ae2c:	4b7e      	ldr	r3, [pc, #504]	; (800b028 <__ieee754_rem_pio2f+0x22c>)
 800ae2e:	dd18      	ble.n	800ae62 <__ieee754_rem_pio2f+0x66>
 800ae30:	429c      	cmp	r4, r3
 800ae32:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ae36:	bf09      	itett	eq
 800ae38:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800b02c <__ieee754_rem_pio2f+0x230>
 800ae3c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800b030 <__ieee754_rem_pio2f+0x234>
 800ae40:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ae44:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800b034 <__ieee754_rem_pio2f+0x238>
 800ae48:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ae4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ae50:	edc0 6a00 	vstr	s13, [r0]
 800ae54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae58:	edc0 7a01 	vstr	s15, [r0, #4]
 800ae5c:	2001      	movs	r0, #1
 800ae5e:	b007      	add	sp, #28
 800ae60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae62:	429c      	cmp	r4, r3
 800ae64:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ae68:	bf09      	itett	eq
 800ae6a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800b02c <__ieee754_rem_pio2f+0x230>
 800ae6e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800b030 <__ieee754_rem_pio2f+0x234>
 800ae72:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ae76:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800b034 <__ieee754_rem_pio2f+0x238>
 800ae7a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ae7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ae82:	edc0 6a00 	vstr	s13, [r0]
 800ae86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae8a:	edc0 7a01 	vstr	s15, [r0, #4]
 800ae8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae92:	e7e4      	b.n	800ae5e <__ieee754_rem_pio2f+0x62>
 800ae94:	4b68      	ldr	r3, [pc, #416]	; (800b038 <__ieee754_rem_pio2f+0x23c>)
 800ae96:	429c      	cmp	r4, r3
 800ae98:	dc71      	bgt.n	800af7e <__ieee754_rem_pio2f+0x182>
 800ae9a:	f7ff fc8d 	bl	800a7b8 <fabsf>
 800ae9e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b03c <__ieee754_rem_pio2f+0x240>
 800aea2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800aea6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800aeaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aeae:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800aeb2:	ee17 0a90 	vmov	r0, s15
 800aeb6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b024 <__ieee754_rem_pio2f+0x228>
 800aeba:	eeb1 7a46 	vneg.f32	s14, s12
 800aebe:	eea7 0a27 	vfma.f32	s0, s14, s15
 800aec2:	281f      	cmp	r0, #31
 800aec4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b030 <__ieee754_rem_pio2f+0x234>
 800aec8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800aecc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800aed0:	ee16 3a90 	vmov	r3, s13
 800aed4:	dc1c      	bgt.n	800af10 <__ieee754_rem_pio2f+0x114>
 800aed6:	1e47      	subs	r7, r0, #1
 800aed8:	4959      	ldr	r1, [pc, #356]	; (800b040 <__ieee754_rem_pio2f+0x244>)
 800aeda:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800aede:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800aee2:	428a      	cmp	r2, r1
 800aee4:	d014      	beq.n	800af10 <__ieee754_rem_pio2f+0x114>
 800aee6:	602b      	str	r3, [r5, #0]
 800aee8:	ed95 7a00 	vldr	s14, [r5]
 800aeec:	ee30 0a47 	vsub.f32	s0, s0, s14
 800aef0:	2e00      	cmp	r6, #0
 800aef2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aef6:	ed85 0a01 	vstr	s0, [r5, #4]
 800aefa:	dab0      	bge.n	800ae5e <__ieee754_rem_pio2f+0x62>
 800aefc:	eeb1 7a47 	vneg.f32	s14, s14
 800af00:	eeb1 0a40 	vneg.f32	s0, s0
 800af04:	ed85 7a00 	vstr	s14, [r5]
 800af08:	ed85 0a01 	vstr	s0, [r5, #4]
 800af0c:	4240      	negs	r0, r0
 800af0e:	e7a6      	b.n	800ae5e <__ieee754_rem_pio2f+0x62>
 800af10:	15e4      	asrs	r4, r4, #23
 800af12:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800af16:	1aa2      	subs	r2, r4, r2
 800af18:	2a08      	cmp	r2, #8
 800af1a:	dde4      	ble.n	800aee6 <__ieee754_rem_pio2f+0xea>
 800af1c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b02c <__ieee754_rem_pio2f+0x230>
 800af20:	eef0 6a40 	vmov.f32	s13, s0
 800af24:	eee7 6a27 	vfma.f32	s13, s14, s15
 800af28:	ee30 0a66 	vsub.f32	s0, s0, s13
 800af2c:	eea7 0a27 	vfma.f32	s0, s14, s15
 800af30:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b034 <__ieee754_rem_pio2f+0x238>
 800af34:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800af38:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800af3c:	eef0 7a40 	vmov.f32	s15, s0
 800af40:	ee15 3a90 	vmov	r3, s11
 800af44:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800af48:	1aa4      	subs	r4, r4, r2
 800af4a:	2c19      	cmp	r4, #25
 800af4c:	dc04      	bgt.n	800af58 <__ieee754_rem_pio2f+0x15c>
 800af4e:	edc5 5a00 	vstr	s11, [r5]
 800af52:	eeb0 0a66 	vmov.f32	s0, s13
 800af56:	e7c7      	b.n	800aee8 <__ieee754_rem_pio2f+0xec>
 800af58:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b044 <__ieee754_rem_pio2f+0x248>
 800af5c:	eeb0 0a66 	vmov.f32	s0, s13
 800af60:	eea7 0a25 	vfma.f32	s0, s14, s11
 800af64:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800af68:	eee7 7a25 	vfma.f32	s15, s14, s11
 800af6c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b048 <__ieee754_rem_pio2f+0x24c>
 800af70:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800af74:	ee30 7a67 	vsub.f32	s14, s0, s15
 800af78:	ed85 7a00 	vstr	s14, [r5]
 800af7c:	e7b4      	b.n	800aee8 <__ieee754_rem_pio2f+0xec>
 800af7e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800af82:	db06      	blt.n	800af92 <__ieee754_rem_pio2f+0x196>
 800af84:	ee70 7a40 	vsub.f32	s15, s0, s0
 800af88:	edc0 7a01 	vstr	s15, [r0, #4]
 800af8c:	edc0 7a00 	vstr	s15, [r0]
 800af90:	e742      	b.n	800ae18 <__ieee754_rem_pio2f+0x1c>
 800af92:	15e2      	asrs	r2, r4, #23
 800af94:	3a86      	subs	r2, #134	; 0x86
 800af96:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800af9a:	ee07 3a90 	vmov	s15, r3
 800af9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800afa2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800b04c <__ieee754_rem_pio2f+0x250>
 800afa6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800afaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afae:	ed8d 7a03 	vstr	s14, [sp, #12]
 800afb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800afb6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800afba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800afbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afc2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800afc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800afca:	eef5 7a40 	vcmp.f32	s15, #0.0
 800afce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd2:	edcd 7a05 	vstr	s15, [sp, #20]
 800afd6:	d11e      	bne.n	800b016 <__ieee754_rem_pio2f+0x21a>
 800afd8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800afdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afe0:	bf0c      	ite	eq
 800afe2:	2301      	moveq	r3, #1
 800afe4:	2302      	movne	r3, #2
 800afe6:	491a      	ldr	r1, [pc, #104]	; (800b050 <__ieee754_rem_pio2f+0x254>)
 800afe8:	9101      	str	r1, [sp, #4]
 800afea:	2102      	movs	r1, #2
 800afec:	9100      	str	r1, [sp, #0]
 800afee:	a803      	add	r0, sp, #12
 800aff0:	4629      	mov	r1, r5
 800aff2:	f000 f89d 	bl	800b130 <__kernel_rem_pio2f>
 800aff6:	2e00      	cmp	r6, #0
 800aff8:	f6bf af31 	bge.w	800ae5e <__ieee754_rem_pio2f+0x62>
 800affc:	edd5 7a00 	vldr	s15, [r5]
 800b000:	eef1 7a67 	vneg.f32	s15, s15
 800b004:	edc5 7a00 	vstr	s15, [r5]
 800b008:	edd5 7a01 	vldr	s15, [r5, #4]
 800b00c:	eef1 7a67 	vneg.f32	s15, s15
 800b010:	edc5 7a01 	vstr	s15, [r5, #4]
 800b014:	e77a      	b.n	800af0c <__ieee754_rem_pio2f+0x110>
 800b016:	2303      	movs	r3, #3
 800b018:	e7e5      	b.n	800afe6 <__ieee754_rem_pio2f+0x1ea>
 800b01a:	bf00      	nop
 800b01c:	3f490fd8 	.word	0x3f490fd8
 800b020:	4016cbe3 	.word	0x4016cbe3
 800b024:	3fc90f80 	.word	0x3fc90f80
 800b028:	3fc90fd0 	.word	0x3fc90fd0
 800b02c:	37354400 	.word	0x37354400
 800b030:	37354443 	.word	0x37354443
 800b034:	2e85a308 	.word	0x2e85a308
 800b038:	43490f80 	.word	0x43490f80
 800b03c:	3f22f984 	.word	0x3f22f984
 800b040:	0800c0c8 	.word	0x0800c0c8
 800b044:	2e85a300 	.word	0x2e85a300
 800b048:	248d3132 	.word	0x248d3132
 800b04c:	43800000 	.word	0x43800000
 800b050:	0800c148 	.word	0x0800c148

0800b054 <__ieee754_sinhf>:
 800b054:	b510      	push	{r4, lr}
 800b056:	ee10 3a10 	vmov	r3, s0
 800b05a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b05e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b062:	ed2d 8b02 	vpush	{d8}
 800b066:	eef0 7a40 	vmov.f32	s15, s0
 800b06a:	db06      	blt.n	800b07a <__ieee754_sinhf+0x26>
 800b06c:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b070:	ecbd 8b02 	vpop	{d8}
 800b074:	eeb0 0a67 	vmov.f32	s0, s15
 800b078:	bd10      	pop	{r4, pc}
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	4b28      	ldr	r3, [pc, #160]	; (800b120 <__ieee754_sinhf+0xcc>)
 800b07e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800b082:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800b086:	fe28 8a88 	vselge.f32	s16, s17, s16
 800b08a:	429c      	cmp	r4, r3
 800b08c:	dc2a      	bgt.n	800b0e4 <__ieee754_sinhf+0x90>
 800b08e:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 800b092:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b096:	da08      	bge.n	800b0aa <__ieee754_sinhf+0x56>
 800b098:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800b124 <__ieee754_sinhf+0xd0>
 800b09c:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b0a0:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800b0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a8:	dce2      	bgt.n	800b070 <__ieee754_sinhf+0x1c>
 800b0aa:	eeb0 0a67 	vmov.f32	s0, s15
 800b0ae:	f7ff fb83 	bl	800a7b8 <fabsf>
 800b0b2:	f000 fbf9 	bl	800b8a8 <expm1f>
 800b0b6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b0ba:	bfbb      	ittet	lt
 800b0bc:	ee20 7a00 	vmullt.f32	s14, s0, s0
 800b0c0:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 800b0c4:	ee70 8a28 	vaddge.f32	s17, s0, s17
 800b0c8:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 800b0cc:	bfad      	iteet	ge
 800b0ce:	eec0 7a28 	vdivge.f32	s15, s0, s17
 800b0d2:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 800b0d6:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 800b0da:	ee77 7a80 	vaddge.f32	s15, s15, s0
 800b0de:	ee67 7a88 	vmul.f32	s15, s15, s16
 800b0e2:	e7c5      	b.n	800b070 <__ieee754_sinhf+0x1c>
 800b0e4:	4b10      	ldr	r3, [pc, #64]	; (800b128 <__ieee754_sinhf+0xd4>)
 800b0e6:	429c      	cmp	r4, r3
 800b0e8:	dc06      	bgt.n	800b0f8 <__ieee754_sinhf+0xa4>
 800b0ea:	f7ff fb65 	bl	800a7b8 <fabsf>
 800b0ee:	f7ff fae5 	bl	800a6bc <expf>
 800b0f2:	ee60 7a08 	vmul.f32	s15, s0, s16
 800b0f6:	e7bb      	b.n	800b070 <__ieee754_sinhf+0x1c>
 800b0f8:	4b0c      	ldr	r3, [pc, #48]	; (800b12c <__ieee754_sinhf+0xd8>)
 800b0fa:	429c      	cmp	r4, r3
 800b0fc:	dc0a      	bgt.n	800b114 <__ieee754_sinhf+0xc0>
 800b0fe:	f7ff fb5b 	bl	800a7b8 <fabsf>
 800b102:	ee20 0a28 	vmul.f32	s0, s0, s17
 800b106:	f7ff fad9 	bl	800a6bc <expf>
 800b10a:	ee68 7a00 	vmul.f32	s15, s16, s0
 800b10e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b112:	e7ad      	b.n	800b070 <__ieee754_sinhf+0x1c>
 800b114:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800b124 <__ieee754_sinhf+0xd0>
 800b118:	ee60 7a07 	vmul.f32	s15, s0, s14
 800b11c:	e7a8      	b.n	800b070 <__ieee754_sinhf+0x1c>
 800b11e:	bf00      	nop
 800b120:	41afffff 	.word	0x41afffff
 800b124:	7cf0bdc2 	.word	0x7cf0bdc2
 800b128:	42b17217 	.word	0x42b17217
 800b12c:	42b2d4fc 	.word	0x42b2d4fc

0800b130 <__kernel_rem_pio2f>:
 800b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	ed2d 8b04 	vpush	{d8-d9}
 800b138:	b0d7      	sub	sp, #348	; 0x15c
 800b13a:	469b      	mov	fp, r3
 800b13c:	460e      	mov	r6, r1
 800b13e:	4bbe      	ldr	r3, [pc, #760]	; (800b438 <__kernel_rem_pio2f+0x308>)
 800b140:	9964      	ldr	r1, [sp, #400]	; 0x190
 800b142:	9002      	str	r0, [sp, #8]
 800b144:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800b148:	9865      	ldr	r0, [sp, #404]	; 0x194
 800b14a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800b448 <__kernel_rem_pio2f+0x318>
 800b14e:	1ed1      	subs	r1, r2, #3
 800b150:	2308      	movs	r3, #8
 800b152:	fb91 f1f3 	sdiv	r1, r1, r3
 800b156:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800b15a:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800b15e:	1c4c      	adds	r4, r1, #1
 800b160:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800b164:	eba1 050a 	sub.w	r5, r1, sl
 800b168:	aa1a      	add	r2, sp, #104	; 0x68
 800b16a:	eb09 070a 	add.w	r7, r9, sl
 800b16e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800b172:	4696      	mov	lr, r2
 800b174:	2300      	movs	r3, #0
 800b176:	42bb      	cmp	r3, r7
 800b178:	dd0f      	ble.n	800b19a <__kernel_rem_pio2f+0x6a>
 800b17a:	af42      	add	r7, sp, #264	; 0x108
 800b17c:	2200      	movs	r2, #0
 800b17e:	454a      	cmp	r2, r9
 800b180:	dc27      	bgt.n	800b1d2 <__kernel_rem_pio2f+0xa2>
 800b182:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800b186:	eb0b 0302 	add.w	r3, fp, r2
 800b18a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800b18e:	9d02      	ldr	r5, [sp, #8]
 800b190:	eddf 7aad 	vldr	s15, [pc, #692]	; 800b448 <__kernel_rem_pio2f+0x318>
 800b194:	f04f 0c00 	mov.w	ip, #0
 800b198:	e015      	b.n	800b1c6 <__kernel_rem_pio2f+0x96>
 800b19a:	42dd      	cmn	r5, r3
 800b19c:	bf5d      	ittte	pl
 800b19e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800b1a2:	ee07 2a90 	vmovpl	s15, r2
 800b1a6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b1aa:	eef0 7a47 	vmovmi.f32	s15, s14
 800b1ae:	ecee 7a01 	vstmia	lr!, {s15}
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	e7df      	b.n	800b176 <__kernel_rem_pio2f+0x46>
 800b1b6:	ecf5 6a01 	vldmia	r5!, {s13}
 800b1ba:	ed33 7a01 	vldmdb	r3!, {s14}
 800b1be:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b1c2:	f10c 0c01 	add.w	ip, ip, #1
 800b1c6:	45d4      	cmp	ip, sl
 800b1c8:	ddf5      	ble.n	800b1b6 <__kernel_rem_pio2f+0x86>
 800b1ca:	ece7 7a01 	vstmia	r7!, {s15}
 800b1ce:	3201      	adds	r2, #1
 800b1d0:	e7d5      	b.n	800b17e <__kernel_rem_pio2f+0x4e>
 800b1d2:	ab06      	add	r3, sp, #24
 800b1d4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b1d8:	9304      	str	r3, [sp, #16]
 800b1da:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800b444 <__kernel_rem_pio2f+0x314>
 800b1de:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800b440 <__kernel_rem_pio2f+0x310>
 800b1e2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800b1e6:	9303      	str	r3, [sp, #12]
 800b1e8:	464d      	mov	r5, r9
 800b1ea:	ab56      	add	r3, sp, #344	; 0x158
 800b1ec:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800b1f0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800b1f4:	3f01      	subs	r7, #1
 800b1f6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800b1fa:	00bf      	lsls	r7, r7, #2
 800b1fc:	ab56      	add	r3, sp, #344	; 0x158
 800b1fe:	19da      	adds	r2, r3, r7
 800b200:	3a4c      	subs	r2, #76	; 0x4c
 800b202:	2300      	movs	r3, #0
 800b204:	1ae9      	subs	r1, r5, r3
 800b206:	2900      	cmp	r1, #0
 800b208:	dc4c      	bgt.n	800b2a4 <__kernel_rem_pio2f+0x174>
 800b20a:	4620      	mov	r0, r4
 800b20c:	f000 fcc2 	bl	800bb94 <scalbnf>
 800b210:	eeb0 8a40 	vmov.f32	s16, s0
 800b214:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b218:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b21c:	f000 fc78 	bl	800bb10 <floorf>
 800b220:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b224:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b228:	2c00      	cmp	r4, #0
 800b22a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b22e:	edcd 7a01 	vstr	s15, [sp, #4]
 800b232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b236:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b23a:	dd48      	ble.n	800b2ce <__kernel_rem_pio2f+0x19e>
 800b23c:	1e69      	subs	r1, r5, #1
 800b23e:	ab06      	add	r3, sp, #24
 800b240:	f1c4 0008 	rsb	r0, r4, #8
 800b244:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800b248:	9a01      	ldr	r2, [sp, #4]
 800b24a:	fa4c f300 	asr.w	r3, ip, r0
 800b24e:	441a      	add	r2, r3
 800b250:	4083      	lsls	r3, r0
 800b252:	9201      	str	r2, [sp, #4]
 800b254:	ebac 0203 	sub.w	r2, ip, r3
 800b258:	ab06      	add	r3, sp, #24
 800b25a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800b25e:	f1c4 0307 	rsb	r3, r4, #7
 800b262:	fa42 f803 	asr.w	r8, r2, r3
 800b266:	f1b8 0f00 	cmp.w	r8, #0
 800b26a:	dd41      	ble.n	800b2f0 <__kernel_rem_pio2f+0x1c0>
 800b26c:	9b01      	ldr	r3, [sp, #4]
 800b26e:	2000      	movs	r0, #0
 800b270:	3301      	adds	r3, #1
 800b272:	9301      	str	r3, [sp, #4]
 800b274:	4601      	mov	r1, r0
 800b276:	4285      	cmp	r5, r0
 800b278:	dc6d      	bgt.n	800b356 <__kernel_rem_pio2f+0x226>
 800b27a:	2c00      	cmp	r4, #0
 800b27c:	dd04      	ble.n	800b288 <__kernel_rem_pio2f+0x158>
 800b27e:	2c01      	cmp	r4, #1
 800b280:	d07e      	beq.n	800b380 <__kernel_rem_pio2f+0x250>
 800b282:	2c02      	cmp	r4, #2
 800b284:	f000 8086 	beq.w	800b394 <__kernel_rem_pio2f+0x264>
 800b288:	f1b8 0f02 	cmp.w	r8, #2
 800b28c:	d130      	bne.n	800b2f0 <__kernel_rem_pio2f+0x1c0>
 800b28e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b292:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b296:	b359      	cbz	r1, 800b2f0 <__kernel_rem_pio2f+0x1c0>
 800b298:	4620      	mov	r0, r4
 800b29a:	f000 fc7b 	bl	800bb94 <scalbnf>
 800b29e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b2a2:	e025      	b.n	800b2f0 <__kernel_rem_pio2f+0x1c0>
 800b2a4:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b2a8:	a806      	add	r0, sp, #24
 800b2aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2b2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b2b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b2ba:	ee10 1a10 	vmov	r1, s0
 800b2be:	ed32 0a01 	vldmdb	r2!, {s0}
 800b2c2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800b2c6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	e79a      	b.n	800b204 <__kernel_rem_pio2f+0xd4>
 800b2ce:	d106      	bne.n	800b2de <__kernel_rem_pio2f+0x1ae>
 800b2d0:	1e6b      	subs	r3, r5, #1
 800b2d2:	aa06      	add	r2, sp, #24
 800b2d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b2d8:	ea4f 2822 	mov.w	r8, r2, asr #8
 800b2dc:	e7c3      	b.n	800b266 <__kernel_rem_pio2f+0x136>
 800b2de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b2e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ea:	da31      	bge.n	800b350 <__kernel_rem_pio2f+0x220>
 800b2ec:	f04f 0800 	mov.w	r8, #0
 800b2f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f8:	f040 80a8 	bne.w	800b44c <__kernel_rem_pio2f+0x31c>
 800b2fc:	1e6b      	subs	r3, r5, #1
 800b2fe:	4618      	mov	r0, r3
 800b300:	2200      	movs	r2, #0
 800b302:	4548      	cmp	r0, r9
 800b304:	da4d      	bge.n	800b3a2 <__kernel_rem_pio2f+0x272>
 800b306:	2a00      	cmp	r2, #0
 800b308:	f000 8087 	beq.w	800b41a <__kernel_rem_pio2f+0x2ea>
 800b30c:	aa06      	add	r2, sp, #24
 800b30e:	3c08      	subs	r4, #8
 800b310:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b314:	2900      	cmp	r1, #0
 800b316:	f000 808d 	beq.w	800b434 <__kernel_rem_pio2f+0x304>
 800b31a:	4620      	mov	r0, r4
 800b31c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b320:	9302      	str	r3, [sp, #8]
 800b322:	f000 fc37 	bl	800bb94 <scalbnf>
 800b326:	9b02      	ldr	r3, [sp, #8]
 800b328:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b444 <__kernel_rem_pio2f+0x314>
 800b32c:	0099      	lsls	r1, r3, #2
 800b32e:	aa42      	add	r2, sp, #264	; 0x108
 800b330:	1850      	adds	r0, r2, r1
 800b332:	1d05      	adds	r5, r0, #4
 800b334:	461c      	mov	r4, r3
 800b336:	2c00      	cmp	r4, #0
 800b338:	f280 80b8 	bge.w	800b4ac <__kernel_rem_pio2f+0x37c>
 800b33c:	2500      	movs	r5, #0
 800b33e:	1b5c      	subs	r4, r3, r5
 800b340:	2c00      	cmp	r4, #0
 800b342:	f2c0 80d8 	blt.w	800b4f6 <__kernel_rem_pio2f+0x3c6>
 800b346:	4f3d      	ldr	r7, [pc, #244]	; (800b43c <__kernel_rem_pio2f+0x30c>)
 800b348:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800b448 <__kernel_rem_pio2f+0x318>
 800b34c:	2400      	movs	r4, #0
 800b34e:	e0c6      	b.n	800b4de <__kernel_rem_pio2f+0x3ae>
 800b350:	f04f 0802 	mov.w	r8, #2
 800b354:	e78a      	b.n	800b26c <__kernel_rem_pio2f+0x13c>
 800b356:	ab06      	add	r3, sp, #24
 800b358:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b35c:	b949      	cbnz	r1, 800b372 <__kernel_rem_pio2f+0x242>
 800b35e:	b12b      	cbz	r3, 800b36c <__kernel_rem_pio2f+0x23c>
 800b360:	aa06      	add	r2, sp, #24
 800b362:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b366:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b36a:	2301      	movs	r3, #1
 800b36c:	3001      	adds	r0, #1
 800b36e:	4619      	mov	r1, r3
 800b370:	e781      	b.n	800b276 <__kernel_rem_pio2f+0x146>
 800b372:	aa06      	add	r2, sp, #24
 800b374:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800b378:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b37c:	460b      	mov	r3, r1
 800b37e:	e7f5      	b.n	800b36c <__kernel_rem_pio2f+0x23c>
 800b380:	1e68      	subs	r0, r5, #1
 800b382:	ab06      	add	r3, sp, #24
 800b384:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b38c:	aa06      	add	r2, sp, #24
 800b38e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b392:	e779      	b.n	800b288 <__kernel_rem_pio2f+0x158>
 800b394:	1e68      	subs	r0, r5, #1
 800b396:	ab06      	add	r3, sp, #24
 800b398:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b39c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3a0:	e7f4      	b.n	800b38c <__kernel_rem_pio2f+0x25c>
 800b3a2:	a906      	add	r1, sp, #24
 800b3a4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b3a8:	3801      	subs	r0, #1
 800b3aa:	430a      	orrs	r2, r1
 800b3ac:	e7a9      	b.n	800b302 <__kernel_rem_pio2f+0x1d2>
 800b3ae:	f10c 0c01 	add.w	ip, ip, #1
 800b3b2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b3b6:	2a00      	cmp	r2, #0
 800b3b8:	d0f9      	beq.n	800b3ae <__kernel_rem_pio2f+0x27e>
 800b3ba:	eb0b 0305 	add.w	r3, fp, r5
 800b3be:	aa1a      	add	r2, sp, #104	; 0x68
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	1898      	adds	r0, r3, r2
 800b3c4:	3004      	adds	r0, #4
 800b3c6:	1c69      	adds	r1, r5, #1
 800b3c8:	3704      	adds	r7, #4
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	4465      	add	r5, ip
 800b3ce:	9005      	str	r0, [sp, #20]
 800b3d0:	428d      	cmp	r5, r1
 800b3d2:	f6ff af0a 	blt.w	800b1ea <__kernel_rem_pio2f+0xba>
 800b3d6:	a81a      	add	r0, sp, #104	; 0x68
 800b3d8:	eb02 0c03 	add.w	ip, r2, r3
 800b3dc:	4484      	add	ip, r0
 800b3de:	9803      	ldr	r0, [sp, #12]
 800b3e0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b3e4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800b3e8:	9001      	str	r0, [sp, #4]
 800b3ea:	ee07 0a90 	vmov	s15, r0
 800b3ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3f2:	9805      	ldr	r0, [sp, #20]
 800b3f4:	edcc 7a00 	vstr	s15, [ip]
 800b3f8:	eddf 7a13 	vldr	s15, [pc, #76]	; 800b448 <__kernel_rem_pio2f+0x318>
 800b3fc:	eb00 0802 	add.w	r8, r0, r2
 800b400:	f04f 0c00 	mov.w	ip, #0
 800b404:	45d4      	cmp	ip, sl
 800b406:	dd0c      	ble.n	800b422 <__kernel_rem_pio2f+0x2f2>
 800b408:	eb02 0c07 	add.w	ip, r2, r7
 800b40c:	a842      	add	r0, sp, #264	; 0x108
 800b40e:	4484      	add	ip, r0
 800b410:	edcc 7a01 	vstr	s15, [ip, #4]
 800b414:	3101      	adds	r1, #1
 800b416:	3204      	adds	r2, #4
 800b418:	e7da      	b.n	800b3d0 <__kernel_rem_pio2f+0x2a0>
 800b41a:	9b04      	ldr	r3, [sp, #16]
 800b41c:	f04f 0c01 	mov.w	ip, #1
 800b420:	e7c7      	b.n	800b3b2 <__kernel_rem_pio2f+0x282>
 800b422:	ecfe 6a01 	vldmia	lr!, {s13}
 800b426:	ed38 7a01 	vldmdb	r8!, {s14}
 800b42a:	f10c 0c01 	add.w	ip, ip, #1
 800b42e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b432:	e7e7      	b.n	800b404 <__kernel_rem_pio2f+0x2d4>
 800b434:	3b01      	subs	r3, #1
 800b436:	e769      	b.n	800b30c <__kernel_rem_pio2f+0x1dc>
 800b438:	0800c48c 	.word	0x0800c48c
 800b43c:	0800c460 	.word	0x0800c460
 800b440:	43800000 	.word	0x43800000
 800b444:	3b800000 	.word	0x3b800000
 800b448:	00000000 	.word	0x00000000
 800b44c:	4260      	negs	r0, r4
 800b44e:	eeb0 0a48 	vmov.f32	s0, s16
 800b452:	f000 fb9f 	bl	800bb94 <scalbnf>
 800b456:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800b440 <__kernel_rem_pio2f+0x310>
 800b45a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b462:	db1a      	blt.n	800b49a <__kernel_rem_pio2f+0x36a>
 800b464:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b444 <__kernel_rem_pio2f+0x314>
 800b468:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b46c:	aa06      	add	r2, sp, #24
 800b46e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b472:	a906      	add	r1, sp, #24
 800b474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b478:	3408      	adds	r4, #8
 800b47a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b47e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b482:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b486:	ee10 3a10 	vmov	r3, s0
 800b48a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b48e:	1c6b      	adds	r3, r5, #1
 800b490:	ee17 2a90 	vmov	r2, s15
 800b494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b498:	e73f      	b.n	800b31a <__kernel_rem_pio2f+0x1ea>
 800b49a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b49e:	aa06      	add	r2, sp, #24
 800b4a0:	ee10 3a10 	vmov	r3, s0
 800b4a4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b4a8:	462b      	mov	r3, r5
 800b4aa:	e736      	b.n	800b31a <__kernel_rem_pio2f+0x1ea>
 800b4ac:	aa06      	add	r2, sp, #24
 800b4ae:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800b4b2:	9202      	str	r2, [sp, #8]
 800b4b4:	ee07 2a90 	vmov	s15, r2
 800b4b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4bc:	3c01      	subs	r4, #1
 800b4be:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b4c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b4c6:	ed65 7a01 	vstmdb	r5!, {s15}
 800b4ca:	e734      	b.n	800b336 <__kernel_rem_pio2f+0x206>
 800b4cc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800b4d0:	ecf7 6a01 	vldmia	r7!, {s13}
 800b4d4:	ed9c 7a00 	vldr	s14, [ip]
 800b4d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b4dc:	3401      	adds	r4, #1
 800b4de:	454c      	cmp	r4, r9
 800b4e0:	dc01      	bgt.n	800b4e6 <__kernel_rem_pio2f+0x3b6>
 800b4e2:	42a5      	cmp	r5, r4
 800b4e4:	daf2      	bge.n	800b4cc <__kernel_rem_pio2f+0x39c>
 800b4e6:	aa56      	add	r2, sp, #344	; 0x158
 800b4e8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800b4ec:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	3804      	subs	r0, #4
 800b4f4:	e723      	b.n	800b33e <__kernel_rem_pio2f+0x20e>
 800b4f6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800b4f8:	2a03      	cmp	r2, #3
 800b4fa:	d84d      	bhi.n	800b598 <__kernel_rem_pio2f+0x468>
 800b4fc:	e8df f002 	tbb	[pc, r2]
 800b500:	021f1f3e 	.word	0x021f1f3e
 800b504:	aa56      	add	r2, sp, #344	; 0x158
 800b506:	4411      	add	r1, r2
 800b508:	399c      	subs	r1, #156	; 0x9c
 800b50a:	4608      	mov	r0, r1
 800b50c:	461c      	mov	r4, r3
 800b50e:	2c00      	cmp	r4, #0
 800b510:	dc5f      	bgt.n	800b5d2 <__kernel_rem_pio2f+0x4a2>
 800b512:	4608      	mov	r0, r1
 800b514:	461c      	mov	r4, r3
 800b516:	2c01      	cmp	r4, #1
 800b518:	dc6b      	bgt.n	800b5f2 <__kernel_rem_pio2f+0x4c2>
 800b51a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800b448 <__kernel_rem_pio2f+0x318>
 800b51e:	2b01      	cmp	r3, #1
 800b520:	dc77      	bgt.n	800b612 <__kernel_rem_pio2f+0x4e2>
 800b522:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800b526:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800b52a:	f1b8 0f00 	cmp.w	r8, #0
 800b52e:	d176      	bne.n	800b61e <__kernel_rem_pio2f+0x4ee>
 800b530:	edc6 6a00 	vstr	s13, [r6]
 800b534:	ed86 7a01 	vstr	s14, [r6, #4]
 800b538:	edc6 7a02 	vstr	s15, [r6, #8]
 800b53c:	e02c      	b.n	800b598 <__kernel_rem_pio2f+0x468>
 800b53e:	aa56      	add	r2, sp, #344	; 0x158
 800b540:	4411      	add	r1, r2
 800b542:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800b448 <__kernel_rem_pio2f+0x318>
 800b546:	399c      	subs	r1, #156	; 0x9c
 800b548:	4618      	mov	r0, r3
 800b54a:	2800      	cmp	r0, #0
 800b54c:	da32      	bge.n	800b5b4 <__kernel_rem_pio2f+0x484>
 800b54e:	f1b8 0f00 	cmp.w	r8, #0
 800b552:	d035      	beq.n	800b5c0 <__kernel_rem_pio2f+0x490>
 800b554:	eef1 7a47 	vneg.f32	s15, s14
 800b558:	edc6 7a00 	vstr	s15, [r6]
 800b55c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800b560:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b564:	a82f      	add	r0, sp, #188	; 0xbc
 800b566:	2101      	movs	r1, #1
 800b568:	428b      	cmp	r3, r1
 800b56a:	da2c      	bge.n	800b5c6 <__kernel_rem_pio2f+0x496>
 800b56c:	f1b8 0f00 	cmp.w	r8, #0
 800b570:	d001      	beq.n	800b576 <__kernel_rem_pio2f+0x446>
 800b572:	eef1 7a67 	vneg.f32	s15, s15
 800b576:	edc6 7a01 	vstr	s15, [r6, #4]
 800b57a:	e00d      	b.n	800b598 <__kernel_rem_pio2f+0x468>
 800b57c:	aa56      	add	r2, sp, #344	; 0x158
 800b57e:	4411      	add	r1, r2
 800b580:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800b448 <__kernel_rem_pio2f+0x318>
 800b584:	399c      	subs	r1, #156	; 0x9c
 800b586:	2b00      	cmp	r3, #0
 800b588:	da0e      	bge.n	800b5a8 <__kernel_rem_pio2f+0x478>
 800b58a:	f1b8 0f00 	cmp.w	r8, #0
 800b58e:	d001      	beq.n	800b594 <__kernel_rem_pio2f+0x464>
 800b590:	eef1 7a67 	vneg.f32	s15, s15
 800b594:	edc6 7a00 	vstr	s15, [r6]
 800b598:	9b01      	ldr	r3, [sp, #4]
 800b59a:	f003 0007 	and.w	r0, r3, #7
 800b59e:	b057      	add	sp, #348	; 0x15c
 800b5a0:	ecbd 8b04 	vpop	{d8-d9}
 800b5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a8:	ed31 7a01 	vldmdb	r1!, {s14}
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b5b2:	e7e8      	b.n	800b586 <__kernel_rem_pio2f+0x456>
 800b5b4:	ed71 7a01 	vldmdb	r1!, {s15}
 800b5b8:	3801      	subs	r0, #1
 800b5ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b5be:	e7c4      	b.n	800b54a <__kernel_rem_pio2f+0x41a>
 800b5c0:	eef0 7a47 	vmov.f32	s15, s14
 800b5c4:	e7c8      	b.n	800b558 <__kernel_rem_pio2f+0x428>
 800b5c6:	ecb0 7a01 	vldmia	r0!, {s14}
 800b5ca:	3101      	adds	r1, #1
 800b5cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b5d0:	e7ca      	b.n	800b568 <__kernel_rem_pio2f+0x438>
 800b5d2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b5d6:	ed70 6a01 	vldmdb	r0!, {s13}
 800b5da:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b5de:	3c01      	subs	r4, #1
 800b5e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5e4:	ed00 7a01 	vstr	s14, [r0, #-4]
 800b5e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ec:	edc0 7a00 	vstr	s15, [r0]
 800b5f0:	e78d      	b.n	800b50e <__kernel_rem_pio2f+0x3de>
 800b5f2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b5f6:	ed70 6a01 	vldmdb	r0!, {s13}
 800b5fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b5fe:	3c01      	subs	r4, #1
 800b600:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b604:	ed00 7a01 	vstr	s14, [r0, #-4]
 800b608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b60c:	edc0 7a00 	vstr	s15, [r0]
 800b610:	e781      	b.n	800b516 <__kernel_rem_pio2f+0x3e6>
 800b612:	ed31 7a01 	vldmdb	r1!, {s14}
 800b616:	3b01      	subs	r3, #1
 800b618:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b61c:	e77f      	b.n	800b51e <__kernel_rem_pio2f+0x3ee>
 800b61e:	eef1 6a66 	vneg.f32	s13, s13
 800b622:	eeb1 7a47 	vneg.f32	s14, s14
 800b626:	edc6 6a00 	vstr	s13, [r6]
 800b62a:	ed86 7a01 	vstr	s14, [r6, #4]
 800b62e:	eef1 7a67 	vneg.f32	s15, s15
 800b632:	e781      	b.n	800b538 <__kernel_rem_pio2f+0x408>

0800b634 <__kernel_tanf>:
 800b634:	b508      	push	{r3, lr}
 800b636:	ee10 3a10 	vmov	r3, s0
 800b63a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b63e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800b642:	eef0 7a40 	vmov.f32	s15, s0
 800b646:	da17      	bge.n	800b678 <__kernel_tanf+0x44>
 800b648:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800b64c:	ee17 1a10 	vmov	r1, s14
 800b650:	bb41      	cbnz	r1, 800b6a4 <__kernel_tanf+0x70>
 800b652:	1c43      	adds	r3, r0, #1
 800b654:	4313      	orrs	r3, r2
 800b656:	d108      	bne.n	800b66a <__kernel_tanf+0x36>
 800b658:	f7ff f8ae 	bl	800a7b8 <fabsf>
 800b65c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b660:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b664:	eeb0 0a67 	vmov.f32	s0, s15
 800b668:	bd08      	pop	{r3, pc}
 800b66a:	2801      	cmp	r0, #1
 800b66c:	d0fa      	beq.n	800b664 <__kernel_tanf+0x30>
 800b66e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b672:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b676:	e7f5      	b.n	800b664 <__kernel_tanf+0x30>
 800b678:	494e      	ldr	r1, [pc, #312]	; (800b7b4 <__kernel_tanf+0x180>)
 800b67a:	428a      	cmp	r2, r1
 800b67c:	dd12      	ble.n	800b6a4 <__kernel_tanf+0x70>
 800b67e:	2b00      	cmp	r3, #0
 800b680:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800b7b8 <__kernel_tanf+0x184>
 800b684:	bfb8      	it	lt
 800b686:	eef1 7a40 	vneglt.f32	s15, s0
 800b68a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b68e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800b7bc <__kernel_tanf+0x188>
 800b692:	bfb8      	it	lt
 800b694:	eef1 0a60 	vneglt.f32	s1, s1
 800b698:	ee77 0a60 	vsub.f32	s1, s14, s1
 800b69c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800b6a0:	eddf 0a47 	vldr	s1, [pc, #284]	; 800b7c0 <__kernel_tanf+0x18c>
 800b6a4:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800b7c4 <__kernel_tanf+0x190>
 800b6a8:	eddf 5a47 	vldr	s11, [pc, #284]	; 800b7c8 <__kernel_tanf+0x194>
 800b6ac:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800b7cc <__kernel_tanf+0x198>
 800b6b0:	4940      	ldr	r1, [pc, #256]	; (800b7b4 <__kernel_tanf+0x180>)
 800b6b2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b6b6:	428a      	cmp	r2, r1
 800b6b8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b6bc:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800b6c0:	eee7 5a06 	vfma.f32	s11, s14, s12
 800b6c4:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800b7d0 <__kernel_tanf+0x19c>
 800b6c8:	eea5 6a87 	vfma.f32	s12, s11, s14
 800b6cc:	eddf 5a41 	vldr	s11, [pc, #260]	; 800b7d4 <__kernel_tanf+0x1a0>
 800b6d0:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b6d4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800b7d8 <__kernel_tanf+0x1a4>
 800b6d8:	eea5 6a87 	vfma.f32	s12, s11, s14
 800b6dc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b7dc <__kernel_tanf+0x1a8>
 800b6e0:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b6e4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800b7e0 <__kernel_tanf+0x1ac>
 800b6e8:	eea7 6a05 	vfma.f32	s12, s14, s10
 800b6ec:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800b7e4 <__kernel_tanf+0x1b0>
 800b6f0:	eea6 5a07 	vfma.f32	s10, s12, s14
 800b6f4:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800b7e8 <__kernel_tanf+0x1b4>
 800b6f8:	eea5 6a07 	vfma.f32	s12, s10, s14
 800b6fc:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800b7ec <__kernel_tanf+0x1b8>
 800b700:	eea6 5a07 	vfma.f32	s10, s12, s14
 800b704:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800b7f0 <__kernel_tanf+0x1bc>
 800b708:	eea5 6a07 	vfma.f32	s12, s10, s14
 800b70c:	eeb0 7a46 	vmov.f32	s14, s12
 800b710:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b714:	eeb0 6a60 	vmov.f32	s12, s1
 800b718:	eea7 6a24 	vfma.f32	s12, s14, s9
 800b71c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800b7f4 <__kernel_tanf+0x1c0>
 800b720:	eee6 0a26 	vfma.f32	s1, s12, s13
 800b724:	eee4 0a87 	vfma.f32	s1, s9, s14
 800b728:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800b72c:	dd1d      	ble.n	800b76a <__kernel_tanf+0x136>
 800b72e:	ee07 0a10 	vmov	s14, r0
 800b732:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b736:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800b73a:	ee76 6a87 	vadd.f32	s13, s13, s14
 800b73e:	179b      	asrs	r3, r3, #30
 800b740:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800b744:	f003 0302 	and.w	r3, r3, #2
 800b748:	f1c3 0301 	rsb	r3, r3, #1
 800b74c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b750:	ee76 0a60 	vsub.f32	s1, s12, s1
 800b754:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b758:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b75c:	ee07 3a90 	vmov	s15, r3
 800b760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b764:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b768:	e77c      	b.n	800b664 <__kernel_tanf+0x30>
 800b76a:	2801      	cmp	r0, #1
 800b76c:	d01f      	beq.n	800b7ae <__kernel_tanf+0x17a>
 800b76e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b772:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800b776:	4b20      	ldr	r3, [pc, #128]	; (800b7f8 <__kernel_tanf+0x1c4>)
 800b778:	ee16 2a90 	vmov	r2, s13
 800b77c:	401a      	ands	r2, r3
 800b77e:	ee06 2a10 	vmov	s12, r2
 800b782:	ee15 2a90 	vmov	r2, s11
 800b786:	4013      	ands	r3, r2
 800b788:	ee07 3a10 	vmov	s14, r3
 800b78c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b790:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b794:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b798:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b79c:	eef0 7a66 	vmov.f32	s15, s13
 800b7a0:	eee7 7a20 	vfma.f32	s15, s14, s1
 800b7a4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b7a8:	eef0 7a47 	vmov.f32	s15, s14
 800b7ac:	e75a      	b.n	800b664 <__kernel_tanf+0x30>
 800b7ae:	eef0 7a66 	vmov.f32	s15, s13
 800b7b2:	e757      	b.n	800b664 <__kernel_tanf+0x30>
 800b7b4:	3f2ca13f 	.word	0x3f2ca13f
 800b7b8:	3f490fda 	.word	0x3f490fda
 800b7bc:	33222168 	.word	0x33222168
 800b7c0:	00000000 	.word	0x00000000
 800b7c4:	37d95384 	.word	0x37d95384
 800b7c8:	3895c07a 	.word	0x3895c07a
 800b7cc:	b79bae5f 	.word	0xb79bae5f
 800b7d0:	398137b9 	.word	0x398137b9
 800b7d4:	3abede48 	.word	0x3abede48
 800b7d8:	3c11371f 	.word	0x3c11371f
 800b7dc:	3d5d0dd1 	.word	0x3d5d0dd1
 800b7e0:	38a3f445 	.word	0x38a3f445
 800b7e4:	3a1a26c8 	.word	0x3a1a26c8
 800b7e8:	3b6b6916 	.word	0x3b6b6916
 800b7ec:	3cb327a4 	.word	0x3cb327a4
 800b7f0:	3e088889 	.word	0x3e088889
 800b7f4:	3eaaaaab 	.word	0x3eaaaaab
 800b7f8:	fffff000 	.word	0xfffff000

0800b7fc <with_errnof>:
 800b7fc:	b510      	push	{r4, lr}
 800b7fe:	ed2d 8b02 	vpush	{d8}
 800b802:	eeb0 8a40 	vmov.f32	s16, s0
 800b806:	4604      	mov	r4, r0
 800b808:	f7fe faa4 	bl	8009d54 <__errno>
 800b80c:	eeb0 0a48 	vmov.f32	s0, s16
 800b810:	ecbd 8b02 	vpop	{d8}
 800b814:	6004      	str	r4, [r0, #0]
 800b816:	bd10      	pop	{r4, pc}

0800b818 <xflowf>:
 800b818:	b130      	cbz	r0, 800b828 <xflowf+0x10>
 800b81a:	eef1 7a40 	vneg.f32	s15, s0
 800b81e:	2022      	movs	r0, #34	; 0x22
 800b820:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b824:	f7ff bfea 	b.w	800b7fc <with_errnof>
 800b828:	eef0 7a40 	vmov.f32	s15, s0
 800b82c:	e7f7      	b.n	800b81e <xflowf+0x6>
	...

0800b830 <__math_uflowf>:
 800b830:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b838 <__math_uflowf+0x8>
 800b834:	f7ff bff0 	b.w	800b818 <xflowf>
 800b838:	10000000 	.word	0x10000000

0800b83c <__math_may_uflowf>:
 800b83c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b844 <__math_may_uflowf+0x8>
 800b840:	f7ff bfea 	b.w	800b818 <xflowf>
 800b844:	1a200000 	.word	0x1a200000

0800b848 <__math_oflowf>:
 800b848:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b850 <__math_oflowf+0x8>
 800b84c:	f7ff bfe4 	b.w	800b818 <xflowf>
 800b850:	70000000 	.word	0x70000000

0800b854 <__math_divzerof>:
 800b854:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b858:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800b85c:	2800      	cmp	r0, #0
 800b85e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800b862:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800b870 <__math_divzerof+0x1c>
 800b866:	2022      	movs	r0, #34	; 0x22
 800b868:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b86c:	f7ff bfc6 	b.w	800b7fc <with_errnof>
 800b870:	00000000 	.word	0x00000000

0800b874 <__math_invalidf>:
 800b874:	eef0 7a40 	vmov.f32	s15, s0
 800b878:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b87c:	eef4 7a67 	vcmp.f32	s15, s15
 800b880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b884:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800b888:	d602      	bvs.n	800b890 <__math_invalidf+0x1c>
 800b88a:	2021      	movs	r0, #33	; 0x21
 800b88c:	f7ff bfb6 	b.w	800b7fc <with_errnof>
 800b890:	4770      	bx	lr

0800b892 <matherr>:
 800b892:	2000      	movs	r0, #0
 800b894:	4770      	bx	lr
	...

0800b898 <nan>:
 800b898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b8a0 <nan+0x8>
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	00000000 	.word	0x00000000
 800b8a4:	7ff80000 	.word	0x7ff80000

0800b8a8 <expm1f>:
 800b8a8:	ee10 2a10 	vmov	r2, s0
 800b8ac:	4984      	ldr	r1, [pc, #528]	; (800bac0 <expm1f+0x218>)
 800b8ae:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800b8b2:	428b      	cmp	r3, r1
 800b8b4:	d923      	bls.n	800b8fe <expm1f+0x56>
 800b8b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b8ba:	d902      	bls.n	800b8c2 <expm1f+0x1a>
 800b8bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b8c0:	4770      	bx	lr
 800b8c2:	d105      	bne.n	800b8d0 <expm1f+0x28>
 800b8c4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800b8c8:	2a00      	cmp	r2, #0
 800b8ca:	fe20 0a27 	vselge.f32	s0, s0, s15
 800b8ce:	4770      	bx	lr
 800b8d0:	2a00      	cmp	r2, #0
 800b8d2:	db08      	blt.n	800b8e6 <expm1f+0x3e>
 800b8d4:	4a7b      	ldr	r2, [pc, #492]	; (800bac4 <expm1f+0x21c>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	f240 80ea 	bls.w	800bab0 <expm1f+0x208>
 800b8dc:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800bac8 <expm1f+0x220>
 800b8e0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b8e4:	4770      	bx	lr
 800b8e6:	eddf 7a79 	vldr	s15, [pc, #484]	; 800bacc <expm1f+0x224>
 800b8ea:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b8ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f6:	d554      	bpl.n	800b9a2 <expm1f+0xfa>
 800b8f8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800b8fc:	4770      	bx	lr
 800b8fe:	4974      	ldr	r1, [pc, #464]	; (800bad0 <expm1f+0x228>)
 800b900:	428b      	cmp	r3, r1
 800b902:	d96c      	bls.n	800b9de <expm1f+0x136>
 800b904:	4973      	ldr	r1, [pc, #460]	; (800bad4 <expm1f+0x22c>)
 800b906:	428b      	cmp	r3, r1
 800b908:	d84b      	bhi.n	800b9a2 <expm1f+0xfa>
 800b90a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bad8 <expm1f+0x230>
 800b90e:	2a00      	cmp	r2, #0
 800b910:	bfa7      	ittee	ge
 800b912:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800b916:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800badc <expm1f+0x234>
 800b91a:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800bae0 <expm1f+0x238>
 800b91e:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800b922:	bfac      	ite	ge
 800b924:	2301      	movge	r3, #1
 800b926:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b92a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b92e:	ee37 7a40 	vsub.f32	s14, s14, s0
 800b932:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b936:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800b93a:	ee20 5a25 	vmul.f32	s10, s0, s11
 800b93e:	eddf 6a69 	vldr	s13, [pc, #420]	; 800bae4 <expm1f+0x23c>
 800b942:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800bae8 <expm1f+0x240>
 800b946:	ee20 7a05 	vmul.f32	s14, s0, s10
 800b94a:	eea7 6a26 	vfma.f32	s12, s14, s13
 800b94e:	eddf 6a67 	vldr	s13, [pc, #412]	; 800baec <expm1f+0x244>
 800b952:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b956:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800baf0 <expm1f+0x248>
 800b95a:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b95e:	eddf 6a65 	vldr	s13, [pc, #404]	; 800baf4 <expm1f+0x24c>
 800b962:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b966:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b96a:	eef0 4a46 	vmov.f32	s9, s12
 800b96e:	eee6 4a87 	vfma.f32	s9, s13, s14
 800b972:	eef0 6a64 	vmov.f32	s13, s9
 800b976:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800b97a:	eee5 4a66 	vfms.f32	s9, s10, s13
 800b97e:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800b982:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800b986:	eee0 6a64 	vfms.f32	s13, s0, s9
 800b98a:	eef0 4a66 	vmov.f32	s9, s13
 800b98e:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800b992:	ee66 6a87 	vmul.f32	s13, s13, s14
 800b996:	bb83      	cbnz	r3, 800b9fa <expm1f+0x152>
 800b998:	eef0 7a47 	vmov.f32	s15, s14
 800b99c:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800b9a0:	e026      	b.n	800b9f0 <expm1f+0x148>
 800b9a2:	eddf 7a55 	vldr	s15, [pc, #340]	; 800baf8 <expm1f+0x250>
 800b9a6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b9aa:	ee20 7a27 	vmul.f32	s14, s0, s15
 800b9ae:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800b9b2:	2a00      	cmp	r2, #0
 800b9b4:	fe66 7aa7 	vselge.f32	s15, s13, s15
 800b9b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b9bc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800bad8 <expm1f+0x230>
 800b9c0:	eddf 6a46 	vldr	s13, [pc, #280]	; 800badc <expm1f+0x234>
 800b9c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9c8:	ee17 3a90 	vmov	r3, s15
 800b9cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9d0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b9d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b9d8:	eeb0 7a40 	vmov.f32	s14, s0
 800b9dc:	e7a5      	b.n	800b92a <expm1f+0x82>
 800b9de:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800b9e2:	d208      	bcs.n	800b9f6 <expm1f+0x14e>
 800b9e4:	eddf 7a38 	vldr	s15, [pc, #224]	; 800bac8 <expm1f+0x220>
 800b9e8:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b9ec:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800b9f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b9f4:	4770      	bx	lr
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e79d      	b.n	800b936 <expm1f+0x8e>
 800b9fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b9fe:	1c5a      	adds	r2, r3, #1
 800ba00:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800ba04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba08:	d106      	bne.n	800ba18 <expm1f+0x170>
 800ba0a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ba0e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800ba12:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800ba16:	4770      	bx	lr
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d118      	bne.n	800ba4e <expm1f+0x1a6>
 800ba1c:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800ba20:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ba24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba28:	bf41      	itttt	mi
 800ba2a:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800ba2e:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800ba32:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800ba36:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800ba3a:	bf5f      	itttt	pl
 800ba3c:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800ba40:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800ba44:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800ba48:	eeb0 0a46 	vmovpl.f32	s0, s12
 800ba4c:	4770      	bx	lr
 800ba4e:	1c5a      	adds	r2, r3, #1
 800ba50:	2a39      	cmp	r2, #57	; 0x39
 800ba52:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800ba56:	d90b      	bls.n	800ba70 <expm1f+0x1c8>
 800ba58:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ba5c:	ee36 0a40 	vsub.f32	s0, s12, s0
 800ba60:	ee10 3a10 	vmov	r3, s0
 800ba64:	440b      	add	r3, r1
 800ba66:	ee00 3a10 	vmov	s0, r3
 800ba6a:	ee30 0a46 	vsub.f32	s0, s0, s12
 800ba6e:	4770      	bx	lr
 800ba70:	2b16      	cmp	r3, #22
 800ba72:	dc11      	bgt.n	800ba98 <expm1f+0x1f0>
 800ba74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba78:	fa42 f303 	asr.w	r3, r2, r3
 800ba7c:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800ba80:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ba84:	ee07 3a90 	vmov	s15, r3
 800ba88:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ba8c:	ee10 3a10 	vmov	r3, s0
 800ba90:	440b      	add	r3, r1
 800ba92:	ee00 3a10 	vmov	s0, r3
 800ba96:	4770      	bx	lr
 800ba98:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ba9c:	05db      	lsls	r3, r3, #23
 800ba9e:	ee07 3a10 	vmov	s14, r3
 800baa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800baa6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800baaa:	ee30 0a06 	vadd.f32	s0, s0, s12
 800baae:	e7ed      	b.n	800ba8c <expm1f+0x1e4>
 800bab0:	eddf 7a11 	vldr	s15, [pc, #68]	; 800baf8 <expm1f+0x250>
 800bab4:	ee20 7a27 	vmul.f32	s14, s0, s15
 800bab8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800babc:	e77c      	b.n	800b9b8 <expm1f+0x110>
 800babe:	bf00      	nop
 800bac0:	4195b843 	.word	0x4195b843
 800bac4:	42b17217 	.word	0x42b17217
 800bac8:	7149f2ca 	.word	0x7149f2ca
 800bacc:	0da24260 	.word	0x0da24260
 800bad0:	3eb17218 	.word	0x3eb17218
 800bad4:	3f851591 	.word	0x3f851591
 800bad8:	3f317180 	.word	0x3f317180
 800badc:	3717f7d1 	.word	0x3717f7d1
 800bae0:	b717f7d1 	.word	0xb717f7d1
 800bae4:	b457edbb 	.word	0xb457edbb
 800bae8:	36867e54 	.word	0x36867e54
 800baec:	b8a670cd 	.word	0xb8a670cd
 800baf0:	3ad00d01 	.word	0x3ad00d01
 800baf4:	bd088889 	.word	0xbd088889
 800baf8:	3fb8aa3b 	.word	0x3fb8aa3b

0800bafc <finitef>:
 800bafc:	ee10 3a10 	vmov	r3, s0
 800bb00:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800bb04:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800bb08:	bfac      	ite	ge
 800bb0a:	2000      	movge	r0, #0
 800bb0c:	2001      	movlt	r0, #1
 800bb0e:	4770      	bx	lr

0800bb10 <floorf>:
 800bb10:	ee10 3a10 	vmov	r3, s0
 800bb14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb18:	0dca      	lsrs	r2, r1, #23
 800bb1a:	3a7f      	subs	r2, #127	; 0x7f
 800bb1c:	2a16      	cmp	r2, #22
 800bb1e:	dc2a      	bgt.n	800bb76 <floorf+0x66>
 800bb20:	2a00      	cmp	r2, #0
 800bb22:	da11      	bge.n	800bb48 <floorf+0x38>
 800bb24:	eddf 7a18 	vldr	s15, [pc, #96]	; 800bb88 <floorf+0x78>
 800bb28:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bb2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb34:	dd05      	ble.n	800bb42 <floorf+0x32>
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	da23      	bge.n	800bb82 <floorf+0x72>
 800bb3a:	4a14      	ldr	r2, [pc, #80]	; (800bb8c <floorf+0x7c>)
 800bb3c:	2900      	cmp	r1, #0
 800bb3e:	bf18      	it	ne
 800bb40:	4613      	movne	r3, r2
 800bb42:	ee00 3a10 	vmov	s0, r3
 800bb46:	4770      	bx	lr
 800bb48:	4911      	ldr	r1, [pc, #68]	; (800bb90 <floorf+0x80>)
 800bb4a:	4111      	asrs	r1, r2
 800bb4c:	420b      	tst	r3, r1
 800bb4e:	d0fa      	beq.n	800bb46 <floorf+0x36>
 800bb50:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800bb88 <floorf+0x78>
 800bb54:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bb58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb60:	ddef      	ble.n	800bb42 <floorf+0x32>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	bfbe      	ittt	lt
 800bb66:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800bb6a:	fa40 f202 	asrlt.w	r2, r0, r2
 800bb6e:	189b      	addlt	r3, r3, r2
 800bb70:	ea23 0301 	bic.w	r3, r3, r1
 800bb74:	e7e5      	b.n	800bb42 <floorf+0x32>
 800bb76:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bb7a:	d3e4      	bcc.n	800bb46 <floorf+0x36>
 800bb7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bb80:	4770      	bx	lr
 800bb82:	2300      	movs	r3, #0
 800bb84:	e7dd      	b.n	800bb42 <floorf+0x32>
 800bb86:	bf00      	nop
 800bb88:	7149f2ca 	.word	0x7149f2ca
 800bb8c:	bf800000 	.word	0xbf800000
 800bb90:	007fffff 	.word	0x007fffff

0800bb94 <scalbnf>:
 800bb94:	b508      	push	{r3, lr}
 800bb96:	ee10 2a10 	vmov	r2, s0
 800bb9a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800bb9e:	ed2d 8b02 	vpush	{d8}
 800bba2:	eef0 0a40 	vmov.f32	s1, s0
 800bba6:	d004      	beq.n	800bbb2 <scalbnf+0x1e>
 800bba8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bbac:	d306      	bcc.n	800bbbc <scalbnf+0x28>
 800bbae:	ee70 0a00 	vadd.f32	s1, s0, s0
 800bbb2:	ecbd 8b02 	vpop	{d8}
 800bbb6:	eeb0 0a60 	vmov.f32	s0, s1
 800bbba:	bd08      	pop	{r3, pc}
 800bbbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbc0:	d21c      	bcs.n	800bbfc <scalbnf+0x68>
 800bbc2:	4b1f      	ldr	r3, [pc, #124]	; (800bc40 <scalbnf+0xac>)
 800bbc4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bc44 <scalbnf+0xb0>
 800bbc8:	4298      	cmp	r0, r3
 800bbca:	ee60 0a27 	vmul.f32	s1, s0, s15
 800bbce:	db10      	blt.n	800bbf2 <scalbnf+0x5e>
 800bbd0:	ee10 2a90 	vmov	r2, s1
 800bbd4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800bbd8:	3b19      	subs	r3, #25
 800bbda:	4403      	add	r3, r0
 800bbdc:	2bfe      	cmp	r3, #254	; 0xfe
 800bbde:	dd0f      	ble.n	800bc00 <scalbnf+0x6c>
 800bbe0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800bc48 <scalbnf+0xb4>
 800bbe4:	eeb0 0a48 	vmov.f32	s0, s16
 800bbe8:	f000 f834 	bl	800bc54 <copysignf>
 800bbec:	ee60 0a08 	vmul.f32	s1, s0, s16
 800bbf0:	e7df      	b.n	800bbb2 <scalbnf+0x1e>
 800bbf2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800bc4c <scalbnf+0xb8>
 800bbf6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800bbfa:	e7da      	b.n	800bbb2 <scalbnf+0x1e>
 800bbfc:	0ddb      	lsrs	r3, r3, #23
 800bbfe:	e7ec      	b.n	800bbda <scalbnf+0x46>
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	dd06      	ble.n	800bc12 <scalbnf+0x7e>
 800bc04:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800bc08:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800bc0c:	ee00 3a90 	vmov	s1, r3
 800bc10:	e7cf      	b.n	800bbb2 <scalbnf+0x1e>
 800bc12:	f113 0f16 	cmn.w	r3, #22
 800bc16:	da06      	bge.n	800bc26 <scalbnf+0x92>
 800bc18:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bc1c:	4298      	cmp	r0, r3
 800bc1e:	dcdf      	bgt.n	800bbe0 <scalbnf+0x4c>
 800bc20:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800bc4c <scalbnf+0xb8>
 800bc24:	e7de      	b.n	800bbe4 <scalbnf+0x50>
 800bc26:	3319      	adds	r3, #25
 800bc28:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800bc2c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800bc30:	eddf 7a07 	vldr	s15, [pc, #28]	; 800bc50 <scalbnf+0xbc>
 800bc34:	ee07 3a10 	vmov	s14, r3
 800bc38:	ee67 0a27 	vmul.f32	s1, s14, s15
 800bc3c:	e7b9      	b.n	800bbb2 <scalbnf+0x1e>
 800bc3e:	bf00      	nop
 800bc40:	ffff3cb0 	.word	0xffff3cb0
 800bc44:	4c000000 	.word	0x4c000000
 800bc48:	7149f2ca 	.word	0x7149f2ca
 800bc4c:	0da24260 	.word	0x0da24260
 800bc50:	33000000 	.word	0x33000000

0800bc54 <copysignf>:
 800bc54:	ee10 3a10 	vmov	r3, s0
 800bc58:	ee10 2a90 	vmov	r2, s1
 800bc5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc60:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800bc64:	4313      	orrs	r3, r2
 800bc66:	ee00 3a10 	vmov	s0, r3
 800bc6a:	4770      	bx	lr

0800bc6c <_init>:
 800bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6e:	bf00      	nop
 800bc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc72:	bc08      	pop	{r3}
 800bc74:	469e      	mov	lr, r3
 800bc76:	4770      	bx	lr

0800bc78 <_fini>:
 800bc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc7a:	bf00      	nop
 800bc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc7e:	bc08      	pop	{r3}
 800bc80:	469e      	mov	lr, r3
 800bc82:	4770      	bx	lr

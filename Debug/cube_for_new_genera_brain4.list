
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f50  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  0800a1e8  0800a1e8  0001a1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa18  0800aa18  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa18  0800aa18  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa18  0800aa18  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa18  0800aa18  0001aa18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa1c  0800aa1c  0001aa1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800aa20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018f98  2000007c  0800aa9c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20019014  0800aa9c  00029014  2**0
                  ALLOC
 11 .RAM_D1       000493e0  24000000  24000000  00030000  2**5
                  ALLOC
 12 .RAM_D2       000041a0  30000000  30000000  00030000  2**5
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00047677  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006be2  00000000  00000000  00067721  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000234ca  00000000  00000000  0006e303  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001cc0  00000000  00000000  000917d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00006140  00000000  00000000  00093490  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003b31a  00000000  00000000  000995d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0001ff7b  00000000  00000000  000d48ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0016ed59  00000000  00000000  000f4865  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  002635be  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000067dc  00000000  00000000  0026363c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2000007c 	.word	0x2000007c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a1d0 	.word	0x0800a1d0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000080 	.word	0x20000080
 80002d4:	0800a1d0 	.word	0x0800a1d0

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_InitTick+0x40>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <HAL_InitTick+0x44>)
 80002e8:	fbb2 f3f3 	udiv	r3, r2, r3
{
 80002ec:	b510      	push	{r4, lr}
 80002ee:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002f0:	6808      	ldr	r0, [r1, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 fe47 	bl	8000f88 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fa:	2c0f      	cmp	r4, #15
 80002fc:	d800      	bhi.n	8000300 <HAL_InitTick+0x28>
 80002fe:	b108      	cbz	r0, 8000304 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
}
 8000302:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 fdf8 	bl	8000f00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <HAL_InitTick+0x48>)
 8000312:	2000      	movs	r0, #0
 8000314:	601c      	str	r4, [r3, #0]
}
 8000316:	bd10      	pop	{r4, pc}
 8000318:	20000000 	.word	0x20000000
 800031c:	2000000c 	.word	0x2000000c
 8000320:	20000004 	.word	0x20000004

08000324 <HAL_Init>:
{
 8000324:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
{
 8000328:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800032a:	f000 fdd5 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800032e:	4c12      	ldr	r4, [pc, #72]	; (8000378 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000330:	f002 ff00 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 8000334:	4a11      	ldr	r2, [pc, #68]	; (800037c <HAL_Init+0x58>)
 8000336:	4912      	ldr	r1, [pc, #72]	; (8000380 <HAL_Init+0x5c>)
 8000338:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800033a:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800033c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8000340:	4d10      	ldr	r5, [pc, #64]	; (8000384 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000342:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000346:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000348:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800034a:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800034e:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000352:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000356:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000358:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800035c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800035e:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000360:	f7ff ffba 	bl	80002d8 <HAL_InitTick>
 8000364:	b110      	cbz	r0, 800036c <HAL_Init+0x48>
    return HAL_ERROR;
 8000366:	2001      	movs	r0, #1
}
 8000368:	b003      	add	sp, #12
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 800036e:	f006 ff3d 	bl	80071ec <HAL_MspInit>
  return HAL_OK;
 8000372:	9801      	ldr	r0, [sp, #4]
}
 8000374:	b003      	add	sp, #12
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	20000010 	.word	0x20000010
 800037c:	58024400 	.word	0x58024400
 8000380:	0800a1f0 	.word	0x0800a1f0
 8000384:	2000000c 	.word	0x2000000c

08000388 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000388:	4a03      	ldr	r2, [pc, #12]	; (8000398 <HAL_IncTick+0x10>)
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <HAL_IncTick+0x14>)
 800038c:	6811      	ldr	r1, [r2, #0]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	440b      	add	r3, r1
 8000392:	6013      	str	r3, [r2, #0]
}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	200000f0 	.word	0x200000f0
 800039c:	20000000 	.word	0x20000000

080003a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003a0:	4b01      	ldr	r3, [pc, #4]	; (80003a8 <HAL_GetTick+0x8>)
 80003a2:	6818      	ldr	r0, [r3, #0]
}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	200000f0 	.word	0x200000f0

080003ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003ac:	b538      	push	{r3, r4, r5, lr}
 80003ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003b0:	f7ff fff6 	bl	80003a0 <HAL_GetTick>
 80003b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b6:	1c63      	adds	r3, r4, #1
 80003b8:	d002      	beq.n	80003c0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <HAL_Delay+0x20>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003c0:	f7ff ffee 	bl	80003a0 <HAL_GetTick>
 80003c4:	1b40      	subs	r0, r0, r5
 80003c6:	42a0      	cmp	r0, r4
 80003c8:	d3fa      	bcc.n	80003c0 <HAL_Delay+0x14>
  {
  }
}
 80003ca:	bd38      	pop	{r3, r4, r5, pc}
 80003cc:	20000000 	.word	0x20000000

080003d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003d0:	4b01      	ldr	r3, [pc, #4]	; (80003d8 <HAL_GetREVID+0x8>)
 80003d2:	6818      	ldr	r0, [r3, #0]
}
 80003d4:	0c00      	lsrs	r0, r0, #16
 80003d6:	4770      	bx	lr
 80003d8:	5c001000 	.word	0x5c001000

080003dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80003dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80003e0:	4c61      	ldr	r4, [pc, #388]	; (8000568 <HAL_ADC_Start_DMA+0x18c>)
 80003e2:	6805      	ldr	r5, [r0, #0]
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	d030      	beq.n	800044a <HAL_ADC_Start_DMA+0x6e>
 80003e8:	4b60      	ldr	r3, [pc, #384]	; (800056c <HAL_ADC_Start_DMA+0x190>)
 80003ea:	429d      	cmp	r5, r3
 80003ec:	d02d      	beq.n	800044a <HAL_ADC_Start_DMA+0x6e>
 80003ee:	4c60      	ldr	r4, [pc, #384]	; (8000570 <HAL_ADC_Start_DMA+0x194>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80003f0:	68a6      	ldr	r6, [r4, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80003f2:	68ac      	ldr	r4, [r5, #8]
 80003f4:	0764      	lsls	r4, r4, #29
 80003f6:	d42d      	bmi.n	8000454 <HAL_ADC_Start_DMA+0x78>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80003f8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d029      	beq.n	8000454 <HAL_ADC_Start_DMA+0x78>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000400:	f006 061f 	and.w	r6, r6, #31
 8000404:	2301      	movs	r3, #1
 8000406:	4690      	mov	r8, r2
 8000408:	460f      	mov	r7, r1

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800040a:	2e09      	cmp	r6, #9
 800040c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800040e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000412:	d905      	bls.n	8000420 <HAL_ADC_Start_DMA+0x44>
        LL_ADC_REG_StartConversion(hadc->Instance);
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000414:	2300      	movs	r3, #0
 8000416:	2001      	movs	r0, #1
 8000418:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = HAL_BUSY;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800041c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000420:	f240 2321 	movw	r3, #545	; 0x221
 8000424:	40f3      	lsrs	r3, r6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000426:	07db      	lsls	r3, r3, #31
 8000428:	d5f4      	bpl.n	8000414 <HAL_ADC_Start_DMA+0x38>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800042a:	68ab      	ldr	r3, [r5, #8]
 800042c:	07d8      	lsls	r0, r3, #31
 800042e:	d414      	bmi.n	800045a <HAL_ADC_Start_DMA+0x7e>
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000430:	68aa      	ldr	r2, [r5, #8]
 8000432:	4b50      	ldr	r3, [pc, #320]	; (8000574 <HAL_ADC_Start_DMA+0x198>)
 8000434:	421a      	tst	r2, r3
 8000436:	d055      	beq.n	80004e4 <HAL_ADC_Start_DMA+0x108>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000438:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800043a:	f043 0310 	orr.w	r3, r3, #16
 800043e:	6563      	str	r3, [r4, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000440:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	65a3      	str	r3, [r4, #88]	; 0x58
 8000448:	e7e4      	b.n	8000414 <HAL_ADC_Start_DMA+0x38>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800044a:	4c4b      	ldr	r4, [pc, #300]	; (8000578 <HAL_ADC_Start_DMA+0x19c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800044c:	68a6      	ldr	r6, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800044e:	68ac      	ldr	r4, [r5, #8]
 8000450:	0764      	lsls	r4, r4, #29
 8000452:	d5d1      	bpl.n	80003f8 <HAL_ADC_Start_DMA+0x1c>
    tmp_hal_status = HAL_BUSY;
 8000454:	2002      	movs	r0, #2
}
 8000456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800045a:	4b44      	ldr	r3, [pc, #272]	; (800056c <HAL_ADC_Start_DMA+0x190>)
 800045c:	1aed      	subs	r5, r5, r3
 800045e:	bf18      	it	ne
 8000460:	2501      	movne	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000462:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000464:	4b45      	ldr	r3, [pc, #276]	; (800057c <HAL_ADC_Start_DMA+0x1a0>)
 8000466:	4013      	ands	r3, r2
 8000468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800046c:	6563      	str	r3, [r4, #84]	; 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800046e:	b106      	cbz	r6, 8000472 <HAL_ADC_Start_DMA+0x96>
 8000470:	b11d      	cbz	r5, 800047a <HAL_ADC_Start_DMA+0x9e>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000472:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000474:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000478:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800047a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800047c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8000480:	d02e      	beq.n	80004e0 <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000482:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000484:	f023 0306 	bic.w	r3, r3, #6
 8000488:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800048a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800048c:	251c      	movs	r5, #28
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800048e:	483c      	ldr	r0, [pc, #240]	; (8000580 <HAL_ADC_Start_DMA+0x1a4>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000490:	4643      	mov	r3, r8
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000492:	4e3c      	ldr	r6, [pc, #240]	; (8000584 <HAL_ADC_Start_DMA+0x1a8>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000494:	463a      	mov	r2, r7
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000496:	63c8      	str	r0, [r1, #60]	; 0x3c
        __HAL_UNLOCK(hadc);
 8000498:	2100      	movs	r1, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800049a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800049c:	6406      	str	r6, [r0, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800049e:	4e3a      	ldr	r6, [pc, #232]	; (8000588 <HAL_ADC_Start_DMA+0x1ac>)
 80004a0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80004a2:	64c6      	str	r6, [r0, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004a4:	6820      	ldr	r0, [r4, #0]
 80004a6:	6005      	str	r5, [r0, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80004a8:	6820      	ldr	r0, [r4, #0]
        __HAL_UNLOCK(hadc);
 80004aa:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80004ae:	6841      	ldr	r1, [r0, #4]
 80004b0:	f041 0110 	orr.w	r1, r1, #16
 80004b4:	6041      	str	r1, [r0, #4]
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80004b6:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80004b8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80004ba:	68c1      	ldr	r1, [r0, #12]
 80004bc:	f021 0103 	bic.w	r1, r1, #3
 80004c0:	4329      	orrs	r1, r5
 80004c2:	60c1      	str	r1, [r0, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80004c4:	6821      	ldr	r1, [r4, #0]
 80004c6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80004c8:	3140      	adds	r1, #64	; 0x40
 80004ca:	f001 f913 	bl	80016f4 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80004ce:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80004d0:	4b2e      	ldr	r3, [pc, #184]	; (800058c <HAL_ADC_Start_DMA+0x1b0>)
 80004d2:	6891      	ldr	r1, [r2, #8]
 80004d4:	400b      	ands	r3, r1
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	6093      	str	r3, [r2, #8]
}
 80004dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          ADC_CLEAR_ERRORCODE(hadc);
 80004e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80004e2:	e7d2      	b.n	800048a <HAL_ADC_Start_DMA+0xae>
  MODIFY_REG(ADCx->CR,
 80004e4:	68aa      	ldr	r2, [r5, #8]
 80004e6:	4b29      	ldr	r3, [pc, #164]	; (800058c <HAL_ADC_Start_DMA+0x1b0>)
 80004e8:	4013      	ands	r3, r2
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80004f0:	f7ff ff56 	bl	80003a0 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80004f4:	6823      	ldr	r3, [r4, #0]
 80004f6:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <HAL_ADC_Start_DMA+0x18c>)
    tickstart = HAL_GetTick();
 80004f8:	4681      	mov	r9, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d020      	beq.n	8000540 <HAL_ADC_Start_DMA+0x164>
 80004fe:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000502:	4293      	cmp	r3, r2
 8000504:	d01c      	beq.n	8000540 <HAL_ADC_Start_DMA+0x164>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000506:	4a1a      	ldr	r2, [pc, #104]	; (8000570 <HAL_ADC_Start_DMA+0x194>)
 8000508:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(ADCx->CR,
 800050a:	4d20      	ldr	r5, [pc, #128]	; (800058c <HAL_ADC_Start_DMA+0x1b0>)
 800050c:	e00b      	b.n	8000526 <HAL_ADC_Start_DMA+0x14a>
 800050e:	689a      	ldr	r2, [r3, #8]
 8000510:	402a      	ands	r2, r5
 8000512:	f042 0201 	orr.w	r2, r2, #1
 8000516:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000518:	f7ff ff42 	bl	80003a0 <HAL_GetTick>
 800051c:	eba0 0009 	sub.w	r0, r0, r9
 8000520:	2802      	cmp	r0, #2
 8000522:	d889      	bhi.n	8000438 <HAL_ADC_Start_DMA+0x5c>
 8000524:	6823      	ldr	r3, [r4, #0]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	07d2      	lsls	r2, r2, #31
 800052a:	d418      	bmi.n	800055e <HAL_ADC_Start_DMA+0x182>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800052c:	689a      	ldr	r2, [r3, #8]
 800052e:	07d1      	lsls	r1, r2, #31
 8000530:	d5ed      	bpl.n	800050e <HAL_ADC_Start_DMA+0x132>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000532:	f7ff ff35 	bl	80003a0 <HAL_GetTick>
 8000536:	eba0 0009 	sub.w	r0, r0, r9
 800053a:	2802      	cmp	r0, #2
 800053c:	d9f2      	bls.n	8000524 <HAL_ADC_Start_DMA+0x148>
 800053e:	e77b      	b.n	8000438 <HAL_ADC_Start_DMA+0x5c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000540:	490d      	ldr	r1, [pc, #52]	; (8000578 <HAL_ADC_Start_DMA+0x19c>)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <HAL_ADC_Start_DMA+0x190>)
 8000544:	6889      	ldr	r1, [r1, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000546:	f011 0f1f 	tst.w	r1, #31
 800054a:	bf0c      	ite	eq
 800054c:	2501      	moveq	r5, #1
 800054e:	2500      	movne	r5, #0
 8000550:	4293      	cmp	r3, r2
 8000552:	bf18      	it	ne
 8000554:	f045 0501 	orrne.w	r5, r5, #1
 8000558:	2d00      	cmp	r5, #0
 800055a:	d1d6      	bne.n	800050a <HAL_ADC_Start_DMA+0x12e>
 800055c:	e781      	b.n	8000462 <HAL_ADC_Start_DMA+0x86>
 800055e:	4d03      	ldr	r5, [pc, #12]	; (800056c <HAL_ADC_Start_DMA+0x190>)
 8000560:	1b5d      	subs	r5, r3, r5
 8000562:	bf18      	it	ne
 8000564:	2501      	movne	r5, #1
 8000566:	e77c      	b.n	8000462 <HAL_ADC_Start_DMA+0x86>
 8000568:	40022000 	.word	0x40022000
 800056c:	40022100 	.word	0x40022100
 8000570:	58026300 	.word	0x58026300
 8000574:	8000003f 	.word	0x8000003f
 8000578:	40022300 	.word	0x40022300
 800057c:	fffff0fe 	.word	0xfffff0fe
 8000580:	080005a1 	.word	0x080005a1
 8000584:	08000591 	.word	0x08000591
 8000588:	08000609 	.word	0x08000609
 800058c:	7fffffc0 	.word	0x7fffffc0

08000590 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000590:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000592:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000594:	f006 fb04 	bl	8006ba0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000598:	bd08      	pop	{r3, pc}
 800059a:	bf00      	nop

0800059c <HAL_ADC_ErrorCallback>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ADC_DMAConvCplt>:
{
 80005a0:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80005a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80005a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005a6:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80005aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80005ac:	d11d      	bne.n	80005ea <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80005ae:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80005b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005b4:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80005b6:	680a      	ldr	r2, [r1, #0]
 80005b8:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80005bc:	68ca      	ldr	r2, [r1, #12]
 80005be:	d01b      	beq.n	80005f8 <ADC_DMAConvCplt+0x58>
 80005c0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80005c4:	d10d      	bne.n	80005e2 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80005c6:	68ca      	ldr	r2, [r1, #12]
 80005c8:	0494      	lsls	r4, r2, #18
 80005ca:	d40a      	bmi.n	80005e2 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80005cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005d2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80005d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005d6:	04d1      	lsls	r1, r2, #19
 80005d8:	d403      	bmi.n	80005e2 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80005da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005dc:	f042 0201 	orr.w	r2, r2, #1
 80005e0:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80005e2:	4618      	mov	r0, r3
 80005e4:	f006 fad8 	bl	8006b98 <HAL_ADC_ConvCpltCallback>
}
 80005e8:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80005ea:	06d2      	lsls	r2, r2, #27
 80005ec:	d407      	bmi.n	80005fe <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80005ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80005f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80005f8:	0790      	lsls	r0, r2, #30
 80005fa:	d1f2      	bne.n	80005e2 <ADC_DMAConvCplt+0x42>
 80005fc:	e7e6      	b.n	80005cc <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ffcc 	bl	800059c <HAL_ADC_ErrorCallback>
}
 8000604:	bd10      	pop	{r4, pc}
 8000606:	bf00      	nop

08000608 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000608:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800060a:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800060c:	6d5a      	ldr	r2, [r3, #84]	; 0x54

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800060e:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000614:	655a      	str	r2, [r3, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000616:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000618:	f042 0204 	orr.w	r2, r2, #4
 800061c:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 800061e:	f7ff ffbd 	bl	800059c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000622:	bd08      	pop	{r3, pc}

08000624 <HAL_ADC_ConfigChannel>:
{
 8000624:	4603      	mov	r3, r0
  __IO uint32_t wait_loop_index = 0;
 8000626:	2000      	movs	r0, #0
{
 8000628:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800062a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
{
 800062e:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 8000630:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 8000632:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8000634:	f000 8130 	beq.w	8000898 <HAL_ADC_ConfigChannel+0x274>
 8000638:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800063a:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 800063c:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000640:	68a2      	ldr	r2, [r4, #8]
 8000642:	0757      	lsls	r7, r2, #29
 8000644:	d443      	bmi.n	80006ce <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000646:	680a      	ldr	r2, [r1, #0]
 8000648:	f3c2 0513 	ubfx	r5, r2, #0, #20
 800064c:	2d00      	cmp	r5, #0
 800064e:	f040 80a2 	bne.w	8000796 <HAL_ADC_ConfigChannel+0x172>
 8000652:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000656:	4090      	lsls	r0, r2
 8000658:	69e2      	ldr	r2, [r4, #28]
  MODIFY_REG(*preg,
 800065a:	271f      	movs	r7, #31
 800065c:	4310      	orrs	r0, r2
 800065e:	61e0      	str	r0, [r4, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000660:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	0985      	lsrs	r5, r0, #6
  MODIFY_REG(*preg,
 8000666:	680a      	ldr	r2, [r1, #0]
 8000668:	4038      	ands	r0, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800066a:	3430      	adds	r4, #48	; 0x30
 800066c:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8000670:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000674:	4087      	lsls	r7, r0
 8000676:	592e      	ldr	r6, [r5, r4]
 8000678:	4082      	lsls	r2, r0
 800067a:	ea26 0007 	bic.w	r0, r6, r7
 800067e:	4302      	orrs	r2, r0
 8000680:	512a      	str	r2, [r5, r4]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000682:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000684:	6890      	ldr	r0, [r2, #8]
 8000686:	0746      	lsls	r6, r0, #29
 8000688:	f100 8083 	bmi.w	8000792 <HAL_ADC_ConfigChannel+0x16e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800068c:	6895      	ldr	r5, [r2, #8]
 800068e:	f015 0508 	ands.w	r5, r5, #8
 8000692:	d026      	beq.n	80006e2 <HAL_ADC_ConfigChannel+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000694:	6890      	ldr	r0, [r2, #8]
 8000696:	07c5      	lsls	r5, r0, #31
 8000698:	d417      	bmi.n	80006ca <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCx->DIFSEL,
 800069a:	68cc      	ldr	r4, [r1, #12]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800069c:	680e      	ldr	r6, [r1, #0]
 800069e:	f004 0518 	and.w	r5, r4, #24
 80006a2:	48bf      	ldr	r0, [pc, #764]	; (80009a0 <HAL_ADC_ConfigChannel+0x37c>)
 80006a4:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
 80006a8:	40e8      	lsrs	r0, r5
 80006aa:	f3c6 0513 	ubfx	r5, r6, #0, #20
 80006ae:	4030      	ands	r0, r6
 80006b0:	ea24 0405 	bic.w	r4, r4, r5
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80006b4:	4dbb      	ldr	r5, [pc, #748]	; (80009a4 <HAL_ADC_ConfigChannel+0x380>)
 80006b6:	4320      	orrs	r0, r4
 80006b8:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
 80006bc:	68ca      	ldr	r2, [r1, #12]
 80006be:	42aa      	cmp	r2, r5
 80006c0:	f000 80a3 	beq.w	800080a <HAL_ADC_ConfigChannel+0x1e6>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80006c4:	6809      	ldr	r1, [r1, #0]
 80006c6:	2900      	cmp	r1, #0
 80006c8:	db6d      	blt.n	80007a6 <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006ca:	2000      	movs	r0, #0
 80006cc:	e003      	b.n	80006d6 <HAL_ADC_ConfigChannel+0xb2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80006d0:	f042 0220 	orr.w	r2, r2, #32
 80006d4:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80006dc:	b002      	add	sp, #8
 80006de:	bcf0      	pop	{r4, r5, r6, r7}
 80006e0:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80006e2:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80006e4:	3214      	adds	r2, #20
  MODIFY_REG(*preg,
 80006e6:	2007      	movs	r0, #7
 80006e8:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80006ea:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 80006ec:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80006f0:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80006f4:	fa00 fc04 	lsl.w	ip, r0, r4
 80006f8:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80006fc:	4faa      	ldr	r7, [pc, #680]	; (80009a8 <HAL_ADC_ConfigChannel+0x384>)
 80006fe:	58b0      	ldr	r0, [r6, r2]
 8000700:	ea20 000c 	bic.w	r0, r0, ip
 8000704:	4320      	orrs	r0, r4
 8000706:	50b0      	str	r0, [r6, r2]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800070e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8000712:	f000 80b8 	beq.w	8000886 <HAL_ADC_ConfigChannel+0x262>
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	6948      	ldr	r0, [r1, #20]
 800071a:	68d4      	ldr	r4, [r2, #12]
 800071c:	f014 0f10 	tst.w	r4, #16
 8000720:	68d4      	ldr	r4, [r2, #12]
 8000722:	f040 80d9 	bne.w	80008d8 <HAL_ADC_ConfigChannel+0x2b4>
 8000726:	f3c4 0482 	ubfx	r4, r4, #2, #3
 800072a:	0064      	lsls	r4, r4, #1
 800072c:	fa00 f404 	lsl.w	r4, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000730:	690e      	ldr	r6, [r1, #16]
 8000732:	6808      	ldr	r0, [r1, #0]
 8000734:	2e04      	cmp	r6, #4
 8000736:	f000 80b3 	beq.w	80008a0 <HAL_ADC_ConfigChannel+0x27c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800073a:	3260      	adds	r2, #96	; 0x60
    MODIFY_REG(*preg,
 800073c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000740:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8000744:	4320      	orrs	r0, r4
 8000746:	f007 4400 	and.w	r4, r7, #2147483648	; 0x80000000
 800074a:	4320      	orrs	r0, r4
 800074c:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000750:	6818      	ldr	r0, [r3, #0]
 8000752:	7e4e      	ldrb	r6, [r1, #25]
 8000754:	690c      	ldr	r4, [r1, #16]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000756:	3060      	adds	r0, #96	; 0x60
 8000758:	2e01      	cmp	r6, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800075a:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 800075e:	bf14      	ite	ne
 8000760:	2600      	movne	r6, #0
 8000762:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8000766:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800076a:	4332      	orrs	r2, r6
 800076c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000770:	7e0c      	ldrb	r4, [r1, #24]
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	2c01      	cmp	r4, #1
 8000776:	690a      	ldr	r2, [r1, #16]
 8000778:	d104      	bne.n	8000784 <HAL_ADC_ConfigChannel+0x160>
 800077a:	f002 021f 	and.w	r2, r2, #31
 800077e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8000782:	4095      	lsls	r5, r2
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000784:	6902      	ldr	r2, [r0, #16]
 8000786:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800078a:	4315      	orrs	r5, r2
 800078c:	6105      	str	r5, [r0, #16]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	e780      	b.n	8000694 <HAL_ADC_ConfigChannel+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000792:	6890      	ldr	r0, [r2, #8]
 8000794:	e77e      	b.n	8000694 <HAL_ADC_ConfigChannel+0x70>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000796:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800079a:	fab2 f282 	clz	r2, r2
 800079e:	f002 021f 	and.w	r2, r2, #31
 80007a2:	4090      	lsls	r0, r2
 80007a4:	e758      	b.n	8000658 <HAL_ADC_ConfigChannel+0x34>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80007a6:	6818      	ldr	r0, [r3, #0]
 80007a8:	4a80      	ldr	r2, [pc, #512]	; (80009ac <HAL_ADC_ConfigChannel+0x388>)
 80007aa:	4290      	cmp	r0, r2
 80007ac:	f000 80c6 	beq.w	800093c <HAL_ADC_ConfigChannel+0x318>
 80007b0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80007b4:	4290      	cmp	r0, r2
 80007b6:	f000 80c1 	beq.w	800093c <HAL_ADC_ConfigChannel+0x318>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80007ba:	4e7d      	ldr	r6, [pc, #500]	; (80009b0 <HAL_ADC_ConfigChannel+0x38c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007bc:	4d7d      	ldr	r5, [pc, #500]	; (80009b4 <HAL_ADC_ConfigChannel+0x390>)
 80007be:	68ac      	ldr	r4, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80007c0:	68b2      	ldr	r2, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007c2:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
 80007c6:	43d2      	mvns	r2, r2
 80007c8:	f002 0201 	and.w	r2, r2, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	f000 80c3 	beq.w	8000958 <HAL_ADC_ConfigChannel+0x334>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80007d2:	4a79      	ldr	r2, [pc, #484]	; (80009b8 <HAL_ADC_ConfigChannel+0x394>)
 80007d4:	4291      	cmp	r1, r2
 80007d6:	f000 80f9 	beq.w	80009cc <HAL_ADC_ConfigChannel+0x3a8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80007da:	4a78      	ldr	r2, [pc, #480]	; (80009bc <HAL_ADC_ConfigChannel+0x398>)
 80007dc:	4291      	cmp	r1, r2
 80007de:	f000 8117 	beq.w	8000a10 <HAL_ADC_ConfigChannel+0x3ec>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80007e2:	4a77      	ldr	r2, [pc, #476]	; (80009c0 <HAL_ADC_ConfigChannel+0x39c>)
 80007e4:	4291      	cmp	r1, r2
 80007e6:	f47f af70 	bne.w	80006ca <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_VREFINT_INSTANCE(hadc))
 80007ea:	0262      	lsls	r2, r4, #9
 80007ec:	f53f af6d 	bmi.w	80006ca <HAL_ADC_ConfigChannel+0xa6>
 80007f0:	4a6f      	ldr	r2, [pc, #444]	; (80009b0 <HAL_ADC_ConfigChannel+0x38c>)
 80007f2:	4290      	cmp	r0, r2
 80007f4:	f47f af69 	bne.w	80006ca <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80007f8:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80007fa:	f446 0280 	orr.w	r2, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007fe:	2000      	movs	r0, #0
 8000800:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000804:	430a      	orrs	r2, r1
 8000806:	60aa      	str	r2, [r5, #8]
 8000808:	e765      	b.n	80006d6 <HAL_ADC_ConfigChannel+0xb2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800080a:	6808      	ldr	r0, [r1, #0]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800080c:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800080e:	f3c0 0213 	ubfx	r2, r0, #0, #20
 8000812:	2a00      	cmp	r2, #0
 8000814:	d066      	beq.n	80008e4 <HAL_ADC_ConfigChannel+0x2c0>
 8000816:	fa90 f2a0 	rbit	r2, r0
 800081a:	fab2 f282 	clz	r2, r2
 800081e:	3201      	adds	r2, #1
 8000820:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000824:	2a09      	cmp	r2, #9
 8000826:	f200 809d 	bhi.w	8000964 <HAL_ADC_ConfigChannel+0x340>
 800082a:	fa90 f2a0 	rbit	r2, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800082e:	fab2 f282 	clz	r2, r2
 8000832:	fa90 f5a0 	rbit	r5, r0
 8000836:	2601      	movs	r6, #1
 8000838:	fab5 f585 	clz	r5, r5
 800083c:	3201      	adds	r2, #1
 800083e:	4435      	add	r5, r6
 8000840:	0692      	lsls	r2, r2, #26
 8000842:	f005 051f 	and.w	r5, r5, #31
 8000846:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800084a:	fa06 f505 	lsl.w	r5, r6, r5
 800084e:	432a      	orrs	r2, r5
 8000850:	fa90 f0a0 	rbit	r0, r0
 8000854:	fab0 f080 	clz	r0, r0
 8000858:	4430      	add	r0, r6
 800085a:	f000 001f 	and.w	r0, r0, #31
 800085e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000862:	0500      	lsls	r0, r0, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000864:	4310      	orrs	r0, r2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000866:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8000868:	2707      	movs	r7, #7
 800086a:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800086c:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 800086e:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000872:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8000876:	4087      	lsls	r7, r0
 8000878:	4082      	lsls	r2, r0
 800087a:	5935      	ldr	r5, [r6, r4]
 800087c:	ea25 0007 	bic.w	r0, r5, r7
 8000880:	4310      	orrs	r0, r2
 8000882:	5130      	str	r0, [r6, r4]
 8000884:	e71e      	b.n	80006c4 <HAL_ADC_ConfigChannel+0xa0>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	6948      	ldr	r0, [r1, #20]
 800088a:	68d4      	ldr	r4, [r2, #12]
 800088c:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8000890:	0064      	lsls	r4, r4, #1
 8000892:	fa00 f404 	lsl.w	r4, r0, r4
 8000896:	e74b      	b.n	8000730 <HAL_ADC_ConfigChannel+0x10c>
  __HAL_LOCK(hadc);
 8000898:	2002      	movs	r0, #2
}
 800089a:	b002      	add	sp, #8
 800089c:	bcf0      	pop	{r4, r5, r6, r7}
 800089e:	4770      	bx	lr
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008a0:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80008a2:	0680      	lsls	r0, r0, #26
 80008a4:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008a8:	4284      	cmp	r4, r0
 80008aa:	d03f      	beq.n	800092c <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008ac:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80008ae:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008b2:	4284      	cmp	r4, r0
 80008b4:	d032      	beq.n	800091c <HAL_ADC_ConfigChannel+0x2f8>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008b6:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80008b8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008bc:	4284      	cmp	r4, r0
 80008be:	d025      	beq.n	800090c <HAL_ADC_ConfigChannel+0x2e8>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008c0:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 80008c2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008c6:	42a0      	cmp	r0, r4
 80008c8:	f47f aee4 	bne.w	8000694 <HAL_ADC_ConfigChannel+0x70>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80008cc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80008ce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80008d2:	66d0      	str	r0, [r2, #108]	; 0x6c
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	e6dd      	b.n	8000694 <HAL_ADC_ConfigChannel+0x70>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80008d8:	0864      	lsrs	r4, r4, #1
 80008da:	f004 0408 	and.w	r4, r4, #8
 80008de:	fa00 f404 	lsl.w	r4, r0, r4
 80008e2:	e725      	b.n	8000730 <HAL_ADC_ConfigChannel+0x10c>
 80008e4:	2601      	movs	r6, #1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80008e6:	0e80      	lsrs	r0, r0, #26
 80008e8:	4430      	add	r0, r6
 80008ea:	f000 051f 	and.w	r5, r0, #31
 80008ee:	0682      	lsls	r2, r0, #26
 80008f0:	40ae      	lsls	r6, r5
 80008f2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80008f6:	2d09      	cmp	r5, #9
 80008f8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80008fc:	ea42 0206 	orr.w	r2, r2, r6
 8000900:	d9af      	bls.n	8000862 <HAL_ADC_ConfigChannel+0x23e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000902:	381e      	subs	r0, #30
 8000904:	0500      	lsls	r0, r0, #20
 8000906:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800090a:	e7ab      	b.n	8000864 <HAL_ADC_ConfigChannel+0x240>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800090c:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800090e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000912:	6690      	str	r0, [r2, #104]	; 0x68
 8000914:	6808      	ldr	r0, [r1, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	0680      	lsls	r0, r0, #26
 800091a:	e7d1      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800091c:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800091e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000922:	6650      	str	r0, [r2, #100]	; 0x64
 8000924:	6808      	ldr	r0, [r1, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	0680      	lsls	r0, r0, #26
 800092a:	e7c4      	b.n	80008b6 <HAL_ADC_ConfigChannel+0x292>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800092c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800092e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000932:	6610      	str	r0, [r2, #96]	; 0x60
 8000934:	6808      	ldr	r0, [r1, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	0680      	lsls	r0, r0, #26
 800093a:	e7b7      	b.n	80008ac <HAL_ADC_ConfigChannel+0x288>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800093c:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <HAL_ADC_ConfigChannel+0x3a0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800093e:	4e22      	ldr	r6, [pc, #136]	; (80009c8 <HAL_ADC_ConfigChannel+0x3a4>)
 8000940:	4f1a      	ldr	r7, [pc, #104]	; (80009ac <HAL_ADC_ConfigChannel+0x388>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000942:	4615      	mov	r5, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000944:	6894      	ldr	r4, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000946:	68bf      	ldr	r7, [r7, #8]
 8000948:	68b2      	ldr	r2, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800094a:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
 800094e:	433a      	orrs	r2, r7
 8000950:	43d2      	mvns	r2, r2
 8000952:	f002 0201 	and.w	r2, r2, #1
 8000956:	e739      	b.n	80007cc <HAL_ADC_ConfigChannel+0x1a8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 800095a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800095c:	f042 0220 	orr.w	r2, r2, #32
 8000960:	655a      	str	r2, [r3, #84]	; 0x54
 8000962:	e6b8      	b.n	80006d6 <HAL_ADC_ConfigChannel+0xb2>
 8000964:	fa90 f2a0 	rbit	r2, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000968:	fab2 f282 	clz	r2, r2
 800096c:	fa90 f5a0 	rbit	r5, r0
 8000970:	2601      	movs	r6, #1
 8000972:	fab5 f585 	clz	r5, r5
 8000976:	3201      	adds	r2, #1
 8000978:	4435      	add	r5, r6
 800097a:	0692      	lsls	r2, r2, #26
 800097c:	f005 051f 	and.w	r5, r5, #31
 8000980:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000984:	fa06 f505 	lsl.w	r5, r6, r5
 8000988:	432a      	orrs	r2, r5
 800098a:	fa90 f0a0 	rbit	r0, r0
 800098e:	fab0 f080 	clz	r0, r0
 8000992:	4430      	add	r0, r6
 8000994:	f000 001f 	and.w	r0, r0, #31
 8000998:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800099c:	e7b1      	b.n	8000902 <HAL_ADC_ConfigChannel+0x2de>
 800099e:	bf00      	nop
 80009a0:	000fffff 	.word	0x000fffff
 80009a4:	47ff0000 	.word	0x47ff0000
 80009a8:	5c001000 	.word	0x5c001000
 80009ac:	40022000 	.word	0x40022000
 80009b0:	58026000 	.word	0x58026000
 80009b4:	58026300 	.word	0x58026300
 80009b8:	cb840000 	.word	0xcb840000
 80009bc:	c7520000 	.word	0xc7520000
 80009c0:	cfb80000 	.word	0xcfb80000
 80009c4:	40022300 	.word	0x40022300
 80009c8:	40022100 	.word	0x40022100
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80009cc:	0224      	lsls	r4, r4, #8
 80009ce:	f53f ae7c 	bmi.w	80006ca <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_ADC_ConfigChannel+0x40c>)
 80009d4:	4290      	cmp	r0, r2
 80009d6:	f47f ae78 	bne.w	80006ca <HAL_ADC_ConfigChannel+0xa6>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80009da:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <HAL_ADC_ConfigChannel+0x410>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80009dc:	f446 0100 	orr.w	r1, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009e0:	68a8      	ldr	r0, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80009e2:	6812      	ldr	r2, [r2, #0]
 80009e4:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 80009e8:	4c13      	ldr	r4, [pc, #76]	; (8000a38 <HAL_ADC_ConfigChannel+0x414>)
 80009ea:	0992      	lsrs	r2, r2, #6
 80009ec:	4301      	orrs	r1, r0
 80009ee:	fba4 0202 	umull	r0, r2, r4, r2
 80009f2:	60a9      	str	r1, [r5, #8]
 80009f4:	0992      	lsrs	r2, r2, #6
 80009f6:	0052      	lsls	r2, r2, #1
 80009f8:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80009fa:	9a01      	ldr	r2, [sp, #4]
 80009fc:	2a00      	cmp	r2, #0
 80009fe:	f43f ae64 	beq.w	80006ca <HAL_ADC_ConfigChannel+0xa6>
                wait_loop_index--;
 8000a02:	9a01      	ldr	r2, [sp, #4]
 8000a04:	3a01      	subs	r2, #1
 8000a06:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8000a08:	9a01      	ldr	r2, [sp, #4]
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	d1f9      	bne.n	8000a02 <HAL_ADC_ConfigChannel+0x3de>
 8000a0e:	e65c      	b.n	80006ca <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000a10:	01e1      	lsls	r1, r4, #7
 8000a12:	f53f ae5a 	bmi.w	80006ca <HAL_ADC_ConfigChannel+0xa6>
 8000a16:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_ADC_ConfigChannel+0x40c>)
 8000a18:	4290      	cmp	r0, r2
 8000a1a:	f47f ae56 	bne.w	80006ca <HAL_ADC_ConfigChannel+0xa6>
 8000a1e:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8000a20:	f046 7280 	orr.w	r2, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a24:	2000      	movs	r0, #0
 8000a26:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	60aa      	str	r2, [r5, #8]
 8000a2e:	e652      	b.n	80006d6 <HAL_ADC_ConfigChannel+0xb2>
 8000a30:	58026000 	.word	0x58026000
 8000a34:	2000000c 	.word	0x2000000c
 8000a38:	053e2d63 	.word	0x053e2d63

08000a3c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8000a3c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000a3e:	4a52      	ldr	r2, [pc, #328]	; (8000b88 <ADC_ConfigureBoostMode+0x14c>)
{
 8000a40:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000a42:	6803      	ldr	r3, [r0, #0]
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d027      	beq.n	8000a98 <ADC_ConfigureBoostMode+0x5c>
 8000a48:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d023      	beq.n	8000a98 <ADC_ConfigureBoostMode+0x5c>
 8000a50:	4b4e      	ldr	r3, [pc, #312]	; (8000b8c <ADC_ConfigureBoostMode+0x150>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000a58:	bf14      	ite	ne
 8000a5a:	2301      	movne	r3, #1
 8000a5c:	2300      	moveq	r3, #0
 8000a5e:	b323      	cbz	r3, 8000aaa <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8000a60:	f002 fd24 	bl	80034ac <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8000a64:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8000a66:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8000a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a6c:	d062      	beq.n	8000b34 <ADC_ConfigureBoostMode+0xf8>
 8000a6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000a72:	d072      	beq.n	8000b5a <ADC_ConfigureBoostMode+0x11e>
 8000a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a78:	d05c      	beq.n	8000b34 <ADC_ConfigureBoostMode+0xf8>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000a7a:	f7ff fca9 	bl	80003d0 <HAL_GetREVID>
 8000a7e:	f241 0303 	movw	r3, #4099	; 0x1003
 8000a82:	4298      	cmp	r0, r3
 8000a84:	d832      	bhi.n	8000aec <ADC_ConfigureBoostMode+0xb0>
  {
    if (freq > 20000000UL)
 8000a86:	4a42      	ldr	r2, [pc, #264]	; (8000b90 <ADC_ConfigureBoostMode+0x154>)
 8000a88:	682b      	ldr	r3, [r5, #0]
 8000a8a:	4294      	cmp	r4, r2
 8000a8c:	d928      	bls.n	8000ae0 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a94:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8000a96:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000a98:	4b3e      	ldr	r3, [pc, #248]	; (8000b94 <ADC_ConfigureBoostMode+0x158>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000aa0:	bf14      	ite	ne
 8000aa2:	2301      	movne	r3, #1
 8000aa4:	2300      	moveq	r3, #0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1da      	bne.n	8000a60 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000aaa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000aae:	f003 fddd 	bl	800466c <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8000ab2:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000ab4:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8000ab6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8000aba:	d049      	beq.n	8000b50 <ADC_ConfigureBoostMode+0x114>
 8000abc:	d93e      	bls.n	8000b3c <ADC_ConfigureBoostMode+0x100>
 8000abe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8000ac2:	d04e      	beq.n	8000b62 <ADC_ConfigureBoostMode+0x126>
 8000ac4:	d927      	bls.n	8000b16 <ADC_ConfigureBoostMode+0xda>
 8000ac6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8000aca:	d048      	beq.n	8000b5e <ADC_ConfigureBoostMode+0x122>
 8000acc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8000ad0:	d1d3      	bne.n	8000a7a <ADC_ConfigureBoostMode+0x3e>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000ad2:	f7ff fc7d 	bl	80003d0 <HAL_GetREVID>
 8000ad6:	f241 0303 	movw	r3, #4099	; 0x1003
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d805      	bhi.n	8000aea <ADC_ConfigureBoostMode+0xae>
 8000ade:	682b      	ldr	r3, [r5, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ae6:	609a      	str	r2, [r3, #8]
}
 8000ae8:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 8000aea:	0a24      	lsrs	r4, r4, #8
    freq /= 2U; /* divider by 2 for Rev.V */
 8000aec:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8000aee:	4a2a      	ldr	r2, [pc, #168]	; (8000b98 <ADC_ConfigureBoostMode+0x15c>)
 8000af0:	682b      	ldr	r3, [r5, #0]
 8000af2:	4294      	cmp	r4, r2
 8000af4:	d90a      	bls.n	8000b0c <ADC_ConfigureBoostMode+0xd0>
    else if (freq <= 12500000UL)
 8000af6:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <ADC_ConfigureBoostMode+0x160>)
 8000af8:	4294      	cmp	r4, r2
 8000afa:	d914      	bls.n	8000b26 <ADC_ConfigureBoostMode+0xea>
    else if (freq <= 25000000UL)
 8000afc:	4a28      	ldr	r2, [pc, #160]	; (8000ba0 <ADC_ConfigureBoostMode+0x164>)
 8000afe:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000b00:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8000b02:	d932      	bls.n	8000b6a <ADC_ConfigureBoostMode+0x12e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8000b04:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000b08:	609a      	str	r2, [r3, #8]
}
 8000b0a:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b12:	609a      	str	r2, [r3, #8]
}
 8000b14:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8000b16:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8000b1a:	d024      	beq.n	8000b66 <ADC_ConfigureBoostMode+0x12a>
 8000b1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b20:	d1ab      	bne.n	8000a7a <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 8000b22:	0944      	lsrs	r4, r0, #5
        break;
 8000b24:	e7a9      	b.n	8000a7a <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b30:	609a      	str	r2, [r3, #8]
}
 8000b32:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8000b34:	0c1b      	lsrs	r3, r3, #16
 8000b36:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000b3a:	e79e      	b.n	8000a7a <ADC_ConfigureBoostMode+0x3e>
    switch (hadc->Init.ClockPrescaler)
 8000b3c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000b40:	d006      	beq.n	8000b50 <ADC_ConfigureBoostMode+0x114>
 8000b42:	d818      	bhi.n	8000b76 <ADC_ConfigureBoostMode+0x13a>
 8000b44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000b48:	d002      	beq.n	8000b50 <ADC_ConfigureBoostMode+0x114>
 8000b4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000b4e:	d194      	bne.n	8000a7a <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8000b50:	0c9b      	lsrs	r3, r3, #18
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000b58:	e78f      	b.n	8000a7a <ADC_ConfigureBoostMode+0x3e>
        freq /= 4UL;
 8000b5a:	0884      	lsrs	r4, r0, #2
        break;
 8000b5c:	e78d      	b.n	8000a7a <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 8000b5e:	09c4      	lsrs	r4, r0, #7
        break;
 8000b60:	e78b      	b.n	8000a7a <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 8000b62:	0984      	lsrs	r4, r0, #6
        break;
 8000b64:	e789      	b.n	8000a7a <ADC_ConfigureBoostMode+0x3e>
        freq /= 16UL;
 8000b66:	0904      	lsrs	r4, r0, #4
        break;
 8000b68:	e787      	b.n	8000a7a <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000b6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b72:	609a      	str	r2, [r3, #8]
}
 8000b74:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8000b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b7a:	d0e9      	beq.n	8000b50 <ADC_ConfigureBoostMode+0x114>
 8000b7c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8000b80:	f47f af7b 	bne.w	8000a7a <ADC_ConfigureBoostMode+0x3e>
 8000b84:	e7e4      	b.n	8000b50 <ADC_ConfigureBoostMode+0x114>
 8000b86:	bf00      	nop
 8000b88:	40022000 	.word	0x40022000
 8000b8c:	58026300 	.word	0x58026300
 8000b90:	01312d00 	.word	0x01312d00
 8000b94:	40022300 	.word	0x40022300
 8000b98:	005f5e10 	.word	0x005f5e10
 8000b9c:	00bebc20 	.word	0x00bebc20
 8000ba0:	017d7840 	.word	0x017d7840

08000ba4 <HAL_ADC_Init>:
{
 8000ba4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8000ba6:	2300      	movs	r3, #0
{
 8000ba8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8000baa:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000bac:	2800      	cmp	r0, #0
 8000bae:	f000 80ab 	beq.w	8000d08 <HAL_ADC_Init+0x164>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bb2:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	f000 809b 	beq.w	8000cf2 <HAL_ADC_Init+0x14e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000bbc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	0096      	lsls	r6, r2, #2
 8000bc2:	d504      	bpl.n	8000bce <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000bc4:	6899      	ldr	r1, [r3, #8]
 8000bc6:	4a78      	ldr	r2, [pc, #480]	; (8000da8 <HAL_ADC_Init+0x204>)
 8000bc8:	400a      	ands	r2, r1
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	00d5      	lsls	r5, r2, #3
 8000bd2:	d416      	bmi.n	8000c02 <HAL_ADC_Init+0x5e>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000bd4:	4a75      	ldr	r2, [pc, #468]	; (8000dac <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCx->CR,
 8000bd6:	6898      	ldr	r0, [r3, #8]
 8000bd8:	6812      	ldr	r2, [r2, #0]
 8000bda:	4d75      	ldr	r5, [pc, #468]	; (8000db0 <HAL_ADC_Init+0x20c>)
 8000bdc:	0992      	lsrs	r2, r2, #6
 8000bde:	4975      	ldr	r1, [pc, #468]	; (8000db4 <HAL_ADC_Init+0x210>)
 8000be0:	fba5 5202 	umull	r5, r2, r5, r2
 8000be4:	4001      	ands	r1, r0
 8000be6:	0992      	lsrs	r2, r2, #6
 8000be8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000bec:	6099      	str	r1, [r3, #8]
 8000bee:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8000bf0:	9b01      	ldr	r3, [sp, #4]
 8000bf2:	b12b      	cbz	r3, 8000c00 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8000bf4:	9b01      	ldr	r3, [sp, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000bfa:	9b01      	ldr	r3, [sp, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1f9      	bne.n	8000bf4 <HAL_ADC_Init+0x50>
 8000c00:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	00d0      	lsls	r0, r2, #3
 8000c06:	d413      	bmi.n	8000c30 <HAL_ADC_Init+0x8c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c08:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000c0a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c0c:	f042 0210 	orr.w	r2, r2, #16
 8000c10:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c12:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000c14:	432a      	orrs	r2, r5
 8000c16:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	0751      	lsls	r1, r2, #29
 8000c1c:	d50c      	bpl.n	8000c38 <HAL_ADC_Init+0x94>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c20:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000c22:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c24:	f043 0310 	orr.w	r3, r3, #16
}
 8000c28:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c2a:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd70      	pop	{r4, r5, r6, pc}
 8000c30:	689a      	ldr	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c32:	2500      	movs	r5, #0
 8000c34:	0751      	lsls	r1, r2, #29
 8000c36:	d4f2      	bmi.n	8000c1e <HAL_ADC_Init+0x7a>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c38:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c3a:	06d2      	lsls	r2, r2, #27
 8000c3c:	d4f0      	bmi.n	8000c20 <HAL_ADC_Init+0x7c>
    ADC_STATE_CLR_SET(hadc->State,
 8000c3e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c40:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000c44:	f042 0202 	orr.w	r2, r2, #2
 8000c48:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	07d6      	lsls	r6, r2, #31
 8000c4e:	d413      	bmi.n	8000c78 <HAL_ADC_Init+0xd4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c50:	4a59      	ldr	r2, [pc, #356]	; (8000db8 <HAL_ADC_Init+0x214>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	f000 8087 	beq.w	8000d66 <HAL_ADC_Init+0x1c2>
 8000c58:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	f000 8082 	beq.w	8000d66 <HAL_ADC_Init+0x1c2>
 8000c62:	4b56      	ldr	r3, [pc, #344]	; (8000dbc <HAL_ADC_Init+0x218>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	07d9      	lsls	r1, r3, #31
 8000c68:	d406      	bmi.n	8000c78 <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c6a:	4a55      	ldr	r2, [pc, #340]	; (8000dc0 <HAL_ADC_Init+0x21c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c6c:	6893      	ldr	r3, [r2, #8]
 8000c6e:	6861      	ldr	r1, [r4, #4]
 8000c70:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000c74:	430b      	orrs	r3, r1
 8000c76:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000c78:	f7ff fbaa 	bl	80003d0 <HAL_GetREVID>
 8000c7c:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c80:	4298      	cmp	r0, r3
 8000c82:	7d63      	ldrb	r3, [r4, #21]
 8000c84:	7f20      	ldrb	r0, [r4, #28]
 8000c86:	d961      	bls.n	8000d4c <HAL_ADC_Init+0x1a8>
 8000c88:	68a6      	ldr	r6, [r4, #8]
 8000c8a:	0359      	lsls	r1, r3, #13
 8000c8c:	0402      	lsls	r2, r0, #16
 8000c8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c90:	2e10      	cmp	r6, #16
 8000c92:	f000 8083 	beq.w	8000d9c <HAL_ADC_Init+0x1f8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c96:	4313      	orrs	r3, r2
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	4333      	orrs	r3, r6
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c9c:	2801      	cmp	r0, #1
 8000c9e:	d103      	bne.n	8000ca8 <HAL_ADC_Init+0x104>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ca0:	6a22      	ldr	r2, [r4, #32]
 8000ca2:	3a01      	subs	r2, #1
 8000ca4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ca8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000caa:	b122      	cbz	r2, 8000cb6 <HAL_ADC_Init+0x112>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cac:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000cb0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000cb2:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cb4:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000cb6:	6821      	ldr	r1, [r4, #0]
 8000cb8:	4a42      	ldr	r2, [pc, #264]	; (8000dc4 <HAL_ADC_Init+0x220>)
 8000cba:	68c8      	ldr	r0, [r1, #12]
 8000cbc:	4002      	ands	r2, r0
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cc2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000cca:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ccc:	d101      	bne.n	8000cd2 <HAL_ADC_Init+0x12e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000cce:	0712      	lsls	r2, r2, #28
 8000cd0:	d51e      	bpl.n	8000d10 <HAL_ADC_Init+0x16c>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cd2:	68e2      	ldr	r2, [r4, #12]
 8000cd4:	2a01      	cmp	r2, #1
 8000cd6:	d03e      	beq.n	8000d56 <HAL_ADC_Init+0x1b2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cda:	f022 020f 	bic.w	r2, r2, #15
 8000cde:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ce0:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8000ce2:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ce4:	f023 0303 	bic.w	r3, r3, #3
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8000cf2:	f005 f939 	bl	8005f68 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000cf6:	6823      	ldr	r3, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf8:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000cfa:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	0096      	lsls	r6, r2, #2
 8000d02:	f57f af64 	bpl.w	8000bce <HAL_ADC_Init+0x2a>
 8000d06:	e75d      	b.n	8000bc4 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8000d08:	2501      	movs	r5, #1
}
 8000d0a:	4628      	mov	r0, r5
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d10:	68d9      	ldr	r1, [r3, #12]
 8000d12:	4a2d      	ldr	r2, [pc, #180]	; (8000dc8 <HAL_ADC_Init+0x224>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d14:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d16:	400a      	ands	r2, r1
 8000d18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d1a:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000d22:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d026      	beq.n	8000d78 <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d2a:	6822      	ldr	r2, [r4, #0]
 8000d2c:	6913      	ldr	r3, [r2, #16]
 8000d2e:	f023 0301 	bic.w	r3, r3, #1
 8000d32:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000d34:	6822      	ldr	r2, [r4, #0]
      ADC_ConfigureBoostMode(hadc);
 8000d36:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d3a:	6913      	ldr	r3, [r2, #16]
 8000d3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d40:	430b      	orrs	r3, r1
 8000d42:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8000d44:	f7ff fe7a 	bl	8000a3c <ADC_ConfigureBoostMode>
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	e7c2      	b.n	8000cd2 <HAL_ADC_Init+0x12e>
 8000d4c:	0359      	lsls	r1, r3, #13
 8000d4e:	68a6      	ldr	r6, [r4, #8]
 8000d50:	0402      	lsls	r2, r0, #16
 8000d52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d54:	e79f      	b.n	8000c96 <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d58:	69a2      	ldr	r2, [r4, #24]
 8000d5a:	f021 010f 	bic.w	r1, r1, #15
 8000d5e:	3a01      	subs	r2, #1
 8000d60:	430a      	orrs	r2, r1
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
 8000d64:	e7bc      	b.n	8000ce0 <HAL_ADC_Init+0x13c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <HAL_ADC_Init+0x214>)
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_ADC_Init+0x228>)
 8000d6a:	6892      	ldr	r2, [r2, #8]
 8000d6c:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	07d8      	lsls	r0, r3, #31
 8000d72:	d481      	bmi.n	8000c78 <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d74:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <HAL_ADC_Init+0x22c>)
 8000d76:	e779      	b.n	8000c6c <HAL_ADC_Init+0xc8>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000d78:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 8000d7c:	6820      	ldr	r0, [r4, #0]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8000d82:	6902      	ldr	r2, [r0, #16]
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	4912      	ldr	r1, [pc, #72]	; (8000dd4 <HAL_ADC_Init+0x230>)
 8000d8a:	4333      	orrs	r3, r6
 8000d8c:	4011      	ands	r1, r2
 8000d8e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000d90:	430b      	orrs	r3, r1
 8000d92:	3a01      	subs	r2, #1
 8000d94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d98:	6103      	str	r3, [r0, #16]
 8000d9a:	e7cb      	b.n	8000d34 <HAL_ADC_Init+0x190>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d9c:	f043 031c 	orr.w	r3, r3, #28
 8000da0:	430b      	orrs	r3, r1
 8000da2:	4313      	orrs	r3, r2
 8000da4:	e77a      	b.n	8000c9c <HAL_ADC_Init+0xf8>
 8000da6:	bf00      	nop
 8000da8:	5fffffc0 	.word	0x5fffffc0
 8000dac:	2000000c 	.word	0x2000000c
 8000db0:	053e2d63 	.word	0x053e2d63
 8000db4:	6fffffc0 	.word	0x6fffffc0
 8000db8:	40022000 	.word	0x40022000
 8000dbc:	58026000 	.word	0x58026000
 8000dc0:	58026300 	.word	0x58026300
 8000dc4:	fff0c003 	.word	0xfff0c003
 8000dc8:	ffffbffc 	.word	0xffffbffc
 8000dcc:	40022100 	.word	0x40022100
 8000dd0:	40022300 	.word	0x40022300
 8000dd4:	fc00f81e 	.word	0xfc00f81e

08000dd8 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000dd8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8000ddc:	2a01      	cmp	r2, #1
 8000dde:	d043      	beq.n	8000e68 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2001      	movs	r0, #1
{
 8000de4:	b470      	push	{r4, r5, r6}

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000de6:	4c37      	ldr	r4, [pc, #220]	; (8000ec4 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000de8:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8000dea:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000dee:	42a2      	cmp	r2, r4
 8000df0:	d008      	beq.n	8000e04 <HAL_ADCEx_MultiModeConfigChannel+0x2c>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000df2:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000df4:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000df6:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 8000dfa:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dfe:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8000e00:	bc70      	pop	{r4, r5, r6}
 8000e02:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e04:	4830      	ldr	r0, [pc, #192]	; (8000ec8 <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000e06:	6884      	ldr	r4, [r0, #8]
 8000e08:	0764      	lsls	r4, r4, #29
 8000e0a:	d50a      	bpl.n	8000e22 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8000e0c:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000e10:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e12:	f042 0220 	orr.w	r2, r2, #32
 8000e16:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000e1e:	bc70      	pop	{r4, r5, r6}
 8000e20:	4770      	bx	lr
 8000e22:	6894      	ldr	r4, [r2, #8]
 8000e24:	0765      	lsls	r5, r4, #29
 8000e26:	d4f2      	bmi.n	8000e0e <HAL_ADCEx_MultiModeConfigChannel+0x36>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8000e28:	680c      	ldr	r4, [r1, #0]
 8000e2a:	b1fc      	cbz	r4, 8000e6c <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8000e2c:	4d27      	ldr	r5, [pc, #156]	; (8000ecc <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8000e2e:	684e      	ldr	r6, [r1, #4]
 8000e30:	68ac      	ldr	r4, [r5, #8]
 8000e32:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 8000e36:	4334      	orrs	r4, r6
 8000e38:	60ac      	str	r4, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e3a:	681c      	ldr	r4, [r3, #0]
 8000e3c:	4294      	cmp	r4, r2
 8000e3e:	d035      	beq.n	8000eac <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8000e40:	4284      	cmp	r4, r0
 8000e42:	d033      	beq.n	8000eac <HAL_ADCEx_MultiModeConfigChannel+0xd4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e44:	4a22      	ldr	r2, [pc, #136]	; (8000ed0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8000e46:	6892      	ldr	r2, [r2, #8]
 8000e48:	43d2      	mvns	r2, r2
 8000e4a:	f002 0201 	and.w	r2, r2, #1
 8000e4e:	2a00      	cmp	r2, #0
 8000e50:	d035      	beq.n	8000ebe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
        MODIFY_REG(tmpADC_Common->CCR,
 8000e52:	4d1e      	ldr	r5, [pc, #120]	; (8000ecc <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e54:	2000      	movs	r0, #0
        MODIFY_REG(tmpADC_Common->CCR,
 8000e56:	680a      	ldr	r2, [r1, #0]
 8000e58:	68ae      	ldr	r6, [r5, #8]
 8000e5a:	6889      	ldr	r1, [r1, #8]
 8000e5c:	4c1d      	ldr	r4, [pc, #116]	; (8000ed4 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	4034      	ands	r4, r6
 8000e62:	4322      	orrs	r2, r4
 8000e64:	60aa      	str	r2, [r5, #8]
 8000e66:	e7d7      	b.n	8000e18 <HAL_ADCEx_MultiModeConfigChannel+0x40>
  __HAL_LOCK(hadc);
 8000e68:	2002      	movs	r0, #2
}
 8000e6a:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8000e6c:	4c17      	ldr	r4, [pc, #92]	; (8000ecc <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8000e6e:	68a1      	ldr	r1, [r4, #8]
 8000e70:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8000e74:	60a1      	str	r1, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e76:	6819      	ldr	r1, [r3, #0]
 8000e78:	4291      	cmp	r1, r2
 8000e7a:	d00e      	beq.n	8000e9a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8000e7c:	4281      	cmp	r1, r0
 8000e7e:	d00c      	beq.n	8000e9a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8000e80:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8000e82:	6892      	ldr	r2, [r2, #8]
 8000e84:	43d2      	mvns	r2, r2
 8000e86:	f002 0201 	and.w	r2, r2, #1
 8000e8a:	b1c2      	cbz	r2, 8000ebe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000e8c:	490f      	ldr	r1, [pc, #60]	; (8000ecc <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8e:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000e90:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8000e92:	688c      	ldr	r4, [r1, #8]
 8000e94:	4022      	ands	r2, r4
 8000e96:	608a      	str	r2, [r1, #8]
 8000e98:	e7be      	b.n	8000e18 <HAL_ADCEx_MultiModeConfigChannel+0x40>
 8000e9a:	490a      	ldr	r1, [pc, #40]	; (8000ec4 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000e9e:	6889      	ldr	r1, [r1, #8]
 8000ea0:	6892      	ldr	r2, [r2, #8]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	43d2      	mvns	r2, r2
 8000ea6:	f002 0201 	and.w	r2, r2, #1
 8000eaa:	e7ee      	b.n	8000e8a <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000eb0:	6880      	ldr	r0, [r0, #8]
 8000eb2:	6892      	ldr	r2, [r2, #8]
 8000eb4:	4302      	orrs	r2, r0
 8000eb6:	43d2      	mvns	r2, r2
 8000eb8:	f002 0201 	and.w	r2, r2, #1
 8000ebc:	e7c7      	b.n	8000e4e <HAL_ADCEx_MultiModeConfigChannel+0x76>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	e7aa      	b.n	8000e18 <HAL_ADCEx_MultiModeConfigChannel+0x40>
 8000ec2:	bf00      	nop
 8000ec4:	40022000 	.word	0x40022000
 8000ec8:	40022100 	.word	0x40022100
 8000ecc:	40022300 	.word	0x40022300
 8000ed0:	58026000 	.word	0x58026000
 8000ed4:	fffff0e0 	.word	0xfffff0e0

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eda:	0200      	lsls	r0, r0, #8
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <HAL_NVIC_SetPriorityGrouping+0x24>)
 8000ede:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee2:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee4:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	4022      	ands	r2, r4
 8000eec:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eee:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8000ef0:	60c8      	str	r0, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	05fa0000 	.word	0x05fa0000

08000f00 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f02:	b430      	push	{r4, r5}
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0a:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	2d04      	cmp	r5, #4
 8000f12:	bf28      	it	cs
 8000f14:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	2c06      	cmp	r4, #6
 8000f18:	d918      	bls.n	8000f4c <HAL_NVIC_SetPriority+0x4c>
 8000f1a:	3b03      	subs	r3, #3
 8000f1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000f20:	409c      	lsls	r4, r3
 8000f22:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	fa02 f205 	lsl.w	r2, r2, r5
 8000f30:	ea21 0102 	bic.w	r1, r1, r2
 8000f34:	fa01 f203 	lsl.w	r2, r1, r3
 8000f38:	ea42 0204 	orr.w	r2, r2, r4
 8000f3c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000f40:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8000f42:	db06      	blt.n	8000f52 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <HAL_NVIC_SetPriority+0x64>)
 8000f46:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f48:	bc30      	pop	{r4, r5}
 8000f4a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	4623      	mov	r3, r4
 8000f50:	e7e9      	b.n	8000f26 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	f000 000f 	and.w	r0, r0, #15
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_NVIC_SetPriority+0x68>)
 8000f58:	541a      	strb	r2, [r3, r0]
 8000f5a:	bc30      	pop	{r4, r5}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	e000e400 	.word	0xe000e400
 8000f68:	e000ed14 	.word	0xe000ed14

08000f6c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	db07      	blt.n	8000f80 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f70:	f000 011f 	and.w	r1, r0, #31
 8000f74:	2301      	movs	r3, #1
 8000f76:	0940      	lsrs	r0, r0, #5
 8000f78:	4a02      	ldr	r2, [pc, #8]	; (8000f84 <HAL_NVIC_EnableIRQ+0x18>)
 8000f7a:	408b      	lsls	r3, r1
 8000f7c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	3801      	subs	r0, #1
 8000f8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f8e:	d20d      	bcs.n	8000fac <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f92:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f94:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	25f0      	movs	r5, #240	; 0xf0
 8000f9a:	4c06      	ldr	r4, [pc, #24]	; (8000fb4 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9c:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9e:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000fa8:	bc30      	pop	{r4, r5}
 8000faa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fac:	2001      	movs	r0, #1
 8000fae:	4770      	bx	lr
 8000fb0:	e000e010 	.word	0xe000e010
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8000fb8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	4904      	ldr	r1, [pc, #16]	; (8000fd4 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fc2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc8:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8000fca:	6048      	str	r0, [r1, #4]
}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	e000ed90 	.word	0xe000ed90

08000fd8 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000fda:	f040 0001 	orr.w	r0, r0, #1
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_MPU_Enable+0x20>)
 8000fe0:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000fe2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000fea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fee:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	e000ed90 	.word	0xe000ed90

08000ffc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ffc:	7843      	ldrb	r3, [r0, #1]
 8000ffe:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_MPU_ConfigRegion+0x50>)
 8001000:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001002:	7803      	ldrb	r3, [r0, #0]
 8001004:	b913      	cbnz	r3, 800100c <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8001006:	60d3      	str	r3, [r2, #12]
    MPU->RASR = 0x00;
 8001008:	6113      	str	r3, [r2, #16]
 800100a:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 800100c:	6843      	ldr	r3, [r0, #4]
{
 800100e:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8001010:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001012:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001014:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001016:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001018:	7805      	ldrb	r5, [r0, #0]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800101a:	7a84      	ldrb	r4, [r0, #10]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800101c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001020:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001022:	7b86      	ldrb	r6, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001024:	432b      	orrs	r3, r5
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001026:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001028:	ea43 43c4 	orr.w	r3, r3, r4, lsl #19
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800102c:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800102e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001032:	7a01      	ldrb	r1, [r0, #8]
 8001034:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8001038:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800103c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001040:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001044:	6113      	str	r3, [r2, #16]
  }
}
 8001046:	bc70      	pop	{r4, r5, r6}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed90 	.word	0xe000ed90

08001050 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001050:	4b35      	ldr	r3, [pc, #212]	; (8001128 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8001052:	4601      	mov	r1, r0
 8001054:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001056:	4c35      	ldr	r4, [pc, #212]	; (800112c <DMA_CalcBaseAndBitshift+0xdc>)
 8001058:	6802      	ldr	r2, [r0, #0]
 800105a:	4835      	ldr	r0, [pc, #212]	; (8001130 <DMA_CalcBaseAndBitshift+0xe0>)
 800105c:	42a2      	cmp	r2, r4
 800105e:	bf18      	it	ne
 8001060:	429a      	cmpne	r2, r3
 8001062:	4d34      	ldr	r5, [pc, #208]	; (8001134 <DMA_CalcBaseAndBitshift+0xe4>)
 8001064:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8001068:	bf0c      	ite	eq
 800106a:	2301      	moveq	r3, #1
 800106c:	2300      	movne	r3, #0
 800106e:	4282      	cmp	r2, r0
 8001070:	bf08      	it	eq
 8001072:	f043 0301 	orreq.w	r3, r3, #1
 8001076:	3048      	adds	r0, #72	; 0x48
 8001078:	42aa      	cmp	r2, r5
 800107a:	bf08      	it	eq
 800107c:	f043 0301 	orreq.w	r3, r3, #1
 8001080:	3548      	adds	r5, #72	; 0x48
 8001082:	42a2      	cmp	r2, r4
 8001084:	bf08      	it	eq
 8001086:	f043 0301 	orreq.w	r3, r3, #1
 800108a:	3448      	adds	r4, #72	; 0x48
 800108c:	4282      	cmp	r2, r0
 800108e:	bf08      	it	eq
 8001090:	f043 0301 	orreq.w	r3, r3, #1
 8001094:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001098:	42aa      	cmp	r2, r5
 800109a:	bf08      	it	eq
 800109c:	f043 0301 	orreq.w	r3, r3, #1
 80010a0:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80010a4:	42a2      	cmp	r2, r4
 80010a6:	bf08      	it	eq
 80010a8:	f043 0301 	orreq.w	r3, r3, #1
 80010ac:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80010b0:	4282      	cmp	r2, r0
 80010b2:	bf08      	it	eq
 80010b4:	f043 0301 	orreq.w	r3, r3, #1
 80010b8:	3048      	adds	r0, #72	; 0x48
 80010ba:	42aa      	cmp	r2, r5
 80010bc:	bf08      	it	eq
 80010be:	f043 0301 	orreq.w	r3, r3, #1
 80010c2:	3548      	adds	r5, #72	; 0x48
 80010c4:	42a2      	cmp	r2, r4
 80010c6:	bf08      	it	eq
 80010c8:	f043 0301 	orreq.w	r3, r3, #1
 80010cc:	3448      	adds	r4, #72	; 0x48
 80010ce:	4282      	cmp	r2, r0
 80010d0:	bf08      	it	eq
 80010d2:	f043 0301 	orreq.w	r3, r3, #1
 80010d6:	3048      	adds	r0, #72	; 0x48
 80010d8:	42aa      	cmp	r2, r5
 80010da:	bf08      	it	eq
 80010dc:	f043 0301 	orreq.w	r3, r3, #1
 80010e0:	42a2      	cmp	r2, r4
 80010e2:	bf08      	it	eq
 80010e4:	f043 0301 	orreq.w	r3, r3, #1
 80010e8:	4282      	cmp	r2, r0
 80010ea:	bf08      	it	eq
 80010ec:	f043 0301 	orreq.w	r3, r3, #1
 80010f0:	b913      	cbnz	r3, 80010f8 <DMA_CalcBaseAndBitshift+0xa8>
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <DMA_CalcBaseAndBitshift+0xe8>)
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d112      	bne.n	800111e <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80010f8:	b2d3      	uxtb	r3, r2
 80010fa:	4d10      	ldr	r5, [pc, #64]	; (800113c <DMA_CalcBaseAndBitshift+0xec>)
 80010fc:	4810      	ldr	r0, [pc, #64]	; (8001140 <DMA_CalcBaseAndBitshift+0xf0>)
 80010fe:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001100:	4c10      	ldr	r4, [pc, #64]	; (8001144 <DMA_CalcBaseAndBitshift+0xf4>)
 8001102:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001104:	fba5 5303 	umull	r5, r3, r5, r3
 8001108:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800110a:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 800110e:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001110:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001112:	bf88      	it	hi
 8001114:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001116:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001118:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800111a:	bc30      	pop	{r4, r5}
 800111c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800111e:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8001122:	6588      	str	r0, [r1, #88]	; 0x58
 8001124:	e7f9      	b.n	800111a <DMA_CalcBaseAndBitshift+0xca>
 8001126:	bf00      	nop
 8001128:	40020010 	.word	0x40020010
 800112c:	40020028 	.word	0x40020028
 8001130:	40020040 	.word	0x40020040
 8001134:	40020058 	.word	0x40020058
 8001138:	400204b8 	.word	0x400204b8
 800113c:	aaaaaaab 	.word	0xaaaaaaab
 8001140:	fffffc00 	.word	0xfffffc00
 8001144:	0800a1e8 	.word	0x0800a1e8

08001148 <HAL_DMA_Init>:
{
 8001148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800114c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800114e:	f7ff f927 	bl	80003a0 <HAL_GetTick>
  if(hdma == NULL)
 8001152:	2c00      	cmp	r4, #0
 8001154:	f000 81ab 	beq.w	80014ae <HAL_DMA_Init+0x366>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001158:	6822      	ldr	r2, [r4, #0]
 800115a:	4605      	mov	r5, r0
 800115c:	4b56      	ldr	r3, [pc, #344]	; (80012b8 <HAL_DMA_Init+0x170>)
 800115e:	429a      	cmp	r2, r3
 8001160:	d049      	beq.n	80011f6 <HAL_DMA_Init+0xae>
 8001162:	3318      	adds	r3, #24
 8001164:	429a      	cmp	r2, r3
 8001166:	d046      	beq.n	80011f6 <HAL_DMA_Init+0xae>
 8001168:	3330      	adds	r3, #48	; 0x30
 800116a:	4854      	ldr	r0, [pc, #336]	; (80012bc <HAL_DMA_Init+0x174>)
 800116c:	4954      	ldr	r1, [pc, #336]	; (80012c0 <HAL_DMA_Init+0x178>)
 800116e:	4282      	cmp	r2, r0
 8001170:	bf18      	it	ne
 8001172:	429a      	cmpne	r2, r3
 8001174:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001178:	bf0c      	ite	eq
 800117a:	2301      	moveq	r3, #1
 800117c:	2300      	movne	r3, #0
 800117e:	428a      	cmp	r2, r1
 8001180:	bf08      	it	eq
 8001182:	f043 0301 	orreq.w	r3, r3, #1
 8001186:	3130      	adds	r1, #48	; 0x30
 8001188:	4282      	cmp	r2, r0
 800118a:	bf08      	it	eq
 800118c:	f043 0301 	orreq.w	r3, r3, #1
 8001190:	3030      	adds	r0, #48	; 0x30
 8001192:	428a      	cmp	r2, r1
 8001194:	bf08      	it	eq
 8001196:	f043 0301 	orreq.w	r3, r3, #1
 800119a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800119e:	4282      	cmp	r2, r0
 80011a0:	bf08      	it	eq
 80011a2:	f043 0301 	orreq.w	r3, r3, #1
 80011a6:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80011aa:	428a      	cmp	r2, r1
 80011ac:	bf08      	it	eq
 80011ae:	f043 0301 	orreq.w	r3, r3, #1
 80011b2:	3130      	adds	r1, #48	; 0x30
 80011b4:	4282      	cmp	r2, r0
 80011b6:	bf08      	it	eq
 80011b8:	f043 0301 	orreq.w	r3, r3, #1
 80011bc:	3030      	adds	r0, #48	; 0x30
 80011be:	428a      	cmp	r2, r1
 80011c0:	bf08      	it	eq
 80011c2:	f043 0301 	orreq.w	r3, r3, #1
 80011c6:	3130      	adds	r1, #48	; 0x30
 80011c8:	4282      	cmp	r2, r0
 80011ca:	bf08      	it	eq
 80011cc:	f043 0301 	orreq.w	r3, r3, #1
 80011d0:	3030      	adds	r0, #48	; 0x30
 80011d2:	428a      	cmp	r2, r1
 80011d4:	bf08      	it	eq
 80011d6:	f043 0301 	orreq.w	r3, r3, #1
 80011da:	3130      	adds	r1, #48	; 0x30
 80011dc:	4282      	cmp	r2, r0
 80011de:	bf08      	it	eq
 80011e0:	f043 0301 	orreq.w	r3, r3, #1
 80011e4:	428a      	cmp	r2, r1
 80011e6:	bf08      	it	eq
 80011e8:	f043 0301 	orreq.w	r3, r3, #1
 80011ec:	b91b      	cbnz	r3, 80011f6 <HAL_DMA_Init+0xae>
 80011ee:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HAL_DMA_Init+0x17c>)
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f040 81eb 	bne.w	80015cc <HAL_DMA_Init+0x484>
    hdma->State = HAL_DMA_STATE_BUSY;
 80011f6:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 80011f8:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80011fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80011fe:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8001202:	6813      	ldr	r3, [r2, #0]
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e005      	b.n	8001218 <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800120c:	f7ff f8c8 	bl	80003a0 <HAL_GetTick>
 8001210:	1b40      	subs	r0, r0, r5
 8001212:	2805      	cmp	r0, #5
 8001214:	f200 8143 	bhi.w	800149e <HAL_DMA_Init+0x356>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	07d0      	lsls	r0, r2, #31
 800121e:	d4f5      	bmi.n	800120c <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 8001220:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001224:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8001226:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001228:	e9d4 5005 	ldrd	r5, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800122c:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800122e:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001230:	432a      	orrs	r2, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8001232:	6a25      	ldr	r5, [r4, #32]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001234:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001236:	6818      	ldr	r0, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001238:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800123a:	4923      	ldr	r1, [pc, #140]	; (80012c8 <HAL_DMA_Init+0x180>)
 800123c:	4001      	ands	r1, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800123e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8001240:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001242:	2804      	cmp	r0, #4
    registerValue |=  hdma->Init.Direction           |
 8001244:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001248:	d103      	bne.n	8001252 <HAL_DMA_Init+0x10a>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800124a:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 800124e:	4301      	orrs	r1, r0
 8001250:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001252:	481e      	ldr	r0, [pc, #120]	; (80012cc <HAL_DMA_Init+0x184>)
 8001254:	491e      	ldr	r1, [pc, #120]	; (80012d0 <HAL_DMA_Init+0x188>)
 8001256:	6800      	ldr	r0, [r0, #0]
 8001258:	4001      	ands	r1, r0
 800125a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800125e:	d30a      	bcc.n	8001276 <HAL_DMA_Init+0x12e>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001260:	6860      	ldr	r0, [r4, #4]
 8001262:	f1a0 0529 	sub.w	r5, r0, #41	; 0x29
 8001266:	2d1f      	cmp	r5, #31
 8001268:	f240 8124 	bls.w	80014b4 <HAL_DMA_Init+0x36c>
 800126c:	384f      	subs	r0, #79	; 0x4f
 800126e:	2803      	cmp	r0, #3
 8001270:	d801      	bhi.n	8001276 <HAL_DMA_Init+0x12e>
        registerValue |= DMA_SxCR_TRBUFF;
 8001272:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001276:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001278:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 800127a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800127c:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800127e:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001280:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001284:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001288:	d12a      	bne.n	80012e0 <HAL_DMA_Init+0x198>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800128a:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 800128e:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001290:	b330      	cbz	r0, 80012e0 <HAL_DMA_Init+0x198>
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001292:	69a5      	ldr	r5, [r4, #24]
 8001294:	b1f5      	cbz	r5, 80012d4 <HAL_DMA_Init+0x18c>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001296:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800129a:	f000 81fb 	beq.w	8001694 <HAL_DMA_Init+0x54c>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800129e:	2a02      	cmp	r2, #2
 80012a0:	d903      	bls.n	80012aa <HAL_DMA_Init+0x162>
 80012a2:	2a03      	cmp	r2, #3
 80012a4:	d11c      	bne.n	80012e0 <HAL_DMA_Init+0x198>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012a6:	01c2      	lsls	r2, r0, #7
 80012a8:	d51a      	bpl.n	80012e0 <HAL_DMA_Init+0x198>
          hdma->State = HAL_DMA_STATE_READY;
 80012aa:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012ac:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80012ae:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012b0:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80012b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 80012b6:	e0f0      	b.n	800149a <HAL_DMA_Init+0x352>
 80012b8:	40020010 	.word	0x40020010
 80012bc:	40020040 	.word	0x40020040
 80012c0:	40020070 	.word	0x40020070
 80012c4:	400204b8 	.word	0x400204b8
 80012c8:	fe10803f 	.word	0xfe10803f
 80012cc:	5c001000 	.word	0x5c001000
 80012d0:	ffff0000 	.word	0xffff0000
    switch (hdma->Init.FIFOThreshold)
 80012d4:	2a01      	cmp	r2, #1
 80012d6:	f000 81d8 	beq.w	800168a <HAL_DMA_Init+0x542>
 80012da:	d3e4      	bcc.n	80012a6 <HAL_DMA_Init+0x15e>
 80012dc:	2a02      	cmp	r2, #2
 80012de:	d0e2      	beq.n	80012a6 <HAL_DMA_Init+0x15e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80012e0:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff feb4 	bl	8001050 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80012e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012ea:	233f      	movs	r3, #63	; 0x3f
 80012ec:	f002 021f 	and.w	r2, r2, #31
 80012f0:	4093      	lsls	r3, r2
 80012f2:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012f4:	6822      	ldr	r2, [r4, #0]
 80012f6:	4b9d      	ldr	r3, [pc, #628]	; (800156c <HAL_DMA_Init+0x424>)
 80012f8:	489d      	ldr	r0, [pc, #628]	; (8001570 <HAL_DMA_Init+0x428>)
 80012fa:	499e      	ldr	r1, [pc, #632]	; (8001574 <HAL_DMA_Init+0x42c>)
 80012fc:	4282      	cmp	r2, r0
 80012fe:	bf18      	it	ne
 8001300:	429a      	cmpne	r2, r3
 8001302:	4e9d      	ldr	r6, [pc, #628]	; (8001578 <HAL_DMA_Init+0x430>)
 8001304:	4d9d      	ldr	r5, [pc, #628]	; (800157c <HAL_DMA_Init+0x434>)
 8001306:	f100 0060 	add.w	r0, r0, #96	; 0x60
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	f8df e2a8 	ldr.w	lr, [pc, #680]	; 80015bc <HAL_DMA_Init+0x474>
 8001314:	428a      	cmp	r2, r1
 8001316:	bf08      	it	eq
 8001318:	f043 0301 	orreq.w	r3, r3, #1
 800131c:	3160      	adds	r1, #96	; 0x60
 800131e:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 80015c0 <HAL_DMA_Init+0x478>
 8001322:	42b2      	cmp	r2, r6
 8001324:	bf08      	it	eq
 8001326:	f043 0301 	orreq.w	r3, r3, #1
 800132a:	4f95      	ldr	r7, [pc, #596]	; (8001580 <HAL_DMA_Init+0x438>)
 800132c:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8001330:	f8df 8290 	ldr.w	r8, [pc, #656]	; 80015c4 <HAL_DMA_Init+0x47c>
 8001334:	42aa      	cmp	r2, r5
 8001336:	bf08      	it	eq
 8001338:	f043 0301 	orreq.w	r3, r3, #1
 800133c:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
 8001340:	f8df a258 	ldr.w	sl, [pc, #600]	; 800159c <HAL_DMA_Init+0x454>
 8001344:	4282      	cmp	r2, r0
 8001346:	bf08      	it	eq
 8001348:	f043 0301 	orreq.w	r3, r3, #1
 800134c:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8001350:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80015c8 <HAL_DMA_Init+0x480>
 8001354:	428a      	cmp	r2, r1
 8001356:	bf08      	it	eq
 8001358:	f043 0301 	orreq.w	r3, r3, #1
 800135c:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8001360:	4572      	cmp	r2, lr
 8001362:	bf08      	it	eq
 8001364:	f043 0301 	orreq.w	r3, r3, #1
 8001368:	f8df e228 	ldr.w	lr, [pc, #552]	; 8001594 <HAL_DMA_Init+0x44c>
 800136c:	4562      	cmp	r2, ip
 800136e:	bf08      	it	eq
 8001370:	f043 0301 	orreq.w	r3, r3, #1
 8001374:	eba2 0e0e 	sub.w	lr, r2, lr
 8001378:	f8df c21c 	ldr.w	ip, [pc, #540]	; 8001598 <HAL_DMA_Init+0x450>
 800137c:	42ba      	cmp	r2, r7
 800137e:	bf08      	it	eq
 8001380:	f043 0301 	orreq.w	r3, r3, #1
 8001384:	fabe fe8e 	clz	lr, lr
 8001388:	eba2 070c 	sub.w	r7, r2, ip
 800138c:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001390:	42b2      	cmp	r2, r6
 8001392:	bf08      	it	eq
 8001394:	f043 0301 	orreq.w	r3, r3, #1
 8001398:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800139c:	eba2 060a 	sub.w	r6, r2, sl
 80013a0:	fab7 f787 	clz	r7, r7
 80013a4:	42aa      	cmp	r2, r5
 80013a6:	bf08      	it	eq
 80013a8:	f043 0301 	orreq.w	r3, r3, #1
 80013ac:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 80013b0:	eba2 050c 	sub.w	r5, r2, ip
 80013b4:	097f      	lsrs	r7, r7, #5
 80013b6:	4282      	cmp	r2, r0
 80013b8:	bf08      	it	eq
 80013ba:	f043 0301 	orreq.w	r3, r3, #1
 80013be:	fab6 f686 	clz	r6, r6
 80013c2:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80013c6:	fab5 f585 	clz	r5, r5
 80013ca:	428a      	cmp	r2, r1
 80013cc:	bf08      	it	eq
 80013ce:	f043 0301 	orreq.w	r3, r3, #1
 80013d2:	0976      	lsrs	r6, r6, #5
 80013d4:	eba2 000a 	sub.w	r0, r2, sl
 80013d8:	eba2 010c 	sub.w	r1, r2, ip
 80013dc:	4542      	cmp	r2, r8
 80013de:	bf08      	it	eq
 80013e0:	f043 0301 	orreq.w	r3, r3, #1
 80013e4:	096d      	lsrs	r5, r5, #5
 80013e6:	fab0 f080 	clz	r0, r0
 80013ea:	f10c 0c14 	add.w	ip, ip, #20
 80013ee:	454a      	cmp	r2, r9
 80013f0:	bf08      	it	eq
 80013f2:	f043 0301 	orreq.w	r3, r3, #1
 80013f6:	fab1 f181 	clz	r1, r1
 80013fa:	0940      	lsrs	r0, r0, #5
 80013fc:	eba2 0c0c 	sub.w	ip, r2, ip
 8001400:	ea4e 0303 	orr.w	r3, lr, r3
 8001404:	0949      	lsrs	r1, r1, #5
 8001406:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80015a0 <HAL_DMA_Init+0x458>
 800140a:	fabc fc8c 	clz	ip, ip
 800140e:	433b      	orrs	r3, r7
 8001410:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001414:	eba2 0808 	sub.w	r8, r2, r8
 8001418:	4333      	orrs	r3, r6
 800141a:	fab8 f888 	clz	r8, r8
 800141e:	432b      	orrs	r3, r5
 8001420:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8001424:	4303      	orrs	r3, r0
 8001426:	430b      	orrs	r3, r1
 8001428:	ea5c 0303 	orrs.w	r3, ip, r3
 800142c:	d102      	bne.n	8001434 <HAL_DMA_Init+0x2ec>
 800142e:	f1b8 0f00 	cmp.w	r8, #0
 8001432:	d02d      	beq.n	8001490 <HAL_DMA_Init+0x348>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001434:	ea47 070e 	orr.w	r7, r7, lr
 8001438:	b2d3      	uxtb	r3, r2
 800143a:	433e      	orrs	r6, r7
 800143c:	4335      	orrs	r5, r6
 800143e:	4328      	orrs	r0, r5
 8001440:	4301      	orrs	r1, r0
 8001442:	ea5c 0101 	orrs.w	r1, ip, r1
 8001446:	d102      	bne.n	800144e <HAL_DMA_Init+0x306>
 8001448:	f1b8 0f00 	cmp.w	r8, #0
 800144c:	d076      	beq.n	800153c <HAL_DMA_Init+0x3f4>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800144e:	484d      	ldr	r0, [pc, #308]	; (8001584 <HAL_DMA_Init+0x43c>)
 8001450:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001452:	4a4d      	ldr	r2, [pc, #308]	; (8001588 <HAL_DMA_Init+0x440>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001454:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001456:	fba0 0303 	umull	r0, r3, r0, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800145a:	484c      	ldr	r0, [pc, #304]	; (800158c <HAL_DMA_Init+0x444>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800145c:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800145e:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001460:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001462:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001466:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800146c:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800146e:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001470:	68a3      	ldr	r3, [r4, #8]
 8001472:	2b80      	cmp	r3, #128	; 0x80
 8001474:	d026      	beq.n	80014c4 <HAL_DMA_Init+0x37c>
 8001476:	7923      	ldrb	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001478:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800147a:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 800147e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001480:	6860      	ldr	r0, [r4, #4]
 8001482:	1e41      	subs	r1, r0, #1
 8001484:	2907      	cmp	r1, #7
 8001486:	d921      	bls.n	80014cc <HAL_DMA_Init+0x384>
      hdma->DMAmuxRequestGen = 0U;
 8001488:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800148a:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800148e:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001490:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001492:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001494:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001496:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800149a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800149e:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80014a0:	2303      	movs	r3, #3
        return HAL_ERROR;
 80014a2:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014a4:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80014a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80014aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 80014ae:	2001      	movs	r0, #1
}
 80014b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80014b4:	4936      	ldr	r1, [pc, #216]	; (8001590 <HAL_DMA_Init+0x448>)
 80014b6:	40e9      	lsrs	r1, r5
 80014b8:	07c9      	lsls	r1, r1, #31
 80014ba:	f57f aed7 	bpl.w	800126c <HAL_DMA_Init+0x124>
        registerValue |= DMA_SxCR_TRBUFF;
 80014be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014c2:	e6d8      	b.n	8001276 <HAL_DMA_Init+0x12e>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014c4:	2100      	movs	r1, #0
 80014c6:	460b      	mov	r3, r1
 80014c8:	6061      	str	r1, [r4, #4]
 80014ca:	e7d5      	b.n	8001478 <HAL_DMA_Init+0x330>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80014cc:	6822      	ldr	r2, [r4, #0]
 80014ce:	4b31      	ldr	r3, [pc, #196]	; (8001594 <HAL_DMA_Init+0x44c>)
 80014d0:	4e31      	ldr	r6, [pc, #196]	; (8001598 <HAL_DMA_Init+0x450>)
 80014d2:	4d32      	ldr	r5, [pc, #200]	; (800159c <HAL_DMA_Init+0x454>)
 80014d4:	42b2      	cmp	r2, r6
 80014d6:	bf18      	it	ne
 80014d8:	429a      	cmpne	r2, r3
 80014da:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	42aa      	cmp	r2, r5
 80014e6:	bf08      	it	eq
 80014e8:	f043 0301 	orreq.w	r3, r3, #1
 80014ec:	3528      	adds	r5, #40	; 0x28
 80014ee:	42b2      	cmp	r2, r6
 80014f0:	bf08      	it	eq
 80014f2:	f043 0301 	orreq.w	r3, r3, #1
 80014f6:	3628      	adds	r6, #40	; 0x28
 80014f8:	42aa      	cmp	r2, r5
 80014fa:	bf08      	it	eq
 80014fc:	f043 0301 	orreq.w	r3, r3, #1
 8001500:	3528      	adds	r5, #40	; 0x28
 8001502:	42b2      	cmp	r2, r6
 8001504:	bf08      	it	eq
 8001506:	f043 0301 	orreq.w	r3, r3, #1
 800150a:	42aa      	cmp	r2, r5
 800150c:	bf08      	it	eq
 800150e:	f043 0301 	orreq.w	r3, r3, #1
 8001512:	b91b      	cbnz	r3, 800151c <HAL_DMA_Init+0x3d4>
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <HAL_DMA_Init+0x458>)
 8001516:	429a      	cmp	r2, r3
 8001518:	f040 80ca 	bne.w	80016b0 <HAL_DMA_Init+0x568>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <HAL_DMA_Init+0x45c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800151e:	4d22      	ldr	r5, [pc, #136]	; (80015a8 <HAL_DMA_Init+0x460>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001520:	4403      	add	r3, r0
 8001522:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001524:	2201      	movs	r2, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001526:	2000      	movs	r0, #0
 8001528:	6725      	str	r5, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800152a:	fa02 f101 	lsl.w	r1, r2, r1
 800152e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8001530:	6761      	str	r1, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001532:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001534:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	e7a9      	b.n	8001490 <HAL_DMA_Init+0x348>
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800153c:	491b      	ldr	r1, [pc, #108]	; (80015ac <HAL_DMA_Init+0x464>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800153e:	3b10      	subs	r3, #16
 8001540:	481b      	ldr	r0, [pc, #108]	; (80015b0 <HAL_DMA_Init+0x468>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001542:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001544:	fba0 0303 	umull	r0, r3, r0, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001548:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800154a:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800154e:	d800      	bhi.n	8001552 <HAL_DMA_Init+0x40a>
      stream_number += 8U;
 8001550:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001552:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <HAL_DMA_Init+0x46c>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001554:	f003 051f 	and.w	r5, r3, #31
 8001558:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800155a:	4817      	ldr	r0, [pc, #92]	; (80015b8 <HAL_DMA_Init+0x470>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800155c:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800155e:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001560:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001562:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001564:	66a1      	str	r1, [r4, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001566:	6622      	str	r2, [r4, #96]	; 0x60
 8001568:	e782      	b.n	8001470 <HAL_DMA_Init+0x328>
 800156a:	bf00      	nop
 800156c:	40020010 	.word	0x40020010
 8001570:	40020028 	.word	0x40020028
 8001574:	40020040 	.word	0x40020040
 8001578:	40020058 	.word	0x40020058
 800157c:	40020070 	.word	0x40020070
 8001580:	40020428 	.word	0x40020428
 8001584:	cccccccd 	.word	0xcccccccd
 8001588:	16009600 	.word	0x16009600
 800158c:	58025880 	.word	0x58025880
 8001590:	c3c0003f 	.word	0xc3c0003f
 8001594:	58025408 	.word	0x58025408
 8001598:	5802541c 	.word	0x5802541c
 800159c:	58025430 	.word	0x58025430
 80015a0:	58025494 	.word	0x58025494
 80015a4:	1600963f 	.word	0x1600963f
 80015a8:	58025940 	.word	0x58025940
 80015ac:	bffdfbf0 	.word	0xbffdfbf0
 80015b0:	aaaaaaab 	.word	0xaaaaaaab
 80015b4:	10008200 	.word	0x10008200
 80015b8:	40020880 	.word	0x40020880
 80015bc:	400200b8 	.word	0x400200b8
 80015c0:	40020410 	.word	0x40020410
 80015c4:	400204a0 	.word	0x400204a0
 80015c8:	400204b8 	.word	0x400204b8
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80015cc:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <HAL_DMA_Init+0x584>)
 80015ce:	4940      	ldr	r1, [pc, #256]	; (80016d0 <HAL_DMA_Init+0x588>)
 80015d0:	4840      	ldr	r0, [pc, #256]	; (80016d4 <HAL_DMA_Init+0x58c>)
 80015d2:	428a      	cmp	r2, r1
 80015d4:	bf18      	it	ne
 80015d6:	429a      	cmpne	r2, r3
 80015d8:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80015dc:	4d3e      	ldr	r5, [pc, #248]	; (80016d8 <HAL_DMA_Init+0x590>)
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	4282      	cmp	r2, r0
 80015e6:	bf08      	it	eq
 80015e8:	f043 0301 	orreq.w	r3, r3, #1
 80015ec:	303c      	adds	r0, #60	; 0x3c
 80015ee:	428a      	cmp	r2, r1
 80015f0:	bf08      	it	eq
 80015f2:	f043 0301 	orreq.w	r3, r3, #1
 80015f6:	313c      	adds	r1, #60	; 0x3c
 80015f8:	42aa      	cmp	r2, r5
 80015fa:	bf08      	it	eq
 80015fc:	f043 0301 	orreq.w	r3, r3, #1
 8001600:	4282      	cmp	r2, r0
 8001602:	bf08      	it	eq
 8001604:	f043 0301 	orreq.w	r3, r3, #1
 8001608:	428a      	cmp	r2, r1
 800160a:	bf08      	it	eq
 800160c:	f043 0301 	orreq.w	r3, r3, #1
 8001610:	b913      	cbnz	r3, 8001618 <HAL_DMA_Init+0x4d0>
 8001612:	4b32      	ldr	r3, [pc, #200]	; (80016dc <HAL_DMA_Init+0x594>)
 8001614:	429a      	cmp	r2, r3
 8001616:	d152      	bne.n	80016be <HAL_DMA_Init+0x576>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001618:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 800161a:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800161c:	4f30      	ldr	r7, [pc, #192]	; (80016e0 <HAL_DMA_Init+0x598>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800161e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001622:	68a3      	ldr	r3, [r4, #8]
    __HAL_UNLOCK(hdma);
 8001624:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001628:	2b40      	cmp	r3, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800162a:	6811      	ldr	r1, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800162c:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001630:	d043      	beq.n	80016ba <HAL_DMA_Init+0x572>
 8001632:	2b80      	cmp	r3, #128	; 0x80
 8001634:	bf14      	ite	ne
 8001636:	2100      	movne	r1, #0
 8001638:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800163c:	6923      	ldr	r3, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800163e:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001640:	68e5      	ldr	r5, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001642:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001644:	6966      	ldr	r6, [r4, #20]
 8001646:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800164a:	69a5      	ldr	r5, [r4, #24]
 800164c:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001650:	69e6      	ldr	r6, [r4, #28]
 8001652:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001656:	6a25      	ldr	r5, [r4, #32]
 8001658:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800165c:	4e21      	ldr	r6, [pc, #132]	; (80016e4 <HAL_DMA_Init+0x59c>)
 800165e:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8001662:	4d21      	ldr	r5, [pc, #132]	; (80016e8 <HAL_DMA_Init+0x5a0>)
 8001664:	433b      	orrs	r3, r7
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001666:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001668:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800166a:	6823      	ldr	r3, [r4, #0]
 800166c:	441e      	add	r6, r3
 800166e:	fba5 2306 	umull	r2, r3, r5, r6
 8001672:	091b      	lsrs	r3, r3, #4
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001678:	f7ff fcea 	bl	8001050 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800167c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800167e:	2301      	movs	r3, #1
 8001680:	f002 021f 	and.w	r2, r2, #31
 8001684:	4093      	lsls	r3, r2
 8001686:	6043      	str	r3, [r0, #4]
 8001688:	e634      	b.n	80012f4 <HAL_DMA_Init+0x1ac>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800168a:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800168e:	f47f ae27 	bne.w	80012e0 <HAL_DMA_Init+0x198>
 8001692:	e60a      	b.n	80012aa <HAL_DMA_Init+0x162>
    switch (hdma->Init.FIFOThreshold)
 8001694:	2a03      	cmp	r2, #3
 8001696:	f63f ae23 	bhi.w	80012e0 <HAL_DMA_Init+0x198>
 800169a:	a501      	add	r5, pc, #4	; (adr r5, 80016a0 <HAL_DMA_Init+0x558>)
 800169c:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 80016a0:	080012ab 	.word	0x080012ab
 80016a4:	080012a7 	.word	0x080012a7
 80016a8:	080012ab 	.word	0x080012ab
 80016ac:	0800168b 	.word	0x0800168b
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_DMA_Init+0x5a4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016b2:	4d0f      	ldr	r5, [pc, #60]	; (80016f0 <HAL_DMA_Init+0x5a8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016b4:	4403      	add	r3, r0
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	e734      	b.n	8001524 <HAL_DMA_Init+0x3dc>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016ba:	2110      	movs	r1, #16
 80016bc:	e7be      	b.n	800163c <HAL_DMA_Init+0x4f4>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016be:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016c0:	2303      	movs	r3, #3
    return HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016c4:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80016ca:	e6e6      	b.n	800149a <HAL_DMA_Init+0x352>
 80016cc:	58025408 	.word	0x58025408
 80016d0:	5802541c 	.word	0x5802541c
 80016d4:	58025430 	.word	0x58025430
 80016d8:	58025458 	.word	0x58025458
 80016dc:	58025494 	.word	0x58025494
 80016e0:	fffe000f 	.word	0xfffe000f
 80016e4:	a7fdabf8 	.word	0xa7fdabf8
 80016e8:	cccccccd 	.word	0xcccccccd
 80016ec:	1000823f 	.word	0x1000823f
 80016f0:	40020940 	.word	0x40020940

080016f4 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80016f4:	2800      	cmp	r0, #0
 80016f6:	f000 8268 	beq.w	8001bca <HAL_DMA_Start_IT+0x4d6>
{
 80016fa:	b4f0      	push	{r4, r5, r6, r7}
 80016fc:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 80016fe:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001702:	2801      	cmp	r0, #1
 8001704:	f000 8268 	beq.w	8001bd8 <HAL_DMA_Start_IT+0x4e4>
 8001708:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800170a:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 800170e:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8001710:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001714:	d007      	beq.n	8001726 <HAL_DMA_Start_IT+0x32>
    __HAL_UNLOCK(hdma);
 8001716:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001718:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800171c:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001720:	656b      	str	r3, [r5, #84]	; 0x54
}
 8001722:	bcf0      	pop	{r4, r5, r6, r7}
 8001724:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001726:	2702      	movs	r7, #2
    __HAL_DMA_DISABLE(hdma);
 8001728:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800172a:	4e9e      	ldr	r6, [pc, #632]	; (80019a4 <HAL_DMA_Start_IT+0x2b0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800172c:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001730:	2700      	movs	r7, #0
 8001732:	656f      	str	r7, [r5, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001734:	6820      	ldr	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001736:	4f9c      	ldr	r7, [pc, #624]	; (80019a8 <HAL_DMA_Start_IT+0x2b4>)
    __HAL_DMA_DISABLE(hdma);
 8001738:	f020 0001 	bic.w	r0, r0, #1
 800173c:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800173e:	489b      	ldr	r0, [pc, #620]	; (80019ac <HAL_DMA_Start_IT+0x2b8>)
 8001740:	682c      	ldr	r4, [r5, #0]
 8001742:	42b4      	cmp	r4, r6
 8001744:	bf18      	it	ne
 8001746:	4284      	cmpne	r4, r0
 8001748:	f106 0630 	add.w	r6, r6, #48	; 0x30
 800174c:	bf0c      	ite	eq
 800174e:	2001      	moveq	r0, #1
 8001750:	2000      	movne	r0, #0
 8001752:	42bc      	cmp	r4, r7
 8001754:	bf08      	it	eq
 8001756:	f040 0001 	orreq.w	r0, r0, #1
 800175a:	3730      	adds	r7, #48	; 0x30
 800175c:	42b4      	cmp	r4, r6
 800175e:	bf08      	it	eq
 8001760:	f040 0001 	orreq.w	r0, r0, #1
 8001764:	3630      	adds	r6, #48	; 0x30
 8001766:	42bc      	cmp	r4, r7
 8001768:	bf08      	it	eq
 800176a:	f040 0001 	orreq.w	r0, r0, #1
 800176e:	3730      	adds	r7, #48	; 0x30
 8001770:	42b4      	cmp	r4, r6
 8001772:	bf08      	it	eq
 8001774:	f040 0001 	orreq.w	r0, r0, #1
 8001778:	3630      	adds	r6, #48	; 0x30
 800177a:	42bc      	cmp	r4, r7
 800177c:	bf08      	it	eq
 800177e:	f040 0001 	orreq.w	r0, r0, #1
 8001782:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8001786:	42b4      	cmp	r4, r6
 8001788:	bf08      	it	eq
 800178a:	f040 0001 	orreq.w	r0, r0, #1
 800178e:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8001792:	42bc      	cmp	r4, r7
 8001794:	bf08      	it	eq
 8001796:	f040 0001 	orreq.w	r0, r0, #1
 800179a:	3730      	adds	r7, #48	; 0x30
 800179c:	42b4      	cmp	r4, r6
 800179e:	bf08      	it	eq
 80017a0:	f040 0001 	orreq.w	r0, r0, #1
 80017a4:	3630      	adds	r6, #48	; 0x30
 80017a6:	42bc      	cmp	r4, r7
 80017a8:	bf08      	it	eq
 80017aa:	f040 0001 	orreq.w	r0, r0, #1
 80017ae:	3730      	adds	r7, #48	; 0x30
 80017b0:	42b4      	cmp	r4, r6
 80017b2:	bf08      	it	eq
 80017b4:	f040 0001 	orreq.w	r0, r0, #1
 80017b8:	3630      	adds	r6, #48	; 0x30
 80017ba:	42bc      	cmp	r4, r7
 80017bc:	bf08      	it	eq
 80017be:	f040 0001 	orreq.w	r0, r0, #1
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	42b4      	cmp	r4, r6
 80017c6:	bf08      	it	eq
 80017c8:	f040 0001 	orreq.w	r0, r0, #1
 80017cc:	3630      	adds	r6, #48	; 0x30
 80017ce:	42bc      	cmp	r4, r7
 80017d0:	bf08      	it	eq
 80017d2:	f040 0001 	orreq.w	r0, r0, #1
 80017d6:	4f76      	ldr	r7, [pc, #472]	; (80019b0 <HAL_DMA_Start_IT+0x2bc>)
 80017d8:	42b4      	cmp	r4, r6
 80017da:	bf08      	it	eq
 80017dc:	f040 0001 	orreq.w	r0, r0, #1
 80017e0:	4e74      	ldr	r6, [pc, #464]	; (80019b4 <HAL_DMA_Start_IT+0x2c0>)
 80017e2:	42bc      	cmp	r4, r7
 80017e4:	bf08      	it	eq
 80017e6:	f040 0001 	orreq.w	r0, r0, #1
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	42b4      	cmp	r4, r6
 80017ee:	bf08      	it	eq
 80017f0:	f040 0001 	orreq.w	r0, r0, #1
 80017f4:	3628      	adds	r6, #40	; 0x28
 80017f6:	42bc      	cmp	r4, r7
 80017f8:	bf08      	it	eq
 80017fa:	f040 0001 	orreq.w	r0, r0, #1
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	42b4      	cmp	r4, r6
 8001802:	bf08      	it	eq
 8001804:	f040 0001 	orreq.w	r0, r0, #1
 8001808:	3628      	adds	r6, #40	; 0x28
 800180a:	42bc      	cmp	r4, r7
 800180c:	bf08      	it	eq
 800180e:	f040 0001 	orreq.w	r0, r0, #1
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	42b4      	cmp	r4, r6
 8001816:	bf08      	it	eq
 8001818:	f040 0001 	orreq.w	r0, r0, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800181c:	6dae      	ldr	r6, [r5, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800181e:	42bc      	cmp	r4, r7
 8001820:	bf08      	it	eq
 8001822:	f040 0001 	orreq.w	r0, r0, #1
 8001826:	b910      	cbnz	r0, 800182e <HAL_DMA_Start_IT+0x13a>
 8001828:	4863      	ldr	r0, [pc, #396]	; (80019b8 <HAL_DMA_Start_IT+0x2c4>)
 800182a:	4284      	cmp	r4, r0
 800182c:	d108      	bne.n	8001840 <HAL_DMA_Start_IT+0x14c>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800182e:	e9d5 0419 	ldrd	r0, r4, [r5, #100]	; 0x64
 8001832:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001834:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8001836:	b110      	cbz	r0, 800183e <HAL_DMA_Start_IT+0x14a>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001838:	e9d5 041c 	ldrd	r0, r4, [r5, #112]	; 0x70
 800183c:	6044      	str	r4, [r0, #4]
 800183e:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001840:	485a      	ldr	r0, [pc, #360]	; (80019ac <HAL_DMA_Start_IT+0x2b8>)
 8001842:	f8df c160 	ldr.w	ip, [pc, #352]	; 80019a4 <HAL_DMA_Start_IT+0x2b0>
 8001846:	4f58      	ldr	r7, [pc, #352]	; (80019a8 <HAL_DMA_Start_IT+0x2b4>)
 8001848:	4564      	cmp	r4, ip
 800184a:	bf18      	it	ne
 800184c:	4284      	cmpne	r4, r0
 800184e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001852:	bf0c      	ite	eq
 8001854:	2001      	moveq	r0, #1
 8001856:	2000      	movne	r0, #0
 8001858:	42bc      	cmp	r4, r7
 800185a:	bf08      	it	eq
 800185c:	f040 0001 	orreq.w	r0, r0, #1
 8001860:	3730      	adds	r7, #48	; 0x30
 8001862:	4564      	cmp	r4, ip
 8001864:	bf08      	it	eq
 8001866:	f040 0001 	orreq.w	r0, r0, #1
 800186a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800186e:	42bc      	cmp	r4, r7
 8001870:	bf08      	it	eq
 8001872:	f040 0001 	orreq.w	r0, r0, #1
 8001876:	3730      	adds	r7, #48	; 0x30
 8001878:	4564      	cmp	r4, ip
 800187a:	bf08      	it	eq
 800187c:	f040 0001 	orreq.w	r0, r0, #1
 8001880:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001884:	42bc      	cmp	r4, r7
 8001886:	bf08      	it	eq
 8001888:	f040 0001 	orreq.w	r0, r0, #1
 800188c:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8001890:	4564      	cmp	r4, ip
 8001892:	bf08      	it	eq
 8001894:	f040 0001 	orreq.w	r0, r0, #1
 8001898:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 800189c:	42bc      	cmp	r4, r7
 800189e:	bf08      	it	eq
 80018a0:	f040 0001 	orreq.w	r0, r0, #1
 80018a4:	3730      	adds	r7, #48	; 0x30
 80018a6:	4564      	cmp	r4, ip
 80018a8:	bf08      	it	eq
 80018aa:	f040 0001 	orreq.w	r0, r0, #1
 80018ae:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80018b2:	42bc      	cmp	r4, r7
 80018b4:	bf08      	it	eq
 80018b6:	f040 0001 	orreq.w	r0, r0, #1
 80018ba:	3730      	adds	r7, #48	; 0x30
 80018bc:	4564      	cmp	r4, ip
 80018be:	bf08      	it	eq
 80018c0:	f040 0001 	orreq.w	r0, r0, #1
 80018c4:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80018c8:	42bc      	cmp	r4, r7
 80018ca:	bf08      	it	eq
 80018cc:	f040 0001 	orreq.w	r0, r0, #1
 80018d0:	3730      	adds	r7, #48	; 0x30
 80018d2:	4564      	cmp	r4, ip
 80018d4:	bf08      	it	eq
 80018d6:	f040 0001 	orreq.w	r0, r0, #1
 80018da:	42bc      	cmp	r4, r7
 80018dc:	bf08      	it	eq
 80018de:	f040 0001 	orreq.w	r0, r0, #1
 80018e2:	b918      	cbnz	r0, 80018ec <HAL_DMA_Start_IT+0x1f8>
 80018e4:	4835      	ldr	r0, [pc, #212]	; (80019bc <HAL_DMA_Start_IT+0x2c8>)
 80018e6:	4284      	cmp	r4, r0
 80018e8:	f040 8179 	bne.w	8001bde <HAL_DMA_Start_IT+0x4ea>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80018ec:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 80018ee:	203f      	movs	r0, #63	; 0x3f
 80018f0:	f004 041f 	and.w	r4, r4, #31
 80018f4:	40a0      	lsls	r0, r4
 80018f6:	60b0      	str	r0, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018f8:	682c      	ldr	r4, [r5, #0]
 80018fa:	6820      	ldr	r0, [r4, #0]
 80018fc:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8001900:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001902:	6828      	ldr	r0, [r5, #0]
 8001904:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001906:	68ab      	ldr	r3, [r5, #8]
 8001908:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800190a:	682b      	ldr	r3, [r5, #0]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800190c:	f000 815f 	beq.w	8001bce <HAL_DMA_Start_IT+0x4da>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001910:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001912:	682b      	ldr	r3, [r5, #0]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	682c      	ldr	r4, [r5, #0]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_DMA_Start_IT+0x2b8>)
 800191a:	4922      	ldr	r1, [pc, #136]	; (80019a4 <HAL_DMA_Start_IT+0x2b0>)
 800191c:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <HAL_DMA_Start_IT+0x2b4>)
 800191e:	428c      	cmp	r4, r1
 8001920:	bf18      	it	ne
 8001922:	429c      	cmpne	r4, r3
 8001924:	4826      	ldr	r0, [pc, #152]	; (80019c0 <HAL_DMA_Start_IT+0x2cc>)
 8001926:	f101 0148 	add.w	r1, r1, #72	; 0x48
 800192a:	bf0c      	ite	eq
 800192c:	2301      	moveq	r3, #1
 800192e:	2300      	movne	r3, #0
 8001930:	4294      	cmp	r4, r2
 8001932:	bf08      	it	eq
 8001934:	f043 0301 	orreq.w	r3, r3, #1
 8001938:	3248      	adds	r2, #72	; 0x48
 800193a:	4284      	cmp	r4, r0
 800193c:	bf08      	it	eq
 800193e:	f043 0301 	orreq.w	r3, r3, #1
 8001942:	3048      	adds	r0, #72	; 0x48
 8001944:	428c      	cmp	r4, r1
 8001946:	bf08      	it	eq
 8001948:	f043 0301 	orreq.w	r3, r3, #1
 800194c:	3148      	adds	r1, #72	; 0x48
 800194e:	4294      	cmp	r4, r2
 8001950:	bf08      	it	eq
 8001952:	f043 0301 	orreq.w	r3, r3, #1
 8001956:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800195a:	4284      	cmp	r4, r0
 800195c:	bf08      	it	eq
 800195e:	f043 0301 	orreq.w	r3, r3, #1
 8001962:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001966:	428c      	cmp	r4, r1
 8001968:	bf08      	it	eq
 800196a:	f043 0301 	orreq.w	r3, r3, #1
 800196e:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001972:	4294      	cmp	r4, r2
 8001974:	bf08      	it	eq
 8001976:	f043 0301 	orreq.w	r3, r3, #1
 800197a:	3248      	adds	r2, #72	; 0x48
 800197c:	4284      	cmp	r4, r0
 800197e:	bf08      	it	eq
 8001980:	f043 0301 	orreq.w	r3, r3, #1
 8001984:	3048      	adds	r0, #72	; 0x48
 8001986:	428c      	cmp	r4, r1
 8001988:	bf08      	it	eq
 800198a:	f043 0301 	orreq.w	r3, r3, #1
 800198e:	3148      	adds	r1, #72	; 0x48
 8001990:	4294      	cmp	r4, r2
 8001992:	bf08      	it	eq
 8001994:	f043 0301 	orreq.w	r3, r3, #1
 8001998:	3248      	adds	r2, #72	; 0x48
 800199a:	4284      	cmp	r4, r0
 800199c:	bf08      	it	eq
 800199e:	f043 0301 	orreq.w	r3, r3, #1
 80019a2:	e00f      	b.n	80019c4 <HAL_DMA_Start_IT+0x2d0>
 80019a4:	40020028 	.word	0x40020028
 80019a8:	40020040 	.word	0x40020040
 80019ac:	40020010 	.word	0x40020010
 80019b0:	58025408 	.word	0x58025408
 80019b4:	5802541c 	.word	0x5802541c
 80019b8:	58025494 	.word	0x58025494
 80019bc:	400204b8 	.word	0x400204b8
 80019c0:	40020058 	.word	0x40020058
 80019c4:	428c      	cmp	r4, r1
 80019c6:	bf08      	it	eq
 80019c8:	f043 0301 	orreq.w	r3, r3, #1
 80019cc:	4294      	cmp	r4, r2
 80019ce:	bf08      	it	eq
 80019d0:	f043 0301 	orreq.w	r3, r3, #1
 80019d4:	b91b      	cbnz	r3, 80019de <HAL_DMA_Start_IT+0x2ea>
 80019d6:	4b9c      	ldr	r3, [pc, #624]	; (8001c48 <HAL_DMA_Start_IT+0x554>)
 80019d8:	429c      	cmp	r4, r3
 80019da:	f040 8149 	bne.w	8001c70 <HAL_DMA_Start_IT+0x57c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	f023 031e 	bic.w	r3, r3, #30
 80019e4:	f043 0316 	orr.w	r3, r3, #22
 80019e8:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80019ea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80019ec:	b123      	cbz	r3, 80019f8 <HAL_DMA_Start_IT+0x304>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80019ee:	682a      	ldr	r2, [r5, #0]
 80019f0:	6813      	ldr	r3, [r2, #0]
 80019f2:	f043 0308 	orr.w	r3, r3, #8
 80019f6:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019f8:	682c      	ldr	r4, [r5, #0]
 80019fa:	4b94      	ldr	r3, [pc, #592]	; (8001c4c <HAL_DMA_Start_IT+0x558>)
 80019fc:	4a94      	ldr	r2, [pc, #592]	; (8001c50 <HAL_DMA_Start_IT+0x55c>)
 80019fe:	4895      	ldr	r0, [pc, #596]	; (8001c54 <HAL_DMA_Start_IT+0x560>)
 8001a00:	4294      	cmp	r4, r2
 8001a02:	bf18      	it	ne
 8001a04:	429c      	cmpne	r4, r3
 8001a06:	4994      	ldr	r1, [pc, #592]	; (8001c58 <HAL_DMA_Start_IT+0x564>)
 8001a08:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001a0c:	bf0c      	ite	eq
 8001a0e:	2301      	moveq	r3, #1
 8001a10:	2300      	movne	r3, #0
 8001a12:	4284      	cmp	r4, r0
 8001a14:	bf08      	it	eq
 8001a16:	f043 0301 	orreq.w	r3, r3, #1
 8001a1a:	3048      	adds	r0, #72	; 0x48
 8001a1c:	428c      	cmp	r4, r1
 8001a1e:	bf08      	it	eq
 8001a20:	f043 0301 	orreq.w	r3, r3, #1
 8001a24:	3148      	adds	r1, #72	; 0x48
 8001a26:	4294      	cmp	r4, r2
 8001a28:	bf08      	it	eq
 8001a2a:	f043 0301 	orreq.w	r3, r3, #1
 8001a2e:	3248      	adds	r2, #72	; 0x48
 8001a30:	4284      	cmp	r4, r0
 8001a32:	bf08      	it	eq
 8001a34:	f043 0301 	orreq.w	r3, r3, #1
 8001a38:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001a3c:	428c      	cmp	r4, r1
 8001a3e:	bf08      	it	eq
 8001a40:	f043 0301 	orreq.w	r3, r3, #1
 8001a44:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001a48:	4294      	cmp	r4, r2
 8001a4a:	bf08      	it	eq
 8001a4c:	f043 0301 	orreq.w	r3, r3, #1
 8001a50:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001a54:	4284      	cmp	r4, r0
 8001a56:	bf08      	it	eq
 8001a58:	f043 0301 	orreq.w	r3, r3, #1
 8001a5c:	3048      	adds	r0, #72	; 0x48
 8001a5e:	428c      	cmp	r4, r1
 8001a60:	bf08      	it	eq
 8001a62:	f043 0301 	orreq.w	r3, r3, #1
 8001a66:	3148      	adds	r1, #72	; 0x48
 8001a68:	4294      	cmp	r4, r2
 8001a6a:	bf08      	it	eq
 8001a6c:	f043 0301 	orreq.w	r3, r3, #1
 8001a70:	3248      	adds	r2, #72	; 0x48
 8001a72:	4284      	cmp	r4, r0
 8001a74:	bf08      	it	eq
 8001a76:	f043 0301 	orreq.w	r3, r3, #1
 8001a7a:	3048      	adds	r0, #72	; 0x48
 8001a7c:	428c      	cmp	r4, r1
 8001a7e:	bf08      	it	eq
 8001a80:	f043 0301 	orreq.w	r3, r3, #1
 8001a84:	3148      	adds	r1, #72	; 0x48
 8001a86:	4294      	cmp	r4, r2
 8001a88:	bf08      	it	eq
 8001a8a:	f043 0301 	orreq.w	r3, r3, #1
 8001a8e:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8001a92:	4284      	cmp	r4, r0
 8001a94:	bf08      	it	eq
 8001a96:	f043 0301 	orreq.w	r3, r3, #1
 8001a9a:	f502 429f 	add.w	r2, r2, #20352	; 0x4f80
 8001a9e:	486f      	ldr	r0, [pc, #444]	; (8001c5c <HAL_DMA_Start_IT+0x568>)
 8001aa0:	428c      	cmp	r4, r1
 8001aa2:	bf08      	it	eq
 8001aa4:	f043 0301 	orreq.w	r3, r3, #1
 8001aa8:	496d      	ldr	r1, [pc, #436]	; (8001c60 <HAL_DMA_Start_IT+0x56c>)
 8001aaa:	4294      	cmp	r4, r2
 8001aac:	bf08      	it	eq
 8001aae:	f043 0301 	orreq.w	r3, r3, #1
 8001ab2:	323c      	adds	r2, #60	; 0x3c
 8001ab4:	4284      	cmp	r4, r0
 8001ab6:	bf08      	it	eq
 8001ab8:	f043 0301 	orreq.w	r3, r3, #1
 8001abc:	303c      	adds	r0, #60	; 0x3c
 8001abe:	428c      	cmp	r4, r1
 8001ac0:	bf08      	it	eq
 8001ac2:	f043 0301 	orreq.w	r3, r3, #1
 8001ac6:	313c      	adds	r1, #60	; 0x3c
 8001ac8:	4294      	cmp	r4, r2
 8001aca:	bf08      	it	eq
 8001acc:	f043 0301 	orreq.w	r3, r3, #1
 8001ad0:	323c      	adds	r2, #60	; 0x3c
 8001ad2:	4284      	cmp	r4, r0
 8001ad4:	bf08      	it	eq
 8001ad6:	f043 0301 	orreq.w	r3, r3, #1
 8001ada:	428c      	cmp	r4, r1
 8001adc:	bf08      	it	eq
 8001ade:	f043 0301 	orreq.w	r3, r3, #1
 8001ae2:	4294      	cmp	r4, r2
 8001ae4:	bf08      	it	eq
 8001ae6:	f043 0301 	orreq.w	r3, r3, #1
 8001aea:	b913      	cbnz	r3, 8001af2 <HAL_DMA_Start_IT+0x3fe>
 8001aec:	4b5d      	ldr	r3, [pc, #372]	; (8001c64 <HAL_DMA_Start_IT+0x570>)
 8001aee:	429c      	cmp	r4, r3
 8001af0:	d10e      	bne.n	8001b10 <HAL_DMA_Start_IT+0x41c>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001af2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	03d2      	lsls	r2, r2, #15
 8001af8:	d503      	bpl.n	8001b02 <HAL_DMA_Start_IT+0x40e>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b00:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8001b02:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8001b04:	b11b      	cbz	r3, 8001b0e <HAL_DMA_Start_IT+0x41a>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	682c      	ldr	r4, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b10:	4b4e      	ldr	r3, [pc, #312]	; (8001c4c <HAL_DMA_Start_IT+0x558>)
 8001b12:	494f      	ldr	r1, [pc, #316]	; (8001c50 <HAL_DMA_Start_IT+0x55c>)
 8001b14:	4a4f      	ldr	r2, [pc, #316]	; (8001c54 <HAL_DMA_Start_IT+0x560>)
 8001b16:	428c      	cmp	r4, r1
 8001b18:	bf18      	it	ne
 8001b1a:	429c      	cmpne	r4, r3
 8001b1c:	4d4e      	ldr	r5, [pc, #312]	; (8001c58 <HAL_DMA_Start_IT+0x564>)
 8001b1e:	4852      	ldr	r0, [pc, #328]	; (8001c68 <HAL_DMA_Start_IT+0x574>)
 8001b20:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8001b24:	bf0c      	ite	eq
 8001b26:	2301      	moveq	r3, #1
 8001b28:	2300      	movne	r3, #0
 8001b2a:	4294      	cmp	r4, r2
 8001b2c:	bf08      	it	eq
 8001b2e:	f043 0301 	orreq.w	r3, r3, #1
 8001b32:	3260      	adds	r2, #96	; 0x60
 8001b34:	42ac      	cmp	r4, r5
 8001b36:	bf08      	it	eq
 8001b38:	f043 0301 	orreq.w	r3, r3, #1
 8001b3c:	3560      	adds	r5, #96	; 0x60
 8001b3e:	4284      	cmp	r4, r0
 8001b40:	bf08      	it	eq
 8001b42:	f043 0301 	orreq.w	r3, r3, #1
 8001b46:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8001b4a:	428c      	cmp	r4, r1
 8001b4c:	bf08      	it	eq
 8001b4e:	f043 0301 	orreq.w	r3, r3, #1
 8001b52:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 8001b56:	4294      	cmp	r4, r2
 8001b58:	bf08      	it	eq
 8001b5a:	f043 0301 	orreq.w	r3, r3, #1
 8001b5e:	f502 7268 	add.w	r2, r2, #928	; 0x3a0
 8001b62:	42ac      	cmp	r4, r5
 8001b64:	bf08      	it	eq
 8001b66:	f043 0301 	orreq.w	r3, r3, #1
 8001b6a:	f505 7568 	add.w	r5, r5, #928	; 0x3a0
 8001b6e:	4284      	cmp	r4, r0
 8001b70:	bf08      	it	eq
 8001b72:	f043 0301 	orreq.w	r3, r3, #1
 8001b76:	3060      	adds	r0, #96	; 0x60
 8001b78:	428c      	cmp	r4, r1
 8001b7a:	bf08      	it	eq
 8001b7c:	f043 0301 	orreq.w	r3, r3, #1
 8001b80:	3160      	adds	r1, #96	; 0x60
 8001b82:	4294      	cmp	r4, r2
 8001b84:	bf08      	it	eq
 8001b86:	f043 0301 	orreq.w	r3, r3, #1
 8001b8a:	3260      	adds	r2, #96	; 0x60
 8001b8c:	42ac      	cmp	r4, r5
 8001b8e:	bf08      	it	eq
 8001b90:	f043 0301 	orreq.w	r3, r3, #1
 8001b94:	4284      	cmp	r4, r0
 8001b96:	bf08      	it	eq
 8001b98:	f043 0301 	orreq.w	r3, r3, #1
 8001b9c:	428c      	cmp	r4, r1
 8001b9e:	bf08      	it	eq
 8001ba0:	f043 0301 	orreq.w	r3, r3, #1
 8001ba4:	4294      	cmp	r4, r2
 8001ba6:	bf08      	it	eq
 8001ba8:	f043 0301 	orreq.w	r3, r3, #1
 8001bac:	b933      	cbnz	r3, 8001bbc <HAL_DMA_Start_IT+0x4c8>
 8001bae:	3048      	adds	r0, #72	; 0x48
 8001bb0:	1a20      	subs	r0, r4, r0
 8001bb2:	fab0 f080 	clz	r0, r0
 8001bb6:	0940      	lsrs	r0, r0, #5
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d040      	beq.n	8001c3e <HAL_DMA_Start_IT+0x54a>
 8001bbc:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6023      	str	r3, [r4, #0]
}
 8001bc6:	bcf0      	pop	{r4, r5, r6, r7}
 8001bc8:	4770      	bx	lr
    return HAL_ERROR;
 8001bca:	2001      	movs	r0, #1
}
 8001bcc:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001bce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	60d9      	str	r1, [r3, #12]
 8001bd4:	682c      	ldr	r4, [r5, #0]
 8001bd6:	e69f      	b.n	8001918 <HAL_DMA_Start_IT+0x224>
  __HAL_LOCK(hdma);
 8001bd8:	2002      	movs	r0, #2
}
 8001bda:	bcf0      	pop	{r4, r5, r6, r7}
 8001bdc:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001bde:	4823      	ldr	r0, [pc, #140]	; (8001c6c <HAL_DMA_Start_IT+0x578>)
 8001be0:	f8df c078 	ldr.w	ip, [pc, #120]	; 8001c5c <HAL_DMA_Start_IT+0x568>
 8001be4:	4f1e      	ldr	r7, [pc, #120]	; (8001c60 <HAL_DMA_Start_IT+0x56c>)
 8001be6:	4564      	cmp	r4, ip
 8001be8:	bf18      	it	ne
 8001bea:	4284      	cmpne	r4, r0
 8001bec:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001bf0:	bf0c      	ite	eq
 8001bf2:	2001      	moveq	r0, #1
 8001bf4:	2000      	movne	r0, #0
 8001bf6:	42bc      	cmp	r4, r7
 8001bf8:	bf08      	it	eq
 8001bfa:	f040 0001 	orreq.w	r0, r0, #1
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	4564      	cmp	r4, ip
 8001c02:	bf08      	it	eq
 8001c04:	f040 0001 	orreq.w	r0, r0, #1
 8001c08:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001c0c:	42bc      	cmp	r4, r7
 8001c0e:	bf08      	it	eq
 8001c10:	f040 0001 	orreq.w	r0, r0, #1
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	4564      	cmp	r4, ip
 8001c18:	bf08      	it	eq
 8001c1a:	f040 0001 	orreq.w	r0, r0, #1
 8001c1e:	42bc      	cmp	r4, r7
 8001c20:	bf08      	it	eq
 8001c22:	f040 0001 	orreq.w	r0, r0, #1
 8001c26:	b918      	cbnz	r0, 8001c30 <HAL_DMA_Start_IT+0x53c>
 8001c28:	480e      	ldr	r0, [pc, #56]	; (8001c64 <HAL_DMA_Start_IT+0x570>)
 8001c2a:	4284      	cmp	r4, r0
 8001c2c:	f47f ae74 	bne.w	8001918 <HAL_DMA_Start_IT+0x224>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001c30:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8001c32:	2001      	movs	r0, #1
 8001c34:	f004 041f 	and.w	r4, r4, #31
 8001c38:	40a0      	lsls	r0, r4
 8001c3a:	6070      	str	r0, [r6, #4]
 8001c3c:	e661      	b.n	8001902 <HAL_DMA_Start_IT+0x20e>
    __HAL_DMA_ENABLE(hdma);
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6023      	str	r3, [r4, #0]
 8001c46:	e56c      	b.n	8001722 <HAL_DMA_Start_IT+0x2e>
 8001c48:	400204b8 	.word	0x400204b8
 8001c4c:	40020010 	.word	0x40020010
 8001c50:	40020028 	.word	0x40020028
 8001c54:	40020040 	.word	0x40020040
 8001c58:	40020058 	.word	0x40020058
 8001c5c:	5802541c 	.word	0x5802541c
 8001c60:	58025430 	.word	0x58025430
 8001c64:	58025494 	.word	0x58025494
 8001c68:	40020070 	.word	0x40020070
 8001c6c:	58025408 	.word	0x58025408
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	f023 030e 	bic.w	r3, r3, #14
 8001c76:	f043 030a 	orr.w	r3, r3, #10
 8001c7a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001c7c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f43f aeba 	beq.w	80019f8 <HAL_DMA_Start_IT+0x304>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001c84:	682a      	ldr	r2, [r5, #0]
 8001c86:	6813      	ldr	r3, [r2, #0]
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e6b3      	b.n	80019f8 <HAL_DMA_Start_IT+0x304>

08001c90 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8001c90:	2800      	cmp	r0, #0
 8001c92:	d06a      	beq.n	8001d6a <HAL_DMA_Abort_IT+0xda>
{
 8001c94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c98:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2a02      	cmp	r2, #2
 8001ca0:	d004      	beq.n	8001cac <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca2:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8001ca4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca6:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cac:	6802      	ldr	r2, [r0, #0]
 8001cae:	4986      	ldr	r1, [pc, #536]	; (8001ec8 <HAL_DMA_Abort_IT+0x238>)
 8001cb0:	428a      	cmp	r2, r1
 8001cb2:	d050      	beq.n	8001d56 <HAL_DMA_Abort_IT+0xc6>
 8001cb4:	4885      	ldr	r0, [pc, #532]	; (8001ecc <HAL_DMA_Abort_IT+0x23c>)
 8001cb6:	4282      	cmp	r2, r0
 8001cb8:	d04d      	beq.n	8001d56 <HAL_DMA_Abort_IT+0xc6>
 8001cba:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8001ee4 <HAL_DMA_Abort_IT+0x254>
 8001cbe:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8001ee0 <HAL_DMA_Abort_IT+0x250>
 8001cc2:	f8df e230 	ldr.w	lr, [pc, #560]	; 8001ef4 <HAL_DMA_Abort_IT+0x264>
 8001cc6:	454a      	cmp	r2, r9
 8001cc8:	bf18      	it	ne
 8001cca:	4542      	cmpne	r2, r8
 8001ccc:	f8df c228 	ldr.w	ip, [pc, #552]	; 8001ef8 <HAL_DMA_Abort_IT+0x268>
 8001cd0:	4f7f      	ldr	r7, [pc, #508]	; (8001ed0 <HAL_DMA_Abort_IT+0x240>)
 8001cd2:	bf0c      	ite	eq
 8001cd4:	f04f 0a01 	moveq.w	sl, #1
 8001cd8:	f04f 0a00 	movne.w	sl, #0
 8001cdc:	4c7d      	ldr	r4, [pc, #500]	; (8001ed4 <HAL_DMA_Abort_IT+0x244>)
 8001cde:	4572      	cmp	r2, lr
 8001ce0:	bf08      	it	eq
 8001ce2:	f04a 0a01 	orreq.w	sl, sl, #1
 8001ce6:	f8df b214 	ldr.w	fp, [pc, #532]	; 8001efc <HAL_DMA_Abort_IT+0x26c>
 8001cea:	4e7b      	ldr	r6, [pc, #492]	; (8001ed8 <HAL_DMA_Abort_IT+0x248>)
 8001cec:	4562      	cmp	r2, ip
 8001cee:	bf08      	it	eq
 8001cf0:	f04a 0a01 	orreq.w	sl, sl, #1
 8001cf4:	4d79      	ldr	r5, [pc, #484]	; (8001edc <HAL_DMA_Abort_IT+0x24c>)
 8001cf6:	42ba      	cmp	r2, r7
 8001cf8:	bf08      	it	eq
 8001cfa:	f04a 0a01 	orreq.w	sl, sl, #1
 8001cfe:	42a2      	cmp	r2, r4
 8001d00:	bf08      	it	eq
 8001d02:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d06:	f504 7456 	add.w	r4, r4, #856	; 0x358
 8001d0a:	42a2      	cmp	r2, r4
 8001d0c:	bf08      	it	eq
 8001d0e:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d12:	3418      	adds	r4, #24
 8001d14:	42a2      	cmp	r2, r4
 8001d16:	bf08      	it	eq
 8001d18:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d1c:	3418      	adds	r4, #24
 8001d1e:	42a2      	cmp	r2, r4
 8001d20:	bf08      	it	eq
 8001d22:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d26:	3460      	adds	r4, #96	; 0x60
 8001d28:	455a      	cmp	r2, fp
 8001d2a:	bf08      	it	eq
 8001d2c:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d30:	42b2      	cmp	r2, r6
 8001d32:	bf08      	it	eq
 8001d34:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d38:	42aa      	cmp	r2, r5
 8001d3a:	bf08      	it	eq
 8001d3c:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d40:	42a2      	cmp	r2, r4
 8001d42:	bf08      	it	eq
 8001d44:	f04a 0a01 	orreq.w	sl, sl, #1
 8001d48:	f1ba 0f00 	cmp.w	sl, #0
 8001d4c:	d103      	bne.n	8001d56 <HAL_DMA_Abort_IT+0xc6>
 8001d4e:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8001f00 <HAL_DMA_Abort_IT+0x270>
 8001d52:	4552      	cmp	r2, sl
 8001d54:	d10b      	bne.n	8001d6e <HAL_DMA_Abort_IT+0xde>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d56:	2104      	movs	r1, #4
  return HAL_OK;
 8001d58:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d5a:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001d5e:	6813      	ldr	r3, [r2, #0]
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6013      	str	r3, [r2, #0]
}
 8001d66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8001d6a:	2001      	movs	r0, #1
}
 8001d6c:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d6e:	6814      	ldr	r4, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d70:	4856      	ldr	r0, [pc, #344]	; (8001ecc <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d72:	f024 040e 	bic.w	r4, r4, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d76:	4d5a      	ldr	r5, [pc, #360]	; (8001ee0 <HAL_DMA_Abort_IT+0x250>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d78:	6014      	str	r4, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 8001d7a:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d7c:	4c59      	ldr	r4, [pc, #356]	; (8001ee4 <HAL_DMA_Abort_IT+0x254>)
      __HAL_DMA_DISABLE(hdma);
 8001d7e:	6811      	ldr	r1, [r2, #0]
 8001d80:	f021 0101 	bic.w	r1, r1, #1
 8001d84:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d86:	4a50      	ldr	r2, [pc, #320]	; (8001ec8 <HAL_DMA_Abort_IT+0x238>)
 8001d88:	6819      	ldr	r1, [r3, #0]
 8001d8a:	4281      	cmp	r1, r0
 8001d8c:	bf18      	it	ne
 8001d8e:	4291      	cmpne	r1, r2
 8001d90:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001d94:	bf0c      	ite	eq
 8001d96:	2201      	moveq	r2, #1
 8001d98:	2200      	movne	r2, #0
 8001d9a:	42a9      	cmp	r1, r5
 8001d9c:	bf08      	it	eq
 8001d9e:	f042 0201 	orreq.w	r2, r2, #1
 8001da2:	3548      	adds	r5, #72	; 0x48
 8001da4:	42a1      	cmp	r1, r4
 8001da6:	bf08      	it	eq
 8001da8:	f042 0201 	orreq.w	r2, r2, #1
 8001dac:	3448      	adds	r4, #72	; 0x48
 8001dae:	4281      	cmp	r1, r0
 8001db0:	bf08      	it	eq
 8001db2:	f042 0201 	orreq.w	r2, r2, #1
 8001db6:	3048      	adds	r0, #72	; 0x48
 8001db8:	42a9      	cmp	r1, r5
 8001dba:	bf08      	it	eq
 8001dbc:	f042 0201 	orreq.w	r2, r2, #1
 8001dc0:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8001dc4:	42a1      	cmp	r1, r4
 8001dc6:	bf08      	it	eq
 8001dc8:	f042 0201 	orreq.w	r2, r2, #1
 8001dcc:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8001dd0:	4281      	cmp	r1, r0
 8001dd2:	bf08      	it	eq
 8001dd4:	f042 0201 	orreq.w	r2, r2, #1
 8001dd8:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001ddc:	42a9      	cmp	r1, r5
 8001dde:	bf08      	it	eq
 8001de0:	f042 0201 	orreq.w	r2, r2, #1
 8001de4:	3548      	adds	r5, #72	; 0x48
 8001de6:	42a1      	cmp	r1, r4
 8001de8:	bf08      	it	eq
 8001dea:	f042 0201 	orreq.w	r2, r2, #1
 8001dee:	3448      	adds	r4, #72	; 0x48
 8001df0:	4281      	cmp	r1, r0
 8001df2:	bf08      	it	eq
 8001df4:	f042 0201 	orreq.w	r2, r2, #1
 8001df8:	3048      	adds	r0, #72	; 0x48
 8001dfa:	42a9      	cmp	r1, r5
 8001dfc:	bf08      	it	eq
 8001dfe:	f042 0201 	orreq.w	r2, r2, #1
 8001e02:	3548      	adds	r5, #72	; 0x48
 8001e04:	42a1      	cmp	r1, r4
 8001e06:	bf08      	it	eq
 8001e08:	f042 0201 	orreq.w	r2, r2, #1
 8001e0c:	3448      	adds	r4, #72	; 0x48
 8001e0e:	4281      	cmp	r1, r0
 8001e10:	bf08      	it	eq
 8001e12:	f042 0201 	orreq.w	r2, r2, #1
 8001e16:	f100 50c0 	add.w	r0, r0, #402653184	; 0x18000000
 8001e1a:	42a9      	cmp	r1, r5
 8001e1c:	bf08      	it	eq
 8001e1e:	f042 0201 	orreq.w	r2, r2, #1
 8001e22:	f500 409f 	add.w	r0, r0, #20352	; 0x4f80
 8001e26:	4d30      	ldr	r5, [pc, #192]	; (8001ee8 <HAL_DMA_Abort_IT+0x258>)
 8001e28:	42a1      	cmp	r1, r4
 8001e2a:	bf08      	it	eq
 8001e2c:	f042 0201 	orreq.w	r2, r2, #1
 8001e30:	4c2e      	ldr	r4, [pc, #184]	; (8001eec <HAL_DMA_Abort_IT+0x25c>)
 8001e32:	4281      	cmp	r1, r0
 8001e34:	bf08      	it	eq
 8001e36:	f042 0201 	orreq.w	r2, r2, #1
 8001e3a:	303c      	adds	r0, #60	; 0x3c
 8001e3c:	42a9      	cmp	r1, r5
 8001e3e:	bf08      	it	eq
 8001e40:	f042 0201 	orreq.w	r2, r2, #1
 8001e44:	353c      	adds	r5, #60	; 0x3c
 8001e46:	42a1      	cmp	r1, r4
 8001e48:	bf08      	it	eq
 8001e4a:	f042 0201 	orreq.w	r2, r2, #1
 8001e4e:	343c      	adds	r4, #60	; 0x3c
 8001e50:	4281      	cmp	r1, r0
 8001e52:	bf08      	it	eq
 8001e54:	f042 0201 	orreq.w	r2, r2, #1
 8001e58:	303c      	adds	r0, #60	; 0x3c
 8001e5a:	42a9      	cmp	r1, r5
 8001e5c:	bf08      	it	eq
 8001e5e:	f042 0201 	orreq.w	r2, r2, #1
 8001e62:	42a1      	cmp	r1, r4
 8001e64:	bf08      	it	eq
 8001e66:	f042 0201 	orreq.w	r2, r2, #1
 8001e6a:	4281      	cmp	r1, r0
 8001e6c:	bf08      	it	eq
 8001e6e:	f042 0201 	orreq.w	r2, r2, #1
 8001e72:	b912      	cbnz	r2, 8001e7a <HAL_DMA_Abort_IT+0x1ea>
 8001e74:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <HAL_DMA_Abort_IT+0x260>)
 8001e76:	4291      	cmp	r1, r2
 8001e78:	d117      	bne.n	8001eaa <HAL_DMA_Abort_IT+0x21a>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e7a:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e7c:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e7e:	6801      	ldr	r1, [r0, #0]
 8001e80:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001e84:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e86:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e8a:	f001 011f 	and.w	r1, r1, #31
 8001e8e:	408a      	lsls	r2, r1
 8001e90:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e92:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8001e96:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8001e98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e9a:	b132      	cbz	r2, 8001eaa <HAL_DMA_Abort_IT+0x21a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e9c:	6811      	ldr	r1, [r2, #0]
 8001e9e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001ea2:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ea4:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8001ea8:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 8001eaa:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001eac:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8001eae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8001eb0:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001eb4:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8001eb8:	b11a      	cbz	r2, 8001ec2 <HAL_DMA_Abort_IT+0x232>
 8001eba:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8001ebc:	4790      	blx	r2
  return HAL_OK;
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	e6f2      	b.n	8001ca8 <HAL_DMA_Abort_IT+0x18>
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	e6f0      	b.n	8001ca8 <HAL_DMA_Abort_IT+0x18>
 8001ec6:	bf00      	nop
 8001ec8:	40020010 	.word	0x40020010
 8001ecc:	40020028 	.word	0x40020028
 8001ed0:	400200a0 	.word	0x400200a0
 8001ed4:	400200b8 	.word	0x400200b8
 8001ed8:	40020470 	.word	0x40020470
 8001edc:	40020488 	.word	0x40020488
 8001ee0:	40020040 	.word	0x40020040
 8001ee4:	40020058 	.word	0x40020058
 8001ee8:	5802541c 	.word	0x5802541c
 8001eec:	58025430 	.word	0x58025430
 8001ef0:	58025494 	.word	0x58025494
 8001ef4:	40020070 	.word	0x40020070
 8001ef8:	40020088 	.word	0x40020088
 8001efc:	40020458 	.word	0x40020458
 8001f00:	400204b8 	.word	0x400204b8

08001f04 <HAL_DMA_IRQHandler>:
{
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f06:	4ba5      	ldr	r3, [pc, #660]	; (800219c <HAL_DMA_IRQHandler+0x298>)
{
 8001f08:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f0a:	6804      	ldr	r4, [r0, #0]
  __IO uint32_t count = 0U;
 8001f0c:	2100      	movs	r1, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f0e:	4aa4      	ldr	r2, [pc, #656]	; (80021a0 <HAL_DMA_IRQHandler+0x29c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f10:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f12:	429c      	cmp	r4, r3
  __IO uint32_t count = 0U;
 8001f14:	9101      	str	r1, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f16:	6816      	ldr	r6, [r2, #0]
  tmpisr_dma  = regs_dma->ISR;
 8001f18:	682f      	ldr	r7, [r5, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8001f1a:	682a      	ldr	r2, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f1c:	d04d      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb6>
 8001f1e:	3318      	adds	r3, #24
 8001f20:	429c      	cmp	r4, r3
 8001f22:	d04a      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb6>
 8001f24:	3330      	adds	r3, #48	; 0x30
 8001f26:	f8df c284 	ldr.w	ip, [pc, #644]	; 80021ac <HAL_DMA_IRQHandler+0x2a8>
 8001f2a:	499e      	ldr	r1, [pc, #632]	; (80021a4 <HAL_DMA_IRQHandler+0x2a0>)
 8001f2c:	4564      	cmp	r4, ip
 8001f2e:	bf18      	it	ne
 8001f30:	429c      	cmpne	r4, r3
 8001f32:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	428c      	cmp	r4, r1
 8001f3e:	bf08      	it	eq
 8001f40:	f043 0301 	orreq.w	r3, r3, #1
 8001f44:	3130      	adds	r1, #48	; 0x30
 8001f46:	4564      	cmp	r4, ip
 8001f48:	bf08      	it	eq
 8001f4a:	f043 0301 	orreq.w	r3, r3, #1
 8001f4e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001f52:	428c      	cmp	r4, r1
 8001f54:	bf08      	it	eq
 8001f56:	f043 0301 	orreq.w	r3, r3, #1
 8001f5a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8001f5e:	4564      	cmp	r4, ip
 8001f60:	bf08      	it	eq
 8001f62:	f043 0301 	orreq.w	r3, r3, #1
 8001f66:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8001f6a:	428c      	cmp	r4, r1
 8001f6c:	bf08      	it	eq
 8001f6e:	f043 0301 	orreq.w	r3, r3, #1
 8001f72:	3130      	adds	r1, #48	; 0x30
 8001f74:	4564      	cmp	r4, ip
 8001f76:	bf08      	it	eq
 8001f78:	f043 0301 	orreq.w	r3, r3, #1
 8001f7c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001f80:	428c      	cmp	r4, r1
 8001f82:	bf08      	it	eq
 8001f84:	f043 0301 	orreq.w	r3, r3, #1
 8001f88:	3130      	adds	r1, #48	; 0x30
 8001f8a:	4564      	cmp	r4, ip
 8001f8c:	bf08      	it	eq
 8001f8e:	f043 0301 	orreq.w	r3, r3, #1
 8001f92:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001f96:	428c      	cmp	r4, r1
 8001f98:	bf08      	it	eq
 8001f9a:	f043 0301 	orreq.w	r3, r3, #1
 8001f9e:	3130      	adds	r1, #48	; 0x30
 8001fa0:	4564      	cmp	r4, ip
 8001fa2:	bf08      	it	eq
 8001fa4:	f043 0301 	orreq.w	r3, r3, #1
 8001fa8:	428c      	cmp	r4, r1
 8001faa:	bf08      	it	eq
 8001fac:	f043 0301 	orreq.w	r3, r3, #1
 8001fb0:	b91b      	cbnz	r3, 8001fba <HAL_DMA_IRQHandler+0xb6>
 8001fb2:	4b7d      	ldr	r3, [pc, #500]	; (80021a8 <HAL_DMA_IRQHandler+0x2a4>)
 8001fb4:	429c      	cmp	r4, r3
 8001fb6:	f040 821e 	bne.w	80023f6 <HAL_DMA_IRQHandler+0x4f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fba:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	f001 021f 	and.w	r2, r1, #31
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	423b      	tst	r3, r7
 8001fc6:	f040 81fb 	bne.w	80023c0 <HAL_DMA_IRQHandler+0x4bc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fca:	fa27 f302 	lsr.w	r3, r7, r2
 8001fce:	07dc      	lsls	r4, r3, #31
 8001fd0:	d563      	bpl.n	800209a <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001fd2:	6801      	ldr	r1, [r0, #0]
 8001fd4:	4b71      	ldr	r3, [pc, #452]	; (800219c <HAL_DMA_IRQHandler+0x298>)
 8001fd6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80021b0 <HAL_DMA_IRQHandler+0x2ac>
 8001fda:	4c74      	ldr	r4, [pc, #464]	; (80021ac <HAL_DMA_IRQHandler+0x2a8>)
 8001fdc:	4561      	cmp	r1, ip
 8001fde:	bf18      	it	ne
 8001fe0:	4299      	cmpne	r1, r3
 8001fe2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	42a1      	cmp	r1, r4
 8001fee:	bf08      	it	eq
 8001ff0:	f043 0301 	orreq.w	r3, r3, #1
 8001ff4:	3430      	adds	r4, #48	; 0x30
 8001ff6:	4561      	cmp	r1, ip
 8001ff8:	bf08      	it	eq
 8001ffa:	f043 0301 	orreq.w	r3, r3, #1
 8001ffe:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002002:	42a1      	cmp	r1, r4
 8002004:	bf08      	it	eq
 8002006:	f043 0301 	orreq.w	r3, r3, #1
 800200a:	3430      	adds	r4, #48	; 0x30
 800200c:	4561      	cmp	r1, ip
 800200e:	bf08      	it	eq
 8002010:	f043 0301 	orreq.w	r3, r3, #1
 8002014:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002018:	42a1      	cmp	r1, r4
 800201a:	bf08      	it	eq
 800201c:	f043 0301 	orreq.w	r3, r3, #1
 8002020:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8002024:	4561      	cmp	r1, ip
 8002026:	bf08      	it	eq
 8002028:	f043 0301 	orreq.w	r3, r3, #1
 800202c:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8002030:	42a1      	cmp	r1, r4
 8002032:	bf08      	it	eq
 8002034:	f043 0301 	orreq.w	r3, r3, #1
 8002038:	3430      	adds	r4, #48	; 0x30
 800203a:	4561      	cmp	r1, ip
 800203c:	bf08      	it	eq
 800203e:	f043 0301 	orreq.w	r3, r3, #1
 8002042:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002046:	42a1      	cmp	r1, r4
 8002048:	bf08      	it	eq
 800204a:	f043 0301 	orreq.w	r3, r3, #1
 800204e:	3430      	adds	r4, #48	; 0x30
 8002050:	4561      	cmp	r1, ip
 8002052:	bf08      	it	eq
 8002054:	f043 0301 	orreq.w	r3, r3, #1
 8002058:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800205c:	42a1      	cmp	r1, r4
 800205e:	bf08      	it	eq
 8002060:	f043 0301 	orreq.w	r3, r3, #1
 8002064:	3430      	adds	r4, #48	; 0x30
 8002066:	4561      	cmp	r1, ip
 8002068:	bf08      	it	eq
 800206a:	f043 0301 	orreq.w	r3, r3, #1
 800206e:	42a1      	cmp	r1, r4
 8002070:	bf08      	it	eq
 8002072:	f043 0301 	orreq.w	r3, r3, #1
 8002076:	b91b      	cbnz	r3, 8002080 <HAL_DMA_IRQHandler+0x17c>
 8002078:	4b4b      	ldr	r3, [pc, #300]	; (80021a8 <HAL_DMA_IRQHandler+0x2a4>)
 800207a:	4299      	cmp	r1, r3
 800207c:	f040 8285 	bne.w	800258a <HAL_DMA_IRQHandler+0x686>
 8002080:	694b      	ldr	r3, [r1, #20]
 8002082:	0619      	lsls	r1, r3, #24
 8002084:	d509      	bpl.n	800209a <HAL_DMA_IRQHandler+0x196>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002086:	2101      	movs	r1, #1
 8002088:	4091      	lsls	r1, r2
 800208a:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800208c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800208e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	f001 021f 	and.w	r2, r1, #31
 8002098:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800209a:	2404      	movs	r4, #4
 800209c:	4094      	lsls	r4, r2
 800209e:	423c      	tst	r4, r7
 80020a0:	d067      	beq.n	8002172 <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80020a2:	6801      	ldr	r1, [r0, #0]
 80020a4:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_DMA_IRQHandler+0x298>)
 80020a6:	f8df e108 	ldr.w	lr, [pc, #264]	; 80021b0 <HAL_DMA_IRQHandler+0x2ac>
 80020aa:	f8df c100 	ldr.w	ip, [pc, #256]	; 80021ac <HAL_DMA_IRQHandler+0x2a8>
 80020ae:	4571      	cmp	r1, lr
 80020b0:	bf18      	it	ne
 80020b2:	4299      	cmpne	r1, r3
 80020b4:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	4561      	cmp	r1, ip
 80020c0:	bf08      	it	eq
 80020c2:	f043 0301 	orreq.w	r3, r3, #1
 80020c6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80020ca:	4571      	cmp	r1, lr
 80020cc:	bf08      	it	eq
 80020ce:	f043 0301 	orreq.w	r3, r3, #1
 80020d2:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80020d6:	4561      	cmp	r1, ip
 80020d8:	bf08      	it	eq
 80020da:	f043 0301 	orreq.w	r3, r3, #1
 80020de:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80020e2:	4571      	cmp	r1, lr
 80020e4:	bf08      	it	eq
 80020e6:	f043 0301 	orreq.w	r3, r3, #1
 80020ea:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80020ee:	4561      	cmp	r1, ip
 80020f0:	bf08      	it	eq
 80020f2:	f043 0301 	orreq.w	r3, r3, #1
 80020f6:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 80020fa:	4571      	cmp	r1, lr
 80020fc:	bf08      	it	eq
 80020fe:	f043 0301 	orreq.w	r3, r3, #1
 8002102:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8002106:	4561      	cmp	r1, ip
 8002108:	bf08      	it	eq
 800210a:	f043 0301 	orreq.w	r3, r3, #1
 800210e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002112:	4571      	cmp	r1, lr
 8002114:	bf08      	it	eq
 8002116:	f043 0301 	orreq.w	r3, r3, #1
 800211a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800211e:	4561      	cmp	r1, ip
 8002120:	bf08      	it	eq
 8002122:	f043 0301 	orreq.w	r3, r3, #1
 8002126:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800212a:	4571      	cmp	r1, lr
 800212c:	bf08      	it	eq
 800212e:	f043 0301 	orreq.w	r3, r3, #1
 8002132:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002136:	4561      	cmp	r1, ip
 8002138:	bf08      	it	eq
 800213a:	f043 0301 	orreq.w	r3, r3, #1
 800213e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002142:	4571      	cmp	r1, lr
 8002144:	bf08      	it	eq
 8002146:	f043 0301 	orreq.w	r3, r3, #1
 800214a:	4561      	cmp	r1, ip
 800214c:	bf08      	it	eq
 800214e:	f043 0301 	orreq.w	r3, r3, #1
 8002152:	b91b      	cbnz	r3, 800215c <HAL_DMA_IRQHandler+0x258>
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <HAL_DMA_IRQHandler+0x2a4>)
 8002156:	4299      	cmp	r1, r3
 8002158:	f040 8215 	bne.w	8002586 <HAL_DMA_IRQHandler+0x682>
 800215c:	680b      	ldr	r3, [r1, #0]
 800215e:	079b      	lsls	r3, r3, #30
 8002160:	d507      	bpl.n	8002172 <HAL_DMA_IRQHandler+0x26e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002162:	60ac      	str	r4, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002164:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002166:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	f001 021f 	and.w	r2, r1, #31
 8002170:	6543      	str	r3, [r0, #84]	; 0x54
 8002172:	4604      	mov	r4, r0
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002174:	2010      	movs	r0, #16
 8002176:	4090      	lsls	r0, r2
 8002178:	4238      	tst	r0, r7
 800217a:	f000 8086 	beq.w	800228a <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800217e:	6821      	ldr	r1, [r4, #0]
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_DMA_IRQHandler+0x298>)
 8002182:	f8df e02c 	ldr.w	lr, [pc, #44]	; 80021b0 <HAL_DMA_IRQHandler+0x2ac>
 8002186:	f8df c024 	ldr.w	ip, [pc, #36]	; 80021ac <HAL_DMA_IRQHandler+0x2a8>
 800218a:	4571      	cmp	r1, lr
 800218c:	bf18      	it	ne
 800218e:	4299      	cmpne	r1, r3
 8002190:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002194:	bf08      	it	eq
 8002196:	2301      	moveq	r3, #1
 8002198:	e00c      	b.n	80021b4 <HAL_DMA_IRQHandler+0x2b0>
 800219a:	bf00      	nop
 800219c:	40020010 	.word	0x40020010
 80021a0:	2000000c 	.word	0x2000000c
 80021a4:	40020070 	.word	0x40020070
 80021a8:	400204b8 	.word	0x400204b8
 80021ac:	40020040 	.word	0x40020040
 80021b0:	40020028 	.word	0x40020028
 80021b4:	bf18      	it	ne
 80021b6:	2300      	movne	r3, #0
 80021b8:	4561      	cmp	r1, ip
 80021ba:	bf08      	it	eq
 80021bc:	f043 0301 	orreq.w	r3, r3, #1
 80021c0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80021c4:	4571      	cmp	r1, lr
 80021c6:	bf08      	it	eq
 80021c8:	f043 0301 	orreq.w	r3, r3, #1
 80021cc:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80021d0:	4561      	cmp	r1, ip
 80021d2:	bf08      	it	eq
 80021d4:	f043 0301 	orreq.w	r3, r3, #1
 80021d8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80021dc:	4571      	cmp	r1, lr
 80021de:	bf08      	it	eq
 80021e0:	f043 0301 	orreq.w	r3, r3, #1
 80021e4:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80021e8:	4561      	cmp	r1, ip
 80021ea:	bf08      	it	eq
 80021ec:	f043 0301 	orreq.w	r3, r3, #1
 80021f0:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 80021f4:	4571      	cmp	r1, lr
 80021f6:	bf08      	it	eq
 80021f8:	f043 0301 	orreq.w	r3, r3, #1
 80021fc:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8002200:	4561      	cmp	r1, ip
 8002202:	bf08      	it	eq
 8002204:	f043 0301 	orreq.w	r3, r3, #1
 8002208:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800220c:	4571      	cmp	r1, lr
 800220e:	bf08      	it	eq
 8002210:	f043 0301 	orreq.w	r3, r3, #1
 8002214:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002218:	4561      	cmp	r1, ip
 800221a:	bf08      	it	eq
 800221c:	f043 0301 	orreq.w	r3, r3, #1
 8002220:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002224:	4571      	cmp	r1, lr
 8002226:	bf08      	it	eq
 8002228:	f043 0301 	orreq.w	r3, r3, #1
 800222c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002230:	4561      	cmp	r1, ip
 8002232:	bf08      	it	eq
 8002234:	f043 0301 	orreq.w	r3, r3, #1
 8002238:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800223c:	4571      	cmp	r1, lr
 800223e:	bf08      	it	eq
 8002240:	f043 0301 	orreq.w	r3, r3, #1
 8002244:	4561      	cmp	r1, ip
 8002246:	bf08      	it	eq
 8002248:	f043 0301 	orreq.w	r3, r3, #1
 800224c:	b91b      	cbnz	r3, 8002256 <HAL_DMA_IRQHandler+0x352>
 800224e:	4b9f      	ldr	r3, [pc, #636]	; (80024cc <HAL_DMA_IRQHandler+0x5c8>)
 8002250:	4299      	cmp	r1, r3
 8002252:	f040 8194 	bne.w	800257e <HAL_DMA_IRQHandler+0x67a>
 8002256:	680b      	ldr	r3, [r1, #0]
 8002258:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800225c:	b1ab      	cbz	r3, 800228a <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800225e:	60a8      	str	r0, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	0350      	lsls	r0, r2, #13
 8002266:	f100 8102 	bmi.w	800246e <HAL_DMA_IRQHandler+0x56a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	05d2      	lsls	r2, r2, #23
 800226e:	d403      	bmi.n	8002278 <HAL_DMA_IRQHandler+0x374>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f022 0208 	bic.w	r2, r2, #8
 8002276:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8002278:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 80ff 	beq.w	800247e <HAL_DMA_IRQHandler+0x57a>
            hdma->XferHalfCpltCallback(hdma);
 8002280:	4620      	mov	r0, r4
 8002282:	4798      	blx	r3
 8002284:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002286:	f001 021f 	and.w	r2, r1, #31
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800228a:	2120      	movs	r1, #32
 800228c:	4091      	lsls	r1, r2
 800228e:	4239      	tst	r1, r7
 8002290:	d068      	beq.n	8002364 <HAL_DMA_IRQHandler+0x460>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002292:	6822      	ldr	r2, [r4, #0]
 8002294:	4b8e      	ldr	r3, [pc, #568]	; (80024d0 <HAL_DMA_IRQHandler+0x5cc>)
 8002296:	4f8f      	ldr	r7, [pc, #572]	; (80024d4 <HAL_DMA_IRQHandler+0x5d0>)
 8002298:	488f      	ldr	r0, [pc, #572]	; (80024d8 <HAL_DMA_IRQHandler+0x5d4>)
 800229a:	42ba      	cmp	r2, r7
 800229c:	bf18      	it	ne
 800229e:	429a      	cmpne	r2, r3
 80022a0:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80022a4:	bf0c      	ite	eq
 80022a6:	2301      	moveq	r3, #1
 80022a8:	2300      	movne	r3, #0
 80022aa:	4282      	cmp	r2, r0
 80022ac:	bf08      	it	eq
 80022ae:	f043 0301 	orreq.w	r3, r3, #1
 80022b2:	3030      	adds	r0, #48	; 0x30
 80022b4:	42ba      	cmp	r2, r7
 80022b6:	bf08      	it	eq
 80022b8:	f043 0301 	orreq.w	r3, r3, #1
 80022bc:	3730      	adds	r7, #48	; 0x30
 80022be:	4282      	cmp	r2, r0
 80022c0:	bf08      	it	eq
 80022c2:	f043 0301 	orreq.w	r3, r3, #1
 80022c6:	3030      	adds	r0, #48	; 0x30
 80022c8:	42ba      	cmp	r2, r7
 80022ca:	bf08      	it	eq
 80022cc:	f043 0301 	orreq.w	r3, r3, #1
 80022d0:	3730      	adds	r7, #48	; 0x30
 80022d2:	4282      	cmp	r2, r0
 80022d4:	bf08      	it	eq
 80022d6:	f043 0301 	orreq.w	r3, r3, #1
 80022da:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80022de:	42ba      	cmp	r2, r7
 80022e0:	bf08      	it	eq
 80022e2:	f043 0301 	orreq.w	r3, r3, #1
 80022e6:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80022ea:	4282      	cmp	r2, r0
 80022ec:	bf08      	it	eq
 80022ee:	f043 0301 	orreq.w	r3, r3, #1
 80022f2:	3030      	adds	r0, #48	; 0x30
 80022f4:	42ba      	cmp	r2, r7
 80022f6:	bf08      	it	eq
 80022f8:	f043 0301 	orreq.w	r3, r3, #1
 80022fc:	3730      	adds	r7, #48	; 0x30
 80022fe:	4282      	cmp	r2, r0
 8002300:	bf08      	it	eq
 8002302:	f043 0301 	orreq.w	r3, r3, #1
 8002306:	3030      	adds	r0, #48	; 0x30
 8002308:	42ba      	cmp	r2, r7
 800230a:	bf08      	it	eq
 800230c:	f043 0301 	orreq.w	r3, r3, #1
 8002310:	3730      	adds	r7, #48	; 0x30
 8002312:	4282      	cmp	r2, r0
 8002314:	bf08      	it	eq
 8002316:	f043 0301 	orreq.w	r3, r3, #1
 800231a:	3030      	adds	r0, #48	; 0x30
 800231c:	42ba      	cmp	r2, r7
 800231e:	bf08      	it	eq
 8002320:	f043 0301 	orreq.w	r3, r3, #1
 8002324:	4282      	cmp	r2, r0
 8002326:	bf08      	it	eq
 8002328:	f043 0301 	orreq.w	r3, r3, #1
 800232c:	b91b      	cbnz	r3, 8002336 <HAL_DMA_IRQHandler+0x432>
 800232e:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_DMA_IRQHandler+0x5c8>)
 8002330:	429a      	cmp	r2, r3
 8002332:	f040 812c 	bne.w	800258e <HAL_DMA_IRQHandler+0x68a>
 8002336:	6813      	ldr	r3, [r2, #0]
 8002338:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800233c:	b193      	cbz	r3, 8002364 <HAL_DMA_IRQHandler+0x460>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800233e:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002340:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002344:	2b04      	cmp	r3, #4
 8002346:	f000 809e 	beq.w	8002486 <HAL_DMA_IRQHandler+0x582>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	0357      	lsls	r7, r2, #13
 8002350:	f140 80ce 	bpl.w	80024f0 <HAL_DMA_IRQHandler+0x5ec>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	031d      	lsls	r5, r3, #12
 8002358:	f140 80d9 	bpl.w	800250e <HAL_DMA_IRQHandler+0x60a>
          if(hdma->XferCpltCallback != NULL)
 800235c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800235e:	b10b      	cbz	r3, 8002364 <HAL_DMA_IRQHandler+0x460>
            hdma->XferCpltCallback(hdma);
 8002360:	4620      	mov	r0, r4
 8002362:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002364:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002366:	2b00      	cmp	r3, #0
 8002368:	d07f      	beq.n	800246a <HAL_DMA_IRQHandler+0x566>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800236a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800236c:	07d8      	lsls	r0, r3, #31
 800236e:	d51f      	bpl.n	80023b0 <HAL_DMA_IRQHandler+0x4ac>
        __HAL_DMA_DISABLE(hdma);
 8002370:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8002372:	2004      	movs	r0, #4
 8002374:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8002378:	6813      	ldr	r3, [r2, #0]
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002380:	4b56      	ldr	r3, [pc, #344]	; (80024dc <HAL_DMA_IRQHandler+0x5d8>)
 8002382:	6822      	ldr	r2, [r4, #0]
 8002384:	fba3 3606 	umull	r3, r6, r3, r6
 8002388:	0ab6      	lsrs	r6, r6, #10
 800238a:	e002      	b.n	8002392 <HAL_DMA_IRQHandler+0x48e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	07d9      	lsls	r1, r3, #31
 8002390:	d504      	bpl.n	800239c <HAL_DMA_IRQHandler+0x498>
          if (++count > timeout)
 8002392:	9b01      	ldr	r3, [sp, #4]
 8002394:	3301      	adds	r3, #1
 8002396:	42b3      	cmp	r3, r6
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	d9f7      	bls.n	800238c <HAL_DMA_IRQHandler+0x488>
        __HAL_UNLOCK(hdma);
 800239c:	2300      	movs	r3, #0
 800239e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023a2:	6813      	ldr	r3, [r2, #0]
 80023a4:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80023a6:	bf4c      	ite	mi
 80023a8:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80023aa:	2301      	movpl	r3, #1
 80023ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 80023b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d059      	beq.n	800246a <HAL_DMA_IRQHandler+0x566>
        hdma->XferErrorCallback(hdma);
 80023b6:	4620      	mov	r0, r4
}
 80023b8:	b003      	add	sp, #12
 80023ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 80023be:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	075b      	lsls	r3, r3, #29
 80023c4:	f57f ae01 	bpl.w	8001fca <HAL_DMA_IRQHandler+0xc6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80023c8:	6822      	ldr	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023ca:	2308      	movs	r3, #8
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80023cc:	f022 0204 	bic.w	r2, r2, #4
 80023d0:	6022      	str	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023d2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80023d4:	f002 021f 	and.w	r2, r2, #31
 80023d8:	4093      	lsls	r3, r2
 80023da:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023de:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	f001 021f 	and.w	r2, r1, #31
 80023e8:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023ea:	fa27 f302 	lsr.w	r3, r7, r2
 80023ee:	07dc      	lsls	r4, r3, #31
 80023f0:	f57f ae53 	bpl.w	800209a <HAL_DMA_IRQHandler+0x196>
 80023f4:	e5ed      	b.n	8001fd2 <HAL_DMA_IRQHandler+0xce>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80023f6:	4b3a      	ldr	r3, [pc, #232]	; (80024e0 <HAL_DMA_IRQHandler+0x5dc>)
 80023f8:	4e3a      	ldr	r6, [pc, #232]	; (80024e4 <HAL_DMA_IRQHandler+0x5e0>)
 80023fa:	493b      	ldr	r1, [pc, #236]	; (80024e8 <HAL_DMA_IRQHandler+0x5e4>)
 80023fc:	42b4      	cmp	r4, r6
 80023fe:	bf18      	it	ne
 8002400:	429c      	cmpne	r4, r3
 8002402:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	428c      	cmp	r4, r1
 800240e:	bf08      	it	eq
 8002410:	f043 0301 	orreq.w	r3, r3, #1
 8002414:	3128      	adds	r1, #40	; 0x28
 8002416:	42b4      	cmp	r4, r6
 8002418:	bf08      	it	eq
 800241a:	f043 0301 	orreq.w	r3, r3, #1
 800241e:	3628      	adds	r6, #40	; 0x28
 8002420:	428c      	cmp	r4, r1
 8002422:	bf08      	it	eq
 8002424:	f043 0301 	orreq.w	r3, r3, #1
 8002428:	3128      	adds	r1, #40	; 0x28
 800242a:	42b4      	cmp	r4, r6
 800242c:	bf08      	it	eq
 800242e:	f043 0301 	orreq.w	r3, r3, #1
 8002432:	428c      	cmp	r4, r1
 8002434:	bf08      	it	eq
 8002436:	f043 0301 	orreq.w	r3, r3, #1
 800243a:	b913      	cbnz	r3, 8002442 <HAL_DMA_IRQHandler+0x53e>
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_DMA_IRQHandler+0x5e8>)
 800243e:	429c      	cmp	r4, r3
 8002440:	d113      	bne.n	800246a <HAL_DMA_IRQHandler+0x566>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002442:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8002444:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002446:	6823      	ldr	r3, [r4, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002448:	f001 011f 	and.w	r1, r1, #31
 800244c:	408e      	lsls	r6, r1
 800244e:	4216      	tst	r6, r2
 8002450:	d066      	beq.n	8002520 <HAL_DMA_IRQHandler+0x61c>
 8002452:	075f      	lsls	r7, r3, #29
 8002454:	d564      	bpl.n	8002520 <HAL_DMA_IRQHandler+0x61c>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002456:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002458:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800245a:	f140 809c 	bpl.w	8002596 <HAL_DMA_IRQHandler+0x692>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800245e:	03da      	lsls	r2, r3, #15
 8002460:	f100 80f1 	bmi.w	8002646 <HAL_DMA_IRQHandler+0x742>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002464:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1a6      	bne.n	80023b8 <HAL_DMA_IRQHandler+0x4b4>
}
 800246a:	b003      	add	sp, #12
 800246c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0319      	lsls	r1, r3, #12
 8002472:	f57f af01 	bpl.w	8002278 <HAL_DMA_IRQHandler+0x374>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002476:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002478:	2b00      	cmp	r3, #0
 800247a:	f47f af01 	bne.w	8002280 <HAL_DMA_IRQHandler+0x37c>
 800247e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002480:	f002 021f 	and.w	r2, r2, #31
 8002484:	e701      	b.n	800228a <HAL_DMA_IRQHandler+0x386>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002486:	6822      	ldr	r2, [r4, #0]
 8002488:	6813      	ldr	r3, [r2, #0]
 800248a:	f023 0316 	bic.w	r3, r3, #22
 800248e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002490:	6822      	ldr	r2, [r4, #0]
 8002492:	6953      	ldr	r3, [r2, #20]
 8002494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002498:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800249a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d03b      	beq.n	8002518 <HAL_DMA_IRQHandler+0x614>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80024a0:	6822      	ldr	r2, [r4, #0]
 80024a2:	6813      	ldr	r3, [r2, #0]
 80024a4:	f023 0308 	bic.w	r3, r3, #8
 80024a8:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80024ac:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 80024ae:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 80024b0:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024b2:	f002 021f 	and.w	r2, r2, #31
 80024b6:	4093      	lsls	r3, r2
 80024b8:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 80024ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
          __HAL_UNLOCK(hdma);
 80024bc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80024c0:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f47f af76 	bne.w	80023b6 <HAL_DMA_IRQHandler+0x4b2>
 80024ca:	e7ce      	b.n	800246a <HAL_DMA_IRQHandler+0x566>
 80024cc:	400204b8 	.word	0x400204b8
 80024d0:	40020010 	.word	0x40020010
 80024d4:	40020028 	.word	0x40020028
 80024d8:	40020040 	.word	0x40020040
 80024dc:	1b4e81b5 	.word	0x1b4e81b5
 80024e0:	58025408 	.word	0x58025408
 80024e4:	5802541c 	.word	0x5802541c
 80024e8:	58025430 	.word	0x58025430
 80024ec:	58025494 	.word	0x58025494
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80024f6:	f47f af31 	bne.w	800235c <HAL_DMA_IRQHandler+0x458>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80024fa:	6819      	ldr	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80024fc:	2001      	movs	r0, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80024fe:	f021 0110 	bic.w	r1, r1, #16
 8002502:	6019      	str	r1, [r3, #0]
            __HAL_UNLOCK(hdma);
 8002504:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8002508:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800250c:	e726      	b.n	800235c <HAL_DMA_IRQHandler+0x458>
            if(hdma->XferM1CpltCallback != NULL)
 800250e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002510:	2b00      	cmp	r3, #0
 8002512:	f47f af25 	bne.w	8002360 <HAL_DMA_IRQHandler+0x45c>
 8002516:	e725      	b.n	8002364 <HAL_DMA_IRQHandler+0x460>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002518:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1c0      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x59c>
 800251e:	e7c4      	b.n	80024aa <HAL_DMA_IRQHandler+0x5a6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002520:	2602      	movs	r6, #2
 8002522:	408e      	lsls	r6, r1
 8002524:	4216      	tst	r6, r2
 8002526:	d00d      	beq.n	8002544 <HAL_DMA_IRQHandler+0x640>
 8002528:	079f      	lsls	r7, r3, #30
 800252a:	d50b      	bpl.n	8002544 <HAL_DMA_IRQHandler+0x640>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800252c:	041c      	lsls	r4, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800252e:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002530:	f140 808e 	bpl.w	8002650 <HAL_DMA_IRQHandler+0x74c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002534:	03d9      	lsls	r1, r3, #15
 8002536:	f100 80e9 	bmi.w	800270c <HAL_DMA_IRQHandler+0x808>
          if(hdma->XferM1CpltCallback != NULL)
 800253a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f af3b 	bne.w	80023b8 <HAL_DMA_IRQHandler+0x4b4>
 8002542:	e792      	b.n	800246a <HAL_DMA_IRQHandler+0x566>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002544:	2608      	movs	r6, #8
 8002546:	fa06 f101 	lsl.w	r1, r6, r1
 800254a:	4211      	tst	r1, r2
 800254c:	d08d      	beq.n	800246a <HAL_DMA_IRQHandler+0x566>
 800254e:	071b      	lsls	r3, r3, #28
 8002550:	d58b      	bpl.n	800246a <HAL_DMA_IRQHandler+0x566>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002552:	6823      	ldr	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002554:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8002556:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002558:	f023 030e 	bic.w	r3, r3, #14
 800255c:	6023      	str	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800255e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 800256a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800256c:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800256e:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002572:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8002576:	2b00      	cmp	r3, #0
 8002578:	f47f af1e 	bne.w	80023b8 <HAL_DMA_IRQHandler+0x4b4>
 800257c:	e775      	b.n	800246a <HAL_DMA_IRQHandler+0x566>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800257e:	680b      	ldr	r3, [r1, #0]
 8002580:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002584:	e66a      	b.n	800225c <HAL_DMA_IRQHandler+0x358>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002586:	680b      	ldr	r3, [r1, #0]
 8002588:	e5f3      	b.n	8002172 <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800258a:	680b      	ldr	r3, [r1, #0]
 800258c:	e585      	b.n	800209a <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800258e:	6813      	ldr	r3, [r2, #0]
 8002590:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002594:	e6d2      	b.n	800233c <HAL_DMA_IRQHandler+0x438>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002596:	069b      	lsls	r3, r3, #26
 8002598:	d455      	bmi.n	8002646 <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800259a:	6802      	ldr	r2, [r0, #0]
 800259c:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_DMA_IRQHandler+0x828>)
 800259e:	4c64      	ldr	r4, [pc, #400]	; (8002730 <HAL_DMA_IRQHandler+0x82c>)
 80025a0:	4964      	ldr	r1, [pc, #400]	; (8002734 <HAL_DMA_IRQHandler+0x830>)
 80025a2:	42a2      	cmp	r2, r4
 80025a4:	bf18      	it	ne
 80025a6:	429a      	cmpne	r2, r3
 80025a8:	4d63      	ldr	r5, [pc, #396]	; (8002738 <HAL_DMA_IRQHandler+0x834>)
 80025aa:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	428a      	cmp	r2, r1
 80025b6:	bf08      	it	eq
 80025b8:	f043 0301 	orreq.w	r3, r3, #1
 80025bc:	3148      	adds	r1, #72	; 0x48
 80025be:	42aa      	cmp	r2, r5
 80025c0:	bf08      	it	eq
 80025c2:	f043 0301 	orreq.w	r3, r3, #1
 80025c6:	3548      	adds	r5, #72	; 0x48
 80025c8:	42a2      	cmp	r2, r4
 80025ca:	bf08      	it	eq
 80025cc:	f043 0301 	orreq.w	r3, r3, #1
 80025d0:	3448      	adds	r4, #72	; 0x48
 80025d2:	428a      	cmp	r2, r1
 80025d4:	bf08      	it	eq
 80025d6:	f043 0301 	orreq.w	r3, r3, #1
 80025da:	f501 7162 	add.w	r1, r1, #904	; 0x388
 80025de:	42aa      	cmp	r2, r5
 80025e0:	bf08      	it	eq
 80025e2:	f043 0301 	orreq.w	r3, r3, #1
 80025e6:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80025ea:	42a2      	cmp	r2, r4
 80025ec:	bf08      	it	eq
 80025ee:	f043 0301 	orreq.w	r3, r3, #1
 80025f2:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80025f6:	428a      	cmp	r2, r1
 80025f8:	bf08      	it	eq
 80025fa:	f043 0301 	orreq.w	r3, r3, #1
 80025fe:	3148      	adds	r1, #72	; 0x48
 8002600:	42aa      	cmp	r2, r5
 8002602:	bf08      	it	eq
 8002604:	f043 0301 	orreq.w	r3, r3, #1
 8002608:	3548      	adds	r5, #72	; 0x48
 800260a:	42a2      	cmp	r2, r4
 800260c:	bf08      	it	eq
 800260e:	f043 0301 	orreq.w	r3, r3, #1
 8002612:	3448      	adds	r4, #72	; 0x48
 8002614:	428a      	cmp	r2, r1
 8002616:	bf08      	it	eq
 8002618:	f043 0301 	orreq.w	r3, r3, #1
 800261c:	3148      	adds	r1, #72	; 0x48
 800261e:	42aa      	cmp	r2, r5
 8002620:	bf08      	it	eq
 8002622:	f043 0301 	orreq.w	r3, r3, #1
 8002626:	42a2      	cmp	r2, r4
 8002628:	bf08      	it	eq
 800262a:	f043 0301 	orreq.w	r3, r3, #1
 800262e:	428a      	cmp	r2, r1
 8002630:	bf08      	it	eq
 8002632:	f043 0301 	orreq.w	r3, r3, #1
 8002636:	b913      	cbnz	r3, 800263e <HAL_DMA_IRQHandler+0x73a>
 8002638:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_DMA_IRQHandler+0x838>)
 800263a:	429a      	cmp	r2, r3
 800263c:	d16b      	bne.n	8002716 <HAL_DMA_IRQHandler+0x812>
 800263e:	6813      	ldr	r3, [r2, #0]
 8002640:	f023 0308 	bic.w	r3, r3, #8
 8002644:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002646:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	f47f aeb5 	bne.w	80023b8 <HAL_DMA_IRQHandler+0x4b4>
 800264e:	e70c      	b.n	800246a <HAL_DMA_IRQHandler+0x566>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002650:	069a      	lsls	r2, r3, #26
 8002652:	d45b      	bmi.n	800270c <HAL_DMA_IRQHandler+0x808>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002654:	6802      	ldr	r2, [r0, #0]
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <HAL_DMA_IRQHandler+0x828>)
 8002658:	4c35      	ldr	r4, [pc, #212]	; (8002730 <HAL_DMA_IRQHandler+0x82c>)
 800265a:	4936      	ldr	r1, [pc, #216]	; (8002734 <HAL_DMA_IRQHandler+0x830>)
 800265c:	42a2      	cmp	r2, r4
 800265e:	bf18      	it	ne
 8002660:	429a      	cmpne	r2, r3
 8002662:	4d35      	ldr	r5, [pc, #212]	; (8002738 <HAL_DMA_IRQHandler+0x834>)
 8002664:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8002668:	bf0c      	ite	eq
 800266a:	2301      	moveq	r3, #1
 800266c:	2300      	movne	r3, #0
 800266e:	428a      	cmp	r2, r1
 8002670:	bf08      	it	eq
 8002672:	f043 0301 	orreq.w	r3, r3, #1
 8002676:	3148      	adds	r1, #72	; 0x48
 8002678:	42aa      	cmp	r2, r5
 800267a:	bf08      	it	eq
 800267c:	f043 0301 	orreq.w	r3, r3, #1
 8002680:	3548      	adds	r5, #72	; 0x48
 8002682:	42a2      	cmp	r2, r4
 8002684:	bf08      	it	eq
 8002686:	f043 0301 	orreq.w	r3, r3, #1
 800268a:	3448      	adds	r4, #72	; 0x48
 800268c:	428a      	cmp	r2, r1
 800268e:	bf08      	it	eq
 8002690:	f043 0301 	orreq.w	r3, r3, #1
 8002694:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8002698:	42aa      	cmp	r2, r5
 800269a:	bf08      	it	eq
 800269c:	f043 0301 	orreq.w	r3, r3, #1
 80026a0:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80026a4:	42a2      	cmp	r2, r4
 80026a6:	bf08      	it	eq
 80026a8:	f043 0301 	orreq.w	r3, r3, #1
 80026ac:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80026b0:	428a      	cmp	r2, r1
 80026b2:	bf08      	it	eq
 80026b4:	f043 0301 	orreq.w	r3, r3, #1
 80026b8:	3148      	adds	r1, #72	; 0x48
 80026ba:	42aa      	cmp	r2, r5
 80026bc:	bf08      	it	eq
 80026be:	f043 0301 	orreq.w	r3, r3, #1
 80026c2:	3548      	adds	r5, #72	; 0x48
 80026c4:	42a2      	cmp	r2, r4
 80026c6:	bf08      	it	eq
 80026c8:	f043 0301 	orreq.w	r3, r3, #1
 80026cc:	3448      	adds	r4, #72	; 0x48
 80026ce:	428a      	cmp	r2, r1
 80026d0:	bf08      	it	eq
 80026d2:	f043 0301 	orreq.w	r3, r3, #1
 80026d6:	3148      	adds	r1, #72	; 0x48
 80026d8:	42aa      	cmp	r2, r5
 80026da:	bf08      	it	eq
 80026dc:	f043 0301 	orreq.w	r3, r3, #1
 80026e0:	42a2      	cmp	r2, r4
 80026e2:	bf08      	it	eq
 80026e4:	f043 0301 	orreq.w	r3, r3, #1
 80026e8:	428a      	cmp	r2, r1
 80026ea:	bf08      	it	eq
 80026ec:	f043 0301 	orreq.w	r3, r3, #1
 80026f0:	b913      	cbnz	r3, 80026f8 <HAL_DMA_IRQHandler+0x7f4>
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_DMA_IRQHandler+0x838>)
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d113      	bne.n	8002720 <HAL_DMA_IRQHandler+0x81c>
 80026f8:	6813      	ldr	r3, [r2, #0]
 80026fa:	f023 0314 	bic.w	r3, r3, #20
 80026fe:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(hdma);
 8002700:	2200      	movs	r2, #0
          hdma->State = HAL_DMA_STATE_READY;
 8002702:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002704:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002708:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800270c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800270e:	2b00      	cmp	r3, #0
 8002710:	f47f ae52 	bne.w	80023b8 <HAL_DMA_IRQHandler+0x4b4>
 8002714:	e6a9      	b.n	800246a <HAL_DMA_IRQHandler+0x566>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e792      	b.n	8002646 <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002720:	6813      	ldr	r3, [r2, #0]
 8002722:	f023 030a 	bic.w	r3, r3, #10
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e7ea      	b.n	8002700 <HAL_DMA_IRQHandler+0x7fc>
 800272a:	bf00      	nop
 800272c:	40020010 	.word	0x40020010
 8002730:	40020028 	.word	0x40020028
 8002734:	40020040 	.word	0x40020040
 8002738:	40020058 	.word	0x40020058
 800273c:	400204b8 	.word	0x400204b8

08002740 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002740:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8002742:	4770      	bx	lr

08002744 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002744:	680b      	ldr	r3, [r1, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80e8 	beq.w	800291c <HAL_GPIO_Init+0x1d8>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274c:	f8df c224 	ldr.w	ip, [pc, #548]	; 8002974 <HAL_GPIO_Init+0x230>
{
 8002750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8002754:	2500      	movs	r5, #0
{
 8002756:	b083      	sub	sp, #12
 8002758:	f8df e21c 	ldr.w	lr, [pc, #540]	; 8002978 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800275c:	4f7f      	ldr	r7, [pc, #508]	; (800295c <HAL_GPIO_Init+0x218>)
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800275e:	2201      	movs	r2, #1
 8002760:	40aa      	lsls	r2, r5
    if (iocurrent != 0x00U)
 8002762:	ea12 0603 	ands.w	r6, r2, r3
 8002766:	f000 80bf 	beq.w	80028e8 <HAL_GPIO_Init+0x1a4>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276a:	684b      	ldr	r3, [r1, #4]
 800276c:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8002770:	2403      	movs	r4, #3
 8002772:	f023 0910 	bic.w	r9, r3, #16
 8002776:	fa04 f408 	lsl.w	r4, r4, r8
 800277a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800277e:	43e4      	mvns	r4, r4
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002780:	f1b9 0f01 	cmp.w	r9, #1
 8002784:	d814      	bhi.n	80027b0 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->OSPEEDR;
 8002786:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002788:	ea03 0904 	and.w	r9, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278c:	68cb      	ldr	r3, [r1, #12]
 800278e:	fa03 f308 	lsl.w	r3, r3, r8
 8002792:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OSPEEDR = temp;
 8002796:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002798:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 800279a:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800279e:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027a2:	ea29 0902 	bic.w	r9, r9, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027a6:	fa03 f205 	lsl.w	r2, r3, r5
 80027aa:	ea42 0209 	orr.w	r2, r2, r9
        GPIOx->OTYPER = temp;
 80027ae:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80027b0:	68c2      	ldr	r2, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b2:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027b4:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b6:	fa03 f308 	lsl.w	r3, r3, r8
 80027ba:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 80027bc:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027be:	684b      	ldr	r3, [r1, #4]
 80027c0:	f023 0210 	bic.w	r2, r3, #16
 80027c4:	2a02      	cmp	r2, #2
 80027c6:	d115      	bne.n	80027f4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 80027c8:	08ea      	lsrs	r2, r5, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027ca:	f005 0907 	and.w	r9, r5, #7
 80027ce:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027d2:	690b      	ldr	r3, [r1, #16]
 80027d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027d8:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80027dc:	f8d2 a020 	ldr.w	sl, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027e0:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027e4:	fa03 f309 	lsl.w	r3, r3, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027e8:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027ec:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 80027f0:	6213      	str	r3, [r2, #32]
 80027f2:	684b      	ldr	r3, [r1, #4]
      temp = GPIOx->MODER;
 80027f4:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f6:	f003 0303 	and.w	r3, r3, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027fa:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027fc:	fa03 f308 	lsl.w	r3, r3, r8
 8002800:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8002802:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002804:	684b      	ldr	r3, [r1, #4]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	d56d      	bpl.n	80028e6 <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	f8dc 40f4 	ldr.w	r4, [ip, #244]	; 0xf4
 800280e:	f025 0903 	bic.w	r9, r5, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002812:	f005 0303 	and.w	r3, r5, #3
 8002816:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002818:	f044 0802 	orr.w	r8, r4, #2
 800281c:	eb09 040e 	add.w	r4, r9, lr
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002820:	ea4f 0983 	mov.w	r9, r3, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002824:	4b4e      	ldr	r3, [pc, #312]	; (8002960 <HAL_GPIO_Init+0x21c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	f8cc 80f4 	str.w	r8, [ip, #244]	; 0xf4
 800282a:	f8dc 80f4 	ldr.w	r8, [ip, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800282e:	fa02 f209 	lsl.w	r2, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002832:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002834:	f008 0802 	and.w	r8, r8, #2
 8002838:	f8cd 8004 	str.w	r8, [sp, #4]
 800283c:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002840:	f8d4 8008 	ldr.w	r8, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002844:	ea28 0202 	bic.w	r2, r8, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002848:	d026      	beq.n	8002898 <HAL_GPIO_Init+0x154>
 800284a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800284e:	4298      	cmp	r0, r3
 8002850:	d058      	beq.n	8002904 <HAL_GPIO_Init+0x1c0>
 8002852:	4b44      	ldr	r3, [pc, #272]	; (8002964 <HAL_GPIO_Init+0x220>)
 8002854:	4298      	cmp	r0, r3
 8002856:	d04f      	beq.n	80028f8 <HAL_GPIO_Init+0x1b4>
 8002858:	4b43      	ldr	r3, [pc, #268]	; (8002968 <HAL_GPIO_Init+0x224>)
 800285a:	4298      	cmp	r0, r3
 800285c:	d05f      	beq.n	800291e <HAL_GPIO_Init+0x1da>
 800285e:	4b43      	ldr	r3, [pc, #268]	; (800296c <HAL_GPIO_Init+0x228>)
 8002860:	4298      	cmp	r0, r3
 8002862:	d062      	beq.n	800292a <HAL_GPIO_Init+0x1e6>
 8002864:	4b42      	ldr	r3, [pc, #264]	; (8002970 <HAL_GPIO_Init+0x22c>)
 8002866:	4298      	cmp	r0, r3
 8002868:	d052      	beq.n	8002910 <HAL_GPIO_Init+0x1cc>
 800286a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800297c <HAL_GPIO_Init+0x238>
 800286e:	4540      	cmp	r0, r8
 8002870:	d061      	beq.n	8002936 <HAL_GPIO_Init+0x1f2>
 8002872:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002980 <HAL_GPIO_Init+0x23c>
 8002876:	4540      	cmp	r0, r8
 8002878:	d063      	beq.n	8002942 <HAL_GPIO_Init+0x1fe>
 800287a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8002984 <HAL_GPIO_Init+0x240>
 800287e:	4540      	cmp	r0, r8
 8002880:	d065      	beq.n	800294e <HAL_GPIO_Init+0x20a>
 8002882:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8002988 <HAL_GPIO_Init+0x244>
 8002886:	4540      	cmp	r0, r8
 8002888:	bf0c      	ite	eq
 800288a:	f04f 0809 	moveq.w	r8, #9
 800288e:	f04f 080a 	movne.w	r8, #10
 8002892:	fa08 f309 	lsl.w	r3, r8, r9
 8002896:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002898:	60a2      	str	r2, [r4, #8]
        temp &= ~(iocurrent);
 800289a:	43f2      	mvns	r2, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800289c:	684c      	ldr	r4, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800289e:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp = EXTI_CurrentCPU->IMR1;
 80028a2:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a4:	03e4      	lsls	r4, r4, #15
          temp |= iocurrent;
 80028a6:	bf4c      	ite	mi
 80028a8:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 80028aa:	4013      	andpl	r3, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80028ac:	603b      	str	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ae:	684c      	ldr	r4, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80028b0:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b2:	03a4      	lsls	r4, r4, #14
          temp |= iocurrent;
 80028b4:	bf4c      	ite	mi
 80028b6:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 80028b8:	4013      	andpl	r3, r2
        EXTI_CurrentCPU->EMR1 = temp;
 80028ba:	607b      	str	r3, [r7, #4]
        temp = EXTI->RTSR1;
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028c0:	684c      	ldr	r4, [r1, #4]
        temp = EXTI->RTSR1;
 80028c2:	681b      	ldr	r3, [r3, #0]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028c4:	02e4      	lsls	r4, r4, #11
          temp |= iocurrent;
 80028c6:	bf4c      	ite	mi
 80028c8:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 80028ca:	4013      	andpl	r3, r2
        EXTI->RTSR1 = temp;
 80028cc:	f8c8 3000 	str.w	r3, [r8]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028d0:	684c      	ldr	r4, [r1, #4]
        temp = EXTI->FTSR1;
 80028d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028d6:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80028d8:	bf54      	ite	pl
 80028da:	ea02 0603 	andpl.w	r6, r2, r3
        {
          temp |= iocurrent;
 80028de:	431e      	orrmi	r6, r3
        }
        EXTI->FTSR1 = temp;
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e4:	605e      	str	r6, [r3, #4]
 80028e6:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 80028e8:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028ea:	fa33 f205 	lsrs.w	r2, r3, r5
 80028ee:	f47f af36 	bne.w	800275e <HAL_GPIO_Init+0x1a>
  }
}
 80028f2:	b003      	add	sp, #12
 80028f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f8:	f04f 0802 	mov.w	r8, #2
 80028fc:	fa08 f309 	lsl.w	r3, r8, r9
 8002900:	431a      	orrs	r2, r3
 8002902:	e7c9      	b.n	8002898 <HAL_GPIO_Init+0x154>
 8002904:	f04f 0801 	mov.w	r8, #1
 8002908:	fa08 f309 	lsl.w	r3, r8, r9
 800290c:	431a      	orrs	r2, r3
 800290e:	e7c3      	b.n	8002898 <HAL_GPIO_Init+0x154>
 8002910:	f04f 0805 	mov.w	r8, #5
 8002914:	fa08 f309 	lsl.w	r3, r8, r9
 8002918:	431a      	orrs	r2, r3
 800291a:	e7bd      	b.n	8002898 <HAL_GPIO_Init+0x154>
 800291c:	4770      	bx	lr
 800291e:	f04f 0803 	mov.w	r8, #3
 8002922:	fa08 f309 	lsl.w	r3, r8, r9
 8002926:	431a      	orrs	r2, r3
 8002928:	e7b6      	b.n	8002898 <HAL_GPIO_Init+0x154>
 800292a:	f04f 0804 	mov.w	r8, #4
 800292e:	fa08 f309 	lsl.w	r3, r8, r9
 8002932:	431a      	orrs	r2, r3
 8002934:	e7b0      	b.n	8002898 <HAL_GPIO_Init+0x154>
 8002936:	f04f 0806 	mov.w	r8, #6
 800293a:	fa08 f309 	lsl.w	r3, r8, r9
 800293e:	431a      	orrs	r2, r3
 8002940:	e7aa      	b.n	8002898 <HAL_GPIO_Init+0x154>
 8002942:	f04f 0807 	mov.w	r8, #7
 8002946:	fa08 f309 	lsl.w	r3, r8, r9
 800294a:	431a      	orrs	r2, r3
 800294c:	e7a4      	b.n	8002898 <HAL_GPIO_Init+0x154>
 800294e:	f04f 0808 	mov.w	r8, #8
 8002952:	fa08 f309 	lsl.w	r3, r8, r9
 8002956:	431a      	orrs	r2, r3
 8002958:	e79e      	b.n	8002898 <HAL_GPIO_Init+0x154>
 800295a:	bf00      	nop
 800295c:	58000080 	.word	0x58000080
 8002960:	58020000 	.word	0x58020000
 8002964:	58020800 	.word	0x58020800
 8002968:	58020c00 	.word	0x58020c00
 800296c:	58021000 	.word	0x58021000
 8002970:	58021400 	.word	0x58021400
 8002974:	58024400 	.word	0x58024400
 8002978:	58000400 	.word	0x58000400
 800297c:	58021800 	.word	0x58021800
 8002980:	58021c00 	.word	0x58021c00
 8002984:	58022000 	.word	0x58022000
 8002988:	58022400 	.word	0x58022400

0800298c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800298c:	b902      	cbnz	r2, 8002990 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800298e:	0409      	lsls	r1, r1, #16
 8002990:	6181      	str	r1, [r0, #24]
  }
}
 8002992:	4770      	bx	lr

08002994 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002994:	2800      	cmp	r0, #0
 8002996:	d056      	beq.n	8002a46 <HAL_I2C_Init+0xb2>
{
 8002998:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800299e:	4604      	mov	r4, r0
 80029a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d049      	beq.n	8002a3c <HAL_I2C_Init+0xa8>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029a8:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80029aa:	2324      	movs	r3, #36	; 0x24
 80029ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80029b0:	6813      	ldr	r3, [r2, #0]
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029b8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80029bc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80029c0:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029c2:	6822      	ldr	r2, [r4, #0]
 80029c4:	6893      	ldr	r3, [r2, #8]
 80029c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029ca:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029cc:	68e3      	ldr	r3, [r4, #12]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029ce:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029d0:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029d2:	68a3      	ldr	r3, [r4, #8]
 80029d4:	bf0c      	ite	eq
 80029d6:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029da:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 80029de:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029e0:	68e3      	ldr	r3, [r4, #12]
 80029e2:	6825      	ldr	r5, [r4, #0]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d024      	beq.n	8002a32 <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029e8:	6868      	ldr	r0, [r5, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ea:	2200      	movs	r2, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ec:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <HAL_I2C_Init+0xb8>)
  hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	2120      	movs	r1, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029f0:	4303      	orrs	r3, r0
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 80029f2:	4610      	mov	r0, r2
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029f4:	606b      	str	r3, [r5, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029f6:	6825      	ldr	r5, [r4, #0]
 80029f8:	68eb      	ldr	r3, [r5, #12]
 80029fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029fe:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a00:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
 8002a04:	432b      	orrs	r3, r5
 8002a06:	69a5      	ldr	r5, [r4, #24]
 8002a08:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002a0c:	6825      	ldr	r5, [r4, #0]
 8002a0e:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a10:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8002a14:	432b      	orrs	r3, r5
 8002a16:	6825      	ldr	r5, [r4, #0]
 8002a18:	602b      	str	r3, [r5, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002a1a:	6825      	ldr	r5, [r4, #0]
 8002a1c:	682b      	ldr	r3, [r5, #0]
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	602b      	str	r3, [r5, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a24:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a2a:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8002a30:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a36:	606b      	str	r3, [r5, #4]
 8002a38:	6825      	ldr	r5, [r4, #0]
 8002a3a:	e7d5      	b.n	80029e8 <HAL_I2C_Init+0x54>
    hi2c->Lock = HAL_UNLOCKED;
 8002a3c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002a40:	f003 fcba 	bl	80063b8 <HAL_I2C_MspInit>
 8002a44:	e7b0      	b.n	80029a8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002a46:	2001      	movs	r0, #1
}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	02008000 	.word	0x02008000

08002a50 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a50:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	2a20      	cmp	r2, #32
 8002a58:	d126      	bne.n	8002aa8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002a5a:	4603      	mov	r3, r0
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002a60:	2801      	cmp	r0, #1
 8002a62:	d021      	beq.n	8002aa8 <HAL_I2CEx_ConfigAnalogFilter+0x58>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a64:	2024      	movs	r0, #36	; 0x24
{
 8002a66:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(hi2c);
 8002a68:	2401      	movs	r4, #1

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a6a:	681e      	ldr	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a70:	2500      	movs	r5, #0
    __HAL_LOCK(hi2c);
 8002a72:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002a76:	6834      	ldr	r4, [r6, #0]

    return HAL_OK;
 8002a78:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 8002a7a:	f024 0401 	bic.w	r4, r4, #1
 8002a7e:	6034      	str	r4, [r6, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a80:	681e      	ldr	r6, [r3, #0]
 8002a82:	6834      	ldr	r4, [r6, #0]
 8002a84:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002a88:	6034      	str	r4, [r6, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a8a:	681e      	ldr	r6, [r3, #0]
 8002a8c:	6834      	ldr	r4, [r6, #0]
 8002a8e:	4321      	orrs	r1, r4
 8002a90:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002a92:	681c      	ldr	r4, [r3, #0]
 8002a94:	6821      	ldr	r1, [r4, #0]
 8002a96:	f041 0101 	orr.w	r1, r1, #1
 8002a9a:	6021      	str	r1, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002aa0:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002aa4:	bc70      	pop	{r4, r5, r6}
 8002aa6:	4770      	bx	lr
    return HAL_BUSY;
 8002aa8:	2002      	movs	r0, #2
}
 8002aaa:	4770      	bx	lr

08002aac <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aac:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	2a20      	cmp	r2, #32
 8002ab4:	d124      	bne.n	8002b00 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002ab6:	4603      	mov	r3, r0
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002abc:	2801      	cmp	r0, #1
 8002abe:	d01f      	beq.n	8002b00 <HAL_I2CEx_ConfigDigitalFilter+0x54>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac0:	2024      	movs	r0, #36	; 0x24
{
 8002ac2:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(hi2c);
 8002ac4:	2401      	movs	r4, #1

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac6:	681e      	ldr	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002acc:	2500      	movs	r5, #0
    __HAL_LOCK(hi2c);
 8002ace:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002ad2:	6834      	ldr	r4, [r6, #0]

    return HAL_OK;
 8002ad4:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 8002ad6:	f024 0401 	bic.w	r4, r4, #1
 8002ada:	6034      	str	r4, [r6, #0]
    tmpreg = hi2c->Instance->CR1;
 8002adc:	681e      	ldr	r6, [r3, #0]
 8002ade:	6834      	ldr	r4, [r6, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002ae0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002ae4:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002ae8:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002aea:	681c      	ldr	r4, [r3, #0]
 8002aec:	6821      	ldr	r1, [r4, #0]
 8002aee:	f041 0101 	orr.w	r1, r1, #1
 8002af2:	6021      	str	r1, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002af8:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002afc:	bc70      	pop	{r4, r5, r6}
 8002afe:	4770      	bx	lr
    return HAL_BUSY;
 8002b00:	2002      	movs	r0, #2
}
 8002b02:	4770      	bx	lr

08002b04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b04:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_PWREx_ConfigSupply+0x48>)
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	0752      	lsls	r2, r2, #29
 8002b0c:	d406      	bmi.n	8002b1c <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b14:	1a18      	subs	r0, r3, r0
 8002b16:	bf18      	it	ne
 8002b18:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002b1a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b1c:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b1e:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b20:	f022 0207 	bic.w	r2, r2, #7
 8002b24:	4310      	orrs	r0, r2
 8002b26:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8002b28:	f7fd fc3a 	bl	80003a0 <HAL_GetTick>
 8002b2c:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b2e:	e005      	b.n	8002b3c <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b30:	f7fd fc36 	bl	80003a0 <HAL_GetTick>
 8002b34:	1b40      	subs	r0, r0, r5
 8002b36:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b3a:	d804      	bhi.n	8002b46 <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b3c:	6863      	ldr	r3, [r4, #4]
 8002b3e:	049b      	lsls	r3, r3, #18
 8002b40:	d5f6      	bpl.n	8002b30 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8002b42:	2000      	movs	r0, #0
}
 8002b44:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002b46:	2001      	movs	r0, #1
}
 8002b48:	bd38      	pop	{r3, r4, r5, pc}
 8002b4a:	bf00      	nop
 8002b4c:	58024800 	.word	0x58024800

08002b50 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b50:	2800      	cmp	r0, #0
 8002b52:	f000 8195 	beq.w	8002e80 <HAL_RCC_OscConfig+0x330>
{
 8002b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b58:	6803      	ldr	r3, [r0, #0]
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	07d9      	lsls	r1, r3, #31
 8002b5e:	d52e      	bpl.n	8002bbe <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b60:	49a7      	ldr	r1, [pc, #668]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002b62:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b64:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b66:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b6a:	2a10      	cmp	r2, #16
 8002b6c:	f000 810d 	beq.w	8002d8a <HAL_RCC_OscConfig+0x23a>
 8002b70:	2a18      	cmp	r2, #24
 8002b72:	f000 8105 	beq.w	8002d80 <HAL_RCC_OscConfig+0x230>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b76:	6863      	ldr	r3, [r4, #4]
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7c:	f000 8130 	beq.w	8002de0 <HAL_RCC_OscConfig+0x290>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f040 81a5 	bne.w	8002ed0 <HAL_RCC_OscConfig+0x380>
 8002b86:	4b9e      	ldr	r3, [pc, #632]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b96:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b98:	6863      	ldr	r3, [r4, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8162 	beq.w	8002e64 <HAL_RCC_OscConfig+0x314>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fd fbfe 	bl	80003a0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ba4:	4d96      	ldr	r5, [pc, #600]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8002ba6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ba8:	e005      	b.n	8002bb6 <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002baa:	f7fd fbf9 	bl	80003a0 <HAL_GetTick>
 8002bae:	1b80      	subs	r0, r0, r6
 8002bb0:	2864      	cmp	r0, #100	; 0x64
 8002bb2:	f200 8155 	bhi.w	8002e60 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bb6:	682b      	ldr	r3, [r5, #0]
 8002bb8:	039f      	lsls	r7, r3, #14
 8002bba:	d5f6      	bpl.n	8002baa <HAL_RCC_OscConfig+0x5a>
 8002bbc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bbe:	0799      	lsls	r1, r3, #30
 8002bc0:	f100 808e 	bmi.w	8002ce0 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bc4:	06d9      	lsls	r1, r3, #27
 8002bc6:	d534      	bpl.n	8002c32 <HAL_RCC_OscConfig+0xe2>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc8:	4a8d      	ldr	r2, [pc, #564]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002bca:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bcc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bce:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	f000 80e9 	beq.w	8002daa <HAL_RCC_OscConfig+0x25a>
 8002bd8:	2b18      	cmp	r3, #24
 8002bda:	f000 80e1 	beq.w	8002da0 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002bde:	69e3      	ldr	r3, [r4, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8183 	beq.w	8002eec <HAL_RCC_OscConfig+0x39c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002be6:	4b86      	ldr	r3, [pc, #536]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002be8:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bea:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8002bec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bf0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bf2:	f7fd fbd5 	bl	80003a0 <HAL_GetTick>
 8002bf6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bf8:	e005      	b.n	8002c06 <HAL_RCC_OscConfig+0xb6>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bfa:	f7fd fbd1 	bl	80003a0 <HAL_GetTick>
 8002bfe:	1b80      	subs	r0, r0, r6
 8002c00:	2802      	cmp	r0, #2
 8002c02:	f200 812d 	bhi.w	8002e60 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c06:	682b      	ldr	r3, [r5, #0]
 8002c08:	05db      	lsls	r3, r3, #23
 8002c0a:	d5f6      	bpl.n	8002bfa <HAL_RCC_OscConfig+0xaa>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c0c:	f7fd fbe0 	bl	80003d0 <HAL_GetREVID>
 8002c10:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c14:	4298      	cmp	r0, r3
 8002c16:	f200 8257 	bhi.w	80030c8 <HAL_RCC_OscConfig+0x578>
 8002c1a:	6a22      	ldr	r2, [r4, #32]
 8002c1c:	686b      	ldr	r3, [r5, #4]
 8002c1e:	2a20      	cmp	r2, #32
 8002c20:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c24:	bf0c      	ite	eq
 8002c26:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002c2a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8002c2e:	606b      	str	r3, [r5, #4]
 8002c30:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c32:	071d      	lsls	r5, r3, #28
 8002c34:	d517      	bpl.n	8002c66 <HAL_RCC_OscConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c36:	6963      	ldr	r3, [r4, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8123 	beq.w	8002e84 <HAL_RCC_OscConfig+0x334>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3e:	4b70      	ldr	r3, [pc, #448]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002c40:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c42:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8002c44:	f042 0201 	orr.w	r2, r2, #1
 8002c48:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002c4a:	f7fd fba9 	bl	80003a0 <HAL_GetTick>
 8002c4e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c50:	e005      	b.n	8002c5e <HAL_RCC_OscConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c52:	f7fd fba5 	bl	80003a0 <HAL_GetTick>
 8002c56:	1b80      	subs	r0, r0, r6
 8002c58:	2802      	cmp	r0, #2
 8002c5a:	f200 8101 	bhi.w	8002e60 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c5e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002c60:	0798      	lsls	r0, r3, #30
 8002c62:	d5f6      	bpl.n	8002c52 <HAL_RCC_OscConfig+0x102>
 8002c64:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c66:	069a      	lsls	r2, r3, #26
 8002c68:	d517      	bpl.n	8002c9a <HAL_RCC_OscConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c6a:	69a3      	ldr	r3, [r4, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 811c 	beq.w	8002eaa <HAL_RCC_OscConfig+0x35a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c72:	4b63      	ldr	r3, [pc, #396]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002c74:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c76:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8002c78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c7c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002c7e:	f7fd fb8f 	bl	80003a0 <HAL_GetTick>
 8002c82:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c84:	e005      	b.n	8002c92 <HAL_RCC_OscConfig+0x142>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c86:	f7fd fb8b 	bl	80003a0 <HAL_GetTick>
 8002c8a:	1b80      	subs	r0, r0, r6
 8002c8c:	2802      	cmp	r0, #2
 8002c8e:	f200 80e7 	bhi.w	8002e60 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c92:	682b      	ldr	r3, [r5, #0]
 8002c94:	049f      	lsls	r7, r3, #18
 8002c96:	d5f6      	bpl.n	8002c86 <HAL_RCC_OscConfig+0x136>
 8002c98:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9a:	0759      	lsls	r1, r3, #29
 8002c9c:	f100 80a6 	bmi.w	8002dec <HAL_RCC_OscConfig+0x29c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002ca2:	b1d8      	cbz	r0, 8002cdc <HAL_RCC_OscConfig+0x18c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ca4:	4b56      	ldr	r3, [pc, #344]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002cac:	2a18      	cmp	r2, #24
 8002cae:	f000 81cc 	beq.w	800304a <HAL_RCC_OscConfig+0x4fa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb2:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb4:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb6:	f000 815e 	beq.w	8002f76 <HAL_RCC_OscConfig+0x426>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cbe:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8002cc0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cc2:	f7fd fb6d 	bl	80003a0 <HAL_GetTick>
 8002cc6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cc8:	e005      	b.n	8002cd6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fd fb69 	bl	80003a0 <HAL_GetTick>
 8002cce:	1b40      	subs	r0, r0, r5
 8002cd0:	2802      	cmp	r0, #2
 8002cd2:	f200 80c5 	bhi.w	8002e60 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	019b      	lsls	r3, r3, #6
 8002cda:	d4f6      	bmi.n	8002cca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002cdc:	2000      	movs	r0, #0
}
 8002cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce0:	4a47      	ldr	r2, [pc, #284]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002ce2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ce4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ce6:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002cea:	d02f      	beq.n	8002d4c <HAL_RCC_OscConfig+0x1fc>
 8002cec:	2b18      	cmp	r3, #24
 8002cee:	d02b      	beq.n	8002d48 <HAL_RCC_OscConfig+0x1f8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cf0:	68e2      	ldr	r2, [r4, #12]
 8002cf2:	2a00      	cmp	r2, #0
 8002cf4:	f000 810e 	beq.w	8002f14 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cf8:	4941      	ldr	r1, [pc, #260]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002cfa:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cfc:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cfe:	f023 0319 	bic.w	r3, r3, #25
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8002d06:	f7fd fb4b 	bl	80003a0 <HAL_GetTick>
 8002d0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d0c:	e005      	b.n	8002d1a <HAL_RCC_OscConfig+0x1ca>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0e:	f7fd fb47 	bl	80003a0 <HAL_GetTick>
 8002d12:	1b80      	subs	r0, r0, r6
 8002d14:	2802      	cmp	r0, #2
 8002d16:	f200 80a3 	bhi.w	8002e60 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1a:	682b      	ldr	r3, [r5, #0]
 8002d1c:	075f      	lsls	r7, r3, #29
 8002d1e:	d5f6      	bpl.n	8002d0e <HAL_RCC_OscConfig+0x1be>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d20:	f7fd fb56 	bl	80003d0 <HAL_GetREVID>
 8002d24:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d28:	4298      	cmp	r0, r3
 8002d2a:	f200 81d6 	bhi.w	80030da <HAL_RCC_OscConfig+0x58a>
 8002d2e:	6922      	ldr	r2, [r4, #16]
 8002d30:	686b      	ldr	r3, [r5, #4]
 8002d32:	2a40      	cmp	r2, #64	; 0x40
 8002d34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d38:	bf0c      	ite	eq
 8002d3a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8002d3e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8002d42:	606b      	str	r3, [r5, #4]
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	e73d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d48:	0792      	lsls	r2, r2, #30
 8002d4a:	d1d1      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	075b      	lsls	r3, r3, #29
 8002d52:	d501      	bpl.n	8002d58 <HAL_RCC_OscConfig+0x208>
 8002d54:	68e3      	ldr	r3, [r4, #12]
 8002d56:	b30b      	cbz	r3, 8002d9c <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	f7fd fb3a 	bl	80003d0 <HAL_GetREVID>
 8002d5c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d60:	4298      	cmp	r0, r3
 8002d62:	f200 80eb 	bhi.w	8002f3c <HAL_RCC_OscConfig+0x3ec>
 8002d66:	6922      	ldr	r2, [r4, #16]
 8002d68:	2a40      	cmp	r2, #64	; 0x40
 8002d6a:	f000 80fb 	beq.w	8002f64 <HAL_RCC_OscConfig+0x414>
 8002d6e:	4924      	ldr	r1, [pc, #144]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002d70:	684b      	ldr	r3, [r1, #4]
 8002d72:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d76:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002d7a:	604b      	str	r3, [r1, #4]
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	e721      	b.n	8002bc4 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d80:	f001 0103 	and.w	r1, r1, #3
 8002d84:	2902      	cmp	r1, #2
 8002d86:	f47f aef6 	bne.w	8002b76 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	0392      	lsls	r2, r2, #14
 8002d90:	f57f af15 	bpl.w	8002bbe <HAL_RCC_OscConfig+0x6e>
 8002d94:	6862      	ldr	r2, [r4, #4]
 8002d96:	2a00      	cmp	r2, #0
 8002d98:	f47f af11 	bne.w	8002bbe <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8002d9c:	2001      	movs	r0, #1
}
 8002d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002da0:	f002 0203 	and.w	r2, r2, #3
 8002da4:	2a01      	cmp	r2, #1
 8002da6:	f47f af1a 	bne.w	8002bde <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	05da      	lsls	r2, r3, #23
 8002db0:	d502      	bpl.n	8002db8 <HAL_RCC_OscConfig+0x268>
 8002db2:	69e3      	ldr	r3, [r4, #28]
 8002db4:	2b80      	cmp	r3, #128	; 0x80
 8002db6:	d1f1      	bne.n	8002d9c <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002db8:	f7fd fb0a 	bl	80003d0 <HAL_GetREVID>
 8002dbc:	f241 0303 	movw	r3, #4099	; 0x1003
 8002dc0:	4298      	cmp	r0, r3
 8002dc2:	f200 80c5 	bhi.w	8002f50 <HAL_RCC_OscConfig+0x400>
 8002dc6:	6a22      	ldr	r2, [r4, #32]
 8002dc8:	2a20      	cmp	r2, #32
 8002dca:	f000 81a8 	beq.w	800311e <HAL_RCC_OscConfig+0x5ce>
 8002dce:	490c      	ldr	r1, [pc, #48]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002dd0:	684b      	ldr	r3, [r1, #4]
 8002dd2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002dd6:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002dda:	604b      	str	r3, [r1, #4]
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	e728      	b.n	8002c32 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de0:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002de2:	6813      	ldr	r3, [r2, #0]
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e6d5      	b.n	8002b98 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCC_OscConfig+0x2b4>)
 8002dee:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df0:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8002df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002df8:	f7fd fad2 	bl	80003a0 <HAL_GetTick>
 8002dfc:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x2c2>
 8002e00:	58024400 	.word	0x58024400
 8002e04:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e08:	f7fd faca 	bl	80003a0 <HAL_GetTick>
 8002e0c:	1b80      	subs	r0, r0, r6
 8002e0e:	2864      	cmp	r0, #100	; 0x64
 8002e10:	d826      	bhi.n	8002e60 <HAL_RCC_OscConfig+0x310>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e12:	682b      	ldr	r3, [r5, #0]
 8002e14:	05da      	lsls	r2, r3, #23
 8002e16:	d5f7      	bpl.n	8002e08 <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e18:	68a3      	ldr	r3, [r4, #8]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	f000 816c 	beq.w	80030f8 <HAL_RCC_OscConfig+0x5a8>
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f040 816f 	bne.w	8003104 <HAL_RCC_OscConfig+0x5b4>
 8002e26:	4bb1      	ldr	r3, [pc, #708]	; (80030ec <HAL_RCC_OscConfig+0x59c>)
 8002e28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	671a      	str	r2, [r3, #112]	; 0x70
 8002e30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e32:	f022 0204 	bic.w	r2, r2, #4
 8002e36:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e38:	68a3      	ldr	r3, [r4, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8133 	beq.w	80030a6 <HAL_RCC_OscConfig+0x556>
      tickstart = HAL_GetTick();
 8002e40:	f7fd faae 	bl	80003a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e44:	4da9      	ldr	r5, [pc, #676]	; (80030ec <HAL_RCC_OscConfig+0x59c>)
      tickstart = HAL_GetTick();
 8002e46:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e48:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e4c:	e004      	b.n	8002e58 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fd faa7 	bl	80003a0 <HAL_GetTick>
 8002e52:	1bc0      	subs	r0, r0, r7
 8002e54:	42b0      	cmp	r0, r6
 8002e56:	d803      	bhi.n	8002e60 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002e5a:	079b      	lsls	r3, r3, #30
 8002e5c:	d5f7      	bpl.n	8002e4e <HAL_RCC_OscConfig+0x2fe>
 8002e5e:	e71f      	b.n	8002ca0 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8002e60:	2003      	movs	r0, #3
}
 8002e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8002e64:	f7fd fa9c 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e68:	4da0      	ldr	r5, [pc, #640]	; (80030ec <HAL_RCC_OscConfig+0x59c>)
        tickstart = HAL_GetTick();
 8002e6a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e6c:	e004      	b.n	8002e78 <HAL_RCC_OscConfig+0x328>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6e:	f7fd fa97 	bl	80003a0 <HAL_GetTick>
 8002e72:	1b80      	subs	r0, r0, r6
 8002e74:	2864      	cmp	r0, #100	; 0x64
 8002e76:	d8f3      	bhi.n	8002e60 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	0398      	lsls	r0, r3, #14
 8002e7c:	d4f7      	bmi.n	8002e6e <HAL_RCC_OscConfig+0x31e>
 8002e7e:	e69d      	b.n	8002bbc <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8002e80:	2001      	movs	r0, #1
}
 8002e82:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8002e84:	4b99      	ldr	r3, [pc, #612]	; (80030ec <HAL_RCC_OscConfig+0x59c>)
 8002e86:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e88:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002e90:	f7fd fa86 	bl	80003a0 <HAL_GetTick>
 8002e94:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e96:	e004      	b.n	8002ea2 <HAL_RCC_OscConfig+0x352>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e98:	f7fd fa82 	bl	80003a0 <HAL_GetTick>
 8002e9c:	1b80      	subs	r0, r0, r6
 8002e9e:	2802      	cmp	r0, #2
 8002ea0:	d8de      	bhi.n	8002e60 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ea2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002ea4:	0799      	lsls	r1, r3, #30
 8002ea6:	d4f7      	bmi.n	8002e98 <HAL_RCC_OscConfig+0x348>
 8002ea8:	e6dc      	b.n	8002c64 <HAL_RCC_OscConfig+0x114>
      __HAL_RCC_HSI48_DISABLE();
 8002eaa:	4b90      	ldr	r3, [pc, #576]	; (80030ec <HAL_RCC_OscConfig+0x59c>)
 8002eac:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eae:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8002eb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eb4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002eb6:	f7fd fa73 	bl	80003a0 <HAL_GetTick>
 8002eba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ebc:	e004      	b.n	8002ec8 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ebe:	f7fd fa6f 	bl	80003a0 <HAL_GetTick>
 8002ec2:	1b80      	subs	r0, r0, r6
 8002ec4:	2802      	cmp	r0, #2
 8002ec6:	d8cb      	bhi.n	8002e60 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ec8:	682b      	ldr	r3, [r5, #0]
 8002eca:	0498      	lsls	r0, r3, #18
 8002ecc:	d4f7      	bmi.n	8002ebe <HAL_RCC_OscConfig+0x36e>
 8002ece:	e6e3      	b.n	8002c98 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed4:	4b85      	ldr	r3, [pc, #532]	; (80030ec <HAL_RCC_OscConfig+0x59c>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	f47f ae57 	bne.w	8002b8a <HAL_RCC_OscConfig+0x3a>
 8002edc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e655      	b.n	8002b98 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_CSI_DISABLE();
 8002eec:	4b7f      	ldr	r3, [pc, #508]	; (80030ec <HAL_RCC_OscConfig+0x59c>)
 8002eee:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ef0:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8002ef2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ef8:	f7fd fa52 	bl	80003a0 <HAL_GetTick>
 8002efc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002efe:	e004      	b.n	8002f0a <HAL_RCC_OscConfig+0x3ba>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f00:	f7fd fa4e 	bl	80003a0 <HAL_GetTick>
 8002f04:	1b80      	subs	r0, r0, r6
 8002f06:	2802      	cmp	r0, #2
 8002f08:	d8aa      	bhi.n	8002e60 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f0a:	682b      	ldr	r3, [r5, #0]
 8002f0c:	05df      	lsls	r7, r3, #23
 8002f0e:	d4f7      	bmi.n	8002f00 <HAL_RCC_OscConfig+0x3b0>
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	e68e      	b.n	8002c32 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 8002f14:	4b75      	ldr	r3, [pc, #468]	; (80030ec <HAL_RCC_OscConfig+0x59c>)
 8002f16:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f18:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f20:	f7fd fa3e 	bl	80003a0 <HAL_GetTick>
 8002f24:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f26:	e004      	b.n	8002f32 <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fd fa3a 	bl	80003a0 <HAL_GetTick>
 8002f2c:	1b80      	subs	r0, r0, r6
 8002f2e:	2802      	cmp	r0, #2
 8002f30:	d896      	bhi.n	8002e60 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f32:	682b      	ldr	r3, [r5, #0]
 8002f34:	0758      	lsls	r0, r3, #29
 8002f36:	d4f7      	bmi.n	8002f28 <HAL_RCC_OscConfig+0x3d8>
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	e643      	b.n	8002bc4 <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3c:	4a6b      	ldr	r2, [pc, #428]	; (80030ec <HAL_RCC_OscConfig+0x59c>)
 8002f3e:	6921      	ldr	r1, [r4, #16]
 8002f40:	6853      	ldr	r3, [r2, #4]
 8002f42:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f46:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f4a:	6053      	str	r3, [r2, #4]
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	e639      	b.n	8002bc4 <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f50:	4a66      	ldr	r2, [pc, #408]	; (80030ec <HAL_RCC_OscConfig+0x59c>)
 8002f52:	6a21      	ldr	r1, [r4, #32]
 8002f54:	68d3      	ldr	r3, [r2, #12]
 8002f56:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002f5a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f5e:	60d3      	str	r3, [r2, #12]
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	e666      	b.n	8002c32 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f64:	4a61      	ldr	r2, [pc, #388]	; (80030ec <HAL_RCC_OscConfig+0x59c>)
 8002f66:	6853      	ldr	r3, [r2, #4]
 8002f68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f70:	6053      	str	r3, [r2, #4]
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	e626      	b.n	8002bc4 <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_PLL_DISABLE();
 8002f76:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f7a:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8002f7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f7e:	f7fd fa0f 	bl	80003a0 <HAL_GetTick>
 8002f82:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f84:	e005      	b.n	8002f92 <HAL_RCC_OscConfig+0x442>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fd fa0b 	bl	80003a0 <HAL_GetTick>
 8002f8a:	1b80      	subs	r0, r0, r6
 8002f8c:	2802      	cmp	r0, #2
 8002f8e:	f63f af67 	bhi.w	8002e60 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f92:	682b      	ldr	r3, [r5, #0]
 8002f94:	0199      	lsls	r1, r3, #6
 8002f96:	d4f6      	bmi.n	8002f86 <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f98:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002f9a:	4b55      	ldr	r3, [pc, #340]	; (80030f0 <HAL_RCC_OscConfig+0x5a0>)
 8002f9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fa2:	4954      	ldr	r1, [pc, #336]	; (80030f4 <HAL_RCC_OscConfig+0x5a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa4:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fa6:	4e51      	ldr	r6, [pc, #324]	; (80030ec <HAL_RCC_OscConfig+0x59c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002fac:	62ab      	str	r3, [r5, #40]	; 0x28
 8002fae:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8002fb0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8002fb4:	3f01      	subs	r7, #1
 8002fb6:	1e50      	subs	r0, r2, #1
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002fbc:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8002fc0:	025b      	lsls	r3, r3, #9
 8002fc2:	0400      	lsls	r0, r0, #16
 8002fc4:	3a01      	subs	r2, #1
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8002fcc:	0612      	lsls	r2, r2, #24
 8002fce:	4303      	orrs	r3, r0
 8002fd0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002fd4:	433b      	orrs	r3, r7
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fda:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fe2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002fe4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002fe6:	4011      	ands	r1, r2
 8002fe8:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002fec:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002ff0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ff2:	f023 030c 	bic.w	r3, r3, #12
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ffa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002ffc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002ffe:	f023 0302 	bic.w	r3, r3, #2
 8003002:	4313      	orrs	r3, r2
 8003004:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003006:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800300e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003014:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003016:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800301c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800301e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003026:	682b      	ldr	r3, [r5, #0]
 8003028:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800302c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800302e:	f7fd f9b7 	bl	80003a0 <HAL_GetTick>
 8003032:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003034:	e005      	b.n	8003042 <HAL_RCC_OscConfig+0x4f2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003036:	f7fd f9b3 	bl	80003a0 <HAL_GetTick>
 800303a:	1b00      	subs	r0, r0, r4
 800303c:	2802      	cmp	r0, #2
 800303e:	f63f af0f 	bhi.w	8002e60 <HAL_RCC_OscConfig+0x310>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003042:	6833      	ldr	r3, [r6, #0]
 8003044:	019a      	lsls	r2, r3, #6
 8003046:	d5f6      	bpl.n	8003036 <HAL_RCC_OscConfig+0x4e6>
 8003048:	e648      	b.n	8002cdc <HAL_RCC_OscConfig+0x18c>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304a:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800304c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800304e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003050:	f43f ae45 	beq.w	8002cde <HAL_RCC_OscConfig+0x18e>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003054:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003058:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800305a:	428b      	cmp	r3, r1
 800305c:	f47f ae9e 	bne.w	8002d9c <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003060:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003064:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003066:	429a      	cmp	r2, r3
 8003068:	f47f ae98 	bne.w	8002d9c <HAL_RCC_OscConfig+0x24c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800306c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800306e:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8003072:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	f47f ae91 	bne.w	8002d9c <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800307a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800307c:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8003080:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	f47f ae8a 	bne.w	8002d9c <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003088:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800308a:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800308e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	f47f ae83 	bne.w	8002d9c <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003096:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003098:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800309c:	3801      	subs	r0, #1
    return HAL_ERROR;
 800309e:	1a28      	subs	r0, r5, r0
 80030a0:	bf18      	it	ne
 80030a2:	2001      	movne	r0, #1
 80030a4:	e61b      	b.n	8002cde <HAL_RCC_OscConfig+0x18e>
      tickstart = HAL_GetTick();
 80030a6:	f7fd f97b 	bl	80003a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030aa:	4d10      	ldr	r5, [pc, #64]	; (80030ec <HAL_RCC_OscConfig+0x59c>)
      tickstart = HAL_GetTick();
 80030ac:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ae:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030b2:	e005      	b.n	80030c0 <HAL_RCC_OscConfig+0x570>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fd f974 	bl	80003a0 <HAL_GetTick>
 80030b8:	1bc0      	subs	r0, r0, r7
 80030ba:	42b0      	cmp	r0, r6
 80030bc:	f63f aed0 	bhi.w	8002e60 <HAL_RCC_OscConfig+0x310>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030c2:	0798      	lsls	r0, r3, #30
 80030c4:	d4f6      	bmi.n	80030b4 <HAL_RCC_OscConfig+0x564>
 80030c6:	e5eb      	b.n	8002ca0 <HAL_RCC_OscConfig+0x150>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030c8:	68eb      	ldr	r3, [r5, #12]
 80030ca:	6a22      	ldr	r2, [r4, #32]
 80030cc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80030d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80030d4:	60eb      	str	r3, [r5, #12]
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	e5ab      	b.n	8002c32 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	686b      	ldr	r3, [r5, #4]
 80030dc:	6922      	ldr	r2, [r4, #16]
 80030de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80030e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80030e6:	606b      	str	r3, [r5, #4]
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	e56b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x74>
 80030ec:	58024400 	.word	0x58024400
 80030f0:	fffffc0c 	.word	0xfffffc0c
 80030f4:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f8:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <HAL_RCC_OscConfig+0x5e0>)
 80030fa:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
 8003102:	e699      	b.n	8002e38 <HAL_RCC_OscConfig+0x2e8>
 8003104:	2b05      	cmp	r3, #5
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_RCC_OscConfig+0x5e0>)
 8003108:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800310a:	f47f ae8e 	bne.w	8002e2a <HAL_RCC_OscConfig+0x2da>
 800310e:	f042 0204 	orr.w	r2, r2, #4
 8003112:	671a      	str	r2, [r3, #112]	; 0x70
 8003114:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	671a      	str	r2, [r3, #112]	; 0x70
 800311c:	e68c      	b.n	8002e38 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800311e:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_RCC_OscConfig+0x5e0>)
 8003120:	6853      	ldr	r3, [r2, #4]
 8003122:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003126:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800312a:	6053      	str	r3, [r2, #4]
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	e580      	b.n	8002c32 <HAL_RCC_OscConfig+0xe2>
 8003130:	58024400 	.word	0x58024400

08003134 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003134:	4a3e      	ldr	r2, [pc, #248]	; (8003230 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003136:	6913      	ldr	r3, [r2, #16]
 8003138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800313c:	2b10      	cmp	r3, #16
 800313e:	d04f      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0xac>
 8003140:	2b18      	cmp	r3, #24
 8003142:	d00b      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x28>
 8003144:	b10b      	cbz	r3, 800314a <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003146:	483b      	ldr	r0, [pc, #236]	; (8003234 <HAL_RCC_GetSysClockFreq+0x100>)
 8003148:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800314a:	6813      	ldr	r3, [r2, #0]
 800314c:	0699      	lsls	r1, r3, #26
 800314e:	d549      	bpl.n	80031e4 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003150:	6813      	ldr	r3, [r2, #0]
 8003152:	4839      	ldr	r0, [pc, #228]	; (8003238 <HAL_RCC_GetSysClockFreq+0x104>)
 8003154:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003158:	40d8      	lsrs	r0, r3
 800315a:	4770      	bx	lr
{
 800315c:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800315e:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003160:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003162:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003164:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003168:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 800316a:	b3b0      	cbz	r0, 80031da <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800316c:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003170:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003174:	f001 0103 	and.w	r1, r1, #3
 8003178:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800317c:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 8003180:	2901      	cmp	r1, #1
 8003182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003186:	ee07 3a10 	vmov	s14, r3
 800318a:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 800318e:	d002      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x62>
 8003190:	d32d      	bcc.n	80031ee <HAL_RCC_GetSysClockFreq+0xba>
 8003192:	2902      	cmp	r1, #2
 8003194:	d028      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003196:	eddf 5a29 	vldr	s11, [pc, #164]	; 800323c <HAL_RCC_GetSysClockFreq+0x108>
 800319a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800319e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80031a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a4:	ee07 3a90 	vmov	s15, r3
 80031a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80031ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031b0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80031b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031b8:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80031bc:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80031c4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d6:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80031da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031de:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80031e0:	4817      	ldr	r0, [pc, #92]	; (8003240 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031e2:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031e4:	4814      	ldr	r0, [pc, #80]	; (8003238 <HAL_RCC_GetSysClockFreq+0x104>)
}
 80031e6:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031e8:	eddf 5a16 	vldr	s11, [pc, #88]	; 8003244 <HAL_RCC_GetSysClockFreq+0x110>
 80031ec:	e7d5      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031ee:	6813      	ldr	r3, [r2, #0]
 80031f0:	069b      	lsls	r3, r3, #26
 80031f2:	d51a      	bpl.n	800322a <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031f4:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031f6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031fa:	490f      	ldr	r1, [pc, #60]	; (8003238 <HAL_RCC_GetSysClockFreq+0x104>)
 80031fc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003200:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003202:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003208:	ee06 1a90 	vmov	s13, r1
 800320c:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8003210:	ee06 3a90 	vmov	s13, r3
 8003214:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8003218:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800321c:	ee76 7a05 	vadd.f32	s15, s12, s10
 8003220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003224:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003228:	e7c8      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800322a:	eddf 5a07 	vldr	s11, [pc, #28]	; 8003248 <HAL_RCC_GetSysClockFreq+0x114>
 800322e:	e7b4      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x66>
 8003230:	58024400 	.word	0x58024400
 8003234:	003d0900 	.word	0x003d0900
 8003238:	03d09000 	.word	0x03d09000
 800323c:	4a742400 	.word	0x4a742400
 8003240:	017d7840 	.word	0x017d7840
 8003244:	4bbebc20 	.word	0x4bbebc20
 8003248:	4c742400 	.word	0x4c742400

0800324c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800324c:	b178      	cbz	r0, 800326e <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800324e:	4a91      	ldr	r2, [pc, #580]	; (8003494 <HAL_RCC_ClockConfig+0x248>)
 8003250:	6813      	ldr	r3, [r2, #0]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	428b      	cmp	r3, r1
 8003258:	d20b      	bcs.n	8003272 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	6813      	ldr	r3, [r2, #0]
 800325c:	f023 030f 	bic.w	r3, r3, #15
 8003260:	430b      	orrs	r3, r1
 8003262:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003264:	6813      	ldr	r3, [r2, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	428b      	cmp	r3, r1
 800326c:	d001      	beq.n	8003272 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800326e:	2001      	movs	r0, #1
}
 8003270:	4770      	bx	lr
{
 8003272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003276:	6803      	ldr	r3, [r0, #0]
 8003278:	075f      	lsls	r7, r3, #29
 800327a:	d50c      	bpl.n	8003296 <HAL_RCC_ClockConfig+0x4a>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800327c:	4c86      	ldr	r4, [pc, #536]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
 800327e:	6905      	ldr	r5, [r0, #16]
 8003280:	69a2      	ldr	r2, [r4, #24]
 8003282:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003286:	4295      	cmp	r5, r2
 8003288:	d905      	bls.n	8003296 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800328a:	69a3      	ldr	r3, [r4, #24]
 800328c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003290:	432b      	orrs	r3, r5
 8003292:	61a3      	str	r3, [r4, #24]
 8003294:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003296:	071e      	lsls	r6, r3, #28
 8003298:	d50c      	bpl.n	80032b4 <HAL_RCC_ClockConfig+0x68>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800329a:	4c7f      	ldr	r4, [pc, #508]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
 800329c:	6945      	ldr	r5, [r0, #20]
 800329e:	69e2      	ldr	r2, [r4, #28]
 80032a0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80032a4:	4295      	cmp	r5, r2
 80032a6:	d905      	bls.n	80032b4 <HAL_RCC_ClockConfig+0x68>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032a8:	69e3      	ldr	r3, [r4, #28]
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	432b      	orrs	r3, r5
 80032b0:	61e3      	str	r3, [r4, #28]
 80032b2:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	06dd      	lsls	r5, r3, #27
 80032b6:	d50c      	bpl.n	80032d2 <HAL_RCC_ClockConfig+0x86>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032b8:	4c77      	ldr	r4, [pc, #476]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
 80032ba:	6985      	ldr	r5, [r0, #24]
 80032bc:	69e2      	ldr	r2, [r4, #28]
 80032be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80032c2:	4295      	cmp	r5, r2
 80032c4:	d905      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x86>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032c6:	69e3      	ldr	r3, [r4, #28]
 80032c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032cc:	432b      	orrs	r3, r5
 80032ce:	61e3      	str	r3, [r4, #28]
 80032d0:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032d2:	069c      	lsls	r4, r3, #26
 80032d4:	d50c      	bpl.n	80032f0 <HAL_RCC_ClockConfig+0xa4>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032d6:	4c70      	ldr	r4, [pc, #448]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
 80032d8:	69c5      	ldr	r5, [r0, #28]
 80032da:	6a22      	ldr	r2, [r4, #32]
 80032dc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80032e0:	4295      	cmp	r5, r2
 80032e2:	d905      	bls.n	80032f0 <HAL_RCC_ClockConfig+0xa4>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032e4:	6a23      	ldr	r3, [r4, #32]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	432b      	orrs	r3, r5
 80032ec:	6223      	str	r3, [r4, #32]
 80032ee:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	079a      	lsls	r2, r3, #30
 80032f2:	4604      	mov	r4, r0
 80032f4:	460d      	mov	r5, r1
 80032f6:	d512      	bpl.n	800331e <HAL_RCC_ClockConfig+0xd2>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032f8:	4867      	ldr	r0, [pc, #412]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
 80032fa:	68e1      	ldr	r1, [r4, #12]
 80032fc:	6982      	ldr	r2, [r0, #24]
 80032fe:	f002 020f 	and.w	r2, r2, #15
 8003302:	4291      	cmp	r1, r2
 8003304:	d93d      	bls.n	8003382 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003306:	6983      	ldr	r3, [r0, #24]
 8003308:	f023 030f 	bic.w	r3, r3, #15
 800330c:	4319      	orrs	r1, r3
 800330e:	6181      	str	r1, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	07df      	lsls	r7, r3, #31
 8003314:	d405      	bmi.n	8003322 <HAL_RCC_ClockConfig+0xd6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003316:	079f      	lsls	r7, r3, #30
 8003318:	d540      	bpl.n	800339c <HAL_RCC_ClockConfig+0x150>
 800331a:	68e1      	ldr	r1, [r4, #12]
 800331c:	e033      	b.n	8003386 <HAL_RCC_ClockConfig+0x13a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331e:	07db      	lsls	r3, r3, #31
 8003320:	d53c      	bpl.n	800339c <HAL_RCC_ClockConfig+0x150>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003322:	4a5d      	ldr	r2, [pc, #372]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
 8003324:	68a1      	ldr	r1, [r4, #8]
 8003326:	6993      	ldr	r3, [r2, #24]
 8003328:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800332c:	430b      	orrs	r3, r1
 800332e:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003330:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003332:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003334:	2b02      	cmp	r3, #2
 8003336:	f000 809e 	beq.w	8003476 <HAL_RCC_ClockConfig+0x22a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333a:	2b03      	cmp	r3, #3
 800333c:	f000 80a1 	beq.w	8003482 <HAL_RCC_ClockConfig+0x236>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003340:	2b01      	cmp	r3, #1
 8003342:	f000 80a2 	beq.w	800348a <HAL_RCC_ClockConfig+0x23e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003346:	0752      	lsls	r2, r2, #29
 8003348:	d538      	bpl.n	80033bc <HAL_RCC_ClockConfig+0x170>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800334a:	4953      	ldr	r1, [pc, #332]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003350:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003354:	f022 0207 	bic.w	r2, r2, #7
 8003358:	4313      	orrs	r3, r2
 800335a:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800335c:	f7fd f820 	bl	80003a0 <HAL_GetTick>
 8003360:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	e005      	b.n	8003370 <HAL_RCC_ClockConfig+0x124>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003364:	f7fd f81c 	bl	80003a0 <HAL_GetTick>
 8003368:	1bc0      	subs	r0, r0, r7
 800336a:	4540      	cmp	r0, r8
 800336c:	f200 8087 	bhi.w	800347e <HAL_RCC_ClockConfig+0x232>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003370:	6933      	ldr	r3, [r6, #16]
 8003372:	6862      	ldr	r2, [r4, #4]
 8003374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003378:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800337c:	d1f2      	bne.n	8003364 <HAL_RCC_ClockConfig+0x118>
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	e7c9      	b.n	8003316 <HAL_RCC_ClockConfig+0xca>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003382:	07da      	lsls	r2, r3, #31
 8003384:	d4cd      	bmi.n	8003322 <HAL_RCC_ClockConfig+0xd6>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003386:	4a44      	ldr	r2, [pc, #272]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
 8003388:	6993      	ldr	r3, [r2, #24]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	428b      	cmp	r3, r1
 8003390:	d904      	bls.n	800339c <HAL_RCC_ClockConfig+0x150>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003392:	6993      	ldr	r3, [r2, #24]
 8003394:	f023 030f 	bic.w	r3, r3, #15
 8003398:	4319      	orrs	r1, r3
 800339a:	6191      	str	r1, [r2, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800339c:	4a3d      	ldr	r2, [pc, #244]	; (8003494 <HAL_RCC_ClockConfig+0x248>)
 800339e:	6813      	ldr	r3, [r2, #0]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	42ab      	cmp	r3, r5
 80033a6:	d90c      	bls.n	80033c2 <HAL_RCC_ClockConfig+0x176>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a8:	6813      	ldr	r3, [r2, #0]
 80033aa:	f023 030f 	bic.w	r3, r3, #15
 80033ae:	432b      	orrs	r3, r5
 80033b0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	6813      	ldr	r3, [r2, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	42ab      	cmp	r3, r5
 80033ba:	d002      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x176>
    return HAL_ERROR;
 80033bc:	2001      	movs	r0, #1
}
 80033be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	075e      	lsls	r6, r3, #29
 80033c6:	d50c      	bpl.n	80033e2 <HAL_RCC_ClockConfig+0x196>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033c8:	4933      	ldr	r1, [pc, #204]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
 80033ca:	6920      	ldr	r0, [r4, #16]
 80033cc:	698a      	ldr	r2, [r1, #24]
 80033ce:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80033d2:	4290      	cmp	r0, r2
 80033d4:	d205      	bcs.n	80033e2 <HAL_RCC_ClockConfig+0x196>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033d6:	698b      	ldr	r3, [r1, #24]
 80033d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033dc:	4303      	orrs	r3, r0
 80033de:	618b      	str	r3, [r1, #24]
 80033e0:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e2:	071d      	lsls	r5, r3, #28
 80033e4:	d50c      	bpl.n	8003400 <HAL_RCC_ClockConfig+0x1b4>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033e6:	492c      	ldr	r1, [pc, #176]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
 80033e8:	6960      	ldr	r0, [r4, #20]
 80033ea:	69ca      	ldr	r2, [r1, #28]
 80033ec:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80033f0:	4290      	cmp	r0, r2
 80033f2:	d205      	bcs.n	8003400 <HAL_RCC_ClockConfig+0x1b4>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033f4:	69cb      	ldr	r3, [r1, #28]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	4303      	orrs	r3, r0
 80033fc:	61cb      	str	r3, [r1, #28]
 80033fe:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003400:	06d8      	lsls	r0, r3, #27
 8003402:	d50c      	bpl.n	800341e <HAL_RCC_ClockConfig+0x1d2>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003404:	4924      	ldr	r1, [pc, #144]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
 8003406:	69a0      	ldr	r0, [r4, #24]
 8003408:	69ca      	ldr	r2, [r1, #28]
 800340a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800340e:	4290      	cmp	r0, r2
 8003410:	d205      	bcs.n	800341e <HAL_RCC_ClockConfig+0x1d2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003412:	69cb      	ldr	r3, [r1, #28]
 8003414:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003418:	4303      	orrs	r3, r0
 800341a:	61cb      	str	r3, [r1, #28]
 800341c:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800341e:	0699      	lsls	r1, r3, #26
 8003420:	d50b      	bpl.n	800343a <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003422:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
 8003424:	69e1      	ldr	r1, [r4, #28]
 8003426:	6a13      	ldr	r3, [r2, #32]
 8003428:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800342c:	4299      	cmp	r1, r3
 800342e:	d204      	bcs.n	800343a <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003430:	6a13      	ldr	r3, [r2, #32]
 8003432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003436:	430b      	orrs	r3, r1
 8003438:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800343a:	f7ff fe7b 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 800343e:	4a16      	ldr	r2, [pc, #88]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
 8003440:	4916      	ldr	r1, [pc, #88]	; (800349c <HAL_RCC_ClockConfig+0x250>)
 8003442:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003444:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003446:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 800344a:	4d15      	ldr	r5, [pc, #84]	; (80034a0 <HAL_RCC_ClockConfig+0x254>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800344c:	f002 020f 	and.w	r2, r2, #15
 8003450:	4c14      	ldr	r4, [pc, #80]	; (80034a4 <HAL_RCC_ClockConfig+0x258>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003452:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003454:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003456:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800345a:	4913      	ldr	r1, [pc, #76]	; (80034a8 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800345c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003460:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8003464:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003466:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800346a:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800346c:	6022      	str	r2, [r4, #0]
}
 800346e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8003472:	f7fc bf31 	b.w	80002d8 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003476:	0396      	lsls	r6, r2, #14
 8003478:	f53f af67 	bmi.w	800334a <HAL_RCC_ClockConfig+0xfe>
 800347c:	e79e      	b.n	80033bc <HAL_RCC_ClockConfig+0x170>
            return HAL_TIMEOUT;
 800347e:	2003      	movs	r0, #3
 8003480:	e79d      	b.n	80033be <HAL_RCC_ClockConfig+0x172>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003482:	0190      	lsls	r0, r2, #6
 8003484:	f53f af61 	bmi.w	800334a <HAL_RCC_ClockConfig+0xfe>
 8003488:	e798      	b.n	80033bc <HAL_RCC_ClockConfig+0x170>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800348a:	05d1      	lsls	r1, r2, #23
 800348c:	f53f af5d 	bmi.w	800334a <HAL_RCC_ClockConfig+0xfe>
 8003490:	e794      	b.n	80033bc <HAL_RCC_ClockConfig+0x170>
 8003492:	bf00      	nop
 8003494:	52002000 	.word	0x52002000
 8003498:	58024400 	.word	0x58024400
 800349c:	0800a1f0 	.word	0x0800a1f0
 80034a0:	20000004 	.word	0x20000004
 80034a4:	20000010 	.word	0x20000010
 80034a8:	2000000c 	.word	0x2000000c

080034ac <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ac:	4a49      	ldr	r2, [pc, #292]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x128>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ae:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034b0:	6913      	ldr	r3, [r2, #16]
 80034b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d064      	beq.n	8003584 <HAL_RCC_GetHCLKFreq+0xd8>
 80034ba:	2b18      	cmp	r3, #24
 80034bc:	d022      	beq.n	8003504 <HAL_RCC_GetHCLKFreq+0x58>
 80034be:	b1bb      	cbz	r3, 80034f0 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 80034c0:	4b45      	ldr	r3, [pc, #276]	; (80035d8 <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034c2:	4944      	ldr	r1, [pc, #272]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x128>)
 80034c4:	4845      	ldr	r0, [pc, #276]	; (80035dc <HAL_RCC_GetHCLKFreq+0x130>)
 80034c6:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034c8:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ca:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ce:	4c44      	ldr	r4, [pc, #272]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x134>)
 80034d0:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034d4:	4d43      	ldr	r5, [pc, #268]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034d6:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034d8:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034da:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034de:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034e2:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034e4:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 80034e8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ea:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80034ec:	bc30      	pop	{r4, r5}
 80034ee:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034f0:	6813      	ldr	r3, [r2, #0]
 80034f2:	0699      	lsls	r1, r3, #26
 80034f4:	d548      	bpl.n	8003588 <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034f6:	6813      	ldr	r3, [r2, #0]
 80034f8:	4a3b      	ldr	r2, [pc, #236]	; (80035e8 <HAL_RCC_GetHCLKFreq+0x13c>)
 80034fa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80034fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003502:	e7de      	b.n	80034c2 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003504:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003506:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003508:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800350a:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800350e:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0d6      	beq.n	80034c2 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003514:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003518:	f001 0101 	and.w	r1, r1, #1
 800351c:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003520:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003524:	fb01 f304 	mul.w	r3, r1, r4
 8003528:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800352c:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8003536:	d002      	beq.n	800353e <HAL_RCC_GetHCLKFreq+0x92>
 8003538:	d32b      	bcc.n	8003592 <HAL_RCC_GetHCLKFreq+0xe6>
 800353a:	2802      	cmp	r0, #2
 800353c:	d026      	beq.n	800358c <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800353e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80035ec <HAL_RCC_GetHCLKFreq+0x140>
 8003542:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8003546:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354c:	ee07 3a10 	vmov	s14, r3
 8003550:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003554:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003558:	ee37 7a25 	vadd.f32	s14, s14, s11
 800355c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003560:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x128>)
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800356c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800356e:	ee07 3a10 	vmov	s14, r3
 8003572:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003576:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800357a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800357e:	ee17 3a90 	vmov	r3, s15
 8003582:	e79e      	b.n	80034c2 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8003584:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <HAL_RCC_GetHCLKFreq+0x144>)
 8003586:	e79c      	b.n	80034c2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003588:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <HAL_RCC_GetHCLKFreq+0x13c>)
 800358a:	e79a      	b.n	80034c2 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800358c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80035f4 <HAL_RCC_GetHCLKFreq+0x148>
 8003590:	e7d7      	b.n	8003542 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003592:	6813      	ldr	r3, [r2, #0]
 8003594:	069b      	lsls	r3, r3, #26
 8003596:	d51a      	bpl.n	80035ce <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003598:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800359a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800359e:	4912      	ldr	r1, [pc, #72]	; (80035e8 <HAL_RCC_GetHCLKFreq+0x13c>)
 80035a0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035a6:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ac:	ee07 1a10 	vmov	s14, r1
 80035b0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80035b4:	ee07 3a10 	vmov	s14, r3
 80035b8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80035bc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80035c0:	ee76 6a05 	vadd.f32	s13, s12, s10
 80035c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035cc:	e7ca      	b.n	8003564 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035ce:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80035f8 <HAL_RCC_GetHCLKFreq+0x14c>
 80035d2:	e7b6      	b.n	8003542 <HAL_RCC_GetHCLKFreq+0x96>
 80035d4:	58024400 	.word	0x58024400
 80035d8:	003d0900 	.word	0x003d0900
 80035dc:	0800a1f0 	.word	0x0800a1f0
 80035e0:	20000010 	.word	0x20000010
 80035e4:	2000000c 	.word	0x2000000c
 80035e8:	03d09000 	.word	0x03d09000
 80035ec:	4a742400 	.word	0x4a742400
 80035f0:	017d7840 	.word	0x017d7840
 80035f4:	4bbebc20 	.word	0x4bbebc20
 80035f8:	4c742400 	.word	0x4c742400

080035fc <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80035fc:	4a3b      	ldr	r2, [pc, #236]	; (80036ec <RCCEx_PLL2_Config+0xf0>)
{
 80035fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003600:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	2b03      	cmp	r3, #3
 8003608:	d067      	beq.n	80036da <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800360a:	6813      	ldr	r3, [r2, #0]
 800360c:	460f      	mov	r7, r1
 800360e:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003610:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8003612:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003616:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003618:	f7fc fec2 	bl	80003a0 <HAL_GetTick>
 800361c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800361e:	e004      	b.n	800362a <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003620:	f7fc febe 	bl	80003a0 <HAL_GetTick>
 8003624:	1b80      	subs	r0, r0, r6
 8003626:	2802      	cmp	r0, #2
 8003628:	d859      	bhi.n	80036de <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	011a      	lsls	r2, r3, #4
 800362e:	d4f7      	bmi.n	8003620 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003632:	682a      	ldr	r2, [r5, #0]
 8003634:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003638:	492d      	ldr	r1, [pc, #180]	; (80036f0 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800363a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800363e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003640:	686e      	ldr	r6, [r5, #4]
 8003642:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8003646:	3e01      	subs	r6, #1
 8003648:	1e50      	subs	r0, r2, #1
 800364a:	3b01      	subs	r3, #1
 800364c:	692a      	ldr	r2, [r5, #16]
 800364e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8003652:	025b      	lsls	r3, r3, #9
 8003654:	0400      	lsls	r0, r0, #16
 8003656:	3a01      	subs	r2, #1
 8003658:	b29b      	uxth	r3, r3
 800365a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800365e:	0612      	lsls	r2, r2, #24
 8003660:	4303      	orrs	r3, r0
 8003662:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003666:	4333      	orrs	r3, r6
 8003668:	4313      	orrs	r3, r2
 800366a:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800366c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800366e:	696a      	ldr	r2, [r5, #20]
 8003670:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003674:	4313      	orrs	r3, r2
 8003676:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003678:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800367a:	69aa      	ldr	r2, [r5, #24]
 800367c:	f023 0320 	bic.w	r3, r3, #32
 8003680:	4313      	orrs	r3, r2
 8003682:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003684:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003686:	f023 0310 	bic.w	r3, r3, #16
 800368a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800368c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800368e:	69eb      	ldr	r3, [r5, #28]
 8003690:	4011      	ands	r1, r2
 8003692:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003696:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003698:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800369a:	f043 0310 	orr.w	r3, r3, #16
 800369e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80036a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80036a2:	b1f7      	cbz	r7, 80036e2 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80036a4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80036a6:	bf0c      	ite	eq
 80036a8:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80036ac:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80036b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80036b2:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <RCCEx_PLL2_Config+0xf0>)
 80036b4:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036b6:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 80036b8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036bc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80036be:	f7fc fe6f 	bl	80003a0 <HAL_GetTick>
 80036c2:	4605      	mov	r5, r0
 80036c4:	e004      	b.n	80036d0 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80036c6:	f7fc fe6b 	bl	80003a0 <HAL_GetTick>
 80036ca:	1b40      	subs	r0, r0, r5
 80036cc:	2802      	cmp	r0, #2
 80036ce:	d806      	bhi.n	80036de <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	d5f7      	bpl.n	80036c6 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 80036d6:	2000      	movs	r0, #0
}
 80036d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80036da:	2001      	movs	r0, #1
}
 80036dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80036de:	2003      	movs	r0, #3
}
 80036e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80036e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036e8:	e7e3      	b.n	80036b2 <RCCEx_PLL2_Config+0xb6>
 80036ea:	bf00      	nop
 80036ec:	58024400 	.word	0x58024400
 80036f0:	ffff0007 	.word	0xffff0007

080036f4 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036f4:	4a3b      	ldr	r2, [pc, #236]	; (80037e4 <RCCEx_PLL3_Config+0xf0>)
{
 80036f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d067      	beq.n	80037d2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	460f      	mov	r7, r1
 8003706:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003708:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003710:	f7fc fe46 	bl	80003a0 <HAL_GetTick>
 8003714:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003716:	e004      	b.n	8003722 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003718:	f7fc fe42 	bl	80003a0 <HAL_GetTick>
 800371c:	1b80      	subs	r0, r0, r6
 800371e:	2802      	cmp	r0, #2
 8003720:	d859      	bhi.n	80037d6 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	009a      	lsls	r2, r3, #2
 8003726:	d4f7      	bmi.n	8003718 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800372a:	682a      	ldr	r2, [r5, #0]
 800372c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003730:	492d      	ldr	r1, [pc, #180]	; (80037e8 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003732:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003736:	62a3      	str	r3, [r4, #40]	; 0x28
 8003738:	686e      	ldr	r6, [r5, #4]
 800373a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800373e:	3e01      	subs	r6, #1
 8003740:	1e50      	subs	r0, r2, #1
 8003742:	3b01      	subs	r3, #1
 8003744:	692a      	ldr	r2, [r5, #16]
 8003746:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800374a:	025b      	lsls	r3, r3, #9
 800374c:	0400      	lsls	r0, r0, #16
 800374e:	3a01      	subs	r2, #1
 8003750:	b29b      	uxth	r3, r3
 8003752:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8003756:	0612      	lsls	r2, r2, #24
 8003758:	4303      	orrs	r3, r0
 800375a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800375e:	4333      	orrs	r3, r6
 8003760:	4313      	orrs	r3, r2
 8003762:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003764:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003766:	696a      	ldr	r2, [r5, #20]
 8003768:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800376c:	4313      	orrs	r3, r2
 800376e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003770:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003772:	69aa      	ldr	r2, [r5, #24]
 8003774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003778:	4313      	orrs	r3, r2
 800377a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800377c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800377e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003782:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003784:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003786:	69eb      	ldr	r3, [r5, #28]
 8003788:	4011      	ands	r1, r2
 800378a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800378e:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003796:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003798:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800379a:	b1f7      	cbz	r7, 80037da <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800379c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800379e:	bf0c      	ite	eq
 80037a0:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80037a4:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80037a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80037aa:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <RCCEx_PLL3_Config+0xf0>)
 80037ac:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037ae:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 80037b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037b4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80037b6:	f7fc fdf3 	bl	80003a0 <HAL_GetTick>
 80037ba:	4605      	mov	r5, r0
 80037bc:	e004      	b.n	80037c8 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80037be:	f7fc fdef 	bl	80003a0 <HAL_GetTick>
 80037c2:	1b40      	subs	r0, r0, r5
 80037c4:	2802      	cmp	r0, #2
 80037c6:	d806      	bhi.n	80037d6 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	d5f7      	bpl.n	80037be <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 80037ce:	2000      	movs	r0, #0
}
 80037d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80037d2:	2001      	movs	r0, #1
}
 80037d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80037d6:	2003      	movs	r0, #3
}
 80037d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80037da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037e0:	e7e3      	b.n	80037aa <RCCEx_PLL3_Config+0xb6>
 80037e2:	bf00      	nop
 80037e4:	58024400 	.word	0x58024400
 80037e8:	ffff0007 	.word	0xffff0007

080037ec <HAL_RCCEx_PeriphCLKConfig>:
{
 80037ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037f0:	6803      	ldr	r3, [r0, #0]
{
 80037f2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037f4:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 80037f8:	d016      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80037fa:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80037fc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003800:	f000 8450 	beq.w	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003804:	f240 851a 	bls.w	800423c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003808:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800380c:	f000 848a 	beq.w	8004124 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003810:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8003814:	f040 8538 	bne.w	8004288 <HAL_RCCEx_PeriphCLKConfig+0xa9c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003818:	499d      	ldr	r1, [pc, #628]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800381a:	2600      	movs	r6, #0
 800381c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800381e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003822:	431a      	orrs	r2, r3
 8003824:	650a      	str	r2, [r1, #80]	; 0x50
 8003826:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003828:	05dd      	lsls	r5, r3, #23
 800382a:	d50a      	bpl.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 800382c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800382e:	2a04      	cmp	r2, #4
 8003830:	d806      	bhi.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003832:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003836:	03eb      	.short	0x03eb
 8003838:	03da03f2 	.word	0x03da03f2
 800383c:	03a703a7 	.word	0x03a703a7
      ret = HAL_ERROR;
 8003840:	2601      	movs	r6, #1
 8003842:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003844:	0598      	lsls	r0, r3, #22
 8003846:	d515      	bpl.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003848:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800384a:	2a80      	cmp	r2, #128	; 0x80
 800384c:	f000 8449 	beq.w	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8003850:	f200 84dd 	bhi.w	800420e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003854:	2a00      	cmp	r2, #0
 8003856:	f000 8457 	beq.w	8004108 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800385a:	2a40      	cmp	r2, #64	; 0x40
 800385c:	f040 84de 	bne.w	800421c <HAL_RCCEx_PeriphCLKConfig+0xa30>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003860:	2100      	movs	r1, #0
 8003862:	1d20      	adds	r0, r4, #4
 8003864:	f7ff feca 	bl	80035fc <RCCEx_PLL2_Config>
 8003868:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800386a:	2d00      	cmp	r5, #0
 800386c:	f000 8442 	beq.w	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003874:	0559      	lsls	r1, r3, #21
 8003876:	d518      	bpl.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003878:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800387c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003880:	f000 841b 	beq.w	80040ba <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8003884:	f200 84ef 	bhi.w	8004266 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003888:	2a00      	cmp	r2, #0
 800388a:	f000 8451 	beq.w	8004130 <HAL_RCCEx_PeriphCLKConfig+0x944>
 800388e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003892:	f040 84f0 	bne.w	8004276 <HAL_RCCEx_PeriphCLKConfig+0xa8a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003896:	2100      	movs	r1, #0
 8003898:	1d20      	adds	r0, r4, #4
 800389a:	f7ff feaf 	bl	80035fc <RCCEx_PLL2_Config>
 800389e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80038a0:	2d00      	cmp	r5, #0
 80038a2:	f000 8413 	beq.w	80040cc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038aa:	051a      	lsls	r2, r3, #20
 80038ac:	d518      	bpl.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 80038ae:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80038b2:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80038b6:	f000 83ce 	beq.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 80038ba:	f200 84c8 	bhi.w	800424e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80038be:	2a00      	cmp	r2, #0
 80038c0:	f000 8429 	beq.w	8004116 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 80038c4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80038c8:	f040 84c9 	bne.w	800425e <HAL_RCCEx_PeriphCLKConfig+0xa72>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038cc:	2100      	movs	r1, #0
 80038ce:	1d20      	adds	r0, r4, #4
 80038d0:	f7ff fe94 	bl	80035fc <RCCEx_PLL2_Config>
 80038d4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80038d6:	2d00      	cmp	r5, #0
 80038d8:	f000 83c6 	beq.w	8004068 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038e0:	019f      	lsls	r7, r3, #6
 80038e2:	d50d      	bpl.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x114>
    switch(PeriphClkInit->QspiClockSelection)
 80038e4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80038e6:	2a10      	cmp	r2, #16
 80038e8:	f000 8338 	beq.w	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x770>
 80038ec:	f240 84c7 	bls.w	800427e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80038f0:	2a20      	cmp	r2, #32
 80038f2:	f000 836a 	beq.w	8003fca <HAL_RCCEx_PeriphCLKConfig+0x7de>
 80038f6:	2a30      	cmp	r2, #48	; 0x30
 80038f8:	f000 8335 	beq.w	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = HAL_ERROR;
 80038fc:	2601      	movs	r6, #1
 80038fe:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003900:	04d8      	lsls	r0, r3, #19
 8003902:	d517      	bpl.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003904:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003906:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800390a:	f000 83b9 	beq.w	8004080 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800390e:	f200 8489 	bhi.w	8004224 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8003912:	2a00      	cmp	r2, #0
 8003914:	f000 8413 	beq.w	800413e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003918:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800391c:	f040 848a 	bne.w	8004234 <HAL_RCCEx_PeriphCLKConfig+0xa48>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003920:	2100      	movs	r1, #0
 8003922:	1d20      	adds	r0, r4, #4
 8003924:	f7ff fe6a 	bl	80035fc <RCCEx_PLL2_Config>
 8003928:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800392a:	2d00      	cmp	r5, #0
 800392c:	f000 83b1 	beq.w	8004092 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003934:	0499      	lsls	r1, r3, #18
 8003936:	d51b      	bpl.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003938:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800393a:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800393e:	f000 8331 	beq.w	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8003942:	f200 8454 	bhi.w	80041ee <HAL_RCCEx_PeriphCLKConfig+0xa02>
 8003946:	b142      	cbz	r2, 800395a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003948:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800394c:	f040 845b 	bne.w	8004206 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003950:	2101      	movs	r1, #1
 8003952:	1d20      	adds	r0, r4, #4
 8003954:	f7ff fe52 	bl	80035fc <RCCEx_PLL2_Config>
 8003958:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800395a:	2d00      	cmp	r5, #0
 800395c:	f040 8288 	bne.w	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x684>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003960:	4a4b      	ldr	r2, [pc, #300]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003962:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003964:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003966:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800396a:	430b      	orrs	r3, r1
 800396c:	6513      	str	r3, [r2, #80]	; 0x50
 800396e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003970:	045a      	lsls	r2, r3, #17
 8003972:	d51d      	bpl.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003974:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8003978:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800397c:	f000 82e4 	beq.w	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8003980:	f200 83f9 	bhi.w	8004176 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003984:	b142      	cbz	r2, 8003998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003986:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800398a:	f040 8400 	bne.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800398e:	2101      	movs	r1, #1
 8003990:	1d20      	adds	r0, r4, #4
 8003992:	f7ff fe33 	bl	80035fc <RCCEx_PLL2_Config>
 8003996:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003998:	2d00      	cmp	r5, #0
 800399a:	f040 8266 	bne.w	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800399e:	4a3c      	ldr	r2, [pc, #240]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80039a0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80039a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80039a6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80039aa:	430b      	orrs	r3, r1
 80039ac:	6593      	str	r3, [r2, #88]	; 0x58
 80039ae:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039b0:	041f      	lsls	r7, r3, #16
 80039b2:	d50d      	bpl.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->FdcanClockSelection)
 80039b4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80039b6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80039ba:	f000 82fd 	beq.w	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80039be:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80039c2:	f000 8202 	beq.w	8003dca <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80039c6:	2a00      	cmp	r2, #0
 80039c8:	f000 8204 	beq.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      ret = HAL_ERROR;
 80039cc:	2601      	movs	r6, #1
 80039ce:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039d0:	01d8      	lsls	r0, r3, #7
 80039d2:	d50a      	bpl.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->FmcClockSelection)
 80039d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80039d6:	2a03      	cmp	r2, #3
 80039d8:	d805      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80039da:	e8df f012 	tbh	[pc, r2, lsl #1]
 80039de:	018c      	.short	0x018c
 80039e0:	01870276 	.word	0x01870276
 80039e4:	018c      	.short	0x018c
      ret = HAL_ERROR;
 80039e6:	2601      	movs	r6, #1
 80039e8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039ea:	0259      	lsls	r1, r3, #9
 80039ec:	f100 8191 	bmi.w	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x526>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039f0:	07df      	lsls	r7, r3, #31
 80039f2:	d52f      	bpl.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Usart16ClockSelection)
 80039f4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80039f6:	2a28      	cmp	r2, #40	; 0x28
 80039f8:	d82a      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80039fa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80039fe:	01db      	.short	0x01db
 8003a00:	00290029 	.word	0x00290029
 8003a04:	00290029 	.word	0x00290029
 8003a08:	00290029 	.word	0x00290029
 8003a0c:	02810029 	.word	0x02810029
 8003a10:	00290029 	.word	0x00290029
 8003a14:	00290029 	.word	0x00290029
 8003a18:	00290029 	.word	0x00290029
 8003a1c:	01d50029 	.word	0x01d50029
 8003a20:	00290029 	.word	0x00290029
 8003a24:	00290029 	.word	0x00290029
 8003a28:	00290029 	.word	0x00290029
 8003a2c:	01db0029 	.word	0x01db0029
 8003a30:	00290029 	.word	0x00290029
 8003a34:	00290029 	.word	0x00290029
 8003a38:	00290029 	.word	0x00290029
 8003a3c:	01db0029 	.word	0x01db0029
 8003a40:	00290029 	.word	0x00290029
 8003a44:	00290029 	.word	0x00290029
 8003a48:	00290029 	.word	0x00290029
 8003a4c:	01db0029 	.word	0x01db0029
      ret = HAL_ERROR;
 8003a50:	2601      	movs	r6, #1
 8003a52:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a54:	0798      	lsls	r0, r3, #30
 8003a56:	d50c      	bpl.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003a58:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003a5a:	2a05      	cmp	r2, #5
 8003a5c:	d807      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x282>
 8003a5e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003a62:	0139      	.short	0x0139
 8003a64:	01330246 	.word	0x01330246
 8003a68:	01390139 	.word	0x01390139
 8003a6c:	0139      	.short	0x0139
      ret = HAL_ERROR;
 8003a6e:	2601      	movs	r6, #1
 8003a70:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a72:	0759      	lsls	r1, r3, #29
 8003a74:	d510      	bpl.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003a76:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003a7a:	2a05      	cmp	r2, #5
 8003a7c:	d80a      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a7e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003a82:	0116      	.short	0x0116
 8003a84:	0110022d 	.word	0x0110022d
 8003a88:	01160116 	.word	0x01160116
 8003a8c:	0116      	.short	0x0116
 8003a8e:	bf00      	nop
 8003a90:	58024400 	.word	0x58024400
      ret = HAL_ERROR;
 8003a94:	2601      	movs	r6, #1
 8003a96:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a98:	069a      	lsls	r2, r3, #26
 8003a9a:	d51d      	bpl.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a9c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003aa0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003aa4:	f000 8264 	beq.w	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x784>
 8003aa8:	f200 8383 	bhi.w	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 8003aac:	b142      	cbz	r2, 8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003aae:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003ab2:	f040 838a 	bne.w	80041ca <HAL_RCCEx_PeriphCLKConfig+0x9de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	1d20      	adds	r0, r4, #4
 8003aba:	f7ff fd9f 	bl	80035fc <RCCEx_PLL2_Config>
 8003abe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ac0:	2d00      	cmp	r5, #0
 8003ac2:	f040 81cf 	bne.w	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x678>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ac6:	4ab6      	ldr	r2, [pc, #728]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003ac8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003acc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003ace:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	6553      	str	r3, [r2, #84]	; 0x54
 8003ad6:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ad8:	065f      	lsls	r7, r3, #25
 8003ada:	d51d      	bpl.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003adc:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8003ae0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003ae4:	f000 8254 	beq.w	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8003ae8:	f200 8372 	bhi.w	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
 8003aec:	b142      	cbz	r2, 8003b00 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003aee:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003af2:	f040 8379 	bne.w	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003af6:	2100      	movs	r1, #0
 8003af8:	1d20      	adds	r0, r4, #4
 8003afa:	f7ff fd7f 	bl	80035fc <RCCEx_PLL2_Config>
 8003afe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b00:	2d00      	cmp	r5, #0
 8003b02:	f040 81bb 	bne.w	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x690>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b06:	4aa6      	ldr	r2, [pc, #664]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b08:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003b0c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003b0e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003b12:	430b      	orrs	r3, r1
 8003b14:	6593      	str	r3, [r2, #88]	; 0x58
 8003b16:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b18:	0618      	lsls	r0, r3, #24
 8003b1a:	d51d      	bpl.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003b1c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8003b20:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003b24:	f000 8206 	beq.w	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003b28:	f200 8334 	bhi.w	8004194 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8003b2c:	b142      	cbz	r2, 8003b40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003b2e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003b32:	f040 833b 	bne.w	80041ac <HAL_RCCEx_PeriphCLKConfig+0x9c0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b36:	2100      	movs	r1, #0
 8003b38:	1d20      	adds	r0, r4, #4
 8003b3a:	f7ff fd5f 	bl	80035fc <RCCEx_PLL2_Config>
 8003b3e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b40:	2d00      	cmp	r5, #0
 8003b42:	f040 819e 	bne.w	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x696>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b46:	4a96      	ldr	r2, [pc, #600]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b48:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8003b4c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003b4e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003b52:	430b      	orrs	r3, r1
 8003b54:	6593      	str	r3, [r2, #88]	; 0x58
 8003b56:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b58:	0719      	lsls	r1, r3, #28
 8003b5a:	d50c      	bpl.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003b5c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003b60:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003b64:	f000 825f 	beq.w	8004026 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b68:	498d      	ldr	r1, [pc, #564]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b6a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003b6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b70:	4313      	orrs	r3, r2
 8003b72:	654b      	str	r3, [r1, #84]	; 0x54
 8003b74:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b76:	06da      	lsls	r2, r3, #27
 8003b78:	d50c      	bpl.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003b7a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8003b7e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003b82:	f000 825c 	beq.w	800403e <HAL_RCCEx_PeriphCLKConfig+0x852>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b86:	4986      	ldr	r1, [pc, #536]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b88:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8003b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	658b      	str	r3, [r1, #88]	; 0x58
 8003b92:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b94:	031f      	lsls	r7, r3, #12
 8003b96:	d50e      	bpl.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    switch(PeriphClkInit->AdcClockSelection)
 8003b98:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003b9c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003ba0:	f000 8123 	beq.w	8003dea <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8003ba4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8003ba8:	f000 8125 	beq.w	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 8003bac:	2900      	cmp	r1, #0
 8003bae:	f000 82cd 	beq.w	800414c <HAL_RCCEx_PeriphCLKConfig+0x960>
      ret = HAL_ERROR;
 8003bb2:	2601      	movs	r6, #1
 8003bb4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bb6:	0358      	lsls	r0, r3, #13
 8003bb8:	d50f      	bpl.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    switch(PeriphClkInit->UsbClockSelection)
 8003bba:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003bbe:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003bc2:	f000 8124 	beq.w	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x622>
 8003bc6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8003bca:	f000 8126 	beq.w	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8003bce:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003bd2:	f000 82c3 	beq.w	800415c <HAL_RCCEx_PeriphCLKConfig+0x970>
      ret = HAL_ERROR;
 8003bd6:	2601      	movs	r6, #1
 8003bd8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003bda:	03d9      	lsls	r1, r3, #15
 8003bdc:	d511      	bpl.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch(PeriphClkInit->SdmmcClockSelection)
 8003bde:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003be0:	2a00      	cmp	r2, #0
 8003be2:	f000 8161 	beq.w	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003be6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003bea:	f040 8150 	bne.w	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x6a2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bee:	2102      	movs	r1, #2
 8003bf0:	1d20      	adds	r0, r4, #4
 8003bf2:	f7ff fd03 	bl	80035fc <RCCEx_PLL2_Config>
 8003bf6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003bf8:	2d00      	cmp	r5, #0
 8003bfa:	f000 815d 	beq.w	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c02:	009a      	lsls	r2, r3, #2
 8003c04:	f100 8114 	bmi.w	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x644>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c08:	039f      	lsls	r7, r3, #14
 8003c0a:	d439      	bmi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003c0c:	1c30      	adds	r0, r6, #0
 8003c0e:	bf18      	it	ne
 8003c10:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c12:	02de      	lsls	r6, r3, #11
 8003c14:	d507      	bpl.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c16:	4a62      	ldr	r2, [pc, #392]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c18:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003c1a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6513      	str	r3, [r2, #80]	; 0x50
 8003c24:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c26:	00dd      	lsls	r5, r3, #3
 8003c28:	d508      	bpl.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x450>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c2a:	4a5d      	ldr	r2, [pc, #372]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c2c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8003c30:	6913      	ldr	r3, [r2, #16]
 8003c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c36:	430b      	orrs	r3, r1
 8003c38:	6113      	str	r3, [r2, #16]
 8003c3a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c3c:	0299      	lsls	r1, r3, #10
 8003c3e:	d507      	bpl.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x464>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c40:	4a57      	ldr	r2, [pc, #348]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c42:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003c44:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	6513      	str	r3, [r2, #80]	; 0x50
 8003c4e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c50:	005a      	lsls	r2, r3, #1
 8003c52:	d50a      	bpl.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x47e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c54:	4b52      	ldr	r3, [pc, #328]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c5c:	611a      	str	r2, [r3, #16]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8003c64:	430a      	orrs	r2, r1
 8003c66:	611a      	str	r2, [r3, #16]
 8003c68:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	da06      	bge.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x490>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c6e:	4a4c      	ldr	r2, [pc, #304]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c70:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003c72:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003c74:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8003c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8003c80:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003c82:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003c86:	f000 8105 	beq.w	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8003c8a:	f240 8142 	bls.w	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003c8e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003c92:	f000 8104 	beq.w	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003c96:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003c9a:	f000 8100 	beq.w	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	e7b7      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ca8:	f7ff fd24 	bl	80036f4 <RCCEx_PLL3_Config>
 8003cac:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003cae:	2d00      	cmp	r5, #0
 8003cb0:	f040 80d5 	bne.w	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x672>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cb4:	4a3a      	ldr	r2, [pc, #232]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003cb6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003cba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003cbc:	f023 0307 	bic.w	r3, r3, #7
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	e6e7      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cc8:	2101      	movs	r1, #1
 8003cca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003cce:	f7ff fd11 	bl	80036f4 <RCCEx_PLL3_Config>
 8003cd2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003cd4:	2d00      	cmp	r5, #0
 8003cd6:	f040 80bf 	bne.w	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cda:	4a31      	ldr	r2, [pc, #196]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003cdc:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003cde:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003ce0:	f023 0307 	bic.w	r3, r3, #7
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6553      	str	r3, [r2, #84]	; 0x54
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	e6c2      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003cec:	2102      	movs	r1, #2
 8003cee:	1d20      	adds	r0, r4, #4
 8003cf0:	f7ff fc84 	bl	80035fc <RCCEx_PLL2_Config>
 8003cf4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003cf6:	2d00      	cmp	r5, #0
 8003cf8:	f040 80ab 	bne.w	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cfc:	4a28      	ldr	r2, [pc, #160]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003cfe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003d00:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	430b      	orrs	r3, r1
 8003d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d0a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d0c:	0259      	lsls	r1, r3, #9
 8003d0e:	f57f ae6f 	bpl.w	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d12:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>)
 8003d14:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d16:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003d1e:	f7fc fb3f 	bl	80003a0 <HAL_GetTick>
 8003d22:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d24:	e006      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x548>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d26:	f7fc fb3b 	bl	80003a0 <HAL_GetTick>
 8003d2a:	eba0 0008 	sub.w	r0, r0, r8
 8003d2e:	2864      	cmp	r0, #100	; 0x64
 8003d30:	f200 821d 	bhi.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x982>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	05da      	lsls	r2, r3, #23
 8003d38:	d5f5      	bpl.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    if(ret == HAL_OK)
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	f040 82c5 	bne.w	80042ca <HAL_RCCEx_PeriphCLKConfig+0xade>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003d42:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003d46:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d48:	4051      	eors	r1, r2
 8003d4a:	f411 7f40 	tst.w	r1, #768	; 0x300
 8003d4e:	d00d      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x580>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d52:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d58:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003d5c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d5e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d60:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003d64:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8003d66:	671a      	str	r2, [r3, #112]	; 0x70
 8003d68:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d6c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003d70:	f000 828d 	beq.w	800428e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d74:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8003d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d7c:	f000 829b 	beq.w	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003d80:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003d82:	6913      	ldr	r3, [r2, #16]
 8003d84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d88:	6113      	str	r3, [r2, #16]
 8003d8a:	4a05      	ldr	r2, [pc, #20]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003d8c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003d90:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d96:	430b      	orrs	r3, r1
 8003d98:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	e628      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003d9e:	bf00      	nop
 8003da0:	58024400 	.word	0x58024400
 8003da4:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003da8:	2101      	movs	r1, #1
 8003daa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003dae:	f7ff fca1 	bl	80036f4 <RCCEx_PLL3_Config>
 8003db2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003db4:	2d00      	cmp	r5, #0
 8003db6:	d149      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x660>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003db8:	4ab0      	ldr	r2, [pc, #704]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003dba:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003dbc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003dbe:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	6553      	str	r3, [r2, #84]	; 0x54
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	e644      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x268>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dca:	2101      	movs	r1, #1
 8003dcc:	1d20      	adds	r0, r4, #4
 8003dce:	f7ff fc15 	bl	80035fc <RCCEx_PLL2_Config>
 8003dd2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003dd4:	2d00      	cmp	r5, #0
 8003dd6:	d14e      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dd8:	4aa8      	ldr	r2, [pc, #672]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003dda:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003ddc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003dde:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003de2:	430b      	orrs	r3, r1
 8003de4:	6513      	str	r3, [r2, #80]	; 0x50
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	e5f2      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dea:	2102      	movs	r1, #2
 8003dec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003df0:	f7ff fc80 	bl	80036f4 <RCCEx_PLL3_Config>
 8003df4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003df6:	2d00      	cmp	r5, #0
 8003df8:	d146      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x69c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dfa:	4aa0      	ldr	r2, [pc, #640]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003dfc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003e00:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003e02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e06:	430b      	orrs	r3, r1
 8003e08:	6593      	str	r3, [r2, #88]	; 0x58
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	e6d3      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e0e:	2101      	movs	r1, #1
 8003e10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e14:	f7ff fc6e 	bl	80036f4 <RCCEx_PLL3_Config>
 8003e18:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003e1a:	b9a5      	cbnz	r5, 8003e46 <HAL_RCCEx_PeriphCLKConfig+0x65a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e1c:	4a97      	ldr	r2, [pc, #604]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003e1e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003e22:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003e24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6553      	str	r3, [r2, #84]	; 0x54
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	e6d4      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003e30:	2102      	movs	r1, #2
 8003e32:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e36:	f7ff fc5d 	bl	80036f4 <RCCEx_PLL3_Config>
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	f43f aee3 	beq.w	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      status=HAL_ERROR;
 8003e42:	2601      	movs	r6, #1
 8003e44:	e6e0      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e46:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e48:	462e      	mov	r6, r5
 8003e4a:	e6c6      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8003e4c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e4e:	462e      	mov	r6, r5
 8003e50:	e600      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003e52:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e54:	462e      	mov	r6, r5
 8003e56:	e5c8      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003e58:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e5a:	462e      	mov	r6, r5
 8003e5c:	e609      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003e5e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e60:	462e      	mov	r6, r5
 8003e62:	e619      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003e64:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e66:	462e      	mov	r6, r5
 8003e68:	e636      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8003e6a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e6c:	462e      	mov	r6, r5
 8003e6e:	e59f      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8003e70:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e72:	462e      	mov	r6, r5
 8003e74:	e57c      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8003e76:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e78:	462e      	mov	r6, r5
 8003e7a:	e5a9      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003e7c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e7e:	462e      	mov	r6, r5
 8003e80:	e64a      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003e82:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e84:	462e      	mov	r6, r5
 8003e86:	e667      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003e88:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003e8a:	462e      	mov	r6, r5
 8003e8c:	e693      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = HAL_ERROR;
 8003e8e:	2601      	movs	r6, #1
 8003e90:	4635      	mov	r5, r6
 8003e92:	e6b6      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e94:	4a79      	ldr	r2, [pc, #484]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003e96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003e9e:	2d00      	cmp	r5, #0
 8003ea0:	d03c      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x730>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	e6b4      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x426>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea8:	4a74      	ldr	r2, [pc, #464]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003eaa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	f47f aea3 	bne.w	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x412>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003eb8:	4a70      	ldr	r2, [pc, #448]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003eba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003ebc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	e69b      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eca:	4a6c      	ldr	r2, [pc, #432]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003ecc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003ed4:	2d00      	cmp	r5, #0
 8003ed6:	f43f af11 	beq.w	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003eda:	e7ba      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x666>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003edc:	2101      	movs	r1, #1
 8003ede:	1d20      	adds	r0, r4, #4
 8003ee0:	f7ff fb8c 	bl	80035fc <RCCEx_PLL2_Config>
 8003ee4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ee6:	2d00      	cmp	r5, #0
 8003ee8:	f43f aee4 	beq.w	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8003eec:	e7b7      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x672>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eee:	2101      	movs	r1, #1
 8003ef0:	1d20      	adds	r0, r4, #4
 8003ef2:	f7ff fb83 	bl	80035fc <RCCEx_PLL2_Config>
 8003ef6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ef8:	2d00      	cmp	r5, #0
 8003efa:	f43f aeee 	beq.w	8003cda <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003efe:	e7ab      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f00:	2101      	movs	r1, #1
 8003f02:	1d20      	adds	r0, r4, #4
 8003f04:	f7ff fb7a 	bl	80035fc <RCCEx_PLL2_Config>
 8003f08:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f0a:	2d00      	cmp	r5, #0
 8003f0c:	f43f af54 	beq.w	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003f10:	e79c      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x660>
    switch(PeriphClkInit->RngClockSelection)
 8003f12:	2a00      	cmp	r2, #0
 8003f14:	f47f aec3 	bne.w	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
    if(ret == HAL_OK)
 8003f18:	2d00      	cmp	r5, #0
 8003f1a:	d1c2      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f1c:	4a57      	ldr	r2, [pc, #348]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003f1e:	1c30      	adds	r0, r6, #0
 8003f20:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003f22:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f24:	bf18      	it	ne
 8003f26:	2001      	movne	r0, #1
 8003f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	6553      	str	r3, [r2, #84]	; 0x54
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	e66e      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f34:	2102      	movs	r1, #2
 8003f36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f3a:	f7ff fbdb 	bl	80036f4 <RCCEx_PLL3_Config>
 8003f3e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f40:	2d00      	cmp	r5, #0
 8003f42:	f43f ae00 	beq.w	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003f46:	e79c      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x696>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f48:	2101      	movs	r1, #1
 8003f4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f4e:	f7ff fbd1 	bl	80036f4 <RCCEx_PLL3_Config>
 8003f52:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f54:	2d00      	cmp	r5, #0
 8003f56:	f43f ad22 	beq.w	800399e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003f5a:	e786      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f5c:	4a47      	ldr	r2, [pc, #284]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003f5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f64:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003f66:	2d00      	cmp	r5, #0
 8003f68:	d036      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	462e      	mov	r6, r5
 8003f6e:	e4c7      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f70:	2102      	movs	r1, #2
 8003f72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f76:	f7ff fbbd 	bl	80036f4 <RCCEx_PLL3_Config>
 8003f7a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f7c:	2d00      	cmp	r5, #0
 8003f7e:	f43f ada2 	beq.w	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003f82:	e76f      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f84:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	d037      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	462e      	mov	r6, r5
 8003f8e:	e459      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x58>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f90:	2102      	movs	r1, #2
 8003f92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f96:	f7ff fbad 	bl	80036f4 <RCCEx_PLL3_Config>
 8003f9a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f9c:	2d00      	cmp	r5, #0
 8003f9e:	f43f adb2 	beq.w	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8003fa2:	e76b      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x690>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003faa:	f7ff fba3 	bl	80036f4 <RCCEx_PLL3_Config>
 8003fae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003fb0:	2d00      	cmp	r5, #0
 8003fb2:	f43f acd5 	beq.w	8003960 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003fb6:	e75b      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x684>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb8:	4a30      	ldr	r2, [pc, #192]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003fba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003fc2:	2d00      	cmp	r5, #0
 8003fc4:	f43f af08 	beq.w	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8003fc8:	e755      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fca:	2102      	movs	r1, #2
 8003fcc:	1d20      	adds	r0, r4, #4
 8003fce:	f7ff fb15 	bl	80035fc <RCCEx_PLL2_Config>
 8003fd2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003fd4:	2d00      	cmp	r5, #0
 8003fd6:	d1c8      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fd8:	4a28      	ldr	r2, [pc, #160]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003fda:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003fdc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003fde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	e48a      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fea:	2100      	movs	r1, #0
 8003fec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ff0:	f7ff fb80 	bl	80036f4 <RCCEx_PLL3_Config>
 8003ff4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ff6:	2d00      	cmp	r5, #0
 8003ff8:	d1c7      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ffa:	4a20      	ldr	r2, [pc, #128]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8003ffc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003ffe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004000:	f023 0307 	bic.w	r3, r3, #7
 8004004:	430b      	orrs	r3, r1
 8004006:	6513      	str	r3, [r2, #80]	; 0x50
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	e41b      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800400c:	4a1b      	ldr	r2, [pc, #108]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
      break;
 800400e:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004010:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004016:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004018:	e7b5      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x79a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800401a:	2100      	movs	r1, #0
 800401c:	1d20      	adds	r0, r4, #4
 800401e:	f7ff faed 	bl	80035fc <RCCEx_PLL2_Config>
 8004022:	4605      	mov	r5, r0
      break;
 8004024:	e7af      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x79a>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004026:	2102      	movs	r1, #2
 8004028:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800402c:	f7ff fb62 	bl	80036f4 <RCCEx_PLL3_Config>
 8004030:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004034:	2800      	cmp	r0, #0
 8004036:	f43f ad97 	beq.w	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
          status = HAL_ERROR;
 800403a:	2601      	movs	r6, #1
 800403c:	e594      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800403e:	2102      	movs	r1, #2
 8004040:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004044:	f7ff fb56 	bl	80036f4 <RCCEx_PLL3_Config>
 8004048:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800404c:	2800      	cmp	r0, #0
 800404e:	f43f ad9a 	beq.w	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        status = HAL_ERROR;
 8004052:	2601      	movs	r6, #1
 8004054:	e597      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004056:	2100      	movs	r1, #0
 8004058:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800405c:	f7ff fb4a 	bl	80036f4 <RCCEx_PLL3_Config>
 8004060:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004062:	2d00      	cmp	r5, #0
 8004064:	f47f ac3a 	bne.w	80038dc <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800406a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800406e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004070:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004074:	430b      	orrs	r3, r1
 8004076:	6593      	str	r3, [r2, #88]	; 0x58
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	e431      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800407c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004080:	2100      	movs	r1, #0
 8004082:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004086:	f7ff fb35 	bl	80036f4 <RCCEx_PLL3_Config>
 800408a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800408c:	2d00      	cmp	r5, #0
 800408e:	f47f ac4f 	bne.w	8003930 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004092:	4a90      	ldr	r2, [pc, #576]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8004094:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004096:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409c:	430b      	orrs	r3, r1
 800409e:	6513      	str	r3, [r2, #80]	; 0x50
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	e447      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x148>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040a4:	2102      	movs	r1, #2
 80040a6:	3004      	adds	r0, #4
 80040a8:	f7ff faa8 	bl	80035fc <RCCEx_PLL2_Config>
 80040ac:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80040ae:	2e00      	cmp	r6, #0
 80040b0:	f47f abb9 	bne.w	8003826 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80040b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040b6:	f7ff bbaf 	b.w	8003818 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040ba:	2100      	movs	r1, #0
 80040bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040c0:	f7ff fb18 	bl	80036f4 <RCCEx_PLL3_Config>
 80040c4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80040c6:	2d00      	cmp	r5, #0
 80040c8:	f47f abed 	bne.w	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80040cc:	4a81      	ldr	r2, [pc, #516]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 80040ce:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80040d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80040d4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80040d8:	430b      	orrs	r3, r1
 80040da:	6593      	str	r3, [r2, #88]	; 0x58
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	f7ff bbe4 	b.w	80038aa <HAL_RCCEx_PeriphCLKConfig+0xbe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040e2:	2100      	movs	r1, #0
 80040e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040e8:	f7ff fb04 	bl	80036f4 <RCCEx_PLL3_Config>
 80040ec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	f47f abbe 	bne.w	8003870 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80040f4:	4a77      	ldr	r2, [pc, #476]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 80040f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80040f8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80040fa:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80040fe:	430b      	orrs	r3, r1
 8004100:	6513      	str	r3, [r2, #80]	; 0x50
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	f7ff bbb6 	b.w	8003874 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004108:	4a72      	ldr	r2, [pc, #456]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 800410a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800410c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004110:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004112:	f7ff bbaa 	b.w	800386a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004116:	4a6f      	ldr	r2, [pc, #444]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8004118:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800411a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004120:	f7ff bbd9 	b.w	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004124:	2102      	movs	r1, #2
 8004126:	3024      	adds	r0, #36	; 0x24
 8004128:	f7ff fae4 	bl	80036f4 <RCCEx_PLL3_Config>
 800412c:	4606      	mov	r6, r0
      break;
 800412e:	e7be      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004130:	4a68      	ldr	r2, [pc, #416]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8004132:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004138:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800413a:	f7ff bbb1 	b.w	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800413e:	4a65      	ldr	r2, [pc, #404]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8004140:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004146:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004148:	f7ff bbef 	b.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800414c:	1d20      	adds	r0, r4, #4
 800414e:	f7ff fa55 	bl	80035fc <RCCEx_PLL2_Config>
 8004152:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004154:	2d00      	cmp	r5, #0
 8004156:	f43f ae50 	beq.w	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x60e>
 800415a:	e695      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x69c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800415c:	4a5d      	ldr	r2, [pc, #372]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 800415e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004164:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004166:	2d00      	cmp	r5, #0
 8004168:	f43f ae58 	beq.w	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x630>
 800416c:	e66b      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x65a>
            ret = HAL_TIMEOUT;
 800416e:	2603      	movs	r6, #3
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	4635      	mov	r5, r6
 8004174:	e43c      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004176:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800417a:	f43f ac0d 	beq.w	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800417e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004182:	f43f ac09 	beq.w	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004186:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800418a:	f43f ac05 	beq.w	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      ret = HAL_ERROR;
 800418e:	2601      	movs	r6, #1
 8004190:	4635      	mov	r5, r6
 8004192:	e40d      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004194:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004198:	f43f acd2 	beq.w	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800419c:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 80041a0:	f43f acce 	beq.w	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80041a4:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80041a8:	f43f acca 	beq.w	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x354>
      ret = HAL_ERROR;
 80041ac:	2601      	movs	r6, #1
 80041ae:	4635      	mov	r5, r6
 80041b0:	e4d2      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80041b2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80041b6:	f43f ac83 	beq.w	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80041ba:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80041be:	f43f ac7f 	beq.w	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80041c2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80041c6:	f43f ac7b 	beq.w	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      ret = HAL_ERROR;
 80041ca:	2601      	movs	r6, #1
 80041cc:	4635      	mov	r5, r6
 80041ce:	e483      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80041d0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80041d4:	f43f ac94 	beq.w	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80041d8:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80041dc:	f43f ac90 	beq.w	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80041e0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80041e4:	f43f ac8c 	beq.w	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = HAL_ERROR;
 80041e8:	2601      	movs	r6, #1
 80041ea:	4635      	mov	r5, r6
 80041ec:	e494      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi45ClockSelection)
 80041ee:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80041f2:	f43f abb2 	beq.w	800395a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80041f6:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80041fa:	f43f abae 	beq.w	800395a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80041fe:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8004202:	f43f abaa 	beq.w	800395a <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = HAL_ERROR;
 8004206:	2601      	movs	r6, #1
 8004208:	4635      	mov	r5, r6
 800420a:	f7ff bbb1 	b.w	8003970 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Sai23ClockSelection)
 800420e:	2ac0      	cmp	r2, #192	; 0xc0
 8004210:	f43f ab2b 	beq.w	800386a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004214:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004218:	f43f ab27 	beq.w	800386a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 800421c:	2601      	movs	r6, #1
 800421e:	4635      	mov	r5, r6
 8004220:	f7ff bb28 	b.w	8003874 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004224:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8004228:	f43f ab7f 	beq.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800422c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004230:	f43f ab7b 	beq.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = HAL_ERROR;
 8004234:	2601      	movs	r6, #1
 8004236:	4635      	mov	r5, r6
 8004238:	f7ff bb7c 	b.w	8003934 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800423c:	bb22      	cbnz	r2, 8004288 <HAL_RCCEx_PeriphCLKConfig+0xa9c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423e:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 8004240:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004246:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004248:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800424a:	f7ff bae5 	b.w	8003818 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai4BClockSelection)
 800424e:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8004252:	f43f ab40 	beq.w	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8004256:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800425a:	f43f ab3c 	beq.w	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = HAL_ERROR;
 800425e:	2601      	movs	r6, #1
 8004260:	4635      	mov	r5, r6
 8004262:	f7ff bb3d 	b.w	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004266:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800426a:	f43f ab19 	beq.w	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800426e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004272:	f43f ab15 	beq.w	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = HAL_ERROR;
 8004276:	2601      	movs	r6, #1
 8004278:	4635      	mov	r5, r6
 800427a:	f7ff bb16 	b.w	80038aa <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->QspiClockSelection)
 800427e:	2a00      	cmp	r2, #0
 8004280:	f43f ae71 	beq.w	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x77a>
 8004284:	f7ff bb3a 	b.w	80038fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      ret = HAL_ERROR;
 8004288:	2601      	movs	r6, #1
 800428a:	f7ff bacd 	b.w	8003828 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        tickstart = HAL_GetTick();
 800428e:	f7fc f887 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004292:	4f10      	ldr	r7, [pc, #64]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
        tickstart = HAL_GetTick();
 8004294:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004296:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800429a:	e006      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xabe>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429c:	f7fc f880 	bl	80003a0 <HAL_GetTick>
 80042a0:	eba0 0009 	sub.w	r0, r0, r9
 80042a4:	4540      	cmp	r0, r8
 80042a6:	f63f af62 	bhi.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x982>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042ac:	079b      	lsls	r3, r3, #30
 80042ae:	d5f5      	bpl.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80042b0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80042b4:	e55e      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x588>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042b6:	4807      	ldr	r0, [pc, #28]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xae8>)
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 80042ba:	6901      	ldr	r1, [r0, #16]
 80042bc:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 80042c0:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 80042c4:	4313      	orrs	r3, r2
 80042c6:	6103      	str	r3, [r0, #16]
 80042c8:	e55f      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80042ca:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80042cc:	462e      	mov	r6, r5
 80042ce:	f7ff bb8f 	b.w	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80042d2:	bf00      	nop
 80042d4:	58024400 	.word	0x58024400
 80042d8:	00ffffcf 	.word	0x00ffffcf

080042dc <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042dc:	4a46      	ldr	r2, [pc, #280]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 80042de:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042e0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80042e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80042e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80042e6:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80042ea:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d059      	beq.n	80043a4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80042f0:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80042f4:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042f8:	f004 0403 	and.w	r4, r4, #3
 80042fc:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004300:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8004304:	2c01      	cmp	r4, #1
 8004306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800430a:	ee06 1a90 	vmov	s13, r1
 800430e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004312:	d002      	beq.n	800431a <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8004314:	d34e      	bcc.n	80043b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8004316:	2c02      	cmp	r4, #2
 8004318:	d049      	beq.n	80043ae <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800431a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80043fc <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 800431e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004322:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004328:	ee07 3a10 	vmov	s14, r3
 800432c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004330:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004334:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004338:	ee77 7a26 	vadd.f32	s15, s14, s13
 800433c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004340:	4a2d      	ldr	r2, [pc, #180]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 8004342:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004346:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004348:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800434c:	ee06 3a90 	vmov	s13, r3
 8004350:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8004354:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004356:	ee76 6a86 	vadd.f32	s13, s13, s12
 800435a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800435e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004362:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004366:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004368:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800436c:	ee06 3a90 	vmov	s13, r3
 8004370:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004374:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004378:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800437c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004380:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004384:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004386:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800438a:	ee07 3a10 	vmov	s14, r3
 800438e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004392:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004396:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800439a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800439e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80043a2:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80043a4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80043a8:	6083      	str	r3, [r0, #8]
}
 80043aa:	bc30      	pop	{r4, r5}
 80043ac:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043ae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80043b2:	e7b4      	b.n	800431e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043b4:	6813      	ldr	r3, [r2, #0]
 80043b6:	069b      	lsls	r3, r3, #26
 80043b8:	d51a      	bpl.n	80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043ba:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043bc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043c0:	4910      	ldr	r1, [pc, #64]	; (8004404 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 80043c2:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043c6:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043c8:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ce:	ee07 1a10 	vmov	s14, r1
 80043d2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80043d6:	ee07 3a10 	vmov	s14, r3
 80043da:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80043de:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80043e2:	ee76 7a05 	vadd.f32	s15, s12, s10
 80043e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ee:	e7a7      	b.n	8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043f0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004408 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 80043f4:	e793      	b.n	800431e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 80043f6:	bf00      	nop
 80043f8:	58024400 	.word	0x58024400
 80043fc:	4a742400 	.word	0x4a742400
 8004400:	4bbebc20 	.word	0x4bbebc20
 8004404:	03d09000 	.word	0x03d09000
 8004408:	4c742400 	.word	0x4c742400

0800440c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800440c:	4a46      	ldr	r2, [pc, #280]	; (8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 800440e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004410:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004412:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004414:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004416:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800441a:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800441c:	2b00      	cmp	r3, #0
 800441e:	d059      	beq.n	80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004420:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004424:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004428:	f004 0403 	and.w	r4, r4, #3
 800442c:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004430:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8004434:	2c01      	cmp	r4, #1
 8004436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800443a:	ee06 1a90 	vmov	s13, r1
 800443e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004442:	d002      	beq.n	800444a <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 8004444:	d34e      	bcc.n	80044e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8004446:	2c02      	cmp	r4, #2
 8004448:	d049      	beq.n	80044de <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800444a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800452c <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 800444e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004452:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004458:	ee07 3a10 	vmov	s14, r3
 800445c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004460:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004464:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004468:	ee77 7a26 	vadd.f32	s15, s14, s13
 800446c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004470:	4a2d      	ldr	r2, [pc, #180]	; (8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 8004472:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004476:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004478:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800447c:	ee06 3a90 	vmov	s13, r3
 8004480:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8004484:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004486:	ee76 6a86 	vadd.f32	s13, s13, s12
 800448a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800448e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004492:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004496:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004498:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800449c:	ee06 3a90 	vmov	s13, r3
 80044a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80044a4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80044a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80044ac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80044b0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80044b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80044b6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80044ba:	ee07 3a10 	vmov	s14, r3
 80044be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80044c2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80044c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80044ca:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80044ce:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80044d2:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80044d4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80044d8:	6083      	str	r3, [r0, #8]
}
 80044da:	bc30      	pop	{r4, r5}
 80044dc:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044de:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80044e2:	e7b4      	b.n	800444e <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044e4:	6813      	ldr	r3, [r2, #0]
 80044e6:	069b      	lsls	r3, r3, #26
 80044e8:	d51a      	bpl.n	8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044ea:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044ec:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044f0:	4910      	ldr	r1, [pc, #64]	; (8004534 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 80044f2:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044f8:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fe:	ee07 1a10 	vmov	s14, r1
 8004502:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004506:	ee07 3a10 	vmov	s14, r3
 800450a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800450e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004512:	ee76 7a05 	vadd.f32	s15, s12, s10
 8004516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800451a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451e:	e7a7      	b.n	8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004520:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8004524:	e793      	b.n	800444e <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8004526:	bf00      	nop
 8004528:	58024400 	.word	0x58024400
 800452c:	4a742400 	.word	0x4a742400
 8004530:	4bbebc20 	.word	0x4bbebc20
 8004534:	03d09000 	.word	0x03d09000
 8004538:	4c742400 	.word	0x4c742400

0800453c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800453c:	4a46      	ldr	r2, [pc, #280]	; (8004658 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 800453e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004540:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004542:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004544:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004546:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800454a:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 800454c:	2b00      	cmp	r3, #0
 800454e:	d059      	beq.n	8004604 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004550:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004554:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004558:	f004 0403 	and.w	r4, r4, #3
 800455c:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004560:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8004564:	2c01      	cmp	r4, #1
 8004566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800456a:	ee06 1a90 	vmov	s13, r1
 800456e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004572:	d002      	beq.n	800457a <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 8004574:	d34e      	bcc.n	8004614 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8004576:	2c02      	cmp	r4, #2
 8004578:	d049      	beq.n	800460e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800457a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800465c <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 800457e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004582:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004588:	ee07 3a10 	vmov	s14, r3
 800458c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004590:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004594:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004598:	ee77 7a26 	vadd.f32	s15, s14, s13
 800459c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80045a0:	4a2d      	ldr	r2, [pc, #180]	; (8004658 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 80045a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80045a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80045a8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80045ac:	ee06 3a90 	vmov	s13, r3
 80045b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80045b4:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80045b6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80045ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80045be:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80045c2:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80045c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80045c8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80045cc:	ee06 3a90 	vmov	s13, r3
 80045d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80045d4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80045d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80045dc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80045e0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80045e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80045e6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80045ea:	ee07 3a10 	vmov	s14, r3
 80045ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80045f2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80045f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80045fa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80045fe:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004602:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004604:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004608:	6083      	str	r3, [r0, #8]
}
 800460a:	bc30      	pop	{r4, r5}
 800460c:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800460e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004660 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8004612:	e7b4      	b.n	800457e <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004614:	6813      	ldr	r3, [r2, #0]
 8004616:	069b      	lsls	r3, r3, #26
 8004618:	d51a      	bpl.n	8004650 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800461a:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800461c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004620:	4910      	ldr	r1, [pc, #64]	; (8004664 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8004622:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004626:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004628:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800462a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462e:	ee07 1a10 	vmov	s14, r1
 8004632:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004636:	ee07 3a10 	vmov	s14, r3
 800463a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800463e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004642:	ee76 7a05 	vadd.f32	s15, s12, s10
 8004646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464e:	e7a7      	b.n	80045a0 <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004650:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004668 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8004654:	e793      	b.n	800457e <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 8004656:	bf00      	nop
 8004658:	58024400 	.word	0x58024400
 800465c:	4a742400 	.word	0x4a742400
 8004660:	4bbebc20 	.word	0x4bbebc20
 8004664:	03d09000 	.word	0x03d09000
 8004668:	4c742400 	.word	0x4c742400

0800466c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800466c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8004670:	b500      	push	{lr}
 8004672:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004674:	d02d      	beq.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004676:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800467a:	d018      	beq.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800467c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004680:	d04e      	beq.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004682:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8004686:	d037      	beq.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004688:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800468c:	f000 808b 	beq.w	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004690:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004694:	f000 80ac 	beq.w	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004698:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800469c:	f000 80b6 	beq.w	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80046a0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80046a4:	d062      	beq.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 80046a6:	2000      	movs	r0, #0
}
 80046a8:	b005      	add	sp, #20
 80046aa:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80046ae:	4a70      	ldr	r2, [pc, #448]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80046b0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80046b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 80046b6:	2b80      	cmp	r3, #128	; 0x80
 80046b8:	d043      	beq.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80046ba:	d86a      	bhi.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d039      	beq.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d1f0      	bne.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046c4:	a801      	add	r0, sp, #4
 80046c6:	f7ff fe09 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046ca:	9801      	ldr	r0, [sp, #4]
}
 80046cc:	b005      	add	sp, #20
 80046ce:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80046d2:	4b67      	ldr	r3, [pc, #412]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80046d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d6:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d8e3      	bhi.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004735 	.word	0x08004735
 80046e8:	080046c5 	.word	0x080046c5
 80046ec:	08004743 	.word	0x08004743
 80046f0:	08004719 	.word	0x08004719
 80046f4:	08004751 	.word	0x08004751
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80046f8:	4a5d      	ldr	r2, [pc, #372]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80046fa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80046fc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8004700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004704:	d01d      	beq.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004706:	d85c      	bhi.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8004708:	b1a3      	cbz	r3, 8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800470a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800470e:	d0d9      	beq.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8004710:	e7c9      	b.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8004712:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004716:	d15b      	bne.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004718:	4856      	ldr	r0, [pc, #344]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 800471a:	b005      	add	sp, #20
 800471c:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004720:	4a53      	ldr	r2, [pc, #332]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004722:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004724:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8004728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800472c:	d009      	beq.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800472e:	d8f0      	bhi.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d151      	bne.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004734:	a801      	add	r0, sp, #4
 8004736:	f7ff ff01 	bl	800453c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800473a:	9802      	ldr	r0, [sp, #8]
}
 800473c:	b005      	add	sp, #20
 800473e:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004742:	a801      	add	r0, sp, #4
 8004744:	f7ff fe62 	bl	800440c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004748:	9801      	ldr	r0, [sp, #4]
}
 800474a:	b005      	add	sp, #20
 800474c:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004750:	4b47      	ldr	r3, [pc, #284]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004754:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004758:	d019      	beq.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800475a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800475e:	d062      	beq.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 8004760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004764:	4844      	ldr	r0, [pc, #272]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8004766:	bf18      	it	ne
 8004768:	2000      	movne	r0, #0
 800476a:	e79d      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800476c:	4b40      	ldr	r3, [pc, #256]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8004774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004778:	d068      	beq.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800477a:	d95b      	bls.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 800477c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004780:	d051      	beq.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8004782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004786:	d05f      	beq.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8004788:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800478c:	d18b      	bne.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 800478e:	483b      	ldr	r0, [pc, #236]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 8004790:	e78a      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 8004792:	2bc0      	cmp	r3, #192	; 0xc0
 8004794:	d0c0      	beq.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8004796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479a:	d184      	bne.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800479c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800479e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80047a2:	d1da      	bne.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80047a4:	e7f3      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80047a6:	4a32      	ldr	r2, [pc, #200]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80047a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80047aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80047ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b2:	d0c6      	beq.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80047b4:	d815      	bhi.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0bc      	beq.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80047ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047be:	d081      	beq.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80047c0:	e771      	b.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 80047c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047c6:	d0a7      	beq.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80047c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047cc:	d0e6      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80047ce:	e76a      	b.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 80047d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047d4:	d0e2      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80047d6:	e766      	b.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047dc:	f43f af72 	beq.w	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80047e0:	e761      	b.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 80047e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047e6:	d097      	beq.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80047e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ec:	d0d6      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80047ee:	e75a      	b.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80047f0:	4a1f      	ldr	r2, [pc, #124]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80047f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80047f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fc:	d015      	beq.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80047fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004802:	d0cb      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8004804:	2b00      	cmp	r3, #0
 8004806:	f47f af4e 	bne.w	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800480a:	e75b      	b.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800480c:	4b18      	ldr	r3, [pc, #96]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800480e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8004810:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004814:	d08e      	beq.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8004816:	2b00      	cmp	r3, #0
 8004818:	f43f af45 	beq.w	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800481c:	a801      	add	r0, sp, #4
 800481e:	f7ff fd5d 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004822:	9803      	ldr	r0, [sp, #12]
          break;
 8004824:	e740      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 8004826:	4816      	ldr	r0, [pc, #88]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8004828:	e73e      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800482a:	a801      	add	r0, sp, #4
 800482c:	f7ff fdee 	bl	800440c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004830:	9803      	ldr	r0, [sp, #12]
          break;
 8004832:	e739      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8004834:	b17b      	cbz	r3, 8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800483a:	f47f af34 	bne.w	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800483e:	a801      	add	r0, sp, #4
 8004840:	f7ff fd4c 	bl	80042dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004844:	9802      	ldr	r0, [sp, #8]
          break;
 8004846:	e72f      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 8004848:	480b      	ldr	r0, [pc, #44]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 800484a:	e72d      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800484c:	a801      	add	r0, sp, #4
 800484e:	f7ff fddd 	bl	800440c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004852:	9802      	ldr	r0, [sp, #8]
          break;
 8004854:	e728      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004856:	f7fe fe29 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800485c:	4a09      	ldr	r2, [pc, #36]	; (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004864:	5cd3      	ldrb	r3, [r2, r3]
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	40d8      	lsrs	r0, r3
          break;
 800486c:	e71c      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800486e:	bf00      	nop
 8004870:	58024400 	.word	0x58024400
 8004874:	00bb8000 	.word	0x00bb8000
 8004878:	017d7840 	.word	0x017d7840
 800487c:	03d09000 	.word	0x03d09000
 8004880:	003d0900 	.word	0x003d0900
 8004884:	0800a1f0 	.word	0x0800a1f0

08004888 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004888:	b390      	cbz	r0, 80048f0 <HAL_RNG_Init+0x68>
{
 800488a:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800488c:	7a43      	ldrb	r3, [r0, #9]
 800488e:	4604      	mov	r4, r0
 8004890:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004894:	b343      	cbz	r3, 80048e8 <HAL_RNG_Init+0x60>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004896:	2302      	movs	r3, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004898:	e9d4 2100 	ldrd	r2, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800489c:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800489e:	6813      	ldr	r3, [r2, #0]
 80048a0:	f023 0320 	bic.w	r3, r3, #32
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80048a8:	6822      	ldr	r2, [r4, #0]
 80048aa:	6813      	ldr	r3, [r2, #0]
 80048ac:	f043 0304 	orr.w	r3, r3, #4
 80048b0:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	065b      	lsls	r3, r3, #25
 80048b8:	d503      	bpl.n	80048c2 <HAL_RNG_Init+0x3a>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80048ba:	2304      	movs	r3, #4
    return HAL_ERROR;
 80048bc:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 80048be:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 80048c0:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 80048c2:	f7fb fd6d 	bl	80003a0 <HAL_GetTick>
 80048c6:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80048c8:	e004      	b.n	80048d4 <HAL_RNG_Init+0x4c>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80048ca:	f7fb fd69 	bl	80003a0 <HAL_GetTick>
 80048ce:	1b40      	subs	r0, r0, r5
 80048d0:	2802      	cmp	r0, #2
 80048d2:	d80f      	bhi.n	80048f4 <HAL_RNG_Init+0x6c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f013 0304 	ands.w	r3, r3, #4
 80048dc:	d1f5      	bne.n	80048ca <HAL_RNG_Init+0x42>
  hrng->State = HAL_RNG_STATE_READY;
 80048de:	2201      	movs	r2, #1
  return HAL_OK;
 80048e0:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 80048e2:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80048e4:	60e3      	str	r3, [r4, #12]
}
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 80048e8:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 80048ea:	f002 fa33 	bl	8006d54 <HAL_RNG_MspInit>
 80048ee:	e7d2      	b.n	8004896 <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 80048f0:	2001      	movs	r0, #1
}
 80048f2:	4770      	bx	lr
      hrng->State = HAL_RNG_STATE_ERROR;
 80048f4:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80048f6:	2302      	movs	r3, #2
      return HAL_ERROR;
 80048f8:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 80048fa:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80048fc:	60e3      	str	r3, [r4, #12]
}
 80048fe:	bd38      	pop	{r3, r4, r5, pc}

08004900 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004902:	7a03      	ldrb	r3, [r0, #8]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d00b      	beq.n	8004920 <HAL_RNG_GenerateRandomNumber+0x20>
 8004908:	4604      	mov	r4, r0
 800490a:	2001      	movs	r0, #1
 800490c:	460e      	mov	r6, r1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800490e:	7a63      	ldrb	r3, [r4, #9]
  __HAL_LOCK(hrng);
 8004910:	7220      	strb	r0, [r4, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8004912:	4283      	cmp	r3, r0
 8004914:	d006      	beq.n	8004924 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004916:	2304      	movs	r3, #4
 8004918:	60e3      	str	r3, [r4, #12]
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800491a:	2300      	movs	r3, #0
 800491c:	7223      	strb	r3, [r4, #8]

  return status;
}
 800491e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng);
 8004920:	2002      	movs	r0, #2
}
 8004922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8004924:	2302      	movs	r3, #2
 8004926:	7263      	strb	r3, [r4, #9]
    tickstart = HAL_GetTick();
 8004928:	f7fb fd3a 	bl	80003a0 <HAL_GetTick>
 800492c:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800492e:	e004      	b.n	800493a <HAL_RNG_GenerateRandomNumber+0x3a>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004930:	f7fb fd36 	bl	80003a0 <HAL_GetTick>
 8004934:	1bc0      	subs	r0, r0, r7
 8004936:	2802      	cmp	r0, #2
 8004938:	d80b      	bhi.n	8004952 <HAL_RNG_GenerateRandomNumber+0x52>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800493a:	6822      	ldr	r2, [r4, #0]
 800493c:	6855      	ldr	r5, [r2, #4]
 800493e:	f015 0501 	ands.w	r5, r5, #1
 8004942:	d0f5      	beq.n	8004930 <HAL_RNG_GenerateRandomNumber+0x30>
    hrng->RandomNumber = hrng->Instance->DR;
 8004944:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 8004946:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8004948:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 800494a:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800494c:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800494e:	7262      	strb	r2, [r4, #9]
 8004950:	e7e3      	b.n	800491a <HAL_RNG_GenerateRandomNumber+0x1a>
        hrng->State = HAL_RNG_STATE_READY;
 8004952:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004954:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 8004956:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 8004958:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800495a:	60e3      	str	r3, [r4, #12]
}
 800495c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800495e:	bf00      	nop

08004960 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004962:	2904      	cmp	r1, #4
 8004964:	d813      	bhi.n	800498e <HAL_SAI_InitProtocol+0x2e>
 8004966:	e8df f001 	tbb	[pc, r1]
 800496a:	3535      	.short	0x3535
 800496c:	1435      	.short	0x1435
 800496e:	14          	.byte	0x14
 800496f:	00          	.byte	0x00
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8004970:	4a8b      	ldr	r2, [pc, #556]	; (8004ba0 <HAL_SAI_InitProtocol+0x240>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d005      	beq.n	8004982 <HAL_SAI_InitProtocol+0x22>
 8004976:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800497a:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800497e:	4293      	cmp	r3, r2
 8004980:	d105      	bne.n	800498e <HAL_SAI_InitProtocol+0x2e>
 8004982:	6862      	ldr	r2, [r4, #4]
 8004984:	2a01      	cmp	r2, #1
 8004986:	d102      	bne.n	800498e <HAL_SAI_InitProtocol+0x2e>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004988:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800498a:	2a00      	cmp	r2, #0
 800498c:	d053      	beq.n	8004a36 <HAL_SAI_InitProtocol+0xd6>
  hsai->SlotInit.SlotNumber      = nbslot;

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
  {
    return HAL_ERROR;
 800498e:	2001      	movs	r0, #1
}
 8004990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004992:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004994:	2400      	movs	r4, #0
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004996:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
  hsai->SlotInit.FirstBitOffset  = 0;
  hsai->SlotInit.SlotNumber      = nbslot;
 800499a:	6703      	str	r3, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800499c:	f035 0502 	bics.w	r5, r5, #2
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80049a0:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80049a4:	6444      	str	r4, [r0, #68]	; 0x44
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049a6:	bf0c      	ite	eq
 80049a8:	2701      	moveq	r7, #1
 80049aa:	4627      	movne	r7, r4
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;

  if (protocol == SAI_PCM_SHORT)
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 80049ac:	2904      	cmp	r1, #4
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80049ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049b2:	6507      	str	r7, [r0, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 1;
 80049b4:	bf14      	ite	ne
 80049b6:	270d      	movne	r7, #13
 80049b8:	2701      	moveq	r7, #1
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80049ba:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80049bc:	65c4      	str	r4, [r0, #92]	; 0x5c
 80049be:	6587      	str	r7, [r0, #88]	; 0x58
  hsai->SlotInit.FirstBitOffset  = 0;
 80049c0:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80049c2:	6741      	str	r1, [r0, #116]	; 0x74
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80049c4:	e9c0 6518 	strd	r6, r5, [r0, #96]	; 0x60
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
  }

  switch (datasize)
 80049c8:	2a03      	cmp	r2, #3
 80049ca:	d8e0      	bhi.n	800498e <HAL_SAI_InitProtocol+0x2e>
 80049cc:	e8df f002 	tbb	[pc, r2]
 80049d0:	259e9197 	.word	0x259e9197
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049d4:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80049d6:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 80049d8:	6703      	str	r3, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049da:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80049de:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80049e0:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80049e2:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049e6:	bf08      	it	eq
 80049e8:	4626      	moveq	r6, r4
  hsai->SlotInit.FirstBitOffset  = 0;
 80049ea:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80049ec:	f64f 74ff 	movw	r4, #65535	; 0xffff
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049f0:	bf18      	it	ne
 80049f2:	2601      	movne	r6, #1
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80049f4:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80049f6:	6744      	str	r4, [r0, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 80049f8:	f013 0401 	ands.w	r4, r3, #1
 80049fc:	6506      	str	r6, [r0, #80]	; 0x50
 80049fe:	d1c6      	bne.n	800498e <HAL_SAI_InitProtocol+0x2e>
  if (protocol == SAI_I2S_STANDARD)
 8004a00:	2900      	cmp	r1, #0
 8004a02:	f000 808a 	beq.w	8004b1a <HAL_SAI_InitProtocol+0x1ba>
 8004a06:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8004a0a:	e9c0 5418 	strd	r5, r4, [r0, #96]	; 0x60
  switch (datasize)
 8004a0e:	2a03      	cmp	r2, #3
 8004a10:	d8bd      	bhi.n	800498e <HAL_SAI_InitProtocol+0x2e>
 8004a12:	e8df f002 	tbb	[pc, r2]
 8004a16:	a0b0      	.short	0xa0b0
 8004a18:	ba8f      	.short	0xba8f
      hsai->FrameInit.FrameLength = 32U * nbslot;
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
      break;
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004a1a:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004a1c:	21e0      	movs	r1, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004a1e:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004a20:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004a22:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004a24:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004a26:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004a28:	f7fb fcd2 	bl	80003d0 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004a2c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004a30:	2b01      	cmp	r3, #1
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8004a32:	6823      	ldr	r3, [r4, #0]
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004a34:	d09c      	beq.n	8004970 <HAL_SAI_InitProtocol+0x10>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a36:	4a5a      	ldr	r2, [pc, #360]	; (8004ba0 <HAL_SAI_InitProtocol+0x240>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d079      	beq.n	8004b30 <HAL_SAI_InitProtocol+0x1d0>
 8004a3c:	3220      	adds	r2, #32
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d076      	beq.n	8004b30 <HAL_SAI_InitProtocol+0x1d0>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004a42:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8004a46:	4293      	cmp	r3, r2
 8004a48:	f000 819b 	beq.w	8004d82 <HAL_SAI_InitProtocol+0x422>
 8004a4c:	3220      	adds	r2, #32
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	f000 8197 	beq.w	8004d82 <HAL_SAI_InitProtocol+0x422>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004a54:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	f000 81c3 	beq.w	8004de4 <HAL_SAI_InitProtocol+0x484>
 8004a5e:	3220      	adds	r2, #32
 8004a60:	4293      	cmp	r3, r2
 8004a62:	f000 81bf 	beq.w	8004de4 <HAL_SAI_InitProtocol+0x484>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8004a66:	4a4f      	ldr	r2, [pc, #316]	; (8004ba4 <HAL_SAI_InitProtocol+0x244>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d002      	beq.n	8004a72 <HAL_SAI_InitProtocol+0x112>
 8004a6c:	3220      	adds	r2, #32
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d18d      	bne.n	800498e <HAL_SAI_InitProtocol+0x2e>
    SaiBaseAddress = SAI4;
 8004a72:	4d4d      	ldr	r5, [pc, #308]	; (8004ba8 <HAL_SAI_InitProtocol+0x248>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8004a74:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
 8004a78:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8004a7c:	2a00      	cmp	r2, #0
 8004a7e:	f000 8179 	beq.w	8004d74 <HAL_SAI_InitProtocol+0x414>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004a82:	4a4a      	ldr	r2, [pc, #296]	; (8004bac <HAL_SAI_InitProtocol+0x24c>)
 8004a84:	484a      	ldr	r0, [pc, #296]	; (8004bb0 <HAL_SAI_InitProtocol+0x250>)
 8004a86:	6812      	ldr	r2, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004a88:	6819      	ldr	r1, [r3, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004a8a:	fba0 0202 	umull	r0, r2, r0, r2
  __HAL_SAI_DISABLE(hsai);
 8004a8e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004a92:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 8004a94:	6019      	str	r1, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004a96:	0093      	lsls	r3, r2, #2
 8004a98:	2a00      	cmp	r2, #0
 8004a9a:	f000 8163 	beq.w	8004d64 <HAL_SAI_InitProtocol+0x404>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004a9e:	6821      	ldr	r1, [r4, #0]
    count--;
 8004aa0:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004aa2:	680a      	ldr	r2, [r1, #0]
 8004aa4:	03d7      	lsls	r7, r2, #15
 8004aa6:	d506      	bpl.n	8004ab6 <HAL_SAI_InitProtocol+0x156>
    if (count == 0U)
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 815b 	beq.w	8004d64 <HAL_SAI_InitProtocol+0x404>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004aae:	680a      	ldr	r2, [r1, #0]
    count--;
 8004ab0:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004ab2:	03d2      	lsls	r2, r2, #15
 8004ab4:	d4f8      	bmi.n	8004aa8 <HAL_SAI_InitProtocol+0x148>
  switch (hsai->Init.SynchroExt)
 8004ab6:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 8004ab8:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 8004aba:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 8004abc:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8004ac0:	f000 818b 	beq.w	8004dda <HAL_SAI_InitProtocol+0x47a>
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	bf15      	itete	ne
 8004ac8:	4610      	movne	r0, r2
 8004aca:	2123      	moveq	r1, #35	; 0x23
 8004acc:	2103      	movne	r1, #3
 8004ace:	2022      	moveq	r0, #34	; 0x22
 8004ad0:	bf0b      	itete	eq
 8004ad2:	2621      	moveq	r6, #33	; 0x21
 8004ad4:	2601      	movne	r6, #1
 8004ad6:	2220      	moveq	r2, #32
 8004ad8:	2200      	movne	r2, #0
  switch (hsai->Init.Synchro)
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	f200 813e 	bhi.w	8004d60 <HAL_SAI_InitProtocol+0x400>
 8004ae4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004ae8:	00690135 	.word	0x00690135
 8004aec:	00680138 	.word	0x00680138
 8004af0:	018e      	.short	0x018e
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004af2:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004af4:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004af6:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004af8:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004afa:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004afc:	e793      	b.n	8004a26 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004afe:	011b      	lsls	r3, r3, #4
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b00:	2180      	movs	r1, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004b02:	2240      	movs	r2, #64	; 0x40
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004b04:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b06:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004b08:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004b0a:	e78c      	b.n	8004a26 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004b0c:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004b0e:	21c0      	movs	r1, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b10:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004b12:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004b14:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b16:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004b18:	e785      	b.n	8004a26 <HAL_SAI_InitProtocol+0xc6>
 8004b1a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004b1e:	e9c0 1418 	strd	r1, r4, [r0, #96]	; 0x60
  switch (datasize)
 8004b22:	2a03      	cmp	r2, #3
 8004b24:	f63f af33 	bhi.w	800498e <HAL_SAI_InitProtocol+0x2e>
 8004b28:	e8df f002 	tbb	[pc, r2]
 8004b2c:	2f041525 	.word	0x2f041525
    SaiBaseAddress = SAI1;
 8004b30:	4d20      	ldr	r5, [pc, #128]	; (8004bb4 <HAL_SAI_InitProtocol+0x254>)
 8004b32:	e79f      	b.n	8004a74 <HAL_SAI_InitProtocol+0x114>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b34:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004b36:	25c0      	movs	r5, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b38:	2480      	movs	r4, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004b3a:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b3c:	ea4f 1283 	mov.w	r2, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004b40:	6485      	str	r5, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b42:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b46:	66c4      	str	r4, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b48:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004b4c:	f47f af6b 	bne.w	8004a26 <HAL_SAI_InitProtocol+0xc6>
      hsai->SlotInit.FirstBitOffset = 8;
 8004b50:	2308      	movs	r3, #8
 8004b52:	6683      	str	r3, [r0, #104]	; 0x68
 8004b54:	e767      	b.n	8004a26 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b56:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b58:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004b5a:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b5c:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b60:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b62:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b66:	66c2      	str	r2, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b68:	e9c0 4315 	strd	r4, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004b6c:	f47f af5b 	bne.w	8004a26 <HAL_SAI_InitProtocol+0xc6>
      hsai->SlotInit.FirstBitOffset = 16;
 8004b70:	2310      	movs	r3, #16
 8004b72:	6683      	str	r3, [r0, #104]	; 0x68
 8004b74:	e757      	b.n	8004a26 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004b76:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b78:	2480      	movs	r4, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004b7a:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004b7c:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b7e:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004b80:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004b82:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004b84:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
 8004b88:	e74d      	b.n	8004a26 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b8a:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004b8c:	24e0      	movs	r4, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b8e:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b90:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004b92:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b94:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b96:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b98:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
 8004b9c:	e743      	b.n	8004a26 <HAL_SAI_InitProtocol+0xc6>
 8004b9e:	bf00      	nop
 8004ba0:	40015804 	.word	0x40015804
 8004ba4:	58005404 	.word	0x58005404
 8004ba8:	58005400 	.word	0x58005400
 8004bac:	2000000c 	.word	0x2000000c
 8004bb0:	95cbec1b 	.word	0x95cbec1b
 8004bb4:	40015800 	.word	0x40015800
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8004bb8:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004bba:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 8004bbe:	602a      	str	r2, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004bc0:	6a23      	ldr	r3, [r4, #32]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d04b      	beq.n	8004c5e <HAL_SAI_InitProtocol+0x2fe>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	4aa1      	ldr	r2, [pc, #644]	; (8004e50 <HAL_SAI_InitProtocol+0x4f0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	f000 812a 	beq.w	8004e24 <HAL_SAI_InitProtocol+0x4c4>
 8004bd0:	48a0      	ldr	r0, [pc, #640]	; (8004e54 <HAL_SAI_InitProtocol+0x4f4>)
 8004bd2:	1a18      	subs	r0, r3, r0
 8004bd4:	fab0 f080 	clz	r0, r0
 8004bd8:	0940      	lsrs	r0, r0, #5
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	f040 8122 	bne.w	8004e24 <HAL_SAI_InitProtocol+0x4c4>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004be0:	4a9d      	ldr	r2, [pc, #628]	; (8004e58 <HAL_SAI_InitProtocol+0x4f8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	f000 8118 	beq.w	8004e18 <HAL_SAI_InitProtocol+0x4b8>
 8004be8:	3220      	adds	r2, #32
 8004bea:	4293      	cmp	r3, r2
 8004bec:	f000 8114 	beq.w	8004e18 <HAL_SAI_InitProtocol+0x4b8>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004bf0:	4a9a      	ldr	r2, [pc, #616]	; (8004e5c <HAL_SAI_InitProtocol+0x4fc>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	f000 810a 	beq.w	8004e0c <HAL_SAI_InitProtocol+0x4ac>
 8004bf8:	3220      	adds	r2, #32
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	f000 8106 	beq.w	8004e0c <HAL_SAI_InitProtocol+0x4ac>
    if (hsai->Instance == SAI4_Block_A)
 8004c00:	4a97      	ldr	r2, [pc, #604]	; (8004e60 <HAL_SAI_InitProtocol+0x500>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	f000 8119 	beq.w	8004e3a <HAL_SAI_InitProtocol+0x4da>
    if (hsai->Instance == SAI4_Block_B)
 8004c08:	4a96      	ldr	r2, [pc, #600]	; (8004e64 <HAL_SAI_InitProtocol+0x504>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	f000 8110 	beq.w	8004e30 <HAL_SAI_InitProtocol+0x4d0>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004c10:	69a3      	ldr	r3, [r4, #24]
 8004c12:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004c14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c18:	f000 80e6 	beq.w	8004de8 <HAL_SAI_InitProtocol+0x488>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004c1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004c1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c22:	6a22      	ldr	r2, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004c24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004c28:	ea4f 0340 	mov.w	r3, r0, lsl #1
 8004c2c:	ea4f 2002 	mov.w	r0, r2, lsl #8
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004c30:	bf14      	ite	ne
 8004c32:	2201      	movne	r2, #1
 8004c34:	2202      	moveq	r2, #2
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004c36:	fb02 f200 	mul.w	r2, r2, r0
 8004c3a:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 8004c3e:	4a8a      	ldr	r2, [pc, #552]	; (8004e68 <HAL_SAI_InitProtocol+0x508>)
 8004c40:	fba2 0203 	umull	r0, r2, r2, r3
 8004c44:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 8004c46:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8004c4a:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8004c4e:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 8004c50:	bf08      	it	eq
 8004c52:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004c54:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 8004c56:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004c58:	d101      	bne.n	8004c5e <HAL_SAI_InitProtocol+0x2fe>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004c5a:	0852      	lsrs	r2, r2, #1
 8004c5c:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004c5e:	6863      	ldr	r3, [r4, #4]
 8004c60:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004c62:	f033 0702 	bics.w	r7, r3, #2
 8004c66:	f040 80b2 	bne.w	8004dce <HAL_SAI_InitProtocol+0x46e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004c6a:	2a01      	cmp	r2, #1
 8004c6c:	bf18      	it	ne
 8004c6e:	f44f 7700 	movne.w	r7, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004c72:	f7fb fbad 	bl	80003d0 <HAL_GetREVID>
 8004c76:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004c7a:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004c7c:	f0c0 8096 	bcc.w	8004dac <HAL_SAI_InitProtocol+0x44c>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004c80:	6811      	ldr	r1, [r2, #0]
 8004c82:	4b7a      	ldr	r3, [pc, #488]	; (8004e6c <HAL_SAI_InitProtocol+0x50c>)
 8004c84:	400b      	ands	r3, r1
 8004c86:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c88:	6863      	ldr	r3, [r4, #4]
 8004c8a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004c8c:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004c94:	4313      	orrs	r3, r2
 8004c96:	6962      	ldr	r2, [r4, #20]
 8004c98:	4303      	orrs	r3, r0
 8004c9a:	69a0      	ldr	r0, [r4, #24]
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	6922      	ldr	r2, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004ca4:	4303      	orrs	r3, r0
 8004ca6:	6820      	ldr	r0, [r4, #0]
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6801      	ldr	r1, [r0, #0]
 8004cac:	4313      	orrs	r3, r2
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004cae:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004cb0:	430b      	orrs	r3, r1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004cb2:	f24f 0120 	movw	r1, #61472	; 0xf020
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004cb6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004cba:	4333      	orrs	r3, r6
 8004cbc:	433b      	orrs	r3, r7
 8004cbe:	6003      	str	r3, [r0, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004cc0:	6826      	ldr	r6, [r4, #0]
 8004cc2:	4b6b      	ldr	r3, [pc, #428]	; (8004e70 <HAL_SAI_InitProtocol+0x510>)
 8004cc4:	6872      	ldr	r2, [r6, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004cc6:	486b      	ldr	r0, [pc, #428]	; (8004e74 <HAL_SAI_InitProtocol+0x514>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004cc8:	4013      	ands	r3, r2
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8004cca:	4a61      	ldr	r2, [pc, #388]	; (8004e50 <HAL_SAI_InitProtocol+0x4f0>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004ccc:	6073      	str	r3, [r6, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004cce:	69e3      	ldr	r3, [r4, #28]
 8004cd0:	e9d4 760c 	ldrd	r7, r6, [r4, #48]	; 0x30
 8004cd4:	433b      	orrs	r3, r7
 8004cd6:	6827      	ldr	r7, [r4, #0]
 8004cd8:	4333      	orrs	r3, r6
 8004cda:	687e      	ldr	r6, [r7, #4]
 8004cdc:	4333      	orrs	r3, r6
 8004cde:	607b      	str	r3, [r7, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	689e      	ldr	r6, [r3, #8]
 8004ce4:	4030      	ands	r0, r6
 8004ce6:	6098      	str	r0, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cea:	6827      	ldr	r7, [r4, #0]
 8004cec:	e9d4 6017 	ldrd	r6, r0, [r4, #92]	; 0x5c
 8004cf0:	4333      	orrs	r3, r6
 8004cf2:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8004cf4:	4303      	orrs	r3, r0
 8004cf6:	68b8      	ldr	r0, [r7, #8]
 8004cf8:	3e01      	subs	r6, #1
 8004cfa:	4303      	orrs	r3, r0
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004cfe:	4333      	orrs	r3, r6
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004d00:	3801      	subs	r0, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004d02:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004d06:	60bb      	str	r3, [r7, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004d08:	6820      	ldr	r0, [r4, #0]
 8004d0a:	68c3      	ldr	r3, [r0, #12]
 8004d0c:	400b      	ands	r3, r1
 8004d0e:	60c3      	str	r3, [r0, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004d10:	6820      	ldr	r0, [r4, #0]
 8004d12:	e9d4 361a 	ldrd	r3, r6, [r4, #104]	; 0x68
 8004d16:	68c1      	ldr	r1, [r0, #12]
 8004d18:	4333      	orrs	r3, r6
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004d1a:	6f66      	ldr	r6, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004d1c:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004d1e:	6f21      	ldr	r1, [r4, #112]	; 0x70
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004d20:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004d24:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004d26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d2a:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d029      	beq.n	8004d86 <HAL_SAI_InitProtocol+0x426>
 8004d32:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8004d36:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d023      	beq.n	8004d86 <HAL_SAI_InitProtocol+0x426>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004d3e:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8004d40:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004d42:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 8004d46:	4618      	mov	r0, r3
  __HAL_UNLOCK(hsai);
 8004d48:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 8004d4c:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
}
 8004d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004d52:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004d56:	e732      	b.n	8004bbe <HAL_SAI_InitProtocol+0x25e>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004d58:	4632      	mov	r2, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004d5a:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8004d5e:	e72e      	b.n	8004bbe <HAL_SAI_InitProtocol+0x25e>
      syncen_bits = 0;
 8004d60:	2600      	movs	r6, #0
 8004d62:	e72c      	b.n	8004bbe <HAL_SAI_InitProtocol+0x25e>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004d64:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 8004d68:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d6e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8004d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hsai->Lock = HAL_UNLOCKED;
 8004d74:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f002 f843 	bl	8006e04 <HAL_SAI_MspInit>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	e67f      	b.n	8004a82 <HAL_SAI_InitProtocol+0x122>
    SaiBaseAddress = SAI2;
 8004d82:	4d3d      	ldr	r5, [pc, #244]	; (8004e78 <HAL_SAI_InitProtocol+0x518>)
 8004d84:	e676      	b.n	8004a74 <HAL_SAI_InitProtocol+0x114>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8004d86:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8004d8e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d1d3      	bne.n	8004d3e <HAL_SAI_InitProtocol+0x3de>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004d96:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8004d9a:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004d9c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004da0:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8004da2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	646b      	str	r3, [r5, #68]	; 0x44
 8004daa:	e7c8      	b.n	8004d3e <HAL_SAI_InitProtocol+0x3de>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004dac:	6811      	ldr	r1, [r2, #0]
 8004dae:	4b33      	ldr	r3, [pc, #204]	; (8004e7c <HAL_SAI_InitProtocol+0x51c>)
 8004db0:	400b      	ands	r3, r1
 8004db2:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004db8:	e9d4 2011 	ldrd	r2, r0, [r4, #68]	; 0x44
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004dc0:	4303      	orrs	r3, r0
 8004dc2:	6960      	ldr	r0, [r4, #20]
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	69a1      	ldr	r1, [r4, #24]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004dcc:	e76a      	b.n	8004ca4 <HAL_SAI_InitProtocol+0x344>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004dce:	2a01      	cmp	r2, #1
 8004dd0:	bf14      	ite	ne
 8004dd2:	2700      	movne	r7, #0
 8004dd4:	f44f 7700 	moveq.w	r7, #512	; 0x200
 8004dd8:	e74b      	b.n	8004c72 <HAL_SAI_InitProtocol+0x312>
  switch (hsai->Init.SynchroExt)
 8004dda:	2113      	movs	r1, #19
 8004ddc:	2012      	movs	r0, #18
 8004dde:	2611      	movs	r6, #17
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004de0:	2210      	movs	r2, #16
 8004de2:	e67a      	b.n	8004ada <HAL_SAI_InitProtocol+0x17a>
    SaiBaseAddress = SAI3;
 8004de4:	4d26      	ldr	r5, [pc, #152]	; (8004e80 <HAL_SAI_InitProtocol+0x520>)
 8004de6:	e645      	b.n	8004a74 <HAL_SAI_InitProtocol+0x114>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004de8:	2904      	cmp	r1, #4
 8004dea:	d02c      	beq.n	8004e46 <HAL_SAI_InitProtocol+0x4e6>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004dec:	2908      	cmp	r1, #8
 8004dee:	d02c      	beq.n	8004e4a <HAL_SAI_InitProtocol+0x4ea>
        tmpframelength = hsai->FrameInit.FrameLength;
 8004df0:	6d67      	ldr	r7, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004df2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004df6:	6a22      	ldr	r2, [r4, #32]
 8004df8:	0043      	lsls	r3, r0, #1
 8004dfa:	fb02 f207 	mul.w	r2, r2, r7
 8004dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e02:	e71c      	b.n	8004c3e <HAL_SAI_InitProtocol+0x2de>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8004e04:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e06:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8004e0a:	e6d8      	b.n	8004bbe <HAL_SAI_InitProtocol+0x25e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8004e0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e10:	f7ff fc2c 	bl	800466c <HAL_RCCEx_GetPeriphCLKFreq>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	e6f3      	b.n	8004c00 <HAL_SAI_InitProtocol+0x2a0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004e18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e1c:	f7ff fc26 	bl	800466c <HAL_RCCEx_GetPeriphCLKFreq>
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	e6e5      	b.n	8004bf0 <HAL_SAI_InitProtocol+0x290>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004e24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004e28:	f7ff fc20 	bl	800466c <HAL_RCCEx_GetPeriphCLKFreq>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	e6d7      	b.n	8004be0 <HAL_SAI_InitProtocol+0x280>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8004e30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e34:	f7ff fc1a 	bl	800466c <HAL_RCCEx_GetPeriphCLKFreq>
 8004e38:	e6ea      	b.n	8004c10 <HAL_SAI_InitProtocol+0x2b0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8004e3a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004e3e:	f7ff fc15 	bl	800466c <HAL_RCCEx_GetPeriphCLKFreq>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	e6e0      	b.n	8004c08 <HAL_SAI_InitProtocol+0x2a8>
        tmpframelength = 64U;
 8004e46:	2740      	movs	r7, #64	; 0x40
 8004e48:	e7d3      	b.n	8004df2 <HAL_SAI_InitProtocol+0x492>
        tmpframelength = 256U;
 8004e4a:	f44f 7780 	mov.w	r7, #256	; 0x100
 8004e4e:	e7d0      	b.n	8004df2 <HAL_SAI_InitProtocol+0x492>
 8004e50:	40015804 	.word	0x40015804
 8004e54:	40015824 	.word	0x40015824
 8004e58:	40015c04 	.word	0x40015c04
 8004e5c:	40016004 	.word	0x40016004
 8004e60:	58005404 	.word	0x58005404
 8004e64:	58005424 	.word	0x58005424
 8004e68:	cccccccd 	.word	0xcccccccd
 8004e6c:	f005c010 	.word	0xf005c010
 8004e70:	ffff1ff0 	.word	0xffff1ff0
 8004e74:	fff88000 	.word	0xfff88000
 8004e78:	40015c00 	.word	0x40015c00
 8004e7c:	f805c010 	.word	0xf805c010
 8004e80:	40016000 	.word	0x40016000

08004e84 <HAL_SAI_Transmit_DMA>:
{
 8004e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e88:	460f      	mov	r7, r1
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8004e8e:	f7fb fa87 	bl	80003a0 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8004e92:	2f00      	cmp	r7, #0
 8004e94:	d064      	beq.n	8004f60 <HAL_SAI_Transmit_DMA+0xdc>
 8004e96:	fab8 f588 	clz	r5, r8
 8004e9a:	096d      	lsrs	r5, r5, #5
 8004e9c:	2d00      	cmp	r5, #0
 8004e9e:	d15f      	bne.n	8004f60 <HAL_SAI_Transmit_DMA+0xdc>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004ea0:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 8004ea4:	b2f6      	uxtb	r6, r6
 8004ea6:	2e01      	cmp	r6, #1
 8004ea8:	d156      	bne.n	8004f58 <HAL_SAI_Transmit_DMA+0xd4>
    __HAL_LOCK(hsai);
 8004eaa:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d052      	beq.n	8004f58 <HAL_SAI_Transmit_DMA+0xd4>
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004eb2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004eb6:	2112      	movs	r1, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004eb8:	4a37      	ldr	r2, [pc, #220]	; (8004f98 <HAL_SAI_Transmit_DMA+0x114>)
 8004eba:	4681      	mov	r9, r0
    hsai->pBuffPtr = pData;
 8004ebc:	67a7      	str	r7, [r4, #120]	; 0x78
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004ebe:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferSize = Size;
 8004ec2:	f8a4 807c 	strh.w	r8, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004ec6:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    __HAL_LOCK(hsai);
 8004eca:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->XferCount = Size;
 8004ece:	f8a4 807e 	strh.w	r8, [r4, #126]	; 0x7e
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004ed2:	4932      	ldr	r1, [pc, #200]	; (8004f9c <HAL_SAI_Transmit_DMA+0x118>)
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004ed6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004eda:	4a31      	ldr	r2, [pc, #196]	; (8004fa0 <HAL_SAI_Transmit_DMA+0x11c>)
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004edc:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004ede:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004ee2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8004ee4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004ee8:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004eea:	6822      	ldr	r2, [r4, #0]
 8004eec:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8004ef0:	321c      	adds	r2, #28
 8004ef2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004ef4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004ef8:	f7fc fbfc 	bl	80016f4 <HAL_DMA_Start_IT>
 8004efc:	4607      	mov	r7, r0
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d132      	bne.n	8004f68 <HAL_SAI_Transmit_DMA+0xe4>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004f02:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004f04:	6863      	ldr	r3, [r4, #4]
 8004f06:	2a08      	cmp	r2, #8
 8004f08:	d03c      	beq.n	8004f84 <HAL_SAI_Transmit_DMA+0x100>
 8004f0a:	2005      	movs	r0, #5
 8004f0c:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004f0e:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004f10:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	bf88      	it	hi
 8004f16:	4602      	movhi	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004f18:	690b      	ldr	r3, [r1, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	6813      	ldr	r3, [r2, #0]
 8004f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f26:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004f28:	e006      	b.n	8004f38 <HAL_SAI_Transmit_DMA+0xb4>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004f2a:	f7fb fa39 	bl	80003a0 <HAL_GetTick>
 8004f2e:	eba0 0009 	sub.w	r0, r0, r9
 8004f32:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f36:	d81b      	bhi.n	8004f70 <HAL_SAI_Transmit_DMA+0xec>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004f38:	6822      	ldr	r2, [r4, #0]
 8004f3a:	6955      	ldr	r5, [r2, #20]
 8004f3c:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8004f40:	d0f3      	beq.n	8004f2a <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004f42:	6813      	ldr	r3, [r2, #0]
 8004f44:	03db      	lsls	r3, r3, #15
 8004f46:	d403      	bmi.n	8004f50 <HAL_SAI_Transmit_DMA+0xcc>
      __HAL_SAI_ENABLE(hsai);
 8004f48:	6813      	ldr	r3, [r2, #0]
 8004f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f4e:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8004f50:	2300      	movs	r3, #0
 8004f52:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8004f56:	e000      	b.n	8004f5a <HAL_SAI_Transmit_DMA+0xd6>
    return HAL_BUSY;
 8004f58:	2702      	movs	r7, #2
}
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 8004f60:	2701      	movs	r7, #1
}
 8004f62:	4638      	mov	r0, r7
 8004f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_UNLOCK(hsai);
 8004f68:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8004f6c:	4637      	mov	r7, r6
 8004f6e:	e7f4      	b.n	8004f5a <HAL_SAI_Transmit_DMA+0xd6>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004f70:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8004f74:	2703      	movs	r7, #3
        __HAL_UNLOCK(hsai);
 8004f76:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f7e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8004f82:	e7ea      	b.n	8004f5a <HAL_SAI_Transmit_DMA+0xd6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004f84:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004f88:	2a01      	cmp	r2, #1
 8004f8a:	bf0b      	itete	eq
 8004f8c:	2015      	moveq	r0, #21
 8004f8e:	2005      	movne	r0, #5
 8004f90:	2271      	moveq	r2, #113	; 0x71
 8004f92:	2261      	movne	r2, #97	; 0x61
 8004f94:	e7bb      	b.n	8004f0e <HAL_SAI_Transmit_DMA+0x8a>
 8004f96:	bf00      	nop
 8004f98:	080050f1 	.word	0x080050f1
 8004f9c:	08005089 	.word	0x08005089
 8004fa0:	08005179 	.word	0x08005179

08004fa4 <HAL_SAI_Receive_DMA>:
  if ((pData == NULL) || (Size == 0U))
 8004fa4:	2900      	cmp	r1, #0
 8004fa6:	d057      	beq.n	8005058 <HAL_SAI_Receive_DMA+0xb4>
{
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0U))
 8004faa:	fab2 f582 	clz	r5, r2
 8004fae:	096d      	lsrs	r5, r5, #5
 8004fb0:	2d00      	cmp	r5, #0
 8004fb2:	d14f      	bne.n	8005054 <HAL_SAI_Receive_DMA+0xb0>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004fb4:	f890 6091 	ldrb.w	r6, [r0, #145]	; 0x91
 8004fb8:	b2f6      	uxtb	r6, r6
 8004fba:	2e01      	cmp	r6, #1
 8004fbc:	d148      	bne.n	8005050 <HAL_SAI_Receive_DMA+0xac>
    __HAL_LOCK(hsai);
 8004fbe:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d044      	beq.n	8005050 <HAL_SAI_Receive_DMA+0xac>
 8004fc6:	4604      	mov	r4, r0
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004fc8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004fcc:	2722      	movs	r7, #34	; 0x22
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004fce:	482a      	ldr	r0, [pc, #168]	; (8005078 <HAL_SAI_Receive_DMA+0xd4>)
    hsai->pBuffPtr = pData;
 8004fd0:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8004fd2:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004fd6:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferCount = Size;
 8004fda:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
    __HAL_LOCK(hsai);
 8004fde:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004fe2:	f884 7091 	strb.w	r7, [r4, #145]	; 0x91
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004fe6:	4925      	ldr	r1, [pc, #148]	; (800507c <HAL_SAI_Receive_DMA+0xd8>)
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004fe8:	6418      	str	r0, [r3, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004fea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004fee:	4a24      	ldr	r2, [pc, #144]	; (8005080 <HAL_SAI_Receive_DMA+0xdc>)
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004ff0:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004ff2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004ff6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8004ff8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004ffc:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004ffe:	6821      	ldr	r1, [r4, #0]
 8005000:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8005004:	311c      	adds	r1, #28
 8005006:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005008:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800500c:	f7fc fb72 	bl	80016f4 <HAL_DMA_Start_IT>
 8005010:	bb20      	cbnz	r0, 800505c <HAL_SAI_Receive_DMA+0xb8>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005012:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005014:	6863      	ldr	r3, [r4, #4]
 8005016:	2a08      	cmp	r2, #8
 8005018:	d024      	beq.n	8005064 <HAL_SAI_Receive_DMA+0xc0>
 800501a:	2505      	movs	r5, #5
 800501c:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800501e:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005020:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8005022:	2b01      	cmp	r3, #1
 8005024:	bf88      	it	hi
 8005026:	462a      	movhi	r2, r5
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005028:	690b      	ldr	r3, [r1, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800502e:	6822      	ldr	r2, [r4, #0]
 8005030:	6813      	ldr	r3, [r2, #0]
 8005032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005036:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	03d2      	lsls	r2, r2, #15
 800503e:	d403      	bmi.n	8005048 <HAL_SAI_Receive_DMA+0xa4>
      __HAL_SAI_ENABLE(hsai);
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005046:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8005048:	2300      	movs	r3, #0
 800504a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800504e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005050:	2002      	movs	r0, #2
}
 8005052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8005054:	2001      	movs	r0, #1
}
 8005056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8005058:	2001      	movs	r0, #1
}
 800505a:	4770      	bx	lr
      __HAL_UNLOCK(hsai);
 800505c:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8005060:	4630      	mov	r0, r6
}
 8005062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005064:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005068:	2a01      	cmp	r2, #1
 800506a:	bf0b      	itete	eq
 800506c:	2515      	moveq	r5, #21
 800506e:	2505      	movne	r5, #5
 8005070:	2271      	moveq	r2, #113	; 0x71
 8005072:	2261      	movne	r2, #97	; 0x61
 8005074:	e7d3      	b.n	800501e <HAL_SAI_Receive_DMA+0x7a>
 8005076:	bf00      	nop
 8005078:	08005169 	.word	0x08005169
 800507c:	08005101 	.word	0x08005101
 8005080:	08005179 	.word	0x08005179

08005084 <HAL_SAI_TxCpltCallback>:
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop

08005088 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005088:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800508a:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800508c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800508e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005092:	d01a      	beq.n	80050ca <SAI_DMATxCplt+0x42>
  {
    hsai->XferCount = 0;
 8005094:	2300      	movs	r3, #0

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005096:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8005098:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800509c:	6813      	ldr	r3, [r2, #0]
 800509e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050a2:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80050a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80050a6:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80050a8:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80050aa:	d011      	beq.n	80050d0 <SAI_DMATxCplt+0x48>
 80050ac:	f06f 0261 	mvn.w	r2, #97	; 0x61
 80050b0:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80050b4:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80050b6:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 80050b8:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80050ba:	42a3      	cmp	r3, r4
 80050bc:	bf88      	it	hi
 80050be:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80050c0:	690b      	ldr	r3, [r1, #16]
 80050c2:	4013      	ands	r3, r2
 80050c4:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 80050c6:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80050ca:	f7ff ffdb 	bl	8005084 <HAL_SAI_TxCpltCallback>
#endif
}
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80050d0:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80050d4:	2a01      	cmp	r2, #1
 80050d6:	bf0b      	itete	eq
 80050d8:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 80050dc:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 80050e0:	f06f 0515 	mvneq.w	r5, #21
 80050e4:	f06f 0505 	mvnne.w	r5, #5
 80050e8:	e7e4      	b.n	80050b4 <SAI_DMATxCplt+0x2c>
 80050ea:	bf00      	nop

080050ec <HAL_SAI_TxHalfCpltCallback>:
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop

080050f0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050f0:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80050f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80050f4:	f7ff fffa 	bl	80050ec <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80050f8:	bd08      	pop	{r3, pc}
 80050fa:	bf00      	nop

080050fc <HAL_SAI_RxCpltCallback>:
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop

08005100 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005100:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005102:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005104:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800510a:	d01a      	beq.n	8005142 <SAI_DMARxCplt+0x42>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800510c:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 800510e:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005110:	6813      	ldr	r3, [r2, #0]
 8005112:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005116:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005118:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
 800511a:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800511e:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005120:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005122:	d011      	beq.n	8005148 <SAI_DMARxCplt+0x48>
 8005124:	f06f 0261 	mvn.w	r2, #97	; 0x61
 8005128:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800512c:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800512e:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 8005130:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005132:	42a3      	cmp	r3, r4
 8005134:	bf88      	it	hi
 8005136:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005138:	690b      	ldr	r3, [r1, #16]
 800513a:	4013      	ands	r3, r2
 800513c:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800513e:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005142:	f7ff ffdb 	bl	80050fc <HAL_SAI_RxCpltCallback>
#endif
}
 8005146:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005148:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800514c:	2a01      	cmp	r2, #1
 800514e:	bf0b      	itete	eq
 8005150:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 8005154:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 8005158:	f06f 0515 	mvneq.w	r5, #21
 800515c:	f06f 0505 	mvnne.w	r5, #5
 8005160:	e7e4      	b.n	800512c <SAI_DMARxCplt+0x2c>
 8005162:	bf00      	nop

08005164 <HAL_SAI_RxHalfCpltCallback>:
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop

08005168 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005168:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800516a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800516c:	f7ff fffa 	bl	8005164 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8005170:	bd08      	pop	{r3, pc}
 8005172:	bf00      	nop

08005174 <HAL_SAI_ErrorCallback>:
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop

08005178 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005178:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800517a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800517c:	f7fd fae0 	bl	8002740 <HAL_DMA_GetError>
 8005180:	2802      	cmp	r0, #2
 8005182:	d02a      	beq.n	80051da <SAI_DMAError+0x62>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005184:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005188:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800518a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800518e:	4a17      	ldr	r2, [pc, #92]	; (80051ec <SAI_DMAError+0x74>)
 8005190:	4d17      	ldr	r5, [pc, #92]	; (80051f0 <SAI_DMAError+0x78>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005192:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005196:	680b      	ldr	r3, [r1, #0]
 8005198:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800519c:	600b      	str	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800519e:	6812      	ldr	r2, [r2, #0]
  __HAL_SAI_DISABLE(hsai);
 80051a0:	6820      	ldr	r0, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80051a2:	fba5 3202 	umull	r3, r2, r5, r2
  __HAL_SAI_DISABLE(hsai);
 80051a6:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80051a8:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 80051aa:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    if (count == 0U)
 80051ae:	0093      	lsls	r3, r2, #2
  __HAL_SAI_DISABLE(hsai);
 80051b0:	6001      	str	r1, [r0, #0]
    if (count == 0U)
 80051b2:	b19a      	cbz	r2, 80051dc <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80051b4:	6821      	ldr	r1, [r4, #0]
    count--;
 80051b6:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80051b8:	680a      	ldr	r2, [r1, #0]
 80051ba:	03d0      	lsls	r0, r2, #15
 80051bc:	d504      	bpl.n	80051c8 <SAI_DMAError+0x50>
    if (count == 0U)
 80051be:	b16b      	cbz	r3, 80051dc <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80051c0:	680a      	ldr	r2, [r1, #0]
    count--;
 80051c2:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80051c4:	03d2      	lsls	r2, r2, #15
 80051c6:	d4fa      	bmi.n	80051be <SAI_DMAError+0x46>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80051c8:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80051ca:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80051cc:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 80051ce:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 80051d2:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 80051d6:	f7ff ffcd 	bl	8005174 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80051da:	bd38      	pop	{r3, r4, r5, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80051dc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80051e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80051e8:	e7ee      	b.n	80051c8 <SAI_DMAError+0x50>
 80051ea:	bf00      	nop
 80051ec:	2000000c 	.word	0x2000000c
 80051f0:	95cbec1b 	.word	0x95cbec1b

080051f4 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 80051f4:	6801      	ldr	r1, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80051f6:	4a30      	ldr	r2, [pc, #192]	; (80052b8 <SPI_CloseTransfer+0xc4>)
{
 80051f8:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 80051fa:	694b      	ldr	r3, [r1, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80051fc:	698c      	ldr	r4, [r1, #24]
 80051fe:	f044 0408 	orr.w	r4, r4, #8
 8005202:	618c      	str	r4, [r1, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005204:	6804      	ldr	r4, [r0, #0]
 8005206:	69a1      	ldr	r1, [r4, #24]
 8005208:	f041 0110 	orr.w	r1, r1, #16
 800520c:	61a1      	str	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800520e:	6804      	ldr	r4, [r0, #0]
 8005210:	6821      	ldr	r1, [r4, #0]
 8005212:	f021 0101 	bic.w	r1, r1, #1
 8005216:	6021      	str	r1, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005218:	6801      	ldr	r1, [r0, #0]
 800521a:	690c      	ldr	r4, [r1, #16]
 800521c:	4022      	ands	r2, r4
 800521e:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005220:	6801      	ldr	r1, [r0, #0]
 8005222:	688a      	ldr	r2, [r1, #8]
 8005224:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005228:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800522a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800522e:	2a04      	cmp	r2, #4
 8005230:	d001      	beq.n	8005236 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005232:	069c      	lsls	r4, r3, #26
 8005234:	d433      	bmi.n	800529e <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005236:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800523a:	2a03      	cmp	r2, #3
 800523c:	d001      	beq.n	8005242 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800523e:	0659      	lsls	r1, r3, #25
 8005240:	d421      	bmi.n	8005286 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005242:	059a      	lsls	r2, r3, #22
 8005244:	d50a      	bpl.n	800525c <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005246:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800524a:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800524c:	f042 0201 	orr.w	r2, r2, #1
 8005250:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005254:	698a      	ldr	r2, [r1, #24]
 8005256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525a:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800525c:	05db      	lsls	r3, r3, #23
 800525e:	d50a      	bpl.n	8005276 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005260:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005264:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005266:	f043 0308 	orr.w	r3, r3, #8
 800526a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800526e:	6993      	ldr	r3, [r2, #24]
 8005270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005274:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005276:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8005278:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800527c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005280:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8005284:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005286:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800528a:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800528c:	f042 0204 	orr.w	r2, r2, #4
 8005290:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005294:	698a      	ldr	r2, [r1, #24]
 8005296:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800529a:	618a      	str	r2, [r1, #24]
 800529c:	e7d1      	b.n	8005242 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800529e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80052a2:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80052a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052a8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80052ac:	698a      	ldr	r2, [r1, #24]
 80052ae:	f042 0220 	orr.w	r2, r2, #32
 80052b2:	618a      	str	r2, [r1, #24]
 80052b4:	e7bf      	b.n	8005236 <SPI_CloseTransfer+0x42>
 80052b6:	bf00      	nop
 80052b8:	fffffc90 	.word	0xfffffc90

080052bc <HAL_SPI_Init>:
  if (hspi == NULL)
 80052bc:	2800      	cmp	r0, #0
 80052be:	f000 809b 	beq.w	80053f8 <HAL_SPI_Init+0x13c>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80052c2:	4955      	ldr	r1, [pc, #340]	; (8005418 <HAL_SPI_Init+0x15c>)
{
 80052c4:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80052c6:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c8:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80052ca:	428a      	cmp	r2, r1
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052cc:	6283      	str	r3, [r0, #40]	; 0x28
 80052ce:	68c3      	ldr	r3, [r0, #12]
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80052d0:	d013      	beq.n	80052fa <HAL_SPI_Init+0x3e>
 80052d2:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 80052d6:	428a      	cmp	r2, r1
 80052d8:	d00f      	beq.n	80052fa <HAL_SPI_Init+0x3e>
 80052da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052de:	428a      	cmp	r2, r1
 80052e0:	d075      	beq.n	80053ce <HAL_SPI_Init+0x112>
 80052e2:	2b0f      	cmp	r3, #15
 80052e4:	d807      	bhi.n	80052f6 <HAL_SPI_Init+0x3a>
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80052e6:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80052e8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80052ea:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80052ec:	0949      	lsrs	r1, r1, #5

  return data_size * fifo_threashold;
 80052ee:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d907      	bls.n	8005306 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 80052f6:	2001      	movs	r0, #1
}
 80052f8:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 80052fa:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80052fc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80052fe:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005300:	0949      	lsrs	r1, r1, #5
  return data_size * fifo_threashold;
 8005302:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005306:	4c44      	ldr	r4, [pc, #272]	; (8005418 <HAL_SPI_Init+0x15c>)
 8005308:	4944      	ldr	r1, [pc, #272]	; (800541c <HAL_SPI_Init+0x160>)
 800530a:	428a      	cmp	r2, r1
 800530c:	bf18      	it	ne
 800530e:	42a2      	cmpne	r2, r4
 8005310:	d063      	beq.n	80053da <HAL_SPI_Init+0x11e>
 8005312:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005316:	428a      	cmp	r2, r1
 8005318:	d05f      	beq.n	80053da <HAL_SPI_Init+0x11e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800531a:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800531e:	4604      	mov	r4, r0
 8005320:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8005324:	2b00      	cmp	r3, #0
 8005326:	d061      	beq.n	80053ec <HAL_SPI_Init+0x130>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005328:	2302      	movs	r3, #2
 800532a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005336:	69a3      	ldr	r3, [r4, #24]
 8005338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800533c:	d05e      	beq.n	80053fc <HAL_SPI_Init+0x140>
 800533e:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005340:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005342:	69e3      	ldr	r3, [r4, #28]
 8005344:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005346:	430b      	orrs	r3, r1
 8005348:	68e1      	ldr	r1, [r4, #12]
 800534a:	4303      	orrs	r3, r0
 800534c:	430b      	orrs	r3, r1
 800534e:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005350:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005354:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005356:	4313      	orrs	r3, r2
 8005358:	69a1      	ldr	r1, [r4, #24]
 800535a:	6922      	ldr	r2, [r4, #16]
 800535c:	4303      	orrs	r3, r0
 800535e:	6965      	ldr	r5, [r4, #20]
 8005360:	6a20      	ldr	r0, [r4, #32]
 8005362:	430b      	orrs	r3, r1
 8005364:	6861      	ldr	r1, [r4, #4]
 8005366:	4313      	orrs	r3, r2
 8005368:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800536a:	432b      	orrs	r3, r5
 800536c:	68a5      	ldr	r5, [r4, #8]
 800536e:	4303      	orrs	r3, r0
 8005370:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005372:	430b      	orrs	r3, r1
 8005374:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005376:	4313      	orrs	r3, r2
 8005378:	6822      	ldr	r2, [r4, #0]
 800537a:	432b      	orrs	r3, r5
 800537c:	4303      	orrs	r3, r0
 800537e:	430b      	orrs	r3, r1
 8005380:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	b96b      	cbnz	r3, 80053a2 <HAL_SPI_Init+0xe6>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	6893      	ldr	r3, [r2, #8]
 800538a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800538e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005392:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005394:	6822      	ldr	r2, [r4, #0]
 8005396:	6893      	ldr	r3, [r2, #8]
 8005398:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800539c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053a0:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053a2:	6822      	ldr	r2, [r4, #0]
 80053a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80053ac:	6863      	ldr	r3, [r4, #4]
 80053ae:	025b      	lsls	r3, r3, #9
 80053b0:	d506      	bpl.n	80053c0 <HAL_SPI_Init+0x104>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80053b2:	6822      	ldr	r2, [r4, #0]
 80053b4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80053b6:	68d3      	ldr	r3, [r2, #12]
 80053b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053bc:	430b      	orrs	r3, r1
 80053be:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053c0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80053c2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053c4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80053c8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80053cc:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 80053ce:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80053d0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80053d2:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80053d4:	0949      	lsrs	r1, r1, #5
  return data_size * fifo_threashold;
 80053d6:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d88b      	bhi.n	80052f6 <HAL_SPI_Init+0x3a>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80053de:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80053e2:	4604      	mov	r4, r0
 80053e4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d19d      	bne.n	8005328 <HAL_SPI_Init+0x6c>
    hspi->Lock = HAL_UNLOCKED;
 80053ec:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 80053f0:	f001 fe14 	bl	800701c <HAL_SPI_MspInit>
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	e797      	b.n	8005328 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 80053f8:	2001      	movs	r0, #1
}
 80053fa:	4770      	bx	lr
 80053fc:	e9d4 2300 	ldrd	r2, r3, [r4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005404:	d19c      	bne.n	8005340 <HAL_SPI_Init+0x84>
 8005406:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005408:	2b00      	cmp	r3, #0
 800540a:	d199      	bne.n	8005340 <HAL_SPI_Init+0x84>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800540c:	6813      	ldr	r3, [r2, #0]
 800540e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	e793      	b.n	800533e <HAL_SPI_Init+0x82>
 8005416:	bf00      	nop
 8005418:	40013000 	.word	0x40013000
 800541c:	40003800 	.word	0x40003800

08005420 <HAL_SPI_Transmit_DMA>:
{
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 8005424:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 8005428:	2801      	cmp	r0, #1
 800542a:	f000 8082 	beq.w	8005532 <HAL_SPI_Transmit_DMA+0x112>
 800542e:	2401      	movs	r4, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 8005430:	f893 0081 	ldrb.w	r0, [r3, #129]	; 0x81
 8005434:	42a0      	cmp	r0, r4
  __HAL_LOCK(hspi);
 8005436:	f883 4080 	strb.w	r4, [r3, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800543a:	d167      	bne.n	800550c <HAL_SPI_Transmit_DMA+0xec>
  if ((pData == NULL) || (Size == 0UL))
 800543c:	2900      	cmp	r1, #0
 800543e:	d06d      	beq.n	800551c <HAL_SPI_Transmit_DMA+0xfc>
 8005440:	fab2 f082 	clz	r0, r2
 8005444:	0940      	lsrs	r0, r0, #5
 8005446:	2800      	cmp	r0, #0
 8005448:	d168      	bne.n	800551c <HAL_SPI_Transmit_DMA+0xfc>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544a:	689c      	ldr	r4, [r3, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800544c:	2503      	movs	r5, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800544e:	65d9      	str	r1, [r3, #92]	; 0x5c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005450:	f5b4 2fc0 	cmp.w	r4, #393216	; 0x60000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005454:	f883 5081 	strb.w	r5, [r3, #129]	; 0x81
  hspi->TxXferSize  = Size;
 8005458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800545c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = NULL;
 8005460:	6658      	str	r0, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8005462:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferSize  = (uint16_t)0UL;
 8005466:	f8a3 0068 	strh.w	r0, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800546a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800546e:	e9c3 001c 	strd	r0, r0, [r3, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005472:	d058      	beq.n	8005526 <HAL_SPI_Transmit_DMA+0x106>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005474:	68dc      	ldr	r4, [r3, #12]
 8005476:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005478:	2c0f      	cmp	r4, #15
 800547a:	6988      	ldr	r0, [r1, #24]
 800547c:	d84b      	bhi.n	8005516 <HAL_SPI_Transmit_DMA+0xf6>
 800547e:	2c07      	cmp	r4, #7
 8005480:	d879      	bhi.n	8005576 <HAL_SPI_Transmit_DMA+0x156>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005482:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005486:	d067      	beq.n	8005558 <HAL_SPI_Transmit_DMA+0x138>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005488:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800548c:	d06c      	beq.n	8005568 <HAL_SPI_Transmit_DMA+0x148>
 800548e:	461d      	mov	r5, r3
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005490:	4b41      	ldr	r3, [pc, #260]	; (8005598 <HAL_SPI_Transmit_DMA+0x178>)
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005492:	4842      	ldr	r0, [pc, #264]	; (800559c <HAL_SPI_Transmit_DMA+0x17c>)
 8005494:	4614      	mov	r4, r2
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005496:	640b      	str	r3, [r1, #64]	; 0x40
  hspi->hdmatx->XferAbortCallback = NULL;
 8005498:	2200      	movs	r2, #0
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800549a:	6fab      	ldr	r3, [r5, #120]	; 0x78
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800549c:	4940      	ldr	r1, [pc, #256]	; (80055a0 <HAL_SPI_Transmit_DMA+0x180>)
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800549e:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80054a0:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80054a2:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 80054a4:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80054a6:	651a      	str	r2, [r3, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80054a8:	682a      	ldr	r2, [r5, #0]
 80054aa:	6893      	ldr	r3, [r2, #8]
 80054ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054b0:	6093      	str	r3, [r2, #8]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 80054b2:	682a      	ldr	r2, [r5, #0]
 80054b4:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 80054b8:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80054ba:	3220      	adds	r2, #32
 80054bc:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 80054be:	f7fc f919 	bl	80016f4 <HAL_DMA_Start_IT>
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d137      	bne.n	8005536 <HAL_SPI_Transmit_DMA+0x116>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80054c6:	6faa      	ldr	r2, [r5, #120]	; 0x78
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	69d2      	ldr	r2, [r2, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80054cc:	6859      	ldr	r1, [r3, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80054ce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80054d2:	4a34      	ldr	r2, [pc, #208]	; (80055a4 <HAL_SPI_Transmit_DMA+0x184>)
 80054d4:	ea02 0201 	and.w	r2, r2, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80054d8:	bf18      	it	ne
 80054da:	4322      	orrne	r2, r4
 80054dc:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80054de:	682a      	ldr	r2, [r5, #0]
 80054e0:	6893      	ldr	r3, [r2, #8]
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e6:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80054e8:	682a      	ldr	r2, [r5, #0]
 80054ea:	6913      	ldr	r3, [r2, #16]
 80054ec:	f443 7348 	orr.w	r3, r3, #800	; 0x320
 80054f0:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 80054f2:	682a      	ldr	r2, [r5, #0]
 80054f4:	6813      	ldr	r3, [r2, #0]
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054fc:	686b      	ldr	r3, [r5, #4]
 80054fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005502:	d023      	beq.n	800554c <HAL_SPI_Transmit_DMA+0x12c>
  __HAL_UNLOCK(hspi);
 8005504:	2300      	movs	r3, #0
 8005506:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
}
 800550a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hspi);
 800550c:	2200      	movs	r2, #0
    return errorcode;
 800550e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 8005510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8005514:	bd38      	pop	{r3, r4, r5, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005516:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800551a:	d0b8      	beq.n	800548e <HAL_SPI_Transmit_DMA+0x6e>
    __HAL_UNLOCK(hspi);
 800551c:	2200      	movs	r2, #0
    return errorcode;
 800551e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8005520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8005524:	bd38      	pop	{r3, r4, r5, pc}
    SPI_1LINE_TX(hspi);
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	6801      	ldr	r1, [r0, #0]
 800552a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800552e:	6001      	str	r1, [r0, #0]
 8005530:	e7a0      	b.n	8005474 <HAL_SPI_Transmit_DMA+0x54>
  __HAL_LOCK(hspi);
 8005532:	2002      	movs	r0, #2
}
 8005534:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005536:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800553a:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800553c:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 8005540:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005542:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8005546:	f885 2081 	strb.w	r2, [r5, #129]	; 0x81
}
 800554a:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800554c:	682a      	ldr	r2, [r5, #0]
 800554e:	6813      	ldr	r3, [r2, #0]
 8005550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e7d5      	b.n	8005504 <HAL_SPI_Transmit_DMA+0xe4>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8005558:	f8b3 0062 	ldrh.w	r0, [r3, #98]	; 0x62
 800555c:	3001      	adds	r0, #1
 800555e:	0840      	lsrs	r0, r0, #1
 8005560:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
 8005564:	6988      	ldr	r0, [r1, #24]
 8005566:	e78f      	b.n	8005488 <HAL_SPI_Transmit_DMA+0x68>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8005568:	f8b3 0062 	ldrh.w	r0, [r3, #98]	; 0x62
 800556c:	3003      	adds	r0, #3
 800556e:	0880      	lsrs	r0, r0, #2
 8005570:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
 8005574:	e78b      	b.n	800548e <HAL_SPI_Transmit_DMA+0x6e>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8005576:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800557a:	d002      	beq.n	8005582 <HAL_SPI_Transmit_DMA+0x162>
 800557c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005580:	d1cc      	bne.n	800551c <HAL_SPI_Transmit_DMA+0xfc>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005582:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8005586:	d182      	bne.n	800548e <HAL_SPI_Transmit_DMA+0x6e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8005588:	f8b3 0062 	ldrh.w	r0, [r3, #98]	; 0x62
 800558c:	3001      	adds	r0, #1
 800558e:	0840      	lsrs	r0, r0, #1
 8005590:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
 8005594:	e77b      	b.n	800548e <HAL_SPI_Transmit_DMA+0x6e>
 8005596:	bf00      	nop
 8005598:	08005a01 	.word	0x08005a01
 800559c:	08005981 	.word	0x08005981
 80055a0:	08005a31 	.word	0x08005a31
 80055a4:	ffff0000 	.word	0xffff0000

080055a8 <HAL_SPI_TransmitReceive_DMA>:
{
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80055ac:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 80055b0:	2801      	cmp	r0, #1
 80055b2:	d068      	beq.n	8005686 <HAL_SPI_TransmitReceive_DMA+0xde>
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 80055b4:	6865      	ldr	r5, [r4, #4]
  __HAL_LOCK(hspi);
 80055b6:	2601      	movs	r6, #1
  tmp_state   = hspi->State;
 80055b8:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 80055bc:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
  __HAL_LOCK(hspi);
 80055c0:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
  tmp_state   = hspi->State;
 80055c4:	b2c0      	uxtb	r0, r0
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 80055c6:	d010      	beq.n	80055ea <HAL_SPI_TransmitReceive_DMA+0x42>
 80055c8:	2801      	cmp	r0, #1
 80055ca:	d109      	bne.n	80055e0 <HAL_SPI_TransmitReceive_DMA+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf18      	it	ne
 80055d0:	2a00      	cmpne	r2, #0
 80055d2:	d000      	beq.n	80055d6 <HAL_SPI_TransmitReceive_DMA+0x2e>
 80055d4:	b979      	cbnz	r1, 80055f6 <HAL_SPI_TransmitReceive_DMA+0x4e>
    __HAL_UNLOCK(hspi);
 80055d6:	2300      	movs	r3, #0
    return errorcode;
 80055d8:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 80055da:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80055de:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 80055e0:	2300      	movs	r3, #0
    return errorcode;
 80055e2:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 80055e4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 80055ea:	68a5      	ldr	r5, [r4, #8]
 80055ec:	2d00      	cmp	r5, #0
 80055ee:	d1eb      	bne.n	80055c8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80055f0:	2804      	cmp	r0, #4
 80055f2:	d1e9      	bne.n	80055c8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80055f4:	e7ea      	b.n	80055cc <HAL_SPI_TransmitReceive_DMA+0x24>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055f6:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
 80055fa:	2804      	cmp	r0, #4
 80055fc:	d002      	beq.n	8005604 <HAL_SPI_TransmitReceive_DMA+0x5c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055fe:	2005      	movs	r0, #5
 8005600:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005604:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005606:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005608:	65e1      	str	r1, [r4, #92]	; 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800560a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->TxXferSize  = Size;
 800560e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005612:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005616:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005618:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 800561c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005620:	e9c4 001c 	strd	r0, r0, [r4, #112]	; 0x70
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005624:	68aa      	ldr	r2, [r5, #8]
 8005626:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800562a:	60aa      	str	r2, [r5, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800562c:	68e1      	ldr	r1, [r4, #12]
 800562e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005630:	290f      	cmp	r1, #15
 8005632:	d92a      	bls.n	800568a <HAL_SPI_TransmitReceive_DMA+0xe2>
 8005634:	6991      	ldr	r1, [r2, #24]
 8005636:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800563a:	d1cc      	bne.n	80055d6 <HAL_SPI_TransmitReceive_DMA+0x2e>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800563c:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8005640:	2904      	cmp	r1, #4
 8005642:	d04e      	beq.n	80056e2 <HAL_SPI_TransmitReceive_DMA+0x13a>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005644:	4858      	ldr	r0, [pc, #352]	; (80057a8 <HAL_SPI_TransmitReceive_DMA+0x200>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005646:	4959      	ldr	r1, [pc, #356]	; (80057ac <HAL_SPI_TransmitReceive_DMA+0x204>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005648:	6410      	str	r0, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800564a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800564c:	63d1      	str	r1, [r2, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800564e:	4958      	ldr	r1, [pc, #352]	; (80057b0 <HAL_SPI_TransmitReceive_DMA+0x208>)
 8005650:	461d      	mov	r5, r3
 8005652:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  hspi->hdmarx->XferAbortCallback = NULL;
 8005654:	2200      	movs	r2, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005656:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8005658:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800565a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800565c:	6821      	ldr	r1, [r4, #0]
 800565e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005662:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005664:	3130      	adds	r1, #48	; 0x30
 8005666:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005668:	f7fc f844 	bl	80016f4 <HAL_DMA_Start_IT>
 800566c:	2800      	cmp	r0, #0
 800566e:	d05c      	beq.n	800572a <HAL_SPI_TransmitReceive_DMA+0x182>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005670:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8005674:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005676:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 800567a:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800567c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8005680:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 8005684:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hspi);
 8005686:	2002      	movs	r0, #2
}
 8005688:	bd70      	pop	{r4, r5, r6, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800568a:	2907      	cmp	r1, #7
 800568c:	d82f      	bhi.n	80056ee <HAL_SPI_TransmitReceive_DMA+0x146>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800568e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005690:	6981      	ldr	r1, [r0, #24]
 8005692:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005696:	d106      	bne.n	80056a6 <HAL_SPI_TransmitReceive_DMA+0xfe>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8005698:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 800569c:	3101      	adds	r1, #1
 800569e:	0849      	lsrs	r1, r1, #1
 80056a0:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
 80056a4:	6981      	ldr	r1, [r0, #24]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80056a6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80056aa:	d105      	bne.n	80056b8 <HAL_SPI_TransmitReceive_DMA+0x110>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80056ac:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80056b0:	3103      	adds	r1, #3
 80056b2:	0889      	lsrs	r1, r1, #2
 80056b4:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056b8:	6991      	ldr	r1, [r2, #24]
 80056ba:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80056be:	d106      	bne.n	80056ce <HAL_SPI_TransmitReceive_DMA+0x126>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80056c0:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 80056c4:	3101      	adds	r1, #1
 80056c6:	0849      	lsrs	r1, r1, #1
 80056c8:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 80056cc:	6991      	ldr	r1, [r2, #24]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80056ce:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80056d2:	d1b3      	bne.n	800563c <HAL_SPI_TransmitReceive_DMA+0x94>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80056d4:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 80056d8:	3103      	adds	r1, #3
 80056da:	0889      	lsrs	r1, r1, #2
 80056dc:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 80056e0:	e7ac      	b.n	800563c <HAL_SPI_TransmitReceive_DMA+0x94>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80056e2:	4834      	ldr	r0, [pc, #208]	; (80057b4 <HAL_SPI_TransmitReceive_DMA+0x20c>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80056e4:	4934      	ldr	r1, [pc, #208]	; (80057b8 <HAL_SPI_TransmitReceive_DMA+0x210>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80056e6:	6410      	str	r0, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80056e8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80056ea:	63d1      	str	r1, [r2, #60]	; 0x3c
 80056ec:	e7af      	b.n	800564e <HAL_SPI_TransmitReceive_DMA+0xa6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80056ee:	6991      	ldr	r1, [r2, #24]
 80056f0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80056f4:	d003      	beq.n	80056fe <HAL_SPI_TransmitReceive_DMA+0x156>
 80056f6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80056fa:	f47f af6c 	bne.w	80055d6 <HAL_SPI_TransmitReceive_DMA+0x2e>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80056fe:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005700:	6980      	ldr	r0, [r0, #24]
 8005702:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8005706:	d106      	bne.n	8005716 <HAL_SPI_TransmitReceive_DMA+0x16e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8005708:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 800570c:	3101      	adds	r1, #1
 800570e:	0849      	lsrs	r1, r1, #1
 8005710:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
 8005714:	6991      	ldr	r1, [r2, #24]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005716:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800571a:	d18f      	bne.n	800563c <HAL_SPI_TransmitReceive_DMA+0x94>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800571c:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8005720:	3101      	adds	r1, #1
 8005722:	0849      	lsrs	r1, r1, #1
 8005724:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8005728:	e788      	b.n	800563c <HAL_SPI_TransmitReceive_DMA+0x94>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800572a:	6822      	ldr	r2, [r4, #0]
 800572c:	6893      	ldr	r3, [r2, #8]
 800572e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005732:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005734:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005736:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005738:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800573a:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800573c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800573e:	64d8      	str	r0, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005740:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005742:	6518      	str	r0, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800574a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800574c:	3220      	adds	r2, #32
 800574e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005750:	f7fb ffd0 	bl	80016f4 <HAL_DMA_Start_IT>
 8005754:	2800      	cmp	r0, #0
 8005756:	d18b      	bne.n	8005670 <HAL_SPI_TransmitReceive_DMA+0xc8>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8005758:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800575e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8005760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005764:	4b15      	ldr	r3, [pc, #84]	; (80057bc <HAL_SPI_TransmitReceive_DMA+0x214>)
 8005766:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800576a:	bf18      	it	ne
 800576c:	432b      	orrne	r3, r5
 800576e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005770:	6822      	ldr	r2, [r4, #0]
 8005772:	6893      	ldr	r3, [r2, #8]
 8005774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005778:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	6913      	ldr	r3, [r2, #16]
 800577e:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 8005782:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8005784:	6822      	ldr	r2, [r4, #0]
 8005786:	6813      	ldr	r3, [r2, #0]
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800578e:	6863      	ldr	r3, [r4, #4]
 8005790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005794:	d104      	bne.n	80057a0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	6813      	ldr	r3, [r2, #0]
 800579a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800579e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 80057a0:	2300      	movs	r3, #0
 80057a2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
 80057a8:	08005a21 	.word	0x08005a21
 80057ac:	080059d5 	.word	0x080059d5
 80057b0:	08005a31 	.word	0x08005a31
 80057b4:	08005a11 	.word	0x08005a11
 80057b8:	080059a9 	.word	0x080059a9
 80057bc:	ffff0000 	.word	0xffff0000

080057c0 <HAL_SPI_Receive_DMA>:
{
 80057c0:	b570      	push	{r4, r5, r6, lr}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80057c2:	6885      	ldr	r5, [r0, #8]
{
 80057c4:	4604      	mov	r4, r0
 80057c6:	460e      	mov	r6, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80057c8:	b925      	cbnz	r5, 80057d4 <HAL_SPI_Receive_DMA+0x14>
 80057ca:	6843      	ldr	r3, [r0, #4]
 80057cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d0:	f000 808d 	beq.w	80058ee <HAL_SPI_Receive_DMA+0x12e>
  __HAL_LOCK(hspi);
 80057d4:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80057d8:	2b01      	cmp	r3, #1
 80057da:	f000 8097 	beq.w	800590c <HAL_SPI_Receive_DMA+0x14c>
 80057de:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80057e0:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 80057e4:	428b      	cmp	r3, r1
  __HAL_LOCK(hspi);
 80057e6:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 80057ea:	d168      	bne.n	80058be <HAL_SPI_Receive_DMA+0xfe>
  if ((pData == NULL) || (Size == 0UL))
 80057ec:	2e00      	cmp	r6, #0
 80057ee:	d073      	beq.n	80058d8 <HAL_SPI_Receive_DMA+0x118>
 80057f0:	fab2 f182 	clz	r1, r2
 80057f4:	0949      	lsrs	r1, r1, #5
 80057f6:	2900      	cmp	r1, #0
 80057f8:	d16e      	bne.n	80058d8 <HAL_SPI_Receive_DMA+0x118>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057fa:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057fc:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005800:	6666      	str	r6, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005802:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->RxXferSize  = Size;
 8005806:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800580a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800580e:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8005812:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8005816:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 800581a:	e9c4 111c 	strd	r1, r1, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800581e:	d06f      	beq.n	8005900 <HAL_SPI_Receive_DMA+0x140>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005820:	68e3      	ldr	r3, [r4, #12]
 8005822:	2b0f      	cmp	r3, #15
 8005824:	d85d      	bhi.n	80058e2 <HAL_SPI_Receive_DMA+0x122>
 8005826:	2b07      	cmp	r3, #7
 8005828:	d84e      	bhi.n	80058c8 <HAL_SPI_Receive_DMA+0x108>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800582a:	6821      	ldr	r1, [r4, #0]
 800582c:	688b      	ldr	r3, [r1, #8]
 800582e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005832:	608b      	str	r3, [r1, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005834:	68e1      	ldr	r1, [r4, #12]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005836:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005838:	2907      	cmp	r1, #7
 800583a:	d869      	bhi.n	8005910 <HAL_SPI_Receive_DMA+0x150>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800583c:	6999      	ldr	r1, [r3, #24]
 800583e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005842:	f000 808a 	beq.w	800595a <HAL_SPI_Receive_DMA+0x19a>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005846:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800584a:	d07f      	beq.n	800594c <HAL_SPI_Receive_DMA+0x18c>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800584c:	4947      	ldr	r1, [pc, #284]	; (800596c <HAL_SPI_Receive_DMA+0x1ac>)
 800584e:	4615      	mov	r5, r2
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005850:	4847      	ldr	r0, [pc, #284]	; (8005970 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 8005852:	2200      	movs	r2, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005854:	6419      	str	r1, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005856:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005858:	4946      	ldr	r1, [pc, #280]	; (8005974 <HAL_SPI_Receive_DMA+0x1b4>)
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800585a:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800585c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800585e:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8005860:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005862:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005864:	6821      	ldr	r1, [r4, #0]
 8005866:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800586a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800586c:	3130      	adds	r1, #48	; 0x30
 800586e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005870:	f7fb ff40 	bl	80016f4 <HAL_DMA_Start_IT>
 8005874:	2800      	cmp	r0, #0
 8005876:	d158      	bne.n	800592a <HAL_SPI_Receive_DMA+0x16a>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005878:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800587a:	6822      	ldr	r2, [r4, #0]
 800587c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800587e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005884:	4b3c      	ldr	r3, [pc, #240]	; (8005978 <HAL_SPI_Receive_DMA+0x1b8>)
 8005886:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800588a:	bf18      	it	ne
 800588c:	432b      	orrne	r3, r5
 800588e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8005890:	6822      	ldr	r2, [r4, #0]
 8005892:	6893      	ldr	r3, [r2, #8]
 8005894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005898:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800589a:	6822      	ldr	r2, [r4, #0]
 800589c:	6913      	ldr	r3, [r2, #16]
 800589e:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 80058a2:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 80058a4:	6822      	ldr	r2, [r4, #0]
 80058a6:	6813      	ldr	r3, [r2, #0]
 80058a8:	f043 0301 	orr.w	r3, r3, #1
 80058ac:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ae:	6863      	ldr	r3, [r4, #4]
 80058b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058b4:	d044      	beq.n	8005940 <HAL_SPI_Receive_DMA+0x180>
  __HAL_UNLOCK(hspi);
 80058b6:	2300      	movs	r3, #0
 80058b8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80058bc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 80058be:	2300      	movs	r3, #0
    return errorcode;
 80058c0:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 80058c2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80058c8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d0:	d0ab      	beq.n	800582a <HAL_SPI_Receive_DMA+0x6a>
 80058d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058d6:	d0a8      	beq.n	800582a <HAL_SPI_Receive_DMA+0x6a>
    __HAL_UNLOCK(hspi);
 80058d8:	2300      	movs	r3, #0
    return errorcode;
 80058da:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 80058dc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80058e0:	bd70      	pop	{r4, r5, r6, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80058e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058ea:	d1f5      	bne.n	80058d8 <HAL_SPI_Receive_DMA+0x118>
 80058ec:	e79d      	b.n	800582a <HAL_SPI_Receive_DMA+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058ee:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80058f0:	4613      	mov	r3, r2
 80058f2:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058f4:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
}
 80058f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80058fc:	f7ff be54 	b.w	80055a8 <HAL_SPI_TransmitReceive_DMA>
    SPI_1LINE_RX(hspi);
 8005900:	6821      	ldr	r1, [r4, #0]
 8005902:	680b      	ldr	r3, [r1, #0]
 8005904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005908:	600b      	str	r3, [r1, #0]
 800590a:	e789      	b.n	8005820 <HAL_SPI_Receive_DMA+0x60>
  __HAL_LOCK(hspi);
 800590c:	2002      	movs	r0, #2
}
 800590e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8005910:	290f      	cmp	r1, #15
 8005912:	d89b      	bhi.n	800584c <HAL_SPI_Receive_DMA+0x8c>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005914:	6999      	ldr	r1, [r3, #24]
 8005916:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800591a:	d197      	bne.n	800584c <HAL_SPI_Receive_DMA+0x8c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800591c:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8005920:	3101      	adds	r1, #1
 8005922:	0849      	lsrs	r1, r1, #1
 8005924:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8005928:	e790      	b.n	800584c <HAL_SPI_Receive_DMA+0x8c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800592a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800592e:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005930:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 8005934:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005936:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800593a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 800593e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005940:	6822      	ldr	r2, [r4, #0]
 8005942:	6813      	ldr	r3, [r2, #0]
 8005944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e7b4      	b.n	80058b6 <HAL_SPI_Receive_DMA+0xf6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800594c:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8005950:	3103      	adds	r1, #3
 8005952:	0889      	lsrs	r1, r1, #2
 8005954:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8005958:	e778      	b.n	800584c <HAL_SPI_Receive_DMA+0x8c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800595a:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 800595e:	3101      	adds	r1, #1
 8005960:	0849      	lsrs	r1, r1, #1
 8005962:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8005966:	6999      	ldr	r1, [r3, #24]
 8005968:	e76d      	b.n	8005846 <HAL_SPI_Receive_DMA+0x86>
 800596a:	bf00      	nop
 800596c:	08005a11 	.word	0x08005a11
 8005970:	080059a9 	.word	0x080059a9
 8005974:	08005a31 	.word	0x08005a31
 8005978:	ffff0000 	.word	0xffff0000

0800597c <HAL_SPI_TxCpltCallback>:
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop

08005980 <SPI_DMATransmitCplt>:
{
 8005980:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005982:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8005984:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8005988:	2b07      	cmp	r3, #7
 800598a:	d009      	beq.n	80059a0 <SPI_DMATransmitCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800598c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005994:	d005      	beq.n	80059a2 <SPI_DMATransmitCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8005996:	6802      	ldr	r2, [r0, #0]
 8005998:	6913      	ldr	r3, [r2, #16]
 800599a:	f043 0308 	orr.w	r3, r3, #8
 800599e:	6113      	str	r3, [r2, #16]
}
 80059a0:	bd08      	pop	{r3, pc}
      HAL_SPI_TxCpltCallback(hspi);
 80059a2:	f7ff ffeb 	bl	800597c <HAL_SPI_TxCpltCallback>
}
 80059a6:	bd08      	pop	{r3, pc}

080059a8 <SPI_DMAReceiveCplt>:
{
 80059a8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80059ac:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80059b0:	2b07      	cmp	r3, #7
 80059b2:	d009      	beq.n	80059c8 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80059b4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059bc:	d005      	beq.n	80059ca <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80059be:	6802      	ldr	r2, [r0, #0]
 80059c0:	6913      	ldr	r3, [r2, #16]
 80059c2:	f043 0308 	orr.w	r3, r3, #8
 80059c6:	6113      	str	r3, [r2, #16]
}
 80059c8:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 80059ca:	f001 f8ed 	bl	8006ba8 <HAL_SPI_RxCpltCallback>
}
 80059ce:	bd08      	pop	{r3, pc}

080059d0 <HAL_SPI_TxRxCpltCallback>:
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop

080059d4 <SPI_DMATransmitReceiveCplt>:
{
 80059d4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80059d8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80059dc:	2b07      	cmp	r3, #7
 80059de:	d009      	beq.n	80059f4 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80059e0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e8:	d005      	beq.n	80059f6 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80059ea:	6802      	ldr	r2, [r0, #0]
 80059ec:	6913      	ldr	r3, [r2, #16]
 80059ee:	f043 0308 	orr.w	r3, r3, #8
 80059f2:	6113      	str	r3, [r2, #16]
}
 80059f4:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 80059f6:	f7ff ffeb 	bl	80059d0 <HAL_SPI_TxRxCpltCallback>
}
 80059fa:	bd08      	pop	{r3, pc}

080059fc <HAL_SPI_TxHalfCpltCallback>:
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop

08005a00 <SPI_DMAHalfTransmitCplt>:
{
 8005a00:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005a02:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005a04:	f7ff fffa 	bl	80059fc <HAL_SPI_TxHalfCpltCallback>
}
 8005a08:	bd08      	pop	{r3, pc}
 8005a0a:	bf00      	nop

08005a0c <HAL_SPI_RxHalfCpltCallback>:
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop

08005a10 <SPI_DMAHalfReceiveCplt>:
{
 8005a10:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005a12:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005a14:	f7ff fffa 	bl	8005a0c <HAL_SPI_RxHalfCpltCallback>
}
 8005a18:	bd08      	pop	{r3, pc}
 8005a1a:	bf00      	nop

08005a1c <HAL_SPI_TxRxHalfCpltCallback>:
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop

08005a20 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8005a20:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005a22:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005a24:	f7ff fffa 	bl	8005a1c <HAL_SPI_TxRxHalfCpltCallback>
}
 8005a28:	bd08      	pop	{r3, pc}
 8005a2a:	bf00      	nop

08005a2c <HAL_SPI_ErrorCallback>:
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop

08005a30 <SPI_DMAError>:
{
 8005a30:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a32:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005a34:	f7fc fe84 	bl	8002740 <HAL_DMA_GetError>
 8005a38:	2802      	cmp	r0, #2
 8005a3a:	d066      	beq.n	8005b0a <SPI_DMAError+0xda>
  uint32_t itflag = hspi->Instance->SR;
 8005a3c:	6821      	ldr	r1, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005a3e:	4a33      	ldr	r2, [pc, #204]	; (8005b0c <SPI_DMAError+0xdc>)
  uint32_t itflag = hspi->Instance->SR;
 8005a40:	694b      	ldr	r3, [r1, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005a42:	6988      	ldr	r0, [r1, #24]
 8005a44:	f040 0008 	orr.w	r0, r0, #8
 8005a48:	6188      	str	r0, [r1, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005a4a:	6820      	ldr	r0, [r4, #0]
 8005a4c:	6981      	ldr	r1, [r0, #24]
 8005a4e:	f041 0110 	orr.w	r1, r1, #16
 8005a52:	6181      	str	r1, [r0, #24]
  __HAL_SPI_DISABLE(hspi);
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	6801      	ldr	r1, [r0, #0]
 8005a58:	f021 0101 	bic.w	r1, r1, #1
 8005a5c:	6001      	str	r1, [r0, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005a5e:	6821      	ldr	r1, [r4, #0]
 8005a60:	6908      	ldr	r0, [r1, #16]
 8005a62:	4002      	ands	r2, r0
 8005a64:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005a66:	6821      	ldr	r1, [r4, #0]
 8005a68:	688a      	ldr	r2, [r1, #8]
 8005a6a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005a6e:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a70:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8005a74:	2a04      	cmp	r2, #4
 8005a76:	d00c      	beq.n	8005a92 <SPI_DMAError+0x62>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005a78:	0698      	lsls	r0, r3, #26
 8005a7a:	d50a      	bpl.n	8005a92 <SPI_DMAError+0x62>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005a7c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005a80:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005a82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a86:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005a8a:	698a      	ldr	r2, [r1, #24]
 8005a8c:	f042 0220 	orr.w	r2, r2, #32
 8005a90:	618a      	str	r2, [r1, #24]
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a92:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8005a96:	2a03      	cmp	r2, #3
 8005a98:	d00c      	beq.n	8005ab4 <SPI_DMAError+0x84>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005a9a:	0659      	lsls	r1, r3, #25
 8005a9c:	d50a      	bpl.n	8005ab4 <SPI_DMAError+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a9e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aa2:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005aa4:	f042 0204 	orr.w	r2, r2, #4
 8005aa8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aac:	698a      	ldr	r2, [r1, #24]
 8005aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab2:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005ab4:	059a      	lsls	r2, r3, #22
 8005ab6:	d50a      	bpl.n	8005ace <SPI_DMAError+0x9e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ab8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005abc:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005abe:	f042 0201 	orr.w	r2, r2, #1
 8005ac2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ac6:	698a      	ldr	r2, [r1, #24]
 8005ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005acc:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005ace:	05db      	lsls	r3, r3, #23
 8005ad0:	d50a      	bpl.n	8005ae8 <SPI_DMAError+0xb8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ad2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ad6:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ad8:	f043 0308 	orr.w	r3, r3, #8
 8005adc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ae0:	6993      	ldr	r3, [r2, #24]
 8005ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae6:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 8005ae8:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 8005aea:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 8005aec:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 8005aee:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005af2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005af6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005afa:	f043 0310 	orr.w	r3, r3, #16
 8005afe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8005b02:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8005b06:	f7ff ff91 	bl	8005a2c <HAL_SPI_ErrorCallback>
}
 8005b0a:	bd10      	pop	{r4, pc}
 8005b0c:	fffffc90 	.word	0xfffffc90

08005b10 <HAL_SPI_IRQHandler>:
{
 8005b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 8005b14:	6803      	ldr	r3, [r0, #0]
{
 8005b16:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8005b18:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8005b1a:	695a      	ldr	r2, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005b1c:	f8d3 c008 	ldr.w	ip, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 8005b20:	ea01 0502 	and.w	r5, r1, r2
  HAL_SPI_StateTypeDef State = hspi->State;
 8005b24:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005b28:	f005 0664 	and.w	r6, r5, #100	; 0x64
 8005b2c:	2e04      	cmp	r6, #4
 8005b2e:	f040 8086 	bne.w	8005c3e <HAL_SPI_IRQHandler+0x12e>
    hspi->TxISR(hspi);
 8005b32:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005b34:	f005 0626 	and.w	r6, r5, #38	; 0x26
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005b38:	f005 0545 	and.w	r5, r5, #69	; 0x45
    hspi->TxISR(hspi);
 8005b3c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005b3e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005b40:	4620      	mov	r0, r4
 8005b42:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005b44:	2d01      	cmp	r5, #1
 8005b46:	d102      	bne.n	8005b4e <HAL_SPI_IRQHandler+0x3e>
    hspi->RxISR(hspi);
 8005b48:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005b4e:	2e02      	cmp	r6, #2
 8005b50:	d173      	bne.n	8005c3a <HAL_SPI_IRQHandler+0x12a>
    hspi->TxISR(hspi);
 8005b52:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005b54:	4620      	mov	r0, r4
}
 8005b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8005b5a:	4718      	bx	r3
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005b5c:	0517      	lsls	r7, r2, #20
 8005b5e:	f100 80d9 	bmi.w	8005d14 <HAL_SPI_IRQHandler+0x204>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005b62:	f415 7f58 	tst.w	r5, #864	; 0x360
 8005b66:	d068      	beq.n	8005c3a <HAL_SPI_IRQHandler+0x12a>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005b68:	0668      	lsls	r0, r5, #25
 8005b6a:	d509      	bpl.n	8005b80 <HAL_SPI_IRQHandler+0x70>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b6c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005b70:	f042 0204 	orr.w	r2, r2, #4
 8005b74:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b7e:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005b80:	05a9      	lsls	r1, r5, #22
 8005b82:	d50a      	bpl.n	8005b9a <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b88:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b92:	6993      	ldr	r3, [r2, #24]
 8005b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b98:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005b9a:	05ea      	lsls	r2, r5, #23
 8005b9c:	d50a      	bpl.n	8005bb4 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b9e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ba2:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ba4:	f043 0308 	orr.w	r3, r3, #8
 8005ba8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005bac:	6993      	ldr	r3, [r2, #24]
 8005bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb2:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005bb4:	06ab      	lsls	r3, r5, #26
 8005bb6:	d50a      	bpl.n	8005bce <HAL_SPI_IRQHandler+0xbe>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005bb8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005bbc:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005bc6:	6993      	ldr	r3, [r2, #24]
 8005bc8:	f043 0320 	orr.w	r3, r3, #32
 8005bcc:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bce:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d031      	beq.n	8005c3a <HAL_SPI_IRQHandler+0x12a>
      __HAL_SPI_DISABLE(hspi);
 8005bd6:	6821      	ldr	r1, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005bd8:	f40c 4c40 	and.w	ip, ip, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8005bdc:	4b5e      	ldr	r3, [pc, #376]	; (8005d58 <HAL_SPI_IRQHandler+0x248>)
      __HAL_SPI_DISABLE(hspi);
 8005bde:	680a      	ldr	r2, [r1, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005be0:	f5bc 4f40 	cmp.w	ip, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8005be4:	f022 0201 	bic.w	r2, r2, #1
 8005be8:	600a      	str	r2, [r1, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8005bea:	6822      	ldr	r2, [r4, #0]
 8005bec:	6911      	ldr	r1, [r2, #16]
 8005bee:	ea03 0301 	and.w	r3, r3, r1
 8005bf2:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005bf4:	f040 80a9 	bne.w	8005d4a <HAL_SPI_IRQHandler+0x23a>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005bf8:	6822      	ldr	r2, [r4, #0]
 8005bfa:	6893      	ldr	r3, [r2, #8]
 8005bfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005c00:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8005c02:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005c04:	b15b      	cbz	r3, 8005c1e <HAL_SPI_IRQHandler+0x10e>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c06:	4a55      	ldr	r2, [pc, #340]	; (8005d5c <HAL_SPI_IRQHandler+0x24c>)
 8005c08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005c0a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005c0c:	f7fc f840 	bl	8001c90 <HAL_DMA_Abort_IT>
 8005c10:	b128      	cbz	r0, 8005c1e <HAL_SPI_IRQHandler+0x10e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c12:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c1a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8005c1e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005c20:	b15b      	cbz	r3, 8005c3a <HAL_SPI_IRQHandler+0x12a>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c22:	4a4e      	ldr	r2, [pc, #312]	; (8005d5c <HAL_SPI_IRQHandler+0x24c>)
 8005c24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c26:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005c28:	f7fc f832 	bl	8001c90 <HAL_DMA_Abort_IT>
 8005c2c:	b128      	cbz	r0, 8005c3a <HAL_SPI_IRQHandler+0x12a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c2e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c36:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8005c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005c3e:	f005 0045 	and.w	r0, r5, #69	; 0x45
 8005c42:	f005 0626 	and.w	r6, r5, #38	; 0x26
 8005c46:	2801      	cmp	r0, #1
 8005c48:	f43f af7e 	beq.w	8005b48 <HAL_SPI_IRQHandler+0x38>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005c4c:	2e02      	cmp	r6, #2
 8005c4e:	d080      	beq.n	8005b52 <HAL_SPI_IRQHandler+0x42>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005c50:	0728      	lsls	r0, r5, #28
 8005c52:	d583      	bpl.n	8005b5c <HAL_SPI_IRQHandler+0x4c>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005c54:	699a      	ldr	r2, [r3, #24]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8005c56:	f41c 4f40 	tst.w	ip, #49152	; 0xc000
 8005c5a:	b2ff      	uxtb	r7, r7
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005c5c:	f042 0208 	orr.w	r2, r2, #8
 8005c60:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005c62:	6821      	ldr	r1, [r4, #0]
 8005c64:	698a      	ldr	r2, [r1, #24]
 8005c66:	f042 0210 	orr.w	r2, r2, #16
 8005c6a:	618a      	str	r2, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005c6c:	6821      	ldr	r1, [r4, #0]
 8005c6e:	698a      	ldr	r2, [r1, #24]
 8005c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c74:	618a      	str	r2, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005c76:	6821      	ldr	r1, [r4, #0]
 8005c78:	690a      	ldr	r2, [r1, #16]
 8005c7a:	f022 0208 	bic.w	r2, r2, #8
 8005c7e:	610a      	str	r2, [r1, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8005c80:	d00f      	beq.n	8005ca2 <HAL_SPI_IRQHandler+0x192>
 8005c82:	2f04      	cmp	r7, #4
 8005c84:	d059      	beq.n	8005d3a <HAL_SPI_IRQHandler+0x22a>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8005c86:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005c88:	69d2      	ldr	r2, [r2, #28]
 8005c8a:	b152      	cbz	r2, 8005ca2 <HAL_SPI_IRQHandler+0x192>
 8005c8c:	2f03      	cmp	r7, #3
 8005c8e:	d03d      	beq.n	8005d0c <HAL_SPI_IRQHandler+0x1fc>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8005c90:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005c92:	69d2      	ldr	r2, [r2, #28]
 8005c94:	b12a      	cbz	r2, 8005ca2 <HAL_SPI_IRQHandler+0x192>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005c96:	2f05      	cmp	r7, #5
 8005c98:	d1cf      	bne.n	8005c3a <HAL_SPI_IRQHandler+0x12a>
      HAL_SPI_TxRxCpltCallback(hspi);
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f7ff fe98 	bl	80059d0 <HAL_SPI_TxRxCpltCallback>
 8005ca0:	e7cb      	b.n	8005c3a <HAL_SPI_IRQHandler+0x12a>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005ca2:	6822      	ldr	r2, [r4, #0]
 8005ca4:	6892      	ldr	r2, [r2, #8]
 8005ca6:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8005caa:	d120      	bne.n	8005cee <HAL_SPI_IRQHandler+0x1de>
        while (hspi->RxXferCount != 0UL)
 8005cac:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8005cb0:	b292      	uxth	r2, r2
 8005cb2:	b1e2      	cbz	r2, 8005cee <HAL_SPI_IRQHandler+0x1de>
 8005cb4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005cb6:	e00f      	b.n	8005cd8 <HAL_SPI_IRQHandler+0x1c8>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cbc:	600a      	str	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8005cbe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005cc0:	3104      	adds	r1, #4
 8005cc2:	6661      	str	r1, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8005cc4:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8005cc8:	3a01      	subs	r2, #1
 8005cca:	b292      	uxth	r2, r2
 8005ccc:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8005cd0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8005cd4:	b292      	uxth	r2, r2
 8005cd6:	b152      	cbz	r2, 8005cee <HAL_SPI_IRQHandler+0x1de>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005cd8:	68e2      	ldr	r2, [r4, #12]
 8005cda:	2a0f      	cmp	r2, #15
 8005cdc:	d8ec      	bhi.n	8005cb8 <HAL_SPI_IRQHandler+0x1a8>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cde:	2a07      	cmp	r2, #7
 8005ce0:	d923      	bls.n	8005d2a <HAL_SPI_IRQHandler+0x21a>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005ce2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8005ce4:	800a      	strh	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ce6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005ce8:	3102      	adds	r1, #2
 8005cea:	6661      	str	r1, [r4, #100]	; 0x64
 8005cec:	e7ea      	b.n	8005cc4 <HAL_SPI_IRQHandler+0x1b4>
      SPI_CloseTransfer(hspi);
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f7ff fa80 	bl	80051f4 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cfa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005cfe:	b98b      	cbnz	r3, 8005d24 <HAL_SPI_IRQHandler+0x214>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005d00:	2f05      	cmp	r7, #5
 8005d02:	d0ca      	beq.n	8005c9a <HAL_SPI_IRQHandler+0x18a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005d04:	2f04      	cmp	r7, #4
 8005d06:	d01c      	beq.n	8005d42 <HAL_SPI_IRQHandler+0x232>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005d08:	2f03      	cmp	r7, #3
 8005d0a:	d196      	bne.n	8005c3a <HAL_SPI_IRQHandler+0x12a>
      HAL_SPI_TxCpltCallback(hspi);
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f7ff fe35 	bl	800597c <HAL_SPI_TxCpltCallback>
 8005d12:	e792      	b.n	8005c3a <HAL_SPI_IRQHandler+0x12a>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005d14:	070e      	lsls	r6, r1, #28
 8005d16:	f57f af24 	bpl.w	8005b62 <HAL_SPI_IRQHandler+0x52>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d20:	619a      	str	r2, [r3, #24]
    return;
 8005d22:	e78a      	b.n	8005c3a <HAL_SPI_IRQHandler+0x12a>
        HAL_SPI_ErrorCallback(hspi);
 8005d24:	f7ff fe82 	bl	8005a2c <HAL_SPI_ErrorCallback>
        return;
 8005d28:	e787      	b.n	8005c3a <HAL_SPI_IRQHandler+0x12a>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005d30:	700a      	strb	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d32:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005d34:	3101      	adds	r1, #1
 8005d36:	6661      	str	r1, [r4, #100]	; 0x64
 8005d38:	e7c4      	b.n	8005cc4 <HAL_SPI_IRQHandler+0x1b4>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8005d3a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005d3c:	69d2      	ldr	r2, [r2, #28]
 8005d3e:	2a00      	cmp	r2, #0
 8005d40:	d0af      	beq.n	8005ca2 <HAL_SPI_IRQHandler+0x192>
      HAL_SPI_RxCpltCallback(hspi);
 8005d42:	4620      	mov	r0, r4
 8005d44:	f000 ff30 	bl	8006ba8 <HAL_SPI_RxCpltCallback>
 8005d48:	e777      	b.n	8005c3a <HAL_SPI_IRQHandler+0x12a>
        hspi->State = HAL_SPI_STATE_READY;
 8005d4a:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8005d4c:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8005d4e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005d52:	f7ff fe6b 	bl	8005a2c <HAL_SPI_ErrorCallback>
 8005d56:	e770      	b.n	8005c3a <HAL_SPI_IRQHandler+0x12a>
 8005d58:	fffffc94 	.word	0xfffffc94
 8005d5c:	08005d61 	.word	0x08005d61

08005d60 <SPI_DMAAbortOnError>:
{
 8005d60:	b508      	push	{r3, lr}
  hspi->RxXferCount = (uint16_t) 0UL;
 8005d62:	2200      	movs	r2, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d64:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_READY;
 8005d66:	2101      	movs	r1, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 8005d68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  HAL_SPI_ErrorCallback(hspi);
 8005d6c:	4618      	mov	r0, r3
  hspi->TxXferCount = (uint16_t) 0UL;
 8005d6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8005d72:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8005d76:	f7ff fe59 	bl	8005a2c <HAL_SPI_ErrorCallback>
}
 8005d7a:	bd08      	pop	{r3, pc}

08005d7c <MX_ADC1_Init>:
  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005d7c:	4b6e      	ldr	r3, [pc, #440]	; (8005f38 <MX_ADC1_Init+0x1bc>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8005d7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  hadc1.Instance = ADC1;
 8005d82:	486e      	ldr	r0, [pc, #440]	; (8005f3c <MX_ADC1_Init+0x1c0>)
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 10;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.NbrOfDiscConversion = 4;
 8005d84:	2104      	movs	r1, #4
{
 8005d86:	b530      	push	{r4, r5, lr}
  hadc1.Init.NbrOfConversion = 10;
 8005d88:	240a      	movs	r4, #10
  hadc1.Instance = ADC1;
 8005d8a:	6018      	str	r0, [r3, #0]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8005d8c:	f44f 6098 	mov.w	r0, #1216	; 0x4c0
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005d90:	2508      	movs	r5, #8
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8005d92:	605a      	str	r2, [r3, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8005d94:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  hadc1.Init.NbrOfConversion = 10;
 8005d98:	619c      	str	r4, [r3, #24]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = 2;
 8005d9a:	2402      	movs	r4, #2
  hadc1.Init.NbrOfDiscConversion = 4;
 8005d9c:	6219      	str	r1, [r3, #32]
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8005d9e:	2120      	movs	r1, #32
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8005da0:	6258      	str	r0, [r3, #36]	; 0x24
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 8005da2:	f240 4001 	movw	r0, #1025	; 0x401
{
 8005da6:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005da8:	611d      	str	r5, [r3, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8005dac:	2503      	movs	r5, #3
  ADC_MultiModeTypeDef multimode = {0};
 8005dae:	2200      	movs	r2, #0
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 8005db0:	6498      	str	r0, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005db2:	4618      	mov	r0, r3
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8005db4:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8005db6:	609a      	str	r2, [r3, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8005db8:	9200      	str	r2, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005dba:	9203      	str	r2, [sp, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005dbc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005dbe:	755a      	strb	r2, [r3, #21]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005dc0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8005dc2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8005dc4:	e9c3 410f 	strd	r4, r1, [r3, #60]	; 0x3c
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005dc8:	2101      	movs	r1, #1
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8005dca:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 8005dce:	e9cd 2201 	strd	r2, r2, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005dd2:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8005dd6:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8005dda:	e9cd 2208 	strd	r2, r2, [sp, #32]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005dde:	60d9      	str	r1, [r3, #12]
  hadc1.Init.OversamplingMode = ENABLE;
 8005de0:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005de4:	f7fa fede 	bl	8000ba4 <HAL_ADC_Init>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	f040 80a1 	bne.w	8005f30 <MX_ADC1_Init+0x1b4>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005dee:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005df0:	4669      	mov	r1, sp
 8005df2:	4851      	ldr	r0, [pc, #324]	; (8005f38 <MX_ADC1_Init+0x1bc>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005df4:	9300      	str	r3, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005df6:	f7fa ffef 	bl	8000dd8 <HAL_ADCEx_MultiModeConfigChannel>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	f040 8095 	bne.w	8005f2a <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8005e00:	4a4f      	ldr	r2, [pc, #316]	; (8005f40 <MX_ADC1_Init+0x1c4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005e02:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8005e04:	2102      	movs	r1, #2
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005e06:	f240 70ff 	movw	r0, #2047	; 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005e0a:	2404      	movs	r4, #4
  sConfig.Channel = ADC_CHANNEL_16;
 8005e0c:	9203      	str	r2, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005e0e:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 32768;
 8005e10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  sConfig.OffsetSignedSaturation = DISABLE;
 8005e14:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8005e16:	9105      	str	r1, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005e18:	9006      	str	r0, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e1a:	a903      	add	r1, sp, #12
 8005e1c:	4846      	ldr	r0, [pc, #280]	; (8005f38 <MX_ADC1_Init+0x1bc>)
  sConfig.OffsetSignedSaturation = DISABLE;
 8005e1e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  sConfig.Offset = 32768;
 8005e22:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e26:	f7fa fbfd 	bl	8000624 <HAL_ADC_ConfigChannel>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	d17a      	bne.n	8005f24 <MX_ADC1_Init+0x1a8>
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005e2e:	230c      	movs	r3, #12
  sConfig.Channel = ADC_CHANNEL_17;
 8005e30:	4a44      	ldr	r2, [pc, #272]	; (8005f44 <MX_ADC1_Init+0x1c8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e32:	4841      	ldr	r0, [pc, #260]	; (8005f38 <MX_ADC1_Init+0x1bc>)
 8005e34:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005e38:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e3c:	f7fa fbf2 	bl	8000624 <HAL_ADC_ConfigChannel>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d16c      	bne.n	8005f1e <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005e44:	4a40      	ldr	r2, [pc, #256]	; (8005f48 <MX_ADC1_Init+0x1cc>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005e46:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e48:	a903      	add	r1, sp, #12
 8005e4a:	483b      	ldr	r0, [pc, #236]	; (8005f38 <MX_ADC1_Init+0x1bc>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005e4c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e50:	f7fa fbe8 	bl	8000624 <HAL_ADC_ConfigChannel>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d15f      	bne.n	8005f18 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8005e58:	4a3c      	ldr	r2, [pc, #240]	; (8005f4c <MX_ADC1_Init+0x1d0>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005e5a:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e5c:	a903      	add	r1, sp, #12
 8005e5e:	4836      	ldr	r0, [pc, #216]	; (8005f38 <MX_ADC1_Init+0x1bc>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005e60:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e64:	f7fa fbde 	bl	8000624 <HAL_ADC_ConfigChannel>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d152      	bne.n	8005f12 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8005e6c:	4c38      	ldr	r4, [pc, #224]	; (8005f50 <MX_ADC1_Init+0x1d4>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8005e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
  sConfig.Offset = 0;
 8005e72:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e74:	a903      	add	r1, sp, #12
 8005e76:	4830      	ldr	r0, [pc, #192]	; (8005f38 <MX_ADC1_Init+0x1bc>)
  sConfig.Offset = 0;
 8005e78:	9308      	str	r3, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8005e7a:	e9cd 4203 	strd	r4, r2, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e7e:	f7fa fbd1 	bl	8000624 <HAL_ADC_ConfigChannel>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d142      	bne.n	8005f0c <MX_ADC1_Init+0x190>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8005e86:	4a33      	ldr	r2, [pc, #204]	; (8005f54 <MX_ADC1_Init+0x1d8>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8005e88:	f44f 7383 	mov.w	r3, #262	; 0x106
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e8c:	a903      	add	r1, sp, #12
 8005e8e:	482a      	ldr	r0, [pc, #168]	; (8005f38 <MX_ADC1_Init+0x1bc>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8005e90:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e94:	f7fa fbc6 	bl	8000624 <HAL_ADC_ConfigChannel>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d134      	bne.n	8005f06 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005e9c:	4a2e      	ldr	r2, [pc, #184]	; (8005f58 <MX_ADC1_Init+0x1dc>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8005e9e:	f44f 7386 	mov.w	r3, #268	; 0x10c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005ea2:	a903      	add	r1, sp, #12
 8005ea4:	4824      	ldr	r0, [pc, #144]	; (8005f38 <MX_ADC1_Init+0x1bc>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8005ea6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005eaa:	f7fa fbbb 	bl	8000624 <HAL_ADC_ConfigChannel>
 8005eae:	bb38      	cbnz	r0, 8005f00 <MX_ADC1_Init+0x184>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005eb0:	4a2a      	ldr	r2, [pc, #168]	; (8005f5c <MX_ADC1_Init+0x1e0>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8005eb2:	f44f 7389 	mov.w	r3, #274	; 0x112
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005eb6:	a903      	add	r1, sp, #12
 8005eb8:	481f      	ldr	r0, [pc, #124]	; (8005f38 <MX_ADC1_Init+0x1bc>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8005eba:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005ebe:	f7fa fbb1 	bl	8000624 <HAL_ADC_ConfigChannel>
 8005ec2:	b9d0      	cbnz	r0, 8005efa <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005ec4:	4a26      	ldr	r2, [pc, #152]	; (8005f60 <MX_ADC1_Init+0x1e4>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8005ec6:	f44f 738c 	mov.w	r3, #280	; 0x118
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005eca:	a903      	add	r1, sp, #12
 8005ecc:	481a      	ldr	r0, [pc, #104]	; (8005f38 <MX_ADC1_Init+0x1bc>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8005ece:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005ed2:	f7fa fba7 	bl	8000624 <HAL_ADC_ConfigChannel>
 8005ed6:	b968      	cbnz	r0, 8005ef4 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005ed8:	4a22      	ldr	r2, [pc, #136]	; (8005f64 <MX_ADC1_Init+0x1e8>)
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8005eda:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005ede:	a903      	add	r1, sp, #12
 8005ee0:	4815      	ldr	r0, [pc, #84]	; (8005f38 <MX_ADC1_Init+0x1bc>)
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8005ee2:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005ee6:	f7fa fb9d 	bl	8000624 <HAL_ADC_ConfigChannel>
 8005eea:	b108      	cbz	r0, 8005ef0 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8005eec:	f000 fe5e 	bl	8006bac <Error_Handler>
  }

}
 8005ef0:	b00b      	add	sp, #44	; 0x2c
 8005ef2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8005ef4:	f000 fe5a 	bl	8006bac <Error_Handler>
 8005ef8:	e7ee      	b.n	8005ed8 <MX_ADC1_Init+0x15c>
    Error_Handler();
 8005efa:	f000 fe57 	bl	8006bac <Error_Handler>
 8005efe:	e7e1      	b.n	8005ec4 <MX_ADC1_Init+0x148>
    Error_Handler();
 8005f00:	f000 fe54 	bl	8006bac <Error_Handler>
 8005f04:	e7d4      	b.n	8005eb0 <MX_ADC1_Init+0x134>
    Error_Handler();
 8005f06:	f000 fe51 	bl	8006bac <Error_Handler>
 8005f0a:	e7c7      	b.n	8005e9c <MX_ADC1_Init+0x120>
    Error_Handler();
 8005f0c:	f000 fe4e 	bl	8006bac <Error_Handler>
 8005f10:	e7b9      	b.n	8005e86 <MX_ADC1_Init+0x10a>
    Error_Handler();
 8005f12:	f000 fe4b 	bl	8006bac <Error_Handler>
 8005f16:	e7a9      	b.n	8005e6c <MX_ADC1_Init+0xf0>
    Error_Handler();
 8005f18:	f000 fe48 	bl	8006bac <Error_Handler>
 8005f1c:	e79c      	b.n	8005e58 <MX_ADC1_Init+0xdc>
    Error_Handler();
 8005f1e:	f000 fe45 	bl	8006bac <Error_Handler>
 8005f22:	e78f      	b.n	8005e44 <MX_ADC1_Init+0xc8>
    Error_Handler();
 8005f24:	f000 fe42 	bl	8006bac <Error_Handler>
 8005f28:	e781      	b.n	8005e2e <MX_ADC1_Init+0xb2>
    Error_Handler();
 8005f2a:	f000 fe3f 	bl	8006bac <Error_Handler>
 8005f2e:	e767      	b.n	8005e00 <MX_ADC1_Init+0x84>
    Error_Handler();
 8005f30:	f000 fe3c 	bl	8006bac <Error_Handler>
 8005f34:	e75b      	b.n	8005dee <MX_ADC1_Init+0x72>
 8005f36:	bf00      	nop
 8005f38:	200000f4 	.word	0x200000f4
 8005f3c:	40022000 	.word	0x40022000
 8005f40:	43210000 	.word	0x43210000
 8005f44:	47520000 	.word	0x47520000
 8005f48:	3ac04000 	.word	0x3ac04000
 8005f4c:	3ef08000 	.word	0x3ef08000
 8005f50:	4b840000 	.word	0x4b840000
 8005f54:	4fb80000 	.word	0x4fb80000
 8005f58:	0c900008 	.word	0x0c900008
 8005f5c:	1d500080 	.word	0x1d500080
 8005f60:	10c00010 	.word	0x10c00010
 8005f64:	21800100 	.word	0x21800100

08005f68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005f68:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8005f6a:	4b3e      	ldr	r3, [pc, #248]	; (8006064 <HAL_ADC_MspInit+0xfc>)
{
 8005f6c:	b08b      	sub	sp, #44	; 0x2c
  if(adcHandle->Instance==ADC1)
 8005f6e:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f70:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8005f72:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f74:	9409      	str	r4, [sp, #36]	; 0x24
 8005f76:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8005f7a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8005f7e:	d001      	beq.n	8005f84 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005f80:	b00b      	add	sp, #44	; 0x2c
 8005f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005f84:	4b38      	ldr	r3, [pc, #224]	; (8006068 <HAL_ADC_MspInit+0x100>)
 8005f86:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005f88:	20ff      	movs	r0, #255	; 0xff
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f8a:	2703      	movs	r7, #3
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005f8c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f90:	a905      	add	r1, sp, #20
    hdma_adc1.Instance = DMA1_Stream0;
 8005f92:	4d36      	ldr	r5, [pc, #216]	; (800606c <HAL_ADC_MspInit+0x104>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005f94:	f042 0220 	orr.w	r2, r2, #32
 8005f98:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8005f9c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8005fa0:	f002 0220 	and.w	r2, r2, #32
 8005fa4:	9201      	str	r2, [sp, #4]
 8005fa6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fa8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fac:	f042 0201 	orr.w	r2, r2, #1
 8005fb0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005fb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fb8:	f002 0201 	and.w	r2, r2, #1
 8005fbc:	9202      	str	r2, [sp, #8]
 8005fbe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fc4:	f042 0204 	orr.w	r2, r2, #4
 8005fc8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005fcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fd0:	f002 0204 	and.w	r2, r2, #4
 8005fd4:	9203      	str	r2, [sp, #12]
 8005fd6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fdc:	f042 0202 	orr.w	r2, r2, #2
 8005fe0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005fe8:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fea:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fee:	4820      	ldr	r0, [pc, #128]	; (8006070 <HAL_ADC_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ff0:	9706      	str	r7, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ff2:	9304      	str	r3, [sp, #16]
 8005ff4:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ff6:	f7fc fba5 	bl	8002744 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005ffa:	2330      	movs	r3, #48	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ffc:	a905      	add	r1, sp, #20
 8005ffe:	481d      	ldr	r0, [pc, #116]	; (8006074 <HAL_ADC_MspInit+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006000:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006002:	e9cd 7406 	strd	r7, r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006006:	f7fc fb9d 	bl	8002744 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800600a:	a905      	add	r1, sp, #20
 800600c:	481a      	ldr	r0, [pc, #104]	; (8006078 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800600e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006010:	e9cd 7705 	strd	r7, r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006014:	f7fc fb96 	bl	8002744 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8006018:	4a18      	ldr	r2, [pc, #96]	; (800607c <HAL_ADC_MspInit+0x114>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800601a:	2309      	movs	r3, #9
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800601c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006020:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006024:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006028:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800602c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_adc1.Instance = DMA1_Stream0;
 8006030:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006032:	2204      	movs	r2, #4
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006034:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8006036:	2301      	movs	r3, #1
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006038:	60ac      	str	r4, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800603a:	60ec      	str	r4, [r5, #12]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800603c:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800603e:	e9c5 e004 	strd	lr, r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006042:	4628      	mov	r0, r5
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006044:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006048:	e9c5 c706 	strd	ip, r7, [r5, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800604c:	e9c5 1208 	strd	r1, r2, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006050:	f7fb f87a 	bl	8001148 <HAL_DMA_Init>
 8006054:	b918      	cbnz	r0, 800605e <HAL_ADC_MspInit+0xf6>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006056:	64f5      	str	r5, [r6, #76]	; 0x4c
 8006058:	63ae      	str	r6, [r5, #56]	; 0x38
}
 800605a:	b00b      	add	sp, #44	; 0x2c
 800605c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800605e:	f000 fda5 	bl	8006bac <Error_Handler>
 8006062:	e7f8      	b.n	8006056 <HAL_ADC_MspInit+0xee>
 8006064:	40022000 	.word	0x40022000
 8006068:	58024400 	.word	0x58024400
 800606c:	20000158 	.word	0x20000158
 8006070:	58020000 	.word	0x58020000
 8006074:	58020800 	.word	0x58020800
 8006078:	58020400 	.word	0x58020400
 800607c:	40020010 	.word	0x40020010

08006080 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006080:	4b21      	ldr	r3, [pc, #132]	; (8006108 <MX_DMA_Init+0x88>)
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8006082:	2101      	movs	r1, #1
 8006084:	2200      	movs	r2, #0
 8006086:	200b      	movs	r0, #11
{
 8006088:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800608a:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 800608e:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006090:	430c      	orrs	r4, r1
 8006092:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8006096:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 800609a:	400c      	ands	r4, r1
 800609c:	9400      	str	r4, [sp, #0]
 800609e:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80060a0:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 80060a4:	f044 0402 	orr.w	r4, r4, #2
 80060a8:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 80060ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80060b8:	f7fa ff22 	bl	8000f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80060bc:	200b      	movs	r0, #11
 80060be:	f7fa ff55 	bl	8000f6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 80060c2:	2200      	movs	r2, #0
 80060c4:	2102      	movs	r1, #2
 80060c6:	200c      	movs	r0, #12
 80060c8:	f7fa ff1a 	bl	8000f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80060cc:	200c      	movs	r0, #12
 80060ce:	f7fa ff4d 	bl	8000f6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
 80060d2:	2200      	movs	r2, #0
 80060d4:	2103      	movs	r1, #3
 80060d6:	200d      	movs	r0, #13
 80060d8:	f7fa ff12 	bl	8000f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80060dc:	200d      	movs	r0, #13
 80060de:	f7fa ff45 	bl	8000f6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 2, 0);
 80060e2:	2200      	movs	r2, #0
 80060e4:	2102      	movs	r1, #2
 80060e6:	200e      	movs	r0, #14
 80060e8:	f7fa ff0a 	bl	8000f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80060ec:	200e      	movs	r0, #14
 80060ee:	f7fa ff3d 	bl	8000f6c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80060f2:	2200      	movs	r2, #0
 80060f4:	2038      	movs	r0, #56	; 0x38
 80060f6:	4611      	mov	r1, r2
 80060f8:	f7fa ff02 	bl	8000f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80060fc:	2038      	movs	r0, #56	; 0x38

}
 80060fe:	b002      	add	sp, #8
 8006100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006104:	f7fa bf32 	b.w	8000f6c <HAL_NVIC_EnableIRQ>
 8006108:	58024400 	.word	0x58024400

0800610c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006110:	4b8a      	ldr	r3, [pc, #552]	; (800633c <MX_GPIO_Init+0x230>)
{
 8006112:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006114:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006116:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006118:	f04f 0a02 	mov.w	sl, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800611c:	4f88      	ldr	r7, [pc, #544]	; (8006340 <MX_GPIO_Init+0x234>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800611e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8006120:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006122:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8006124:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006128:	940b      	str	r4, [sp, #44]	; 0x2c
                           PC3 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800612a:	2503      	movs	r5, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800612c:	940c      	str	r4, [sp, #48]	; 0x30
 800612e:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006130:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8006134:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006350 <MX_GPIO_Init+0x244>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006138:	f040 0c10 	orr.w	ip, r0, #16
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 800613c:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8006354 <MX_GPIO_Init+0x248>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8006140:	4638      	mov	r0, r7
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8006142:	f8df b214 	ldr.w	fp, [pc, #532]	; 8006358 <MX_GPIO_Init+0x24c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006146:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800614a:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800614e:	f00c 0c10 	and.w	ip, ip, #16
 8006152:	f8cd c004 	str.w	ip, [sp, #4]
 8006156:	f8dd c004 	ldr.w	ip, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800615a:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800615e:	f04c 0c04 	orr.w	ip, ip, #4
 8006162:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 8006166:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800616a:	f00c 0c04 	and.w	ip, ip, #4
 800616e:	f8cd c008 	str.w	ip, [sp, #8]
 8006172:	f8dd c008 	ldr.w	ip, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006176:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800617a:	f04c 0c20 	orr.w	ip, ip, #32
 800617e:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 8006182:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8006186:	f00c 0c20 	and.w	ip, ip, #32
 800618a:	f8cd c00c 	str.w	ip, [sp, #12]
 800618e:	f8dd c00c 	ldr.w	ip, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006192:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8006196:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800619a:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800619e:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80061a2:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 80061a6:	f8cd c010 	str.w	ip, [sp, #16]
 80061aa:	f8dd c010 	ldr.w	ip, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ae:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80061b2:	ea4c 0c06 	orr.w	ip, ip, r6
 80061b6:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 80061ba:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80061be:	ea0c 0c06 	and.w	ip, ip, r6
 80061c2:	f8cd c014 	str.w	ip, [sp, #20]
 80061c6:	f8dd c014 	ldr.w	ip, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ca:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80061ce:	ea4c 0c0a 	orr.w	ip, ip, sl
 80061d2:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 80061d6:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80061da:	ea0c 0c0a 	and.w	ip, ip, sl
 80061de:	f8cd c018 	str.w	ip, [sp, #24]
 80061e2:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80061e6:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80061ea:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 80061ee:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 80061f2:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80061f6:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 80061fa:	f8cd c01c 	str.w	ip, [sp, #28]
 80061fe:	f8dd c01c 	ldr.w	ip, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006202:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8006206:	f04c 0c08 	orr.w	ip, ip, #8
 800620a:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800620e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	9308      	str	r3, [sp, #32]
 8006218:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800621a:	f7fc fbb7 	bl	800298c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800621e:	4622      	mov	r2, r4
 8006220:	4648      	mov	r0, r9
 8006222:	2180      	movs	r1, #128	; 0x80
 8006224:	f7fc fbb2 	bl	800298c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8006228:	4622      	mov	r2, r4
 800622a:	4640      	mov	r0, r8
 800622c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8006230:	f7fc fbac 	bl	800298c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8006234:	4622      	mov	r2, r4
 8006236:	4658      	mov	r0, fp
 8006238:	2110      	movs	r1, #16
 800623a:	f7fc fba7 	bl	800298c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800623e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006242:	a909      	add	r1, sp, #36	; 0x24
 8006244:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006246:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800624a:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800624e:	f7fc fa79 	bl	8002744 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006252:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006256:	a909      	add	r1, sp, #36	; 0x24
 8006258:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800625a:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800625e:	e9cd a40b 	strd	sl, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006262:	f7fc fa6f 	bl	8002744 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8006266:	f649 73cf 	movw	r3, #40911	; 0x9fcf
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800626a:	4638      	mov	r0, r7
 800626c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800626e:	940b      	str	r4, [sp, #44]	; 0x2c
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006270:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006274:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006278:	f7fc fa64 	bl	8002744 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800627c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006280:	a909      	add	r1, sp, #36	; 0x24
 8006282:	4830      	ldr	r0, [pc, #192]	; (8006344 <MX_GPIO_Init+0x238>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006284:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006286:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800628a:	f7fc fa5b 	bl	8002744 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6
 800628e:	f244 33e4 	movw	r3, #17380	; 0x43e4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006292:	a909      	add	r1, sp, #36	; 0x24
 8006294:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6
 8006296:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006298:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800629c:	f7fc fa52 	bl	8002744 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80062a0:	f24f 137f 	movw	r3, #61823	; 0xf17f
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80062a4:	a909      	add	r1, sp, #36	; 0x24
 80062a6:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80062a8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062aa:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80062ae:	f7fc fa49 	bl	8002744 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80062b2:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062b6:	a909      	add	r1, sp, #36	; 0x24
 80062b8:	4823      	ldr	r0, [pc, #140]	; (8006348 <MX_GPIO_Init+0x23c>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80062ba:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062bc:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062c0:	f7fc fa40 	bl	8002744 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
 80062c4:	f24f 737f 	movw	r3, #63359	; 0xf77f
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062c8:	a909      	add	r1, sp, #36	; 0x24
 80062ca:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
 80062cc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ce:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062d2:	f7fc fa37 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80062d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80062da:	4b1c      	ldr	r3, [pc, #112]	; (800634c <MX_GPIO_Init+0x240>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062dc:	4638      	mov	r0, r7
 80062de:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80062e2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062e6:	f7fc fa2d 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80062ea:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80062ec:	4648      	mov	r0, r9
 80062ee:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80062f0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062f2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f4:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80062f8:	f7fc fa24 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 80062fc:	f44f 4315 	mov.w	r3, #38144	; 0x9500
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006300:	a909      	add	r1, sp, #36	; 0x24
 8006302:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8006304:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006306:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800630a:	f7fc fa1b 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800630e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006312:	4640      	mov	r0, r8
 8006314:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006316:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006318:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800631a:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800631e:	f7fc fa11 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006322:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006324:	a909      	add	r1, sp, #36	; 0x24
 8006326:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006328:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800632a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800632c:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006330:	f7fc fa08 	bl	8002744 <HAL_GPIO_Init>

}
 8006334:	b00f      	add	sp, #60	; 0x3c
 8006336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633a:	bf00      	nop
 800633c:	58024400 	.word	0x58024400
 8006340:	58020800 	.word	0x58020800
 8006344:	58021400 	.word	0x58021400
 8006348:	58021000 	.word	0x58021000
 800634c:	11110000 	.word	0x11110000
 8006350:	58021800 	.word	0x58021800
 8006354:	58020000 	.word	0x58020000
 8006358:	58020400 	.word	0x58020400

0800635c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800635c:	b538      	push	{r3, r4, r5, lr}

  hi2c2.Instance = I2C2;
 800635e:	4b13      	ldr	r3, [pc, #76]	; (80063ac <MX_I2C2_Init+0x50>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
 8006360:	2200      	movs	r2, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006362:	2101      	movs	r1, #1
  hi2c2.Instance = I2C2;
 8006364:	4d12      	ldr	r5, [pc, #72]	; (80063b0 <MX_I2C2_Init+0x54>)
  hi2c2.Init.Timing = 0x00B03FDB;
 8006366:	4c13      	ldr	r4, [pc, #76]	; (80063b4 <MX_I2C2_Init+0x58>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006368:	4618      	mov	r0, r3
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800636a:	621a      	str	r2, [r3, #32]
  hi2c2.Init.Timing = 0x00B03FDB;
 800636c:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c2.Init.OwnAddress1 = 0;
 8006370:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8006374:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006378:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800637c:	f7fc fb0a 	bl	8002994 <HAL_I2C_Init>
 8006380:	b988      	cbnz	r0, 80063a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006382:	2100      	movs	r1, #0
 8006384:	4809      	ldr	r0, [pc, #36]	; (80063ac <MX_I2C2_Init+0x50>)
 8006386:	f7fc fb63 	bl	8002a50 <HAL_I2CEx_ConfigAnalogFilter>
 800638a:	b948      	cbnz	r0, 80063a0 <MX_I2C2_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800638c:	2100      	movs	r1, #0
 800638e:	4807      	ldr	r0, [pc, #28]	; (80063ac <MX_I2C2_Init+0x50>)
 8006390:	f7fc fb8c 	bl	8002aac <HAL_I2CEx_ConfigDigitalFilter>
 8006394:	b900      	cbnz	r0, 8006398 <MX_I2C2_Init+0x3c>
  {
    Error_Handler();
  }

}
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800639c:	f000 bc06 	b.w	8006bac <Error_Handler>
    Error_Handler();
 80063a0:	f000 fc04 	bl	8006bac <Error_Handler>
 80063a4:	e7f2      	b.n	800638c <MX_I2C2_Init+0x30>
    Error_Handler();
 80063a6:	f000 fc01 	bl	8006bac <Error_Handler>
 80063aa:	e7ea      	b.n	8006382 <MX_I2C2_Init+0x26>
 80063ac:	200001d0 	.word	0x200001d0
 80063b0:	40005800 	.word	0x40005800
 80063b4:	00b03fdb 	.word	0x00b03fdb

080063b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80063b8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C2)
 80063ba:	4a1a      	ldr	r2, [pc, #104]	; (8006424 <HAL_I2C_MspInit+0x6c>)
{
 80063bc:	b088      	sub	sp, #32
  if(i2cHandle->Instance==I2C2)
 80063be:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063c0:	2300      	movs	r3, #0
  if(i2cHandle->Instance==I2C2)
 80063c2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063c4:	9307      	str	r3, [sp, #28]
 80063c6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80063ca:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(i2cHandle->Instance==I2C2)
 80063ce:	d001      	beq.n	80063d4 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80063d0:	b008      	add	sp, #32
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063d4:	4c14      	ldr	r4, [pc, #80]	; (8006428 <HAL_I2C_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063d6:	2012      	movs	r0, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80063d8:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80063da:	f44f 6640 	mov.w	r6, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063de:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063e2:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063e4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063e6:	f043 0302 	orr.w	r3, r3, #2
 80063ea:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80063ee:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063f2:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063f4:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063f8:	480c      	ldr	r0, [pc, #48]	; (800642c <HAL_I2C_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80063fa:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006400:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006404:	f7fc f99e 	bl	8002744 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006408:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800640c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006410:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8006414:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8006418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800641c:	9302      	str	r3, [sp, #8]
 800641e:	9b02      	ldr	r3, [sp, #8]
}
 8006420:	b008      	add	sp, #32
 8006422:	bd70      	pop	{r4, r5, r6, pc}
 8006424:	40005800 	.word	0x40005800
 8006428:	58024400 	.word	0x58024400
 800642c:	58020400 	.word	0x58020400

08006430 <randomNumber>:
}

/* USER CODE BEGIN 4 */


float randomNumber(void) {
 8006430:	b500      	push	{lr}
 8006432:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8006434:	4807      	ldr	r0, [pc, #28]	; (8006454 <randomNumber+0x24>)
 8006436:	a901      	add	r1, sp, #4
 8006438:	f7fe fa62 	bl	8004900 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800643c:	eddd 7a01 	vldr	s15, [sp, #4]
 8006440:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8006458 <randomNumber+0x28>
 8006444:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8006448:	ee27 0a80 	vmul.f32	s0, s15, s0
 800644c:	b003      	add	sp, #12
 800644e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006452:	bf00      	nop
 8006454:	20018ba0 	.word	0x20018ba0
 8006458:	2f80000d 	.word	0x2f80000d

0800645c <SystemClock_Config>:
{
 800645c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006460:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006462:	224c      	movs	r2, #76	; 0x4c
 8006464:	2100      	movs	r1, #0
 8006466:	a80a      	add	r0, sp, #40	; 0x28
 8006468:	f001 fc10 	bl	8007c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800646c:	2220      	movs	r2, #32
 800646e:	2100      	movs	r1, #0
 8006470:	a802      	add	r0, sp, #8
 8006472:	f001 fc0b 	bl	8007c8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006476:	22bc      	movs	r2, #188	; 0xbc
 8006478:	2100      	movs	r1, #0
 800647a:	a81d      	add	r0, sp, #116	; 0x74
 800647c:	f001 fc06 	bl	8007c8c <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006480:	2002      	movs	r0, #2
 8006482:	f7fc fb3f 	bl	8002b04 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006486:	4b37      	ldr	r3, [pc, #220]	; (8006564 <SystemClock_Config+0x108>)
 8006488:	2200      	movs	r2, #0
 800648a:	4937      	ldr	r1, [pc, #220]	; (8006568 <SystemClock_Config+0x10c>)
 800648c:	9201      	str	r2, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800648e:	461a      	mov	r2, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006490:	6998      	ldr	r0, [r3, #24]
 8006492:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8006496:	6198      	str	r0, [r3, #24]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800649e:	9301      	str	r3, [sp, #4]
 80064a0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80064a2:	f043 0301 	orr.w	r3, r3, #1
 80064a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80064a8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80064b2:	6993      	ldr	r3, [r2, #24]
 80064b4:	049b      	lsls	r3, r3, #18
 80064b6:	d5fc      	bpl.n	80064b2 <SystemClock_Config+0x56>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80064b8:	4a2c      	ldr	r2, [pc, #176]	; (800656c <SystemClock_Config+0x110>)
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80064ba:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80064bc:	2423      	movs	r4, #35	; 0x23
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80064be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80064c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80064c4:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80064c6:	2640      	movs	r6, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80064c8:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80064cc:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.PLL.PLLM = 5;
 80064d0:	2105      	movs	r1, #5
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80064d2:	432b      	orrs	r3, r5
 80064d4:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 192;
 80064d6:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80064d8:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80064da:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80064dc:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80064de:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80064e0:	960e      	str	r6, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 5;
 80064e2:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 192;
 80064e4:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80064e6:	970d      	str	r7, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80064e8:	9710      	str	r7, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = 2;
 80064ea:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80064ec:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80064ee:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80064f2:	e9cd 5517 	strd	r5, r5, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80064f6:	e9cd 841a 	strd	r8, r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80064fa:	f7fc fb29 	bl	8002b50 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80064fe:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006502:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006504:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006508:	eb0d 0008 	add.w	r0, sp, r8
 800650c:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800650e:	9609      	str	r6, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006510:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006512:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006514:	f8cd 8014 	str.w	r8, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006518:	e9cd c202 	strd	ip, r2, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800651c:	e9cd 6606 	strd	r6, r6, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006520:	f7fc fe94 	bl	800324c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8006524:	f44f 76ac 	mov.w	r6, #344	; 0x158
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SPI1
 8006528:	f8df e044 	ldr.w	lr, [pc, #68]	; 8006570 <SystemClock_Config+0x114>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800652c:	f04f 0c19 	mov.w	ip, #25
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8006530:	2107      	movs	r1, #7
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8006532:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8006536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800653a:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800653c:	9732      	str	r7, [sp, #200]	; 0xc8
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800653e:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8006540:	9431      	str	r4, [sp, #196]	; 0xc4
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8006542:	9234      	str	r2, [sp, #208]	; 0xd0
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8006544:	9345      	str	r3, [sp, #276]	; 0x114
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006546:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800654a:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800654e:	e9cd 443c 	strd	r4, r4, [sp, #240]	; 0xf0
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8006552:	e9cd ec1d 	strd	lr, ip, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8006556:	e9cd 611f 	strd	r6, r1, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800655a:	f7fd f947 	bl	80037ec <HAL_RCCEx_PeriphCLKConfig>
}
 800655e:	b04c      	add	sp, #304	; 0x130
 8006560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006564:	58024800 	.word	0x58024800
 8006568:	58000400 	.word	0x58000400
 800656c:	58024400 	.word	0x58024400
 8006570:	800a1108 	.word	0x800a1108

08006574 <MPU_Conf>:




void MPU_Conf(void)
{
 8006574:	b510      	push	{r4, lr}
 8006576:	b084      	sub	sp, #16
	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;

	  //D3 Domain�SRAM
	  MPU_InitStruct.BaseAddress = 0x38000000;
 8006578:	f04f 5460 	mov.w	r4, #939524096	; 0x38000000
	  HAL_MPU_Disable();
 800657c:	f7fa fd1c 	bl	8000fb8 <HAL_MPU_Disable>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006580:	2301      	movs	r3, #1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8006582:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8006586:	4a0d      	ldr	r2, [pc, #52]	; (80065bc <MPU_Conf+0x48>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006588:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800658a:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800658e:	9101      	str	r1, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8006590:	e9cd 2302 	strd	r2, r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006594:	f7fa fd32 	bl	8000ffc <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006598:	f240 1101 	movw	r1, #257	; 0x101


	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800659c:	4a08      	ldr	r2, [pc, #32]	; (80065c0 <MPU_Conf+0x4c>)


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800659e:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80065a0:	4b08      	ldr	r3, [pc, #32]	; (80065c4 <MPU_Conf+0x50>)
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80065a2:	f8ad 1000 	strh.w	r1, [sp]
	  MPU_InitStruct.BaseAddress = 0x38000000;
 80065a6:	9401      	str	r4, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80065a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80065ac:	f7fa fd26 	bl	8000ffc <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80065b0:	2004      	movs	r0, #4
 80065b2:	f7fa fd11 	bl	8000fd8 <HAL_MPU_Enable>
}
 80065b6:	b004      	add	sp, #16
 80065b8:	bd10      	pop	{r4, pc}
 80065ba:	bf00      	nop
 80065bc:	03010011 	.word	0x03010011
 80065c0:	0301000f 	.word	0x0301000f
 80065c4:	01010100 	.word	0x01010100

080065c8 <main>:
{
 80065c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065cc:	ed2d 8b06 	vpush	{d8-d10}
  MPU_Conf();
 80065d0:	f7ff ffd0 	bl	8006574 <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 80065d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80065d8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80065dc:	4a82      	ldr	r2, [pc, #520]	; (80067e8 <main+0x220>)
 80065de:	2100      	movs	r1, #0
 80065e0:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80065e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80065e8:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80065ec:	6953      	ldr	r3, [r2, #20]
 80065ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80065f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80065f8:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80065fc:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006600:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8006604:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006608:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800660c:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006610:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8006614:	07b7      	lsls	r7, r6, #30
 8006616:	015c      	lsls	r4, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006618:	ea04 050c 	and.w	r5, r4, ip
 800661c:	4638      	mov	r0, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800661e:	4631      	mov	r1, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006620:	ea40 0305 	orr.w	r3, r0, r5
      } while (ways-- != 0U);
 8006624:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006626:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 800662a:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800662e:	1c4b      	adds	r3, r1, #1
 8006630:	d1f6      	bne.n	8006620 <main+0x58>
 8006632:	3c20      	subs	r4, #32
    } while(sets-- != 0U);
 8006634:	f114 0f20 	cmn.w	r4, #32
 8006638:	d1ee      	bne.n	8006618 <main+0x50>
 800663a:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800663e:	6953      	ldr	r3, [r2, #20]
 8006640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006644:	6153      	str	r3, [r2, #20]
 8006646:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800664a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800664e:	f7f9 fe69 	bl	8000324 <HAL_Init>
  SystemClock_Config();
 8006652:	f7ff ff03 	bl	800645c <SystemClock_Config>
  MX_GPIO_Init();
 8006656:	f7ff fd59 	bl	800610c <MX_GPIO_Init>
  MX_DMA_Init();
 800665a:	f7ff fd11 	bl	8006080 <MX_DMA_Init>
  MX_SAI1_Init();
 800665e:	f000 fb93 	bl	8006d88 <MX_SAI1_Init>
  MX_RNG_Init();
 8006662:	f000 fb63 	bl	8006d2c <MX_RNG_Init>
  MX_SPI2_Init();
 8006666:	f000 fcaf 	bl	8006fc8 <MX_SPI2_Init>
  MX_I2C2_Init();
 800666a:	f7ff fe77 	bl	800635c <MX_I2C2_Init>
  MX_ADC1_Init();
 800666e:	f7ff fb85 	bl	8005d7c <MX_ADC1_Init>
  MX_SPI1_Init();
 8006672:	f000 fc7b 	bl	8006f6c <MX_SPI1_Init>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8006676:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 800667a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800667e:	eee1 3a10 	vmsr	fpscr, r3
 8006682:	485a      	ldr	r0, [pc, #360]	; (80067ec <main+0x224>)
 8006684:	2300      	movs	r3, #0
	  SPI_TX[i] = counter++;
 8006686:	4d5a      	ldr	r5, [pc, #360]	; (80067f0 <main+0x228>)
  HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 32);
 8006688:	2220      	movs	r2, #32
 800668a:	7801      	ldrb	r1, [r0, #0]
 800668c:	461c      	mov	r4, r3
 800668e:	622b      	str	r3, [r5, #32]
 8006690:	1c4e      	adds	r6, r1, #1
 8006692:	f361 0307 	bfi	r3, r1, #0, #8
 8006696:	f101 0710 	add.w	r7, r1, #16
	tThreshold_init(&threshold[i],120.0f, 220.0f);
 800669a:	eddf aa56 	vldr	s21, [pc, #344]	; 80067f4 <main+0x22c>
 800669e:	f366 230f 	bfi	r3, r6, #8, #8
 80066a2:	1c8e      	adds	r6, r1, #2
 80066a4:	3103      	adds	r1, #3
 80066a6:	7007      	strb	r7, [r0, #0]
 80066a8:	f366 4317 	bfi	r3, r6, #16, #8
 80066ac:	18ae      	adds	r6, r5, r2
 80066ae:	ed9f aa52 	vldr	s20, [pc, #328]	; 80067f8 <main+0x230>
 80066b2:	f361 631f 	bfi	r3, r1, #24, #8
 80066b6:	6074      	str	r4, [r6, #4]
 80066b8:	6134      	str	r4, [r6, #16]
  HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 32);
 80066ba:	f105 0140 	add.w	r1, r5, #64	; 0x40
 80066be:	f003 307f 	and.w	r0, r3, #2139062143	; 0x7f7f7f7f
 80066c2:	f003 3780 	and.w	r7, r3, #2155905152	; 0x80808080
	  SPI_TX[i] = counter++;
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	f100 3004 	add.w	r0, r0, #67372036	; 0x4040404
	tSlide_init(&fastSlide[i],1.0f,500.0f); //1110
 80066cc:	eddf 9a4b 	vldr	s19, [pc, #300]	; 80067fc <main+0x234>
		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 2000.0f, 0.6f);
 80066d0:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8006800 <main+0x238>
 80066d4:	4078      	eors	r0, r7
 80066d6:	eddf 8a4b 	vldr	s17, [pc, #300]	; 8006804 <main+0x23c>
		tHighpass_init(&opticalHighpass[i][j], 80.0f);
 80066da:	ed9f 8a4b 	vldr	s16, [pc, #300]	; 8006808 <main+0x240>
 80066de:	f000 337f 	and.w	r3, r0, #2139062143	; 0x7f7f7f7f
	  SPI_TX[i] = counter++;
 80066e2:	6068      	str	r0, [r5, #4]
 80066e4:	4f49      	ldr	r7, [pc, #292]	; (800680c <main+0x244>)
 80066e6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 80066ea:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8006850 <main+0x288>
 80066ee:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8006854 <main+0x28c>
 80066f2:	e9c6 4402 	strd	r4, r4, [r6, #8]
 80066f6:	f000 3680 	and.w	r6, r0, #2155905152	; 0x80808080
  HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 32);
 80066fa:	4845      	ldr	r0, [pc, #276]	; (8006810 <main+0x248>)
 80066fc:	4073      	eors	r3, r6
	  SPI_TX[i] = counter++;
 80066fe:	f003 367f 	and.w	r6, r3, #2139062143	; 0x7f7f7f7f
 8006702:	60ab      	str	r3, [r5, #8]
 8006704:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8006708:	f106 3604 	add.w	r6, r6, #67372036	; 0x4040404
 800670c:	4073      	eors	r3, r6
 800670e:	4e41      	ldr	r6, [pc, #260]	; (8006814 <main+0x24c>)
 8006710:	60eb      	str	r3, [r5, #12]
  HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 32);
 8006712:	f7ff f855 	bl	80057c0 <HAL_SPI_Receive_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8006716:	2201      	movs	r2, #1
 8006718:	2140      	movs	r1, #64	; 0x40
 800671a:	483f      	ldr	r0, [pc, #252]	; (8006818 <main+0x250>)
 800671c:	f7fc f936 	bl	800298c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8006720:	200a      	movs	r0, #10
 8006722:	f7f9 fe43 	bl	80003ac <HAL_Delay>
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8006726:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800672a:	493c      	ldr	r1, [pc, #240]	; (800681c <main+0x254>)
 800672c:	483c      	ldr	r0, [pc, #240]	; (8006820 <main+0x258>)
 800672e:	f7fe fba9 	bl	8004e84 <HAL_SAI_Transmit_DMA>
 8006732:	4d3c      	ldr	r5, [pc, #240]	; (8006824 <main+0x25c>)
  HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8006734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006738:	493b      	ldr	r1, [pc, #236]	; (8006828 <main+0x260>)
 800673a:	483c      	ldr	r0, [pc, #240]	; (800682c <main+0x264>)
 800673c:	f7fe fc32 	bl	8004fa4 <HAL_SAI_Receive_DMA>
LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8006740:	4b3b      	ldr	r3, [pc, #236]	; (8006830 <main+0x268>)
 8006742:	4a3c      	ldr	r2, [pc, #240]	; (8006834 <main+0x26c>)
 8006744:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006748:	493b      	ldr	r1, [pc, #236]	; (8006838 <main+0x270>)
 800674a:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800683c <main+0x274>
 800674e:	f001 fa3b 	bl	8007bc8 <LEAF_init>
	tThreshold_init(&threshold[i],120.0f, 220.0f);
 8006752:	eb09 0004 	add.w	r0, r9, r4
 8006756:	eef0 0a6a 	vmov.f32	s1, s21
 800675a:	eeb0 0a4a 	vmov.f32	s0, s20
 800675e:	f000 fe33 	bl	80073c8 <tThreshold_init>
	tSlide_init(&fastSlide[i],1.0f,500.0f); //1110
 8006762:	eb08 0004 	add.w	r0, r8, r4
 8006766:	eef0 0a69 	vmov.f32	s1, s19
 800676a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800676e:	f000 fe5f 	bl	8007430 <tSlide_init>
	tSlide_init(&slowSlide[i],1.0f,500.0f); //1110
 8006772:	1928      	adds	r0, r5, r4
 8006774:	eef0 0a69 	vmov.f32	s1, s19
 8006778:	3404      	adds	r4, #4
 800677a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800677e:	f000 fe57 	bl	8007430 <tSlide_init>
		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 2000.0f, 0.6f);
 8006782:	eef0 0a49 	vmov.f32	s1, s18
 8006786:	2101      	movs	r1, #1
 8006788:	4638      	mov	r0, r7
 800678a:	eeb0 0a68 	vmov.f32	s0, s17
 800678e:	f000 fed9 	bl	8007544 <tVZFilter_init>
		tHighpass_init(&opticalHighpass[i][j], 80.0f);
 8006792:	4630      	mov	r0, r6
 8006794:	eeb0 0a48 	vmov.f32	s0, s16
 8006798:	f000 fea4 	bl	80074e4 <tHighpass_init>
		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 2000.0f, 0.6f);
 800679c:	1d38      	adds	r0, r7, #4
 800679e:	eef0 0a49 	vmov.f32	s1, s18
 80067a2:	2101      	movs	r1, #1
 80067a4:	eeb0 0a68 	vmov.f32	s0, s17
 80067a8:	3708      	adds	r7, #8
 80067aa:	f000 fecb 	bl	8007544 <tVZFilter_init>
		tHighpass_init(&opticalHighpass[i][j], 80.0f);
 80067ae:	1d30      	adds	r0, r6, #4
 80067b0:	eeb0 0a48 	vmov.f32	s0, s16
 80067b4:	3608      	adds	r6, #8
 80067b6:	f000 fe95 	bl	80074e4 <tHighpass_init>
for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 80067ba:	2c28      	cmp	r4, #40	; 0x28
 80067bc:	d1c9      	bne.n	8006752 <main+0x18a>
 80067be:	4c20      	ldr	r4, [pc, #128]	; (8006840 <main+0x278>)
LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 80067c0:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80067c4:	481f      	ldr	r0, [pc, #124]	; (8006844 <main+0x27c>)
 80067c6:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80067ca:	f001 f901 	bl	80079d0 <LEAF_generate_atodb>
	 tPluckDetectorInt_init(&myPluck[j]);
 80067ce:	4620      	mov	r0, r4
 80067d0:	3404      	adds	r4, #4
 80067d2:	f000 faa5 	bl	8006d20 <tPluckDetectorInt_init>
 for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 80067d6:	42ac      	cmp	r4, r5
 80067d8:	d1f9      	bne.n	80067ce <main+0x206>
 HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 80067da:	2250      	movs	r2, #80	; 0x50
 80067dc:	491a      	ldr	r1, [pc, #104]	; (8006848 <main+0x280>)
 80067de:	481b      	ldr	r0, [pc, #108]	; (800684c <main+0x284>)
 80067e0:	f7f9 fdfc 	bl	80003dc <HAL_ADC_Start_DMA>
 80067e4:	e7fe      	b.n	80067e4 <main+0x21c>
 80067e6:	bf00      	nop
 80067e8:	e000ed00 	.word	0xe000ed00
 80067ec:	20000430 	.word	0x20000430
 80067f0:	30000000 	.word	0x30000000
 80067f4:	435c0000 	.word	0x435c0000
 80067f8:	42f00000 	.word	0x42f00000
 80067fc:	43fa0000 	.word	0x43fa0000
 8006800:	3f19999a 	.word	0x3f19999a
 8006804:	44fa0000 	.word	0x44fa0000
 8006808:	42a00000 	.word	0x42a00000
 800680c:	20018b28 	.word	0x20018b28
 8006810:	20018dd4 	.word	0x20018dd4
 8006814:	20000258 	.word	0x20000258
 8006818:	58020800 	.word	0x58020800
 800681c:	300021a0 	.word	0x300021a0
 8006820:	20018d3c 	.word	0x20018d3c
 8006824:	20000438 	.word	0x20000438
 8006828:	300001a0 	.word	0x300001a0
 800682c:	20018bb4 	.word	0x20018bb4
 8006830:	08006431 	.word	0x08006431
 8006834:	000493e0 	.word	0x000493e0
 8006838:	24000000 	.word	0x24000000
 800683c:	473b8000 	.word	0x473b8000
 8006840:	20000388 	.word	0x20000388
 8006844:	20000488 	.word	0x20000488
 8006848:	30000060 	.word	0x30000060
 800684c:	200000f4 	.word	0x200000f4
 8006850:	20000230 	.word	0x20000230
 8006854:	20018b78 	.word	0x20018b78

08006858 <attackDetectPeak2>:
int armedCounter[NUM_STRINGS];
float slopeStorage[NUM_STRINGS];
int attackDetectPeak2 (int whichString, int tempInt)
{
	float output = -1;
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 8006858:	ee07 1a90 	vmov	s15, r1
 800685c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8006a00 <attackDetectPeak2+0x1a8>
 8006860:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8006a04 <attackDetectPeak2+0x1ac>
 8006864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8006868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 800686c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006870:	00c6      	lsls	r6, r0, #3
	for (int k = 0; k < FILTER_ORDER; k++)
	{
		// a highpass filter, remove any slow moving signal (effectively centers the signal around zero and gets rid of the signal that isn't high frequency vibration) cutoff of 100Hz, // applied 8 times to get rid of a lot of low frequency bumbling around
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8006872:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8006a40 <attackDetectPeak2+0x1e8>
 8006876:	0084      	lsls	r4, r0, #2
		tempSamp = tVZFilter_tick(&opticalLowpass[whichString][k], tempSamp * 1.0f);
 8006878:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8006a44 <attackDetectPeak2+0x1ec>
 800687c:	1d37      	adds	r7, r6, #4
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 800687e:	ee27 0a80 	vmul.f32	s0, s15, s0
{
 8006882:	4605      	mov	r5, r0
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8006884:	eb09 0006 	add.w	r0, r9, r6
{
 8006888:	ed2d 8b02 	vpush	{d8}
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 800688c:	f000 fe4a 	bl	8007524 <tHighpass_tick>
		tempSamp = tVZFilter_tick(&opticalLowpass[whichString][k], tempSamp * 1.0f);
 8006890:	eb08 0006 	add.w	r0, r8, r6
 8006894:	f001 f84a 	bl	800792c <tVZFilter_tick>
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8006898:	eb09 0007 	add.w	r0, r9, r7
 800689c:	f000 fe42 	bl	8007524 <tHighpass_tick>
		tempSamp = tVZFilter_tick(&opticalLowpass[whichString][k], tempSamp * 1.0f);
 80068a0:	eb08 0007 	add.w	r0, r8, r7
 80068a4:	f001 f842 	bl	800792c <tVZFilter_tick>
	}

	float tempAbs = fabsf(tempSamp);

	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80068a8:	4857      	ldr	r0, [pc, #348]	; (8006a08 <attackDetectPeak2+0x1b0>)
 80068aa:	eeb0 0ac0 	vabs.f32	s0, s0
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80068ae:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8006a48 <attackDetectPeak2+0x1f0>
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80068b2:	4420      	add	r0, r4
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
	//dbSmoothed2 = atodb(Dsmoothed2);
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
	//dbSmoothed2 = LEAF_clip(-50.f, dbSmoothed2, 12.0f);
	//get the slope
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 80068b4:	4e55      	ldr	r6, [pc, #340]	; (8006a0c <attackDetectPeak2+0x1b4>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80068b6:	f000 fde3 	bl	8007480 <tSlide_tick>
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80068ba:	4855      	ldr	r0, [pc, #340]	; (8006a10 <attackDetectPeak2+0x1b8>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80068bc:	4b55      	ldr	r3, [pc, #340]	; (8006a14 <attackDetectPeak2+0x1bc>)
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80068be:	4420      	add	r0, r4
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 80068c0:	4f55      	ldr	r7, [pc, #340]	; (8006a18 <attackDetectPeak2+0x1c0>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80068c2:	ed83 0a00 	vstr	s0, [r3]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80068c6:	f000 fddb 	bl	8007480 <tSlide_tick>
 80068ca:	eef0 7a40 	vmov.f32	s15, s0
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 80068ce:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8006a1c <attackDetectPeak2+0x1c4>
 80068d2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80068d6:	eef0 0a67 	vmov.f32	s1, s15
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80068da:	edc8 7a00 	vstr	s15, [r8]
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 80068de:	f001 f863 	bl	80079a8 <LEAF_clip>
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 80068e2:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8006a20 <attackDetectPeak2+0x1c8>
 80068e6:	4b4f      	ldr	r3, [pc, #316]	; (8006a24 <attackDetectPeak2+0x1cc>)
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 80068e8:	eeb0 7a40 	vmov.f32	s14, s0
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 80068ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 80068f0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8006a28 <attackDetectPeak2+0x1d0>
 80068f4:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 80068f8:	ed88 7a00 	vstr	s14, [r8]
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 80068fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006900:	ee17 2a90 	vmov	r2, s15
 8006904:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006908:	edd3 0a00 	vldr	s1, [r3]
 800690c:	f001 f84c 	bl	80079a8 <LEAF_clip>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8006910:	1933      	adds	r3, r6, r4
	slopeStorage[whichString] = slope;
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8006912:	edd8 8a00 	vldr	s17, [r8]
 8006916:	eddf 7a45 	vldr	s15, [pc, #276]	; 8006a2c <attackDetectPeak2+0x1d4>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 800691a:	ed93 8a00 	vldr	s16, [r3]
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 800691e:	ee68 8aa7 	vmul.f32	s17, s17, s15
	slopeStorage[whichString] = slope;
 8006922:	4b43      	ldr	r3, [pc, #268]	; (8006a30 <attackDetectPeak2+0x1d8>)
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8006924:	ee30 8a48 	vsub.f32	s16, s0, s16
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8006928:	4842      	ldr	r0, [pc, #264]	; (8006a34 <attackDetectPeak2+0x1dc>)
	slopeStorage[whichString] = slope;
 800692a:	4423      	add	r3, r4
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 800692c:	ed87 0a00 	vstr	s0, [r7]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8006930:	4420      	add	r0, r4
 8006932:	eeb0 0a68 	vmov.f32	s0, s17
	slopeStorage[whichString] = slope;
 8006936:	ed83 8a00 	vstr	s16, [r3]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 800693a:	f000 fd61 	bl	8007400 <tThreshold_tick>
 800693e:	4b3e      	ldr	r3, [pc, #248]	; (8006a38 <attackDetectPeak2+0x1e0>)
	if ((slope > 0.1f) && (threshOut > 0))
 8006940:	2800      	cmp	r0, #0
	{
		armed[whichString] = 1;
 8006942:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8006a4c <attackDetectPeak2+0x1f4>
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8006946:	6018      	str	r0, [r3, #0]
	if ((slope > 0.1f) && (threshOut > 0))
 8006948:	dd06      	ble.n	8006958 <attackDetectPeak2+0x100>
 800694a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8006a3c <attackDetectPeak2+0x1e4>
 800694e:	eeb4 8a67 	vcmp.f32	s16, s15
 8006952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006956:	dc0c      	bgt.n	8006972 <attackDetectPeak2+0x11a>
	}

	if (armed[whichString] == 1)
 8006958:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d00b      	beq.n	8006978 <attackDetectPeak2+0x120>
{
 8006960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			downCounter[whichString] = 0;
			stringMaxes[whichString] = 0;
		}
	}

	prevdbSmoothed2[whichString] = dbSmoothed2;
 8006964:	4434      	add	r4, r6
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6023      	str	r3, [r4, #0]
	return (int)output;
}
 800696a:	ecbd 8b02 	vpop	{d8}
 800696e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		armed[whichString] = 1;
 8006972:	2301      	movs	r3, #1
 8006974:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
		if (integerVersion > stringMaxes[whichString])
 8006978:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006a50 <attackDetectPeak2+0x1f8>
 800697c:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8006980:	ee07 3a90 	vmov	s15, r3
 8006984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006988:	eef4 7ae8 	vcmpe.f32	s15, s17
 800698c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006990:	d42f      	bmi.n	80069f2 <attackDetectPeak2+0x19a>
		armedCounter[whichString]++;
 8006992:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006a54 <attackDetectPeak2+0x1fc>
		if (slope <= 0.0f)
 8006996:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800699a:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 8006a58 <attackDetectPeak2+0x200>
		armedCounter[whichString]++;
 800699e:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
		if (slope <= 0.0f)
 80069a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a6:	f85b 2025 	ldr.w	r2, [fp, r5, lsl #2]
		armedCounter[whichString]++;
 80069aa:	f103 0301 	add.w	r3, r3, #1
 80069ae:	f849 3025 	str.w	r3, [r9, r5, lsl #2]
		if (slope <= 0.0f)
 80069b2:	d802      	bhi.n	80069ba <attackDetectPeak2+0x162>
			downCounter[whichString]++;
 80069b4:	3201      	adds	r2, #1
 80069b6:	f84b 2025 	str.w	r2, [fp, r5, lsl #2]
		if (downCounter[whichString] > 128)
 80069ba:	2a80      	cmp	r2, #128	; 0x80
 80069bc:	ddd0      	ble.n	8006960 <attackDetectPeak2+0x108>
			output = LEAF_clip(0.0f, output, 65535.0f);
 80069be:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80069c2:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8006a2c <attackDetectPeak2+0x1d4>
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8006a1c <attackDetectPeak2+0x1c4>
 80069ce:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80069d2:	f000 ffe9 	bl	80079a8 <LEAF_clip>
 80069d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			armed[whichString] = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	ee17 0a90 	vmov	r0, s15
 80069e0:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
			armedCounter[whichString] = 0;
 80069e4:	f849 3025 	str.w	r3, [r9, r5, lsl #2]
			downCounter[whichString] = 0;
 80069e8:	f84b 3025 	str.w	r3, [fp, r5, lsl #2]
			stringMaxes[whichString] = 0;
 80069ec:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 80069f0:	e7b8      	b.n	8006964 <attackDetectPeak2+0x10c>
			stringMaxes[whichString] = integerVersion;
 80069f2:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 80069f6:	ee18 3a90 	vmov	r3, s17
 80069fa:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 80069fe:	e7c8      	b.n	8006992 <attackDetectPeak2+0x13a>
 8006a00:	47000000 	.word	0x47000000
 8006a04:	37fffffc 	.word	0x37fffffc
 8006a08:	20018b78 	.word	0x20018b78
 8006a0c:	20000360 	.word	0x20000360
 8006a10:	20000438 	.word	0x20000438
 8006a14:	20000434 	.word	0x20000434
 8006a18:	20000348 	.word	0x20000348
 8006a1c:	00000000 	.word	0x00000000
 8006a20:	46c34e00 	.word	0x46c34e00
 8006a24:	20000488 	.word	0x20000488
 8006a28:	c2a00000 	.word	0xc2a00000
 8006a2c:	477fff00 	.word	0x477fff00
 8006a30:	200002f8 	.word	0x200002f8
 8006a34:	20000230 	.word	0x20000230
 8006a38:	200000e8 	.word	0x200000e8
 8006a3c:	3dcccccd 	.word	0x3dcccccd
 8006a40:	20000258 	.word	0x20000258
 8006a44:	20018b28 	.word	0x20018b28
 8006a48:	200003b0 	.word	0x200003b0
 8006a4c:	20000098 	.word	0x20000098
 8006a50:	200000c0 	.word	0x200000c0
 8006a54:	20000320 	.word	0x20000320
 8006a58:	20000460 	.word	0x20000460

08006a5c <ADC_Frame>:
int brokedIt = 0;
int didPlucked2[10];
int pluckDelay[10];
int pluckValues[10];
void ADC_Frame(int offset)
{
 8006a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a60:	4604      	mov	r4, r0
 8006a62:	b085      	sub	sp, #20
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8006a64:	2201      	movs	r2, #1
 8006a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a6a:	4843      	ldr	r0, [pc, #268]	; (8006b78 <ADC_Frame+0x11c>)
 8006a6c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006a70:	f7fb ff8c 	bl	800298c <HAL_GPIO_WritePin>
 8006a74:	4b41      	ldr	r3, [pc, #260]	; (8006b7c <ADC_Frame+0x120>)
 8006a76:	2204      	movs	r2, #4
 8006a78:	4e41      	ldr	r6, [pc, #260]	; (8006b80 <ADC_Frame+0x124>)
 8006a7a:	f1a3 0760 	sub.w	r7, r3, #96	; 0x60
 8006a7e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a82:	9203      	str	r2, [sp, #12]
	int changeHappened = 0;
 8006a84:	f04f 0b00 	mov.w	fp, #0
 8006a88:	3b04      	subs	r3, #4
 8006a8a:	6832      	ldr	r2, [r6, #0]
 8006a8c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006b90 <ADC_Frame+0x134>
					changeHappened = 1;
					stringSounding[j] = 1;
					//HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 4);
				}

				if ((stringTouchRH[j]) && (stringSounding[j]))
 8006a90:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8006b94 <ADC_Frame+0x138>
 8006a94:	9301      	str	r3, [sp, #4]
		if (howManyFrames > 0)
 8006a96:	2a00      	cmp	r2, #0
 8006a98:	dd01      	ble.n	8006a9e <ADC_Frame+0x42>
			howManyFrames--;
 8006a9a:	3a01      	subs	r2, #1
 8006a9c:	6032      	str	r2, [r6, #0]
	int changeHappened = 0;
 8006a9e:	2400      	movs	r4, #0
 8006aa0:	4d38      	ldr	r5, [pc, #224]	; (8006b84 <ADC_Frame+0x128>)
 8006aa2:	f8dd a004 	ldr.w	sl, [sp, #4]
			if (j < 8)
 8006aa6:	2c07      	cmp	r4, #7
			int tempInt = ADC_values[(i*NUM_ADC_CHANNELS) + j];
 8006aa8:	f85a 1f04 	ldr.w	r1, [sl, #4]!
			if (j < 8)
 8006aac:	dc3d      	bgt.n	8006b2a <ADC_Frame+0xce>
				stringTouchRH[j] = (SPI_RX[4] >> j) & 1;
 8006aae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006ab2:	4123      	asrs	r3, r4
 8006ab4:	f003 0301 	and.w	r3, r3, #1
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f825 3b02 	strh.w	r3, [r5], #2
 8006abe:	f7ff fecb 	bl	8006858 <attackDetectPeak2>
			if (howManyFrames == 0)
 8006ac2:	6832      	ldr	r2, [r6, #0]
 8006ac4:	00a1      	lsls	r1, r4, #2
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8006ac6:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
			if (howManyFrames == 0)
 8006aca:	b9c2      	cbnz	r2, 8006afe <ADC_Frame+0xa2>
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 8006acc:	2800      	cmp	r0, #0
 8006ace:	f835 cc02 	ldrh.w	ip, [r5, #-2]
 8006ad2:	dd32      	ble.n	8006b3a <ADC_Frame+0xde>
 8006ad4:	f858 3001 	ldr.w	r3, [r8, r1]
 8006ad8:	b973      	cbnz	r3, 8006af8 <ADC_Frame+0x9c>
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] & 0xff);
 8006ada:	4b2b      	ldr	r3, [pc, #172]	; (8006b88 <ADC_Frame+0x12c>)
					SPI_PLUCK_TX[(j * 2)] = (didPlucked[j] >> 8);
 8006adc:	ea4f 2e20 	mov.w	lr, r0, asr #8
					stringSounding[j] = 1;
 8006ae0:	f04f 0b01 	mov.w	fp, #1
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] & 0xff);
 8006ae4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
					stringSounding[j] = 1;
 8006ae8:	f848 b001 	str.w	fp, [r8, r1]
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] & 0xff);
 8006aec:	9302      	str	r3, [sp, #8]
					SPI_PLUCK_TX[(j * 2)] = (didPlucked[j] >> 8);
 8006aee:	4b26      	ldr	r3, [pc, #152]	; (8006b88 <ADC_Frame+0x12c>)
 8006af0:	f803 e014 	strb.w	lr, [r3, r4, lsl #1]
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] & 0xff);
 8006af4:	9b02      	ldr	r3, [sp, #8]
 8006af6:	7058      	strb	r0, [r3, #1]
				if ((stringTouchRH[j]) && (stringSounding[j]))
 8006af8:	f1bc 0f00 	cmp.w	ip, #0
 8006afc:	d124      	bne.n	8006b48 <ADC_Frame+0xec>
		for (int j = 0; j < 10; j++)
 8006afe:	3401      	adds	r4, #1
 8006b00:	2c0a      	cmp	r4, #10
 8006b02:	d1d0      	bne.n	8006aa6 <ADC_Frame+0x4a>
 8006b04:	9b01      	ldr	r3, [sp, #4]
 8006b06:	3328      	adds	r3, #40	; 0x28
 8006b08:	9301      	str	r3, [sp, #4]
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8006b0a:	9b03      	ldr	r3, [sp, #12]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	9303      	str	r3, [sp, #12]
 8006b10:	d1c1      	bne.n	8006a96 <ADC_Frame+0x3a>
			}
*/
		}

	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8006b12:	461a      	mov	r2, r3
 8006b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b18:	4817      	ldr	r0, [pc, #92]	; (8006b78 <ADC_Frame+0x11c>)
 8006b1a:	f7fb ff37 	bl	800298c <HAL_GPIO_WritePin>
	if (changeHappened)
 8006b1e:	f1bb 0f00 	cmp.w	fp, #0
 8006b22:	d120      	bne.n	8006b66 <ADC_Frame+0x10a>
	{
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 20);
	}
}
 8006b24:	b005      	add	sp, #20
 8006b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				stringTouchRH[j] = (SPI_RX[5] >> (j-8)) & 1;
 8006b2a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006b2e:	f1a4 0208 	sub.w	r2, r4, #8
 8006b32:	4113      	asrs	r3, r2
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	e7be      	b.n	8006ab8 <ADC_Frame+0x5c>
				if ((stringTouchRH[j]) && (stringSounding[j]))
 8006b3a:	f1bc 0f00 	cmp.w	ip, #0
 8006b3e:	d0de      	beq.n	8006afe <ADC_Frame+0xa2>
 8006b40:	f858 3001 	ldr.w	r3, [r8, r1]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0da      	beq.n	8006afe <ADC_Frame+0xa2>
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 8006b48:	480f      	ldr	r0, [pc, #60]	; (8006b88 <ADC_Frame+0x12c>)
					SPI_PLUCK_TX[(j * 2)] = 0;
 8006b4a:	f04f 0c00 	mov.w	ip, #0
					changeHappened = 1;
 8006b4e:	f04f 0b01 	mov.w	fp, #1
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 8006b52:	eb00 0344 	add.w	r3, r0, r4, lsl #1
					SPI_PLUCK_TX[(j * 2)] = 0;
 8006b56:	f800 c014 	strb.w	ip, [r0, r4, lsl #1]
					stringSounding[j] = 0;
 8006b5a:	2000      	movs	r0, #0
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 8006b5c:	f883 c001 	strb.w	ip, [r3, #1]
					stringSounding[j] = 0;
 8006b60:	f848 0001 	str.w	r0, [r8, r1]
 8006b64:	e7cb      	b.n	8006afe <ADC_Frame+0xa2>
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 20);
 8006b66:	2214      	movs	r2, #20
 8006b68:	4907      	ldr	r1, [pc, #28]	; (8006b88 <ADC_Frame+0x12c>)
 8006b6a:	4808      	ldr	r0, [pc, #32]	; (8006b8c <ADC_Frame+0x130>)
}
 8006b6c:	b005      	add	sp, #20
 8006b6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 20);
 8006b72:	f7fe bc55 	b.w	8005420 <HAL_SPI_Transmit_DMA>
 8006b76:	bf00      	nop
 8006b78:	58020000 	.word	0x58020000
 8006b7c:	30000060 	.word	0x30000060
 8006b80:	20000008 	.word	0x20000008
 8006b84:	2000034c 	.word	0x2000034c
 8006b88:	30000020 	.word	0x30000020
 8006b8c:	20018ed4 	.word	0x20018ed4
 8006b90:	200003dc 	.word	0x200003dc
 8006b94:	200002a8 	.word	0x200002a8

08006b98 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{


	ADC_Frame(ADC_FRAME_SIZE);
 8006b98:	2004      	movs	r0, #4
 8006b9a:	f7ff bf5f 	b.w	8006a5c <ADC_Frame>
 8006b9e:	bf00      	nop

08006ba0 <HAL_ADC_ConvHalfCpltCallback>:


}
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
	ADC_Frame(0);
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	f7ff bf5b 	b.w	8006a5c <ADC_Frame>
 8006ba6:	bf00      	nop

08006ba8 <HAL_SPI_RxCpltCallback>:
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
}
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop

08006bac <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop

08006bb0 <tPluckDetectorInt_initToPool>:
void    tPluckDetectorInt_init          (tPluckDetectorInt* const pd)
{
    tPluckDetectorInt_initToPool(pd, &leaf.mempool);
}
void    tPluckDetectorInt_initToPool    (tPluckDetectorInt* const pd, tMempool* const mp)
{
 8006bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tMempool* m = *mp;
 8006bb4:	f8d1 8000 	ldr.w	r8, [r1]
{
 8006bb8:	460e      	mov	r6, r1
 8006bba:	4681      	mov	r9, r0
    _tPluckDetectorInt* p = *pd = (_tPluckDetectorInt*) mpool_alloc(sizeof(_tPluckDetectorInt), m);
 8006bbc:	f44f 7084 	mov.w	r0, #264	; 0x108
 8006bc0:	4641      	mov	r1, r8
    p->mempool = m;

	//INITIALIZE VARIABLES
	p->current_dir = 1;
	p->envelope_min = 0;//maybe could be 32 bit?
 8006bc2:	2500      	movs	r5, #0
    _tPluckDetectorInt* p = *pd = (_tPluckDetectorInt*) mpool_alloc(sizeof(_tPluckDetectorInt), m);
 8006bc4:	f000 ff4a 	bl	8007a5c <mpool_alloc>
	p->current_dir = 1;
 8006bc8:	2301      	movs	r3, #1
	p->envelope_max = 65535;//maybe could be 32 bit?
 8006bca:	f64f 71ff 	movw	r1, #65535	; 0xffff
    _tPluckDetectorInt* p = *pd = (_tPluckDetectorInt*) mpool_alloc(sizeof(_tPluckDetectorInt), m);
 8006bce:	4604      	mov	r4, r0
 8006bd0:	f8c9 0000 	str.w	r0, [r9]
	p->super_smoothed = 0;//Mean of the last [SUPER_SMOOTHING_WINDOW] smoothed values
	p->super_smoothedAccum = 0;

	p->pluck_strength = 0;

	p->smoothing_window = 8;
 8006bd4:	2708      	movs	r7, #8
	p->current_dir = 1;
 8006bd6:	6103      	str	r3, [r0, #16]
    p->super_smoothing_window = 128;
 8006bd8:	f04f 0e80 	mov.w	lr, #128	; 0x80
	p->prior_super_smoothed_dir = 1;
 8006bdc:	6243      	str	r3, [r0, #36]	; 0x24
    p->minmax_window = 8;


    tRingBufferInt_initToPool(&p->smoothed_array, p->smoothing_window, mp);
 8006bde:	4632      	mov	r2, r6
    p->mempool = m;
 8006be0:	f8c0 8000 	str.w	r8, [r0]
	p->midpoint_estimate = 48552;
 8006be4:	f64b 58a8 	movw	r8, #48552	; 0xbda8
	p->envelope_max = 65535;//maybe could be 32 bit?
 8006be8:	6181      	str	r1, [r0, #24]
	p->Pindex = 1;
 8006bea:	2001      	movs	r0, #1
 8006bec:	2100      	movs	r1, #0
		p->prior_dirs[i] = 1;
 8006bee:	6323      	str	r3, [r4, #48]	; 0x30
	p->envelope_min = 0;//maybe could be 32 bit?
 8006bf0:	6165      	str	r5, [r4, #20]
 8006bf2:	6365      	str	r5, [r4, #52]	; 0x34
 8006bf4:	63a5      	str	r5, [r4, #56]	; 0x38
 8006bf6:	63e5      	str	r5, [r4, #60]	; 0x3c
 8006bf8:	6425      	str	r5, [r4, #64]	; 0x40
 8006bfa:	6465      	str	r5, [r4, #68]	; 0x44
 8006bfc:	64a5      	str	r5, [r4, #72]	; 0x48
 8006bfe:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006c00:	6525      	str	r5, [r4, #80]	; 0x50
 8006c02:	6565      	str	r5, [r4, #84]	; 0x54
 8006c04:	65a5      	str	r5, [r4, #88]	; 0x58
	p->midpoint_estimate = 48552;
 8006c06:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
	p->ready_for_pluck = 1;
 8006c0a:	e9c4 5320 	strd	r5, r3, [r4, #128]	; 0x80
		p->prior_dirs[i] = 1;
 8006c0e:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
	p->prior_super_smoothed = 0;
 8006c12:	e9c4 5507 	strd	r5, r5, [r4, #28]
	p->prior_detect_1_value = 0;
 8006c16:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	p->prior_detect_2_value = 0;
 8006c1a:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	p->prior_detect_3_value = 0;
 8006c1e:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
	p->delay_since_last_detect = 0;
 8006c22:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
	p->Pindex = 1;
 8006c26:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	p->smoothing_window = 8;
 8006c2a:	e9c4 7e30 	strd	r7, lr, [r4, #192]	; 0xc0
    tRingBufferInt_initToPool(&p->smoothed_array, p->smoothing_window, mp);
 8006c2e:	4639      	mov	r1, r7
 8006c30:	1d20      	adds	r0, r4, #4
    p->minmax_window = 8;
 8006c32:	f8c4 70c8 	str.w	r7, [r4, #200]	; 0xc8
	p->smoothed = 0;//Mean of the last [SMOOTHING_WINDOW] samples
 8006c36:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
	p->super_smoothed = 0;//Mean of the last [SUPER_SMOOTHING_WINDOW] smoothed values
 8006c3a:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	p->pluck_strength = 0;
 8006c3e:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
    tRingBufferInt_initToPool(&p->smoothed_array, p->smoothing_window, mp);
 8006c42:	f000 fb8d 	bl	8007360 <tRingBufferInt_initToPool>

	tRingBufferInt_initToPool(&p->super_smoothed_array, p->super_smoothing_window, mp);
 8006c46:	19e0      	adds	r0, r4, r7
 8006c48:	4632      	mov	r2, r6
 8006c4a:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8006c4e:	f000 fb87 	bl	8007360 <tRingBufferInt_initToPool>

	tRingBufferInt_initToPool(&p->minmax_samples, p->minmax_window, mp);
 8006c52:	4632      	mov	r2, r6
 8006c54:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8006c58:	f104 000c 	add.w	r0, r4, #12
 8006c5c:	f000 fb80 	bl	8007360 <tRingBufferInt_initToPool>

	p->min_recent_value = 0;
	p->max_recent_value = 0;
    p->max_samples_still_same_pluck = 2400; //400
 8006c60:	f44f 6316 	mov.w	r3, #2400	; 0x960
    p->max_var_diff_width = 100;
    p->max_width_is_resonating = 2000;
 8006c64:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    p->max_ratio_value_diffs = 100.0f;
 8006c68:	492c      	ldr	r1, [pc, #176]	; (8006d1c <tPluckDetectorInt_initToPool+0x16c>)
    p->min_value_spread = 100; //500
    p->min_same_direction_steps = 10; //150
    p->minMaxIncrementsBetweenSamples = 8;
    p->midpoint_estimate_window = 4096;
 8006c6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    p->samples_per_midpoint_estimate_check = 4800;
 8006c6e:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
    p->minMaxIncrementsBetweenSamples = 8;
 8006c72:	f8c4 70d4 	str.w	r7, [r4, #212]	; 0xd4
    p->max_var_diff_width = 100;
 8006c76:	2764      	movs	r7, #100	; 0x64
    p->midpoint_estimate_acceptance_threshold = 10;
    p->midpoint_accum = 0;
 8006c78:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
    p->max_samples_still_same_pluck = 2400; //400
 8006c7c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    p->prior_midpoints_window = 4;
 8006c80:	2304      	movs	r3, #4
    p->max_width_is_resonating = 2000;
 8006c82:	f8c4 c0b0 	str.w	ip, [r4, #176]	; 0xb0
    p->max_ratio_value_diffs = 100.0f;
 8006c86:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    tRingBufferInt_initToPool(&p->prior_midpoint_estimates, p->prior_midpoints_window, mp);
 8006c8a:	4619      	mov	r1, r3
    p->midpoint_estimate_window = 4096;
 8006c8c:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
    tRingBufferInt_initToPool(&p->prior_midpoint_estimates, p->prior_midpoints_window, mp);
 8006c90:	4632      	mov	r2, r6
    p->samples_per_midpoint_estimate_check = 4800;
 8006c92:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    tRingBufferInt_initToPool(&p->prior_midpoint_estimates, p->prior_midpoints_window, mp);
 8006c96:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    p->prior_midpoints_window = 4;
 8006c9a:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    p->max_var_diff_width = 100;
 8006c9e:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	p->max_recent_value = 0;
 8006ca2:	e9c4 5533 	strd	r5, r5, [r4, #204]	; 0xcc
    p->min_same_direction_steps = 10; //150
 8006ca6:	250a      	movs	r5, #10
 8006ca8:	e9c4 752e 	strd	r7, r5, [r4, #184]	; 0xb8
    p->midpoint_estimate_acceptance_threshold = 10;
 8006cac:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    tRingBufferInt_initToPool(&p->prior_midpoint_estimates, p->prior_midpoints_window, mp);
 8006cb0:	f000 fb56 	bl	8007360 <tRingBufferInt_initToPool>
    tRingBufferInt_initToPool(&p->midpoint_samples, p->midpoint_estimate_window, mp);
 8006cb4:	4632      	mov	r2, r6
 8006cb6:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 8006cba:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8006cbe:	f000 fb4f 	bl	8007360 <tRingBufferInt_initToPool>

	p->inv_smoothing_window = 1.0f / p->smoothing_window;
 8006cc2:	ed94 7a30 	vldr	s14, [r4, #192]	; 0xc0
 8006cc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006cca:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
	p->inv_super_smoothing_window = 1.0f / p->super_smoothing_window;
 8006cce:	ed94 7a31 	vldr	s14, [r4, #196]	; 0xc4
 8006cd2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
	p->inv_minmax_window = 1.0f / p->minmax_window;
 8006cd6:	ed94 7a32 	vldr	s14, [r4, #200]	; 0xc8
	p->inv_smoothing_window = 1.0f / p->smoothing_window;
 8006cda:	eec7 4a85 	vdiv.f32	s9, s15, s10
	p->inv_minmax_window = 1.0f / p->minmax_window;
 8006cde:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
	p->inv_midpoint_estimate_window = 1.0f / p->midpoint_estimate_window;
 8006ce2:	ed94 7a3a 	vldr	s14, [r4, #232]	; 0xe8
	p->inv_super_smoothing_window = 1.0f / p->super_smoothing_window;
 8006ce6:	ee87 5aa5 	vdiv.f32	s10, s15, s11
	p->inv_midpoint_estimate_window = 1.0f / p->midpoint_estimate_window;
 8006cea:	eef8 6a47 	vcvt.f32.u32	s13, s14
	p->inv_prior_midpoints_window = 1.0f / p->prior_midpoints_window;
 8006cee:	ed94 7a39 	vldr	s14, [r4, #228]	; 0xe4
	p->inv_minmax_window = 1.0f / p->minmax_window;
 8006cf2:	eec7 5a86 	vdiv.f32	s11, s15, s12
	p->inv_smoothing_window = 1.0f / p->smoothing_window;
 8006cf6:	edc4 4a3d 	vstr	s9, [r4, #244]	; 0xf4
	p->inv_prior_midpoints_window = 1.0f / p->prior_midpoints_window;
 8006cfa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	p->inv_midpoint_estimate_window = 1.0f / p->midpoint_estimate_window;
 8006cfe:	ee87 6aa6 	vdiv.f32	s12, s15, s13
	p->inv_super_smoothing_window = 1.0f / p->super_smoothing_window;
 8006d02:	ed84 5a3e 	vstr	s10, [r4, #248]	; 0xf8
	p->inv_prior_midpoints_window = 1.0f / p->prior_midpoints_window;
 8006d06:	eec7 6a87 	vdiv.f32	s13, s15, s14
	p->inv_minmax_window = 1.0f / p->minmax_window;
 8006d0a:	edc4 5a3f 	vstr	s11, [r4, #252]	; 0xfc
	p->inv_midpoint_estimate_window = 1.0f / p->midpoint_estimate_window;
 8006d0e:	ed84 6a40 	vstr	s12, [r4, #256]	; 0x100
	p->inv_prior_midpoints_window = 1.0f / p->prior_midpoints_window;
 8006d12:	edc4 6a41 	vstr	s13, [r4, #260]	; 0x104

}
 8006d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d1a:	bf00      	nop
 8006d1c:	42c80000 	.word	0x42c80000

08006d20 <tPluckDetectorInt_init>:
    tPluckDetectorInt_initToPool(pd, &leaf.mempool);
 8006d20:	4901      	ldr	r1, [pc, #4]	; (8006d28 <tPluckDetectorInt_init+0x8>)
 8006d22:	f7ff bf45 	b.w	8006bb0 <tPluckDetectorInt_initToPool>
 8006d26:	bf00      	nop
 8006d28:	20018fec 	.word	0x20018fec

08006d2c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8006d2c:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 8006d2e:	4b07      	ldr	r3, [pc, #28]	; (8006d4c <MX_RNG_Init+0x20>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8006d30:	2100      	movs	r1, #0
  hrng.Instance = RNG;
 8006d32:	4a07      	ldr	r2, [pc, #28]	; (8006d50 <MX_RNG_Init+0x24>)
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8006d34:	4618      	mov	r0, r3
  hrng.Instance = RNG;
 8006d36:	e9c3 2100 	strd	r2, r1, [r3]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8006d3a:	f7fd fda5 	bl	8004888 <HAL_RNG_Init>
 8006d3e:	b900      	cbnz	r0, 8006d42 <MX_RNG_Init+0x16>
  {
    Error_Handler();
  }

}
 8006d40:	bd08      	pop	{r3, pc}
 8006d42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006d46:	f7ff bf31 	b.w	8006bac <Error_Handler>
 8006d4a:	bf00      	nop
 8006d4c:	20018ba0 	.word	0x20018ba0
 8006d50:	48021800 	.word	0x48021800

08006d54 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 8006d54:	6802      	ldr	r2, [r0, #0]
 8006d56:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <HAL_RNG_MspInit+0x2c>)
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d000      	beq.n	8006d5e <HAL_RNG_MspInit+0xa>
 8006d5c:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8006d5e:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <HAL_RNG_MspInit+0x30>)
{
 8006d60:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8006d62:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8006d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d6a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006d6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8006d7a:	b002      	add	sp, #8
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	48021800 	.word	0x48021800
 8006d84:	58024400 	.word	0x58024400

08006d88 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8006d88:	b570      	push	{r4, r5, r6, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 8006d8a:	481a      	ldr	r0, [pc, #104]	; (8006df4 <MX_SAI1_Init+0x6c>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8006d8c:	2500      	movs	r5, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 8006d8e:	4c1a      	ldr	r4, [pc, #104]	; (8006df8 <MX_SAI1_Init+0x70>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8006d90:	2101      	movs	r1, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8006d92:	f64b 3280 	movw	r2, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006d96:	2302      	movs	r3, #2
  hsai_BlockA1.Instance = SAI1_Block_A;
 8006d98:	6020      	str	r0, [r4, #0]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006d9a:	4620      	mov	r0, r4
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8006d9c:	61e1      	str	r1, [r4, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006d9e:	4629      	mov	r1, r5
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8006da0:	6222      	str	r2, [r4, #32]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006da2:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8006da4:	60e5      	str	r5, [r4, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006da6:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8006da8:	e9c4 5501 	strd	r5, r5, [r4, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8006dac:	e9c4 5505 	strd	r5, r5, [r4, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8006db0:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006db4:	f7fd fdd4 	bl	8004960 <HAL_SAI_InitProtocol>
 8006db8:	b9c8      	cbnz	r0, 8006dee <MX_SAI1_Init+0x66>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8006dba:	4c10      	ldr	r4, [pc, #64]	; (8006dfc <MX_SAI1_Init+0x74>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006dbc:	2500      	movs	r5, #0
  hsai_BlockB1.Instance = SAI1_Block_B;
 8006dbe:	4910      	ldr	r1, [pc, #64]	; (8006e00 <MX_SAI1_Init+0x78>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8006dc0:	2203      	movs	r2, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006dc2:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8006dc4:	2601      	movs	r6, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 8006dc6:	6021      	str	r1, [r4, #0]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006dc8:	4620      	mov	r0, r4
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8006dca:	6062      	str	r2, [r4, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006dcc:	4629      	mov	r1, r5
 8006dce:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8006dd0:	60a6      	str	r6, [r4, #8]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8006dd2:	61e6      	str	r6, [r4, #28]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006dd4:	6165      	str	r5, [r4, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8006dd6:	60e5      	str	r5, [r4, #12]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006dd8:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8006dda:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006dde:	f7fd fdbf 	bl	8004960 <HAL_SAI_InitProtocol>
 8006de2:	b900      	cbnz	r0, 8006de6 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
  }

}
 8006de4:	bd70      	pop	{r4, r5, r6, pc}
 8006de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8006dea:	f7ff bedf 	b.w	8006bac <Error_Handler>
    Error_Handler();
 8006dee:	f7ff fedd 	bl	8006bac <Error_Handler>
 8006df2:	e7e2      	b.n	8006dba <MX_SAI1_Init+0x32>
 8006df4:	40015804 	.word	0x40015804
 8006df8:	20018d3c 	.word	0x20018d3c
 8006dfc:	20018bb4 	.word	0x20018bb4
 8006e00:	40015824 	.word	0x40015824

08006e04 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8006e04:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8006e06:	4a50      	ldr	r2, [pc, #320]	; (8006f48 <HAL_SAI_MspInit+0x144>)
{
 8006e08:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI1_Block_A)
 8006e0a:	6803      	ldr	r3, [r0, #0]
{
 8006e0c:	4605      	mov	r5, r0
    if(hsai->Instance==SAI1_Block_A)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d03f      	beq.n	8006e92 <HAL_SAI_MspInit+0x8e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 8006e12:	4a4e      	ldr	r2, [pc, #312]	; (8006f4c <HAL_SAI_MspInit+0x148>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d001      	beq.n	8006e1c <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 8006e18:	b009      	add	sp, #36	; 0x24
 8006e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (SAI1_client == 0)
 8006e1c:	4b4c      	ldr	r3, [pc, #304]	; (8006f50 <HAL_SAI_MspInit+0x14c>)
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	2a00      	cmp	r2, #0
 8006e22:	d06f      	beq.n	8006f04 <HAL_SAI_MspInit+0x100>
    SAI1_client ++;
 8006e24:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006e26:	2108      	movs	r1, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e28:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e2a:	2600      	movs	r6, #0
    SAI1_client ++;
 8006e2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e2e:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006e30:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006e32:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e34:	9004      	str	r0, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e36:	a903      	add	r1, sp, #12
 8006e38:	4846      	ldr	r0, [pc, #280]	; (8006f54 <HAL_SAI_MspInit+0x150>)
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e3a:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai1_b.Instance = DMA1_Stream2;
 8006e3e:	4c46      	ldr	r4, [pc, #280]	; (8006f58 <HAL_SAI_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006e40:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e42:	e9cd 6205 	strd	r6, r2, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e46:	f7fb fc7d 	bl	8002744 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8006e4a:	4a44      	ldr	r2, [pc, #272]	; (8006f5c <HAL_SAI_MspInit+0x158>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8006e4c:	2358      	movs	r3, #88	; 0x58
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e4e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8006e52:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8006e56:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_b.Instance = DMA1_Stream2;
 8006e5a:	6022      	str	r2, [r4, #0]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006e5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8006e60:	6063      	str	r3, [r4, #4]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e62:	2304      	movs	r3, #4
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e64:	60a6      	str	r6, [r4, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e66:	60e6      	str	r6, [r4, #12]
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006e68:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e6a:	e9c4 c004 	strd	ip, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8006e6e:	4620      	mov	r0, r4
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8006e70:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8006e74:	e9c4 7106 	strd	r7, r1, [r4, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e78:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8006e7c:	f7fa f964 	bl	8001148 <HAL_DMA_Init>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d15b      	bne.n	8006f3c <HAL_SAI_MspInit+0x138>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8006e84:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
 8006e88:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8006e8a:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
}
 8006e8e:	b009      	add	sp, #36	; 0x24
 8006e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 8006e92:	4b2f      	ldr	r3, [pc, #188]	; (8006f50 <HAL_SAI_MspInit+0x14c>)
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	2a00      	cmp	r2, #0
 8006e98:	d042      	beq.n	8006f20 <HAL_SAI_MspInit+0x11c>
    SAI1_client ++;
 8006e9a:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006e9c:	2174      	movs	r1, #116	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e9e:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ea0:	2600      	movs	r6, #0
    SAI1_client ++;
 8006ea2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ea4:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006ea6:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006ea8:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eaa:	9004      	str	r0, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006eac:	a903      	add	r1, sp, #12
 8006eae:	4829      	ldr	r0, [pc, #164]	; (8006f54 <HAL_SAI_MspInit+0x150>)
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8006eb0:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_sai1_a.Instance = DMA1_Stream1;
 8006eb4:	4c2a      	ldr	r4, [pc, #168]	; (8006f60 <HAL_SAI_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006eb6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eb8:	e9cd 6205 	strd	r6, r2, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ebc:	f7fb fc42 	bl	8002744 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8006ec0:	4928      	ldr	r1, [pc, #160]	; (8006f64 <HAL_SAI_MspInit+0x160>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8006ec2:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ec4:	2340      	movs	r3, #64	; 0x40
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ec6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8006eca:	60e6      	str	r6, [r4, #12]
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006ecc:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai1_a.Instance = DMA1_Stream1;
 8006ece:	6021      	str	r1, [r4, #0]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8006ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8006ed4:	6062      	str	r2, [r4, #4]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006ed6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006eda:	60a3      	str	r3, [r4, #8]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006edc:	2304      	movs	r3, #4
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8006ede:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006ee2:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ee6:	e9c4 7004 	strd	r7, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8006eea:	4620      	mov	r0, r4
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8006eec:	e9c4 6106 	strd	r6, r1, [r4, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006ef0:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8006ef4:	f7fa f928 	bl	8001148 <HAL_DMA_Init>
 8006ef8:	bb18      	cbnz	r0, 8006f42 <HAL_SAI_MspInit+0x13e>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8006efa:	63a5      	str	r5, [r4, #56]	; 0x38
 8006efc:	682b      	ldr	r3, [r5, #0]
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8006efe:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
 8006f02:	e786      	b.n	8006e12 <HAL_SAI_MspInit+0xe>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006f04:	4918      	ldr	r1, [pc, #96]	; (8006f68 <HAL_SAI_MspInit+0x164>)
 8006f06:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8006f0a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8006f0e:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8006f12:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8006f16:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006f1a:	9102      	str	r1, [sp, #8]
 8006f1c:	9902      	ldr	r1, [sp, #8]
 8006f1e:	e781      	b.n	8006e24 <HAL_SAI_MspInit+0x20>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006f20:	4911      	ldr	r1, [pc, #68]	; (8006f68 <HAL_SAI_MspInit+0x164>)
 8006f22:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8006f26:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8006f2a:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8006f2e:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8006f32:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006f36:	9101      	str	r1, [sp, #4]
 8006f38:	9901      	ldr	r1, [sp, #4]
 8006f3a:	e7ae      	b.n	8006e9a <HAL_SAI_MspInit+0x96>
      Error_Handler();
 8006f3c:	f7ff fe36 	bl	8006bac <Error_Handler>
 8006f40:	e7a0      	b.n	8006e84 <HAL_SAI_MspInit+0x80>
      Error_Handler();
 8006f42:	f7ff fe33 	bl	8006bac <Error_Handler>
 8006f46:	e7d8      	b.n	8006efa <HAL_SAI_MspInit+0xf6>
 8006f48:	40015804 	.word	0x40015804
 8006f4c:	40015824 	.word	0x40015824
 8006f50:	200000ec 	.word	0x200000ec
 8006f54:	58021000 	.word	0x58021000
 8006f58:	20018cc4 	.word	0x20018cc4
 8006f5c:	40020040 	.word	0x40020040
 8006f60:	20018c4c 	.word	0x20018c4c
 8006f64:	40020028 	.word	0x40020028
 8006f68:	58024400 	.word	0x58024400

08006f6c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006f6c:	b538      	push	{r3, r4, r5, lr}

  hspi1.Instance = SPI1;
 8006f6e:	4a14      	ldr	r2, [pc, #80]	; (8006fc0 <MX_SPI1_Init+0x54>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006f70:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  hspi1.Instance = SPI1;
 8006f74:	4b13      	ldr	r3, [pc, #76]	; (8006fc4 <MX_SPI1_Init+0x58>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f76:	2507      	movs	r5, #7
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8006f78:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006f7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hspi1.Instance = SPI1;
 8006f80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006f82:	2200      	movs	r2, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006f84:	6058      	str	r0, [r3, #4]
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006f86:	4618      	mov	r0, r3
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f88:	60dd      	str	r5, [r3, #12]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006f8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006f8c:	e9c3 4106 	strd	r4, r1, [r3, #24]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f90:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f94:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 8006f98:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006f9c:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006fa0:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006fa4:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006fa8:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006fac:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006fb0:	f7fe f984 	bl	80052bc <HAL_SPI_Init>
 8006fb4:	b900      	cbnz	r0, 8006fb8 <MX_SPI1_Init+0x4c>
  {
    Error_Handler();
  }

}
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8006fbc:	f7ff bdf6 	b.w	8006bac <Error_Handler>
 8006fc0:	40013000 	.word	0x40013000
 8006fc4:	20018ed4 	.word	0x20018ed4

08006fc8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006fc8:	b538      	push	{r3, r4, r5, lr}

  hspi2.Instance = SPI2;
 8006fca:	4b12      	ldr	r3, [pc, #72]	; (8007014 <MX_SPI2_Init+0x4c>)
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8006fcc:	2200      	movs	r2, #0
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8006fce:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  hspi2.Instance = SPI2;
 8006fd2:	4d11      	ldr	r5, [pc, #68]	; (8007018 <MX_SPI2_Init+0x50>)
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006fd4:	2107      	movs	r1, #7
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006fd6:	4618      	mov	r0, r3
  hspi2.Instance = SPI2;
 8006fd8:	601d      	str	r5, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8006fda:	605a      	str	r2, [r3, #4]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8006fdc:	619a      	str	r2, [r3, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006fde:	e9c3 4102 	strd	r4, r1, [r3, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006fe2:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006fe6:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi2.Init.CRCPolynomial = 0x0;
 8006fea:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006fee:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006ff2:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006ff6:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006ffa:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006ffe:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007002:	f7fe f95b 	bl	80052bc <HAL_SPI_Init>
 8007006:	b900      	cbnz	r0, 800700a <MX_SPI2_Init+0x42>
  {
    Error_Handler();
  }

}
 8007008:	bd38      	pop	{r3, r4, r5, pc}
 800700a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800700e:	f7ff bdcd 	b.w	8006bac <Error_Handler>
 8007012:	bf00      	nop
 8007014:	20018dd4 	.word	0x20018dd4
 8007018:	40003800 	.word	0x40003800

0800701c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8007020:	4a68      	ldr	r2, [pc, #416]	; (80071c4 <HAL_SPI_MspInit+0x1a8>)
{
 8007022:	b08a      	sub	sp, #40	; 0x28
  if(spiHandle->Instance==SPI1)
 8007024:	6803      	ldr	r3, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007026:	2400      	movs	r4, #0
{
 8007028:	4606      	mov	r6, r0
  if(spiHandle->Instance==SPI1)
 800702a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800702c:	9409      	str	r4, [sp, #36]	; 0x24
 800702e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8007032:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8007036:	d005      	beq.n	8007044 <HAL_SPI_MspInit+0x28>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8007038:	4a63      	ldr	r2, [pc, #396]	; (80071c8 <HAL_SPI_MspInit+0x1ac>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d071      	beq.n	8007122 <HAL_SPI_MspInit+0x106>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800703e:	b00a      	add	sp, #40	; 0x28
 8007040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007044:	4b61      	ldr	r3, [pc, #388]	; (80071cc <HAL_SPI_MspInit+0x1b0>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007046:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007048:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800704a:	f04f 0805 	mov.w	r8, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 800704e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007052:	a905      	add	r1, sp, #20
    hdma_spi1_tx.Instance = DMA2_Stream0;
 8007054:	4d5e      	ldr	r5, [pc, #376]	; (80071d0 <HAL_SPI_MspInit+0x1b4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007056:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800705a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800705e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007062:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007066:	9200      	str	r2, [sp, #0]
 8007068:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800706a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800706e:	f042 0208 	orr.w	r2, r2, #8
 8007072:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007076:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800707a:	f002 0208 	and.w	r2, r2, #8
 800707e:	9201      	str	r2, [sp, #4]
 8007080:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007082:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800708a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800708e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007092:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007094:	f003 0340 	and.w	r3, r3, #64	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007098:	484e      	ldr	r0, [pc, #312]	; (80071d4 <HAL_SPI_MspInit+0x1b8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800709a:	9706      	str	r7, [sp, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800709c:	9302      	str	r3, [sp, #8]
 800709e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80070a0:	e9cd 7808 	strd	r7, r8, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070a4:	f7fb fb4e 	bl	8002744 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80070a8:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80070ac:	a905      	add	r1, sp, #20
 80070ae:	484a      	ldr	r0, [pc, #296]	; (80071d8 <HAL_SPI_MspInit+0x1bc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b0:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80070b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80070b4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070b8:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80070bc:	f7fb fb42 	bl	8002744 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80070c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80070c4:	a905      	add	r1, sp, #20
 80070c6:	4844      	ldr	r0, [pc, #272]	; (80071d8 <HAL_SPI_MspInit+0x1bc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070c8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80070ca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80070cc:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d0:	e9cd 4707 	strd	r4, r7, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80070d4:	f7fb fb36 	bl	8002744 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80070d8:	2726      	movs	r7, #38	; 0x26
    hdma_spi1_tx.Instance = DMA2_Stream0;
 80070da:	f8df c10c 	ldr.w	ip, [pc, #268]	; 80071e8 <HAL_SPI_MspInit+0x1cc>
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070de:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80070e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80070e4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80070e8:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070ea:	60ec      	str	r4, [r5, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070ec:	616c      	str	r4, [r5, #20]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80070ee:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070f0:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80070f2:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80070f4:	622b      	str	r3, [r5, #32]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80070f6:	e9c5 4406 	strd	r4, r4, [r5, #24]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80070fa:	e9c5 c700 	strd	ip, r7, [r5]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80070fe:	f7fa f823 	bl	8001148 <HAL_DMA_Init>
 8007102:	b108      	cbz	r0, 8007108 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8007104:	f7ff fd52 	bl	8006bac <Error_Handler>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8007108:	2200      	movs	r2, #0
 800710a:	2102      	movs	r1, #2
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800710c:	67b5      	str	r5, [r6, #120]	; 0x78
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800710e:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8007110:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8007112:	f7f9 fef5 	bl	8000f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007116:	2023      	movs	r0, #35	; 0x23
 8007118:	f7f9 ff28 	bl	8000f6c <HAL_NVIC_EnableIRQ>
}
 800711c:	b00a      	add	sp, #40	; 0x28
 800711e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007122:	4b2a      	ldr	r3, [pc, #168]	; (80071cc <HAL_SPI_MspInit+0x1b0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007124:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007126:	f44f 4530 	mov.w	r5, #45056	; 0xb000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800712a:	a905      	add	r1, sp, #20
    __HAL_RCC_SPI2_CLK_ENABLE();
 800712c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007130:	f44f 7780 	mov.w	r7, #256	; 0x100
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007138:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800713c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8007140:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007144:	9203      	str	r2, [sp, #12]
 8007146:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007148:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800714c:	4302      	orrs	r2, r0
 800714e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007152:	2205      	movs	r2, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007158:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800715a:	4003      	ands	r3, r0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800715c:	9008      	str	r0, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800715e:	481f      	ldr	r0, [pc, #124]	; (80071dc <HAL_SPI_MspInit+0x1c0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007160:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007162:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007164:	9b04      	ldr	r3, [sp, #16]
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8007166:	4d1e      	ldr	r5, [pc, #120]	; (80071e0 <HAL_SPI_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007168:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800716a:	f7fb faeb 	bl	8002744 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800716e:	4b1d      	ldr	r3, [pc, #116]	; (80071e4 <HAL_SPI_MspInit+0x1c8>)
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007170:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8007174:	f04f 0c27 	mov.w	ip, #39	; 0x27
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007178:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800717c:	2204      	movs	r2, #4
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800717e:	602b      	str	r3, [r5, #0]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007180:	2301      	movs	r3, #1
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007182:	6128      	str	r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007184:	4628      	mov	r0, r5
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007186:	60ac      	str	r4, [r5, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007188:	60ec      	str	r4, [r5, #12]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800718a:	f8c5 c004 	str.w	ip, [r5, #4]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800718e:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007192:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007196:	e9c5 7107 	strd	r7, r1, [r5, #28]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800719a:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800719e:	f7f9 ffd3 	bl	8001148 <HAL_DMA_Init>
 80071a2:	b960      	cbnz	r0, 80071be <HAL_SPI_MspInit+0x1a2>
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 80071a4:	2200      	movs	r2, #0
 80071a6:	2103      	movs	r1, #3
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80071a8:	67f5      	str	r5, [r6, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 80071aa:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80071ac:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 80071ae:	f7f9 fea7 	bl	8000f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80071b2:	2024      	movs	r0, #36	; 0x24
 80071b4:	f7f9 feda 	bl	8000f6c <HAL_NVIC_EnableIRQ>
}
 80071b8:	b00a      	add	sp, #40	; 0x28
 80071ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 80071be:	f7ff fcf5 	bl	8006bac <Error_Handler>
 80071c2:	e7ef      	b.n	80071a4 <HAL_SPI_MspInit+0x188>
 80071c4:	40013000 	.word	0x40013000
 80071c8:	40003800 	.word	0x40003800
 80071cc:	58024400 	.word	0x58024400
 80071d0:	20018f5c 	.word	0x20018f5c
 80071d4:	58020c00 	.word	0x58020c00
 80071d8:	58021800 	.word	0x58021800
 80071dc:	58020400 	.word	0x58020400
 80071e0:	20018e5c 	.word	0x20018e5c
 80071e4:	40020058 	.word	0x40020058
 80071e8:	40020410 	.word	0x40020410

080071ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071ec:	4b07      	ldr	r3, [pc, #28]	; (800720c <HAL_MspInit+0x20>)
{
 80071ee:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071f0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80071f4:	f042 0202 	orr.w	r2, r2, #2
 80071f8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80071fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	9301      	str	r3, [sp, #4]
 8007206:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007208:	b002      	add	sp, #8
 800720a:	4770      	bx	lr
 800720c:	58024400 	.word	0x58024400

08007210 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop

08007214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007214:	e7fe      	b.n	8007214 <HardFault_Handler>
 8007216:	bf00      	nop

08007218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007218:	e7fe      	b.n	8007218 <MemManage_Handler>
 800721a:	bf00      	nop

0800721c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800721c:	e7fe      	b.n	800721c <BusFault_Handler>
 800721e:	bf00      	nop

08007220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007220:	e7fe      	b.n	8007220 <UsageFault_Handler>
 8007222:	bf00      	nop

08007224 <SVC_Handler>:
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop

08007228 <DebugMon_Handler>:
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop

0800722c <PendSV_Handler>:
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop

08007230 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007230:	f7f9 b8aa 	b.w	8000388 <HAL_IncTick>

08007234 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <DMA1_Stream0_IRQHandler+0x8>)
 8007236:	f7fa be65 	b.w	8001f04 <HAL_DMA_IRQHandler>
 800723a:	bf00      	nop
 800723c:	20000158 	.word	0x20000158

08007240 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8007240:	4801      	ldr	r0, [pc, #4]	; (8007248 <DMA1_Stream1_IRQHandler+0x8>)
 8007242:	f7fa be5f 	b.w	8001f04 <HAL_DMA_IRQHandler>
 8007246:	bf00      	nop
 8007248:	20018c4c 	.word	0x20018c4c

0800724c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800724c:	4801      	ldr	r0, [pc, #4]	; (8007254 <DMA1_Stream2_IRQHandler+0x8>)
 800724e:	f7fa be59 	b.w	8001f04 <HAL_DMA_IRQHandler>
 8007252:	bf00      	nop
 8007254:	20018cc4 	.word	0x20018cc4

08007258 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8007258:	4801      	ldr	r0, [pc, #4]	; (8007260 <DMA1_Stream3_IRQHandler+0x8>)
 800725a:	f7fa be53 	b.w	8001f04 <HAL_DMA_IRQHandler>
 800725e:	bf00      	nop
 8007260:	20018e5c 	.word	0x20018e5c

08007264 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007264:	4801      	ldr	r0, [pc, #4]	; (800726c <SPI1_IRQHandler+0x8>)
 8007266:	f7fe bc53 	b.w	8005b10 <HAL_SPI_IRQHandler>
 800726a:	bf00      	nop
 800726c:	20018ed4 	.word	0x20018ed4

08007270 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007270:	4801      	ldr	r0, [pc, #4]	; (8007278 <SPI2_IRQHandler+0x8>)
 8007272:	f7fe bc4d 	b.w	8005b10 <HAL_SPI_IRQHandler>
 8007276:	bf00      	nop
 8007278:	20018dd4 	.word	0x20018dd4

0800727c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800727c:	4801      	ldr	r0, [pc, #4]	; (8007284 <DMA2_Stream0_IRQHandler+0x8>)
 800727e:	f7fa be41 	b.w	8001f04 <HAL_DMA_IRQHandler>
 8007282:	bf00      	nop
 8007284:	20018f5c 	.word	0x20018f5c

08007288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007288:	b430      	push	{r4, r5}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800728a:	4c19      	ldr	r4, [pc, #100]	; (80072f0 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800728c:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 800728e:	4b19      	ldr	r3, [pc, #100]	; (80072f4 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007290:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007294:	4818      	ldr	r0, [pc, #96]	; (80072f8 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007296:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800729a:	4d18      	ldr	r5, [pc, #96]	; (80072fc <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800729c:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 80072a0:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80072a2:	4917      	ldr	r1, [pc, #92]	; (8007300 <SystemInit+0x78>)
  RCC->CR |= RCC_CR_HSION;
 80072a4:	f044 0401 	orr.w	r4, r4, #1
 80072a8:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 80072aa:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80072ac:	681c      	ldr	r4, [r3, #0]
 80072ae:	4020      	ands	r0, r4
 80072b0:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 80072b2:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80072b4:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80072b6:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 80072b8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 80072ba:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 80072bc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 80072be:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 80072c0:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 80072c2:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 80072c4:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 80072c6:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80072ce:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80072d0:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80072d2:	682b      	ldr	r3, [r5, #0]
 80072d4:	4019      	ands	r1, r3
 80072d6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80072da:	d202      	bcs.n	80072e2 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80072dc:	4b09      	ldr	r3, [pc, #36]	; (8007304 <SystemInit+0x7c>)
 80072de:	2201      	movs	r2, #1
 80072e0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80072e2:	4b03      	ldr	r3, [pc, #12]	; (80072f0 <SystemInit+0x68>)
 80072e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072e8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80072ea:	bc30      	pop	{r4, r5}
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	e000ed00 	.word	0xe000ed00
 80072f4:	58024400 	.word	0x58024400
 80072f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80072fc:	5c001000 	.word	0x5c001000
 8007300:	ffff0000 	.word	0xffff0000
 8007304:	51008108 	.word	0x51008108

08007308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007340 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800730c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800730e:	e003      	b.n	8007318 <LoopCopyDataInit>

08007310 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007310:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007312:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007314:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007316:	3104      	adds	r1, #4

08007318 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007318:	480b      	ldr	r0, [pc, #44]	; (8007348 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800731a:	4b0c      	ldr	r3, [pc, #48]	; (800734c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800731c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800731e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007320:	d3f6      	bcc.n	8007310 <CopyDataInit>
  ldr  r2, =_sbss
 8007322:	4a0b      	ldr	r2, [pc, #44]	; (8007350 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007324:	e002      	b.n	800732c <LoopFillZerobss>

08007326 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007326:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007328:	f842 3b04 	str.w	r3, [r2], #4

0800732c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800732e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007330:	d3f9      	bcc.n	8007326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007332:	f7ff ffa9 	bl	8007288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007336:	f000 fc85 	bl	8007c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800733a:	f7ff f945 	bl	80065c8 <main>
  bx  lr    
 800733e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007340:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007344:	0800aa20 	.word	0x0800aa20
  ldr  r0, =_sdata
 8007348:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800734c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8007350:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8007354:	20019014 	.word	0x20019014

08007358 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007358:	e7fe      	b.n	8007358 <ADC3_IRQHandler>
 800735a:	0000      	movs	r0, r0
 800735c:	0000      	movs	r0, r0
	...

08007360 <tRingBufferInt_initToPool>:
{
    tRingBufferInt_initToPool(ring, size, &leaf.mempool);
}

void    tRingBufferInt_initToPool   (tRingBufferInt* const ring, int size, tMempool* const mempool)
{
 8007360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tMempool* m = *mempool;
 8007362:	6815      	ldr	r5, [r2, #0]
{
 8007364:	460e      	mov	r6, r1
 8007366:	4607      	mov	r7, r0
    _tRingBufferInt* r = *ring = (_tRingBufferInt*) mpool_alloc(sizeof(_tRingBufferInt), m);
 8007368:	2014      	movs	r0, #20
 800736a:	4629      	mov	r1, r5
 800736c:	f000 fb76 	bl	8007a5c <mpool_alloc>
    r->mempool = m;

    // Ensure size is a power of 2
    if (size <= 0) r->size = 1;
 8007370:	2e00      	cmp	r6, #0
    _tRingBufferInt* r = *ring = (_tRingBufferInt*) mpool_alloc(sizeof(_tRingBufferInt), m);
 8007372:	6038      	str	r0, [r7, #0]
 8007374:	4604      	mov	r4, r0
    r->mempool = m;
 8007376:	6005      	str	r5, [r0, #0]
    if (size <= 0) r->size = 1;
 8007378:	dd1e      	ble.n	80073b8 <tRingBufferInt_initToPool+0x58>
    else r->size = pow(2, ceil(log2(size)));
 800737a:	ee07 6a90 	vmov	s15, r6
 800737e:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8007382:	f000 ff49 	bl	8008218 <log>
 8007386:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80073c0 <tRingBufferInt_initToPool+0x60>
 800738a:	ee20 1b01 	vmul.f64	d1, d0, d1
 800738e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8007392:	feba 1b41 	vrintp.f64	d1, d1
 8007396:	f000 ffaf 	bl	80082f8 <pow>
 800739a:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 800739e:	ee17 3a90 	vmov	r3, s15
 80073a2:	1e5a      	subs	r2, r3, #1
 80073a4:	0098      	lsls	r0, r3, #2
 80073a6:	60a3      	str	r3, [r4, #8]
    r->mask = r->size - 1;

    r->buffer = (int*) mpool_calloc(sizeof(int) * r->size, m);
 80073a8:	4629      	mov	r1, r5
    r->mask = r->size - 1;
 80073aa:	6122      	str	r2, [r4, #16]
    r->buffer = (int*) mpool_calloc(sizeof(int) * r->size, m);
 80073ac:	f000 fbb2 	bl	8007b14 <mpool_calloc>
    r->pos = 0;
 80073b0:	2300      	movs	r3, #0
    r->buffer = (int*) mpool_calloc(sizeof(int) * r->size, m);
 80073b2:	6060      	str	r0, [r4, #4]
    r->pos = 0;
 80073b4:	60e3      	str	r3, [r4, #12]
}
 80073b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073b8:	2004      	movs	r0, #4
 80073ba:	2200      	movs	r2, #0
    if (size <= 0) r->size = 1;
 80073bc:	2301      	movs	r3, #1
 80073be:	e7f2      	b.n	80073a6 <tRingBufferInt_initToPool+0x46>
 80073c0:	652b82fe 	.word	0x652b82fe
 80073c4:	3ff71547 	.word	0x3ff71547

080073c8 <tThreshold_init>:
}



void tThreshold_init (tThreshold* const th, float low, float high)
{
 80073c8:	b538      	push	{r3, r4, r5, lr}
	tThreshold_initToPool(th, low, high, &leaf.mempool);
}

void tThreshold_initToPool (tThreshold* const th, float low, float high, tMempool* const mp)
{
    _tMempool* m = *mp;
 80073ca:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <tThreshold_init+0x34>)
{
 80073cc:	4605      	mov	r5, r0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 80073ce:	2010      	movs	r0, #16
{
 80073d0:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80073d4:	699c      	ldr	r4, [r3, #24]
{
 80073d6:	eeb0 8a40 	vmov.f32	s16, s0
 80073da:	eef0 8a60 	vmov.f32	s17, s1
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 80073de:	4621      	mov	r1, r4
 80073e0:	f000 fb3c 	bl	8007a5c <mpool_alloc>
    t->mempool = m;
    
    t->highThresh = high;
    t->lowThresh = low;

    t->currentValue = 0;
 80073e4:	2300      	movs	r3, #0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 80073e6:	6028      	str	r0, [r5, #0]
    t->mempool = m;
 80073e8:	6004      	str	r4, [r0, #0]
    t->highThresh = high;
 80073ea:	edc0 8a01 	vstr	s17, [r0, #4]
    t->lowThresh = low;
 80073ee:	ed80 8a02 	vstr	s16, [r0, #8]
    t->currentValue = 0;
 80073f2:	60c3      	str	r3, [r0, #12]
}
 80073f4:	ecbd 8b02 	vpop	{d8}
 80073f8:	bd38      	pop	{r3, r4, r5, pc}
 80073fa:	bf00      	nop
 80073fc:	20018fd4 	.word	0x20018fd4

08007400 <tThreshold_tick>:
    mpool_free((char*)t, t->mempool);
}

int tThreshold_tick(tThreshold* const th, float in)
{
    _tThreshold* t = *th;
 8007400:	6803      	ldr	r3, [r0, #0]

    if (in >= t->highThresh)
 8007402:	edd3 7a01 	vldr	s15, [r3, #4]
 8007406:	eef4 7ac0 	vcmpe.f32	s15, s0
 800740a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740e:	d90c      	bls.n	800742a <tThreshold_tick+0x2a>
    {
    	t->currentValue = 1;
    }
    else if (in <= t->lowThresh)
 8007410:	edd3 7a02 	vldr	s15, [r3, #8]
 8007414:	eef4 7ac0 	vcmpe.f32	s15, s0
 8007418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741c:	db03      	blt.n	8007426 <tThreshold_tick+0x26>
	{
    	t->currentValue = 0;
 800741e:	2200      	movs	r2, #0
 8007420:	4610      	mov	r0, r2
 8007422:	60da      	str	r2, [r3, #12]
	}

    return t->currentValue;
}
 8007424:	4770      	bx	lr
 8007426:	68d8      	ldr	r0, [r3, #12]
 8007428:	4770      	bx	lr
    	t->currentValue = 1;
 800742a:	2001      	movs	r0, #1
 800742c:	60d8      	str	r0, [r3, #12]
 800742e:	4770      	bx	lr

08007430 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide)
{
 8007430:	b538      	push	{r3, r4, r5, lr}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf.mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 8007432:	4b12      	ldr	r3, [pc, #72]	; (800747c <tSlide_init+0x4c>)
{
 8007434:	4605      	mov	r5, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8007436:	201c      	movs	r0, #28
{
 8007438:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800743c:	699c      	ldr	r4, [r3, #24]
{
 800743e:	eeb0 8a60 	vmov.f32	s16, s1
 8007442:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8007446:	4621      	mov	r1, r4
 8007448:	f000 fb08 	bl	8007a5c <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 800744c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8007450:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8007452:	6028      	str	r0, [r5, #0]
    s->mempool = m;
 8007454:	6004      	str	r4, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8007456:	fec8 8aa7 	vmaxnm.f32	s17, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 800745a:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 800745e:	eec7 6aa8 	vdiv.f32	s13, s15, s17
    s->prevIn = 0.0f;
 8007462:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8007464:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8007466:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8007468:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 800746a:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 800746e:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8007472:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8007476:	ecbd 8b02 	vpop	{d8}
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	20018fd4 	.word	0x20018fd4

08007480 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 8007480:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 8007482:	edd3 7a01 	vldr	s15, [r3, #4]
 8007486:	eef4 7ac0 	vcmpe.f32	s15, s0
 800748a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800748e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8007492:	bf94      	ite	ls
 8007494:	edd3 6a04 	vldrls	s13, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8007498:	edd3 6a05 	vldrhi	s13, [r3, #20]
 800749c:	eee6 7a87 	vfma.f32	s15, s13, s14
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 80074a0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80074dc <tSlide_tick+0x5c>
 80074a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ac:	d50c      	bpl.n	80074c8 <tSlide_tick+0x48>
 80074ae:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80074e0 <tSlide_tick+0x60>
#endif
    s->prevIn = in;
 80074b2:	ed83 0a03 	vstr	s0, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 80074b6:	eef0 7a47 	vmov.f32	s15, s14
 80074ba:	ed83 7a02 	vstr	s14, [r3, #8]
    s->prevOut = s->currentOut;
    return s->currentOut;
}
 80074be:	eeb0 0a67 	vmov.f32	s0, s15
    s->prevOut = s->currentOut;
 80074c2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80074c6:	4770      	bx	lr
    s->prevIn = in;
 80074c8:	ed83 0a03 	vstr	s0, [r3, #12]
}
 80074cc:	eeb0 0a67 	vmov.f32	s0, s15
 80074d0:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 80074d4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	006ce3ee 	.word	0x006ce3ee
 80074e0:	00000000 	.word	0x00000000

080074e4 <tHighpass_init>:
    svf->a3 = svf->g * svf->a2;
}

/* Highpass */
void    tHighpass_init(tHighpass* const ft, float freq)
{
 80074e4:	b570      	push	{r4, r5, r6, lr}
    tHighpass_initToPool(ft, freq, &leaf.mempool);
}

void    tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 80074e6:	4c0e      	ldr	r4, [pc, #56]	; (8007520 <tHighpass_init+0x3c>)
{
 80074e8:	4606      	mov	r6, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80074ea:	2014      	movs	r0, #20
    _tMempool* m = *mp;
 80074ec:	69a5      	ldr	r5, [r4, #24]
{
 80074ee:	ed2d 8b02 	vpush	{d8}
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80074f2:	4629      	mov	r1, r5
{
 80074f4:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80074f8:	f000 fb0c 	bl	8007b14 <mpool_calloc>
    f->mempool = m;
    
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 80074fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8007500:	6030      	str	r0, [r6, #0]
    f->ys = 0.0f;
 8007502:	2300      	movs	r3, #0
    f->mempool = m;
 8007504:	6005      	str	r5, [r0, #0]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 8007506:	ed94 7a03 	vldr	s14, [r4, #12]
    f->xs = 0.0f;
    
    f->frequency = freq;
 800750a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 800750e:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->ys = 0.0f;
 8007512:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 8007514:	6043      	str	r3, [r0, #4]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 8007516:	edc0 7a03 	vstr	s15, [r0, #12]
}
 800751a:	ecbd 8b02 	vpop	{d8}
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	20018fd4 	.word	0x20018fd4

08007524 <tHighpass_tick>:
}

// From JOS DC Blocker
float   tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8007524:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8007526:	edd3 7a01 	vldr	s15, [r3, #4]
 800752a:	ed93 7a02 	vldr	s14, [r3, #8]
 800752e:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8007532:	ed83 0a01 	vstr	s0, [r3, #4]
    f->ys = x - f->xs + f->R * f->ys;
 8007536:	eed6 7a87 	vfnms.f32	s15, s13, s14
 800753a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800753e:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8007542:	4770      	bx	lr

08007544 <tVZFilter_init>:
}

/////

void    tVZFilter_init           (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth)
{
 8007544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf.mempool);
}

void    tVZFilter_initToPool     (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth, tMempool* const mp)
{
    _tMempool* m = *mp;
 8007548:	4cc8      	ldr	r4, [pc, #800]	; (800786c <tVZFilter_init+0x328>)
{
 800754a:	4605      	mov	r5, r0
 800754c:	4688      	mov	r8, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800754e:	2044      	movs	r0, #68	; 0x44
    f->mempool = m;
    
    f->fc   = freq;
    f->type = type;
    f->G    = ONE_OVER_SQRT2;
 8007550:	4fc7      	ldr	r7, [pc, #796]	; (8007870 <tVZFilter_init+0x32c>)
{
 8007552:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8007556:	69a6      	ldr	r6, [r4, #24]
{
 8007558:	eef0 8a40 	vmov.f32	s17, s0
 800755c:	eeb0 8a60 	vmov.f32	s16, s1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8007560:	4631      	mov	r1, r6
 8007562:	f000 fa7b 	bl	8007a5c <mpool_alloc>
    f->invG    = 1.0f/ONE_OVER_SQRT2;
    f->B    = bandWidth;
    f->m    = 0.0f;
 8007566:	2300      	movs	r3, #0
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8007568:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800756a:	6006      	str	r6, [r0, #0]
    f->type = type;
 800756c:	f880 8004 	strb.w	r8, [r0, #4]
    f->s1 = 0.0f;
    f->s2 = 0.0f;
    f->sr = leaf.sampleRate;
 8007570:	6821      	ldr	r1, [r4, #0]
    f->inv_sr = leaf.invSampleRate;
 8007572:	6862      	ldr	r2, [r4, #4]
    f->invG    = 1.0f/ONE_OVER_SQRT2;
 8007574:	4ebf      	ldr	r6, [pc, #764]	; (8007874 <tVZFilter_init+0x330>)
    f->fc   = freq;
 8007576:	edc0 8a0a 	vstr	s17, [r0, #40]	; 0x28
    f->m    = 0.0f;
 800757a:	6383      	str	r3, [r0, #56]	; 0x38
    f->s1 = 0.0f;
 800757c:	6083      	str	r3, [r0, #8]
    f->s2 = 0.0f;
 800757e:	60c3      	str	r3, [r0, #12]
    f->B    = bandWidth;
 8007580:	ed80 8a0d 	vstr	s16, [r0, #52]	; 0x34
    f->G    = ONE_OVER_SQRT2;
 8007584:	62c7      	str	r7, [r0, #44]	; 0x2c
    f->invG    = 1.0f/ONE_OVER_SQRT2;
 8007586:	6306      	str	r6, [r0, #48]	; 0x30
    f->sr = leaf.sampleRate;
 8007588:	63c1      	str	r1, [r0, #60]	; 0x3c
    f->inv_sr = leaf.invSampleRate;
 800758a:	6402      	str	r2, [r0, #64]	; 0x40


void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{

    _tVZFilter* f = *vf;
 800758c:	682c      	ldr	r4, [r5, #0]
    f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 800758e:	eddf 7aba 	vldr	s15, [pc, #744]	; 8007878 <tVZFilter_init+0x334>
 8007592:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8007596:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800759a:	ee28 8a07 	vmul.f32	s16, s16, s14
 800759e:	ee28 8a27 	vmul.f32	s16, s16, s15
 80075a2:	eeb0 0a48 	vmov.f32	s0, s16
 80075a6:	f000 fdbd 	bl	8008124 <tanf>

      switch( f->type )
 80075aa:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 80075ac:	eef0 8a40 	vmov.f32	s17, s0
 80075b0:	ed84 0a04 	vstr	s0, [r4, #16]
      switch( f->type )
 80075b4:	2b0a      	cmp	r3, #10
 80075b6:	f200 81b5 	bhi.w	8007924 <tVZFilter_init+0x3e0>
 80075ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 80075be:	0054      	.short	0x0054
 80075c0:	006a005f 	.word	0x006a005f
 80075c4:	00ac0075 	.word	0x00ac0075
 80075c8:	011700e4 	.word	0x011700e4
 80075cc:	01630137 	.word	0x01630137
 80075d0:	000b01a8 	.word	0x000b01a8
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80075d4:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80075d8:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 80075dc:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80075de:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80075e2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80075e6:	f000 fc5f 	bl	8007ea8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 80075ea:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 80075ee:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 80075f2:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8007878 <tVZFilter_init+0x334>
 80075f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80075fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007602:	f000 fd8f 	bl	8008124 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8007606:	ed95 7a04 	vldr	s14, [r5, #16]
                               // unwarped: r = pow(2, -B/2) -> approximation for low
                               // center-frequencies
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800760a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800760e:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8007612:	edc4 7a07 	vstr	s15, [r4, #28]
 8007616:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800761a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800761e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007622:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007626:	ee20 0a07 	vmul.f32	s0, s0, s14
 800762a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800762e:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8007632:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8007636:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800763a:	eeb1 7a67 	vneg.f32	s14, s15
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800763e:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8007642:	ed84 7a08 	vstr	s14, [r4, #32]
      f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 8007646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800764a:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800764e:	eef0 6a47 	vmov.f32	s13, s14
 8007652:	eee7 6aa8 	vfma.f32	s13, s15, s17
 8007656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800765a:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800765e:	ecbd 8b04 	vpop	{d8-d9}
 8007662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8007666:	2300      	movs	r3, #0
 8007668:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800766c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8007670:	6262      	str	r2, [r4, #36]	; 0x24
            f->R2 = f->invG;
 8007672:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8007676:	61e3      	str	r3, [r4, #28]
 8007678:	6223      	str	r3, [r4, #32]
 800767a:	e7e4      	b.n	8007646 <tVZFilter_init+0x102>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800767c:	2300      	movs	r3, #0
 800767e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8007682:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8007686:	61e2      	str	r2, [r4, #28]
            f->R2 = f->invG;
 8007688:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800768c:	6223      	str	r3, [r4, #32]
 800768e:	6263      	str	r3, [r4, #36]	; 0x24
 8007690:	e7d9      	b.n	8007646 <tVZFilter_init+0x102>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8007692:	2300      	movs	r3, #0
 8007694:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8007698:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800769c:	6222      	str	r2, [r4, #32]
            f->R2 = f->invG;
 800769e:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80076a2:	61e3      	str	r3, [r4, #28]
 80076a4:	6263      	str	r3, [r4, #36]	; 0x24
 80076a6:	e7ce      	b.n	8007646 <tVZFilter_init+0x102>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80076a8:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80076ac:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 80076b0:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80076b2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80076b6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80076ba:	f000 fbf5 	bl	8007ea8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 80076be:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 80076c2:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 80076c6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8007878 <tVZFilter_init+0x334>
 80076ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80076ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80076d6:	f000 fd25 	bl	8008124 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80076da:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80076de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 80076e2:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80076e4:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 80076e8:	61e3      	str	r3, [r4, #28]
 80076ea:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80076ec:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80076f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80076f4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80076f8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80076fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007700:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8007704:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8007708:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800770c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8007710:	edc4 7a08 	vstr	s15, [r4, #32]
 8007714:	e797      	b.n	8007646 <tVZFilter_init+0x102>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8007716:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800771a:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800771e:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8007720:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007724:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007728:	f000 fbbe 	bl	8007ea8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800772c:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8007730:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8007734:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8007878 <tVZFilter_init+0x334>
 8007738:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800773c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007740:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007744:	f000 fcee 	bl	8008124 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8007748:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800774c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8007750:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8007752:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8007756:	6223      	str	r3, [r4, #32]
 8007758:	edc4 7a07 	vstr	s15, [r4, #28]
 800775c:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8007760:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007764:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007768:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800776c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007770:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007774:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8007778:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800777c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007780:	edc4 7a05 	vstr	s15, [r4, #20]
 8007784:	e75f      	b.n	8007646 <tVZFilter_init+0x102>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8007786:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800778a:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 800778e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007792:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007796:	f000 fb87 	bl	8007ea8 <powf>
            float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800779a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800779e:	f000 fcc1 	bl	8008124 <tanf>
            float r  = f->g/wl;
 80077a2:	ee88 0a80 	vdiv.f32	s0, s17, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80077a6:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 80077aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80077ae:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80077b2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80077b6:	edc4 7a07 	vstr	s15, [r4, #28]
 80077ba:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80077be:	ee67 6a26 	vmul.f32	s13, s14, s13
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80077c2:	ee20 0a00 	vmul.f32	s0, s0, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80077c6:	eee0 7a00 	vfma.f32	s15, s0, s0
 80077ca:	ee87 6a80 	vdiv.f32	s12, s15, s0
 80077ce:	ee76 7a65 	vsub.f32	s15, s12, s11
 80077d2:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80077d6:	eef1 7ac6 	vsqrt.f32	s15, s12
 80077da:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80077de:	ee27 7a27 	vmul.f32	s14, s14, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80077e2:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80077e6:	ed84 7a08 	vstr	s14, [r4, #32]
 80077ea:	e72c      	b.n	8007646 <tVZFilter_init+0x102>
            float A = sqrtf(f->G);
 80077ec:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
          f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80077f0:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80077f4:	eddf 7a21 	vldr	s15, [pc, #132]	; 800787c <tVZFilter_init+0x338>
            float A = sqrtf(f->G);
 80077f8:	eeb1 8ac9 	vsqrt.f32	s16, s18
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80077fc:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8007800:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007804:	eef1 7ac8 	vsqrt.f32	s15, s16
          f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007808:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 800780c:	edc4 8a04 	vstr	s17, [r4, #16]
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8007810:	f000 ff12 	bl	8008638 <sinhf>
 8007814:	ee70 7a00 	vadd.f32	s15, s0, s0
          f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8007818:	ed84 9a07 	vstr	s18, [r4, #28]
 800781c:	6265      	str	r5, [r4, #36]	; 0x24
 800781e:	ee28 8a27 	vmul.f32	s16, s16, s15
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8007822:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8007826:	ed84 8a08 	vstr	s16, [r4, #32]
 800782a:	e70c      	b.n	8007646 <tVZFilter_init+0x102>
          float A = sqrtf(f->G);
 800782c:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8007830:	eddf 7a12 	vldr	s15, [pc, #72]	; 800787c <tVZFilter_init+0x338>
          float A = sqrtf(f->G);
 8007834:	eeb1 8ac9 	vsqrt.f32	s16, s18
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8007838:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800783c:	ee20 0a27 	vmul.f32	s0, s0, s15
          f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007840:	eef1 7ac8 	vsqrt.f32	s15, s16
 8007844:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8007848:	edc4 8a04 	vstr	s17, [r4, #16]
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800784c:	f000 fef4 	bl	8008638 <sinhf>
 8007850:	ee70 7a00 	vadd.f32	s15, s0, s0
          f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8007854:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007858:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 800785c:	ee28 8a27 	vmul.f32	s16, s16, s15
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8007860:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8007864:	61e3      	str	r3, [r4, #28]
 8007866:	ed84 8a08 	vstr	s16, [r4, #32]
 800786a:	e6ec      	b.n	8007646 <tVZFilter_init+0x102>
 800786c:	20018fd4 	.word	0x20018fd4
 8007870:	3f3504f3 	.word	0x3f3504f3
 8007874:	3fb504f3 	.word	0x3fb504f3
 8007878:	40490fdb 	.word	0x40490fdb
 800787c:	3eb17218 	.word	0x3eb17218
 8007880:	00000000 	.word	0x00000000
          float x  = 2.0f*f->m-1.0f;
 8007884:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007888:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 800788c:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
            f->R2 = f->invG;
 8007890:	6b23      	ldr	r3, [r4, #48]	; 0x30
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8007892:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 8007880 <tVZFilter_init+0x33c>
            f->R2 = f->invG;
 8007896:	6163      	str	r3, [r4, #20]
          float x  = 2.0f*f->m-1.0f;
 8007898:	eea7 8a27 	vfma.f32	s16, s14, s15
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800789c:	eef1 8a48 	vneg.f32	s17, s16
 80078a0:	eeb0 0a68 	vmov.f32	s0, s17
 80078a4:	f000 f8ba 	bl	8007a1c <maximum>
          f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80078a8:	ed5f 0a0b 	vldr	s1, [pc, #-44]	; 8007880 <tVZFilter_init+0x33c>
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80078ac:	ed84 0a07 	vstr	s0, [r4, #28]
          f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80078b0:	eeb0 0a48 	vmov.f32	s0, s16
 80078b4:	f000 f8b6 	bl	8007a24 <minimum>
          f->cB = 1.0f-x*x;
 80078b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
          float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 80078bc:	edd4 6a07 	vldr	s13, [r4, #28]
 80078c0:	edd4 7a05 	vldr	s15, [r4, #20]
          f->cB = 1.0f-x*x;
 80078c4:	eea8 7a88 	vfma.f32	s14, s17, s16
          float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 80078c8:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 80078cc:	ee36 5aa6 	vadd.f32	s10, s13, s13
 80078d0:	edd4 8a04 	vldr	s17, [r4, #16]
 80078d4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80078d8:	ee27 6a07 	vmul.f32	s12, s14, s14
 80078dc:	eea6 6aa6 	vfma.f32	s12, s13, s13
 80078e0:	eea0 6a00 	vfma.f32	s12, s0, s0
 80078e4:	eea0 6a45 	vfms.f32	s12, s0, s10
 80078e8:	ee84 5a86 	vdiv.f32	s10, s9, s12
 80078ec:	eeb1 6ac5 	vsqrt.f32	s12, s10
 80078f0:	ee26 6a25 	vmul.f32	s12, s12, s11
          f->cL *= s; f->cB *= s; f->cH *= s;
 80078f4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80078f8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80078fc:	ee20 0a06 	vmul.f32	s0, s0, s12
 8007900:	edc4 6a07 	vstr	s13, [r4, #28]
 8007904:	ed84 7a08 	vstr	s14, [r4, #32]
 8007908:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 800790c:	e69b      	b.n	8007646 <tVZFilter_init+0x102>
          f->cL = 1.0f;
 800790e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
          f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8007912:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
          f->cL = 1.0f;
 8007916:	61e3      	str	r3, [r4, #28]
          f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8007918:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cH = 1.0f;
 800791c:	6263      	str	r3, [r4, #36]	; 0x24
          f->cB = f->R2;
 800791e:	edc4 7a08 	vstr	s15, [r4, #32]
 8007922:	e690      	b.n	8007646 <tVZFilter_init+0x102>
 8007924:	edd4 7a05 	vldr	s15, [r4, #20]
 8007928:	e68d      	b.n	8007646 <tVZFilter_init+0x102>
 800792a:	bf00      	nop

0800792c <tVZFilter_tick>:
{
 800792c:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 800792e:	6804      	ldr	r4, [r0, #0]
{
 8007930:	ed2d 8b06 	vpush	{d8-d10}
    yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 8007934:	ed94 8a02 	vldr	s16, [r4, #8]
 8007938:	edd4 7a05 	vldr	s15, [r4, #20]
 800793c:	ed94 9a04 	vldr	s18, [r4, #16]
 8007940:	eea7 0ac8 	vfms.f32	s0, s15, s16
 8007944:	edd4 9a03 	vldr	s19, [r4, #12]
 8007948:	edd4 7a06 	vldr	s15, [r4, #24]
 800794c:	eea8 0a49 	vfms.f32	s0, s16, s18
 8007950:	ee70 8a69 	vsub.f32	s17, s0, s19
 8007954:	ee68 8aa7 	vmul.f32	s17, s17, s15
    yB = tanhf(f->g*yH) + f->s1;
 8007958:	ee29 aa28 	vmul.f32	s20, s18, s17
 800795c:	eeb0 0a4a 	vmov.f32	s0, s20
 8007960:	f000 fc08 	bl	8008174 <tanhf>
 8007964:	ee38 8a00 	vadd.f32	s16, s16, s0
    yL = tanhf(f->g*yB) + f->s2;
 8007968:	ee29 9a08 	vmul.f32	s18, s18, s16
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 800796c:	ee3a aa08 	vadd.f32	s20, s20, s16
    yL = tanhf(f->g*yB) + f->s2;
 8007970:	eeb0 0a49 	vmov.f32	s0, s18
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 8007974:	ed84 aa02 	vstr	s20, [r4, #8]
    yL = tanhf(f->g*yB) + f->s2;
 8007978:	f000 fbfc 	bl	8008174 <tanhf>
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800797c:	edd4 7a08 	vldr	s15, [r4, #32]
    yL = tanhf(f->g*yB) + f->s2;
 8007980:	ee79 9a80 	vadd.f32	s19, s19, s0
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8007984:	ed94 7a07 	vldr	s14, [r4, #28]
 8007988:	ee28 0a27 	vmul.f32	s0, s16, s15
 800798c:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8007990:	ee39 9a29 	vadd.f32	s18, s18, s19
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8007994:	eea7 0a29 	vfma.f32	s0, s14, s19
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8007998:	ed84 9a03 	vstr	s18, [r4, #12]
}
 800799c:	eea7 0aa8 	vfma.f32	s0, s15, s17
 80079a0:	ecbd 8b06 	vpop	{d8-d10}
 80079a4:	bd10      	pop	{r4, pc}
 80079a6:	bf00      	nop

080079a8 <LEAF_clip>:

float   LEAF_clip(float min, float val, float max)
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 80079a8:	eeb4 0ac1 	vcmpe.f32	s0, s2
 80079ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b0:	dd05      	ble.n	80079be <LEAF_clip+0x16>
 80079b2:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 80079b6:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 80079ba:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 80079be:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80079c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c6:	dc01      	bgt.n	80079cc <LEAF_clip+0x24>
 80079c8:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop

080079d0 <LEAF_generate_atodb>:
    }
}

void LEAF_generate_atodb(float* buffer, int size)
{
    float increment = 1.0f / (float)size;
 80079d0:	ee07 1a90 	vmov	s15, r1
 80079d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    for (int i = 0; i < size; i++)
 80079d8:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)size;
 80079da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80079de:	b538      	push	{r3, r4, r5, lr}
 80079e0:	ed2d 8b04 	vpush	{d8-d9}
    float increment = 1.0f / (float)size;
 80079e4:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 80079e8:	dd12      	ble.n	8007a10 <LEAF_generate_atodb+0x40>
 80079ea:	4604      	mov	r4, r0
    float x = 0.0f;
 80079ec:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007a18 <LEAF_generate_atodb+0x48>
 80079f0:	eb00 0581 	add.w	r5, r0, r1, lsl #2
}


float atodb(float a)
{
    return 20.0f*log10f(a);
 80079f4:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 80079f8:	eeb0 0a48 	vmov.f32	s0, s16
 80079fc:	f000 fdaa 	bl	8008554 <log10f>
 8007a00:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 8007a04:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 8007a08:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8007a0c:	42a5      	cmp	r5, r4
 8007a0e:	d1f3      	bne.n	80079f8 <LEAF_generate_atodb+0x28>
}
 8007a10:	ecbd 8b04 	vpop	{d8-d9}
 8007a14:	bd38      	pop	{r3, r4, r5, pc}
 8007a16:	bf00      	nop
 8007a18:	00000000 	.word	0x00000000

08007a1c <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8007a1c:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop

08007a24 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8007a24:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop

08007a2c <leaf_pool_init>:
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(char* memory, size_t size)
{
 8007a2c:	b470      	push	{r4, r5, r6}
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <leaf_pool_init+0x2c>)
 8007a30:	2610      	movs	r6, #16
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 8007a32:	f1a1 0410 	sub.w	r4, r1, #16
    pool->usize  = 0;
 8007a36:	2200      	movs	r2, #0
    pool->msize  = size;
 8007a38:	6259      	str	r1, [r3, #36]	; 0x24
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + leaf.header_size;
 8007a3a:	1985      	adds	r5, r0, r6
    leaf.mempool = &leaf._internal_mempool;
 8007a3c:	f103 011c 	add.w	r1, r3, #28
    pool->mpool = (char*)memory;
 8007a40:	61d8      	str	r0, [r3, #28]
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 8007a42:	62de      	str	r6, [r3, #44]	; 0x2c
    pool->usize  = 0;
 8007a44:	621a      	str	r2, [r3, #32]
    node->pool = block_location + leaf.header_size;
 8007a46:	6005      	str	r5, [r0, #0]
    node->next = next;
    node->prev = prev;
    node->size = size;
 8007a48:	60c4      	str	r4, [r0, #12]
    node->prev = prev;
 8007a4a:	e9c0 2201 	strd	r2, r2, [r0, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 8007a4e:	6298      	str	r0, [r3, #40]	; 0x28
    leaf.mempool = &leaf._internal_mempool;
 8007a50:	6199      	str	r1, [r3, #24]
}
 8007a52:	bc70      	pop	{r4, r5, r6}
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20018fd4 	.word	0x20018fd4

08007a5c <mpool_alloc>:
{
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pool->head == NULL)
 8007a5e:	68cb      	ldr	r3, [r1, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d038      	beq.n	8007ad6 <mpool_alloc+0x7a>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8007a64:	1dc5      	adds	r5, r0, #7
 8007a66:	f025 0507 	bic.w	r5, r5, #7
    while (node_to_alloc->size < size_to_alloc)
 8007a6a:	e002      	b.n	8007a72 <mpool_alloc+0x16>
        if (node_to_alloc == NULL)
 8007a6c:	4623      	mov	r3, r4
 8007a6e:	2c00      	cmp	r4, #0
 8007a70:	d031      	beq.n	8007ad6 <mpool_alloc+0x7a>
    while (node_to_alloc->size < size_to_alloc)
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	685c      	ldr	r4, [r3, #4]
 8007a76:	42aa      	cmp	r2, r5
 8007a78:	d3f8      	bcc.n	8007a6c <mpool_alloc+0x10>
    if (leftover > leaf.header_size)
 8007a7a:	4e25      	ldr	r6, [pc, #148]	; (8007b10 <mpool_alloc+0xb4>)
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8007a7c:	1b57      	subs	r7, r2, r5
    node_to_alloc->size = size_to_alloc;
 8007a7e:	60dd      	str	r5, [r3, #12]
    if (leftover > leaf.header_size)
 8007a80:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8007a82:	42b8      	cmp	r0, r7
 8007a84:	d332      	bcc.n	8007aec <mpool_alloc+0x90>
        node_to_alloc->size += leftover;
 8007a86:	46a4      	mov	ip, r4
 8007a88:	60da      	str	r2, [r3, #12]
    if (pool->head == node_to_alloc)
 8007a8a:	68ca      	ldr	r2, [r1, #12]
 8007a8c:	429a      	cmp	r2, r3
        pool->head = new_node;
 8007a8e:	bf08      	it	eq
 8007a90:	f8c1 c00c 	streq.w	ip, [r1, #12]
 8007a94:	e9d3 0201 	ldrd	r0, r2, [r3, #4]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8007a98:	b108      	cbz	r0, 8007a9e <mpool_alloc+0x42>
    {
        // Close the link
        node->next->prev = node->prev;
 8007a9a:	6082      	str	r2, [r0, #8]
 8007a9c:	689a      	ldr	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8007a9e:	b10a      	cbz	r2, 8007aa4 <mpool_alloc+0x48>
    {
        // Close the link
        node->prev->next = node->next;
 8007aa0:	6858      	ldr	r0, [r3, #4]
 8007aa2:	6050      	str	r0, [r2, #4]
    }
    
    node->next = NULL;
 8007aa4:	2200      	movs	r2, #0
    pool->usize += leaf.header_size + node_to_alloc->size;
 8007aa6:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 8007aa8:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 8007aac:	6848      	ldr	r0, [r1, #4]
 8007aae:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 8007ab0:	4428      	add	r0, r5
 8007ab2:	4420      	add	r0, r4
 8007ab4:	6048      	str	r0, [r1, #4]
    if (leaf.clearOnAllocation > 0)
 8007ab6:	6971      	ldr	r1, [r6, #20]
 8007ab8:	4291      	cmp	r1, r2
 8007aba:	dd0a      	ble.n	8007ad2 <mpool_alloc+0x76>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8007abc:	68d9      	ldr	r1, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 8007abe:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8007ac0:	b141      	cbz	r1, 8007ad4 <mpool_alloc+0x78>
 8007ac2:	3801      	subs	r0, #1
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	f800 4f01 	strb.w	r4, [r0, #1]!
 8007aca:	3201      	adds	r2, #1
 8007acc:	68d9      	ldr	r1, [r3, #12]
 8007ace:	4291      	cmp	r1, r2
 8007ad0:	d8f9      	bhi.n	8007ac6 <mpool_alloc+0x6a>
 8007ad2:	6818      	ldr	r0, [r3, #0]
}
 8007ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8007ad6:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8007ada:	1a9b      	subs	r3, r3, r2
 8007adc:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(LEAFMempoolFragmentation);
 8007ade:	bf8c      	ite	hi
 8007ae0:	2001      	movhi	r0, #1
            LEAF_internalErrorCallback(LEAFMempoolOverrun);
 8007ae2:	2000      	movls	r0, #0
 8007ae4:	f000 f89e 	bl	8007c24 <LEAF_internalErrorCallback>
        return NULL;
 8007ae8:	2000      	movs	r0, #0
}
 8007aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007aec:	680a      	ldr	r2, [r1, #0]
        offset += leaf.header_size + node_to_alloc->size;
 8007aee:	4405      	add	r5, r0
                               node_to_alloc->prev,
 8007af0:	f8d3 e008 	ldr.w	lr, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 8007af4:	1a3f      	subs	r7, r7, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007af6:	eba3 0c02 	sub.w	ip, r3, r2
        offset += leaf.header_size + node_to_alloc->size;
 8007afa:	4465      	add	r5, ip
        new_node = create_node(&pool->mpool[offset],
 8007afc:	eb02 0c05 	add.w	ip, r2, r5
    node->pool = block_location + leaf.header_size;
 8007b00:	4460      	add	r0, ip
 8007b02:	5150      	str	r0, [r2, r5]
    node->size = size;
 8007b04:	f8cc 700c 	str.w	r7, [ip, #12]
    node->prev = prev;
 8007b08:	e9cc 4e01 	strd	r4, lr, [ip, #4]
 8007b0c:	e7bd      	b.n	8007a8a <mpool_alloc+0x2e>
 8007b0e:	bf00      	nop
 8007b10:	20018fd4 	.word	0x20018fd4

08007b14 <mpool_calloc>:
{
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pool->head == NULL)
 8007b16:	68cb      	ldr	r3, [r1, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d035      	beq.n	8007b88 <mpool_calloc+0x74>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8007b1c:	1dc5      	adds	r5, r0, #7
 8007b1e:	f025 0507 	bic.w	r5, r5, #7
    while (node_to_alloc->size < size_to_alloc)
 8007b22:	e002      	b.n	8007b2a <mpool_calloc+0x16>
        if (node_to_alloc == NULL)
 8007b24:	4623      	mov	r3, r4
 8007b26:	2c00      	cmp	r4, #0
 8007b28:	d02e      	beq.n	8007b88 <mpool_calloc+0x74>
    while (node_to_alloc->size < size_to_alloc)
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	685c      	ldr	r4, [r3, #4]
 8007b2e:	42aa      	cmp	r2, r5
 8007b30:	d3f8      	bcc.n	8007b24 <mpool_calloc+0x10>
    if (leftover > leaf.header_size)
 8007b32:	4f23      	ldr	r7, [pc, #140]	; (8007bc0 <mpool_calloc+0xac>)
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8007b34:	1b56      	subs	r6, r2, r5
    node_to_alloc->size = size_to_alloc;
 8007b36:	60dd      	str	r5, [r3, #12]
    if (leftover > leaf.header_size)
 8007b38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b3a:	42b0      	cmp	r0, r6
 8007b3c:	d32f      	bcc.n	8007b9e <mpool_calloc+0x8a>
        node_to_alloc->size += leftover;
 8007b3e:	46a4      	mov	ip, r4
 8007b40:	60da      	str	r2, [r3, #12]
    if (pool->head == node_to_alloc)
 8007b42:	68ca      	ldr	r2, [r1, #12]
 8007b44:	429a      	cmp	r2, r3
        pool->head = new_node;
 8007b46:	bf08      	it	eq
 8007b48:	f8c1 c00c 	streq.w	ip, [r1, #12]
 8007b4c:	e9d3 0201 	ldrd	r0, r2, [r3, #4]
    if (node->next != NULL)
 8007b50:	b108      	cbz	r0, 8007b56 <mpool_calloc+0x42>
        node->next->prev = node->prev;
 8007b52:	6082      	str	r2, [r0, #8]
 8007b54:	689a      	ldr	r2, [r3, #8]
    if (node->prev != NULL)
 8007b56:	b10a      	cbz	r2, 8007b5c <mpool_calloc+0x48>
        node->prev->next = node->next;
 8007b58:	6858      	ldr	r0, [r3, #4]
 8007b5a:	6050      	str	r0, [r2, #4]
    node->next = NULL;
 8007b5c:	2200      	movs	r2, #0
    pool->usize += leaf.header_size + node_to_alloc->size;
 8007b5e:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 8007b60:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 8007b64:	6848      	ldr	r0, [r1, #4]
 8007b66:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007b68:	4428      	add	r0, r5
 8007b6a:	4420      	add	r0, r4
 8007b6c:	6048      	str	r0, [r1, #4]
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8007b6e:	68d9      	ldr	r1, [r3, #12]
    char* new_pool = (char*)node_to_alloc->pool;
 8007b70:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8007b72:	b141      	cbz	r1, 8007b86 <mpool_calloc+0x72>
 8007b74:	3801      	subs	r0, #1
 8007b76:	4614      	mov	r4, r2
 8007b78:	f800 4f01 	strb.w	r4, [r0, #1]!
 8007b7c:	3201      	adds	r2, #1
 8007b7e:	68d9      	ldr	r1, [r3, #12]
 8007b80:	4291      	cmp	r1, r2
 8007b82:	d8f9      	bhi.n	8007b78 <mpool_calloc+0x64>
 8007b84:	6818      	ldr	r0, [r3, #0]
}
 8007b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8007b88:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8007b8c:	1a9b      	subs	r3, r3, r2
 8007b8e:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(LEAFMempoolFragmentation);
 8007b90:	bf8c      	ite	hi
 8007b92:	2001      	movhi	r0, #1
            LEAF_internalErrorCallback(LEAFMempoolOverrun);
 8007b94:	2000      	movls	r0, #0
 8007b96:	f000 f845 	bl	8007c24 <LEAF_internalErrorCallback>
        return NULL;
 8007b9a:	2000      	movs	r0, #0
}
 8007b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007b9e:	680a      	ldr	r2, [r1, #0]
        offset += leaf.header_size + node_to_alloc->size;
 8007ba0:	4405      	add	r5, r0
                               node_to_alloc->prev,
 8007ba2:	f8d3 e008 	ldr.w	lr, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 8007ba6:	1a36      	subs	r6, r6, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007ba8:	eba3 0c02 	sub.w	ip, r3, r2
        offset += leaf.header_size + node_to_alloc->size;
 8007bac:	4465      	add	r5, ip
        new_node = create_node(&pool->mpool[offset],
 8007bae:	eb02 0c05 	add.w	ip, r2, r5
    node->pool = block_location + leaf.header_size;
 8007bb2:	4460      	add	r0, ip
 8007bb4:	5150      	str	r0, [r2, r5]
    node->size = size;
 8007bb6:	f8cc 600c 	str.w	r6, [ip, #12]
    node->prev = prev;
 8007bba:	e9cc 4e01 	strd	r4, lr, [ip, #4]
 8007bbe:	e7c0      	b.n	8007b42 <mpool_calloc+0x2e>
 8007bc0:	20018fd4 	.word	0x20018fd4

08007bc4 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop

08007bc8 <LEAF_init>:
{
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	460c      	mov	r4, r1
 8007bcc:	4605      	mov	r5, r0
    leaf_pool_init(memory, memorysize);
 8007bce:	4611      	mov	r1, r2
 8007bd0:	4620      	mov	r0, r4
{
 8007bd2:	461c      	mov	r4, r3
 8007bd4:	ed2d 8b02 	vpush	{d8}
 8007bd8:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(memory, memorysize);
 8007bdc:	f7ff ff26 	bl	8007a2c <leaf_pool_init>
    leaf.invSampleRate = 1.0f/sr;
 8007be0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 8007be4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8007c18 <LEAF_init+0x50>
    leaf.sampleRate = sr;
 8007be8:	4a0c      	ldr	r2, [pc, #48]	; (8007c1c <LEAF_init+0x54>)
    leaf.clearOnAllocation = 0;
 8007bea:	2100      	movs	r1, #0
    leaf.errorCallback = &LEAF_defaultErrorCallback;
 8007bec:	480c      	ldr	r0, [pc, #48]	; (8007c20 <LEAF_init+0x58>)
    leaf.invSampleRate = 1.0f/sr;
 8007bee:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf.blockSize = blocksize;
 8007bf2:	6095      	str	r5, [r2, #8]
    leaf.sampleRate = sr;
 8007bf4:	ed82 8a00 	vstr	s16, [r2]
    leaf.random = random;
 8007bf8:	6114      	str	r4, [r2, #16]
    leaf.errorCallback = &LEAF_defaultErrorCallback;
 8007bfa:	6310      	str	r0, [r2, #48]	; 0x30
    leaf.clearOnAllocation = 0;
 8007bfc:	6151      	str	r1, [r2, #20]
        leaf.errorState[i] = 0;
 8007bfe:	63d1      	str	r1, [r2, #60]	; 0x3c
 8007c00:	e9c2 110d 	strd	r1, r1, [r2, #52]	; 0x34
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 8007c04:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf.invSampleRate = 1.0f/sr;
 8007c08:	ed82 7a01 	vstr	s14, [r2, #4]
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 8007c0c:	edc2 7a03 	vstr	s15, [r2, #12]
}
 8007c10:	ecbd 8b02 	vpop	{d8}
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
 8007c16:	bf00      	nop
 8007c18:	40c90fdb 	.word	0x40c90fdb
 8007c1c:	20018fd4 	.word	0x20018fd4
 8007c20:	08007bc5 	.word	0x08007bc5

08007c24 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAFErrorType whichone)
{
    leaf.errorState[whichone] = 1;
 8007c24:	4b03      	ldr	r3, [pc, #12]	; (8007c34 <LEAF_internalErrorCallback+0x10>)
 8007c26:	2101      	movs	r1, #1
 8007c28:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    leaf.errorCallback(whichone);
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    leaf.errorState[whichone] = 1;
 8007c2e:	6351      	str	r1, [r2, #52]	; 0x34
    leaf.errorCallback(whichone);
 8007c30:	4718      	bx	r3
 8007c32:	bf00      	nop
 8007c34:	20018fd4 	.word	0x20018fd4

08007c38 <__errno>:
 8007c38:	4b01      	ldr	r3, [pc, #4]	; (8007c40 <__errno+0x8>)
 8007c3a:	6818      	ldr	r0, [r3, #0]
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	20000014 	.word	0x20000014

08007c44 <__libc_init_array>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	4e0d      	ldr	r6, [pc, #52]	; (8007c7c <__libc_init_array+0x38>)
 8007c48:	4c0d      	ldr	r4, [pc, #52]	; (8007c80 <__libc_init_array+0x3c>)
 8007c4a:	1ba4      	subs	r4, r4, r6
 8007c4c:	10a4      	asrs	r4, r4, #2
 8007c4e:	2500      	movs	r5, #0
 8007c50:	42a5      	cmp	r5, r4
 8007c52:	d109      	bne.n	8007c68 <__libc_init_array+0x24>
 8007c54:	4e0b      	ldr	r6, [pc, #44]	; (8007c84 <__libc_init_array+0x40>)
 8007c56:	4c0c      	ldr	r4, [pc, #48]	; (8007c88 <__libc_init_array+0x44>)
 8007c58:	f002 faba 	bl	800a1d0 <_init>
 8007c5c:	1ba4      	subs	r4, r4, r6
 8007c5e:	10a4      	asrs	r4, r4, #2
 8007c60:	2500      	movs	r5, #0
 8007c62:	42a5      	cmp	r5, r4
 8007c64:	d105      	bne.n	8007c72 <__libc_init_array+0x2e>
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c6c:	4798      	blx	r3
 8007c6e:	3501      	adds	r5, #1
 8007c70:	e7ee      	b.n	8007c50 <__libc_init_array+0xc>
 8007c72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c76:	4798      	blx	r3
 8007c78:	3501      	adds	r5, #1
 8007c7a:	e7f2      	b.n	8007c62 <__libc_init_array+0x1e>
 8007c7c:	0800aa18 	.word	0x0800aa18
 8007c80:	0800aa18 	.word	0x0800aa18
 8007c84:	0800aa18 	.word	0x0800aa18
 8007c88:	0800aa1c 	.word	0x0800aa1c

08007c8c <memset>:
 8007c8c:	4402      	add	r2, r0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d100      	bne.n	8007c96 <memset+0xa>
 8007c94:	4770      	bx	lr
 8007c96:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9a:	e7f9      	b.n	8007c90 <memset+0x4>

08007c9c <expf>:
 8007c9c:	ee10 2a10 	vmov	r2, s0
 8007ca0:	f240 412a 	movw	r1, #1066	; 0x42a
 8007ca4:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 8007cae:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8007cb2:	d92e      	bls.n	8007d12 <expf+0x76>
 8007cb4:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8007cb8:	d061      	beq.n	8007d7e <expf+0xe2>
 8007cba:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8007cbe:	d304      	bcc.n	8007cca <expf+0x2e>
 8007cc0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007cc4:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8007cc8:	4770      	bx	lr
 8007cca:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8007d84 <expf+0xe8>
 8007cce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd6:	dd04      	ble.n	8007ce2 <expf+0x46>
 8007cd8:	2000      	movs	r0, #0
 8007cda:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8007cde:	f001 bf39 	b.w	8009b54 <__math_oflowf>
 8007ce2:	eddf 7a29 	vldr	s15, [pc, #164]	; 8007d88 <expf+0xec>
 8007ce6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cee:	d504      	bpl.n	8007cfa <expf+0x5e>
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8007cf6:	f001 bf21 	b.w	8009b3c <__math_uflowf>
 8007cfa:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007d8c <expf+0xf0>
 8007cfe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d06:	d504      	bpl.n	8007d12 <expf+0x76>
 8007d08:	2000      	movs	r0, #0
 8007d0a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8007d0e:	f001 bf1b 	b.w	8009b48 <__math_may_uflowf>
 8007d12:	491f      	ldr	r1, [pc, #124]	; (8007d90 <expf+0xf4>)
 8007d14:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007d18:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 8007d1c:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 8007d20:	eeb0 4b47 	vmov.f64	d4, d7
 8007d24:	eea5 4b06 	vfma.f64	d4, d5, d6
 8007d28:	ec55 4b14 	vmov	r4, r5, d4
 8007d2c:	ee34 7b47 	vsub.f64	d7, d4, d7
 8007d30:	f004 021f 	and.w	r2, r4, #31
 8007d34:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8007d38:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007d3c:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 8007d40:	e9d2 4500 	ldrd	r4, r5, [r2]
 8007d44:	eea6 0b07 	vfma.f64	d0, d6, d7
 8007d48:	ee14 0a10 	vmov	r0, s8
 8007d4c:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 8007d50:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 8007d54:	f04f 0b00 	mov.w	fp, #0
 8007d58:	eb1b 0204 	adds.w	r2, fp, r4
 8007d5c:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 8007d60:	eb4c 0305 	adc.w	r3, ip, r5
 8007d64:	eea5 6b07 	vfma.f64	d6, d5, d7
 8007d68:	ee27 7b07 	vmul.f64	d7, d7, d7
 8007d6c:	eea6 0b07 	vfma.f64	d0, d6, d7
 8007d70:	ec43 2b17 	vmov	d7, r2, r3
 8007d74:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007d78:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007d7c:	e7a2      	b.n	8007cc4 <expf+0x28>
 8007d7e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8007d94 <expf+0xf8>
 8007d82:	e79f      	b.n	8007cc4 <expf+0x28>
 8007d84:	42b17217 	.word	0x42b17217
 8007d88:	c2cff1b4 	.word	0xc2cff1b4
 8007d8c:	c2ce8ecf 	.word	0xc2ce8ecf
 8007d90:	0800a260 	.word	0x0800a260
 8007d94:	00000000 	.word	0x00000000

08007d98 <fabsf>:
 8007d98:	ee10 3a10 	vmov	r3, s0
 8007d9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007da0:	ee00 3a10 	vmov	s0, r3
 8007da4:	4770      	bx	lr
	...

08007da8 <logf>:
 8007da8:	ee10 3a10 	vmov	r3, s0
 8007dac:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007db0:	b410      	push	{r4}
 8007db2:	d057      	beq.n	8007e64 <logf+0xbc>
 8007db4:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8007db8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007dbc:	d31a      	bcc.n	8007df4 <logf+0x4c>
 8007dbe:	005a      	lsls	r2, r3, #1
 8007dc0:	d104      	bne.n	8007dcc <logf+0x24>
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dc8:	f001 beca 	b.w	8009b60 <__math_divzerof>
 8007dcc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007dd0:	d045      	beq.n	8007e5e <logf+0xb6>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	db02      	blt.n	8007ddc <logf+0x34>
 8007dd6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8007dda:	d303      	bcc.n	8007de4 <logf+0x3c>
 8007ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007de0:	f001 bece 	b.w	8009b80 <__math_invalidf>
 8007de4:	eddf 7a21 	vldr	s15, [pc, #132]	; 8007e6c <logf+0xc4>
 8007de8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007dec:	ee10 3a10 	vmov	r3, s0
 8007df0:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8007df4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8007df8:	491d      	ldr	r1, [pc, #116]	; (8007e70 <logf+0xc8>)
 8007dfa:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8007dfe:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8007e02:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8007e06:	0dd4      	lsrs	r4, r2, #23
 8007e08:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8007e0c:	05e4      	lsls	r4, r4, #23
 8007e0e:	ed90 5b00 	vldr	d5, [r0]
 8007e12:	1b1b      	subs	r3, r3, r4
 8007e14:	ee07 3a90 	vmov	s15, r3
 8007e18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007e1c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8007e20:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8007e24:	ee26 3b06 	vmul.f64	d3, d6, d6
 8007e28:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8007e2c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007e30:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8007e34:	15d2      	asrs	r2, r2, #23
 8007e36:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 8007e3a:	eea5 7b03 	vfma.f64	d7, d5, d3
 8007e3e:	eeb0 5b47 	vmov.f64	d5, d7
 8007e42:	ed90 0b02 	vldr	d0, [r0, #8]
 8007e46:	ee07 2a90 	vmov	s15, r2
 8007e4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007e4e:	eea7 0b04 	vfma.f64	d0, d7, d4
 8007e52:	ee30 0b06 	vadd.f64	d0, d0, d6
 8007e56:	eea3 0b05 	vfma.f64	d0, d3, d5
 8007e5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8007e74 <logf+0xcc>
 8007e68:	e7f9      	b.n	8007e5e <logf+0xb6>
 8007e6a:	bf00      	nop
 8007e6c:	4b000000 	.word	0x4b000000
 8007e70:	0800a3a8 	.word	0x0800a3a8
 8007e74:	00000000 	.word	0x00000000

08007e78 <checkint>:
 8007e78:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007e7c:	2b7e      	cmp	r3, #126	; 0x7e
 8007e7e:	dd10      	ble.n	8007ea2 <checkint+0x2a>
 8007e80:	2b96      	cmp	r3, #150	; 0x96
 8007e82:	dc0c      	bgt.n	8007e9e <checkint+0x26>
 8007e84:	2201      	movs	r2, #1
 8007e86:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8e:	1e5a      	subs	r2, r3, #1
 8007e90:	4202      	tst	r2, r0
 8007e92:	d106      	bne.n	8007ea2 <checkint+0x2a>
 8007e94:	4203      	tst	r3, r0
 8007e96:	bf0c      	ite	eq
 8007e98:	2002      	moveq	r0, #2
 8007e9a:	2001      	movne	r0, #1
 8007e9c:	4770      	bx	lr
 8007e9e:	2002      	movs	r0, #2
 8007ea0:	4770      	bx	lr
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	4770      	bx	lr
	...

08007ea8 <powf>:
 8007ea8:	ee10 1a10 	vmov	r1, s0
 8007eac:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8007eb0:	ee10 4a90 	vmov	r4, s1
 8007eb4:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8007eb8:	0062      	lsls	r2, r4, #1
 8007eba:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007ebe:	eef0 4a60 	vmov.f32	s9, s1
 8007ec2:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8007ec6:	4b92      	ldr	r3, [pc, #584]	; (8008110 <powf+0x268>)
 8007ec8:	d255      	bcs.n	8007f76 <powf+0xce>
 8007eca:	4298      	cmp	r0, r3
 8007ecc:	d855      	bhi.n	8007f7a <powf+0xd2>
 8007ece:	2000      	movs	r0, #0
 8007ed0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8007ed4:	4a8f      	ldr	r2, [pc, #572]	; (8008114 <powf+0x26c>)
 8007ed6:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 8007eda:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8007ede:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8007ee2:	0ddb      	lsrs	r3, r3, #23
 8007ee4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8007ee8:	05db      	lsls	r3, r3, #23
 8007eea:	ed94 6b00 	vldr	d6, [r4]
 8007eee:	1ac9      	subs	r1, r1, r3
 8007ef0:	ee07 1a90 	vmov	s15, r1
 8007ef4:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8007ef8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007efc:	eea6 2b07 	vfma.f64	d2, d6, d7
 8007f00:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8007f04:	ee22 6b02 	vmul.f64	d6, d2, d2
 8007f08:	eea2 7b05 	vfma.f64	d7, d2, d5
 8007f0c:	15db      	asrs	r3, r3, #23
 8007f0e:	ed94 5b02 	vldr	d5, [r4, #8]
 8007f12:	ee00 3a10 	vmov	s0, r3
 8007f16:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8007f1a:	ee30 0b05 	vadd.f64	d0, d0, d5
 8007f1e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 8007f22:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 8007f26:	eea2 0b05 	vfma.f64	d0, d2, d5
 8007f2a:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8007f2e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8007f32:	eea6 0b05 	vfma.f64	d0, d6, d5
 8007f36:	ee26 6b06 	vmul.f64	d6, d6, d6
 8007f3a:	eea7 0b06 	vfma.f64	d0, d7, d6
 8007f3e:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8007f42:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007f46:	ee10 3a90 	vmov	r3, s1
 8007f4a:	2500      	movs	r5, #0
 8007f4c:	0bda      	lsrs	r2, r3, #15
 8007f4e:	2300      	movs	r3, #0
 8007f50:	b292      	uxth	r2, r2
 8007f52:	f248 04be 	movw	r4, #32958	; 0x80be
 8007f56:	429d      	cmp	r5, r3
 8007f58:	bf08      	it	eq
 8007f5a:	4294      	cmpeq	r4, r2
 8007f5c:	f080 8094 	bcs.w	8008088 <powf+0x1e0>
 8007f60:	ed9f 7b65 	vldr	d7, [pc, #404]	; 80080f8 <powf+0x250>
 8007f64:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f6c:	dd76      	ble.n	800805c <powf+0x1b4>
 8007f6e:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8007f72:	f001 bdef 	b.w	8009b54 <__math_oflowf>
 8007f76:	4298      	cmp	r0, r3
 8007f78:	d92d      	bls.n	8007fd6 <powf+0x12e>
 8007f7a:	b952      	cbnz	r2, 8007f92 <powf+0xea>
 8007f7c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8007f80:	005b      	lsls	r3, r3, #1
 8007f82:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8007f86:	f240 80ae 	bls.w	80080e6 <powf+0x23e>
 8007f8a:	ee30 0a24 	vadd.f32	s0, s0, s9
 8007f8e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8007f92:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8007f96:	d105      	bne.n	8007fa4 <powf+0xfc>
 8007f98:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8007f9c:	0064      	lsls	r4, r4, #1
 8007f9e:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007fa2:	e7f0      	b.n	8007f86 <powf+0xde>
 8007fa4:	004b      	lsls	r3, r1, #1
 8007fa6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8007faa:	d8ee      	bhi.n	8007f8a <powf+0xe2>
 8007fac:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8007fb0:	d1eb      	bne.n	8007f8a <powf+0xe2>
 8007fb2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007fb6:	f000 8096 	beq.w	80080e6 <powf+0x23e>
 8007fba:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007fbe:	ea6f 0404 	mvn.w	r4, r4
 8007fc2:	bf34      	ite	cc
 8007fc4:	2300      	movcc	r3, #0
 8007fc6:	2301      	movcs	r3, #1
 8007fc8:	0fe4      	lsrs	r4, r4, #31
 8007fca:	42a3      	cmp	r3, r4
 8007fcc:	f040 808e 	bne.w	80080ec <powf+0x244>
 8007fd0:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8007fd4:	e7db      	b.n	8007f8e <powf+0xe6>
 8007fd6:	004d      	lsls	r5, r1, #1
 8007fd8:	1e6a      	subs	r2, r5, #1
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d91b      	bls.n	8008016 <powf+0x16e>
 8007fde:	2900      	cmp	r1, #0
 8007fe0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007fe4:	da0e      	bge.n	8008004 <powf+0x15c>
 8007fe6:	ee10 0a90 	vmov	r0, s1
 8007fea:	f7ff ff45 	bl	8007e78 <checkint>
 8007fee:	2801      	cmp	r0, #1
 8007ff0:	d108      	bne.n	8008004 <powf+0x15c>
 8007ff2:	eeb1 0a40 	vneg.f32	s0, s0
 8007ff6:	b93d      	cbnz	r5, 8008008 <powf+0x160>
 8007ff8:	2c00      	cmp	r4, #0
 8007ffa:	dac8      	bge.n	8007f8e <powf+0xe6>
 8007ffc:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8008000:	f001 bdae 	b.w	8009b60 <__math_divzerof>
 8008004:	2000      	movs	r0, #0
 8008006:	e7f6      	b.n	8007ff6 <powf+0x14e>
 8008008:	2c00      	cmp	r4, #0
 800800a:	dac0      	bge.n	8007f8e <powf+0xe6>
 800800c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008010:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008014:	e7bb      	b.n	8007f8e <powf+0xe6>
 8008016:	2900      	cmp	r1, #0
 8008018:	da1e      	bge.n	8008058 <powf+0x1b0>
 800801a:	ee10 0a90 	vmov	r0, s1
 800801e:	f7ff ff2b 	bl	8007e78 <checkint>
 8008022:	b918      	cbnz	r0, 800802c <powf+0x184>
 8008024:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8008028:	f001 bdaa 	b.w	8009b80 <__math_invalidf>
 800802c:	2801      	cmp	r0, #1
 800802e:	bf0c      	ite	eq
 8008030:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8008034:	2000      	movne	r0, #0
 8008036:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800803a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800803e:	f4bf af47 	bcs.w	8007ed0 <powf+0x28>
 8008042:	eddf 0a35 	vldr	s1, [pc, #212]	; 8008118 <powf+0x270>
 8008046:	ee20 0a20 	vmul.f32	s0, s0, s1
 800804a:	ee10 3a10 	vmov	r3, s0
 800804e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008052:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8008056:	e73b      	b.n	8007ed0 <powf+0x28>
 8008058:	2000      	movs	r0, #0
 800805a:	e7ee      	b.n	800803a <powf+0x192>
 800805c:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8008100 <powf+0x258>
 8008060:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008068:	d803      	bhi.n	8008072 <powf+0x1ca>
 800806a:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800806e:	f001 bd65 	b.w	8009b3c <__math_uflowf>
 8008072:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8008108 <powf+0x260>
 8008076:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800807a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800807e:	d503      	bpl.n	8008088 <powf+0x1e0>
 8008080:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8008084:	f001 bd60 	b.w	8009b48 <__math_may_uflowf>
 8008088:	4924      	ldr	r1, [pc, #144]	; (800811c <powf+0x274>)
 800808a:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 800808e:	ee30 6b07 	vadd.f64	d6, d0, d7
 8008092:	ec55 4b16 	vmov	r4, r5, d6
 8008096:	ee36 7b47 	vsub.f64	d7, d6, d7
 800809a:	f004 021f 	and.w	r2, r4, #31
 800809e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80080a2:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 80080a6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80080aa:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80080ae:	e9d2 6700 	ldrd	r6, r7, [r2]
 80080b2:	eea0 7b06 	vfma.f64	d7, d0, d6
 80080b6:	1824      	adds	r4, r4, r0
 80080b8:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 80080bc:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 80080c0:	2000      	movs	r0, #0
 80080c2:	1982      	adds	r2, r0, r6
 80080c4:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 80080c8:	eb41 0307 	adc.w	r3, r1, r7
 80080cc:	eea0 6b05 	vfma.f64	d6, d0, d5
 80080d0:	ee20 0b00 	vmul.f64	d0, d0, d0
 80080d4:	eea6 7b00 	vfma.f64	d7, d6, d0
 80080d8:	ec43 2b16 	vmov	d6, r2, r3
 80080dc:	ee27 0b06 	vmul.f64	d0, d7, d6
 80080e0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80080e4:	e753      	b.n	8007f8e <powf+0xe6>
 80080e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80080ea:	e750      	b.n	8007f8e <powf+0xe6>
 80080ec:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008120 <powf+0x278>
 80080f0:	e74d      	b.n	8007f8e <powf+0xe6>
 80080f2:	bf00      	nop
 80080f4:	f3af 8000 	nop.w
 80080f8:	ffd1d571 	.word	0xffd1d571
 80080fc:	405fffff 	.word	0x405fffff
 8008100:	00000000 	.word	0x00000000
 8008104:	c062c000 	.word	0xc062c000
 8008108:	00000000 	.word	0x00000000
 800810c:	c062a000 	.word	0xc062a000
 8008110:	fefffffe 	.word	0xfefffffe
 8008114:	0800a4c8 	.word	0x0800a4c8
 8008118:	4b000000 	.word	0x4b000000
 800811c:	0800a260 	.word	0x0800a260
 8008120:	00000000 	.word	0x00000000

08008124 <tanf>:
 8008124:	ee10 3a10 	vmov	r3, s0
 8008128:	b507      	push	{r0, r1, r2, lr}
 800812a:	4a10      	ldr	r2, [pc, #64]	; (800816c <tanf+0x48>)
 800812c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008130:	4293      	cmp	r3, r2
 8008132:	dc05      	bgt.n	8008140 <tanf+0x1c>
 8008134:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8008170 <tanf+0x4c>
 8008138:	2001      	movs	r0, #1
 800813a:	f001 fc01 	bl	8009940 <__kernel_tanf>
 800813e:	e004      	b.n	800814a <tanf+0x26>
 8008140:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008144:	db04      	blt.n	8008150 <tanf+0x2c>
 8008146:	ee30 0a40 	vsub.f32	s0, s0, s0
 800814a:	b003      	add	sp, #12
 800814c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008150:	4668      	mov	r0, sp
 8008152:	f000 ffd9 	bl	8009108 <__ieee754_rem_pio2f>
 8008156:	0040      	lsls	r0, r0, #1
 8008158:	f000 0002 	and.w	r0, r0, #2
 800815c:	f1c0 0001 	rsb	r0, r0, #1
 8008160:	eddd 0a01 	vldr	s1, [sp, #4]
 8008164:	ed9d 0a00 	vldr	s0, [sp]
 8008168:	e7e7      	b.n	800813a <tanf+0x16>
 800816a:	bf00      	nop
 800816c:	3f490fda 	.word	0x3f490fda
 8008170:	00000000 	.word	0x00000000

08008174 <tanhf>:
 8008174:	b510      	push	{r4, lr}
 8008176:	ee10 4a10 	vmov	r4, s0
 800817a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800817e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008182:	ed2d 8b02 	vpush	{d8}
 8008186:	eef0 7a40 	vmov.f32	s15, s0
 800818a:	db0c      	blt.n	80081a6 <tanhf+0x32>
 800818c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008190:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8008194:	2c00      	cmp	r4, #0
 8008196:	bfac      	ite	ge
 8008198:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800819c:	ee30 0a47 	vsublt.f32	s0, s0, s14
 80081a0:	ecbd 8b02 	vpop	{d8}
 80081a4:	bd10      	pop	{r4, pc}
 80081a6:	4a1b      	ldr	r2, [pc, #108]	; (8008214 <tanhf+0xa0>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	dc30      	bgt.n	800820e <tanhf+0x9a>
 80081ac:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80081b0:	da06      	bge.n	80081c0 <tanhf+0x4c>
 80081b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80081b6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80081ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 80081be:	e7ef      	b.n	80081a0 <tanhf+0x2c>
 80081c0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80081c4:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 80081c8:	db12      	blt.n	80081f0 <tanhf+0x7c>
 80081ca:	f7ff fde5 	bl	8007d98 <fabsf>
 80081ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 80081d2:	f001 fe0b 	bl	8009dec <expm1f>
 80081d6:	ee30 0a08 	vadd.f32	s0, s0, s16
 80081da:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80081de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80081e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80081e6:	2c00      	cmp	r4, #0
 80081e8:	bfb8      	it	lt
 80081ea:	eeb1 0a40 	vneglt.f32	s0, s0
 80081ee:	e7d7      	b.n	80081a0 <tanhf+0x2c>
 80081f0:	f7ff fdd2 	bl	8007d98 <fabsf>
 80081f4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80081f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80081fc:	f001 fdf6 	bl	8009dec <expm1f>
 8008200:	ee70 7a08 	vadd.f32	s15, s0, s16
 8008204:	eeb1 7a40 	vneg.f32	s14, s0
 8008208:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800820c:	e7eb      	b.n	80081e6 <tanhf+0x72>
 800820e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008212:	e7e8      	b.n	80081e6 <tanhf+0x72>
 8008214:	41afffff 	.word	0x41afffff

08008218 <log>:
 8008218:	b500      	push	{lr}
 800821a:	ed2d 8b02 	vpush	{d8}
 800821e:	eeb0 8b40 	vmov.f64	d8, d0
 8008222:	b08b      	sub	sp, #44	; 0x2c
 8008224:	f000 fa74 	bl	8008710 <__ieee754_log>
 8008228:	4b2d      	ldr	r3, [pc, #180]	; (80082e0 <log+0xc8>)
 800822a:	f993 3000 	ldrsb.w	r3, [r3]
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	d051      	beq.n	80082d6 <log+0xbe>
 8008232:	eeb4 8b48 	vcmp.f64	d8, d8
 8008236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800823a:	d64c      	bvs.n	80082d6 <log+0xbe>
 800823c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8008240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008244:	dc47      	bgt.n	80082d6 <log+0xbe>
 8008246:	4a27      	ldr	r2, [pc, #156]	; (80082e4 <log+0xcc>)
 8008248:	9201      	str	r2, [sp, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	9208      	str	r2, [sp, #32]
 800824e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008252:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008256:	b993      	cbnz	r3, 800827e <log+0x66>
 8008258:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800825c:	4922      	ldr	r1, [pc, #136]	; (80082e8 <log+0xd0>)
 800825e:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 8008262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008266:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800826a:	d025      	beq.n	80082b8 <log+0xa0>
 800826c:	2201      	movs	r2, #1
 800826e:	2b02      	cmp	r3, #2
 8008270:	9200      	str	r2, [sp, #0]
 8008272:	d116      	bne.n	80082a2 <log+0x8a>
 8008274:	f7ff fce0 	bl	8007c38 <__errno>
 8008278:	2321      	movs	r3, #33	; 0x21
 800827a:	6003      	str	r3, [r0, #0]
 800827c:	e016      	b.n	80082ac <log+0x94>
 800827e:	491b      	ldr	r1, [pc, #108]	; (80082ec <log+0xd4>)
 8008280:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008284:	2000      	movs	r0, #0
 8008286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800828a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800828e:	d1ed      	bne.n	800826c <log+0x54>
 8008290:	2202      	movs	r2, #2
 8008292:	4293      	cmp	r3, r2
 8008294:	9200      	str	r2, [sp, #0]
 8008296:	d111      	bne.n	80082bc <log+0xa4>
 8008298:	f7ff fcce 	bl	8007c38 <__errno>
 800829c:	2322      	movs	r3, #34	; 0x22
 800829e:	6003      	str	r3, [r0, #0]
 80082a0:	e011      	b.n	80082c6 <log+0xae>
 80082a2:	4668      	mov	r0, sp
 80082a4:	f001 fc8c 	bl	8009bc0 <matherr>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d0e3      	beq.n	8008274 <log+0x5c>
 80082ac:	4810      	ldr	r0, [pc, #64]	; (80082f0 <log+0xd8>)
 80082ae:	f001 fc8b 	bl	8009bc8 <nan>
 80082b2:	ed8d 0b06 	vstr	d0, [sp, #24]
 80082b6:	e006      	b.n	80082c6 <log+0xae>
 80082b8:	2302      	movs	r3, #2
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	4668      	mov	r0, sp
 80082be:	f001 fc7f 	bl	8009bc0 <matherr>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d0e8      	beq.n	8008298 <log+0x80>
 80082c6:	9b08      	ldr	r3, [sp, #32]
 80082c8:	b11b      	cbz	r3, 80082d2 <log+0xba>
 80082ca:	f7ff fcb5 	bl	8007c38 <__errno>
 80082ce:	9b08      	ldr	r3, [sp, #32]
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	ed9d 0b06 	vldr	d0, [sp, #24]
 80082d6:	b00b      	add	sp, #44	; 0x2c
 80082d8:	ecbd 8b02 	vpop	{d8}
 80082dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80082e0:	20000078 	.word	0x20000078
 80082e4:	0800a5f0 	.word	0x0800a5f0
 80082e8:	c7efffff 	.word	0xc7efffff
 80082ec:	fff00000 	.word	0xfff00000
 80082f0:	0800a5fe 	.word	0x0800a5fe
 80082f4:	00000000 	.word	0x00000000

080082f8 <pow>:
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	ed2d 8b0a 	vpush	{d8-d12}
 80082fe:	eeb0 9b40 	vmov.f64	d9, d0
 8008302:	eeb0 8b41 	vmov.f64	d8, d1
 8008306:	4c8c      	ldr	r4, [pc, #560]	; (8008538 <pow+0x240>)
 8008308:	b08a      	sub	sp, #40	; 0x28
 800830a:	f000 fb1d 	bl	8008948 <__ieee754_pow>
 800830e:	f994 3000 	ldrsb.w	r3, [r4]
 8008312:	eeb0 ab40 	vmov.f64	d10, d0
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	4626      	mov	r6, r4
 800831a:	d04b      	beq.n	80083b4 <pow+0xbc>
 800831c:	eeb4 8b48 	vcmp.f64	d8, d8
 8008320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008324:	d646      	bvs.n	80083b4 <pow+0xbc>
 8008326:	eeb4 9b49 	vcmp.f64	d9, d9
 800832a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832e:	d719      	bvc.n	8008364 <pow+0x6c>
 8008330:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008338:	d13c      	bne.n	80083b4 <pow+0xbc>
 800833a:	2201      	movs	r2, #1
 800833c:	9200      	str	r2, [sp, #0]
 800833e:	497f      	ldr	r1, [pc, #508]	; (800853c <pow+0x244>)
 8008340:	4a7f      	ldr	r2, [pc, #508]	; (8008540 <pow+0x248>)
 8008342:	9201      	str	r2, [sp, #4]
 8008344:	2000      	movs	r0, #0
 8008346:	2200      	movs	r2, #0
 8008348:	2b02      	cmp	r3, #2
 800834a:	9208      	str	r2, [sp, #32]
 800834c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008350:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008354:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008358:	d02a      	beq.n	80083b0 <pow+0xb8>
 800835a:	4668      	mov	r0, sp
 800835c:	f001 fc30 	bl	8009bc0 <matherr>
 8008360:	bb00      	cbnz	r0, 80083a4 <pow+0xac>
 8008362:	e04e      	b.n	8008402 <pow+0x10a>
 8008364:	ed9f bb72 	vldr	d11, [pc, #456]	; 8008530 <pow+0x238>
 8008368:	eeb4 9b4b 	vcmp.f64	d9, d11
 800836c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008370:	eeb0 cb4b 	vmov.f64	d12, d11
 8008374:	d14a      	bne.n	800840c <pow+0x114>
 8008376:	eeb4 8b4b 	vcmp.f64	d8, d11
 800837a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837e:	d11f      	bne.n	80083c0 <pow+0xc8>
 8008380:	2201      	movs	r2, #1
 8008382:	9200      	str	r2, [sp, #0]
 8008384:	4a6e      	ldr	r2, [pc, #440]	; (8008540 <pow+0x248>)
 8008386:	9201      	str	r2, [sp, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	9208      	str	r2, [sp, #32]
 800838c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008390:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008394:	ed8d bb06 	vstr	d11, [sp, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0de      	beq.n	800835a <pow+0x62>
 800839c:	4b67      	ldr	r3, [pc, #412]	; (800853c <pow+0x244>)
 800839e:	2200      	movs	r2, #0
 80083a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80083a4:	9b08      	ldr	r3, [sp, #32]
 80083a6:	b11b      	cbz	r3, 80083b0 <pow+0xb8>
 80083a8:	f7ff fc46 	bl	8007c38 <__errno>
 80083ac:	9b08      	ldr	r3, [sp, #32]
 80083ae:	6003      	str	r3, [r0, #0]
 80083b0:	ed9d ab06 	vldr	d10, [sp, #24]
 80083b4:	eeb0 0b4a 	vmov.f64	d0, d10
 80083b8:	b00a      	add	sp, #40	; 0x28
 80083ba:	ecbd 8b0a 	vpop	{d8-d12}
 80083be:	bd70      	pop	{r4, r5, r6, pc}
 80083c0:	eeb0 0b48 	vmov.f64	d0, d8
 80083c4:	f001 fbf4 	bl	8009bb0 <finite>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d0f3      	beq.n	80083b4 <pow+0xbc>
 80083cc:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80083d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d4:	d5ee      	bpl.n	80083b4 <pow+0xbc>
 80083d6:	2301      	movs	r3, #1
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	4b59      	ldr	r3, [pc, #356]	; (8008540 <pow+0x248>)
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	2300      	movs	r3, #0
 80083e0:	9308      	str	r3, [sp, #32]
 80083e2:	f994 3000 	ldrsb.w	r3, [r4]
 80083e6:	ed8d 9b02 	vstr	d9, [sp, #8]
 80083ea:	ed8d 8b04 	vstr	d8, [sp, #16]
 80083ee:	b913      	cbnz	r3, 80083f6 <pow+0xfe>
 80083f0:	ed8d bb06 	vstr	d11, [sp, #24]
 80083f4:	e7b1      	b.n	800835a <pow+0x62>
 80083f6:	4953      	ldr	r1, [pc, #332]	; (8008544 <pow+0x24c>)
 80083f8:	2000      	movs	r0, #0
 80083fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d1ab      	bne.n	800835a <pow+0x62>
 8008402:	f7ff fc19 	bl	8007c38 <__errno>
 8008406:	2321      	movs	r3, #33	; 0x21
 8008408:	6003      	str	r3, [r0, #0]
 800840a:	e7cb      	b.n	80083a4 <pow+0xac>
 800840c:	f001 fbd0 	bl	8009bb0 <finite>
 8008410:	4605      	mov	r5, r0
 8008412:	2800      	cmp	r0, #0
 8008414:	d164      	bne.n	80084e0 <pow+0x1e8>
 8008416:	eeb0 0b49 	vmov.f64	d0, d9
 800841a:	f001 fbc9 	bl	8009bb0 <finite>
 800841e:	2800      	cmp	r0, #0
 8008420:	d05e      	beq.n	80084e0 <pow+0x1e8>
 8008422:	eeb0 0b48 	vmov.f64	d0, d8
 8008426:	f001 fbc3 	bl	8009bb0 <finite>
 800842a:	2800      	cmp	r0, #0
 800842c:	d058      	beq.n	80084e0 <pow+0x1e8>
 800842e:	eeb4 ab4a 	vcmp.f64	d10, d10
 8008432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008436:	f994 3000 	ldrsb.w	r3, [r4]
 800843a:	4a41      	ldr	r2, [pc, #260]	; (8008540 <pow+0x248>)
 800843c:	d70e      	bvc.n	800845c <pow+0x164>
 800843e:	2101      	movs	r1, #1
 8008440:	e9cd 1200 	strd	r1, r2, [sp]
 8008444:	9508      	str	r5, [sp, #32]
 8008446:	ed8d 9b02 	vstr	d9, [sp, #8]
 800844a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0ce      	beq.n	80083f0 <pow+0xf8>
 8008452:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8008456:	ed8d 7b06 	vstr	d7, [sp, #24]
 800845a:	e7d0      	b.n	80083fe <pow+0x106>
 800845c:	2103      	movs	r1, #3
 800845e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008462:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008466:	ee28 8b07 	vmul.f64	d8, d8, d7
 800846a:	e9cd 1200 	strd	r1, r2, [sp]
 800846e:	9508      	str	r5, [sp, #32]
 8008470:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008474:	b9fb      	cbnz	r3, 80084b6 <pow+0x1be>
 8008476:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800847a:	4b33      	ldr	r3, [pc, #204]	; (8008548 <pow+0x250>)
 800847c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008484:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008488:	d54b      	bpl.n	8008522 <pow+0x22a>
 800848a:	eeb0 0b48 	vmov.f64	d0, d8
 800848e:	f001 fba3 	bl	8009bd8 <rint>
 8008492:	eeb4 0b48 	vcmp.f64	d0, d8
 8008496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800849a:	d004      	beq.n	80084a6 <pow+0x1ae>
 800849c:	4b2b      	ldr	r3, [pc, #172]	; (800854c <pow+0x254>)
 800849e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80084a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084a6:	f996 3000 	ldrsb.w	r3, [r6]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d139      	bne.n	8008522 <pow+0x22a>
 80084ae:	f7ff fbc3 	bl	8007c38 <__errno>
 80084b2:	2322      	movs	r3, #34	; 0x22
 80084b4:	e7a8      	b.n	8008408 <pow+0x110>
 80084b6:	4b26      	ldr	r3, [pc, #152]	; (8008550 <pow+0x258>)
 80084b8:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 80084bc:	2200      	movs	r2, #0
 80084be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084c6:	d5ee      	bpl.n	80084a6 <pow+0x1ae>
 80084c8:	eeb0 0b48 	vmov.f64	d0, d8
 80084cc:	f001 fb84 	bl	8009bd8 <rint>
 80084d0:	eeb4 0b48 	vcmp.f64	d0, d8
 80084d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d8:	d0e5      	beq.n	80084a6 <pow+0x1ae>
 80084da:	2200      	movs	r2, #0
 80084dc:	4b19      	ldr	r3, [pc, #100]	; (8008544 <pow+0x24c>)
 80084de:	e7e0      	b.n	80084a2 <pow+0x1aa>
 80084e0:	eeb5 ab40 	vcmp.f64	d10, #0.0
 80084e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084e8:	f47f af64 	bne.w	80083b4 <pow+0xbc>
 80084ec:	eeb0 0b49 	vmov.f64	d0, d9
 80084f0:	f001 fb5e 	bl	8009bb0 <finite>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	f43f af5d 	beq.w	80083b4 <pow+0xbc>
 80084fa:	eeb0 0b48 	vmov.f64	d0, d8
 80084fe:	f001 fb57 	bl	8009bb0 <finite>
 8008502:	2800      	cmp	r0, #0
 8008504:	f43f af56 	beq.w	80083b4 <pow+0xbc>
 8008508:	2304      	movs	r3, #4
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	4b0c      	ldr	r3, [pc, #48]	; (8008540 <pow+0x248>)
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	2300      	movs	r3, #0
 8008512:	9308      	str	r3, [sp, #32]
 8008514:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008518:	ed8d 8b04 	vstr	d8, [sp, #16]
 800851c:	ed8d cb06 	vstr	d12, [sp, #24]
 8008520:	e7c1      	b.n	80084a6 <pow+0x1ae>
 8008522:	4668      	mov	r0, sp
 8008524:	f001 fb4c 	bl	8009bc0 <matherr>
 8008528:	2800      	cmp	r0, #0
 800852a:	f47f af3b 	bne.w	80083a4 <pow+0xac>
 800852e:	e7be      	b.n	80084ae <pow+0x1b6>
	...
 8008538:	20000078 	.word	0x20000078
 800853c:	3ff00000 	.word	0x3ff00000
 8008540:	0800a5f4 	.word	0x0800a5f4
 8008544:	fff00000 	.word	0xfff00000
 8008548:	47efffff 	.word	0x47efffff
 800854c:	c7efffff 	.word	0xc7efffff
 8008550:	7ff00000 	.word	0x7ff00000

08008554 <log10f>:
 8008554:	b500      	push	{lr}
 8008556:	ed2d 8b02 	vpush	{d8}
 800855a:	b08b      	sub	sp, #44	; 0x2c
 800855c:	eeb0 8a40 	vmov.f32	s16, s0
 8008560:	f000 fd7c 	bl	800905c <__ieee754_log10f>
 8008564:	4b2f      	ldr	r3, [pc, #188]	; (8008624 <log10f+0xd0>)
 8008566:	f993 3000 	ldrsb.w	r3, [r3]
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	d055      	beq.n	800861a <log10f+0xc6>
 800856e:	eeb4 8a48 	vcmp.f32	s16, s16
 8008572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008576:	d650      	bvs.n	800861a <log10f+0xc6>
 8008578:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800857c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008580:	d84b      	bhi.n	800861a <log10f+0xc6>
 8008582:	4a29      	ldr	r2, [pc, #164]	; (8008628 <log10f+0xd4>)
 8008584:	9201      	str	r2, [sp, #4]
 8008586:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 800858a:	2200      	movs	r2, #0
 800858c:	9208      	str	r2, [sp, #32]
 800858e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008592:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008596:	b993      	cbnz	r3, 80085be <log10f+0x6a>
 8008598:	4924      	ldr	r1, [pc, #144]	; (800862c <log10f+0xd8>)
 800859a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800859e:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 80085a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80085aa:	d025      	beq.n	80085f8 <log10f+0xa4>
 80085ac:	2201      	movs	r2, #1
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	9200      	str	r2, [sp, #0]
 80085b2:	d116      	bne.n	80085e2 <log10f+0x8e>
 80085b4:	f7ff fb40 	bl	8007c38 <__errno>
 80085b8:	2321      	movs	r3, #33	; 0x21
 80085ba:	6003      	str	r3, [r0, #0]
 80085bc:	e016      	b.n	80085ec <log10f+0x98>
 80085be:	491c      	ldr	r1, [pc, #112]	; (8008630 <log10f+0xdc>)
 80085c0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80085c4:	2000      	movs	r0, #0
 80085c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80085ce:	d1ed      	bne.n	80085ac <log10f+0x58>
 80085d0:	2202      	movs	r2, #2
 80085d2:	4293      	cmp	r3, r2
 80085d4:	9200      	str	r2, [sp, #0]
 80085d6:	d111      	bne.n	80085fc <log10f+0xa8>
 80085d8:	f7ff fb2e 	bl	8007c38 <__errno>
 80085dc:	2322      	movs	r3, #34	; 0x22
 80085de:	6003      	str	r3, [r0, #0]
 80085e0:	e011      	b.n	8008606 <log10f+0xb2>
 80085e2:	4668      	mov	r0, sp
 80085e4:	f001 faec 	bl	8009bc0 <matherr>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d0e3      	beq.n	80085b4 <log10f+0x60>
 80085ec:	4811      	ldr	r0, [pc, #68]	; (8008634 <log10f+0xe0>)
 80085ee:	f001 faeb 	bl	8009bc8 <nan>
 80085f2:	ed8d 0b06 	vstr	d0, [sp, #24]
 80085f6:	e006      	b.n	8008606 <log10f+0xb2>
 80085f8:	2302      	movs	r3, #2
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	4668      	mov	r0, sp
 80085fe:	f001 fadf 	bl	8009bc0 <matherr>
 8008602:	2800      	cmp	r0, #0
 8008604:	d0e8      	beq.n	80085d8 <log10f+0x84>
 8008606:	9b08      	ldr	r3, [sp, #32]
 8008608:	b11b      	cbz	r3, 8008612 <log10f+0xbe>
 800860a:	f7ff fb15 	bl	8007c38 <__errno>
 800860e:	9b08      	ldr	r3, [sp, #32]
 8008610:	6003      	str	r3, [r0, #0]
 8008612:	ed9d 0b06 	vldr	d0, [sp, #24]
 8008616:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800861a:	b00b      	add	sp, #44	; 0x2c
 800861c:	ecbd 8b02 	vpop	{d8}
 8008620:	f85d fb04 	ldr.w	pc, [sp], #4
 8008624:	20000078 	.word	0x20000078
 8008628:	0800a5f8 	.word	0x0800a5f8
 800862c:	c7efffff 	.word	0xc7efffff
 8008630:	fff00000 	.word	0xfff00000
 8008634:	0800a5fe 	.word	0x0800a5fe

08008638 <sinhf>:
 8008638:	b530      	push	{r4, r5, lr}
 800863a:	ed2d 8b02 	vpush	{d8}
 800863e:	4c32      	ldr	r4, [pc, #200]	; (8008708 <sinhf+0xd0>)
 8008640:	b08b      	sub	sp, #44	; 0x2c
 8008642:	eef0 8a40 	vmov.f32	s17, s0
 8008646:	f000 fe8b 	bl	8009360 <__ieee754_sinhf>
 800864a:	f994 3000 	ldrsb.w	r3, [r4]
 800864e:	3301      	adds	r3, #1
 8008650:	eeb0 8a40 	vmov.f32	s16, s0
 8008654:	d030      	beq.n	80086b8 <sinhf+0x80>
 8008656:	f001 fcf3 	bl	800a040 <finitef>
 800865a:	4605      	mov	r5, r0
 800865c:	bb60      	cbnz	r0, 80086b8 <sinhf+0x80>
 800865e:	eeb0 0a68 	vmov.f32	s0, s17
 8008662:	f001 fced 	bl	800a040 <finitef>
 8008666:	b338      	cbz	r0, 80086b8 <sinhf+0x80>
 8008668:	2303      	movs	r3, #3
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	4b27      	ldr	r3, [pc, #156]	; (800870c <sinhf+0xd4>)
 800866e:	9301      	str	r3, [sp, #4]
 8008670:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 8008674:	f994 3000 	ldrsb.w	r3, [r4]
 8008678:	9508      	str	r5, [sp, #32]
 800867a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800867e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008682:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008686:	b9eb      	cbnz	r3, 80086c4 <sinhf+0x8c>
 8008688:	ed9f 7b17 	vldr	d7, [pc, #92]	; 80086e8 <sinhf+0xb0>
 800868c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80086f0 <sinhf+0xb8>
 8008690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008694:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8008698:	ed8d 7b06 	vstr	d7, [sp, #24]
 800869c:	4668      	mov	r0, sp
 800869e:	f001 fa8f 	bl	8009bc0 <matherr>
 80086a2:	b1d8      	cbz	r0, 80086dc <sinhf+0xa4>
 80086a4:	9b08      	ldr	r3, [sp, #32]
 80086a6:	b11b      	cbz	r3, 80086b0 <sinhf+0x78>
 80086a8:	f7ff fac6 	bl	8007c38 <__errno>
 80086ac:	9b08      	ldr	r3, [sp, #32]
 80086ae:	6003      	str	r3, [r0, #0]
 80086b0:	ed9d 8b06 	vldr	d8, [sp, #24]
 80086b4:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 80086b8:	eeb0 0a48 	vmov.f32	s0, s16
 80086bc:	b00b      	add	sp, #44	; 0x2c
 80086be:	ecbd 8b02 	vpop	{d8}
 80086c2:	bd30      	pop	{r4, r5, pc}
 80086c4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80086f8 <sinhf+0xc0>
 80086c8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8008700 <sinhf+0xc8>
 80086cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d0:	fe37 7b06 	vselgt.f64	d7, d7, d6
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80086da:	d1df      	bne.n	800869c <sinhf+0x64>
 80086dc:	f7ff faac 	bl	8007c38 <__errno>
 80086e0:	2322      	movs	r3, #34	; 0x22
 80086e2:	6003      	str	r3, [r0, #0]
 80086e4:	e7de      	b.n	80086a4 <sinhf+0x6c>
 80086e6:	bf00      	nop
 80086e8:	e0000000 	.word	0xe0000000
 80086ec:	47efffff 	.word	0x47efffff
 80086f0:	e0000000 	.word	0xe0000000
 80086f4:	c7efffff 	.word	0xc7efffff
 80086f8:	00000000 	.word	0x00000000
 80086fc:	7ff00000 	.word	0x7ff00000
 8008700:	00000000 	.word	0x00000000
 8008704:	fff00000 	.word	0xfff00000
 8008708:	20000078 	.word	0x20000078
 800870c:	0800a5ff 	.word	0x0800a5ff

08008710 <__ieee754_log>:
 8008710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008712:	ed8d 0b00 	vstr	d0, [sp]
 8008716:	9a01      	ldr	r2, [sp, #4]
 8008718:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800871c:	da26      	bge.n	800876c <__ieee754_log+0x5c>
 800871e:	9900      	ldr	r1, [sp, #0]
 8008720:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008724:	430b      	orrs	r3, r1
 8008726:	d107      	bne.n	8008738 <__ieee754_log+0x28>
 8008728:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80088d8 <__ieee754_log+0x1c8>
 800872c:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 80088e0 <__ieee754_log+0x1d0>
 8008730:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8008734:	b003      	add	sp, #12
 8008736:	bd30      	pop	{r4, r5, pc}
 8008738:	2a00      	cmp	r2, #0
 800873a:	da04      	bge.n	8008746 <__ieee754_log+0x36>
 800873c:	ed9d 7b00 	vldr	d7, [sp]
 8008740:	ee37 6b47 	vsub.f64	d6, d7, d7
 8008744:	e7f2      	b.n	800872c <__ieee754_log+0x1c>
 8008746:	ed9d 6b00 	vldr	d6, [sp]
 800874a:	ed9f 7b67 	vldr	d7, [pc, #412]	; 80088e8 <__ieee754_log+0x1d8>
 800874e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008752:	ed8d 7b00 	vstr	d7, [sp]
 8008756:	9a01      	ldr	r2, [sp, #4]
 8008758:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800875c:	4b78      	ldr	r3, [pc, #480]	; (8008940 <__ieee754_log+0x230>)
 800875e:	429a      	cmp	r2, r3
 8008760:	dd06      	ble.n	8008770 <__ieee754_log+0x60>
 8008762:	ed9d 7b00 	vldr	d7, [sp]
 8008766:	ee37 0b07 	vadd.f64	d0, d7, d7
 800876a:	e7e3      	b.n	8008734 <__ieee754_log+0x24>
 800876c:	2100      	movs	r1, #0
 800876e:	e7f5      	b.n	800875c <__ieee754_log+0x4c>
 8008770:	1513      	asrs	r3, r2, #20
 8008772:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8008776:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800877a:	4419      	add	r1, r3
 800877c:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 8008780:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008784:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 8008788:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 800878c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008790:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008794:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 8008798:	ea45 0300 	orr.w	r3, r5, r0
 800879c:	ec43 2b10 	vmov	d0, r2, r3
 80087a0:	1c82      	adds	r2, r0, #2
 80087a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80087a6:	2a02      	cmp	r2, #2
 80087a8:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 80087ac:	ee30 0b47 	vsub.f64	d0, d0, d7
 80087b0:	dc31      	bgt.n	8008816 <__ieee754_log+0x106>
 80087b2:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80087b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ba:	d10f      	bne.n	80087dc <__ieee754_log+0xcc>
 80087bc:	2c00      	cmp	r4, #0
 80087be:	f000 8086 	beq.w	80088ce <__ieee754_log+0x1be>
 80087c2:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80088f0 <__ieee754_log+0x1e0>
 80087c6:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 80088f8 <__ieee754_log+0x1e8>
 80087ca:	ee07 4a90 	vmov	s15, r4
 80087ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087d2:	ee27 0b00 	vmul.f64	d0, d7, d0
 80087d6:	eea7 0b06 	vfma.f64	d0, d7, d6
 80087da:	e7ab      	b.n	8008734 <__ieee754_log+0x24>
 80087dc:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8008900 <__ieee754_log+0x1f0>
 80087e0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80087e4:	eea0 6b47 	vfms.f64	d6, d0, d7
 80087e8:	ee20 7b00 	vmul.f64	d7, d0, d0
 80087ec:	ee26 6b07 	vmul.f64	d6, d6, d7
 80087f0:	b914      	cbnz	r4, 80087f8 <__ieee754_log+0xe8>
 80087f2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80087f6:	e79d      	b.n	8008734 <__ieee754_log+0x24>
 80087f8:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 80088f0 <__ieee754_log+0x1e0>
 80087fc:	ee07 4a90 	vmov	s15, r4
 8008800:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008804:	eea7 6b45 	vfms.f64	d6, d7, d5
 8008808:	ee36 0b40 	vsub.f64	d0, d6, d0
 800880c:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80088f8 <__ieee754_log+0x1e8>
 8008810:	ee97 0b06 	vfnms.f64	d0, d7, d6
 8008814:	e78e      	b.n	8008734 <__ieee754_log+0x24>
 8008816:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800881a:	ee30 7b07 	vadd.f64	d7, d0, d7
 800881e:	ee80 4b07 	vdiv.f64	d4, d0, d7
 8008822:	ee07 4a90 	vmov	s15, r4
 8008826:	ee24 2b04 	vmul.f64	d2, d4, d4
 800882a:	ed9f 3b37 	vldr	d3, [pc, #220]	; 8008908 <__ieee754_log+0x1f8>
 800882e:	ee22 5b02 	vmul.f64	d5, d2, d2
 8008832:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8008836:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8008910 <__ieee754_log+0x200>
 800883a:	eea5 7b03 	vfma.f64	d7, d5, d3
 800883e:	ed9f 3b36 	vldr	d3, [pc, #216]	; 8008918 <__ieee754_log+0x208>
 8008842:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8008920 <__ieee754_log+0x210>
 8008846:	eea7 3b05 	vfma.f64	d3, d7, d5
 800884a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8008928 <__ieee754_log+0x218>
 800884e:	eea5 7b01 	vfma.f64	d7, d5, d1
 8008852:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8008930 <__ieee754_log+0x220>
 8008856:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 800885a:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 800885e:	eea7 1b05 	vfma.f64	d1, d7, d5
 8008862:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 8008866:	ed9f 7b34 	vldr	d7, [pc, #208]	; 8008938 <__ieee754_log+0x228>
 800886a:	3251      	adds	r2, #81	; 0x51
 800886c:	430a      	orrs	r2, r1
 800886e:	2a00      	cmp	r2, #0
 8008870:	eea1 7b05 	vfma.f64	d7, d1, d5
 8008874:	ee27 7b02 	vmul.f64	d7, d7, d2
 8008878:	eea3 7b05 	vfma.f64	d7, d3, d5
 800887c:	dd1c      	ble.n	80088b8 <__ieee754_log+0x1a8>
 800887e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008882:	ee20 5b05 	vmul.f64	d5, d0, d5
 8008886:	ee25 5b00 	vmul.f64	d5, d5, d0
 800888a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800888e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008892:	b924      	cbnz	r4, 800889e <__ieee754_log+0x18e>
 8008894:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008898:	ee30 0b47 	vsub.f64	d0, d0, d7
 800889c:	e74a      	b.n	8008734 <__ieee754_log+0x24>
 800889e:	ed9f 4b14 	vldr	d4, [pc, #80]	; 80088f0 <__ieee754_log+0x1e0>
 80088a2:	eea6 7b04 	vfma.f64	d7, d6, d4
 80088a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80088aa:	ee37 0b40 	vsub.f64	d0, d7, d0
 80088ae:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80088f8 <__ieee754_log+0x1e8>
 80088b2:	ee96 0b07 	vfnms.f64	d0, d6, d7
 80088b6:	e73d      	b.n	8008734 <__ieee754_log+0x24>
 80088b8:	ee30 7b47 	vsub.f64	d7, d0, d7
 80088bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80088c0:	2c00      	cmp	r4, #0
 80088c2:	d0e9      	beq.n	8008898 <__ieee754_log+0x188>
 80088c4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80088f0 <__ieee754_log+0x1e0>
 80088c8:	eea6 7b45 	vfms.f64	d7, d6, d5
 80088cc:	e7ed      	b.n	80088aa <__ieee754_log+0x19a>
 80088ce:	ed9f 0b04 	vldr	d0, [pc, #16]	; 80088e0 <__ieee754_log+0x1d0>
 80088d2:	e72f      	b.n	8008734 <__ieee754_log+0x24>
 80088d4:	f3af 8000 	nop.w
 80088d8:	00000000 	.word	0x00000000
 80088dc:	c3500000 	.word	0xc3500000
	...
 80088ec:	43500000 	.word	0x43500000
 80088f0:	35793c76 	.word	0x35793c76
 80088f4:	3dea39ef 	.word	0x3dea39ef
 80088f8:	fee00000 	.word	0xfee00000
 80088fc:	3fe62e42 	.word	0x3fe62e42
 8008900:	55555555 	.word	0x55555555
 8008904:	3fd55555 	.word	0x3fd55555
 8008908:	d078c69f 	.word	0xd078c69f
 800890c:	3fc39a09 	.word	0x3fc39a09
 8008910:	1d8e78af 	.word	0x1d8e78af
 8008914:	3fcc71c5 	.word	0x3fcc71c5
 8008918:	9997fa04 	.word	0x9997fa04
 800891c:	3fd99999 	.word	0x3fd99999
 8008920:	df3e5244 	.word	0xdf3e5244
 8008924:	3fc2f112 	.word	0x3fc2f112
 8008928:	96cb03de 	.word	0x96cb03de
 800892c:	3fc74664 	.word	0x3fc74664
 8008930:	94229359 	.word	0x94229359
 8008934:	3fd24924 	.word	0x3fd24924
 8008938:	55555593 	.word	0x55555593
 800893c:	3fe55555 	.word	0x3fe55555
 8008940:	7fefffff 	.word	0x7fefffff
 8008944:	00000000 	.word	0x00000000

08008948 <__ieee754_pow>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	ec57 6b11 	vmov	r6, r7, d1
 8008950:	ed2d 8b02 	vpush	{d8}
 8008954:	eeb0 8b40 	vmov.f64	d8, d0
 8008958:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800895c:	ea58 0306 	orrs.w	r3, r8, r6
 8008960:	b085      	sub	sp, #20
 8008962:	46b9      	mov	r9, r7
 8008964:	ee11 2a10 	vmov	r2, s2
 8008968:	f000 8306 	beq.w	8008f78 <__ieee754_pow+0x630>
 800896c:	ee18 aa90 	vmov	sl, s17
 8008970:	4bb9      	ldr	r3, [pc, #740]	; (8008c58 <__ieee754_pow+0x310>)
 8008972:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 8008976:	429c      	cmp	r4, r3
 8008978:	ee10 ba10 	vmov	fp, s0
 800897c:	dc0b      	bgt.n	8008996 <__ieee754_pow+0x4e>
 800897e:	d105      	bne.n	800898c <__ieee754_pow+0x44>
 8008980:	f1bb 0f00 	cmp.w	fp, #0
 8008984:	d107      	bne.n	8008996 <__ieee754_pow+0x4e>
 8008986:	45a0      	cmp	r8, r4
 8008988:	dc0d      	bgt.n	80089a6 <__ieee754_pow+0x5e>
 800898a:	e001      	b.n	8008990 <__ieee754_pow+0x48>
 800898c:	4598      	cmp	r8, r3
 800898e:	dc02      	bgt.n	8008996 <__ieee754_pow+0x4e>
 8008990:	4598      	cmp	r8, r3
 8008992:	d110      	bne.n	80089b6 <__ieee754_pow+0x6e>
 8008994:	b17a      	cbz	r2, 80089b6 <__ieee754_pow+0x6e>
 8008996:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800899a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800899e:	ea54 030b 	orrs.w	r3, r4, fp
 80089a2:	f000 82e9 	beq.w	8008f78 <__ieee754_pow+0x630>
 80089a6:	48ad      	ldr	r0, [pc, #692]	; (8008c5c <__ieee754_pow+0x314>)
 80089a8:	b005      	add	sp, #20
 80089aa:	ecbd 8b02 	vpop	{d8}
 80089ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b2:	f001 b909 	b.w	8009bc8 <nan>
 80089b6:	f1ba 0f00 	cmp.w	sl, #0
 80089ba:	da4e      	bge.n	8008a5a <__ieee754_pow+0x112>
 80089bc:	4ba8      	ldr	r3, [pc, #672]	; (8008c60 <__ieee754_pow+0x318>)
 80089be:	4598      	cmp	r8, r3
 80089c0:	dc49      	bgt.n	8008a56 <__ieee754_pow+0x10e>
 80089c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80089c6:	4598      	cmp	r8, r3
 80089c8:	dd47      	ble.n	8008a5a <__ieee754_pow+0x112>
 80089ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80089ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80089d2:	2b14      	cmp	r3, #20
 80089d4:	dd24      	ble.n	8008a20 <__ieee754_pow+0xd8>
 80089d6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80089da:	fa22 f503 	lsr.w	r5, r2, r3
 80089de:	fa05 f303 	lsl.w	r3, r5, r3
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d139      	bne.n	8008a5a <__ieee754_pow+0x112>
 80089e6:	f005 0501 	and.w	r5, r5, #1
 80089ea:	f1c5 0502 	rsb	r5, r5, #2
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	d15a      	bne.n	8008aa8 <__ieee754_pow+0x160>
 80089f2:	4b99      	ldr	r3, [pc, #612]	; (8008c58 <__ieee754_pow+0x310>)
 80089f4:	4598      	cmp	r8, r3
 80089f6:	d122      	bne.n	8008a3e <__ieee754_pow+0xf6>
 80089f8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80089fc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008a00:	ea53 030b 	orrs.w	r3, r3, fp
 8008a04:	f000 82b8 	beq.w	8008f78 <__ieee754_pow+0x630>
 8008a08:	4b96      	ldr	r3, [pc, #600]	; (8008c64 <__ieee754_pow+0x31c>)
 8008a0a:	429c      	cmp	r4, r3
 8008a0c:	dd27      	ble.n	8008a5e <__ieee754_pow+0x116>
 8008a0e:	f1b9 0f00 	cmp.w	r9, #0
 8008a12:	f280 82b4 	bge.w	8008f7e <__ieee754_pow+0x636>
 8008a16:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8008c28 <__ieee754_pow+0x2e0>
 8008a1a:	ed8d 7b00 	vstr	d7, [sp]
 8008a1e:	e026      	b.n	8008a6e <__ieee754_pow+0x126>
 8008a20:	2a00      	cmp	r2, #0
 8008a22:	d140      	bne.n	8008aa6 <__ieee754_pow+0x15e>
 8008a24:	f1c3 0314 	rsb	r3, r3, #20
 8008a28:	fa48 f503 	asr.w	r5, r8, r3
 8008a2c:	fa05 f303 	lsl.w	r3, r5, r3
 8008a30:	4543      	cmp	r3, r8
 8008a32:	f040 82aa 	bne.w	8008f8a <__ieee754_pow+0x642>
 8008a36:	f005 0501 	and.w	r5, r5, #1
 8008a3a:	f1c5 0502 	rsb	r5, r5, #2
 8008a3e:	4b8a      	ldr	r3, [pc, #552]	; (8008c68 <__ieee754_pow+0x320>)
 8008a40:	4598      	cmp	r8, r3
 8008a42:	d11b      	bne.n	8008a7c <__ieee754_pow+0x134>
 8008a44:	f1b9 0f00 	cmp.w	r9, #0
 8008a48:	f280 829c 	bge.w	8008f84 <__ieee754_pow+0x63c>
 8008a4c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008a50:	ee87 7b08 	vdiv.f64	d7, d7, d8
 8008a54:	e7e1      	b.n	8008a1a <__ieee754_pow+0xd2>
 8008a56:	2502      	movs	r5, #2
 8008a58:	e7c9      	b.n	80089ee <__ieee754_pow+0xa6>
 8008a5a:	2500      	movs	r5, #0
 8008a5c:	e7c7      	b.n	80089ee <__ieee754_pow+0xa6>
 8008a5e:	f1b9 0f00 	cmp.w	r9, #0
 8008a62:	dad8      	bge.n	8008a16 <__ieee754_pow+0xce>
 8008a64:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8008a68:	4633      	mov	r3, r6
 8008a6a:	e9cd 3400 	strd	r3, r4, [sp]
 8008a6e:	ed9d 0b00 	vldr	d0, [sp]
 8008a72:	b005      	add	sp, #20
 8008a74:	ecbd 8b02 	vpop	{d8}
 8008a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008a80:	d102      	bne.n	8008a88 <__ieee754_pow+0x140>
 8008a82:	ee28 7b08 	vmul.f64	d7, d8, d8
 8008a86:	e7c8      	b.n	8008a1a <__ieee754_pow+0xd2>
 8008a88:	4b78      	ldr	r3, [pc, #480]	; (8008c6c <__ieee754_pow+0x324>)
 8008a8a:	4599      	cmp	r9, r3
 8008a8c:	d10c      	bne.n	8008aa8 <__ieee754_pow+0x160>
 8008a8e:	f1ba 0f00 	cmp.w	sl, #0
 8008a92:	db09      	blt.n	8008aa8 <__ieee754_pow+0x160>
 8008a94:	eeb0 0b48 	vmov.f64	d0, d8
 8008a98:	b005      	add	sp, #20
 8008a9a:	ecbd 8b02 	vpop	{d8}
 8008a9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa2:	f000 bad7 	b.w	8009054 <__ieee754_sqrt>
 8008aa6:	2500      	movs	r5, #0
 8008aa8:	eeb0 0b48 	vmov.f64	d0, d8
 8008aac:	f001 f877 	bl	8009b9e <fabs>
 8008ab0:	ed8d 0b00 	vstr	d0, [sp]
 8008ab4:	f1bb 0f00 	cmp.w	fp, #0
 8008ab8:	d128      	bne.n	8008b0c <__ieee754_pow+0x1c4>
 8008aba:	b124      	cbz	r4, 8008ac6 <__ieee754_pow+0x17e>
 8008abc:	4b6a      	ldr	r3, [pc, #424]	; (8008c68 <__ieee754_pow+0x320>)
 8008abe:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d122      	bne.n	8008b0c <__ieee754_pow+0x1c4>
 8008ac6:	f1b9 0f00 	cmp.w	r9, #0
 8008aca:	da07      	bge.n	8008adc <__ieee754_pow+0x194>
 8008acc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008ad0:	ed9d 6b00 	vldr	d6, [sp]
 8008ad4:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8008ad8:	ed8d 7b00 	vstr	d7, [sp]
 8008adc:	f1ba 0f00 	cmp.w	sl, #0
 8008ae0:	dac5      	bge.n	8008a6e <__ieee754_pow+0x126>
 8008ae2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008ae6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008aea:	ea54 0305 	orrs.w	r3, r4, r5
 8008aee:	d106      	bne.n	8008afe <__ieee754_pow+0x1b6>
 8008af0:	ed9d 7b00 	vldr	d7, [sp]
 8008af4:	ee37 7b47 	vsub.f64	d7, d7, d7
 8008af8:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8008afc:	e78d      	b.n	8008a1a <__ieee754_pow+0xd2>
 8008afe:	2d01      	cmp	r5, #1
 8008b00:	d1b5      	bne.n	8008a6e <__ieee754_pow+0x126>
 8008b02:	ed9d 7b00 	vldr	d7, [sp]
 8008b06:	eeb1 7b47 	vneg.f64	d7, d7
 8008b0a:	e786      	b.n	8008a1a <__ieee754_pow+0xd2>
 8008b0c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8008b10:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b14:	ea55 030a 	orrs.w	r3, r5, sl
 8008b18:	d104      	bne.n	8008b24 <__ieee754_pow+0x1dc>
 8008b1a:	ee38 8b48 	vsub.f64	d8, d8, d8
 8008b1e:	ee88 7b08 	vdiv.f64	d7, d8, d8
 8008b22:	e77a      	b.n	8008a1a <__ieee754_pow+0xd2>
 8008b24:	4b52      	ldr	r3, [pc, #328]	; (8008c70 <__ieee754_pow+0x328>)
 8008b26:	4598      	cmp	r8, r3
 8008b28:	f340 80a8 	ble.w	8008c7c <__ieee754_pow+0x334>
 8008b2c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008b30:	4598      	cmp	r8, r3
 8008b32:	dd0b      	ble.n	8008b4c <__ieee754_pow+0x204>
 8008b34:	4b4b      	ldr	r3, [pc, #300]	; (8008c64 <__ieee754_pow+0x31c>)
 8008b36:	429c      	cmp	r4, r3
 8008b38:	dc0e      	bgt.n	8008b58 <__ieee754_pow+0x210>
 8008b3a:	f1b9 0f00 	cmp.w	r9, #0
 8008b3e:	f6bf af6a 	bge.w	8008a16 <__ieee754_pow+0xce>
 8008b42:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8008c30 <__ieee754_pow+0x2e8>
 8008b46:	ee27 7b07 	vmul.f64	d7, d7, d7
 8008b4a:	e766      	b.n	8008a1a <__ieee754_pow+0xd2>
 8008b4c:	4b49      	ldr	r3, [pc, #292]	; (8008c74 <__ieee754_pow+0x32c>)
 8008b4e:	429c      	cmp	r4, r3
 8008b50:	ddf3      	ble.n	8008b3a <__ieee754_pow+0x1f2>
 8008b52:	4b45      	ldr	r3, [pc, #276]	; (8008c68 <__ieee754_pow+0x320>)
 8008b54:	429c      	cmp	r4, r3
 8008b56:	dd03      	ble.n	8008b60 <__ieee754_pow+0x218>
 8008b58:	f1b9 0f00 	cmp.w	r9, #0
 8008b5c:	dcf1      	bgt.n	8008b42 <__ieee754_pow+0x1fa>
 8008b5e:	e75a      	b.n	8008a16 <__ieee754_pow+0xce>
 8008b60:	ed9d 7b00 	vldr	d7, [sp]
 8008b64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008b68:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8008c38 <__ieee754_pow+0x2f0>
 8008b6c:	ee37 6b46 	vsub.f64	d6, d7, d6
 8008b70:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 8008b74:	eeb1 3b46 	vneg.f64	d3, d6
 8008b78:	eea3 5b07 	vfma.f64	d5, d3, d7
 8008b7c:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008b80:	eea5 7b46 	vfms.f64	d7, d5, d6
 8008b84:	ee26 5b06 	vmul.f64	d5, d6, d6
 8008b88:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008b8c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8008c40 <__ieee754_pow+0x2f8>
 8008b90:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8008b94:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8008c48 <__ieee754_pow+0x300>
 8008b98:	eea6 7b05 	vfma.f64	d7, d6, d5
 8008b9c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8008c50 <__ieee754_pow+0x308>
 8008ba0:	eeb0 4b47 	vmov.f64	d4, d7
 8008ba4:	eea6 4b05 	vfma.f64	d4, d6, d5
 8008ba8:	ec53 2b14 	vmov	r2, r3, d4
 8008bac:	2200      	movs	r2, #0
 8008bae:	ec43 2b14 	vmov	d4, r2, r3
 8008bb2:	eeb0 6b44 	vmov.f64	d6, d4
 8008bb6:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008bba:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008bbe:	3d01      	subs	r5, #1
 8008bc0:	ea55 030a 	orrs.w	r3, r5, sl
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	463b      	mov	r3, r7
 8008bca:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8008bce:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8008bd2:	ec47 6b15 	vmov	d5, r6, r7
 8008bd6:	fe06 8b08 	vseleq.f64	d8, d6, d8
 8008bda:	ec47 6b13 	vmov	d3, r6, r7
 8008bde:	ec43 2b16 	vmov	d6, r2, r3
 8008be2:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008be6:	ee35 5b46 	vsub.f64	d5, d5, d6
 8008bea:	4b23      	ldr	r3, [pc, #140]	; (8008c78 <__ieee754_pow+0x330>)
 8008bec:	eea5 7b04 	vfma.f64	d7, d5, d4
 8008bf0:	ee24 6b06 	vmul.f64	d6, d4, d6
 8008bf4:	ee37 5b06 	vadd.f64	d5, d7, d6
 8008bf8:	ee15 1a90 	vmov	r1, s11
 8008bfc:	4299      	cmp	r1, r3
 8008bfe:	ee15 2a10 	vmov	r2, s10
 8008c02:	f340 819b 	ble.w	8008f3c <__ieee754_pow+0x5f4>
 8008c06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008c0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	f000 810a 	beq.w	8008e28 <__ieee754_pow+0x4e0>
 8008c14:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8008c30 <__ieee754_pow+0x2e8>
 8008c18:	ee28 8b07 	vmul.f64	d8, d8, d7
 8008c1c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008c20:	e6fb      	b.n	8008a1a <__ieee754_pow+0xd2>
 8008c22:	bf00      	nop
 8008c24:	f3af 8000 	nop.w
	...
 8008c30:	8800759c 	.word	0x8800759c
 8008c34:	7e37e43c 	.word	0x7e37e43c
 8008c38:	55555555 	.word	0x55555555
 8008c3c:	3fd55555 	.word	0x3fd55555
 8008c40:	652b82fe 	.word	0x652b82fe
 8008c44:	3ff71547 	.word	0x3ff71547
 8008c48:	f85ddf44 	.word	0xf85ddf44
 8008c4c:	3e54ae0b 	.word	0x3e54ae0b
 8008c50:	60000000 	.word	0x60000000
 8008c54:	3ff71547 	.word	0x3ff71547
 8008c58:	7ff00000 	.word	0x7ff00000
 8008c5c:	0800a5fe 	.word	0x0800a5fe
 8008c60:	433fffff 	.word	0x433fffff
 8008c64:	3fefffff 	.word	0x3fefffff
 8008c68:	3ff00000 	.word	0x3ff00000
 8008c6c:	3fe00000 	.word	0x3fe00000
 8008c70:	41e00000 	.word	0x41e00000
 8008c74:	3feffffe 	.word	0x3feffffe
 8008c78:	408fffff 	.word	0x408fffff
 8008c7c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008c80:	f280 80ce 	bge.w	8008e20 <__ieee754_pow+0x4d8>
 8008c84:	ed9d 6b00 	vldr	d6, [sp]
 8008c88:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8008f90 <__ieee754_pow+0x648>
 8008c8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008c90:	ed8d 7b00 	vstr	d7, [sp]
 8008c94:	9c01      	ldr	r4, [sp, #4]
 8008c96:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8008c9a:	1521      	asrs	r1, r4, #20
 8008c9c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008ca0:	4419      	add	r1, r3
 8008ca2:	4be3      	ldr	r3, [pc, #908]	; (8009030 <__ieee754_pow+0x6e8>)
 8008ca4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008ca8:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8008cac:	429c      	cmp	r4, r3
 8008cae:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 8008cb2:	dd06      	ble.n	8008cc2 <__ieee754_pow+0x37a>
 8008cb4:	4bdf      	ldr	r3, [pc, #892]	; (8009034 <__ieee754_pow+0x6ec>)
 8008cb6:	429c      	cmp	r4, r3
 8008cb8:	f340 80b4 	ble.w	8008e24 <__ieee754_pow+0x4dc>
 8008cbc:	3101      	adds	r1, #1
 8008cbe:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008cc2:	2400      	movs	r4, #0
 8008cc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cc8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8008ccc:	4603      	mov	r3, r0
 8008cce:	ec43 2b17 	vmov	d7, r2, r3
 8008cd2:	4bd9      	ldr	r3, [pc, #868]	; (8009038 <__ieee754_pow+0x6f0>)
 8008cd4:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8008cd8:	4463      	add	r3, ip
 8008cda:	ed93 5b00 	vldr	d5, [r3]
 8008cde:	1040      	asrs	r0, r0, #1
 8008ce0:	ee37 2b45 	vsub.f64	d2, d7, d5
 8008ce4:	ee35 6b07 	vadd.f64	d6, d5, d7
 8008ce8:	ee84 1b06 	vdiv.f64	d1, d4, d6
 8008cec:	ee22 6b01 	vmul.f64	d6, d2, d1
 8008cf0:	ed8d 6b00 	vstr	d6, [sp]
 8008cf4:	e9dd 8900 	ldrd	r8, r9, [sp]
 8008cf8:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8008cfc:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8008d00:	f04f 0800 	mov.w	r8, #0
 8008d04:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8008d08:	2200      	movs	r2, #0
 8008d0a:	ec49 8b14 	vmov	d4, r8, r9
 8008d0e:	ec43 2b16 	vmov	d6, r2, r3
 8008d12:	eeb1 3b44 	vneg.f64	d3, d4
 8008d16:	eea3 2b06 	vfma.f64	d2, d3, d6
 8008d1a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008d1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d22:	eea3 2b07 	vfma.f64	d2, d3, d7
 8008d26:	ed9d 7b00 	vldr	d7, [sp]
 8008d2a:	ee22 2b01 	vmul.f64	d2, d2, d1
 8008d2e:	ee27 5b07 	vmul.f64	d5, d7, d7
 8008d32:	ee37 6b04 	vadd.f64	d6, d7, d4
 8008d36:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8008f98 <__ieee754_pow+0x650>
 8008d3a:	ee25 0b05 	vmul.f64	d0, d5, d5
 8008d3e:	ee26 6b02 	vmul.f64	d6, d6, d2
 8008d42:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8008fa0 <__ieee754_pow+0x658>
 8008d46:	eea5 7b01 	vfma.f64	d7, d5, d1
 8008d4a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8008fa8 <__ieee754_pow+0x660>
 8008d4e:	eea7 1b05 	vfma.f64	d1, d7, d5
 8008d52:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8008fb0 <__ieee754_pow+0x668>
 8008d56:	eea1 7b05 	vfma.f64	d7, d1, d5
 8008d5a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8008fb8 <__ieee754_pow+0x670>
 8008d5e:	eea7 1b05 	vfma.f64	d1, d7, d5
 8008d62:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8008fc0 <__ieee754_pow+0x678>
 8008d66:	eea1 7b05 	vfma.f64	d7, d1, d5
 8008d6a:	eea0 6b07 	vfma.f64	d6, d0, d7
 8008d6e:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 8008d72:	eeb0 5b47 	vmov.f64	d5, d7
 8008d76:	eea4 5b04 	vfma.f64	d5, d4, d4
 8008d7a:	ee35 5b06 	vadd.f64	d5, d5, d6
 8008d7e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008d82:	f8cd 8008 	str.w	r8, [sp, #8]
 8008d86:	ed9d 5b02 	vldr	d5, [sp, #8]
 8008d8a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008d8e:	eea3 7b04 	vfma.f64	d7, d3, d4
 8008d92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008d96:	ed9d 6b00 	vldr	d6, [sp]
 8008d9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d9e:	eea2 7b05 	vfma.f64	d7, d2, d5
 8008da2:	eeb0 6b47 	vmov.f64	d6, d7
 8008da6:	eea4 6b05 	vfma.f64	d6, d4, d5
 8008daa:	ed8d 6b00 	vstr	d6, [sp]
 8008dae:	f8cd 8000 	str.w	r8, [sp]
 8008db2:	ed9d 2b00 	vldr	d2, [sp]
 8008db6:	eeb0 6b42 	vmov.f64	d6, d2
 8008dba:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008dbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008dc2:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8008fc8 <__ieee754_pow+0x680>
 8008dc6:	4b9d      	ldr	r3, [pc, #628]	; (800903c <__ieee754_pow+0x6f4>)
 8008dc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008dcc:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8008fd0 <__ieee754_pow+0x688>
 8008dd0:	4463      	add	r3, ip
 8008dd2:	eea2 7b06 	vfma.f64	d7, d2, d6
 8008dd6:	ed93 6b00 	vldr	d6, [r3]
 8008dda:	4b99      	ldr	r3, [pc, #612]	; (8009040 <__ieee754_pow+0x6f8>)
 8008ddc:	ee37 6b06 	vadd.f64	d6, d7, d6
 8008de0:	449c      	add	ip, r3
 8008de2:	ed9c 1b00 	vldr	d1, [ip]
 8008de6:	eeb0 4b46 	vmov.f64	d4, d6
 8008dea:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8008fd8 <__ieee754_pow+0x690>
 8008dee:	ee07 1a90 	vmov	s15, r1
 8008df2:	eea2 4b03 	vfma.f64	d4, d2, d3
 8008df6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008dfa:	ee34 4b01 	vadd.f64	d4, d4, d1
 8008dfe:	ee34 5b07 	vadd.f64	d5, d4, d7
 8008e02:	ed8d 5b00 	vstr	d5, [sp]
 8008e06:	f8cd 8000 	str.w	r8, [sp]
 8008e0a:	ed9d 4b00 	vldr	d4, [sp]
 8008e0e:	ee34 7b47 	vsub.f64	d7, d4, d7
 8008e12:	ee37 7b41 	vsub.f64	d7, d7, d1
 8008e16:	eea2 7b43 	vfms.f64	d7, d2, d3
 8008e1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008e1e:	e6ce      	b.n	8008bbe <__ieee754_pow+0x276>
 8008e20:	2300      	movs	r3, #0
 8008e22:	e73a      	b.n	8008c9a <__ieee754_pow+0x352>
 8008e24:	2401      	movs	r4, #1
 8008e26:	e74d      	b.n	8008cc4 <__ieee754_pow+0x37c>
 8008e28:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8008fe0 <__ieee754_pow+0x698>
 8008e2c:	ee35 5b46 	vsub.f64	d5, d5, d6
 8008e30:	ee37 4b04 	vadd.f64	d4, d7, d4
 8008e34:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8008e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3c:	f73f aeea 	bgt.w	8008c14 <__ieee754_pow+0x2cc>
 8008e40:	4a80      	ldr	r2, [pc, #512]	; (8009044 <__ieee754_pow+0x6fc>)
 8008e42:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e46:	4293      	cmp	r3, r2
 8008e48:	f340 808e 	ble.w	8008f68 <__ieee754_pow+0x620>
 8008e4c:	151b      	asrs	r3, r3, #20
 8008e4e:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 8008e52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e56:	4103      	asrs	r3, r0
 8008e58:	440b      	add	r3, r1
 8008e5a:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008e5e:	487a      	ldr	r0, [pc, #488]	; (8009048 <__ieee754_pow+0x700>)
 8008e60:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008e64:	4110      	asrs	r0, r2
 8008e66:	ea23 0500 	bic.w	r5, r3, r0
 8008e6a:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8008e6e:	2400      	movs	r4, #0
 8008e70:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8008e74:	f1c2 0214 	rsb	r2, r2, #20
 8008e78:	ec45 4b15 	vmov	d5, r4, r5
 8008e7c:	4110      	asrs	r0, r2
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	bfb8      	it	lt
 8008e82:	4240      	neglt	r0, r0
 8008e84:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008e88:	ee36 5b07 	vadd.f64	d5, d6, d7
 8008e8c:	ec53 2b15 	vmov	r2, r3, d5
 8008e90:	2200      	movs	r2, #0
 8008e92:	ec43 2b15 	vmov	d5, r2, r3
 8008e96:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8008fe8 <__ieee754_pow+0x6a0>
 8008e9a:	ee35 6b46 	vsub.f64	d6, d5, d6
 8008e9e:	ee37 6b46 	vsub.f64	d6, d7, d6
 8008ea2:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8008ff0 <__ieee754_pow+0x6a8>
 8008ea6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008eaa:	eea6 7b04 	vfma.f64	d7, d6, d4
 8008eae:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8008ff8 <__ieee754_pow+0x6b0>
 8008eb2:	eeb0 4b47 	vmov.f64	d4, d7
 8008eb6:	eea5 4b06 	vfma.f64	d4, d5, d6
 8008eba:	eeb0 3b44 	vmov.f64	d3, d4
 8008ebe:	eea5 3b46 	vfms.f64	d3, d5, d6
 8008ec2:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8009000 <__ieee754_pow+0x6b8>
 8008ec6:	ee37 7b43 	vsub.f64	d7, d7, d3
 8008eca:	ee24 6b04 	vmul.f64	d6, d4, d4
 8008ece:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8009008 <__ieee754_pow+0x6c0>
 8008ed2:	eea4 7b07 	vfma.f64	d7, d4, d7
 8008ed6:	eea6 3b05 	vfma.f64	d3, d6, d5
 8008eda:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8009010 <__ieee754_pow+0x6c8>
 8008ede:	eea3 5b06 	vfma.f64	d5, d3, d6
 8008ee2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8009018 <__ieee754_pow+0x6d0>
 8008ee6:	eea5 3b06 	vfma.f64	d3, d5, d6
 8008eea:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8009020 <__ieee754_pow+0x6d8>
 8008eee:	eea3 5b06 	vfma.f64	d5, d3, d6
 8008ef2:	eeb0 3b44 	vmov.f64	d3, d4
 8008ef6:	eea5 3b46 	vfms.f64	d3, d5, d6
 8008efa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008efe:	eeb0 6b43 	vmov.f64	d6, d3
 8008f02:	ee24 3b03 	vmul.f64	d3, d4, d3
 8008f06:	ee36 5b45 	vsub.f64	d5, d6, d5
 8008f0a:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8008f0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008f12:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008f16:	ee37 7b44 	vsub.f64	d7, d7, d4
 8008f1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008f1e:	ed8d 7b00 	vstr	d7, [sp]
 8008f22:	9901      	ldr	r1, [sp, #4]
 8008f24:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8008f28:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008f2c:	da1e      	bge.n	8008f6c <__ieee754_pow+0x624>
 8008f2e:	eeb0 0b47 	vmov.f64	d0, d7
 8008f32:	f000 fedd 	bl	8009cf0 <scalbn>
 8008f36:	ee20 7b08 	vmul.f64	d7, d0, d8
 8008f3a:	e56e      	b.n	8008a1a <__ieee754_pow+0xd2>
 8008f3c:	4b43      	ldr	r3, [pc, #268]	; (800904c <__ieee754_pow+0x704>)
 8008f3e:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8008f42:	4298      	cmp	r0, r3
 8008f44:	f77f af7c 	ble.w	8008e40 <__ieee754_pow+0x4f8>
 8008f48:	4b41      	ldr	r3, [pc, #260]	; (8009050 <__ieee754_pow+0x708>)
 8008f4a:	440b      	add	r3, r1
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	d002      	beq.n	8008f56 <__ieee754_pow+0x60e>
 8008f50:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8009028 <__ieee754_pow+0x6e0>
 8008f54:	e660      	b.n	8008c18 <__ieee754_pow+0x2d0>
 8008f56:	ee35 5b46 	vsub.f64	d5, d5, d6
 8008f5a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f62:	f6ff af6d 	blt.w	8008e40 <__ieee754_pow+0x4f8>
 8008f66:	e7f3      	b.n	8008f50 <__ieee754_pow+0x608>
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e78d      	b.n	8008e88 <__ieee754_pow+0x540>
 8008f6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f70:	460b      	mov	r3, r1
 8008f72:	ec43 2b10 	vmov	d0, r2, r3
 8008f76:	e7de      	b.n	8008f36 <__ieee754_pow+0x5ee>
 8008f78:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008f7c:	e54d      	b.n	8008a1a <__ieee754_pow+0xd2>
 8008f7e:	e9cd 6700 	strd	r6, r7, [sp]
 8008f82:	e574      	b.n	8008a6e <__ieee754_pow+0x126>
 8008f84:	ed8d 8b00 	vstr	d8, [sp]
 8008f88:	e571      	b.n	8008a6e <__ieee754_pow+0x126>
 8008f8a:	4615      	mov	r5, r2
 8008f8c:	e557      	b.n	8008a3e <__ieee754_pow+0xf6>
 8008f8e:	bf00      	nop
 8008f90:	00000000 	.word	0x00000000
 8008f94:	43400000 	.word	0x43400000
 8008f98:	4a454eef 	.word	0x4a454eef
 8008f9c:	3fca7e28 	.word	0x3fca7e28
 8008fa0:	93c9db65 	.word	0x93c9db65
 8008fa4:	3fcd864a 	.word	0x3fcd864a
 8008fa8:	a91d4101 	.word	0xa91d4101
 8008fac:	3fd17460 	.word	0x3fd17460
 8008fb0:	518f264d 	.word	0x518f264d
 8008fb4:	3fd55555 	.word	0x3fd55555
 8008fb8:	db6fabff 	.word	0xdb6fabff
 8008fbc:	3fdb6db6 	.word	0x3fdb6db6
 8008fc0:	33333303 	.word	0x33333303
 8008fc4:	3fe33333 	.word	0x3fe33333
 8008fc8:	dc3a03fd 	.word	0xdc3a03fd
 8008fcc:	3feec709 	.word	0x3feec709
 8008fd0:	145b01f5 	.word	0x145b01f5
 8008fd4:	be3e2fe0 	.word	0xbe3e2fe0
 8008fd8:	e0000000 	.word	0xe0000000
 8008fdc:	3feec709 	.word	0x3feec709
 8008fe0:	652b82fe 	.word	0x652b82fe
 8008fe4:	3c971547 	.word	0x3c971547
 8008fe8:	fefa39ef 	.word	0xfefa39ef
 8008fec:	3fe62e42 	.word	0x3fe62e42
 8008ff0:	0ca86c39 	.word	0x0ca86c39
 8008ff4:	be205c61 	.word	0xbe205c61
 8008ff8:	00000000 	.word	0x00000000
 8008ffc:	3fe62e43 	.word	0x3fe62e43
 8009000:	72bea4d0 	.word	0x72bea4d0
 8009004:	3e663769 	.word	0x3e663769
 8009008:	c5d26bf1 	.word	0xc5d26bf1
 800900c:	bebbbd41 	.word	0xbebbbd41
 8009010:	af25de2c 	.word	0xaf25de2c
 8009014:	3f11566a 	.word	0x3f11566a
 8009018:	16bebd93 	.word	0x16bebd93
 800901c:	bf66c16c 	.word	0xbf66c16c
 8009020:	5555553e 	.word	0x5555553e
 8009024:	3fc55555 	.word	0x3fc55555
 8009028:	c2f8f359 	.word	0xc2f8f359
 800902c:	01a56e1f 	.word	0x01a56e1f
 8009030:	0003988e 	.word	0x0003988e
 8009034:	000bb679 	.word	0x000bb679
 8009038:	0800a608 	.word	0x0800a608
 800903c:	0800a628 	.word	0x0800a628
 8009040:	0800a618 	.word	0x0800a618
 8009044:	3fe00000 	.word	0x3fe00000
 8009048:	000fffff 	.word	0x000fffff
 800904c:	4090cbff 	.word	0x4090cbff
 8009050:	3f6f3400 	.word	0x3f6f3400

08009054 <__ieee754_sqrt>:
 8009054:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8009058:	4770      	bx	lr
	...

0800905c <__ieee754_log10f>:
 800905c:	b508      	push	{r3, lr}
 800905e:	ee10 2a10 	vmov	r2, s0
 8009062:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009066:	ed2d 8b02 	vpush	{d8}
 800906a:	d108      	bne.n	800907e <__ieee754_log10f+0x22>
 800906c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80090f0 <__ieee754_log10f+0x94>
 8009070:	eddf 7a20 	vldr	s15, [pc, #128]	; 80090f4 <__ieee754_log10f+0x98>
 8009074:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009078:	ecbd 8b02 	vpop	{d8}
 800907c:	bd08      	pop	{r3, pc}
 800907e:	2a00      	cmp	r2, #0
 8009080:	da02      	bge.n	8009088 <__ieee754_log10f+0x2c>
 8009082:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009086:	e7f3      	b.n	8009070 <__ieee754_log10f+0x14>
 8009088:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800908c:	db02      	blt.n	8009094 <__ieee754_log10f+0x38>
 800908e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009092:	e7f1      	b.n	8009078 <__ieee754_log10f+0x1c>
 8009094:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8009098:	bfbf      	itttt	lt
 800909a:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 80090f8 <__ieee754_log10f+0x9c>
 800909e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80090a2:	f06f 0118 	mvnlt.w	r1, #24
 80090a6:	ee17 2a90 	vmovlt	r2, s15
 80090aa:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80090ae:	bfa8      	it	ge
 80090b0:	2100      	movge	r1, #0
 80090b2:	3b7f      	subs	r3, #127	; 0x7f
 80090b4:	440b      	add	r3, r1
 80090b6:	0fd9      	lsrs	r1, r3, #31
 80090b8:	440b      	add	r3, r1
 80090ba:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80090be:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 80090c2:	ee07 3a90 	vmov	s15, r3
 80090c6:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 80090ca:	ee00 3a10 	vmov	s0, r3
 80090ce:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80090d2:	f7fe fe69 	bl	8007da8 <logf>
 80090d6:	eddf 7a09 	vldr	s15, [pc, #36]	; 80090fc <__ieee754_log10f+0xa0>
 80090da:	ee20 0a27 	vmul.f32	s0, s0, s15
 80090de:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009100 <__ieee754_log10f+0xa4>
 80090e2:	eea8 0a27 	vfma.f32	s0, s16, s15
 80090e6:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009104 <__ieee754_log10f+0xa8>
 80090ea:	eea8 0a27 	vfma.f32	s0, s16, s15
 80090ee:	e7c3      	b.n	8009078 <__ieee754_log10f+0x1c>
 80090f0:	cc000000 	.word	0xcc000000
 80090f4:	00000000 	.word	0x00000000
 80090f8:	4c000000 	.word	0x4c000000
 80090fc:	3ede5bd9 	.word	0x3ede5bd9
 8009100:	355427db 	.word	0x355427db
 8009104:	3e9a2080 	.word	0x3e9a2080

08009108 <__ieee754_rem_pio2f>:
 8009108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800910a:	ee10 6a10 	vmov	r6, s0
 800910e:	4b86      	ldr	r3, [pc, #536]	; (8009328 <__ieee754_rem_pio2f+0x220>)
 8009110:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8009114:	429c      	cmp	r4, r3
 8009116:	b087      	sub	sp, #28
 8009118:	4605      	mov	r5, r0
 800911a:	dc05      	bgt.n	8009128 <__ieee754_rem_pio2f+0x20>
 800911c:	2300      	movs	r3, #0
 800911e:	ed85 0a00 	vstr	s0, [r5]
 8009122:	6043      	str	r3, [r0, #4]
 8009124:	2000      	movs	r0, #0
 8009126:	e020      	b.n	800916a <__ieee754_rem_pio2f+0x62>
 8009128:	4b80      	ldr	r3, [pc, #512]	; (800932c <__ieee754_rem_pio2f+0x224>)
 800912a:	429c      	cmp	r4, r3
 800912c:	dc38      	bgt.n	80091a0 <__ieee754_rem_pio2f+0x98>
 800912e:	2e00      	cmp	r6, #0
 8009130:	f024 040f 	bic.w	r4, r4, #15
 8009134:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8009330 <__ieee754_rem_pio2f+0x228>
 8009138:	4b7e      	ldr	r3, [pc, #504]	; (8009334 <__ieee754_rem_pio2f+0x22c>)
 800913a:	dd18      	ble.n	800916e <__ieee754_rem_pio2f+0x66>
 800913c:	429c      	cmp	r4, r3
 800913e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009142:	bf09      	itett	eq
 8009144:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8009338 <__ieee754_rem_pio2f+0x230>
 8009148:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800933c <__ieee754_rem_pio2f+0x234>
 800914c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009150:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8009340 <__ieee754_rem_pio2f+0x238>
 8009154:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009158:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800915c:	edc0 6a00 	vstr	s13, [r0]
 8009160:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009164:	edc0 7a01 	vstr	s15, [r0, #4]
 8009168:	2001      	movs	r0, #1
 800916a:	b007      	add	sp, #28
 800916c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800916e:	429c      	cmp	r4, r3
 8009170:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009174:	bf09      	itett	eq
 8009176:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8009338 <__ieee754_rem_pio2f+0x230>
 800917a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800933c <__ieee754_rem_pio2f+0x234>
 800917e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8009182:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8009340 <__ieee754_rem_pio2f+0x238>
 8009186:	ee77 6a87 	vadd.f32	s13, s15, s14
 800918a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800918e:	edc0 6a00 	vstr	s13, [r0]
 8009192:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009196:	edc0 7a01 	vstr	s15, [r0, #4]
 800919a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800919e:	e7e4      	b.n	800916a <__ieee754_rem_pio2f+0x62>
 80091a0:	4b68      	ldr	r3, [pc, #416]	; (8009344 <__ieee754_rem_pio2f+0x23c>)
 80091a2:	429c      	cmp	r4, r3
 80091a4:	dc71      	bgt.n	800928a <__ieee754_rem_pio2f+0x182>
 80091a6:	f7fe fdf7 	bl	8007d98 <fabsf>
 80091aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009348 <__ieee754_rem_pio2f+0x240>
 80091ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80091b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80091b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091ba:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80091be:	ee17 0a90 	vmov	r0, s15
 80091c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8009330 <__ieee754_rem_pio2f+0x228>
 80091c6:	eeb1 7a46 	vneg.f32	s14, s12
 80091ca:	eea7 0a27 	vfma.f32	s0, s14, s15
 80091ce:	281f      	cmp	r0, #31
 80091d0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800933c <__ieee754_rem_pio2f+0x234>
 80091d4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80091d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80091dc:	ee16 3a90 	vmov	r3, s13
 80091e0:	dc1c      	bgt.n	800921c <__ieee754_rem_pio2f+0x114>
 80091e2:	1e47      	subs	r7, r0, #1
 80091e4:	4959      	ldr	r1, [pc, #356]	; (800934c <__ieee754_rem_pio2f+0x244>)
 80091e6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80091ea:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80091ee:	428a      	cmp	r2, r1
 80091f0:	d014      	beq.n	800921c <__ieee754_rem_pio2f+0x114>
 80091f2:	602b      	str	r3, [r5, #0]
 80091f4:	ed95 7a00 	vldr	s14, [r5]
 80091f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80091fc:	2e00      	cmp	r6, #0
 80091fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009202:	ed85 0a01 	vstr	s0, [r5, #4]
 8009206:	dab0      	bge.n	800916a <__ieee754_rem_pio2f+0x62>
 8009208:	eeb1 7a47 	vneg.f32	s14, s14
 800920c:	eeb1 0a40 	vneg.f32	s0, s0
 8009210:	ed85 7a00 	vstr	s14, [r5]
 8009214:	ed85 0a01 	vstr	s0, [r5, #4]
 8009218:	4240      	negs	r0, r0
 800921a:	e7a6      	b.n	800916a <__ieee754_rem_pio2f+0x62>
 800921c:	15e4      	asrs	r4, r4, #23
 800921e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009222:	1aa2      	subs	r2, r4, r2
 8009224:	2a08      	cmp	r2, #8
 8009226:	dde4      	ble.n	80091f2 <__ieee754_rem_pio2f+0xea>
 8009228:	eddf 7a43 	vldr	s15, [pc, #268]	; 8009338 <__ieee754_rem_pio2f+0x230>
 800922c:	eef0 6a40 	vmov.f32	s13, s0
 8009230:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009234:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009238:	eea7 0a27 	vfma.f32	s0, s14, s15
 800923c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8009340 <__ieee754_rem_pio2f+0x238>
 8009240:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8009244:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8009248:	eef0 7a40 	vmov.f32	s15, s0
 800924c:	ee15 3a90 	vmov	r3, s11
 8009250:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009254:	1aa4      	subs	r4, r4, r2
 8009256:	2c19      	cmp	r4, #25
 8009258:	dc04      	bgt.n	8009264 <__ieee754_rem_pio2f+0x15c>
 800925a:	edc5 5a00 	vstr	s11, [r5]
 800925e:	eeb0 0a66 	vmov.f32	s0, s13
 8009262:	e7c7      	b.n	80091f4 <__ieee754_rem_pio2f+0xec>
 8009264:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8009350 <__ieee754_rem_pio2f+0x248>
 8009268:	eeb0 0a66 	vmov.f32	s0, s13
 800926c:	eea7 0a25 	vfma.f32	s0, s14, s11
 8009270:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009274:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009278:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009354 <__ieee754_rem_pio2f+0x24c>
 800927c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8009280:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009284:	ed85 7a00 	vstr	s14, [r5]
 8009288:	e7b4      	b.n	80091f4 <__ieee754_rem_pio2f+0xec>
 800928a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800928e:	db06      	blt.n	800929e <__ieee754_rem_pio2f+0x196>
 8009290:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009294:	edc0 7a01 	vstr	s15, [r0, #4]
 8009298:	edc0 7a00 	vstr	s15, [r0]
 800929c:	e742      	b.n	8009124 <__ieee754_rem_pio2f+0x1c>
 800929e:	15e2      	asrs	r2, r4, #23
 80092a0:	3a86      	subs	r2, #134	; 0x86
 80092a2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80092a6:	ee07 3a90 	vmov	s15, r3
 80092aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80092ae:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8009358 <__ieee754_rem_pio2f+0x250>
 80092b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80092b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092ba:	ed8d 7a03 	vstr	s14, [sp, #12]
 80092be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80092c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80092c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80092ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092ce:	ed8d 7a04 	vstr	s14, [sp, #16]
 80092d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80092d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80092da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092de:	edcd 7a05 	vstr	s15, [sp, #20]
 80092e2:	d11e      	bne.n	8009322 <__ieee754_rem_pio2f+0x21a>
 80092e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80092e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ec:	bf0c      	ite	eq
 80092ee:	2301      	moveq	r3, #1
 80092f0:	2302      	movne	r3, #2
 80092f2:	491a      	ldr	r1, [pc, #104]	; (800935c <__ieee754_rem_pio2f+0x254>)
 80092f4:	9101      	str	r1, [sp, #4]
 80092f6:	2102      	movs	r1, #2
 80092f8:	9100      	str	r1, [sp, #0]
 80092fa:	a803      	add	r0, sp, #12
 80092fc:	4629      	mov	r1, r5
 80092fe:	f000 f89d 	bl	800943c <__kernel_rem_pio2f>
 8009302:	2e00      	cmp	r6, #0
 8009304:	f6bf af31 	bge.w	800916a <__ieee754_rem_pio2f+0x62>
 8009308:	edd5 7a00 	vldr	s15, [r5]
 800930c:	eef1 7a67 	vneg.f32	s15, s15
 8009310:	edc5 7a00 	vstr	s15, [r5]
 8009314:	edd5 7a01 	vldr	s15, [r5, #4]
 8009318:	eef1 7a67 	vneg.f32	s15, s15
 800931c:	edc5 7a01 	vstr	s15, [r5, #4]
 8009320:	e77a      	b.n	8009218 <__ieee754_rem_pio2f+0x110>
 8009322:	2303      	movs	r3, #3
 8009324:	e7e5      	b.n	80092f2 <__ieee754_rem_pio2f+0x1ea>
 8009326:	bf00      	nop
 8009328:	3f490fd8 	.word	0x3f490fd8
 800932c:	4016cbe3 	.word	0x4016cbe3
 8009330:	3fc90f80 	.word	0x3fc90f80
 8009334:	3fc90fd0 	.word	0x3fc90fd0
 8009338:	37354400 	.word	0x37354400
 800933c:	37354443 	.word	0x37354443
 8009340:	2e85a308 	.word	0x2e85a308
 8009344:	43490f80 	.word	0x43490f80
 8009348:	3f22f984 	.word	0x3f22f984
 800934c:	0800a638 	.word	0x0800a638
 8009350:	2e85a300 	.word	0x2e85a300
 8009354:	248d3132 	.word	0x248d3132
 8009358:	43800000 	.word	0x43800000
 800935c:	0800a6b8 	.word	0x0800a6b8

08009360 <__ieee754_sinhf>:
 8009360:	b510      	push	{r4, lr}
 8009362:	ee10 3a10 	vmov	r3, s0
 8009366:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800936a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800936e:	ed2d 8b02 	vpush	{d8}
 8009372:	eef0 7a40 	vmov.f32	s15, s0
 8009376:	db06      	blt.n	8009386 <__ieee754_sinhf+0x26>
 8009378:	ee70 7a00 	vadd.f32	s15, s0, s0
 800937c:	ecbd 8b02 	vpop	{d8}
 8009380:	eeb0 0a67 	vmov.f32	s0, s15
 8009384:	bd10      	pop	{r4, pc}
 8009386:	2b00      	cmp	r3, #0
 8009388:	4b28      	ldr	r3, [pc, #160]	; (800942c <__ieee754_sinhf+0xcc>)
 800938a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800938e:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8009392:	fe28 8a88 	vselge.f32	s16, s17, s16
 8009396:	429c      	cmp	r4, r3
 8009398:	dc2a      	bgt.n	80093f0 <__ieee754_sinhf+0x90>
 800939a:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 800939e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80093a2:	da08      	bge.n	80093b6 <__ieee754_sinhf+0x56>
 80093a4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8009430 <__ieee754_sinhf+0xd0>
 80093a8:	ee30 7a07 	vadd.f32	s14, s0, s14
 80093ac:	eeb4 7ae8 	vcmpe.f32	s14, s17
 80093b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b4:	dce2      	bgt.n	800937c <__ieee754_sinhf+0x1c>
 80093b6:	eeb0 0a67 	vmov.f32	s0, s15
 80093ba:	f7fe fced 	bl	8007d98 <fabsf>
 80093be:	f000 fd15 	bl	8009dec <expm1f>
 80093c2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80093c6:	bfbb      	ittet	lt
 80093c8:	ee20 7a00 	vmullt.f32	s14, s0, s0
 80093cc:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 80093d0:	ee70 8a28 	vaddge.f32	s17, s0, s17
 80093d4:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 80093d8:	bfad      	iteet	ge
 80093da:	eec0 7a28 	vdivge.f32	s15, s0, s17
 80093de:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 80093e2:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 80093e6:	ee77 7a80 	vaddge.f32	s15, s15, s0
 80093ea:	ee67 7a88 	vmul.f32	s15, s15, s16
 80093ee:	e7c5      	b.n	800937c <__ieee754_sinhf+0x1c>
 80093f0:	4b10      	ldr	r3, [pc, #64]	; (8009434 <__ieee754_sinhf+0xd4>)
 80093f2:	429c      	cmp	r4, r3
 80093f4:	dc06      	bgt.n	8009404 <__ieee754_sinhf+0xa4>
 80093f6:	f7fe fccf 	bl	8007d98 <fabsf>
 80093fa:	f7fe fc4f 	bl	8007c9c <expf>
 80093fe:	ee60 7a08 	vmul.f32	s15, s0, s16
 8009402:	e7bb      	b.n	800937c <__ieee754_sinhf+0x1c>
 8009404:	4b0c      	ldr	r3, [pc, #48]	; (8009438 <__ieee754_sinhf+0xd8>)
 8009406:	429c      	cmp	r4, r3
 8009408:	dc0a      	bgt.n	8009420 <__ieee754_sinhf+0xc0>
 800940a:	f7fe fcc5 	bl	8007d98 <fabsf>
 800940e:	ee20 0a28 	vmul.f32	s0, s0, s17
 8009412:	f7fe fc43 	bl	8007c9c <expf>
 8009416:	ee68 7a00 	vmul.f32	s15, s16, s0
 800941a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800941e:	e7ad      	b.n	800937c <__ieee754_sinhf+0x1c>
 8009420:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8009430 <__ieee754_sinhf+0xd0>
 8009424:	ee60 7a07 	vmul.f32	s15, s0, s14
 8009428:	e7a8      	b.n	800937c <__ieee754_sinhf+0x1c>
 800942a:	bf00      	nop
 800942c:	41afffff 	.word	0x41afffff
 8009430:	7cf0bdc2 	.word	0x7cf0bdc2
 8009434:	42b17217 	.word	0x42b17217
 8009438:	42b2d4fc 	.word	0x42b2d4fc

0800943c <__kernel_rem_pio2f>:
 800943c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009440:	ed2d 8b04 	vpush	{d8-d9}
 8009444:	b0d7      	sub	sp, #348	; 0x15c
 8009446:	469b      	mov	fp, r3
 8009448:	460e      	mov	r6, r1
 800944a:	4bbe      	ldr	r3, [pc, #760]	; (8009744 <__kernel_rem_pio2f+0x308>)
 800944c:	9964      	ldr	r1, [sp, #400]	; 0x190
 800944e:	9002      	str	r0, [sp, #8]
 8009450:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8009454:	9865      	ldr	r0, [sp, #404]	; 0x194
 8009456:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8009754 <__kernel_rem_pio2f+0x318>
 800945a:	1ed1      	subs	r1, r2, #3
 800945c:	2308      	movs	r3, #8
 800945e:	fb91 f1f3 	sdiv	r1, r1, r3
 8009462:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8009466:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800946a:	1c4c      	adds	r4, r1, #1
 800946c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8009470:	eba1 050a 	sub.w	r5, r1, sl
 8009474:	aa1a      	add	r2, sp, #104	; 0x68
 8009476:	eb09 070a 	add.w	r7, r9, sl
 800947a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800947e:	4696      	mov	lr, r2
 8009480:	2300      	movs	r3, #0
 8009482:	42bb      	cmp	r3, r7
 8009484:	dd0f      	ble.n	80094a6 <__kernel_rem_pio2f+0x6a>
 8009486:	af42      	add	r7, sp, #264	; 0x108
 8009488:	2200      	movs	r2, #0
 800948a:	454a      	cmp	r2, r9
 800948c:	dc27      	bgt.n	80094de <__kernel_rem_pio2f+0xa2>
 800948e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8009492:	eb0b 0302 	add.w	r3, fp, r2
 8009496:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800949a:	9d02      	ldr	r5, [sp, #8]
 800949c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8009754 <__kernel_rem_pio2f+0x318>
 80094a0:	f04f 0c00 	mov.w	ip, #0
 80094a4:	e015      	b.n	80094d2 <__kernel_rem_pio2f+0x96>
 80094a6:	42dd      	cmn	r5, r3
 80094a8:	bf5d      	ittte	pl
 80094aa:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80094ae:	ee07 2a90 	vmovpl	s15, r2
 80094b2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80094b6:	eef0 7a47 	vmovmi.f32	s15, s14
 80094ba:	ecee 7a01 	vstmia	lr!, {s15}
 80094be:	3301      	adds	r3, #1
 80094c0:	e7df      	b.n	8009482 <__kernel_rem_pio2f+0x46>
 80094c2:	ecf5 6a01 	vldmia	r5!, {s13}
 80094c6:	ed33 7a01 	vldmdb	r3!, {s14}
 80094ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80094ce:	f10c 0c01 	add.w	ip, ip, #1
 80094d2:	45d4      	cmp	ip, sl
 80094d4:	ddf5      	ble.n	80094c2 <__kernel_rem_pio2f+0x86>
 80094d6:	ece7 7a01 	vstmia	r7!, {s15}
 80094da:	3201      	adds	r2, #1
 80094dc:	e7d5      	b.n	800948a <__kernel_rem_pio2f+0x4e>
 80094de:	ab06      	add	r3, sp, #24
 80094e0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80094e4:	9304      	str	r3, [sp, #16]
 80094e6:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8009750 <__kernel_rem_pio2f+0x314>
 80094ea:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800974c <__kernel_rem_pio2f+0x310>
 80094ee:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80094f2:	9303      	str	r3, [sp, #12]
 80094f4:	464d      	mov	r5, r9
 80094f6:	ab56      	add	r3, sp, #344	; 0x158
 80094f8:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80094fc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009500:	3f01      	subs	r7, #1
 8009502:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8009506:	00bf      	lsls	r7, r7, #2
 8009508:	ab56      	add	r3, sp, #344	; 0x158
 800950a:	19da      	adds	r2, r3, r7
 800950c:	3a4c      	subs	r2, #76	; 0x4c
 800950e:	2300      	movs	r3, #0
 8009510:	1ae9      	subs	r1, r5, r3
 8009512:	2900      	cmp	r1, #0
 8009514:	dc4c      	bgt.n	80095b0 <__kernel_rem_pio2f+0x174>
 8009516:	4620      	mov	r0, r4
 8009518:	f000 fdde 	bl	800a0d8 <scalbnf>
 800951c:	eeb0 8a40 	vmov.f32	s16, s0
 8009520:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8009524:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009528:	f000 fd94 	bl	800a054 <floorf>
 800952c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009530:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009534:	2c00      	cmp	r4, #0
 8009536:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800953a:	edcd 7a01 	vstr	s15, [sp, #4]
 800953e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009542:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009546:	dd48      	ble.n	80095da <__kernel_rem_pio2f+0x19e>
 8009548:	1e69      	subs	r1, r5, #1
 800954a:	ab06      	add	r3, sp, #24
 800954c:	f1c4 0008 	rsb	r0, r4, #8
 8009550:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8009554:	9a01      	ldr	r2, [sp, #4]
 8009556:	fa4c f300 	asr.w	r3, ip, r0
 800955a:	441a      	add	r2, r3
 800955c:	4083      	lsls	r3, r0
 800955e:	9201      	str	r2, [sp, #4]
 8009560:	ebac 0203 	sub.w	r2, ip, r3
 8009564:	ab06      	add	r3, sp, #24
 8009566:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800956a:	f1c4 0307 	rsb	r3, r4, #7
 800956e:	fa42 f803 	asr.w	r8, r2, r3
 8009572:	f1b8 0f00 	cmp.w	r8, #0
 8009576:	dd41      	ble.n	80095fc <__kernel_rem_pio2f+0x1c0>
 8009578:	9b01      	ldr	r3, [sp, #4]
 800957a:	2000      	movs	r0, #0
 800957c:	3301      	adds	r3, #1
 800957e:	9301      	str	r3, [sp, #4]
 8009580:	4601      	mov	r1, r0
 8009582:	4285      	cmp	r5, r0
 8009584:	dc6d      	bgt.n	8009662 <__kernel_rem_pio2f+0x226>
 8009586:	2c00      	cmp	r4, #0
 8009588:	dd04      	ble.n	8009594 <__kernel_rem_pio2f+0x158>
 800958a:	2c01      	cmp	r4, #1
 800958c:	d07e      	beq.n	800968c <__kernel_rem_pio2f+0x250>
 800958e:	2c02      	cmp	r4, #2
 8009590:	f000 8086 	beq.w	80096a0 <__kernel_rem_pio2f+0x264>
 8009594:	f1b8 0f02 	cmp.w	r8, #2
 8009598:	d130      	bne.n	80095fc <__kernel_rem_pio2f+0x1c0>
 800959a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800959e:	ee30 8a48 	vsub.f32	s16, s0, s16
 80095a2:	b359      	cbz	r1, 80095fc <__kernel_rem_pio2f+0x1c0>
 80095a4:	4620      	mov	r0, r4
 80095a6:	f000 fd97 	bl	800a0d8 <scalbnf>
 80095aa:	ee38 8a40 	vsub.f32	s16, s16, s0
 80095ae:	e025      	b.n	80095fc <__kernel_rem_pio2f+0x1c0>
 80095b0:	ee60 7a28 	vmul.f32	s15, s0, s17
 80095b4:	a806      	add	r0, sp, #24
 80095b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095be:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80095c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80095c6:	ee10 1a10 	vmov	r1, s0
 80095ca:	ed32 0a01 	vldmdb	r2!, {s0}
 80095ce:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80095d2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80095d6:	3301      	adds	r3, #1
 80095d8:	e79a      	b.n	8009510 <__kernel_rem_pio2f+0xd4>
 80095da:	d106      	bne.n	80095ea <__kernel_rem_pio2f+0x1ae>
 80095dc:	1e6b      	subs	r3, r5, #1
 80095de:	aa06      	add	r2, sp, #24
 80095e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80095e4:	ea4f 2822 	mov.w	r8, r2, asr #8
 80095e8:	e7c3      	b.n	8009572 <__kernel_rem_pio2f+0x136>
 80095ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80095ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80095f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f6:	da31      	bge.n	800965c <__kernel_rem_pio2f+0x220>
 80095f8:	f04f 0800 	mov.w	r8, #0
 80095fc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009604:	f040 80a8 	bne.w	8009758 <__kernel_rem_pio2f+0x31c>
 8009608:	1e6b      	subs	r3, r5, #1
 800960a:	4618      	mov	r0, r3
 800960c:	2200      	movs	r2, #0
 800960e:	4548      	cmp	r0, r9
 8009610:	da4d      	bge.n	80096ae <__kernel_rem_pio2f+0x272>
 8009612:	2a00      	cmp	r2, #0
 8009614:	f000 8087 	beq.w	8009726 <__kernel_rem_pio2f+0x2ea>
 8009618:	aa06      	add	r2, sp, #24
 800961a:	3c08      	subs	r4, #8
 800961c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009620:	2900      	cmp	r1, #0
 8009622:	f000 808d 	beq.w	8009740 <__kernel_rem_pio2f+0x304>
 8009626:	4620      	mov	r0, r4
 8009628:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800962c:	9302      	str	r3, [sp, #8]
 800962e:	f000 fd53 	bl	800a0d8 <scalbnf>
 8009632:	9b02      	ldr	r3, [sp, #8]
 8009634:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009750 <__kernel_rem_pio2f+0x314>
 8009638:	0099      	lsls	r1, r3, #2
 800963a:	aa42      	add	r2, sp, #264	; 0x108
 800963c:	1850      	adds	r0, r2, r1
 800963e:	1d05      	adds	r5, r0, #4
 8009640:	461c      	mov	r4, r3
 8009642:	2c00      	cmp	r4, #0
 8009644:	f280 80b8 	bge.w	80097b8 <__kernel_rem_pio2f+0x37c>
 8009648:	2500      	movs	r5, #0
 800964a:	1b5c      	subs	r4, r3, r5
 800964c:	2c00      	cmp	r4, #0
 800964e:	f2c0 80d8 	blt.w	8009802 <__kernel_rem_pio2f+0x3c6>
 8009652:	4f3d      	ldr	r7, [pc, #244]	; (8009748 <__kernel_rem_pio2f+0x30c>)
 8009654:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8009754 <__kernel_rem_pio2f+0x318>
 8009658:	2400      	movs	r4, #0
 800965a:	e0c6      	b.n	80097ea <__kernel_rem_pio2f+0x3ae>
 800965c:	f04f 0802 	mov.w	r8, #2
 8009660:	e78a      	b.n	8009578 <__kernel_rem_pio2f+0x13c>
 8009662:	ab06      	add	r3, sp, #24
 8009664:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009668:	b949      	cbnz	r1, 800967e <__kernel_rem_pio2f+0x242>
 800966a:	b12b      	cbz	r3, 8009678 <__kernel_rem_pio2f+0x23c>
 800966c:	aa06      	add	r2, sp, #24
 800966e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009672:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009676:	2301      	movs	r3, #1
 8009678:	3001      	adds	r0, #1
 800967a:	4619      	mov	r1, r3
 800967c:	e781      	b.n	8009582 <__kernel_rem_pio2f+0x146>
 800967e:	aa06      	add	r2, sp, #24
 8009680:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009684:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009688:	460b      	mov	r3, r1
 800968a:	e7f5      	b.n	8009678 <__kernel_rem_pio2f+0x23c>
 800968c:	1e68      	subs	r0, r5, #1
 800968e:	ab06      	add	r3, sp, #24
 8009690:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009698:	aa06      	add	r2, sp, #24
 800969a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800969e:	e779      	b.n	8009594 <__kernel_rem_pio2f+0x158>
 80096a0:	1e68      	subs	r0, r5, #1
 80096a2:	ab06      	add	r3, sp, #24
 80096a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80096a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096ac:	e7f4      	b.n	8009698 <__kernel_rem_pio2f+0x25c>
 80096ae:	a906      	add	r1, sp, #24
 80096b0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80096b4:	3801      	subs	r0, #1
 80096b6:	430a      	orrs	r2, r1
 80096b8:	e7a9      	b.n	800960e <__kernel_rem_pio2f+0x1d2>
 80096ba:	f10c 0c01 	add.w	ip, ip, #1
 80096be:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80096c2:	2a00      	cmp	r2, #0
 80096c4:	d0f9      	beq.n	80096ba <__kernel_rem_pio2f+0x27e>
 80096c6:	eb0b 0305 	add.w	r3, fp, r5
 80096ca:	aa1a      	add	r2, sp, #104	; 0x68
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	1898      	adds	r0, r3, r2
 80096d0:	3004      	adds	r0, #4
 80096d2:	1c69      	adds	r1, r5, #1
 80096d4:	3704      	adds	r7, #4
 80096d6:	2200      	movs	r2, #0
 80096d8:	4465      	add	r5, ip
 80096da:	9005      	str	r0, [sp, #20]
 80096dc:	428d      	cmp	r5, r1
 80096de:	f6ff af0a 	blt.w	80094f6 <__kernel_rem_pio2f+0xba>
 80096e2:	a81a      	add	r0, sp, #104	; 0x68
 80096e4:	eb02 0c03 	add.w	ip, r2, r3
 80096e8:	4484      	add	ip, r0
 80096ea:	9803      	ldr	r0, [sp, #12]
 80096ec:	f8dd e008 	ldr.w	lr, [sp, #8]
 80096f0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80096f4:	9001      	str	r0, [sp, #4]
 80096f6:	ee07 0a90 	vmov	s15, r0
 80096fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096fe:	9805      	ldr	r0, [sp, #20]
 8009700:	edcc 7a00 	vstr	s15, [ip]
 8009704:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009754 <__kernel_rem_pio2f+0x318>
 8009708:	eb00 0802 	add.w	r8, r0, r2
 800970c:	f04f 0c00 	mov.w	ip, #0
 8009710:	45d4      	cmp	ip, sl
 8009712:	dd0c      	ble.n	800972e <__kernel_rem_pio2f+0x2f2>
 8009714:	eb02 0c07 	add.w	ip, r2, r7
 8009718:	a842      	add	r0, sp, #264	; 0x108
 800971a:	4484      	add	ip, r0
 800971c:	edcc 7a01 	vstr	s15, [ip, #4]
 8009720:	3101      	adds	r1, #1
 8009722:	3204      	adds	r2, #4
 8009724:	e7da      	b.n	80096dc <__kernel_rem_pio2f+0x2a0>
 8009726:	9b04      	ldr	r3, [sp, #16]
 8009728:	f04f 0c01 	mov.w	ip, #1
 800972c:	e7c7      	b.n	80096be <__kernel_rem_pio2f+0x282>
 800972e:	ecfe 6a01 	vldmia	lr!, {s13}
 8009732:	ed38 7a01 	vldmdb	r8!, {s14}
 8009736:	f10c 0c01 	add.w	ip, ip, #1
 800973a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800973e:	e7e7      	b.n	8009710 <__kernel_rem_pio2f+0x2d4>
 8009740:	3b01      	subs	r3, #1
 8009742:	e769      	b.n	8009618 <__kernel_rem_pio2f+0x1dc>
 8009744:	0800a9fc 	.word	0x0800a9fc
 8009748:	0800a9d0 	.word	0x0800a9d0
 800974c:	43800000 	.word	0x43800000
 8009750:	3b800000 	.word	0x3b800000
 8009754:	00000000 	.word	0x00000000
 8009758:	4260      	negs	r0, r4
 800975a:	eeb0 0a48 	vmov.f32	s0, s16
 800975e:	f000 fcbb 	bl	800a0d8 <scalbnf>
 8009762:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800974c <__kernel_rem_pio2f+0x310>
 8009766:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800976a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800976e:	db1a      	blt.n	80097a6 <__kernel_rem_pio2f+0x36a>
 8009770:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009750 <__kernel_rem_pio2f+0x314>
 8009774:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009778:	aa06      	add	r2, sp, #24
 800977a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800977e:	a906      	add	r1, sp, #24
 8009780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009784:	3408      	adds	r4, #8
 8009786:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800978a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800978e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009792:	ee10 3a10 	vmov	r3, s0
 8009796:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800979a:	1c6b      	adds	r3, r5, #1
 800979c:	ee17 2a90 	vmov	r2, s15
 80097a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80097a4:	e73f      	b.n	8009626 <__kernel_rem_pio2f+0x1ea>
 80097a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80097aa:	aa06      	add	r2, sp, #24
 80097ac:	ee10 3a10 	vmov	r3, s0
 80097b0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80097b4:	462b      	mov	r3, r5
 80097b6:	e736      	b.n	8009626 <__kernel_rem_pio2f+0x1ea>
 80097b8:	aa06      	add	r2, sp, #24
 80097ba:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80097be:	9202      	str	r2, [sp, #8]
 80097c0:	ee07 2a90 	vmov	s15, r2
 80097c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097c8:	3c01      	subs	r4, #1
 80097ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 80097ce:	ee20 0a07 	vmul.f32	s0, s0, s14
 80097d2:	ed65 7a01 	vstmdb	r5!, {s15}
 80097d6:	e734      	b.n	8009642 <__kernel_rem_pio2f+0x206>
 80097d8:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80097dc:	ecf7 6a01 	vldmia	r7!, {s13}
 80097e0:	ed9c 7a00 	vldr	s14, [ip]
 80097e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80097e8:	3401      	adds	r4, #1
 80097ea:	454c      	cmp	r4, r9
 80097ec:	dc01      	bgt.n	80097f2 <__kernel_rem_pio2f+0x3b6>
 80097ee:	42a5      	cmp	r5, r4
 80097f0:	daf2      	bge.n	80097d8 <__kernel_rem_pio2f+0x39c>
 80097f2:	aa56      	add	r2, sp, #344	; 0x158
 80097f4:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80097f8:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80097fc:	3501      	adds	r5, #1
 80097fe:	3804      	subs	r0, #4
 8009800:	e723      	b.n	800964a <__kernel_rem_pio2f+0x20e>
 8009802:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009804:	2a03      	cmp	r2, #3
 8009806:	d84d      	bhi.n	80098a4 <__kernel_rem_pio2f+0x468>
 8009808:	e8df f002 	tbb	[pc, r2]
 800980c:	021f1f3e 	.word	0x021f1f3e
 8009810:	aa56      	add	r2, sp, #344	; 0x158
 8009812:	4411      	add	r1, r2
 8009814:	399c      	subs	r1, #156	; 0x9c
 8009816:	4608      	mov	r0, r1
 8009818:	461c      	mov	r4, r3
 800981a:	2c00      	cmp	r4, #0
 800981c:	dc5f      	bgt.n	80098de <__kernel_rem_pio2f+0x4a2>
 800981e:	4608      	mov	r0, r1
 8009820:	461c      	mov	r4, r3
 8009822:	2c01      	cmp	r4, #1
 8009824:	dc6b      	bgt.n	80098fe <__kernel_rem_pio2f+0x4c2>
 8009826:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8009754 <__kernel_rem_pio2f+0x318>
 800982a:	2b01      	cmp	r3, #1
 800982c:	dc77      	bgt.n	800991e <__kernel_rem_pio2f+0x4e2>
 800982e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8009832:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8009836:	f1b8 0f00 	cmp.w	r8, #0
 800983a:	d176      	bne.n	800992a <__kernel_rem_pio2f+0x4ee>
 800983c:	edc6 6a00 	vstr	s13, [r6]
 8009840:	ed86 7a01 	vstr	s14, [r6, #4]
 8009844:	edc6 7a02 	vstr	s15, [r6, #8]
 8009848:	e02c      	b.n	80098a4 <__kernel_rem_pio2f+0x468>
 800984a:	aa56      	add	r2, sp, #344	; 0x158
 800984c:	4411      	add	r1, r2
 800984e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8009754 <__kernel_rem_pio2f+0x318>
 8009852:	399c      	subs	r1, #156	; 0x9c
 8009854:	4618      	mov	r0, r3
 8009856:	2800      	cmp	r0, #0
 8009858:	da32      	bge.n	80098c0 <__kernel_rem_pio2f+0x484>
 800985a:	f1b8 0f00 	cmp.w	r8, #0
 800985e:	d035      	beq.n	80098cc <__kernel_rem_pio2f+0x490>
 8009860:	eef1 7a47 	vneg.f32	s15, s14
 8009864:	edc6 7a00 	vstr	s15, [r6]
 8009868:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800986c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009870:	a82f      	add	r0, sp, #188	; 0xbc
 8009872:	2101      	movs	r1, #1
 8009874:	428b      	cmp	r3, r1
 8009876:	da2c      	bge.n	80098d2 <__kernel_rem_pio2f+0x496>
 8009878:	f1b8 0f00 	cmp.w	r8, #0
 800987c:	d001      	beq.n	8009882 <__kernel_rem_pio2f+0x446>
 800987e:	eef1 7a67 	vneg.f32	s15, s15
 8009882:	edc6 7a01 	vstr	s15, [r6, #4]
 8009886:	e00d      	b.n	80098a4 <__kernel_rem_pio2f+0x468>
 8009888:	aa56      	add	r2, sp, #344	; 0x158
 800988a:	4411      	add	r1, r2
 800988c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8009754 <__kernel_rem_pio2f+0x318>
 8009890:	399c      	subs	r1, #156	; 0x9c
 8009892:	2b00      	cmp	r3, #0
 8009894:	da0e      	bge.n	80098b4 <__kernel_rem_pio2f+0x478>
 8009896:	f1b8 0f00 	cmp.w	r8, #0
 800989a:	d001      	beq.n	80098a0 <__kernel_rem_pio2f+0x464>
 800989c:	eef1 7a67 	vneg.f32	s15, s15
 80098a0:	edc6 7a00 	vstr	s15, [r6]
 80098a4:	9b01      	ldr	r3, [sp, #4]
 80098a6:	f003 0007 	and.w	r0, r3, #7
 80098aa:	b057      	add	sp, #348	; 0x15c
 80098ac:	ecbd 8b04 	vpop	{d8-d9}
 80098b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b4:	ed31 7a01 	vldmdb	r1!, {s14}
 80098b8:	3b01      	subs	r3, #1
 80098ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098be:	e7e8      	b.n	8009892 <__kernel_rem_pio2f+0x456>
 80098c0:	ed71 7a01 	vldmdb	r1!, {s15}
 80098c4:	3801      	subs	r0, #1
 80098c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098ca:	e7c4      	b.n	8009856 <__kernel_rem_pio2f+0x41a>
 80098cc:	eef0 7a47 	vmov.f32	s15, s14
 80098d0:	e7c8      	b.n	8009864 <__kernel_rem_pio2f+0x428>
 80098d2:	ecb0 7a01 	vldmia	r0!, {s14}
 80098d6:	3101      	adds	r1, #1
 80098d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098dc:	e7ca      	b.n	8009874 <__kernel_rem_pio2f+0x438>
 80098de:	ed50 7a02 	vldr	s15, [r0, #-8]
 80098e2:	ed70 6a01 	vldmdb	r0!, {s13}
 80098e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80098ea:	3c01      	subs	r4, #1
 80098ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098f0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80098f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f8:	edc0 7a00 	vstr	s15, [r0]
 80098fc:	e78d      	b.n	800981a <__kernel_rem_pio2f+0x3de>
 80098fe:	ed50 7a02 	vldr	s15, [r0, #-8]
 8009902:	ed70 6a01 	vldmdb	r0!, {s13}
 8009906:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800990a:	3c01      	subs	r4, #1
 800990c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009910:	ed00 7a01 	vstr	s14, [r0, #-4]
 8009914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009918:	edc0 7a00 	vstr	s15, [r0]
 800991c:	e781      	b.n	8009822 <__kernel_rem_pio2f+0x3e6>
 800991e:	ed31 7a01 	vldmdb	r1!, {s14}
 8009922:	3b01      	subs	r3, #1
 8009924:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009928:	e77f      	b.n	800982a <__kernel_rem_pio2f+0x3ee>
 800992a:	eef1 6a66 	vneg.f32	s13, s13
 800992e:	eeb1 7a47 	vneg.f32	s14, s14
 8009932:	edc6 6a00 	vstr	s13, [r6]
 8009936:	ed86 7a01 	vstr	s14, [r6, #4]
 800993a:	eef1 7a67 	vneg.f32	s15, s15
 800993e:	e781      	b.n	8009844 <__kernel_rem_pio2f+0x408>

08009940 <__kernel_tanf>:
 8009940:	b508      	push	{r3, lr}
 8009942:	ee10 3a10 	vmov	r3, s0
 8009946:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800994a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800994e:	eef0 7a40 	vmov.f32	s15, s0
 8009952:	da17      	bge.n	8009984 <__kernel_tanf+0x44>
 8009954:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8009958:	ee17 1a10 	vmov	r1, s14
 800995c:	bb41      	cbnz	r1, 80099b0 <__kernel_tanf+0x70>
 800995e:	1c43      	adds	r3, r0, #1
 8009960:	4313      	orrs	r3, r2
 8009962:	d108      	bne.n	8009976 <__kernel_tanf+0x36>
 8009964:	f7fe fa18 	bl	8007d98 <fabsf>
 8009968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800996c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009970:	eeb0 0a67 	vmov.f32	s0, s15
 8009974:	bd08      	pop	{r3, pc}
 8009976:	2801      	cmp	r0, #1
 8009978:	d0fa      	beq.n	8009970 <__kernel_tanf+0x30>
 800997a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800997e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009982:	e7f5      	b.n	8009970 <__kernel_tanf+0x30>
 8009984:	494e      	ldr	r1, [pc, #312]	; (8009ac0 <__kernel_tanf+0x180>)
 8009986:	428a      	cmp	r2, r1
 8009988:	dd12      	ble.n	80099b0 <__kernel_tanf+0x70>
 800998a:	2b00      	cmp	r3, #0
 800998c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009ac4 <__kernel_tanf+0x184>
 8009990:	bfb8      	it	lt
 8009992:	eef1 7a40 	vneglt.f32	s15, s0
 8009996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800999a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8009ac8 <__kernel_tanf+0x188>
 800999e:	bfb8      	it	lt
 80099a0:	eef1 0a60 	vneglt.f32	s1, s1
 80099a4:	ee77 0a60 	vsub.f32	s1, s14, s1
 80099a8:	ee70 7aa7 	vadd.f32	s15, s1, s15
 80099ac:	eddf 0a47 	vldr	s1, [pc, #284]	; 8009acc <__kernel_tanf+0x18c>
 80099b0:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8009ad0 <__kernel_tanf+0x190>
 80099b4:	eddf 5a47 	vldr	s11, [pc, #284]	; 8009ad4 <__kernel_tanf+0x194>
 80099b8:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8009ad8 <__kernel_tanf+0x198>
 80099bc:	4940      	ldr	r1, [pc, #256]	; (8009ac0 <__kernel_tanf+0x180>)
 80099be:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80099c2:	428a      	cmp	r2, r1
 80099c4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80099c8:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80099cc:	eee7 5a06 	vfma.f32	s11, s14, s12
 80099d0:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8009adc <__kernel_tanf+0x19c>
 80099d4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80099d8:	eddf 5a41 	vldr	s11, [pc, #260]	; 8009ae0 <__kernel_tanf+0x1a0>
 80099dc:	eee6 5a07 	vfma.f32	s11, s12, s14
 80099e0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8009ae4 <__kernel_tanf+0x1a4>
 80099e4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80099e8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009ae8 <__kernel_tanf+0x1a8>
 80099ec:	eee6 5a07 	vfma.f32	s11, s12, s14
 80099f0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8009aec <__kernel_tanf+0x1ac>
 80099f4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80099f8:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009af0 <__kernel_tanf+0x1b0>
 80099fc:	eea6 5a07 	vfma.f32	s10, s12, s14
 8009a00:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8009af4 <__kernel_tanf+0x1b4>
 8009a04:	eea5 6a07 	vfma.f32	s12, s10, s14
 8009a08:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8009af8 <__kernel_tanf+0x1b8>
 8009a0c:	eea6 5a07 	vfma.f32	s10, s12, s14
 8009a10:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8009afc <__kernel_tanf+0x1bc>
 8009a14:	eea5 6a07 	vfma.f32	s12, s10, s14
 8009a18:	eeb0 7a46 	vmov.f32	s14, s12
 8009a1c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009a20:	eeb0 6a60 	vmov.f32	s12, s1
 8009a24:	eea7 6a24 	vfma.f32	s12, s14, s9
 8009a28:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8009b00 <__kernel_tanf+0x1c0>
 8009a2c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8009a30:	eee4 0a87 	vfma.f32	s1, s9, s14
 8009a34:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8009a38:	dd1d      	ble.n	8009a76 <__kernel_tanf+0x136>
 8009a3a:	ee07 0a10 	vmov	s14, r0
 8009a3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a42:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8009a46:	ee76 6a87 	vadd.f32	s13, s13, s14
 8009a4a:	179b      	asrs	r3, r3, #30
 8009a4c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8009a50:	f003 0302 	and.w	r3, r3, #2
 8009a54:	f1c3 0301 	rsb	r3, r3, #1
 8009a58:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009a5c:	ee76 0a60 	vsub.f32	s1, s12, s1
 8009a60:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009a64:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009a68:	ee07 3a90 	vmov	s15, r3
 8009a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a74:	e77c      	b.n	8009970 <__kernel_tanf+0x30>
 8009a76:	2801      	cmp	r0, #1
 8009a78:	d01f      	beq.n	8009aba <__kernel_tanf+0x17a>
 8009a7a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009a7e:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8009a82:	4b20      	ldr	r3, [pc, #128]	; (8009b04 <__kernel_tanf+0x1c4>)
 8009a84:	ee16 2a90 	vmov	r2, s13
 8009a88:	401a      	ands	r2, r3
 8009a8a:	ee06 2a10 	vmov	s12, r2
 8009a8e:	ee15 2a90 	vmov	r2, s11
 8009a92:	4013      	ands	r3, r2
 8009a94:	ee07 3a10 	vmov	s14, r3
 8009a98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a9c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009aa0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009aa4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009aa8:	eef0 7a66 	vmov.f32	s15, s13
 8009aac:	eee7 7a20 	vfma.f32	s15, s14, s1
 8009ab0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009ab4:	eef0 7a47 	vmov.f32	s15, s14
 8009ab8:	e75a      	b.n	8009970 <__kernel_tanf+0x30>
 8009aba:	eef0 7a66 	vmov.f32	s15, s13
 8009abe:	e757      	b.n	8009970 <__kernel_tanf+0x30>
 8009ac0:	3f2ca13f 	.word	0x3f2ca13f
 8009ac4:	3f490fda 	.word	0x3f490fda
 8009ac8:	33222168 	.word	0x33222168
 8009acc:	00000000 	.word	0x00000000
 8009ad0:	37d95384 	.word	0x37d95384
 8009ad4:	3895c07a 	.word	0x3895c07a
 8009ad8:	b79bae5f 	.word	0xb79bae5f
 8009adc:	398137b9 	.word	0x398137b9
 8009ae0:	3abede48 	.word	0x3abede48
 8009ae4:	3c11371f 	.word	0x3c11371f
 8009ae8:	3d5d0dd1 	.word	0x3d5d0dd1
 8009aec:	38a3f445 	.word	0x38a3f445
 8009af0:	3a1a26c8 	.word	0x3a1a26c8
 8009af4:	3b6b6916 	.word	0x3b6b6916
 8009af8:	3cb327a4 	.word	0x3cb327a4
 8009afc:	3e088889 	.word	0x3e088889
 8009b00:	3eaaaaab 	.word	0x3eaaaaab
 8009b04:	fffff000 	.word	0xfffff000

08009b08 <with_errnof>:
 8009b08:	b510      	push	{r4, lr}
 8009b0a:	ed2d 8b02 	vpush	{d8}
 8009b0e:	eeb0 8a40 	vmov.f32	s16, s0
 8009b12:	4604      	mov	r4, r0
 8009b14:	f7fe f890 	bl	8007c38 <__errno>
 8009b18:	eeb0 0a48 	vmov.f32	s0, s16
 8009b1c:	ecbd 8b02 	vpop	{d8}
 8009b20:	6004      	str	r4, [r0, #0]
 8009b22:	bd10      	pop	{r4, pc}

08009b24 <xflowf>:
 8009b24:	b130      	cbz	r0, 8009b34 <xflowf+0x10>
 8009b26:	eef1 7a40 	vneg.f32	s15, s0
 8009b2a:	2022      	movs	r0, #34	; 0x22
 8009b2c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009b30:	f7ff bfea 	b.w	8009b08 <with_errnof>
 8009b34:	eef0 7a40 	vmov.f32	s15, s0
 8009b38:	e7f7      	b.n	8009b2a <xflowf+0x6>
	...

08009b3c <__math_uflowf>:
 8009b3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009b44 <__math_uflowf+0x8>
 8009b40:	f7ff bff0 	b.w	8009b24 <xflowf>
 8009b44:	10000000 	.word	0x10000000

08009b48 <__math_may_uflowf>:
 8009b48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009b50 <__math_may_uflowf+0x8>
 8009b4c:	f7ff bfea 	b.w	8009b24 <xflowf>
 8009b50:	1a200000 	.word	0x1a200000

08009b54 <__math_oflowf>:
 8009b54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009b5c <__math_oflowf+0x8>
 8009b58:	f7ff bfe4 	b.w	8009b24 <xflowf>
 8009b5c:	70000000 	.word	0x70000000

08009b60 <__math_divzerof>:
 8009b60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009b64:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8009b6e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8009b7c <__math_divzerof+0x1c>
 8009b72:	2022      	movs	r0, #34	; 0x22
 8009b74:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009b78:	f7ff bfc6 	b.w	8009b08 <with_errnof>
 8009b7c:	00000000 	.word	0x00000000

08009b80 <__math_invalidf>:
 8009b80:	eef0 7a40 	vmov.f32	s15, s0
 8009b84:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009b88:	eef4 7a67 	vcmp.f32	s15, s15
 8009b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b90:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8009b94:	d602      	bvs.n	8009b9c <__math_invalidf+0x1c>
 8009b96:	2021      	movs	r0, #33	; 0x21
 8009b98:	f7ff bfb6 	b.w	8009b08 <with_errnof>
 8009b9c:	4770      	bx	lr

08009b9e <fabs>:
 8009b9e:	ec51 0b10 	vmov	r0, r1, d0
 8009ba2:	ee10 2a10 	vmov	r2, s0
 8009ba6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009baa:	ec43 2b10 	vmov	d0, r2, r3
 8009bae:	4770      	bx	lr

08009bb0 <finite>:
 8009bb0:	ee10 3a90 	vmov	r3, s1
 8009bb4:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009bb8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009bbc:	0fc0      	lsrs	r0, r0, #31
 8009bbe:	4770      	bx	lr

08009bc0 <matherr>:
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	4770      	bx	lr
 8009bc4:	0000      	movs	r0, r0
	...

08009bc8 <nan>:
 8009bc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009bd0 <nan+0x8>
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	00000000 	.word	0x00000000
 8009bd4:	7ff80000 	.word	0x7ff80000

08009bd8 <rint>:
 8009bd8:	b530      	push	{r4, r5, lr}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	ed8d 0b00 	vstr	d0, [sp]
 8009be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009be4:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8009be8:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 8009bec:	2813      	cmp	r0, #19
 8009bee:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8009bf2:	dc5a      	bgt.n	8009caa <rint+0xd2>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	da2f      	bge.n	8009c58 <rint+0x80>
 8009bf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009bfc:	4311      	orrs	r1, r2
 8009bfe:	d027      	beq.n	8009c50 <rint+0x78>
 8009c00:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8009c04:	4315      	orrs	r5, r2
 8009c06:	426a      	negs	r2, r5
 8009c08:	432a      	orrs	r2, r5
 8009c0a:	0b12      	lsrs	r2, r2, #12
 8009c0c:	0c5b      	lsrs	r3, r3, #17
 8009c0e:	045b      	lsls	r3, r3, #17
 8009c10:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8009c14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c18:	ea42 0103 	orr.w	r1, r2, r3
 8009c1c:	4b31      	ldr	r3, [pc, #196]	; (8009ce4 <rint+0x10c>)
 8009c1e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c22:	ed93 6b00 	vldr	d6, [r3]
 8009c26:	ec41 0b17 	vmov	d7, r0, r1
 8009c2a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009c2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009c3a:	ed8d 7b00 	vstr	d7, [sp]
 8009c3e:	9b01      	ldr	r3, [sp, #4]
 8009c40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c48:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8009c4c:	e9cd 0100 	strd	r0, r1, [sp]
 8009c50:	ed9d 0b00 	vldr	d0, [sp]
 8009c54:	b005      	add	sp, #20
 8009c56:	bd30      	pop	{r4, r5, pc}
 8009c58:	4923      	ldr	r1, [pc, #140]	; (8009ce8 <rint+0x110>)
 8009c5a:	4101      	asrs	r1, r0
 8009c5c:	ea03 0501 	and.w	r5, r3, r1
 8009c60:	4315      	orrs	r5, r2
 8009c62:	d0f5      	beq.n	8009c50 <rint+0x78>
 8009c64:	0849      	lsrs	r1, r1, #1
 8009c66:	ea03 0501 	and.w	r5, r3, r1
 8009c6a:	432a      	orrs	r2, r5
 8009c6c:	d00b      	beq.n	8009c86 <rint+0xae>
 8009c6e:	ea23 0101 	bic.w	r1, r3, r1
 8009c72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c76:	2813      	cmp	r0, #19
 8009c78:	fa43 f300 	asr.w	r3, r3, r0
 8009c7c:	bf0c      	ite	eq
 8009c7e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8009c82:	2200      	movne	r2, #0
 8009c84:	430b      	orrs	r3, r1
 8009c86:	4619      	mov	r1, r3
 8009c88:	4b16      	ldr	r3, [pc, #88]	; (8009ce4 <rint+0x10c>)
 8009c8a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009c8e:	ed94 6b00 	vldr	d6, [r4]
 8009c92:	4610      	mov	r0, r2
 8009c94:	ec41 0b17 	vmov	d7, r0, r1
 8009c98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009c9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ca0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ca4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009ca8:	e008      	b.n	8009cbc <rint+0xe4>
 8009caa:	2833      	cmp	r0, #51	; 0x33
 8009cac:	dd09      	ble.n	8009cc2 <rint+0xea>
 8009cae:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009cb2:	d1cd      	bne.n	8009c50 <rint+0x78>
 8009cb4:	ed9d 7b00 	vldr	d7, [sp]
 8009cb8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009cbc:	ed8d 7b00 	vstr	d7, [sp]
 8009cc0:	e7c6      	b.n	8009c50 <rint+0x78>
 8009cc2:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 8009cc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009cca:	40c1      	lsrs	r1, r0
 8009ccc:	420a      	tst	r2, r1
 8009cce:	d0bf      	beq.n	8009c50 <rint+0x78>
 8009cd0:	0849      	lsrs	r1, r1, #1
 8009cd2:	420a      	tst	r2, r1
 8009cd4:	bf1f      	itttt	ne
 8009cd6:	ea22 0101 	bicne.w	r1, r2, r1
 8009cda:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8009cde:	4102      	asrne	r2, r0
 8009ce0:	430a      	orrne	r2, r1
 8009ce2:	e7d0      	b.n	8009c86 <rint+0xae>
 8009ce4:	0800aa08 	.word	0x0800aa08
 8009ce8:	000fffff 	.word	0x000fffff
 8009cec:	00000000 	.word	0x00000000

08009cf0 <scalbn>:
 8009cf0:	b500      	push	{lr}
 8009cf2:	ed2d 8b02 	vpush	{d8}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	ed8d 0b00 	vstr	d0, [sp]
 8009cfc:	9b01      	ldr	r3, [sp, #4]
 8009cfe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009d02:	b9a2      	cbnz	r2, 8009d2e <scalbn+0x3e>
 8009d04:	9a00      	ldr	r2, [sp, #0]
 8009d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	d03a      	beq.n	8009d84 <scalbn+0x94>
 8009d0e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009dc8 <scalbn+0xd8>
 8009d12:	4b35      	ldr	r3, [pc, #212]	; (8009de8 <scalbn+0xf8>)
 8009d14:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009d18:	4298      	cmp	r0, r3
 8009d1a:	ed8d 7b00 	vstr	d7, [sp]
 8009d1e:	da11      	bge.n	8009d44 <scalbn+0x54>
 8009d20:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8009dd0 <scalbn+0xe0>
 8009d24:	ed9d 6b00 	vldr	d6, [sp]
 8009d28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d2c:	e007      	b.n	8009d3e <scalbn+0x4e>
 8009d2e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009d32:	428a      	cmp	r2, r1
 8009d34:	d10a      	bne.n	8009d4c <scalbn+0x5c>
 8009d36:	ed9d 7b00 	vldr	d7, [sp]
 8009d3a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009d3e:	ed8d 7b00 	vstr	d7, [sp]
 8009d42:	e01f      	b.n	8009d84 <scalbn+0x94>
 8009d44:	9b01      	ldr	r3, [sp, #4]
 8009d46:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009d4a:	3a36      	subs	r2, #54	; 0x36
 8009d4c:	4402      	add	r2, r0
 8009d4e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009d52:	428a      	cmp	r2, r1
 8009d54:	dd0a      	ble.n	8009d6c <scalbn+0x7c>
 8009d56:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8009dd8 <scalbn+0xe8>
 8009d5a:	eeb0 0b48 	vmov.f64	d0, d8
 8009d5e:	ed9d 1b00 	vldr	d1, [sp]
 8009d62:	f000 fa19 	bl	800a198 <copysign>
 8009d66:	ee20 7b08 	vmul.f64	d7, d0, d8
 8009d6a:	e7e8      	b.n	8009d3e <scalbn+0x4e>
 8009d6c:	2a00      	cmp	r2, #0
 8009d6e:	dd10      	ble.n	8009d92 <scalbn+0xa2>
 8009d70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d7c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009d80:	e9cd 0100 	strd	r0, r1, [sp]
 8009d84:	ed9d 0b00 	vldr	d0, [sp]
 8009d88:	b003      	add	sp, #12
 8009d8a:	ecbd 8b02 	vpop	{d8}
 8009d8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d92:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009d96:	da06      	bge.n	8009da6 <scalbn+0xb6>
 8009d98:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009d9c:	4298      	cmp	r0, r3
 8009d9e:	dcda      	bgt.n	8009d56 <scalbn+0x66>
 8009da0:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8009dd0 <scalbn+0xe0>
 8009da4:	e7d9      	b.n	8009d5a <scalbn+0x6a>
 8009da6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009daa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009dae:	3236      	adds	r2, #54	; 0x36
 8009db0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009db4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009db8:	ec41 0b17 	vmov	d7, r0, r1
 8009dbc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8009de0 <scalbn+0xf0>
 8009dc0:	e7b2      	b.n	8009d28 <scalbn+0x38>
 8009dc2:	bf00      	nop
 8009dc4:	f3af 8000 	nop.w
 8009dc8:	00000000 	.word	0x00000000
 8009dcc:	43500000 	.word	0x43500000
 8009dd0:	c2f8f359 	.word	0xc2f8f359
 8009dd4:	01a56e1f 	.word	0x01a56e1f
 8009dd8:	8800759c 	.word	0x8800759c
 8009ddc:	7e37e43c 	.word	0x7e37e43c
 8009de0:	00000000 	.word	0x00000000
 8009de4:	3c900000 	.word	0x3c900000
 8009de8:	ffff3cb0 	.word	0xffff3cb0

08009dec <expm1f>:
 8009dec:	ee10 2a10 	vmov	r2, s0
 8009df0:	4984      	ldr	r1, [pc, #528]	; (800a004 <expm1f+0x218>)
 8009df2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009df6:	428b      	cmp	r3, r1
 8009df8:	d923      	bls.n	8009e42 <expm1f+0x56>
 8009dfa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009dfe:	d902      	bls.n	8009e06 <expm1f+0x1a>
 8009e00:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009e04:	4770      	bx	lr
 8009e06:	d105      	bne.n	8009e14 <expm1f+0x28>
 8009e08:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8009e0c:	2a00      	cmp	r2, #0
 8009e0e:	fe20 0a27 	vselge.f32	s0, s0, s15
 8009e12:	4770      	bx	lr
 8009e14:	2a00      	cmp	r2, #0
 8009e16:	db08      	blt.n	8009e2a <expm1f+0x3e>
 8009e18:	4a7b      	ldr	r2, [pc, #492]	; (800a008 <expm1f+0x21c>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	f240 80ea 	bls.w	8009ff4 <expm1f+0x208>
 8009e20:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800a00c <expm1f+0x220>
 8009e24:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009e28:	4770      	bx	lr
 8009e2a:	eddf 7a79 	vldr	s15, [pc, #484]	; 800a010 <expm1f+0x224>
 8009e2e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e3a:	d554      	bpl.n	8009ee6 <expm1f+0xfa>
 8009e3c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8009e40:	4770      	bx	lr
 8009e42:	4974      	ldr	r1, [pc, #464]	; (800a014 <expm1f+0x228>)
 8009e44:	428b      	cmp	r3, r1
 8009e46:	d96c      	bls.n	8009f22 <expm1f+0x136>
 8009e48:	4973      	ldr	r1, [pc, #460]	; (800a018 <expm1f+0x22c>)
 8009e4a:	428b      	cmp	r3, r1
 8009e4c:	d84b      	bhi.n	8009ee6 <expm1f+0xfa>
 8009e4e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a01c <expm1f+0x230>
 8009e52:	2a00      	cmp	r2, #0
 8009e54:	bfa7      	ittee	ge
 8009e56:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8009e5a:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800a020 <expm1f+0x234>
 8009e5e:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800a024 <expm1f+0x238>
 8009e62:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8009e66:	bfac      	ite	ge
 8009e68:	2301      	movge	r3, #1
 8009e6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e6e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009e72:	ee37 7a40 	vsub.f32	s14, s14, s0
 8009e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e7a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8009e7e:	ee20 5a25 	vmul.f32	s10, s0, s11
 8009e82:	eddf 6a69 	vldr	s13, [pc, #420]	; 800a028 <expm1f+0x23c>
 8009e86:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800a02c <expm1f+0x240>
 8009e8a:	ee20 7a05 	vmul.f32	s14, s0, s10
 8009e8e:	eea7 6a26 	vfma.f32	s12, s14, s13
 8009e92:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a030 <expm1f+0x244>
 8009e96:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009e9a:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800a034 <expm1f+0x248>
 8009e9e:	eea6 6a87 	vfma.f32	s12, s13, s14
 8009ea2:	eddf 6a65 	vldr	s13, [pc, #404]	; 800a038 <expm1f+0x24c>
 8009ea6:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009eaa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009eae:	eef0 4a46 	vmov.f32	s9, s12
 8009eb2:	eee6 4a87 	vfma.f32	s9, s13, s14
 8009eb6:	eef0 6a64 	vmov.f32	s13, s9
 8009eba:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8009ebe:	eee5 4a66 	vfms.f32	s9, s10, s13
 8009ec2:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8009ec6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8009eca:	eee0 6a64 	vfms.f32	s13, s0, s9
 8009ece:	eef0 4a66 	vmov.f32	s9, s13
 8009ed2:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8009ed6:	ee66 6a87 	vmul.f32	s13, s13, s14
 8009eda:	bb83      	cbnz	r3, 8009f3e <expm1f+0x152>
 8009edc:	eef0 7a47 	vmov.f32	s15, s14
 8009ee0:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8009ee4:	e026      	b.n	8009f34 <expm1f+0x148>
 8009ee6:	eddf 7a55 	vldr	s15, [pc, #340]	; 800a03c <expm1f+0x250>
 8009eea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009eee:	ee20 7a27 	vmul.f32	s14, s0, s15
 8009ef2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8009ef6:	2a00      	cmp	r2, #0
 8009ef8:	fe66 7aa7 	vselge.f32	s15, s13, s15
 8009efc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f00:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a01c <expm1f+0x230>
 8009f04:	eddf 6a46 	vldr	s13, [pc, #280]	; 800a020 <expm1f+0x234>
 8009f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f0c:	ee17 3a90 	vmov	r3, s15
 8009f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f14:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009f18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009f1c:	eeb0 7a40 	vmov.f32	s14, s0
 8009f20:	e7a5      	b.n	8009e6e <expm1f+0x82>
 8009f22:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8009f26:	d208      	bcs.n	8009f3a <expm1f+0x14e>
 8009f28:	eddf 7a38 	vldr	s15, [pc, #224]	; 800a00c <expm1f+0x220>
 8009f2c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009f30:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8009f34:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009f38:	4770      	bx	lr
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	e79d      	b.n	8009e7a <expm1f+0x8e>
 8009f3e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8009f48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f4c:	d106      	bne.n	8009f5c <expm1f+0x170>
 8009f4e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009f52:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8009f56:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8009f5a:	4770      	bx	lr
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d118      	bne.n	8009f92 <expm1f+0x1a6>
 8009f60:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8009f64:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f6c:	bf41      	itttt	mi
 8009f6e:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8009f72:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8009f76:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8009f7a:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8009f7e:	bf5f      	itttt	pl
 8009f80:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8009f84:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8009f88:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8009f8c:	eeb0 0a46 	vmovpl.f32	s0, s12
 8009f90:	4770      	bx	lr
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	2a39      	cmp	r2, #57	; 0x39
 8009f96:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8009f9a:	d90b      	bls.n	8009fb4 <expm1f+0x1c8>
 8009f9c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009fa0:	ee36 0a40 	vsub.f32	s0, s12, s0
 8009fa4:	ee10 3a10 	vmov	r3, s0
 8009fa8:	440b      	add	r3, r1
 8009faa:	ee00 3a10 	vmov	s0, r3
 8009fae:	ee30 0a46 	vsub.f32	s0, s0, s12
 8009fb2:	4770      	bx	lr
 8009fb4:	2b16      	cmp	r3, #22
 8009fb6:	dc11      	bgt.n	8009fdc <expm1f+0x1f0>
 8009fb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009fbc:	fa42 f303 	asr.w	r3, r2, r3
 8009fc0:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8009fc4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009fc8:	ee07 3a90 	vmov	s15, r3
 8009fcc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009fd0:	ee10 3a10 	vmov	r3, s0
 8009fd4:	440b      	add	r3, r1
 8009fd6:	ee00 3a10 	vmov	s0, r3
 8009fda:	4770      	bx	lr
 8009fdc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8009fe0:	05db      	lsls	r3, r3, #23
 8009fe2:	ee07 3a10 	vmov	s14, r3
 8009fe6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009fee:	ee30 0a06 	vadd.f32	s0, s0, s12
 8009ff2:	e7ed      	b.n	8009fd0 <expm1f+0x1e4>
 8009ff4:	eddf 7a11 	vldr	s15, [pc, #68]	; 800a03c <expm1f+0x250>
 8009ff8:	ee20 7a27 	vmul.f32	s14, s0, s15
 8009ffc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a000:	e77c      	b.n	8009efc <expm1f+0x110>
 800a002:	bf00      	nop
 800a004:	4195b843 	.word	0x4195b843
 800a008:	42b17217 	.word	0x42b17217
 800a00c:	7149f2ca 	.word	0x7149f2ca
 800a010:	0da24260 	.word	0x0da24260
 800a014:	3eb17218 	.word	0x3eb17218
 800a018:	3f851591 	.word	0x3f851591
 800a01c:	3f317180 	.word	0x3f317180
 800a020:	3717f7d1 	.word	0x3717f7d1
 800a024:	b717f7d1 	.word	0xb717f7d1
 800a028:	b457edbb 	.word	0xb457edbb
 800a02c:	36867e54 	.word	0x36867e54
 800a030:	b8a670cd 	.word	0xb8a670cd
 800a034:	3ad00d01 	.word	0x3ad00d01
 800a038:	bd088889 	.word	0xbd088889
 800a03c:	3fb8aa3b 	.word	0x3fb8aa3b

0800a040 <finitef>:
 800a040:	ee10 3a10 	vmov	r3, s0
 800a044:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800a048:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a04c:	bfac      	ite	ge
 800a04e:	2000      	movge	r0, #0
 800a050:	2001      	movlt	r0, #1
 800a052:	4770      	bx	lr

0800a054 <floorf>:
 800a054:	ee10 3a10 	vmov	r3, s0
 800a058:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a05c:	0dca      	lsrs	r2, r1, #23
 800a05e:	3a7f      	subs	r2, #127	; 0x7f
 800a060:	2a16      	cmp	r2, #22
 800a062:	dc2a      	bgt.n	800a0ba <floorf+0x66>
 800a064:	2a00      	cmp	r2, #0
 800a066:	da11      	bge.n	800a08c <floorf+0x38>
 800a068:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a0cc <floorf+0x78>
 800a06c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a070:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a078:	dd05      	ble.n	800a086 <floorf+0x32>
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	da23      	bge.n	800a0c6 <floorf+0x72>
 800a07e:	4a14      	ldr	r2, [pc, #80]	; (800a0d0 <floorf+0x7c>)
 800a080:	2900      	cmp	r1, #0
 800a082:	bf18      	it	ne
 800a084:	4613      	movne	r3, r2
 800a086:	ee00 3a10 	vmov	s0, r3
 800a08a:	4770      	bx	lr
 800a08c:	4911      	ldr	r1, [pc, #68]	; (800a0d4 <floorf+0x80>)
 800a08e:	4111      	asrs	r1, r2
 800a090:	420b      	tst	r3, r1
 800a092:	d0fa      	beq.n	800a08a <floorf+0x36>
 800a094:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a0cc <floorf+0x78>
 800a098:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a09c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a4:	ddef      	ble.n	800a086 <floorf+0x32>
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	bfbe      	ittt	lt
 800a0aa:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a0ae:	fa40 f202 	asrlt.w	r2, r0, r2
 800a0b2:	189b      	addlt	r3, r3, r2
 800a0b4:	ea23 0301 	bic.w	r3, r3, r1
 800a0b8:	e7e5      	b.n	800a086 <floorf+0x32>
 800a0ba:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a0be:	d3e4      	bcc.n	800a08a <floorf+0x36>
 800a0c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a0c4:	4770      	bx	lr
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	e7dd      	b.n	800a086 <floorf+0x32>
 800a0ca:	bf00      	nop
 800a0cc:	7149f2ca 	.word	0x7149f2ca
 800a0d0:	bf800000 	.word	0xbf800000
 800a0d4:	007fffff 	.word	0x007fffff

0800a0d8 <scalbnf>:
 800a0d8:	b508      	push	{r3, lr}
 800a0da:	ee10 2a10 	vmov	r2, s0
 800a0de:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a0e2:	ed2d 8b02 	vpush	{d8}
 800a0e6:	eef0 0a40 	vmov.f32	s1, s0
 800a0ea:	d004      	beq.n	800a0f6 <scalbnf+0x1e>
 800a0ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a0f0:	d306      	bcc.n	800a100 <scalbnf+0x28>
 800a0f2:	ee70 0a00 	vadd.f32	s1, s0, s0
 800a0f6:	ecbd 8b02 	vpop	{d8}
 800a0fa:	eeb0 0a60 	vmov.f32	s0, s1
 800a0fe:	bd08      	pop	{r3, pc}
 800a100:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a104:	d21c      	bcs.n	800a140 <scalbnf+0x68>
 800a106:	4b1f      	ldr	r3, [pc, #124]	; (800a184 <scalbnf+0xac>)
 800a108:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a188 <scalbnf+0xb0>
 800a10c:	4298      	cmp	r0, r3
 800a10e:	ee60 0a27 	vmul.f32	s1, s0, s15
 800a112:	db10      	blt.n	800a136 <scalbnf+0x5e>
 800a114:	ee10 2a90 	vmov	r2, s1
 800a118:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800a11c:	3b19      	subs	r3, #25
 800a11e:	4403      	add	r3, r0
 800a120:	2bfe      	cmp	r3, #254	; 0xfe
 800a122:	dd0f      	ble.n	800a144 <scalbnf+0x6c>
 800a124:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800a18c <scalbnf+0xb4>
 800a128:	eeb0 0a48 	vmov.f32	s0, s16
 800a12c:	f000 f843 	bl	800a1b6 <copysignf>
 800a130:	ee60 0a08 	vmul.f32	s1, s0, s16
 800a134:	e7df      	b.n	800a0f6 <scalbnf+0x1e>
 800a136:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a190 <scalbnf+0xb8>
 800a13a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a13e:	e7da      	b.n	800a0f6 <scalbnf+0x1e>
 800a140:	0ddb      	lsrs	r3, r3, #23
 800a142:	e7ec      	b.n	800a11e <scalbnf+0x46>
 800a144:	2b00      	cmp	r3, #0
 800a146:	dd06      	ble.n	800a156 <scalbnf+0x7e>
 800a148:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a14c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a150:	ee00 3a90 	vmov	s1, r3
 800a154:	e7cf      	b.n	800a0f6 <scalbnf+0x1e>
 800a156:	f113 0f16 	cmn.w	r3, #22
 800a15a:	da06      	bge.n	800a16a <scalbnf+0x92>
 800a15c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a160:	4298      	cmp	r0, r3
 800a162:	dcdf      	bgt.n	800a124 <scalbnf+0x4c>
 800a164:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800a190 <scalbnf+0xb8>
 800a168:	e7de      	b.n	800a128 <scalbnf+0x50>
 800a16a:	3319      	adds	r3, #25
 800a16c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a170:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a174:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a194 <scalbnf+0xbc>
 800a178:	ee07 3a10 	vmov	s14, r3
 800a17c:	ee67 0a27 	vmul.f32	s1, s14, s15
 800a180:	e7b9      	b.n	800a0f6 <scalbnf+0x1e>
 800a182:	bf00      	nop
 800a184:	ffff3cb0 	.word	0xffff3cb0
 800a188:	4c000000 	.word	0x4c000000
 800a18c:	7149f2ca 	.word	0x7149f2ca
 800a190:	0da24260 	.word	0x0da24260
 800a194:	33000000 	.word	0x33000000

0800a198 <copysign>:
 800a198:	ec51 0b10 	vmov	r0, r1, d0
 800a19c:	ee11 0a90 	vmov	r0, s3
 800a1a0:	ee10 2a10 	vmov	r2, s0
 800a1a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a1a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a1ac:	ea41 0300 	orr.w	r3, r1, r0
 800a1b0:	ec43 2b10 	vmov	d0, r2, r3
 800a1b4:	4770      	bx	lr

0800a1b6 <copysignf>:
 800a1b6:	ee10 3a10 	vmov	r3, s0
 800a1ba:	ee10 2a90 	vmov	r2, s1
 800a1be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	ee00 3a10 	vmov	s0, r3
 800a1cc:	4770      	bx	lr
	...

0800a1d0 <_init>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	bf00      	nop
 800a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d6:	bc08      	pop	{r3}
 800a1d8:	469e      	mov	lr, r3
 800a1da:	4770      	bx	lr

0800a1dc <_fini>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	bf00      	nop
 800a1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e2:	bc08      	pop	{r3}
 800a1e4:	469e      	mov	lr, r3
 800a1e6:	4770      	bx	lr

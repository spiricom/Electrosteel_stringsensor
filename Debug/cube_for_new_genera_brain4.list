
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bac8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800bd60  0800bd60  0001bd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd8c  0800bd8c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd8c  0800bd8c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd8c  0800bd8c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd8c  0800bd8c  0001bd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd90  0800bd90  0001bd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800bd94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b28  20000010  0800bda4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000b38  0800bda4  00020b38  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036668  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005897  00000000  00000000  000566a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a48  00000000  00000000  0005bf40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001818  00000000  00000000  0005d988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003cf48  00000000  00000000  0005f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e9d5  00000000  00000000  0009c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00173ae9  00000000  00000000  000baabd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0022e5a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c7c  00000000  00000000  0022e624  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bd48 	.word	0x0800bd48

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	0800bd48 	.word	0x0800bd48

080002d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002de:	2003      	movs	r0, #3
 80002e0:	f001 f9ca 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80002e4:	f004 f9e0 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 80002e8:	4601      	mov	r1, r0
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <HAL_Init+0x68>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	f003 030f 	and.w	r3, r3, #15
 80002f4:	4a13      	ldr	r2, [pc, #76]	; (8000344 <HAL_Init+0x6c>)
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	f003 031f 	and.w	r3, r3, #31
 80002fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000300:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_Init+0x68>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 030f 	and.w	r3, r3, #15
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_Init+0x6c>)
 800030c:	5cd3      	ldrb	r3, [r2, r3]
 800030e:	f003 031f 	and.w	r3, r3, #31
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	fa22 f303 	lsr.w	r3, r2, r3
 8000318:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <HAL_Init+0x70>)
 800031a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800031c:	4a0b      	ldr	r2, [pc, #44]	; (800034c <HAL_Init+0x74>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f814 	bl	8000350 <HAL_InitTick>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800032e:	2301      	movs	r3, #1
 8000330:	e002      	b.n	8000338 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000332:	f00b fbaf 	bl	800ba94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000336:	2300      	movs	r3, #0
}
 8000338:	4618      	mov	r0, r3
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	58024400 	.word	0x58024400
 8000344:	0800bd7c 	.word	0x0800bd7c
 8000348:	2000000c 	.word	0x2000000c
 800034c:	20000008 	.word	0x20000008

08000350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <HAL_InitTick+0x60>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d101      	bne.n	8000364 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000360:	2301      	movs	r3, #1
 8000362:	e021      	b.n	80003a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <HAL_InitTick+0x64>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <HAL_InitTick+0x60>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	4619      	mov	r1, r3
 800036e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000372:	fbb3 f3f1 	udiv	r3, r3, r1
 8000376:	fbb2 f3f3 	udiv	r3, r2, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f001 f9af 	bl	80016de <HAL_SYSTICK_Config>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000386:	2301      	movs	r3, #1
 8000388:	e00e      	b.n	80003a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b0f      	cmp	r3, #15
 800038e:	d80a      	bhi.n	80003a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000390:	2200      	movs	r2, #0
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000398:	f001 f979 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800039c:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <HAL_InitTick+0x68>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003a2:	2300      	movs	r3, #0
 80003a4:	e000      	b.n	80003a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80003a6:	2301      	movs	r3, #1
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000004 	.word	0x20000004
 80003b4:	20000008 	.word	0x20000008
 80003b8:	20000000 	.word	0x20000000

080003bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <HAL_IncTick+0x20>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_IncTick+0x24>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4413      	add	r3, r2
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <HAL_IncTick+0x24>)
 80003ce:	6013      	str	r3, [r2, #0]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000004 	.word	0x20000004
 80003e0:	20000040 	.word	0x20000040

080003e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  return uwTick;
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <HAL_GetTick+0x14>)
 80003ea:	681b      	ldr	r3, [r3, #0]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	20000040 	.word	0x20000040

080003fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000404:	f7ff ffee 	bl	80003e4 <HAL_GetTick>
 8000408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000414:	d005      	beq.n	8000422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <HAL_Delay+0x40>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	461a      	mov	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4413      	add	r3, r2
 8000420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000422:	bf00      	nop
 8000424:	f7ff ffde 	bl	80003e4 <HAL_GetTick>
 8000428:	4602      	mov	r2, r0
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	429a      	cmp	r2, r3
 8000432:	d8f7      	bhi.n	8000424 <HAL_Delay+0x28>
  {
  }
}
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000004 	.word	0x20000004

08000440 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <HAL_GetREVID+0x14>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	0c1b      	lsrs	r3, r3, #16
}
 800044a:	4618      	mov	r0, r3
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	5c001000 	.word	0x5c001000

08000458 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <HAL_SetFMCMemorySwappingConfig+0x24>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8000468:	4904      	ldr	r1, [pc, #16]	; (800047c <HAL_SetFMCMemorySwappingConfig+0x24>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4313      	orrs	r3, r2
 800046e:	600b      	str	r3, [r1, #0]
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	52004000 	.word	0x52004000

08000480 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	431a      	orrs	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	609a      	str	r2, [r3, #8]
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b083      	sub	sp, #12
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
 80004ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	431a      	orrs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	609a      	str	r2, [r3, #8]
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80004dc:	4618      	mov	r0, r3
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80004e8:	b490      	push	{r4, r7}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
 80004f4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	3360      	adds	r3, #96	; 0x60
 80004fa:	461a      	mov	r2, r3
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	4413      	add	r3, r2
 8000502:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000504:	6823      	ldr	r3, [r4, #0]
 8000506:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	430b      	orrs	r3, r1
 8000514:	4313      	orrs	r3, r2
 8000516:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bc90      	pop	{r4, r7}
 8000520:	4770      	bx	lr

08000522 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000522:	b480      	push	{r7}
 8000524:	b085      	sub	sp, #20
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	f003 031f 	and.w	r3, r3, #31
 800053c:	6879      	ldr	r1, [r7, #4]
 800053e:	fa01 f303 	lsl.w	r3, r1, r3
 8000542:	431a      	orrs	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	611a      	str	r2, [r3, #16]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000554:	b490      	push	{r4, r7}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3360      	adds	r3, #96	; 0x60
 8000564:	461a      	mov	r2, r3
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4313      	orrs	r3, r2
 8000578:	6023      	str	r3, [r4, #0]
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bc90      	pop	{r4, r7}
 8000582:	4770      	bx	lr

08000584 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000584:	b490      	push	{r4, r7}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3330      	adds	r3, #48	; 0x30
 8000594:	461a      	mov	r2, r3
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	0a1b      	lsrs	r3, r3, #8
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	f003 030c 	and.w	r3, r3, #12
 80005a0:	4413      	add	r3, r2
 80005a2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80005a4:	6822      	ldr	r2, [r4, #0]
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	f003 031f 	and.w	r3, r3, #31
 80005ac:	211f      	movs	r1, #31
 80005ae:	fa01 f303 	lsl.w	r3, r1, r3
 80005b2:	43db      	mvns	r3, r3
 80005b4:	401a      	ands	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	0e9b      	lsrs	r3, r3, #26
 80005ba:	f003 011f 	and.w	r1, r3, #31
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	f003 031f 	and.w	r3, r3, #31
 80005c4:	fa01 f303 	lsl.w	r3, r1, r3
 80005c8:	4313      	orrs	r3, r2
 80005ca:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc90      	pop	{r4, r7}
 80005d4:	4770      	bx	lr

080005d6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80005d6:	b490      	push	{r4, r7}
 80005d8:	b084      	sub	sp, #16
 80005da:	af00      	add	r7, sp, #0
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3314      	adds	r3, #20
 80005e6:	461a      	mov	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	0e5b      	lsrs	r3, r3, #25
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	4413      	add	r3, r2
 80005f4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80005f6:	6822      	ldr	r2, [r4, #0]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	0d1b      	lsrs	r3, r3, #20
 80005fc:	f003 031f 	and.w	r3, r3, #31
 8000600:	2107      	movs	r1, #7
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	43db      	mvns	r3, r3
 8000608:	401a      	ands	r2, r3
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	0d1b      	lsrs	r3, r3, #20
 800060e:	f003 031f 	and.w	r3, r3, #31
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	fa01 f303 	lsl.w	r3, r1, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bc90      	pop	{r4, r7}
 8000624:	4770      	bx	lr
	...

08000628 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000640:	43db      	mvns	r3, r3
 8000642:	401a      	ands	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0318 	and.w	r3, r3, #24
 800064a:	4908      	ldr	r1, [pc, #32]	; (800066c <LL_ADC_SetChannelSingleDiff+0x44>)
 800064c:	40d9      	lsrs	r1, r3
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	400b      	ands	r3, r1
 8000652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000656:	431a      	orrs	r2, r3
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	000fffff 	.word	0x000fffff

08000670 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	689a      	ldr	r2, [r3, #8]
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <LL_ADC_DisableDeepPowerDown+0x20>)
 800067e:	4013      	ands	r3, r2
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	6093      	str	r3, [r2, #8]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	5fffffc0 	.word	0x5fffffc0

08000694 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006a8:	d101      	bne.n	80006ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80006aa:	2301      	movs	r3, #1
 80006ac:	e000      	b.n	80006b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80006ae:	2300      	movs	r3, #0
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	6fffffc0 	.word	0x6fffffc0

080006e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006f8:	d101      	bne.n	80006fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	2b01      	cmp	r3, #1
 800071e:	d101      	bne.n	8000724 <LL_ADC_IsEnabled+0x18>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <LL_ADC_IsEnabled+0x1a>
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	2b04      	cmp	r3, #4
 8000744:	d101      	bne.n	800074a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000746:	2301      	movs	r3, #1
 8000748:	e000      	b.n	800074c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	f003 0308 	and.w	r3, r3, #8
 8000768:	2b08      	cmp	r3, #8
 800076a:	d101      	bne.n	8000770 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800076c:	2301      	movs	r3, #1
 800076e:	e000      	b.n	8000772 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000788:	2300      	movs	r3, #0
 800078a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e18e      	b.n	8000ab8 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d109      	bne.n	80007bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f009 fe4f 	bl	800a44c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff67 	bl	8000694 <LL_ADC_IsDeepPowerDownEnabled>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d004      	beq.n	80007d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff4d 	bl	8000670 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff82 	bl	80006e4 <LL_ADC_IsInternalRegulatorEnabled>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d113      	bne.n	800080e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff66 	bl	80006bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80007f0:	4b9a      	ldr	r3, [pc, #616]	; (8000a5c <HAL_ADC_Init+0x2dc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	099b      	lsrs	r3, r3, #6
 80007f6:	4a9a      	ldr	r2, [pc, #616]	; (8000a60 <HAL_ADC_Init+0x2e0>)
 80007f8:	fba2 2303 	umull	r2, r3, r2, r3
 80007fc:	099b      	lsrs	r3, r3, #6
 80007fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000800:	e002      	b.n	8000808 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	3b01      	subs	r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f9      	bne.n	8000802 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff66 	bl	80006e4 <LL_ADC_IsInternalRegulatorEnabled>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d10d      	bne.n	800083a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000822:	f043 0210 	orr.w	r2, r3, #16
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082e:	f043 0201 	orr.w	r2, r3, #1
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff77 	bl	8000732 <LL_ADC_REG_IsConversionOngoing>
 8000844:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	2b00      	cmp	r3, #0
 8000850:	f040 8129 	bne.w	8000aa6 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	f040 8125 	bne.w	8000aa6 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000860:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000864:	f043 0202 	orr.w	r2, r3, #2
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff4b 	bl	800070c <LL_ADC_IsEnabled>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d136      	bne.n	80008ea <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a78      	ldr	r2, [pc, #480]	; (8000a64 <HAL_ADC_Init+0x2e4>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d004      	beq.n	8000890 <HAL_ADC_Init+0x110>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a77      	ldr	r2, [pc, #476]	; (8000a68 <HAL_ADC_Init+0x2e8>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d10e      	bne.n	80008ae <HAL_ADC_Init+0x12e>
 8000890:	4874      	ldr	r0, [pc, #464]	; (8000a64 <HAL_ADC_Init+0x2e4>)
 8000892:	f7ff ff3b 	bl	800070c <LL_ADC_IsEnabled>
 8000896:	4604      	mov	r4, r0
 8000898:	4873      	ldr	r0, [pc, #460]	; (8000a68 <HAL_ADC_Init+0x2e8>)
 800089a:	f7ff ff37 	bl	800070c <LL_ADC_IsEnabled>
 800089e:	4603      	mov	r3, r0
 80008a0:	4323      	orrs	r3, r4
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	bf0c      	ite	eq
 80008a6:	2301      	moveq	r3, #1
 80008a8:	2300      	movne	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	e008      	b.n	80008c0 <HAL_ADC_Init+0x140>
 80008ae:	486f      	ldr	r0, [pc, #444]	; (8000a6c <HAL_ADC_Init+0x2ec>)
 80008b0:	f7ff ff2c 	bl	800070c <LL_ADC_IsEnabled>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf0c      	ite	eq
 80008ba:	2301      	moveq	r3, #1
 80008bc:	2300      	movne	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d012      	beq.n	80008ea <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a66      	ldr	r2, [pc, #408]	; (8000a64 <HAL_ADC_Init+0x2e4>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d004      	beq.n	80008d8 <HAL_ADC_Init+0x158>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a65      	ldr	r2, [pc, #404]	; (8000a68 <HAL_ADC_Init+0x2e8>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d101      	bne.n	80008dc <HAL_ADC_Init+0x15c>
 80008d8:	4a65      	ldr	r2, [pc, #404]	; (8000a70 <HAL_ADC_Init+0x2f0>)
 80008da:	e000      	b.n	80008de <HAL_ADC_Init+0x15e>
 80008dc:	4a65      	ldr	r2, [pc, #404]	; (8000a74 <HAL_ADC_Init+0x2f4>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4610      	mov	r0, r2
 80008e6:	f7ff fdcb 	bl	8000480 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80008ea:	f7ff fda9 	bl	8000440 <HAL_GetREVID>
 80008ee:	4602      	mov	r2, r0
 80008f0:	f241 0303 	movw	r3, #4099	; 0x1003
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d914      	bls.n	8000922 <HAL_ADC_Init+0x1a2>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	2b10      	cmp	r3, #16
 80008fe:	d110      	bne.n	8000922 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7d5b      	ldrb	r3, [r3, #21]
 8000904:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800090a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000910:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	7f1b      	ldrb	r3, [r3, #28]
 8000916:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000918:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800091a:	f043 030c 	orr.w	r3, r3, #12
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	e00d      	b.n	800093e <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7d5b      	ldrb	r3, [r3, #21]
 8000926:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800092c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000932:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7f1b      	ldrb	r3, [r3, #28]
 8000938:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800093a:	4313      	orrs	r3, r2
 800093c:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	7f1b      	ldrb	r3, [r3, #28]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d106      	bne.n	8000954 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6a1b      	ldr	r3, [r3, #32]
 800094a:	3b01      	subs	r3, #1
 800094c:	045b      	lsls	r3, r3, #17
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4313      	orrs	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000958:	2b00      	cmp	r3, #0
 800095a:	d009      	beq.n	8000970 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000960:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000968:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	4313      	orrs	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	68da      	ldr	r2, [r3, #12]
 8000976:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <HAL_ADC_Init+0x2f8>)
 8000978:	4013      	ands	r3, r2
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	6812      	ldr	r2, [r2, #0]
 800097e:	69b9      	ldr	r1, [r7, #24]
 8000980:	430b      	orrs	r3, r1
 8000982:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fed2 	bl	8000732 <LL_ADC_REG_IsConversionOngoing>
 800098e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fedf 	bl	8000758 <LL_ADC_INJ_IsConversionOngoing>
 800099a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d14a      	bne.n	8000a38 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d147      	bne.n	8000a38 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7d1b      	ldrb	r3, [r3, #20]
 80009ac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80009b2:	4313      	orrs	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68da      	ldr	r2, [r3, #12]
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <HAL_ADC_Init+0x2fc>)
 80009be:	4013      	ands	r3, r2
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	6812      	ldr	r2, [r2, #0]
 80009c4:	69b9      	ldr	r1, [r7, #24]
 80009c6:	430b      	orrs	r3, r1
 80009c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d11b      	bne.n	8000a0c <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d8:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	691a      	ldr	r2, [r3, #16]
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <HAL_ADC_Init+0x300>)
 80009e2:	4013      	ands	r3, r2
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80009e8:	3a01      	subs	r2, #1
 80009ea:	0411      	lsls	r1, r2, #16
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80009f0:	4311      	orrs	r1, r2
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80009f6:	4311      	orrs	r1, r2
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80009fc:	430a      	orrs	r2, r1
 80009fe:	431a      	orrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f042 0201 	orr.w	r2, r2, #1
 8000a08:	611a      	str	r2, [r3, #16]
 8000a0a:	e007      	b.n	8000a1c <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	691a      	ldr	r2, [r3, #16]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 0201 	bic.w	r2, r2, #1
 8000a1a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 fb58 	bl	80010e8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d121      	bne.n	8000a84 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f023 010f 	bic.w	r1, r3, #15
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	1e5a      	subs	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	430a      	orrs	r2, r1
 8000a56:	631a      	str	r2, [r3, #48]	; 0x30
 8000a58:	e01c      	b.n	8000a94 <HAL_ADC_Init+0x314>
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	053e2d63 	.word	0x053e2d63
 8000a64:	40022000 	.word	0x40022000
 8000a68:	40022100 	.word	0x40022100
 8000a6c:	58026000 	.word	0x58026000
 8000a70:	40022300 	.word	0x40022300
 8000a74:	58026300 	.word	0x58026300
 8000a78:	fff0c003 	.word	0xfff0c003
 8000a7c:	ffffbffc 	.word	0xffffbffc
 8000a80:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f022 020f 	bic.w	r2, r2, #15
 8000a92:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a98:	f023 0303 	bic.w	r3, r3, #3
 8000a9c:	f043 0201 	orr.w	r2, r3, #1
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	655a      	str	r2, [r3, #84]	; 0x54
 8000aa4:	e007      	b.n	8000ab6 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aaa:	f043 0210 	orr.w	r2, r3, #16
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3724      	adds	r7, #36	; 0x24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd90      	pop	{r4, r7, pc}

08000ac0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b099      	sub	sp, #100	; 0x64
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	4a99      	ldr	r2, [pc, #612]	; (8000d40 <HAL_ADC_ConfigChannel+0x280>)
 8000ada:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d101      	bne.n	8000aea <HAL_ADC_ConfigChannel+0x2a>
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	e2e6      	b.n	80010b8 <HAL_ADC_ConfigChannel+0x5f8>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2201      	movs	r2, #1
 8000aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe1b 	bl	8000732 <LL_ADC_REG_IsConversionOngoing>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f040 82cb 	bne.w	800109a <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d108      	bne.n	8000b22 <HAL_ADC_ConfigChannel+0x62>
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	0e9b      	lsrs	r3, r3, #26
 8000b16:	f003 031f 	and.w	r3, r3, #31
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	e00f      	b.n	8000b42 <HAL_ADC_ConfigChannel+0x82>
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b2a:	fa93 f3a3 	rbit	r3, r3
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b32:	fab3 f383 	clz	r3, r3
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f003 031f 	and.w	r3, r3, #31
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	69d1      	ldr	r1, [r2, #28]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	6812      	ldr	r2, [r2, #0]
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	6859      	ldr	r1, [r3, #4]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	f7ff fd11 	bl	8000584 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fde3 	bl	8000732 <LL_ADC_REG_IsConversionOngoing>
 8000b6c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fdf0 	bl	8000758 <LL_ADC_INJ_IsConversionOngoing>
 8000b78:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f040 80b3 	bne.w	8000ce8 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f040 80af 	bne.w	8000ce8 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	461a      	mov	r2, r3
 8000b98:	f7ff fd1d 	bl	80005d6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000b9c:	4b69      	ldr	r3, [pc, #420]	; (8000d44 <HAL_ADC_ConfigChannel+0x284>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000ba4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ba8:	d10b      	bne.n	8000bc2 <HAL_ADC_ConfigChannel+0x102>
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	e01d      	b.n	8000bfe <HAL_ADC_ConfigChannel+0x13e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10b      	bne.n	8000be8 <HAL_ADC_ConfigChannel+0x128>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	695a      	ldr	r2, [r3, #20]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	f003 0307 	and.w	r3, r3, #7
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	e00a      	b.n	8000bfe <HAL_ADC_ConfigChannel+0x13e>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	695a      	ldr	r2, [r3, #20]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d027      	beq.n	8000c58 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6818      	ldr	r0, [r3, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	6919      	ldr	r1, [r3, #16]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c16:	f7ff fc67 	bl	80004e8 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	6919      	ldr	r1, [r3, #16]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	7e5b      	ldrb	r3, [r3, #25]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <HAL_ADC_ConfigChannel+0x170>
 8000c2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000c2e:	e000      	b.n	8000c32 <HAL_ADC_ConfigChannel+0x172>
 8000c30:	2300      	movs	r3, #0
 8000c32:	461a      	mov	r2, r3
 8000c34:	f7ff fc8e 	bl	8000554 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	6919      	ldr	r1, [r3, #16]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	7e1b      	ldrb	r3, [r3, #24]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d102      	bne.n	8000c4e <HAL_ADC_ConfigChannel+0x18e>
 8000c48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c4c:	e000      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x190>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	461a      	mov	r2, r3
 8000c52:	f7ff fc66 	bl	8000522 <LL_ADC_SetDataRightShift>
 8000c56:	e047      	b.n	8000ce8 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	069b      	lsls	r3, r3, #26
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d107      	bne.n	8000c7c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c7a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000c82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	069b      	lsls	r3, r3, #26
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d107      	bne.n	8000ca0 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c9e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ca6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	069b      	lsls	r3, r3, #26
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d107      	bne.n	8000cc4 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000cc2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	069b      	lsls	r3, r3, #26
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d107      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ce6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fd0d 	bl	800070c <LL_ADC_IsEnabled>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f040 81d9 	bne.w	80010ac <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	6819      	ldr	r1, [r3, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	461a      	mov	r2, r3
 8000d08:	f7ff fc8e 	bl	8000628 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <HAL_ADC_ConfigChannel+0x280>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	f040 8101 	bne.w	8000f1a <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10f      	bne.n	8000d48 <HAL_ADC_ConfigChannel+0x288>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	0e9b      	lsrs	r3, r3, #26
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f003 031f 	and.w	r3, r3, #31
 8000d34:	2b09      	cmp	r3, #9
 8000d36:	bf94      	ite	ls
 8000d38:	2301      	movls	r3, #1
 8000d3a:	2300      	movhi	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	e016      	b.n	8000d6e <HAL_ADC_ConfigChannel+0x2ae>
 8000d40:	47ff0000 	.word	0x47ff0000
 8000d44:	5c001000 	.word	0x5c001000
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d58:	fab3 f383 	clz	r3, r3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	3301      	adds	r3, #1
 8000d60:	f003 031f 	and.w	r3, r3, #31
 8000d64:	2b09      	cmp	r3, #9
 8000d66:	bf94      	ite	ls
 8000d68:	2301      	movls	r3, #1
 8000d6a:	2300      	movhi	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d064      	beq.n	8000e3c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d107      	bne.n	8000d8e <HAL_ADC_ConfigChannel+0x2ce>
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	0e9b      	lsrs	r3, r3, #26
 8000d84:	3301      	adds	r3, #1
 8000d86:	069b      	lsls	r3, r3, #26
 8000d88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000d8c:	e00e      	b.n	8000dac <HAL_ADC_ConfigChannel+0x2ec>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d96:	fa93 f3a3 	rbit	r3, r3
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9e:	fab3 f383 	clz	r3, r3
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	3301      	adds	r3, #1
 8000da6:	069b      	lsls	r3, r3, #26
 8000da8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d109      	bne.n	8000dcc <HAL_ADC_ConfigChannel+0x30c>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	0e9b      	lsrs	r3, r3, #26
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	e010      	b.n	8000dee <HAL_ADC_ConfigChannel+0x32e>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd4:	fa93 f3a3 	rbit	r3, r3
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ddc:	fab3 f383 	clz	r3, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	3301      	adds	r3, #1
 8000de4:	f003 031f 	and.w	r3, r3, #31
 8000de8:	2101      	movs	r1, #1
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	ea42 0103 	orr.w	r1, r2, r3
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10a      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x354>
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	0e9b      	lsrs	r3, r3, #26
 8000e04:	3301      	adds	r3, #1
 8000e06:	f003 021f 	and.w	r2, r3, #31
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	051b      	lsls	r3, r3, #20
 8000e12:	e011      	b.n	8000e38 <HAL_ADC_ConfigChannel+0x378>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1c:	fa93 f3a3 	rbit	r3, r3
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	fab3 f383 	clz	r3, r3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f003 021f 	and.w	r2, r3, #31
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e38:	430b      	orrs	r3, r1
 8000e3a:	e069      	b.n	8000f10 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d107      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x398>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	0e9b      	lsrs	r3, r3, #26
 8000e4e:	3301      	adds	r3, #1
 8000e50:	069b      	lsls	r3, r3, #26
 8000e52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e56:	e00e      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x3b6>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	fa93 f3a3 	rbit	r3, r3
 8000e64:	61fb      	str	r3, [r7, #28]
  return result;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fab3 f383 	clz	r3, r3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	3301      	adds	r3, #1
 8000e70:	069b      	lsls	r3, r3, #26
 8000e72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d109      	bne.n	8000e96 <HAL_ADC_ConfigChannel+0x3d6>
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	0e9b      	lsrs	r3, r3, #26
 8000e88:	3301      	adds	r3, #1
 8000e8a:	f003 031f 	and.w	r3, r3, #31
 8000e8e:	2101      	movs	r1, #1
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	e010      	b.n	8000eb8 <HAL_ADC_ConfigChannel+0x3f8>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa93 f3a3 	rbit	r3, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  return result;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fab3 f383 	clz	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	3301      	adds	r3, #1
 8000eae:	f003 031f 	and.w	r3, r3, #31
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	ea42 0103 	orr.w	r1, r2, r3
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10d      	bne.n	8000ee4 <HAL_ADC_ConfigChannel+0x424>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	0e9b      	lsrs	r3, r3, #26
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	3b1e      	subs	r3, #30
 8000edc:	051b      	lsls	r3, r3, #20
 8000ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	e014      	b.n	8000f0e <HAL_ADC_ConfigChannel+0x44e>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	fa93 f3a3 	rbit	r3, r3
 8000ef0:	60fb      	str	r3, [r7, #12]
  return result;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4613      	mov	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	3b1e      	subs	r3, #30
 8000f08:	051b      	lsls	r3, r3, #20
 8000f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f0e:	430b      	orrs	r3, r1
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	6892      	ldr	r2, [r2, #8]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f7ff fb5e 	bl	80005d6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f280 80c4 	bge.w	80010ac <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a65      	ldr	r2, [pc, #404]	; (80010c0 <HAL_ADC_ConfigChannel+0x600>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d004      	beq.n	8000f38 <HAL_ADC_ConfigChannel+0x478>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a64      	ldr	r2, [pc, #400]	; (80010c4 <HAL_ADC_ConfigChannel+0x604>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d101      	bne.n	8000f3c <HAL_ADC_ConfigChannel+0x47c>
 8000f38:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_ADC_ConfigChannel+0x608>)
 8000f3a:	e000      	b.n	8000f3e <HAL_ADC_ConfigChannel+0x47e>
 8000f3c:	4b63      	ldr	r3, [pc, #396]	; (80010cc <HAL_ADC_ConfigChannel+0x60c>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fac4 	bl	80004cc <LL_ADC_GetCommonPathInternalCh>
 8000f44:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a5d      	ldr	r2, [pc, #372]	; (80010c0 <HAL_ADC_ConfigChannel+0x600>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d004      	beq.n	8000f5a <HAL_ADC_ConfigChannel+0x49a>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a5b      	ldr	r2, [pc, #364]	; (80010c4 <HAL_ADC_ConfigChannel+0x604>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10e      	bne.n	8000f78 <HAL_ADC_ConfigChannel+0x4b8>
 8000f5a:	4859      	ldr	r0, [pc, #356]	; (80010c0 <HAL_ADC_ConfigChannel+0x600>)
 8000f5c:	f7ff fbd6 	bl	800070c <LL_ADC_IsEnabled>
 8000f60:	4604      	mov	r4, r0
 8000f62:	4858      	ldr	r0, [pc, #352]	; (80010c4 <HAL_ADC_ConfigChannel+0x604>)
 8000f64:	f7ff fbd2 	bl	800070c <LL_ADC_IsEnabled>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4323      	orrs	r3, r4
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf0c      	ite	eq
 8000f70:	2301      	moveq	r3, #1
 8000f72:	2300      	movne	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	e008      	b.n	8000f8a <HAL_ADC_ConfigChannel+0x4ca>
 8000f78:	4855      	ldr	r0, [pc, #340]	; (80010d0 <HAL_ADC_ConfigChannel+0x610>)
 8000f7a:	f7ff fbc7 	bl	800070c <LL_ADC_IsEnabled>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf0c      	ite	eq
 8000f84:	2301      	moveq	r3, #1
 8000f86:	2300      	movne	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d07b      	beq.n	8001086 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a50      	ldr	r2, [pc, #320]	; (80010d4 <HAL_ADC_ConfigChannel+0x614>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d12e      	bne.n	8000ff6 <HAL_ADC_ConfigChannel+0x536>
 8000f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d129      	bne.n	8000ff6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a4a      	ldr	r2, [pc, #296]	; (80010d0 <HAL_ADC_ConfigChannel+0x610>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d17f      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a43      	ldr	r2, [pc, #268]	; (80010c0 <HAL_ADC_ConfigChannel+0x600>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d004      	beq.n	8000fc0 <HAL_ADC_ConfigChannel+0x500>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a42      	ldr	r2, [pc, #264]	; (80010c4 <HAL_ADC_ConfigChannel+0x604>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d101      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x504>
 8000fc0:	4a41      	ldr	r2, [pc, #260]	; (80010c8 <HAL_ADC_ConfigChannel+0x608>)
 8000fc2:	e000      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x506>
 8000fc4:	4a41      	ldr	r2, [pc, #260]	; (80010cc <HAL_ADC_ConfigChannel+0x60c>)
 8000fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4610      	mov	r0, r2
 8000fd0:	f7ff fa69 	bl	80004a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000fd4:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <HAL_ADC_ConfigChannel+0x618>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	099b      	lsrs	r3, r3, #6
 8000fda:	4a40      	ldr	r2, [pc, #256]	; (80010dc <HAL_ADC_ConfigChannel+0x61c>)
 8000fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe0:	099b      	lsrs	r3, r3, #6
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8000fe6:	e002      	b.n	8000fee <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f9      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000ff4:	e05a      	b.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a39      	ldr	r2, [pc, #228]	; (80010e0 <HAL_ADC_ConfigChannel+0x620>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d11e      	bne.n	800103e <HAL_ADC_ConfigChannel+0x57e>
 8001000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d119      	bne.n	800103e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a30      	ldr	r2, [pc, #192]	; (80010d0 <HAL_ADC_ConfigChannel+0x610>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d14b      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a29      	ldr	r2, [pc, #164]	; (80010c0 <HAL_ADC_ConfigChannel+0x600>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d004      	beq.n	8001028 <HAL_ADC_ConfigChannel+0x568>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a28      	ldr	r2, [pc, #160]	; (80010c4 <HAL_ADC_ConfigChannel+0x604>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d101      	bne.n	800102c <HAL_ADC_ConfigChannel+0x56c>
 8001028:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <HAL_ADC_ConfigChannel+0x608>)
 800102a:	e000      	b.n	800102e <HAL_ADC_ConfigChannel+0x56e>
 800102c:	4a27      	ldr	r2, [pc, #156]	; (80010cc <HAL_ADC_ConfigChannel+0x60c>)
 800102e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001030:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001034:	4619      	mov	r1, r3
 8001036:	4610      	mov	r0, r2
 8001038:	f7ff fa35 	bl	80004a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800103c:	e036      	b.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a28      	ldr	r2, [pc, #160]	; (80010e4 <HAL_ADC_ConfigChannel+0x624>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d131      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
 8001048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800104a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d12c      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_ADC_ConfigChannel+0x610>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d127      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <HAL_ADC_ConfigChannel+0x600>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d004      	beq.n	8001070 <HAL_ADC_ConfigChannel+0x5b0>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <HAL_ADC_ConfigChannel+0x604>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d101      	bne.n	8001074 <HAL_ADC_ConfigChannel+0x5b4>
 8001070:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <HAL_ADC_ConfigChannel+0x608>)
 8001072:	e000      	b.n	8001076 <HAL_ADC_ConfigChannel+0x5b6>
 8001074:	4a15      	ldr	r2, [pc, #84]	; (80010cc <HAL_ADC_ConfigChannel+0x60c>)
 8001076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001078:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800107c:	4619      	mov	r1, r3
 800107e:	4610      	mov	r0, r2
 8001080:	f7ff fa11 	bl	80004a6 <LL_ADC_SetCommonPathInternalCh>
 8001084:	e012      	b.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108a:	f043 0220 	orr.w	r2, r3, #32
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001098:	e008      	b.n	80010ac <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109e:	f043 0220 	orr.w	r2, r3, #32
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80010b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3764      	adds	r7, #100	; 0x64
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	40022000 	.word	0x40022000
 80010c4:	40022100 	.word	0x40022100
 80010c8:	40022300 	.word	0x40022300
 80010cc:	58026300 	.word	0x58026300
 80010d0:	58026000 	.word	0x58026000
 80010d4:	cb840000 	.word	0xcb840000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	053e2d63 	.word	0x053e2d63
 80010e0:	c7520000 	.word	0xc7520000
 80010e4:	cfb80000 	.word	0xcfb80000

080010e8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a70      	ldr	r2, [pc, #448]	; (80012b8 <ADC_ConfigureBoostMode+0x1d0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d004      	beq.n	8001104 <ADC_ConfigureBoostMode+0x1c>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6f      	ldr	r2, [pc, #444]	; (80012bc <ADC_ConfigureBoostMode+0x1d4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d109      	bne.n	8001118 <ADC_ConfigureBoostMode+0x30>
 8001104:	4b6e      	ldr	r3, [pc, #440]	; (80012c0 <ADC_ConfigureBoostMode+0x1d8>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800110c:	2b00      	cmp	r3, #0
 800110e:	bf14      	ite	ne
 8001110:	2301      	movne	r3, #1
 8001112:	2300      	moveq	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	e008      	b.n	800112a <ADC_ConfigureBoostMode+0x42>
 8001118:	4b6a      	ldr	r3, [pc, #424]	; (80012c4 <ADC_ConfigureBoostMode+0x1dc>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001120:	2b00      	cmp	r3, #0
 8001122:	bf14      	ite	ne
 8001124:	2301      	movne	r3, #1
 8001126:	2300      	moveq	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d01a      	beq.n	8001164 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800112e:	f003 fc2d 	bl	800498c <HAL_RCC_GetHCLKFreq>
 8001132:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800113c:	d006      	beq.n	800114c <ADC_ConfigureBoostMode+0x64>
 800113e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001142:	d00b      	beq.n	800115c <ADC_ConfigureBoostMode+0x74>
 8001144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001148:	d000      	beq.n	800114c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800114a:	e05d      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	0c1b      	lsrs	r3, r3, #16
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	fbb2 f3f3 	udiv	r3, r2, r3
 8001158:	60fb      	str	r3, [r7, #12]
        break;
 800115a:	e055      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	60fb      	str	r3, [r7, #12]
        break;
 8001162:	e051      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001164:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001168:	f004 fb1e 	bl	80057a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800116c:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001176:	d02a      	beq.n	80011ce <ADC_ConfigureBoostMode+0xe6>
 8001178:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800117c:	d813      	bhi.n	80011a6 <ADC_ConfigureBoostMode+0xbe>
 800117e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001182:	d024      	beq.n	80011ce <ADC_ConfigureBoostMode+0xe6>
 8001184:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001188:	d806      	bhi.n	8001198 <ADC_ConfigureBoostMode+0xb0>
 800118a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800118e:	d01e      	beq.n	80011ce <ADC_ConfigureBoostMode+0xe6>
 8001190:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001194:	d01b      	beq.n	80011ce <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8001196:	e037      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800119c:	d017      	beq.n	80011ce <ADC_ConfigureBoostMode+0xe6>
 800119e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80011a2:	d014      	beq.n	80011ce <ADC_ConfigureBoostMode+0xe6>
        break;
 80011a4:	e030      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80011a6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80011aa:	d021      	beq.n	80011f0 <ADC_ConfigureBoostMode+0x108>
 80011ac:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80011b0:	d806      	bhi.n	80011c0 <ADC_ConfigureBoostMode+0xd8>
 80011b2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80011b6:	d013      	beq.n	80011e0 <ADC_ConfigureBoostMode+0xf8>
 80011b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80011bc:	d014      	beq.n	80011e8 <ADC_ConfigureBoostMode+0x100>
        break;
 80011be:	e023      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80011c0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80011c4:	d018      	beq.n	80011f8 <ADC_ConfigureBoostMode+0x110>
 80011c6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80011ca:	d019      	beq.n	8001200 <ADC_ConfigureBoostMode+0x118>
        break;
 80011cc:	e01c      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	0c9b      	lsrs	r3, r3, #18
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011dc:	60fb      	str	r3, [r7, #12]
        break;
 80011de:	e013      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	60fb      	str	r3, [r7, #12]
      break;
 80011e6:	e00f      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	60fb      	str	r3, [r7, #12]
        break;
 80011ee:	e00b      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	099b      	lsrs	r3, r3, #6
 80011f4:	60fb      	str	r3, [r7, #12]
        break;
 80011f6:	e007      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	09db      	lsrs	r3, r3, #7
 80011fc:	60fb      	str	r3, [r7, #12]
        break;
 80011fe:	e003      	b.n	8001208 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	0a1b      	lsrs	r3, r3, #8
 8001204:	60fb      	str	r3, [r7, #12]
        break;
 8001206:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001208:	f7ff f91a 	bl	8000440 <HAL_GetREVID>
 800120c:	4602      	mov	r2, r0
 800120e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001212:	429a      	cmp	r2, r3
 8001214:	d815      	bhi.n	8001242 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <ADC_ConfigureBoostMode+0x1e0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d908      	bls.n	8001230 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800122c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800122e:	e03e      	b.n	80012ae <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800123e:	609a      	str	r2, [r3, #8]
}
 8001240:	e035      	b.n	80012ae <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	085b      	lsrs	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4a20      	ldr	r2, [pc, #128]	; (80012cc <ADC_ConfigureBoostMode+0x1e4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d808      	bhi.n	8001262 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800125e:	609a      	str	r2, [r3, #8]
}
 8001260:	e025      	b.n	80012ae <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <ADC_ConfigureBoostMode+0x1e8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d80a      	bhi.n	8001280 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800127c:	609a      	str	r2, [r3, #8]
}
 800127e:	e016      	b.n	80012ae <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <ADC_ConfigureBoostMode+0x1ec>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d80a      	bhi.n	800129e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800129a:	609a      	str	r2, [r3, #8]
}
 800129c:	e007      	b.n	80012ae <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80012ac:	609a      	str	r2, [r3, #8]
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40022000 	.word	0x40022000
 80012bc:	40022100 	.word	0x40022100
 80012c0:	40022300 	.word	0x40022300
 80012c4:	58026300 	.word	0x58026300
 80012c8:	01312d00 	.word	0x01312d00
 80012cc:	005f5e10 	.word	0x005f5e10
 80012d0:	00bebc20 	.word	0x00bebc20
 80012d4:	017d7840 	.word	0x017d7840

080012d8 <LL_ADC_IsEnabled>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <LL_ADC_IsEnabled+0x18>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <LL_ADC_IsEnabled+0x1a>
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_REG_IsConversionOngoing>:
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	2b04      	cmp	r3, #4
 8001310:	d101      	bne.n	8001316 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b09f      	sub	sp, #124	; 0x7c
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800133e:	2302      	movs	r3, #2
 8001340:	e0ba      	b.n	80014b8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a5c      	ldr	r2, [pc, #368]	; (80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d102      	bne.n	800135a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001354:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	e001      	b.n	800135e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10b      	bne.n	800137c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001368:	f043 0220 	orr.w	r2, r3, #32
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e09d      	b.n	80014b8 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ffbd 	bl	80012fe <LL_ADC_REG_IsConversionOngoing>
 8001384:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ffb7 	bl	80012fe <LL_ADC_REG_IsConversionOngoing>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d17f      	bne.n	8001496 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001398:	2b00      	cmp	r3, #0
 800139a:	d17c      	bne.n	8001496 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a47      	ldr	r2, [pc, #284]	; (80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d004      	beq.n	80013b0 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a46      	ldr	r2, [pc, #280]	; (80014c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80013b2:	e000      	b.n	80013b6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80013b4:	4b45      	ldr	r3, [pc, #276]	; (80014cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80013b6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d039      	beq.n	8001434 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80013c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	431a      	orrs	r2, r3
 80013ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013d0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a3a      	ldr	r2, [pc, #232]	; (80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d004      	beq.n	80013e6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a38      	ldr	r2, [pc, #224]	; (80014c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d10e      	bne.n	8001404 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80013e6:	4836      	ldr	r0, [pc, #216]	; (80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80013e8:	f7ff ff76 	bl	80012d8 <LL_ADC_IsEnabled>
 80013ec:	4604      	mov	r4, r0
 80013ee:	4835      	ldr	r0, [pc, #212]	; (80014c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80013f0:	f7ff ff72 	bl	80012d8 <LL_ADC_IsEnabled>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4323      	orrs	r3, r4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf0c      	ite	eq
 80013fc:	2301      	moveq	r3, #1
 80013fe:	2300      	movne	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	e008      	b.n	8001416 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8001404:	4832      	ldr	r0, [pc, #200]	; (80014d0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001406:	f7ff ff67 	bl	80012d8 <LL_ADC_IsEnabled>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d047      	beq.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800141a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001420:	4013      	ands	r3, r2
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	6811      	ldr	r1, [r2, #0]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6892      	ldr	r2, [r2, #8]
 800142a:	430a      	orrs	r2, r1
 800142c:	431a      	orrs	r2, r3
 800142e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001430:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001432:	e03a      	b.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800143c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800143e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d004      	beq.n	8001454 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d10e      	bne.n	8001472 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8001454:	481a      	ldr	r0, [pc, #104]	; (80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001456:	f7ff ff3f 	bl	80012d8 <LL_ADC_IsEnabled>
 800145a:	4604      	mov	r4, r0
 800145c:	4819      	ldr	r0, [pc, #100]	; (80014c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800145e:	f7ff ff3b 	bl	80012d8 <LL_ADC_IsEnabled>
 8001462:	4603      	mov	r3, r0
 8001464:	4323      	orrs	r3, r4
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf0c      	ite	eq
 800146a:	2301      	moveq	r3, #1
 800146c:	2300      	movne	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	e008      	b.n	8001484 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8001472:	4817      	ldr	r0, [pc, #92]	; (80014d0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001474:	f7ff ff30 	bl	80012d8 <LL_ADC_IsEnabled>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf0c      	ite	eq
 800147e:	2301      	moveq	r3, #1
 8001480:	2300      	movne	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d010      	beq.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800148e:	4013      	ands	r3, r2
 8001490:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001492:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001494:	e009      	b.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	f043 0220 	orr.w	r2, r3, #32
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80014a8:	e000      	b.n	80014ac <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80014aa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80014b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	377c      	adds	r7, #124	; 0x7c
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	40022000 	.word	0x40022000
 80014c4:	40022100 	.word	0x40022100
 80014c8:	40022300 	.word	0x40022300
 80014cc:	58026300 	.word	0x58026300
 80014d0:	58026000 	.word	0x58026000
 80014d4:	fffff0e0 	.word	0xfffff0e0

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	4313      	orrs	r3, r2
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	05fa0000 	.word	0x05fa0000

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	; (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff29 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff40 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff90 	bl	80015cc <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5f 	bl	8001578 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff33 	bl	800153c <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa4 	bl	8001634 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7fe fe70 	bl	80003e4 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e316      	b.n	8001d3e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a66      	ldr	r2, [pc, #408]	; (80018b0 <HAL_DMA_Init+0x1b8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d04a      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a65      	ldr	r2, [pc, #404]	; (80018b4 <HAL_DMA_Init+0x1bc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d045      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a63      	ldr	r2, [pc, #396]	; (80018b8 <HAL_DMA_Init+0x1c0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d040      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a62      	ldr	r2, [pc, #392]	; (80018bc <HAL_DMA_Init+0x1c4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d03b      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a60      	ldr	r2, [pc, #384]	; (80018c0 <HAL_DMA_Init+0x1c8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d036      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a5f      	ldr	r2, [pc, #380]	; (80018c4 <HAL_DMA_Init+0x1cc>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d031      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a5d      	ldr	r2, [pc, #372]	; (80018c8 <HAL_DMA_Init+0x1d0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d02c      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a5c      	ldr	r2, [pc, #368]	; (80018cc <HAL_DMA_Init+0x1d4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d027      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a5a      	ldr	r2, [pc, #360]	; (80018d0 <HAL_DMA_Init+0x1d8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d022      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a59      	ldr	r2, [pc, #356]	; (80018d4 <HAL_DMA_Init+0x1dc>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d01d      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a57      	ldr	r2, [pc, #348]	; (80018d8 <HAL_DMA_Init+0x1e0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d018      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a56      	ldr	r2, [pc, #344]	; (80018dc <HAL_DMA_Init+0x1e4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d013      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a54      	ldr	r2, [pc, #336]	; (80018e0 <HAL_DMA_Init+0x1e8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00e      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a53      	ldr	r2, [pc, #332]	; (80018e4 <HAL_DMA_Init+0x1ec>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d009      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a51      	ldr	r2, [pc, #324]	; (80018e8 <HAL_DMA_Init+0x1f0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d004      	beq.n	80017b0 <HAL_DMA_Init+0xb8>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a50      	ldr	r2, [pc, #320]	; (80018ec <HAL_DMA_Init+0x1f4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d101      	bne.n	80017b4 <HAL_DMA_Init+0xbc>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_DMA_Init+0xbe>
 80017b4:	2300      	movs	r3, #0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 813b 	beq.w	8001a32 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2202      	movs	r2, #2
 80017c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a37      	ldr	r2, [pc, #220]	; (80018b0 <HAL_DMA_Init+0x1b8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d04a      	beq.n	800186c <HAL_DMA_Init+0x174>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a36      	ldr	r2, [pc, #216]	; (80018b4 <HAL_DMA_Init+0x1bc>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d045      	beq.n	800186c <HAL_DMA_Init+0x174>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a34      	ldr	r2, [pc, #208]	; (80018b8 <HAL_DMA_Init+0x1c0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d040      	beq.n	800186c <HAL_DMA_Init+0x174>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a33      	ldr	r2, [pc, #204]	; (80018bc <HAL_DMA_Init+0x1c4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d03b      	beq.n	800186c <HAL_DMA_Init+0x174>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a31      	ldr	r2, [pc, #196]	; (80018c0 <HAL_DMA_Init+0x1c8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d036      	beq.n	800186c <HAL_DMA_Init+0x174>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a30      	ldr	r2, [pc, #192]	; (80018c4 <HAL_DMA_Init+0x1cc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d031      	beq.n	800186c <HAL_DMA_Init+0x174>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a2e      	ldr	r2, [pc, #184]	; (80018c8 <HAL_DMA_Init+0x1d0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d02c      	beq.n	800186c <HAL_DMA_Init+0x174>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a2d      	ldr	r2, [pc, #180]	; (80018cc <HAL_DMA_Init+0x1d4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d027      	beq.n	800186c <HAL_DMA_Init+0x174>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a2b      	ldr	r2, [pc, #172]	; (80018d0 <HAL_DMA_Init+0x1d8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d022      	beq.n	800186c <HAL_DMA_Init+0x174>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a2a      	ldr	r2, [pc, #168]	; (80018d4 <HAL_DMA_Init+0x1dc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d01d      	beq.n	800186c <HAL_DMA_Init+0x174>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a28      	ldr	r2, [pc, #160]	; (80018d8 <HAL_DMA_Init+0x1e0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d018      	beq.n	800186c <HAL_DMA_Init+0x174>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a27      	ldr	r2, [pc, #156]	; (80018dc <HAL_DMA_Init+0x1e4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d013      	beq.n	800186c <HAL_DMA_Init+0x174>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a25      	ldr	r2, [pc, #148]	; (80018e0 <HAL_DMA_Init+0x1e8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00e      	beq.n	800186c <HAL_DMA_Init+0x174>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <HAL_DMA_Init+0x1ec>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d009      	beq.n	800186c <HAL_DMA_Init+0x174>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a22      	ldr	r2, [pc, #136]	; (80018e8 <HAL_DMA_Init+0x1f0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d004      	beq.n	800186c <HAL_DMA_Init+0x174>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a21      	ldr	r2, [pc, #132]	; (80018ec <HAL_DMA_Init+0x1f4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d108      	bne.n	800187e <HAL_DMA_Init+0x186>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e007      	b.n	800188e <HAL_DMA_Init+0x196>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0201 	bic.w	r2, r2, #1
 800188c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800188e:	e02f      	b.n	80018f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001890:	f7fe fda8 	bl	80003e4 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b05      	cmp	r3, #5
 800189c:	d928      	bls.n	80018f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2220      	movs	r2, #32
 80018a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2203      	movs	r2, #3
 80018a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e246      	b.n	8001d3e <HAL_DMA_Init+0x646>
 80018b0:	40020010 	.word	0x40020010
 80018b4:	40020028 	.word	0x40020028
 80018b8:	40020040 	.word	0x40020040
 80018bc:	40020058 	.word	0x40020058
 80018c0:	40020070 	.word	0x40020070
 80018c4:	40020088 	.word	0x40020088
 80018c8:	400200a0 	.word	0x400200a0
 80018cc:	400200b8 	.word	0x400200b8
 80018d0:	40020410 	.word	0x40020410
 80018d4:	40020428 	.word	0x40020428
 80018d8:	40020440 	.word	0x40020440
 80018dc:	40020458 	.word	0x40020458
 80018e0:	40020470 	.word	0x40020470
 80018e4:	40020488 	.word	0x40020488
 80018e8:	400204a0 	.word	0x400204a0
 80018ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1c8      	bne.n	8001890 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4b83      	ldr	r3, [pc, #524]	; (8001b18 <HAL_DMA_Init+0x420>)
 800190a:	4013      	ands	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001916:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001922:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4313      	orrs	r3, r2
 800193a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	2b04      	cmp	r3, #4
 8001942:	d107      	bne.n	8001954 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	4313      	orrs	r3, r2
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4313      	orrs	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001954:	4b71      	ldr	r3, [pc, #452]	; (8001b1c <HAL_DMA_Init+0x424>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b71      	ldr	r3, [pc, #452]	; (8001b20 <HAL_DMA_Init+0x428>)
 800195a:	4013      	ands	r3, r2
 800195c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001960:	d328      	bcc.n	80019b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b28      	cmp	r3, #40	; 0x28
 8001968:	d903      	bls.n	8001972 <HAL_DMA_Init+0x27a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b2e      	cmp	r3, #46	; 0x2e
 8001970:	d917      	bls.n	80019a2 <HAL_DMA_Init+0x2aa>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b3e      	cmp	r3, #62	; 0x3e
 8001978:	d903      	bls.n	8001982 <HAL_DMA_Init+0x28a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b42      	cmp	r3, #66	; 0x42
 8001980:	d90f      	bls.n	80019a2 <HAL_DMA_Init+0x2aa>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b46      	cmp	r3, #70	; 0x46
 8001988:	d903      	bls.n	8001992 <HAL_DMA_Init+0x29a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b48      	cmp	r3, #72	; 0x48
 8001990:	d907      	bls.n	80019a2 <HAL_DMA_Init+0x2aa>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b4e      	cmp	r3, #78	; 0x4e
 8001998:	d905      	bls.n	80019a6 <HAL_DMA_Init+0x2ae>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b52      	cmp	r3, #82	; 0x52
 80019a0:	d801      	bhi.n	80019a6 <HAL_DMA_Init+0x2ae>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_DMA_Init+0x2b0>
 80019a6:	2300      	movs	r3, #0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f023 0307 	bic.w	r3, r3, #7
 80019ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d117      	bne.n	8001a0e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00e      	beq.n	8001a0e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f001 fbfd 	bl	80031f0 <DMA_CheckFifoParam>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2240      	movs	r2, #64	; 0x40
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e197      	b.n	8001d3e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f001 fb38 	bl	800308c <DMA_CalcBaseAndBitshift>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	223f      	movs	r2, #63	; 0x3f
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	e0cd      	b.n	8001bce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a3b      	ldr	r2, [pc, #236]	; (8001b24 <HAL_DMA_Init+0x42c>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d022      	beq.n	8001a82 <HAL_DMA_Init+0x38a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a39      	ldr	r2, [pc, #228]	; (8001b28 <HAL_DMA_Init+0x430>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01d      	beq.n	8001a82 <HAL_DMA_Init+0x38a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a38      	ldr	r2, [pc, #224]	; (8001b2c <HAL_DMA_Init+0x434>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d018      	beq.n	8001a82 <HAL_DMA_Init+0x38a>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a36      	ldr	r2, [pc, #216]	; (8001b30 <HAL_DMA_Init+0x438>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_DMA_Init+0x38a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a35      	ldr	r2, [pc, #212]	; (8001b34 <HAL_DMA_Init+0x43c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d00e      	beq.n	8001a82 <HAL_DMA_Init+0x38a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a33      	ldr	r2, [pc, #204]	; (8001b38 <HAL_DMA_Init+0x440>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d009      	beq.n	8001a82 <HAL_DMA_Init+0x38a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a32      	ldr	r2, [pc, #200]	; (8001b3c <HAL_DMA_Init+0x444>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d004      	beq.n	8001a82 <HAL_DMA_Init+0x38a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a30      	ldr	r2, [pc, #192]	; (8001b40 <HAL_DMA_Init+0x448>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_DMA_Init+0x38e>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_DMA_Init+0x390>
 8001a86:	2300      	movs	r3, #0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 8097 	beq.w	8001bbc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <HAL_DMA_Init+0x42c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d021      	beq.n	8001adc <HAL_DMA_Init+0x3e4>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <HAL_DMA_Init+0x430>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d01c      	beq.n	8001adc <HAL_DMA_Init+0x3e4>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <HAL_DMA_Init+0x434>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d017      	beq.n	8001adc <HAL_DMA_Init+0x3e4>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <HAL_DMA_Init+0x438>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d012      	beq.n	8001adc <HAL_DMA_Init+0x3e4>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_DMA_Init+0x43c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00d      	beq.n	8001adc <HAL_DMA_Init+0x3e4>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <HAL_DMA_Init+0x440>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d008      	beq.n	8001adc <HAL_DMA_Init+0x3e4>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <HAL_DMA_Init+0x444>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d003      	beq.n	8001adc <HAL_DMA_Init+0x3e4>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_DMA_Init+0x448>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2202      	movs	r2, #2
 8001aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_DMA_Init+0x44c>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b40      	cmp	r3, #64	; 0x40
 8001b04:	d020      	beq.n	8001b48 <HAL_DMA_Init+0x450>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b80      	cmp	r3, #128	; 0x80
 8001b0c:	d102      	bne.n	8001b14 <HAL_DMA_Init+0x41c>
 8001b0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b12:	e01a      	b.n	8001b4a <HAL_DMA_Init+0x452>
 8001b14:	2300      	movs	r3, #0
 8001b16:	e018      	b.n	8001b4a <HAL_DMA_Init+0x452>
 8001b18:	fe10803f 	.word	0xfe10803f
 8001b1c:	5c001000 	.word	0x5c001000
 8001b20:	ffff0000 	.word	0xffff0000
 8001b24:	58025408 	.word	0x58025408
 8001b28:	5802541c 	.word	0x5802541c
 8001b2c:	58025430 	.word	0x58025430
 8001b30:	58025444 	.word	0x58025444
 8001b34:	58025458 	.word	0x58025458
 8001b38:	5802546c 	.word	0x5802546c
 8001b3c:	58025480 	.word	0x58025480
 8001b40:	58025494 	.word	0x58025494
 8001b44:	fffe000f 	.word	0xfffe000f
 8001b48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68d2      	ldr	r2, [r2, #12]
 8001b4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <HAL_DMA_Init+0x650>)
 8001b90:	4413      	add	r3, r2
 8001b92:	4a6e      	ldr	r2, [pc, #440]	; (8001d4c <HAL_DMA_Init+0x654>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	009a      	lsls	r2, r3, #2
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f001 fa73 	bl	800308c <DMA_CalcBaseAndBitshift>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	e008      	b.n	8001bce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2240      	movs	r2, #64	; 0x40
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0b7      	b.n	8001d3e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a5f      	ldr	r2, [pc, #380]	; (8001d50 <HAL_DMA_Init+0x658>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d072      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a5d      	ldr	r2, [pc, #372]	; (8001d54 <HAL_DMA_Init+0x65c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d06d      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a5c      	ldr	r2, [pc, #368]	; (8001d58 <HAL_DMA_Init+0x660>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d068      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a5a      	ldr	r2, [pc, #360]	; (8001d5c <HAL_DMA_Init+0x664>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d063      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a59      	ldr	r2, [pc, #356]	; (8001d60 <HAL_DMA_Init+0x668>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d05e      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a57      	ldr	r2, [pc, #348]	; (8001d64 <HAL_DMA_Init+0x66c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d059      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a56      	ldr	r2, [pc, #344]	; (8001d68 <HAL_DMA_Init+0x670>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d054      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a54      	ldr	r2, [pc, #336]	; (8001d6c <HAL_DMA_Init+0x674>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d04f      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a53      	ldr	r2, [pc, #332]	; (8001d70 <HAL_DMA_Init+0x678>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04a      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a51      	ldr	r2, [pc, #324]	; (8001d74 <HAL_DMA_Init+0x67c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d045      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a50      	ldr	r2, [pc, #320]	; (8001d78 <HAL_DMA_Init+0x680>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d040      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a4e      	ldr	r2, [pc, #312]	; (8001d7c <HAL_DMA_Init+0x684>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d03b      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a4d      	ldr	r2, [pc, #308]	; (8001d80 <HAL_DMA_Init+0x688>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d036      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a4b      	ldr	r2, [pc, #300]	; (8001d84 <HAL_DMA_Init+0x68c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d031      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a4a      	ldr	r2, [pc, #296]	; (8001d88 <HAL_DMA_Init+0x690>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d02c      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a48      	ldr	r2, [pc, #288]	; (8001d8c <HAL_DMA_Init+0x694>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d027      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a47      	ldr	r2, [pc, #284]	; (8001d90 <HAL_DMA_Init+0x698>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d022      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a45      	ldr	r2, [pc, #276]	; (8001d94 <HAL_DMA_Init+0x69c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01d      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a44      	ldr	r2, [pc, #272]	; (8001d98 <HAL_DMA_Init+0x6a0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d018      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a42      	ldr	r2, [pc, #264]	; (8001d9c <HAL_DMA_Init+0x6a4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d013      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a41      	ldr	r2, [pc, #260]	; (8001da0 <HAL_DMA_Init+0x6a8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00e      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a3f      	ldr	r2, [pc, #252]	; (8001da4 <HAL_DMA_Init+0x6ac>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d009      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a3e      	ldr	r2, [pc, #248]	; (8001da8 <HAL_DMA_Init+0x6b0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d004      	beq.n	8001cbe <HAL_DMA_Init+0x5c6>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a3c      	ldr	r2, [pc, #240]	; (8001dac <HAL_DMA_Init+0x6b4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d101      	bne.n	8001cc2 <HAL_DMA_Init+0x5ca>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_DMA_Init+0x5cc>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d032      	beq.n	8001d2e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f001 fb0d 	bl	80032e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b80      	cmp	r3, #128	; 0x80
 8001cd4:	d102      	bne.n	8001cdc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001cf0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d010      	beq.n	8001d1c <HAL_DMA_Init+0x624>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d80c      	bhi.n	8001d1c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f001 fb8a 	bl	800341c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	e008      	b.n	8001d2e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	a7fdabf8 	.word	0xa7fdabf8
 8001d4c:	cccccccd 	.word	0xcccccccd
 8001d50:	40020010 	.word	0x40020010
 8001d54:	40020028 	.word	0x40020028
 8001d58:	40020040 	.word	0x40020040
 8001d5c:	40020058 	.word	0x40020058
 8001d60:	40020070 	.word	0x40020070
 8001d64:	40020088 	.word	0x40020088
 8001d68:	400200a0 	.word	0x400200a0
 8001d6c:	400200b8 	.word	0x400200b8
 8001d70:	40020410 	.word	0x40020410
 8001d74:	40020428 	.word	0x40020428
 8001d78:	40020440 	.word	0x40020440
 8001d7c:	40020458 	.word	0x40020458
 8001d80:	40020470 	.word	0x40020470
 8001d84:	40020488 	.word	0x40020488
 8001d88:	400204a0 	.word	0x400204a0
 8001d8c:	400204b8 	.word	0x400204b8
 8001d90:	58025408 	.word	0x58025408
 8001d94:	5802541c 	.word	0x5802541c
 8001d98:	58025430 	.word	0x58025430
 8001d9c:	58025444 	.word	0x58025444
 8001da0:	58025458 	.word	0x58025458
 8001da4:	5802546c 	.word	0x5802546c
 8001da8:	58025480 	.word	0x58025480
 8001dac:	58025494 	.word	0x58025494

08001db0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e205      	b.n	80021ce <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2280      	movs	r2, #128	; 0x80
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e1fa      	b.n	80021ce <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a8c      	ldr	r2, [pc, #560]	; (8002010 <HAL_DMA_Abort_IT+0x260>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d04a      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a8b      	ldr	r2, [pc, #556]	; (8002014 <HAL_DMA_Abort_IT+0x264>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d045      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a89      	ldr	r2, [pc, #548]	; (8002018 <HAL_DMA_Abort_IT+0x268>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d040      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a88      	ldr	r2, [pc, #544]	; (800201c <HAL_DMA_Abort_IT+0x26c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d03b      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a86      	ldr	r2, [pc, #536]	; (8002020 <HAL_DMA_Abort_IT+0x270>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d036      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a85      	ldr	r2, [pc, #532]	; (8002024 <HAL_DMA_Abort_IT+0x274>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d031      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a83      	ldr	r2, [pc, #524]	; (8002028 <HAL_DMA_Abort_IT+0x278>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d02c      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a82      	ldr	r2, [pc, #520]	; (800202c <HAL_DMA_Abort_IT+0x27c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d027      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a80      	ldr	r2, [pc, #512]	; (8002030 <HAL_DMA_Abort_IT+0x280>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d022      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a7f      	ldr	r2, [pc, #508]	; (8002034 <HAL_DMA_Abort_IT+0x284>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d01d      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a7d      	ldr	r2, [pc, #500]	; (8002038 <HAL_DMA_Abort_IT+0x288>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d018      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7c      	ldr	r2, [pc, #496]	; (800203c <HAL_DMA_Abort_IT+0x28c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d013      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a7a      	ldr	r2, [pc, #488]	; (8002040 <HAL_DMA_Abort_IT+0x290>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00e      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a79      	ldr	r2, [pc, #484]	; (8002044 <HAL_DMA_Abort_IT+0x294>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a77      	ldr	r2, [pc, #476]	; (8002048 <HAL_DMA_Abort_IT+0x298>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d004      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a76      	ldr	r2, [pc, #472]	; (800204c <HAL_DMA_Abort_IT+0x29c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d101      	bne.n	8001e7c <HAL_DMA_Abort_IT+0xcc>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_DMA_Abort_IT+0xce>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d065      	beq.n	8001f4e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2204      	movs	r2, #4
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a60      	ldr	r2, [pc, #384]	; (8002010 <HAL_DMA_Abort_IT+0x260>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d04a      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a5e      	ldr	r2, [pc, #376]	; (8002014 <HAL_DMA_Abort_IT+0x264>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d045      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a5d      	ldr	r2, [pc, #372]	; (8002018 <HAL_DMA_Abort_IT+0x268>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d040      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a5b      	ldr	r2, [pc, #364]	; (800201c <HAL_DMA_Abort_IT+0x26c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d03b      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a5a      	ldr	r2, [pc, #360]	; (8002020 <HAL_DMA_Abort_IT+0x270>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d036      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a58      	ldr	r2, [pc, #352]	; (8002024 <HAL_DMA_Abort_IT+0x274>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d031      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a57      	ldr	r2, [pc, #348]	; (8002028 <HAL_DMA_Abort_IT+0x278>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d02c      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a55      	ldr	r2, [pc, #340]	; (800202c <HAL_DMA_Abort_IT+0x27c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d027      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a54      	ldr	r2, [pc, #336]	; (8002030 <HAL_DMA_Abort_IT+0x280>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d022      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_DMA_Abort_IT+0x284>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01d      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a51      	ldr	r2, [pc, #324]	; (8002038 <HAL_DMA_Abort_IT+0x288>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d018      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a4f      	ldr	r2, [pc, #316]	; (800203c <HAL_DMA_Abort_IT+0x28c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <HAL_DMA_Abort_IT+0x290>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00e      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_DMA_Abort_IT+0x294>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d009      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <HAL_DMA_Abort_IT+0x298>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d004      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a49      	ldr	r2, [pc, #292]	; (800204c <HAL_DMA_Abort_IT+0x29c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d108      	bne.n	8001f3c <HAL_DMA_Abort_IT+0x18c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	e147      	b.n	80021cc <HAL_DMA_Abort_IT+0x41c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e13e      	b.n	80021cc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 020e 	bic.w	r2, r2, #14
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_DMA_Abort_IT+0x260>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d04a      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a29      	ldr	r2, [pc, #164]	; (8002014 <HAL_DMA_Abort_IT+0x264>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d045      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a28      	ldr	r2, [pc, #160]	; (8002018 <HAL_DMA_Abort_IT+0x268>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d040      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a26      	ldr	r2, [pc, #152]	; (800201c <HAL_DMA_Abort_IT+0x26c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d03b      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a25      	ldr	r2, [pc, #148]	; (8002020 <HAL_DMA_Abort_IT+0x270>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d036      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a23      	ldr	r2, [pc, #140]	; (8002024 <HAL_DMA_Abort_IT+0x274>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d031      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a22      	ldr	r2, [pc, #136]	; (8002028 <HAL_DMA_Abort_IT+0x278>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d02c      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a20      	ldr	r2, [pc, #128]	; (800202c <HAL_DMA_Abort_IT+0x27c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d027      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_DMA_Abort_IT+0x280>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d022      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_DMA_Abort_IT+0x284>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d01d      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_DMA_Abort_IT+0x288>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d018      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	; (800203c <HAL_DMA_Abort_IT+0x28c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a19      	ldr	r2, [pc, #100]	; (8002040 <HAL_DMA_Abort_IT+0x290>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00e      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_DMA_Abort_IT+0x294>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d009      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a16      	ldr	r2, [pc, #88]	; (8002048 <HAL_DMA_Abort_IT+0x298>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d004      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a14      	ldr	r2, [pc, #80]	; (800204c <HAL_DMA_Abort_IT+0x29c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d128      	bne.n	8002050 <HAL_DMA_Abort_IT+0x2a0>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e027      	b.n	8002060 <HAL_DMA_Abort_IT+0x2b0>
 8002010:	40020010 	.word	0x40020010
 8002014:	40020028 	.word	0x40020028
 8002018:	40020040 	.word	0x40020040
 800201c:	40020058 	.word	0x40020058
 8002020:	40020070 	.word	0x40020070
 8002024:	40020088 	.word	0x40020088
 8002028:	400200a0 	.word	0x400200a0
 800202c:	400200b8 	.word	0x400200b8
 8002030:	40020410 	.word	0x40020410
 8002034:	40020428 	.word	0x40020428
 8002038:	40020440 	.word	0x40020440
 800203c:	40020458 	.word	0x40020458
 8002040:	40020470 	.word	0x40020470
 8002044:	40020488 	.word	0x40020488
 8002048:	400204a0 	.word	0x400204a0
 800204c:	400204b8 	.word	0x400204b8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a5c      	ldr	r2, [pc, #368]	; (80021d8 <HAL_DMA_Abort_IT+0x428>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d072      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a5b      	ldr	r2, [pc, #364]	; (80021dc <HAL_DMA_Abort_IT+0x42c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d06d      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a59      	ldr	r2, [pc, #356]	; (80021e0 <HAL_DMA_Abort_IT+0x430>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d068      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_DMA_Abort_IT+0x434>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d063      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a56      	ldr	r2, [pc, #344]	; (80021e8 <HAL_DMA_Abort_IT+0x438>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d05e      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a55      	ldr	r2, [pc, #340]	; (80021ec <HAL_DMA_Abort_IT+0x43c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d059      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a53      	ldr	r2, [pc, #332]	; (80021f0 <HAL_DMA_Abort_IT+0x440>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d054      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_DMA_Abort_IT+0x444>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d04f      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a50      	ldr	r2, [pc, #320]	; (80021f8 <HAL_DMA_Abort_IT+0x448>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d04a      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a4f      	ldr	r2, [pc, #316]	; (80021fc <HAL_DMA_Abort_IT+0x44c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d045      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4d      	ldr	r2, [pc, #308]	; (8002200 <HAL_DMA_Abort_IT+0x450>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d040      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a4c      	ldr	r2, [pc, #304]	; (8002204 <HAL_DMA_Abort_IT+0x454>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d03b      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a4a      	ldr	r2, [pc, #296]	; (8002208 <HAL_DMA_Abort_IT+0x458>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d036      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a49      	ldr	r2, [pc, #292]	; (800220c <HAL_DMA_Abort_IT+0x45c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d031      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a47      	ldr	r2, [pc, #284]	; (8002210 <HAL_DMA_Abort_IT+0x460>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02c      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a46      	ldr	r2, [pc, #280]	; (8002214 <HAL_DMA_Abort_IT+0x464>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d027      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a44      	ldr	r2, [pc, #272]	; (8002218 <HAL_DMA_Abort_IT+0x468>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d022      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a43      	ldr	r2, [pc, #268]	; (800221c <HAL_DMA_Abort_IT+0x46c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d01d      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a41      	ldr	r2, [pc, #260]	; (8002220 <HAL_DMA_Abort_IT+0x470>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d018      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_DMA_Abort_IT+0x474>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d013      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a3e      	ldr	r2, [pc, #248]	; (8002228 <HAL_DMA_Abort_IT+0x478>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00e      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a3d      	ldr	r2, [pc, #244]	; (800222c <HAL_DMA_Abort_IT+0x47c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d009      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a3b      	ldr	r2, [pc, #236]	; (8002230 <HAL_DMA_Abort_IT+0x480>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a3a      	ldr	r2, [pc, #232]	; (8002234 <HAL_DMA_Abort_IT+0x484>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d101      	bne.n	8002154 <HAL_DMA_Abort_IT+0x3a4>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_DMA_Abort_IT+0x3a6>
 8002154:	2300      	movs	r3, #0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d028      	beq.n	80021ac <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002168:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	2201      	movs	r2, #1
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002188:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40020010 	.word	0x40020010
 80021dc:	40020028 	.word	0x40020028
 80021e0:	40020040 	.word	0x40020040
 80021e4:	40020058 	.word	0x40020058
 80021e8:	40020070 	.word	0x40020070
 80021ec:	40020088 	.word	0x40020088
 80021f0:	400200a0 	.word	0x400200a0
 80021f4:	400200b8 	.word	0x400200b8
 80021f8:	40020410 	.word	0x40020410
 80021fc:	40020428 	.word	0x40020428
 8002200:	40020440 	.word	0x40020440
 8002204:	40020458 	.word	0x40020458
 8002208:	40020470 	.word	0x40020470
 800220c:	40020488 	.word	0x40020488
 8002210:	400204a0 	.word	0x400204a0
 8002214:	400204b8 	.word	0x400204b8
 8002218:	58025408 	.word	0x58025408
 800221c:	5802541c 	.word	0x5802541c
 8002220:	58025430 	.word	0x58025430
 8002224:	58025444 	.word	0x58025444
 8002228:	58025458 	.word	0x58025458
 800222c:	5802546c 	.word	0x5802546c
 8002230:	58025480 	.word	0x58025480
 8002234:	58025494 	.word	0x58025494

08002238 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002244:	4b67      	ldr	r3, [pc, #412]	; (80023e4 <HAL_DMA_IRQHandler+0x1ac>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a67      	ldr	r2, [pc, #412]	; (80023e8 <HAL_DMA_IRQHandler+0x1b0>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0a9b      	lsrs	r3, r3, #10
 8002250:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a5f      	ldr	r2, [pc, #380]	; (80023ec <HAL_DMA_IRQHandler+0x1b4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d04a      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <HAL_DMA_IRQHandler+0x1b8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d045      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a5c      	ldr	r2, [pc, #368]	; (80023f4 <HAL_DMA_IRQHandler+0x1bc>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d040      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a5a      	ldr	r2, [pc, #360]	; (80023f8 <HAL_DMA_IRQHandler+0x1c0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d03b      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a59      	ldr	r2, [pc, #356]	; (80023fc <HAL_DMA_IRQHandler+0x1c4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d036      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a57      	ldr	r2, [pc, #348]	; (8002400 <HAL_DMA_IRQHandler+0x1c8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d031      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a56      	ldr	r2, [pc, #344]	; (8002404 <HAL_DMA_IRQHandler+0x1cc>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d02c      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a54      	ldr	r2, [pc, #336]	; (8002408 <HAL_DMA_IRQHandler+0x1d0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d027      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a53      	ldr	r2, [pc, #332]	; (800240c <HAL_DMA_IRQHandler+0x1d4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d022      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a51      	ldr	r2, [pc, #324]	; (8002410 <HAL_DMA_IRQHandler+0x1d8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01d      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a50      	ldr	r2, [pc, #320]	; (8002414 <HAL_DMA_IRQHandler+0x1dc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d018      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a4e      	ldr	r2, [pc, #312]	; (8002418 <HAL_DMA_IRQHandler+0x1e0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a4d      	ldr	r2, [pc, #308]	; (800241c <HAL_DMA_IRQHandler+0x1e4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00e      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a4b      	ldr	r2, [pc, #300]	; (8002420 <HAL_DMA_IRQHandler+0x1e8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d009      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a4a      	ldr	r2, [pc, #296]	; (8002424 <HAL_DMA_IRQHandler+0x1ec>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d004      	beq.n	800230a <HAL_DMA_IRQHandler+0xd2>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a48      	ldr	r2, [pc, #288]	; (8002428 <HAL_DMA_IRQHandler+0x1f0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d101      	bne.n	800230e <HAL_DMA_IRQHandler+0xd6>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_DMA_IRQHandler+0xd8>
 800230e:	2300      	movs	r3, #0
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 842b 	beq.w	8002b6c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2208      	movs	r2, #8
 8002320:	409a      	lsls	r2, r3
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80a2 	beq.w	8002470 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a2e      	ldr	r2, [pc, #184]	; (80023ec <HAL_DMA_IRQHandler+0x1b4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d04a      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a2d      	ldr	r2, [pc, #180]	; (80023f0 <HAL_DMA_IRQHandler+0x1b8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d045      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a2b      	ldr	r2, [pc, #172]	; (80023f4 <HAL_DMA_IRQHandler+0x1bc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d040      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a2a      	ldr	r2, [pc, #168]	; (80023f8 <HAL_DMA_IRQHandler+0x1c0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d03b      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a28      	ldr	r2, [pc, #160]	; (80023fc <HAL_DMA_IRQHandler+0x1c4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d036      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a27      	ldr	r2, [pc, #156]	; (8002400 <HAL_DMA_IRQHandler+0x1c8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d031      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a25      	ldr	r2, [pc, #148]	; (8002404 <HAL_DMA_IRQHandler+0x1cc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d02c      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a24      	ldr	r2, [pc, #144]	; (8002408 <HAL_DMA_IRQHandler+0x1d0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d027      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a22      	ldr	r2, [pc, #136]	; (800240c <HAL_DMA_IRQHandler+0x1d4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d022      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a21      	ldr	r2, [pc, #132]	; (8002410 <HAL_DMA_IRQHandler+0x1d8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d01d      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_DMA_IRQHandler+0x1dc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d018      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <HAL_DMA_IRQHandler+0x1e0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d013      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_DMA_IRQHandler+0x1e4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00e      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <HAL_DMA_IRQHandler+0x1e8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a19      	ldr	r2, [pc, #100]	; (8002424 <HAL_DMA_IRQHandler+0x1ec>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d004      	beq.n	80023cc <HAL_DMA_IRQHandler+0x194>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a18      	ldr	r2, [pc, #96]	; (8002428 <HAL_DMA_IRQHandler+0x1f0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d12f      	bne.n	800242c <HAL_DMA_IRQHandler+0x1f4>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bf14      	ite	ne
 80023da:	2301      	movne	r3, #1
 80023dc:	2300      	moveq	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	e02e      	b.n	8002440 <HAL_DMA_IRQHandler+0x208>
 80023e2:	bf00      	nop
 80023e4:	20000008 	.word	0x20000008
 80023e8:	1b4e81b5 	.word	0x1b4e81b5
 80023ec:	40020010 	.word	0x40020010
 80023f0:	40020028 	.word	0x40020028
 80023f4:	40020040 	.word	0x40020040
 80023f8:	40020058 	.word	0x40020058
 80023fc:	40020070 	.word	0x40020070
 8002400:	40020088 	.word	0x40020088
 8002404:	400200a0 	.word	0x400200a0
 8002408:	400200b8 	.word	0x400200b8
 800240c:	40020410 	.word	0x40020410
 8002410:	40020428 	.word	0x40020428
 8002414:	40020440 	.word	0x40020440
 8002418:	40020458 	.word	0x40020458
 800241c:	40020470 	.word	0x40020470
 8002420:	40020488 	.word	0x40020488
 8002424:	400204a0 	.word	0x400204a0
 8002428:	400204b8 	.word	0x400204b8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	bf14      	ite	ne
 800243a:	2301      	movne	r3, #1
 800243c:	2300      	moveq	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d015      	beq.n	8002470 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0204 	bic.w	r2, r2, #4
 8002452:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2208      	movs	r2, #8
 800245e:	409a      	lsls	r2, r3
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	f043 0201 	orr.w	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	fa22 f303 	lsr.w	r3, r2, r3
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d06e      	beq.n	8002564 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a69      	ldr	r2, [pc, #420]	; (8002630 <HAL_DMA_IRQHandler+0x3f8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d04a      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a67      	ldr	r2, [pc, #412]	; (8002634 <HAL_DMA_IRQHandler+0x3fc>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d045      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a66      	ldr	r2, [pc, #408]	; (8002638 <HAL_DMA_IRQHandler+0x400>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d040      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a64      	ldr	r2, [pc, #400]	; (800263c <HAL_DMA_IRQHandler+0x404>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d03b      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a63      	ldr	r2, [pc, #396]	; (8002640 <HAL_DMA_IRQHandler+0x408>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d036      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a61      	ldr	r2, [pc, #388]	; (8002644 <HAL_DMA_IRQHandler+0x40c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d031      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a60      	ldr	r2, [pc, #384]	; (8002648 <HAL_DMA_IRQHandler+0x410>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d02c      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a5e      	ldr	r2, [pc, #376]	; (800264c <HAL_DMA_IRQHandler+0x414>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d027      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a5d      	ldr	r2, [pc, #372]	; (8002650 <HAL_DMA_IRQHandler+0x418>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d022      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a5b      	ldr	r2, [pc, #364]	; (8002654 <HAL_DMA_IRQHandler+0x41c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01d      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a5a      	ldr	r2, [pc, #360]	; (8002658 <HAL_DMA_IRQHandler+0x420>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d018      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a58      	ldr	r2, [pc, #352]	; (800265c <HAL_DMA_IRQHandler+0x424>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a57      	ldr	r2, [pc, #348]	; (8002660 <HAL_DMA_IRQHandler+0x428>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00e      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a55      	ldr	r2, [pc, #340]	; (8002664 <HAL_DMA_IRQHandler+0x42c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a54      	ldr	r2, [pc, #336]	; (8002668 <HAL_DMA_IRQHandler+0x430>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d004      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2ee>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_DMA_IRQHandler+0x434>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d10a      	bne.n	800253c <HAL_DMA_IRQHandler+0x304>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	e003      	b.n	8002544 <HAL_DMA_IRQHandler+0x30c>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2300      	movs	r3, #0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00d      	beq.n	8002564 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	2201      	movs	r2, #1
 8002552:	409a      	lsls	r2, r3
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	f043 0202 	orr.w	r2, r3, #2
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	2204      	movs	r2, #4
 800256e:	409a      	lsls	r2, r3
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 808f 	beq.w	8002698 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a2c      	ldr	r2, [pc, #176]	; (8002630 <HAL_DMA_IRQHandler+0x3f8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d04a      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <HAL_DMA_IRQHandler+0x3fc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d045      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a29      	ldr	r2, [pc, #164]	; (8002638 <HAL_DMA_IRQHandler+0x400>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d040      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a27      	ldr	r2, [pc, #156]	; (800263c <HAL_DMA_IRQHandler+0x404>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d03b      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a26      	ldr	r2, [pc, #152]	; (8002640 <HAL_DMA_IRQHandler+0x408>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d036      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a24      	ldr	r2, [pc, #144]	; (8002644 <HAL_DMA_IRQHandler+0x40c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d031      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a23      	ldr	r2, [pc, #140]	; (8002648 <HAL_DMA_IRQHandler+0x410>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d02c      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a21      	ldr	r2, [pc, #132]	; (800264c <HAL_DMA_IRQHandler+0x414>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d027      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a20      	ldr	r2, [pc, #128]	; (8002650 <HAL_DMA_IRQHandler+0x418>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d022      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <HAL_DMA_IRQHandler+0x41c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01d      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <HAL_DMA_IRQHandler+0x420>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d018      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <HAL_DMA_IRQHandler+0x424>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1a      	ldr	r2, [pc, #104]	; (8002660 <HAL_DMA_IRQHandler+0x428>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00e      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a18      	ldr	r2, [pc, #96]	; (8002664 <HAL_DMA_IRQHandler+0x42c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a17      	ldr	r2, [pc, #92]	; (8002668 <HAL_DMA_IRQHandler+0x430>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d004      	beq.n	800261a <HAL_DMA_IRQHandler+0x3e2>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a15      	ldr	r2, [pc, #84]	; (800266c <HAL_DMA_IRQHandler+0x434>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d12a      	bne.n	8002670 <HAL_DMA_IRQHandler+0x438>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf14      	ite	ne
 8002628:	2301      	movne	r3, #1
 800262a:	2300      	moveq	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	e023      	b.n	8002678 <HAL_DMA_IRQHandler+0x440>
 8002630:	40020010 	.word	0x40020010
 8002634:	40020028 	.word	0x40020028
 8002638:	40020040 	.word	0x40020040
 800263c:	40020058 	.word	0x40020058
 8002640:	40020070 	.word	0x40020070
 8002644:	40020088 	.word	0x40020088
 8002648:	400200a0 	.word	0x400200a0
 800264c:	400200b8 	.word	0x400200b8
 8002650:	40020410 	.word	0x40020410
 8002654:	40020428 	.word	0x40020428
 8002658:	40020440 	.word	0x40020440
 800265c:	40020458 	.word	0x40020458
 8002660:	40020470 	.word	0x40020470
 8002664:	40020488 	.word	0x40020488
 8002668:	400204a0 	.word	0x400204a0
 800266c:	400204b8 	.word	0x400204b8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2300      	movs	r3, #0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	2204      	movs	r2, #4
 8002686:	409a      	lsls	r2, r3
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002690:	f043 0204 	orr.w	r2, r3, #4
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	2210      	movs	r2, #16
 80026a2:	409a      	lsls	r2, r3
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a6 	beq.w	80027fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a85      	ldr	r2, [pc, #532]	; (80028c8 <HAL_DMA_IRQHandler+0x690>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d04a      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a83      	ldr	r2, [pc, #524]	; (80028cc <HAL_DMA_IRQHandler+0x694>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d045      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a82      	ldr	r2, [pc, #520]	; (80028d0 <HAL_DMA_IRQHandler+0x698>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d040      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a80      	ldr	r2, [pc, #512]	; (80028d4 <HAL_DMA_IRQHandler+0x69c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d03b      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7f      	ldr	r2, [pc, #508]	; (80028d8 <HAL_DMA_IRQHandler+0x6a0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d036      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a7d      	ldr	r2, [pc, #500]	; (80028dc <HAL_DMA_IRQHandler+0x6a4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d031      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a7c      	ldr	r2, [pc, #496]	; (80028e0 <HAL_DMA_IRQHandler+0x6a8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d02c      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a7a      	ldr	r2, [pc, #488]	; (80028e4 <HAL_DMA_IRQHandler+0x6ac>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d027      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a79      	ldr	r2, [pc, #484]	; (80028e8 <HAL_DMA_IRQHandler+0x6b0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d022      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a77      	ldr	r2, [pc, #476]	; (80028ec <HAL_DMA_IRQHandler+0x6b4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01d      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a76      	ldr	r2, [pc, #472]	; (80028f0 <HAL_DMA_IRQHandler+0x6b8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d018      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a74      	ldr	r2, [pc, #464]	; (80028f4 <HAL_DMA_IRQHandler+0x6bc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a73      	ldr	r2, [pc, #460]	; (80028f8 <HAL_DMA_IRQHandler+0x6c0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00e      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a71      	ldr	r2, [pc, #452]	; (80028fc <HAL_DMA_IRQHandler+0x6c4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d009      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a70      	ldr	r2, [pc, #448]	; (8002900 <HAL_DMA_IRQHandler+0x6c8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d004      	beq.n	800274e <HAL_DMA_IRQHandler+0x516>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a6e      	ldr	r2, [pc, #440]	; (8002904 <HAL_DMA_IRQHandler+0x6cc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d10a      	bne.n	8002764 <HAL_DMA_IRQHandler+0x52c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e009      	b.n	8002778 <HAL_DMA_IRQHandler+0x540>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	bf14      	ite	ne
 8002772:	2301      	movne	r3, #1
 8002774:	2300      	moveq	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d03e      	beq.n	80027fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	2210      	movs	r2, #16
 8002786:	409a      	lsls	r2, r3
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d018      	beq.n	80027cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d108      	bne.n	80027ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d024      	beq.n	80027fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	4798      	blx	r3
 80027b8:	e01f      	b.n	80027fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d01b      	beq.n	80027fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	4798      	blx	r3
 80027ca:	e016      	b.n	80027fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d107      	bne.n	80027ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0208 	bic.w	r2, r2, #8
 80027e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	2220      	movs	r2, #32
 8002804:	409a      	lsls	r2, r3
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8110 	beq.w	8002a30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2c      	ldr	r2, [pc, #176]	; (80028c8 <HAL_DMA_IRQHandler+0x690>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d04a      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2b      	ldr	r2, [pc, #172]	; (80028cc <HAL_DMA_IRQHandler+0x694>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d045      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a29      	ldr	r2, [pc, #164]	; (80028d0 <HAL_DMA_IRQHandler+0x698>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d040      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <HAL_DMA_IRQHandler+0x69c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d03b      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a26      	ldr	r2, [pc, #152]	; (80028d8 <HAL_DMA_IRQHandler+0x6a0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d036      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a25      	ldr	r2, [pc, #148]	; (80028dc <HAL_DMA_IRQHandler+0x6a4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d031      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <HAL_DMA_IRQHandler+0x6a8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d02c      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a22      	ldr	r2, [pc, #136]	; (80028e4 <HAL_DMA_IRQHandler+0x6ac>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d027      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a20      	ldr	r2, [pc, #128]	; (80028e8 <HAL_DMA_IRQHandler+0x6b0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d022      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <HAL_DMA_IRQHandler+0x6b4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d01d      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_DMA_IRQHandler+0x6b8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d018      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1c      	ldr	r2, [pc, #112]	; (80028f4 <HAL_DMA_IRQHandler+0x6bc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d013      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <HAL_DMA_IRQHandler+0x6c0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00e      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a19      	ldr	r2, [pc, #100]	; (80028fc <HAL_DMA_IRQHandler+0x6c4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d009      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a17      	ldr	r2, [pc, #92]	; (8002900 <HAL_DMA_IRQHandler+0x6c8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d004      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x678>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a16      	ldr	r2, [pc, #88]	; (8002904 <HAL_DMA_IRQHandler+0x6cc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d12b      	bne.n	8002908 <HAL_DMA_IRQHandler+0x6d0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf14      	ite	ne
 80028be:	2301      	movne	r3, #1
 80028c0:	2300      	moveq	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	e02a      	b.n	800291c <HAL_DMA_IRQHandler+0x6e4>
 80028c6:	bf00      	nop
 80028c8:	40020010 	.word	0x40020010
 80028cc:	40020028 	.word	0x40020028
 80028d0:	40020040 	.word	0x40020040
 80028d4:	40020058 	.word	0x40020058
 80028d8:	40020070 	.word	0x40020070
 80028dc:	40020088 	.word	0x40020088
 80028e0:	400200a0 	.word	0x400200a0
 80028e4:	400200b8 	.word	0x400200b8
 80028e8:	40020410 	.word	0x40020410
 80028ec:	40020428 	.word	0x40020428
 80028f0:	40020440 	.word	0x40020440
 80028f4:	40020458 	.word	0x40020458
 80028f8:	40020470 	.word	0x40020470
 80028fc:	40020488 	.word	0x40020488
 8002900:	400204a0 	.word	0x400204a0
 8002904:	400204b8 	.word	0x400204b8
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf14      	ite	ne
 8002916:	2301      	movne	r3, #1
 8002918:	2300      	moveq	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8087 	beq.w	8002a30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	2220      	movs	r2, #32
 800292c:	409a      	lsls	r2, r3
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b04      	cmp	r3, #4
 800293c:	d139      	bne.n	80029b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0216 	bic.w	r2, r2, #22
 800294c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800295c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <HAL_DMA_IRQHandler+0x736>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0208 	bic.w	r2, r2, #8
 800297c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	223f      	movs	r2, #63	; 0x3f
 8002988:	409a      	lsls	r2, r3
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 834a 	beq.w	800303c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
          }
          return;
 80029b0:	e344      	b.n	800303c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d018      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d108      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d02c      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	4798      	blx	r3
 80029de:	e027      	b.n	8002a30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d023      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
 80029f0:	e01e      	b.n	8002a30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10f      	bne.n	8002a20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0210 	bic.w	r2, r2, #16
 8002a0e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8306 	beq.w	8003046 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8088 	beq.w	8002b58 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a7a      	ldr	r2, [pc, #488]	; (8002c40 <HAL_DMA_IRQHandler+0xa08>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d04a      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a79      	ldr	r2, [pc, #484]	; (8002c44 <HAL_DMA_IRQHandler+0xa0c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d045      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a77      	ldr	r2, [pc, #476]	; (8002c48 <HAL_DMA_IRQHandler+0xa10>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d040      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a76      	ldr	r2, [pc, #472]	; (8002c4c <HAL_DMA_IRQHandler+0xa14>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d03b      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a74      	ldr	r2, [pc, #464]	; (8002c50 <HAL_DMA_IRQHandler+0xa18>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d036      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a73      	ldr	r2, [pc, #460]	; (8002c54 <HAL_DMA_IRQHandler+0xa1c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d031      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a71      	ldr	r2, [pc, #452]	; (8002c58 <HAL_DMA_IRQHandler+0xa20>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d02c      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a70      	ldr	r2, [pc, #448]	; (8002c5c <HAL_DMA_IRQHandler+0xa24>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d027      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a6e      	ldr	r2, [pc, #440]	; (8002c60 <HAL_DMA_IRQHandler+0xa28>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d022      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a6d      	ldr	r2, [pc, #436]	; (8002c64 <HAL_DMA_IRQHandler+0xa2c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d01d      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a6b      	ldr	r2, [pc, #428]	; (8002c68 <HAL_DMA_IRQHandler+0xa30>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d018      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6a      	ldr	r2, [pc, #424]	; (8002c6c <HAL_DMA_IRQHandler+0xa34>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d013      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a68      	ldr	r2, [pc, #416]	; (8002c70 <HAL_DMA_IRQHandler+0xa38>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a67      	ldr	r2, [pc, #412]	; (8002c74 <HAL_DMA_IRQHandler+0xa3c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a65      	ldr	r2, [pc, #404]	; (8002c78 <HAL_DMA_IRQHandler+0xa40>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x8b8>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a64      	ldr	r2, [pc, #400]	; (8002c7c <HAL_DMA_IRQHandler+0xa44>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d108      	bne.n	8002b02 <HAL_DMA_IRQHandler+0x8ca>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e007      	b.n	8002b12 <HAL_DMA_IRQHandler+0x8da>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3301      	adds	r3, #1
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d307      	bcc.n	8002b2e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f2      	bne.n	8002b12 <HAL_DMA_IRQHandler+0x8da>
 8002b2c:	e000      	b.n	8002b30 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002b2e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002b4e:	e003      	b.n	8002b58 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8272 	beq.w	8003046 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
 8002b6a:	e26c      	b.n	8003046 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a43      	ldr	r2, [pc, #268]	; (8002c80 <HAL_DMA_IRQHandler+0xa48>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d022      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x984>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a42      	ldr	r2, [pc, #264]	; (8002c84 <HAL_DMA_IRQHandler+0xa4c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d01d      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x984>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a40      	ldr	r2, [pc, #256]	; (8002c88 <HAL_DMA_IRQHandler+0xa50>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d018      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x984>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a3f      	ldr	r2, [pc, #252]	; (8002c8c <HAL_DMA_IRQHandler+0xa54>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d013      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x984>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a3d      	ldr	r2, [pc, #244]	; (8002c90 <HAL_DMA_IRQHandler+0xa58>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00e      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x984>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a3c      	ldr	r2, [pc, #240]	; (8002c94 <HAL_DMA_IRQHandler+0xa5c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d009      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x984>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a3a      	ldr	r2, [pc, #232]	; (8002c98 <HAL_DMA_IRQHandler+0xa60>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d004      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x984>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a39      	ldr	r2, [pc, #228]	; (8002c9c <HAL_DMA_IRQHandler+0xa64>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d101      	bne.n	8002bc0 <HAL_DMA_IRQHandler+0x988>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <HAL_DMA_IRQHandler+0x98a>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 823f 	beq.w	8003046 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2204      	movs	r2, #4
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80cd 	beq.w	8002d80 <HAL_DMA_IRQHandler+0xb48>
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80c7 	beq.w	8002d80 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf6:	f003 031f 	and.w	r3, r3, #31
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d049      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8210 	beq.w	8003040 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c28:	e20a      	b.n	8003040 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 8206 	beq.w	8003040 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c3c:	e200      	b.n	8003040 <HAL_DMA_IRQHandler+0xe08>
 8002c3e:	bf00      	nop
 8002c40:	40020010 	.word	0x40020010
 8002c44:	40020028 	.word	0x40020028
 8002c48:	40020040 	.word	0x40020040
 8002c4c:	40020058 	.word	0x40020058
 8002c50:	40020070 	.word	0x40020070
 8002c54:	40020088 	.word	0x40020088
 8002c58:	400200a0 	.word	0x400200a0
 8002c5c:	400200b8 	.word	0x400200b8
 8002c60:	40020410 	.word	0x40020410
 8002c64:	40020428 	.word	0x40020428
 8002c68:	40020440 	.word	0x40020440
 8002c6c:	40020458 	.word	0x40020458
 8002c70:	40020470 	.word	0x40020470
 8002c74:	40020488 	.word	0x40020488
 8002c78:	400204a0 	.word	0x400204a0
 8002c7c:	400204b8 	.word	0x400204b8
 8002c80:	58025408 	.word	0x58025408
 8002c84:	5802541c 	.word	0x5802541c
 8002c88:	58025430 	.word	0x58025430
 8002c8c:	58025444 	.word	0x58025444
 8002c90:	58025458 	.word	0x58025458
 8002c94:	5802546c 	.word	0x5802546c
 8002c98:	58025480 	.word	0x58025480
 8002c9c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d160      	bne.n	8002d6c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a8c      	ldr	r2, [pc, #560]	; (8002ee0 <HAL_DMA_IRQHandler+0xca8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d04a      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a8a      	ldr	r2, [pc, #552]	; (8002ee4 <HAL_DMA_IRQHandler+0xcac>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d045      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a89      	ldr	r2, [pc, #548]	; (8002ee8 <HAL_DMA_IRQHandler+0xcb0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d040      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a87      	ldr	r2, [pc, #540]	; (8002eec <HAL_DMA_IRQHandler+0xcb4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d03b      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a86      	ldr	r2, [pc, #536]	; (8002ef0 <HAL_DMA_IRQHandler+0xcb8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d036      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a84      	ldr	r2, [pc, #528]	; (8002ef4 <HAL_DMA_IRQHandler+0xcbc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d031      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a83      	ldr	r2, [pc, #524]	; (8002ef8 <HAL_DMA_IRQHandler+0xcc0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d02c      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a81      	ldr	r2, [pc, #516]	; (8002efc <HAL_DMA_IRQHandler+0xcc4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d027      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a80      	ldr	r2, [pc, #512]	; (8002f00 <HAL_DMA_IRQHandler+0xcc8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d022      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a7e      	ldr	r2, [pc, #504]	; (8002f04 <HAL_DMA_IRQHandler+0xccc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01d      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7d      	ldr	r2, [pc, #500]	; (8002f08 <HAL_DMA_IRQHandler+0xcd0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d018      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a7b      	ldr	r2, [pc, #492]	; (8002f0c <HAL_DMA_IRQHandler+0xcd4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a7a      	ldr	r2, [pc, #488]	; (8002f10 <HAL_DMA_IRQHandler+0xcd8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00e      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a78      	ldr	r2, [pc, #480]	; (8002f14 <HAL_DMA_IRQHandler+0xcdc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d009      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a77      	ldr	r2, [pc, #476]	; (8002f18 <HAL_DMA_IRQHandler+0xce0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d004      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xb12>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a75      	ldr	r2, [pc, #468]	; (8002f1c <HAL_DMA_IRQHandler+0xce4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d108      	bne.n	8002d5c <HAL_DMA_IRQHandler+0xb24>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0208 	bic.w	r2, r2, #8
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e007      	b.n	8002d6c <HAL_DMA_IRQHandler+0xb34>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0204 	bic.w	r2, r2, #4
 8002d6a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8165 	beq.w	8003040 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d7e:	e15f      	b.n	8003040 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2202      	movs	r2, #2
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80c5 	beq.w	8002f20 <HAL_DMA_IRQHandler+0xce8>
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80bf 	beq.w	8002f20 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	2202      	movs	r2, #2
 8002dac:	409a      	lsls	r2, r3
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d018      	beq.n	8002dee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 813a 	beq.w	8003044 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dd8:	e134      	b.n	8003044 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8130 	beq.w	8003044 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dec:	e12a      	b.n	8003044 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f003 0320 	and.w	r3, r3, #32
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d168      	bne.n	8002eca <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a38      	ldr	r2, [pc, #224]	; (8002ee0 <HAL_DMA_IRQHandler+0xca8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d04a      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a37      	ldr	r2, [pc, #220]	; (8002ee4 <HAL_DMA_IRQHandler+0xcac>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d045      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a35      	ldr	r2, [pc, #212]	; (8002ee8 <HAL_DMA_IRQHandler+0xcb0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d040      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a34      	ldr	r2, [pc, #208]	; (8002eec <HAL_DMA_IRQHandler+0xcb4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d03b      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a32      	ldr	r2, [pc, #200]	; (8002ef0 <HAL_DMA_IRQHandler+0xcb8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d036      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a31      	ldr	r2, [pc, #196]	; (8002ef4 <HAL_DMA_IRQHandler+0xcbc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d031      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a2f      	ldr	r2, [pc, #188]	; (8002ef8 <HAL_DMA_IRQHandler+0xcc0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d02c      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a2e      	ldr	r2, [pc, #184]	; (8002efc <HAL_DMA_IRQHandler+0xcc4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d027      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2c      	ldr	r2, [pc, #176]	; (8002f00 <HAL_DMA_IRQHandler+0xcc8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d022      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2b      	ldr	r2, [pc, #172]	; (8002f04 <HAL_DMA_IRQHandler+0xccc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d01d      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <HAL_DMA_IRQHandler+0xcd0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d018      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <HAL_DMA_IRQHandler+0xcd4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d013      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <HAL_DMA_IRQHandler+0xcd8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00e      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a25      	ldr	r2, [pc, #148]	; (8002f14 <HAL_DMA_IRQHandler+0xcdc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d009      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a23      	ldr	r2, [pc, #140]	; (8002f18 <HAL_DMA_IRQHandler+0xce0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d004      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xc60>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <HAL_DMA_IRQHandler+0xce4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d108      	bne.n	8002eaa <HAL_DMA_IRQHandler+0xc72>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0214 	bic.w	r2, r2, #20
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	e007      	b.n	8002eba <HAL_DMA_IRQHandler+0xc82>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 020a 	bic.w	r2, r2, #10
 8002eb8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80b8 	beq.w	8003044 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002edc:	e0b2      	b.n	8003044 <HAL_DMA_IRQHandler+0xe0c>
 8002ede:	bf00      	nop
 8002ee0:	40020010 	.word	0x40020010
 8002ee4:	40020028 	.word	0x40020028
 8002ee8:	40020040 	.word	0x40020040
 8002eec:	40020058 	.word	0x40020058
 8002ef0:	40020070 	.word	0x40020070
 8002ef4:	40020088 	.word	0x40020088
 8002ef8:	400200a0 	.word	0x400200a0
 8002efc:	400200b8 	.word	0x400200b8
 8002f00:	40020410 	.word	0x40020410
 8002f04:	40020428 	.word	0x40020428
 8002f08:	40020440 	.word	0x40020440
 8002f0c:	40020458 	.word	0x40020458
 8002f10:	40020470 	.word	0x40020470
 8002f14:	40020488 	.word	0x40020488
 8002f18:	400204a0 	.word	0x400204a0
 8002f1c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	2208      	movs	r2, #8
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8088 	beq.w	8003046 <HAL_DMA_IRQHandler+0xe0e>
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 8082 	beq.w	8003046 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a41      	ldr	r2, [pc, #260]	; (800304c <HAL_DMA_IRQHandler+0xe14>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d04a      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3f      	ldr	r2, [pc, #252]	; (8003050 <HAL_DMA_IRQHandler+0xe18>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d045      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a3e      	ldr	r2, [pc, #248]	; (8003054 <HAL_DMA_IRQHandler+0xe1c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d040      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a3c      	ldr	r2, [pc, #240]	; (8003058 <HAL_DMA_IRQHandler+0xe20>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d03b      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a3b      	ldr	r2, [pc, #236]	; (800305c <HAL_DMA_IRQHandler+0xe24>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d036      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a39      	ldr	r2, [pc, #228]	; (8003060 <HAL_DMA_IRQHandler+0xe28>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d031      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a38      	ldr	r2, [pc, #224]	; (8003064 <HAL_DMA_IRQHandler+0xe2c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d02c      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a36      	ldr	r2, [pc, #216]	; (8003068 <HAL_DMA_IRQHandler+0xe30>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d027      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a35      	ldr	r2, [pc, #212]	; (800306c <HAL_DMA_IRQHandler+0xe34>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d022      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a33      	ldr	r2, [pc, #204]	; (8003070 <HAL_DMA_IRQHandler+0xe38>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d01d      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a32      	ldr	r2, [pc, #200]	; (8003074 <HAL_DMA_IRQHandler+0xe3c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d018      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a30      	ldr	r2, [pc, #192]	; (8003078 <HAL_DMA_IRQHandler+0xe40>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2f      	ldr	r2, [pc, #188]	; (800307c <HAL_DMA_IRQHandler+0xe44>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <HAL_DMA_IRQHandler+0xe48>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <HAL_DMA_IRQHandler+0xe4c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xdaa>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a2a      	ldr	r2, [pc, #168]	; (8003088 <HAL_DMA_IRQHandler+0xe50>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d108      	bne.n	8002ff4 <HAL_DMA_IRQHandler+0xdbc>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 021c 	bic.w	r2, r2, #28
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e007      	b.n	8003004 <HAL_DMA_IRQHandler+0xdcc>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 020e 	bic.w	r2, r2, #14
 8003002:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	2201      	movs	r2, #1
 800300e:	409a      	lsls	r2, r3
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
 800303a:	e004      	b.n	8003046 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800303c:	bf00      	nop
 800303e:	e002      	b.n	8003046 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003040:	bf00      	nop
 8003042:	e000      	b.n	8003046 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003044:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003046:	3728      	adds	r7, #40	; 0x28
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40020010 	.word	0x40020010
 8003050:	40020028 	.word	0x40020028
 8003054:	40020040 	.word	0x40020040
 8003058:	40020058 	.word	0x40020058
 800305c:	40020070 	.word	0x40020070
 8003060:	40020088 	.word	0x40020088
 8003064:	400200a0 	.word	0x400200a0
 8003068:	400200b8 	.word	0x400200b8
 800306c:	40020410 	.word	0x40020410
 8003070:	40020428 	.word	0x40020428
 8003074:	40020440 	.word	0x40020440
 8003078:	40020458 	.word	0x40020458
 800307c:	40020470 	.word	0x40020470
 8003080:	40020488 	.word	0x40020488
 8003084:	400204a0 	.word	0x400204a0
 8003088:	400204b8 	.word	0x400204b8

0800308c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a42      	ldr	r2, [pc, #264]	; (80031a4 <DMA_CalcBaseAndBitshift+0x118>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d04a      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a41      	ldr	r2, [pc, #260]	; (80031a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d045      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a3f      	ldr	r2, [pc, #252]	; (80031ac <DMA_CalcBaseAndBitshift+0x120>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d040      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a3e      	ldr	r2, [pc, #248]	; (80031b0 <DMA_CalcBaseAndBitshift+0x124>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d03b      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a3c      	ldr	r2, [pc, #240]	; (80031b4 <DMA_CalcBaseAndBitshift+0x128>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d036      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a3b      	ldr	r2, [pc, #236]	; (80031b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d031      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a39      	ldr	r2, [pc, #228]	; (80031bc <DMA_CalcBaseAndBitshift+0x130>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02c      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a38      	ldr	r2, [pc, #224]	; (80031c0 <DMA_CalcBaseAndBitshift+0x134>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d027      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a36      	ldr	r2, [pc, #216]	; (80031c4 <DMA_CalcBaseAndBitshift+0x138>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d022      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a35      	ldr	r2, [pc, #212]	; (80031c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d01d      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a33      	ldr	r2, [pc, #204]	; (80031cc <DMA_CalcBaseAndBitshift+0x140>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d018      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a32      	ldr	r2, [pc, #200]	; (80031d0 <DMA_CalcBaseAndBitshift+0x144>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d013      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a30      	ldr	r2, [pc, #192]	; (80031d4 <DMA_CalcBaseAndBitshift+0x148>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00e      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a2f      	ldr	r2, [pc, #188]	; (80031d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d009      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a2d      	ldr	r2, [pc, #180]	; (80031dc <DMA_CalcBaseAndBitshift+0x150>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <DMA_CalcBaseAndBitshift+0xa8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <DMA_CalcBaseAndBitshift+0x154>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d101      	bne.n	8003138 <DMA_CalcBaseAndBitshift+0xac>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <DMA_CalcBaseAndBitshift+0xae>
 8003138:	2300      	movs	r3, #0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d024      	beq.n	8003188 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	3b10      	subs	r3, #16
 8003146:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <DMA_CalcBaseAndBitshift+0x158>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	4a24      	ldr	r2, [pc, #144]	; (80031e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
 800315a:	461a      	mov	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d908      	bls.n	8003178 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <DMA_CalcBaseAndBitshift+0x160>)
 800316e:	4013      	ands	r3, r2
 8003170:	1d1a      	adds	r2, r3, #4
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	659a      	str	r2, [r3, #88]	; 0x58
 8003176:	e00d      	b.n	8003194 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <DMA_CalcBaseAndBitshift+0x160>)
 8003180:	4013      	ands	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6593      	str	r3, [r2, #88]	; 0x58
 8003186:	e005      	b.n	8003194 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40020010 	.word	0x40020010
 80031a8:	40020028 	.word	0x40020028
 80031ac:	40020040 	.word	0x40020040
 80031b0:	40020058 	.word	0x40020058
 80031b4:	40020070 	.word	0x40020070
 80031b8:	40020088 	.word	0x40020088
 80031bc:	400200a0 	.word	0x400200a0
 80031c0:	400200b8 	.word	0x400200b8
 80031c4:	40020410 	.word	0x40020410
 80031c8:	40020428 	.word	0x40020428
 80031cc:	40020440 	.word	0x40020440
 80031d0:	40020458 	.word	0x40020458
 80031d4:	40020470 	.word	0x40020470
 80031d8:	40020488 	.word	0x40020488
 80031dc:	400204a0 	.word	0x400204a0
 80031e0:	400204b8 	.word	0x400204b8
 80031e4:	aaaaaaab 	.word	0xaaaaaaab
 80031e8:	0800bd60 	.word	0x0800bd60
 80031ec:	fffffc00 	.word	0xfffffc00

080031f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d120      	bne.n	8003246 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	2b03      	cmp	r3, #3
 800320a:	d858      	bhi.n	80032be <DMA_CheckFifoParam+0xce>
 800320c:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <DMA_CheckFifoParam+0x24>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003225 	.word	0x08003225
 8003218:	08003237 	.word	0x08003237
 800321c:	08003225 	.word	0x08003225
 8003220:	080032bf 	.word	0x080032bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d048      	beq.n	80032c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003234:	e045      	b.n	80032c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800323e:	d142      	bne.n	80032c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003244:	e03f      	b.n	80032c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324e:	d123      	bne.n	8003298 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	2b03      	cmp	r3, #3
 8003256:	d838      	bhi.n	80032ca <DMA_CheckFifoParam+0xda>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <DMA_CheckFifoParam+0x70>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003271 	.word	0x08003271
 8003264:	08003277 	.word	0x08003277
 8003268:	08003271 	.word	0x08003271
 800326c:	08003289 	.word	0x08003289
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
        break;
 8003274:	e030      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d025      	beq.n	80032ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003286:	e022      	b.n	80032ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003290:	d11f      	bne.n	80032d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003296:	e01c      	b.n	80032d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	2b02      	cmp	r3, #2
 800329e:	d902      	bls.n	80032a6 <DMA_CheckFifoParam+0xb6>
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d003      	beq.n	80032ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80032a4:	e018      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	73fb      	strb	r3, [r7, #15]
        break;
 80032aa:	e015      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
    break;
 80032bc:	e00b      	b.n	80032d6 <DMA_CheckFifoParam+0xe6>
        break;
 80032be:	bf00      	nop
 80032c0:	e00a      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
        break;
 80032c2:	bf00      	nop
 80032c4:	e008      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
        break;
 80032c6:	bf00      	nop
 80032c8:	e006      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
        break;
 80032ca:	bf00      	nop
 80032cc:	e004      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
        break;
 80032ce:	bf00      	nop
 80032d0:	e002      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
        break;
 80032d2:	bf00      	nop
 80032d4:	e000      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
    break;
 80032d6:	bf00      	nop
    }
  }

  return status;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop

080032e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a38      	ldr	r2, [pc, #224]	; (80033dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d022      	beq.n	8003346 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a36      	ldr	r2, [pc, #216]	; (80033e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01d      	beq.n	8003346 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a35      	ldr	r2, [pc, #212]	; (80033e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d018      	beq.n	8003346 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a33      	ldr	r2, [pc, #204]	; (80033e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a32      	ldr	r2, [pc, #200]	; (80033ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00e      	beq.n	8003346 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a30      	ldr	r2, [pc, #192]	; (80033f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d009      	beq.n	8003346 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2f      	ldr	r2, [pc, #188]	; (80033f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2d      	ldr	r2, [pc, #180]	; (80033f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d101      	bne.n	800334a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800334a:	2300      	movs	r3, #0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01a      	beq.n	8003386 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	3b08      	subs	r3, #8
 8003358:	4a28      	ldr	r2, [pc, #160]	; (80033fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4b26      	ldr	r3, [pc, #152]	; (8003400 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	461a      	mov	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a24      	ldr	r2, [pc, #144]	; (8003404 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003374:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2201      	movs	r2, #1
 800337e:	409a      	lsls	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003384:	e024      	b.n	80033d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	3b10      	subs	r3, #16
 800338e:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4a1c      	ldr	r2, [pc, #112]	; (800340c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d806      	bhi.n	80033ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d902      	bls.n	80033ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3308      	adds	r3, #8
 80033ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4b18      	ldr	r3, [pc, #96]	; (8003414 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	461a      	mov	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a16      	ldr	r2, [pc, #88]	; (8003418 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80033c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	2201      	movs	r2, #1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	58025408 	.word	0x58025408
 80033e0:	5802541c 	.word	0x5802541c
 80033e4:	58025430 	.word	0x58025430
 80033e8:	58025444 	.word	0x58025444
 80033ec:	58025458 	.word	0x58025458
 80033f0:	5802546c 	.word	0x5802546c
 80033f4:	58025480 	.word	0x58025480
 80033f8:	58025494 	.word	0x58025494
 80033fc:	cccccccd 	.word	0xcccccccd
 8003400:	16009600 	.word	0x16009600
 8003404:	58025880 	.word	0x58025880
 8003408:	aaaaaaab 	.word	0xaaaaaaab
 800340c:	400204b8 	.word	0x400204b8
 8003410:	4002040f 	.word	0x4002040f
 8003414:	10008200 	.word	0x10008200
 8003418:	40020880 	.word	0x40020880

0800341c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d04a      	beq.n	80034c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d847      	bhi.n	80034c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a25      	ldr	r2, [pc, #148]	; (80034d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d022      	beq.n	8003488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a24      	ldr	r2, [pc, #144]	; (80034d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d01d      	beq.n	8003488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a22      	ldr	r2, [pc, #136]	; (80034dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d018      	beq.n	8003488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a21      	ldr	r2, [pc, #132]	; (80034e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00e      	beq.n	8003488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d009      	beq.n	8003488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1c      	ldr	r2, [pc, #112]	; (80034ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d101      	bne.n	800348c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800348c:	2300      	movs	r3, #0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4b17      	ldr	r3, [pc, #92]	; (80034f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	461a      	mov	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80034a4:	671a      	str	r2, [r3, #112]	; 0x70
 80034a6:	e009      	b.n	80034bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4b14      	ldr	r3, [pc, #80]	; (80034fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	461a      	mov	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a11      	ldr	r2, [pc, #68]	; (8003500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80034ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3b01      	subs	r3, #1
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	58025408 	.word	0x58025408
 80034d8:	5802541c 	.word	0x5802541c
 80034dc:	58025430 	.word	0x58025430
 80034e0:	58025444 	.word	0x58025444
 80034e4:	58025458 	.word	0x58025458
 80034e8:	5802546c 	.word	0x5802546c
 80034ec:	58025480 	.word	0x58025480
 80034f0:	58025494 	.word	0x58025494
 80034f4:	1600963f 	.word	0x1600963f
 80034f8:	58025940 	.word	0x58025940
 80034fc:	1000823f 	.word	0x1000823f
 8003500:	40020940 	.word	0x40020940

08003504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003512:	4b89      	ldr	r3, [pc, #548]	; (8003738 <HAL_GPIO_Init+0x234>)
 8003514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003516:	e194      	b.n	8003842 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 8186 	beq.w	800383c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d00b      	beq.n	8003550 <HAL_GPIO_Init+0x4c>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d007      	beq.n	8003550 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003544:	2b11      	cmp	r3, #17
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b12      	cmp	r3, #18
 800354e:	d130      	bne.n	80035b2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	2203      	movs	r2, #3
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003586:	2201      	movs	r2, #1
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 0201 	and.w	r2, r3, #1
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2203      	movs	r2, #3
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0xee>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b12      	cmp	r3, #18
 80035f0:	d123      	bne.n	800363a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	08da      	lsrs	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3208      	adds	r2, #8
 80035fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	220f      	movs	r2, #15
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	08da      	lsrs	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3208      	adds	r2, #8
 8003634:	69b9      	ldr	r1, [r7, #24]
 8003636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	2203      	movs	r2, #3
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0203 	and.w	r2, r3, #3
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80e0 	beq.w	800383c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367c:	4b2f      	ldr	r3, [pc, #188]	; (800373c <HAL_GPIO_Init+0x238>)
 800367e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003682:	4a2e      	ldr	r2, [pc, #184]	; (800373c <HAL_GPIO_Init+0x238>)
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800368c:	4b2b      	ldr	r3, [pc, #172]	; (800373c <HAL_GPIO_Init+0x238>)
 800368e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800369a:	4a29      	ldr	r2, [pc, #164]	; (8003740 <HAL_GPIO_Init+0x23c>)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	3302      	adds	r3, #2
 80036a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	220f      	movs	r2, #15
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a20      	ldr	r2, [pc, #128]	; (8003744 <HAL_GPIO_Init+0x240>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d052      	beq.n	800376c <HAL_GPIO_Init+0x268>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_GPIO_Init+0x244>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d031      	beq.n	8003732 <HAL_GPIO_Init+0x22e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1e      	ldr	r2, [pc, #120]	; (800374c <HAL_GPIO_Init+0x248>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d02b      	beq.n	800372e <HAL_GPIO_Init+0x22a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <HAL_GPIO_Init+0x24c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d025      	beq.n	800372a <HAL_GPIO_Init+0x226>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_GPIO_Init+0x250>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01f      	beq.n	8003726 <HAL_GPIO_Init+0x222>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_GPIO_Init+0x254>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d019      	beq.n	8003722 <HAL_GPIO_Init+0x21e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a1a      	ldr	r2, [pc, #104]	; (800375c <HAL_GPIO_Init+0x258>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_GPIO_Init+0x21a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_GPIO_Init+0x25c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00d      	beq.n	800371a <HAL_GPIO_Init+0x216>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a18      	ldr	r2, [pc, #96]	; (8003764 <HAL_GPIO_Init+0x260>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d007      	beq.n	8003716 <HAL_GPIO_Init+0x212>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a17      	ldr	r2, [pc, #92]	; (8003768 <HAL_GPIO_Init+0x264>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_GPIO_Init+0x20e>
 800370e:	2309      	movs	r3, #9
 8003710:	e02d      	b.n	800376e <HAL_GPIO_Init+0x26a>
 8003712:	230a      	movs	r3, #10
 8003714:	e02b      	b.n	800376e <HAL_GPIO_Init+0x26a>
 8003716:	2308      	movs	r3, #8
 8003718:	e029      	b.n	800376e <HAL_GPIO_Init+0x26a>
 800371a:	2307      	movs	r3, #7
 800371c:	e027      	b.n	800376e <HAL_GPIO_Init+0x26a>
 800371e:	2306      	movs	r3, #6
 8003720:	e025      	b.n	800376e <HAL_GPIO_Init+0x26a>
 8003722:	2305      	movs	r3, #5
 8003724:	e023      	b.n	800376e <HAL_GPIO_Init+0x26a>
 8003726:	2304      	movs	r3, #4
 8003728:	e021      	b.n	800376e <HAL_GPIO_Init+0x26a>
 800372a:	2303      	movs	r3, #3
 800372c:	e01f      	b.n	800376e <HAL_GPIO_Init+0x26a>
 800372e:	2302      	movs	r3, #2
 8003730:	e01d      	b.n	800376e <HAL_GPIO_Init+0x26a>
 8003732:	2301      	movs	r3, #1
 8003734:	e01b      	b.n	800376e <HAL_GPIO_Init+0x26a>
 8003736:	bf00      	nop
 8003738:	58000080 	.word	0x58000080
 800373c:	58024400 	.word	0x58024400
 8003740:	58000400 	.word	0x58000400
 8003744:	58020000 	.word	0x58020000
 8003748:	58020400 	.word	0x58020400
 800374c:	58020800 	.word	0x58020800
 8003750:	58020c00 	.word	0x58020c00
 8003754:	58021000 	.word	0x58021000
 8003758:	58021400 	.word	0x58021400
 800375c:	58021800 	.word	0x58021800
 8003760:	58021c00 	.word	0x58021c00
 8003764:	58022000 	.word	0x58022000
 8003768:	58022400 	.word	0x58022400
 800376c:	2300      	movs	r3, #0
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	f002 0203 	and.w	r2, r2, #3
 8003774:	0092      	lsls	r2, r2, #2
 8003776:	4093      	lsls	r3, r2
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800377e:	4938      	ldr	r1, [pc, #224]	; (8003860 <HAL_GPIO_Init+0x35c>)
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	3302      	adds	r3, #2
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800380e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	3301      	adds	r3, #1
 8003840:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	fa22 f303 	lsr.w	r3, r2, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	f47f ae63 	bne.w	8003518 <HAL_GPIO_Init+0x14>
  }
}
 8003852:	bf00      	nop
 8003854:	3724      	adds	r7, #36	; 0x24
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	58000400 	.word	0x58000400

08003864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	887b      	ldrh	r3, [r7, #2]
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
 8003880:	e001      	b.n	8003886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003882:	2300      	movs	r3, #0
 8003884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003886:	7bfb      	ldrb	r3, [r7, #15]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	807b      	strh	r3, [r7, #2]
 80038a0:	4613      	mov	r3, r2
 80038a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038a4:	787b      	ldrb	r3, [r7, #1]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038aa:	887a      	ldrh	r2, [r7, #2]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038b0:	e003      	b.n	80038ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038b2:	887b      	ldrh	r3, [r7, #2]
 80038b4:	041a      	lsls	r2, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	619a      	str	r2, [r3, #24]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e07f      	b.n	80039da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f007 f9ca 	bl	800ac88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	; 0x24
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003918:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003928:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d107      	bne.n	8003942 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	e006      	b.n	8003950 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800394e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d104      	bne.n	8003962 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003960:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <HAL_I2C_Init+0x11c>)
 800396e:	430b      	orrs	r3, r1
 8003970:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003980:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	ea42 0103 	orr.w	r1, r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	021a      	lsls	r2, r3, #8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69d9      	ldr	r1, [r3, #28]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1a      	ldr	r2, [r3, #32]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	02008000 	.word	0x02008000

080039e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d138      	bne.n	8003a70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e032      	b.n	8003a72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	; 0x24
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e000      	b.n	8003a72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b085      	sub	sp, #20
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d139      	bne.n	8003b08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e033      	b.n	8003b0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2224      	movs	r2, #36	; 0x24
 8003aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ad0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	021b      	lsls	r3, r3, #8
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_PWREx_ConfigSupply+0x70>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d00a      	beq.n	8003b42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b2c:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <HAL_PWREx_ConfigSupply+0x70>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d001      	beq.n	8003b3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e01f      	b.n	8003b7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e01d      	b.n	8003b7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <HAL_PWREx_ConfigSupply+0x70>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f023 0207 	bic.w	r2, r3, #7
 8003b4a:	490f      	ldr	r1, [pc, #60]	; (8003b88 <HAL_PWREx_ConfigSupply+0x70>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b52:	f7fc fc47 	bl	80003e4 <HAL_GetTick>
 8003b56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b58:	e009      	b.n	8003b6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b5a:	f7fc fc43 	bl	80003e4 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b68:	d901      	bls.n	8003b6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e007      	b.n	8003b7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_PWREx_ConfigSupply+0x70>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7a:	d1ee      	bne.n	8003b5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	58024800 	.word	0x58024800

08003b8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08c      	sub	sp, #48	; 0x30
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e3c4      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8087 	beq.w	8003cba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bac:	4ba2      	ldr	r3, [pc, #648]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bb6:	4ba0      	ldr	r3, [pc, #640]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	2b10      	cmp	r3, #16
 8003bc0:	d007      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x46>
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	2b18      	cmp	r3, #24
 8003bc6:	d110      	bne.n	8003bea <HAL_RCC_OscConfig+0x5e>
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d10b      	bne.n	8003bea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd2:	4b99      	ldr	r3, [pc, #612]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d06c      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x12c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d168      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e39e      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf2:	d106      	bne.n	8003c02 <HAL_RCC_OscConfig+0x76>
 8003bf4:	4b90      	ldr	r3, [pc, #576]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a8f      	ldr	r2, [pc, #572]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	e02e      	b.n	8003c60 <HAL_RCC_OscConfig+0xd4>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x98>
 8003c0a:	4b8b      	ldr	r3, [pc, #556]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a8a      	ldr	r2, [pc, #552]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b88      	ldr	r3, [pc, #544]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a87      	ldr	r2, [pc, #540]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e01d      	b.n	8003c60 <HAL_RCC_OscConfig+0xd4>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0xbc>
 8003c2e:	4b82      	ldr	r3, [pc, #520]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a81      	ldr	r2, [pc, #516]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b7f      	ldr	r3, [pc, #508]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a7e      	ldr	r2, [pc, #504]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0xd4>
 8003c48:	4b7b      	ldr	r3, [pc, #492]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a7a      	ldr	r2, [pc, #488]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b78      	ldr	r3, [pc, #480]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a77      	ldr	r2, [pc, #476]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fc fbbc 	bl	80003e4 <HAL_GetTick>
 8003c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fc fbb8 	bl	80003e4 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e352      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c82:	4b6d      	ldr	r3, [pc, #436]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0xe4>
 8003c8e:	e014      	b.n	8003cba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fc fba8 	bl	80003e4 <HAL_GetTick>
 8003c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fc fba4 	bl	80003e4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	; 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e33e      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003caa:	4b63      	ldr	r3, [pc, #396]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x10c>
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8092 	beq.w	8003dec <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc8:	4b5b      	ldr	r3, [pc, #364]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cd0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cd2:	4b59      	ldr	r3, [pc, #356]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_RCC_OscConfig+0x162>
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	2b18      	cmp	r3, #24
 8003ce2:	d12d      	bne.n	8003d40 <HAL_RCC_OscConfig+0x1b4>
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d128      	bne.n	8003d40 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cee:	4b52      	ldr	r3, [pc, #328]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_RCC_OscConfig+0x17a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e310      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	f7fc fb9b 	bl	8000440 <HAL_GetREVID>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d80a      	bhi.n	8003d2a <HAL_RCC_OscConfig+0x19e>
 8003d14:	4b48      	ldr	r3, [pc, #288]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	031b      	lsls	r3, r3, #12
 8003d22:	4945      	ldr	r1, [pc, #276]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d28:	e060      	b.n	8003dec <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2a:	4b43      	ldr	r3, [pc, #268]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	061b      	lsls	r3, r3, #24
 8003d38:	493f      	ldr	r1, [pc, #252]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d3e:	e055      	b.n	8003dec <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d038      	beq.n	8003dba <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d48:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f023 0219 	bic.w	r2, r3, #25
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4938      	ldr	r1, [pc, #224]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fc fb43 	bl	80003e4 <HAL_GetTick>
 8003d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d62:	f7fc fb3f 	bl	80003e4 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e2d9      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d74:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d80:	f7fc fb5e 	bl	8000440 <HAL_GetREVID>
 8003d84:	4602      	mov	r2, r0
 8003d86:	f241 0303 	movw	r3, #4099	; 0x1003
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d80a      	bhi.n	8003da4 <HAL_RCC_OscConfig+0x218>
 8003d8e:	4b2a      	ldr	r3, [pc, #168]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	031b      	lsls	r3, r3, #12
 8003d9c:	4926      	ldr	r1, [pc, #152]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	604b      	str	r3, [r1, #4]
 8003da2:	e023      	b.n	8003dec <HAL_RCC_OscConfig+0x260>
 8003da4:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	061b      	lsls	r3, r3, #24
 8003db2:	4921      	ldr	r1, [pc, #132]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
 8003db8:	e018      	b.n	8003dec <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dba:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fc fb0d 	bl	80003e4 <HAL_GetTick>
 8003dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fc fb09 	bl	80003e4 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e2a3      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003de0:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f0      	bne.n	8003dce <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8091 	beq.w	8003f1c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d007      	beq.n	8003e20 <HAL_RCC_OscConfig+0x294>
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b18      	cmp	r3, #24
 8003e14:	d12f      	bne.n	8003e76 <HAL_RCC_OscConfig+0x2ea>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d12a      	bne.n	8003e76 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <HAL_RCC_OscConfig+0x2b0>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	2b80      	cmp	r3, #128	; 0x80
 8003e32:	d003      	beq.n	8003e3c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e277      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
 8003e38:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e3c:	f7fc fb00 	bl	8000440 <HAL_GetREVID>
 8003e40:	4602      	mov	r2, r0
 8003e42:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d80a      	bhi.n	8003e60 <HAL_RCC_OscConfig+0x2d4>
 8003e4a:	4ba2      	ldr	r3, [pc, #648]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	069b      	lsls	r3, r3, #26
 8003e58:	499e      	ldr	r1, [pc, #632]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e5e:	e05d      	b.n	8003f1c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e60:	4b9c      	ldr	r3, [pc, #624]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	061b      	lsls	r3, r3, #24
 8003e6e:	4999      	ldr	r1, [pc, #612]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e74:	e052      	b.n	8003f1c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d035      	beq.n	8003eea <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e7e:	4b95      	ldr	r3, [pc, #596]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a94      	ldr	r2, [pc, #592]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fc faab 	bl	80003e4 <HAL_GetTick>
 8003e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e92:	f7fc faa7 	bl	80003e4 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e241      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ea4:	4b8b      	ldr	r3, [pc, #556]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003eb0:	f7fc fac6 	bl	8000440 <HAL_GetREVID>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	f241 0303 	movw	r3, #4099	; 0x1003
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d80a      	bhi.n	8003ed4 <HAL_RCC_OscConfig+0x348>
 8003ebe:	4b85      	ldr	r3, [pc, #532]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	069b      	lsls	r3, r3, #26
 8003ecc:	4981      	ldr	r1, [pc, #516]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
 8003ed2:	e023      	b.n	8003f1c <HAL_RCC_OscConfig+0x390>
 8003ed4:	4b7f      	ldr	r3, [pc, #508]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	497c      	ldr	r1, [pc, #496]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60cb      	str	r3, [r1, #12]
 8003ee8:	e018      	b.n	8003f1c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003eea:	4b7a      	ldr	r3, [pc, #488]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a79      	ldr	r2, [pc, #484]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef6:	f7fc fa75 	bl	80003e4 <HAL_GetTick>
 8003efa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003efe:	f7fc fa71 	bl	80003e4 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e20b      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f10:	4b70      	ldr	r3, [pc, #448]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f0      	bne.n	8003efe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d036      	beq.n	8003f96 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d019      	beq.n	8003f64 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f30:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f34:	4a67      	ldr	r2, [pc, #412]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fc fa52 	bl	80003e4 <HAL_GetTick>
 8003f40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f44:	f7fc fa4e 	bl	80003e4 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e1e8      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f56:	4b5f      	ldr	r3, [pc, #380]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x3b8>
 8003f62:	e018      	b.n	8003f96 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f64:	4b5b      	ldr	r3, [pc, #364]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f68:	4a5a      	ldr	r2, [pc, #360]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f70:	f7fc fa38 	bl	80003e4 <HAL_GetTick>
 8003f74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f78:	f7fc fa34 	bl	80003e4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e1ce      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f8a:	4b52      	ldr	r3, [pc, #328]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d036      	beq.n	8004010 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d019      	beq.n	8003fde <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003faa:	4b4a      	ldr	r3, [pc, #296]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a49      	ldr	r2, [pc, #292]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003fb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fb6:	f7fc fa15 	bl	80003e4 <HAL_GetTick>
 8003fba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003fbe:	f7fc fa11 	bl	80003e4 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e1ab      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fd0:	4b40      	ldr	r3, [pc, #256]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x432>
 8003fdc:	e018      	b.n	8004010 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fde:	4b3d      	ldr	r3, [pc, #244]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a3c      	ldr	r2, [pc, #240]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8003fe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fea:	f7fc f9fb 	bl	80003e4 <HAL_GetTick>
 8003fee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ff2:	f7fc f9f7 	bl	80003e4 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e191      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004004:	4b33      	ldr	r3, [pc, #204]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f0      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8086 	beq.w	800412a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800401e:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <HAL_RCC_OscConfig+0x54c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2d      	ldr	r2, [pc, #180]	; (80040d8 <HAL_RCC_OscConfig+0x54c>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004028:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800402a:	f7fc f9db 	bl	80003e4 <HAL_GetTick>
 800402e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004032:	f7fc f9d7 	bl	80003e4 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b64      	cmp	r3, #100	; 0x64
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e171      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004044:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <HAL_RCC_OscConfig+0x54c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d106      	bne.n	8004066 <HAL_RCC_OscConfig+0x4da>
 8004058:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	4a1d      	ldr	r2, [pc, #116]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6713      	str	r3, [r2, #112]	; 0x70
 8004064:	e02d      	b.n	80040c2 <HAL_RCC_OscConfig+0x536>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x4fc>
 800406e:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	6713      	str	r3, [r2, #112]	; 0x70
 800407a:	4b16      	ldr	r3, [pc, #88]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8004080:	f023 0304 	bic.w	r3, r3, #4
 8004084:	6713      	str	r3, [r2, #112]	; 0x70
 8004086:	e01c      	b.n	80040c2 <HAL_RCC_OscConfig+0x536>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b05      	cmp	r3, #5
 800408e:	d10c      	bne.n	80040aa <HAL_RCC_OscConfig+0x51e>
 8004090:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	4a0f      	ldr	r2, [pc, #60]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 8004096:	f043 0304 	orr.w	r3, r3, #4
 800409a:	6713      	str	r3, [r2, #112]	; 0x70
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6713      	str	r3, [r2, #112]	; 0x70
 80040a8:	e00b      	b.n	80040c2 <HAL_RCC_OscConfig+0x536>
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a09      	ldr	r2, [pc, #36]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
 80040b6:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a06      	ldr	r2, [pc, #24]	; (80040d4 <HAL_RCC_OscConfig+0x548>)
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01a      	beq.n	8004100 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ca:	f7fc f98b 	bl	80003e4 <HAL_GetTick>
 80040ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040d0:	e00f      	b.n	80040f2 <HAL_RCC_OscConfig+0x566>
 80040d2:	bf00      	nop
 80040d4:	58024400 	.word	0x58024400
 80040d8:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040dc:	f7fc f982 	bl	80003e4 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e11a      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040f2:	4b8f      	ldr	r3, [pc, #572]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0ee      	beq.n	80040dc <HAL_RCC_OscConfig+0x550>
 80040fe:	e014      	b.n	800412a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fc f970 	bl	80003e4 <HAL_GetTick>
 8004104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004106:	e00a      	b.n	800411e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004108:	f7fc f96c 	bl	80003e4 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	; 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e104      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800411e:	4b84      	ldr	r3, [pc, #528]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1ee      	bne.n	8004108 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80f9 	beq.w	8004326 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004134:	4b7e      	ldr	r3, [pc, #504]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800413c:	2b18      	cmp	r3, #24
 800413e:	f000 80b4 	beq.w	80042aa <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	2b02      	cmp	r3, #2
 8004148:	f040 8095 	bne.w	8004276 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414c:	4b78      	ldr	r3, [pc, #480]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a77      	ldr	r2, [pc, #476]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fc f944 	bl	80003e4 <HAL_GetTick>
 800415c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004160:	f7fc f940 	bl	80003e4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e0da      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004172:	4b6f      	ldr	r3, [pc, #444]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417e:	4b6c      	ldr	r3, [pc, #432]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004182:	4b6c      	ldr	r3, [pc, #432]	; (8004334 <HAL_RCC_OscConfig+0x7a8>)
 8004184:	4013      	ands	r3, r2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800418e:	0112      	lsls	r2, r2, #4
 8004190:	430a      	orrs	r2, r1
 8004192:	4967      	ldr	r1, [pc, #412]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004194:	4313      	orrs	r3, r2
 8004196:	628b      	str	r3, [r1, #40]	; 0x28
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	3b01      	subs	r3, #1
 800419e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a6:	3b01      	subs	r3, #1
 80041a8:	025b      	lsls	r3, r3, #9
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	3b01      	subs	r3, #1
 80041b4:	041b      	lsls	r3, r3, #16
 80041b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c0:	3b01      	subs	r3, #1
 80041c2:	061b      	lsls	r3, r3, #24
 80041c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041c8:	4959      	ldr	r1, [pc, #356]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80041ce:	4b58      	ldr	r3, [pc, #352]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	4a57      	ldr	r2, [pc, #348]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041da:	4b55      	ldr	r3, [pc, #340]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 80041dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041de:	4b56      	ldr	r3, [pc, #344]	; (8004338 <HAL_RCC_OscConfig+0x7ac>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041e6:	00d2      	lsls	r2, r2, #3
 80041e8:	4951      	ldr	r1, [pc, #324]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80041ee:	4b50      	ldr	r3, [pc, #320]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f023 020c 	bic.w	r2, r3, #12
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	494d      	ldr	r1, [pc, #308]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004200:	4b4b      	ldr	r3, [pc, #300]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	f023 0202 	bic.w	r2, r3, #2
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420c:	4948      	ldr	r1, [pc, #288]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004212:	4b47      	ldr	r3, [pc, #284]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	4a46      	ldr	r2, [pc, #280]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421e:	4b44      	ldr	r3, [pc, #272]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	4a43      	ldr	r2, [pc, #268]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004228:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800422a:	4b41      	ldr	r3, [pc, #260]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	4a40      	ldr	r2, [pc, #256]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004234:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004236:	4b3e      	ldr	r3, [pc, #248]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	4a3d      	ldr	r2, [pc, #244]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004242:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a3a      	ldr	r2, [pc, #232]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004248:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800424c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424e:	f7fc f8c9 	bl	80003e4 <HAL_GetTick>
 8004252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004256:	f7fc f8c5 	bl	80003e4 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e05f      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004268:	4b31      	ldr	r3, [pc, #196]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x6ca>
 8004274:	e057      	b.n	8004326 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004276:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a2d      	ldr	r2, [pc, #180]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 800427c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004282:	f7fc f8af 	bl	80003e4 <HAL_GetTick>
 8004286:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800428a:	f7fc f8ab 	bl	80003e4 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e045      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800429c:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f0      	bne.n	800428a <HAL_RCC_OscConfig+0x6fe>
 80042a8:	e03d      	b.n	8004326 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80042aa:	4b21      	ldr	r3, [pc, #132]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80042b0:	4b1f      	ldr	r3, [pc, #124]	; (8004330 <HAL_RCC_OscConfig+0x7a4>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d031      	beq.n	8004322 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f003 0203 	and.w	r2, r3, #3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d12a      	bne.n	8004322 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d8:	429a      	cmp	r2, r3
 80042da:	d122      	bne.n	8004322 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d11a      	bne.n	8004322 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	0a5b      	lsrs	r3, r3, #9
 80042f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d111      	bne.n	8004322 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800430c:	429a      	cmp	r2, r3
 800430e:	d108      	bne.n	8004322 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	0e1b      	lsrs	r3, r3, #24
 8004314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d001      	beq.n	8004326 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3730      	adds	r7, #48	; 0x30
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	58024400 	.word	0x58024400
 8004334:	fffffc0c 	.word	0xfffffc0c
 8004338:	ffff0007 	.word	0xffff0007

0800433c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e19c      	b.n	800468a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004350:	4b8a      	ldr	r3, [pc, #552]	; (800457c <HAL_RCC_ClockConfig+0x240>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d910      	bls.n	8004380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b87      	ldr	r3, [pc, #540]	; (800457c <HAL_RCC_ClockConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 020f 	bic.w	r2, r3, #15
 8004366:	4985      	ldr	r1, [pc, #532]	; (800457c <HAL_RCC_ClockConfig+0x240>)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b83      	ldr	r3, [pc, #524]	; (800457c <HAL_RCC_ClockConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e184      	b.n	800468a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d010      	beq.n	80043ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	4b7b      	ldr	r3, [pc, #492]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004398:	429a      	cmp	r2, r3
 800439a:	d908      	bls.n	80043ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800439c:	4b78      	ldr	r3, [pc, #480]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	4975      	ldr	r1, [pc, #468]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d010      	beq.n	80043dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	4b70      	ldr	r3, [pc, #448]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d908      	bls.n	80043dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043ca:	4b6d      	ldr	r3, [pc, #436]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	496a      	ldr	r1, [pc, #424]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	4b64      	ldr	r3, [pc, #400]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d908      	bls.n	800440a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043f8:	4b61      	ldr	r3, [pc, #388]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	495e      	ldr	r1, [pc, #376]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 8004406:	4313      	orrs	r3, r2
 8004408:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d010      	beq.n	8004438 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	4b59      	ldr	r3, [pc, #356]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004422:	429a      	cmp	r2, r3
 8004424:	d908      	bls.n	8004438 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004426:	4b56      	ldr	r3, [pc, #344]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	4953      	ldr	r1, [pc, #332]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 8004434:	4313      	orrs	r3, r2
 8004436:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d010      	beq.n	8004466 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	4b4d      	ldr	r3, [pc, #308]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	429a      	cmp	r2, r3
 8004452:	d908      	bls.n	8004466 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004454:	4b4a      	ldr	r3, [pc, #296]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	f023 020f 	bic.w	r2, r3, #15
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4947      	ldr	r1, [pc, #284]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 8004462:	4313      	orrs	r3, r2
 8004464:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d055      	beq.n	800451e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004472:	4b43      	ldr	r3, [pc, #268]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	4940      	ldr	r1, [pc, #256]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 8004480:	4313      	orrs	r3, r2
 8004482:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d107      	bne.n	800449c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800448c:	4b3c      	ldr	r3, [pc, #240]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d121      	bne.n	80044dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0f6      	b.n	800468a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044a4:	4b36      	ldr	r3, [pc, #216]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d115      	bne.n	80044dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0ea      	b.n	800468a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d107      	bne.n	80044cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044bc:	4b30      	ldr	r3, [pc, #192]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0de      	b.n	800468a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044cc:	4b2c      	ldr	r3, [pc, #176]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0d6      	b.n	800468a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044dc:	4b28      	ldr	r3, [pc, #160]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f023 0207 	bic.w	r2, r3, #7
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4925      	ldr	r1, [pc, #148]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ee:	f7fb ff79 	bl	80003e4 <HAL_GetTick>
 80044f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f4:	e00a      	b.n	800450c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f6:	f7fb ff75 	bl	80003e4 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f241 3288 	movw	r2, #5000	; 0x1388
 8004504:	4293      	cmp	r3, r2
 8004506:	d901      	bls.n	800450c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e0be      	b.n	800468a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450c:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	429a      	cmp	r2, r3
 800451c:	d1eb      	bne.n	80044f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d010      	beq.n	800454c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	4b14      	ldr	r3, [pc, #80]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	429a      	cmp	r2, r3
 8004538:	d208      	bcs.n	800454c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800453a:	4b11      	ldr	r3, [pc, #68]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f023 020f 	bic.w	r2, r3, #15
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	490e      	ldr	r1, [pc, #56]	; (8004580 <HAL_RCC_ClockConfig+0x244>)
 8004548:	4313      	orrs	r3, r2
 800454a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCC_ClockConfig+0x240>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d214      	bcs.n	8004584 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b08      	ldr	r3, [pc, #32]	; (800457c <HAL_RCC_ClockConfig+0x240>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 020f 	bic.w	r2, r3, #15
 8004562:	4906      	ldr	r1, [pc, #24]	; (800457c <HAL_RCC_ClockConfig+0x240>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b04      	ldr	r3, [pc, #16]	; (800457c <HAL_RCC_ClockConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e086      	b.n	800468a <HAL_RCC_ClockConfig+0x34e>
 800457c:	52002000 	.word	0x52002000
 8004580:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d010      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	4b3f      	ldr	r3, [pc, #252]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800459c:	429a      	cmp	r2, r3
 800459e:	d208      	bcs.n	80045b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045a0:	4b3c      	ldr	r3, [pc, #240]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	4939      	ldr	r1, [pc, #228]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d010      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	4b34      	ldr	r3, [pc, #208]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d208      	bcs.n	80045e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045ce:	4b31      	ldr	r3, [pc, #196]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	492e      	ldr	r1, [pc, #184]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d010      	beq.n	800460e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699a      	ldr	r2, [r3, #24]
 80045f0:	4b28      	ldr	r3, [pc, #160]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d208      	bcs.n	800460e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	4922      	ldr	r1, [pc, #136]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 800460a:	4313      	orrs	r3, r2
 800460c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b00      	cmp	r3, #0
 8004618:	d010      	beq.n	800463c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	4b1d      	ldr	r3, [pc, #116]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004626:	429a      	cmp	r2, r3
 8004628:	d208      	bcs.n	800463c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800462a:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	4917      	ldr	r1, [pc, #92]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 8004638:	4313      	orrs	r3, r2
 800463a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800463c:	f000 f834 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8004640:	4601      	mov	r1, r0
 8004642:	4b14      	ldr	r3, [pc, #80]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	0a1b      	lsrs	r3, r3, #8
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	4a12      	ldr	r2, [pc, #72]	; (8004698 <HAL_RCC_ClockConfig+0x35c>)
 800464e:	5cd3      	ldrb	r3, [r2, r3]
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	fa21 f303 	lsr.w	r3, r1, r3
 8004658:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800465a:	4b0e      	ldr	r3, [pc, #56]	; (8004694 <HAL_RCC_ClockConfig+0x358>)
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	4a0d      	ldr	r2, [pc, #52]	; (8004698 <HAL_RCC_ClockConfig+0x35c>)
 8004664:	5cd3      	ldrb	r3, [r2, r3]
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
 8004670:	4a0a      	ldr	r2, [pc, #40]	; (800469c <HAL_RCC_ClockConfig+0x360>)
 8004672:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004674:	4a0a      	ldr	r2, [pc, #40]	; (80046a0 <HAL_RCC_ClockConfig+0x364>)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800467a:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <HAL_RCC_ClockConfig+0x368>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fb fe66 	bl	8000350 <HAL_InitTick>
 8004684:	4603      	mov	r3, r0
 8004686:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004688:	7bfb      	ldrb	r3, [r7, #15]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	58024400 	.word	0x58024400
 8004698:	0800bd7c 	.word	0x0800bd7c
 800469c:	2000000c 	.word	0x2000000c
 80046a0:	20000008 	.word	0x20000008
 80046a4:	20000000 	.word	0x20000000

080046a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	; 0x24
 80046ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ae:	4baf      	ldr	r3, [pc, #700]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046b6:	2b18      	cmp	r3, #24
 80046b8:	f200 814e 	bhi.w	8004958 <HAL_RCC_GetSysClockFreq+0x2b0>
 80046bc:	a201      	add	r2, pc, #4	; (adr r2, 80046c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80046be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c2:	bf00      	nop
 80046c4:	08004729 	.word	0x08004729
 80046c8:	08004959 	.word	0x08004959
 80046cc:	08004959 	.word	0x08004959
 80046d0:	08004959 	.word	0x08004959
 80046d4:	08004959 	.word	0x08004959
 80046d8:	08004959 	.word	0x08004959
 80046dc:	08004959 	.word	0x08004959
 80046e0:	08004959 	.word	0x08004959
 80046e4:	0800474f 	.word	0x0800474f
 80046e8:	08004959 	.word	0x08004959
 80046ec:	08004959 	.word	0x08004959
 80046f0:	08004959 	.word	0x08004959
 80046f4:	08004959 	.word	0x08004959
 80046f8:	08004959 	.word	0x08004959
 80046fc:	08004959 	.word	0x08004959
 8004700:	08004959 	.word	0x08004959
 8004704:	08004755 	.word	0x08004755
 8004708:	08004959 	.word	0x08004959
 800470c:	08004959 	.word	0x08004959
 8004710:	08004959 	.word	0x08004959
 8004714:	08004959 	.word	0x08004959
 8004718:	08004959 	.word	0x08004959
 800471c:	08004959 	.word	0x08004959
 8004720:	08004959 	.word	0x08004959
 8004724:	0800475b 	.word	0x0800475b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004728:	4b90      	ldr	r3, [pc, #576]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d009      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004734:	4b8d      	ldr	r3, [pc, #564]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	08db      	lsrs	r3, r3, #3
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	4a8c      	ldr	r2, [pc, #560]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
 8004744:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004746:	e10a      	b.n	800495e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004748:	4b89      	ldr	r3, [pc, #548]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800474a:	61bb      	str	r3, [r7, #24]
    break;
 800474c:	e107      	b.n	800495e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800474e:	4b89      	ldr	r3, [pc, #548]	; (8004974 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004750:	61bb      	str	r3, [r7, #24]
    break;
 8004752:	e104      	b.n	800495e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004754:	4b88      	ldr	r3, [pc, #544]	; (8004978 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004756:	61bb      	str	r3, [r7, #24]
    break;
 8004758:	e101      	b.n	800495e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800475a:	4b84      	ldr	r3, [pc, #528]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004764:	4b81      	ldr	r3, [pc, #516]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	091b      	lsrs	r3, r3, #4
 800476a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800476e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004770:	4b7e      	ldr	r3, [pc, #504]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800477a:	4b7c      	ldr	r3, [pc, #496]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800477c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477e:	08db      	lsrs	r3, r3, #3
 8004780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004792:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80da 	beq.w	8004952 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d05a      	beq.n	800485a <HAL_RCC_GetSysClockFreq+0x1b2>
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d302      	bcc.n	80047ae <HAL_RCC_GetSysClockFreq+0x106>
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d078      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x1f6>
 80047ac:	e099      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047ae:	4b6f      	ldr	r3, [pc, #444]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d02d      	beq.n	8004816 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047ba:	4b6c      	ldr	r3, [pc, #432]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	08db      	lsrs	r3, r3, #3
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	4a6a      	ldr	r2, [pc, #424]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80047c6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ca:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	ee07 3a90 	vmov	s15, r3
 80047dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e4:	4b61      	ldr	r3, [pc, #388]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ec:	ee07 3a90 	vmov	s15, r3
 80047f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80047f8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800497c <HAL_RCC_GetSysClockFreq+0x2d4>
 80047fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004810:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004814:	e087      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	ee07 3a90 	vmov	s15, r3
 800481c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004820:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004980 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004824:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004828:	4b50      	ldr	r3, [pc, #320]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004838:	ed97 6a02 	vldr	s12, [r7, #8]
 800483c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800497c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004840:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004844:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004848:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800484c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004854:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004858:	e065      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004864:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004984 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486c:	4b3f      	ldr	r3, [pc, #252]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004880:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800497c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004898:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800489c:	e043      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	ee07 3a90 	vmov	s15, r3
 80048a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004988 <HAL_RCC_GetSysClockFreq+0x2e0>
 80048ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b0:	4b2e      	ldr	r3, [pc, #184]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b8:	ee07 3a90 	vmov	s15, r3
 80048bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80048c4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800497c <HAL_RCC_GetSysClockFreq+0x2d4>
 80048c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e0:	e021      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	ee07 3a90 	vmov	s15, r3
 80048e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004984 <HAL_RCC_GetSysClockFreq+0x2dc>
 80048f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f4:	4b1d      	ldr	r3, [pc, #116]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004904:	ed97 6a02 	vldr	s12, [r7, #8]
 8004908:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800497c <HAL_RCC_GetSysClockFreq+0x2d4>
 800490c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004910:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004918:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004920:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004924:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004926:	4b11      	ldr	r3, [pc, #68]	; (800496c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	0a5b      	lsrs	r3, r3, #9
 800492c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004930:	3301      	adds	r3, #1
 8004932:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800493e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494a:	ee17 3a90 	vmov	r3, s15
 800494e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004950:	e005      	b.n	800495e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
    break;
 8004956:	e002      	b.n	800495e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800495a:	61bb      	str	r3, [r7, #24]
    break;
 800495c:	bf00      	nop
  }

  return sysclockfreq;
 800495e:	69bb      	ldr	r3, [r7, #24]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3724      	adds	r7, #36	; 0x24
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	58024400 	.word	0x58024400
 8004970:	03d09000 	.word	0x03d09000
 8004974:	003d0900 	.word	0x003d0900
 8004978:	017d7840 	.word	0x017d7840
 800497c:	46000000 	.word	0x46000000
 8004980:	4c742400 	.word	0x4c742400
 8004984:	4a742400 	.word	0x4a742400
 8004988:	4bbebc20 	.word	0x4bbebc20

0800498c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004992:	f7ff fe89 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8004996:	4601      	mov	r1, r0
 8004998:	4b10      	ldr	r3, [pc, #64]	; (80049dc <HAL_RCC_GetHCLKFreq+0x50>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	4a0f      	ldr	r2, [pc, #60]	; (80049e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80049a4:	5cd3      	ldrb	r3, [r2, r3]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	fa21 f303 	lsr.w	r3, r1, r3
 80049ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <HAL_RCC_GetHCLKFreq+0x50>)
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	4a09      	ldr	r2, [pc, #36]	; (80049e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80049ba:	5cd3      	ldrb	r3, [r2, r3]
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	fa22 f303 	lsr.w	r3, r2, r3
 80049c6:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80049c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049ca:	4a07      	ldr	r2, [pc, #28]	; (80049e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80049d2:	681b      	ldr	r3, [r3, #0]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	58024400 	.word	0x58024400
 80049e0:	0800bd7c 	.word	0x0800bd7c
 80049e4:	2000000c 	.word	0x2000000c
 80049e8:	20000008 	.word	0x20000008

080049ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049f4:	2300      	movs	r3, #0
 80049f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049f8:	2300      	movs	r3, #0
 80049fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d03d      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a10:	d013      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a16:	d802      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d007      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004a1c:	e01f      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004a1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a22:	d013      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004a24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a28:	d01c      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004a2a:	e018      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2c:	4baf      	ldr	r3, [pc, #700]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	4aae      	ldr	r2, [pc, #696]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a38:	e015      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	2102      	movs	r1, #2
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 fd23 	bl	800648c <RCCEx_PLL2_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a4a:	e00c      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3324      	adds	r3, #36	; 0x24
 8004a50:	2102      	movs	r1, #2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 fdcc 	bl	80065f0 <RCCEx_PLL3_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a5c:	e003      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]
      break;
 8004a62:	e000      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a6c:	4b9f      	ldr	r3, [pc, #636]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a78:	499c      	ldr	r1, [pc, #624]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	650b      	str	r3, [r1, #80]	; 0x50
 8004a7e:	e001      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d03d      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d826      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ab5 	.word	0x08004ab5
 8004aa4:	08004ac3 	.word	0x08004ac3
 8004aa8:	08004ad5 	.word	0x08004ad5
 8004aac:	08004aed 	.word	0x08004aed
 8004ab0:	08004aed 	.word	0x08004aed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab4:	4b8d      	ldr	r3, [pc, #564]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	4a8c      	ldr	r2, [pc, #560]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004abe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ac0:	e015      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 fcdf 	bl	800648c <RCCEx_PLL2_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ad2:	e00c      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3324      	adds	r3, #36	; 0x24
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 fd88 	bl	80065f0 <RCCEx_PLL3_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ae4:	e003      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aea:	e000      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aee:	7dfb      	ldrb	r3, [r7, #23]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004af4:	4b7d      	ldr	r3, [pc, #500]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af8:	f023 0207 	bic.w	r2, r3, #7
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b00:	497a      	ldr	r1, [pc, #488]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	650b      	str	r3, [r1, #80]	; 0x50
 8004b06:	e001      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d03e      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1c:	2b80      	cmp	r3, #128	; 0x80
 8004b1e:	d01c      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004b20:	2b80      	cmp	r3, #128	; 0x80
 8004b22:	d804      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d00d      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004b2c:	e01e      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004b2e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b30:	d01f      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d01e      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b38:	e018      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3a:	4b6c      	ldr	r3, [pc, #432]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	4a6b      	ldr	r2, [pc, #428]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b46:	e017      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 fc9c 	bl	800648c <RCCEx_PLL2_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b58:	e00e      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3324      	adds	r3, #36	; 0x24
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 fd45 	bl	80065f0 <RCCEx_PLL3_Config>
 8004b66:	4603      	mov	r3, r0
 8004b68:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b6a:	e005      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b70:	e002      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004b72:	bf00      	nop
 8004b74:	e000      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b7e:	4b5b      	ldr	r3, [pc, #364]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b82:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8a:	4958      	ldr	r1, [pc, #352]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	650b      	str	r3, [r1, #80]	; 0x50
 8004b90:	e001      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b92:	7dfb      	ldrb	r3, [r7, #23]
 8004b94:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d044      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bac:	d01f      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb2:	d805      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bbc:	d00e      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004bbe:	e01f      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004bc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bc4:	d01f      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004bc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bca:	d01e      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004bcc:	e018      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bce:	4b47      	ldr	r3, [pc, #284]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	4a46      	ldr	r2, [pc, #280]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bda:	e017      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3304      	adds	r3, #4
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 fc52 	bl	800648c <RCCEx_PLL2_Config>
 8004be8:	4603      	mov	r3, r0
 8004bea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004bec:	e00e      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3324      	adds	r3, #36	; 0x24
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f001 fcfb 	bl	80065f0 <RCCEx_PLL3_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bfe:	e005      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	75fb      	strb	r3, [r7, #23]
      break;
 8004c04:	e002      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004c06:	bf00      	nop
 8004c08:	e000      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c12:	4b36      	ldr	r3, [pc, #216]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c20:	4932      	ldr	r1, [pc, #200]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	658b      	str	r3, [r1, #88]	; 0x58
 8004c26:	e001      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d044      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c42:	d01f      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004c44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c48:	d805      	bhi.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004c4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c52:	d00e      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004c54:	e01f      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004c56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c5a:	d01f      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c60:	d01e      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004c62:	e018      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c64:	4b21      	ldr	r3, [pc, #132]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	4a20      	ldr	r2, [pc, #128]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c70:	e017      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 fc07 	bl	800648c <RCCEx_PLL2_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c82:	e00e      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3324      	adds	r3, #36	; 0x24
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f001 fcb0 	bl	80065f0 <RCCEx_PLL3_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c94:	e005      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9a:	e002      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004c9c:	bf00      	nop
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ca8:	4b10      	ldr	r3, [pc, #64]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cb6:	490d      	ldr	r1, [pc, #52]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	658b      	str	r3, [r1, #88]	; 0x58
 8004cbc:	e001      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d035      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd2:	2b10      	cmp	r3, #16
 8004cd4:	d00c      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004cd6:	2b10      	cmp	r3, #16
 8004cd8:	d802      	bhi.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01b      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004cde:	e017      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d00c      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004ce4:	2b30      	cmp	r3, #48	; 0x30
 8004ce6:	d018      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004ce8:	e012      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004cea:	bf00      	nop
 8004cec:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf0:	4baf      	ldr	r3, [pc, #700]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4aae      	ldr	r2, [pc, #696]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004cfc:	e00e      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	2102      	movs	r1, #2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 fbc1 	bl	800648c <RCCEx_PLL2_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d0e:	e005      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	75fb      	strb	r3, [r7, #23]
      break;
 8004d14:	e002      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004d16:	bf00      	nop
 8004d18:	e000      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d22:	4ba3      	ldr	r3, [pc, #652]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2e:	49a0      	ldr	r1, [pc, #640]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d34:	e001      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d042      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4e:	d01f      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d54:	d805      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5e:	d00e      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004d60:	e01f      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004d62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d66:	d01f      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d6c:	d01e      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004d6e:	e018      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d70:	4b8f      	ldr	r3, [pc, #572]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4a8e      	ldr	r2, [pc, #568]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d7c:	e017      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 fb81 	bl	800648c <RCCEx_PLL2_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d8e:	e00e      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3324      	adds	r3, #36	; 0x24
 8004d94:	2100      	movs	r1, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 fc2a 	bl	80065f0 <RCCEx_PLL3_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004da0:	e005      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	75fb      	strb	r3, [r7, #23]
      break;
 8004da6:	e002      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004da8:	bf00      	nop
 8004daa:	e000      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004db4:	4b7e      	ldr	r3, [pc, #504]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc0:	497b      	ldr	r1, [pc, #492]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	650b      	str	r3, [r1, #80]	; 0x50
 8004dc6:	e001      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d042      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004de0:	d01b      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004de6:	d805      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d022      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df0:	d00a      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004df2:	e01b      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004df4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004df8:	d01d      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dfe:	d01c      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004e00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e04:	d01b      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004e06:	e011      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 fb3c 	bl	800648c <RCCEx_PLL2_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e18:	e012      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3324      	adds	r3, #36	; 0x24
 8004e1e:	2101      	movs	r1, #1
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 fbe5 	bl	80065f0 <RCCEx_PLL3_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e2a:	e009      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e30:	e006      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004e32:	bf00      	nop
 8004e34:	e004      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004e36:	bf00      	nop
 8004e38:	e002      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e46:	4b5a      	ldr	r3, [pc, #360]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e52:	4957      	ldr	r1, [pc, #348]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	650b      	str	r3, [r1, #80]	; 0x50
 8004e58:	e001      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5a:	7dfb      	ldrb	r3, [r7, #23]
 8004e5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d044      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e74:	d01b      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e7a:	d805      	bhi.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d022      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004e80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004e86:	e01b      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8c:	d01d      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e92:	d01c      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004e94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e98:	d01b      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e9a:	e011      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 faf2 	bl	800648c <RCCEx_PLL2_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004eac:	e012      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3324      	adds	r3, #36	; 0x24
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 fb9b 	bl	80065f0 <RCCEx_PLL3_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ebe:	e009      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec4:	e006      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e004      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004eca:	bf00      	nop
 8004ecc:	e002      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004ece:	bf00      	nop
 8004ed0:	e000      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004eda:	4b35      	ldr	r3, [pc, #212]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ede:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ee8:	4931      	ldr	r1, [pc, #196]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	658b      	str	r3, [r1, #88]	; 0x58
 8004eee:	e001      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d02d      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f08:	d005      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f0e:	d009      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d013      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004f14:	e00f      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f16:	4b26      	ldr	r3, [pc, #152]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	4a25      	ldr	r2, [pc, #148]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f22:	e00c      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	2101      	movs	r1, #1
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f001 faae 	bl	800648c <RCCEx_PLL2_Config>
 8004f30:	4603      	mov	r3, r0
 8004f32:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f34:	e003      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	75fb      	strb	r3, [r7, #23]
      break;
 8004f3a:	e000      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f44:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f50:	4917      	ldr	r1, [pc, #92]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	650b      	str	r3, [r1, #80]	; 0x50
 8004f56:	e001      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d035      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d81b      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f70:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f76:	bf00      	nop
 8004f78:	08004fb5 	.word	0x08004fb5
 8004f7c:	08004f89 	.word	0x08004f89
 8004f80:	08004f97 	.word	0x08004f97
 8004f84:	08004fb5 	.word	0x08004fb5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f94:	e00f      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	2102      	movs	r1, #2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f001 fa75 	bl	800648c <RCCEx_PLL2_Config>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004fa6:	e006      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	75fb      	strb	r3, [r7, #23]
      break;
 8004fac:	e003      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004fae:	bf00      	nop
 8004fb0:	58024400 	.word	0x58024400
      break;
 8004fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004fbc:	4bba      	ldr	r3, [pc, #744]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc0:	f023 0203 	bic.w	r2, r3, #3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc8:	49b7      	ldr	r1, [pc, #732]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004fce:	e001      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
 8004fd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8086 	beq.w	80050ee <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fe2:	4bb2      	ldr	r3, [pc, #712]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4ab1      	ldr	r2, [pc, #708]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fee:	f7fb f9f9 	bl	80003e4 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ff4:	e009      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff6:	f7fb f9f5 	bl	80003e4 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b64      	cmp	r3, #100	; 0x64
 8005002:	d902      	bls.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	75fb      	strb	r3, [r7, #23]
        break;
 8005008:	e005      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800500a:	4ba8      	ldr	r3, [pc, #672]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0ef      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d166      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800501c:	4ba2      	ldr	r3, [pc, #648]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800501e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005026:	4053      	eors	r3, r2
 8005028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502c:	2b00      	cmp	r3, #0
 800502e:	d013      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005030:	4b9d      	ldr	r3, [pc, #628]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005038:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800503a:	4b9b      	ldr	r3, [pc, #620]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	4a9a      	ldr	r2, [pc, #616]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005044:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005046:	4b98      	ldr	r3, [pc, #608]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	4a97      	ldr	r2, [pc, #604]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800504c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005050:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005052:	4a95      	ldr	r2, [pc, #596]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800505e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005062:	d115      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fb f9be 	bl	80003e4 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800506a:	e00b      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506c:	f7fb f9ba 	bl	80003e4 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d902      	bls.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	75fb      	strb	r3, [r7, #23]
            break;
 8005082:	e005      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005084:	4b88      	ldr	r3, [pc, #544]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0ed      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005090:	7dfb      	ldrb	r3, [r7, #23]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d126      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800509c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a4:	d10d      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80050a6:	4b80      	ldr	r3, [pc, #512]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050b4:	0919      	lsrs	r1, r3, #4
 80050b6:	4b7e      	ldr	r3, [pc, #504]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80050b8:	400b      	ands	r3, r1
 80050ba:	497b      	ldr	r1, [pc, #492]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	610b      	str	r3, [r1, #16]
 80050c0:	e005      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80050c2:	4b79      	ldr	r3, [pc, #484]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	4a78      	ldr	r2, [pc, #480]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050cc:	6113      	str	r3, [r2, #16]
 80050ce:	4b76      	ldr	r3, [pc, #472]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050dc:	4972      	ldr	r1, [pc, #456]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	670b      	str	r3, [r1, #112]	; 0x70
 80050e2:	e004      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	75bb      	strb	r3, [r7, #22]
 80050e8:	e001      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ea:	7dfb      	ldrb	r3, [r7, #23]
 80050ec:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d07d      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050fe:	2b28      	cmp	r3, #40	; 0x28
 8005100:	d866      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	080051d7 	.word	0x080051d7
 800510c:	080051d1 	.word	0x080051d1
 8005110:	080051d1 	.word	0x080051d1
 8005114:	080051d1 	.word	0x080051d1
 8005118:	080051d1 	.word	0x080051d1
 800511c:	080051d1 	.word	0x080051d1
 8005120:	080051d1 	.word	0x080051d1
 8005124:	080051d1 	.word	0x080051d1
 8005128:	080051ad 	.word	0x080051ad
 800512c:	080051d1 	.word	0x080051d1
 8005130:	080051d1 	.word	0x080051d1
 8005134:	080051d1 	.word	0x080051d1
 8005138:	080051d1 	.word	0x080051d1
 800513c:	080051d1 	.word	0x080051d1
 8005140:	080051d1 	.word	0x080051d1
 8005144:	080051d1 	.word	0x080051d1
 8005148:	080051bf 	.word	0x080051bf
 800514c:	080051d1 	.word	0x080051d1
 8005150:	080051d1 	.word	0x080051d1
 8005154:	080051d1 	.word	0x080051d1
 8005158:	080051d1 	.word	0x080051d1
 800515c:	080051d1 	.word	0x080051d1
 8005160:	080051d1 	.word	0x080051d1
 8005164:	080051d1 	.word	0x080051d1
 8005168:	080051d7 	.word	0x080051d7
 800516c:	080051d1 	.word	0x080051d1
 8005170:	080051d1 	.word	0x080051d1
 8005174:	080051d1 	.word	0x080051d1
 8005178:	080051d1 	.word	0x080051d1
 800517c:	080051d1 	.word	0x080051d1
 8005180:	080051d1 	.word	0x080051d1
 8005184:	080051d1 	.word	0x080051d1
 8005188:	080051d7 	.word	0x080051d7
 800518c:	080051d1 	.word	0x080051d1
 8005190:	080051d1 	.word	0x080051d1
 8005194:	080051d1 	.word	0x080051d1
 8005198:	080051d1 	.word	0x080051d1
 800519c:	080051d1 	.word	0x080051d1
 80051a0:	080051d1 	.word	0x080051d1
 80051a4:	080051d1 	.word	0x080051d1
 80051a8:	080051d7 	.word	0x080051d7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3304      	adds	r3, #4
 80051b0:	2101      	movs	r1, #1
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 f96a 	bl	800648c <RCCEx_PLL2_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80051bc:	e00c      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3324      	adds	r3, #36	; 0x24
 80051c2:	2101      	movs	r1, #1
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 fa13 	bl	80065f0 <RCCEx_PLL3_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80051ce:	e003      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	75fb      	strb	r3, [r7, #23]
      break;
 80051d4:	e000      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80051d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051de:	4b32      	ldr	r3, [pc, #200]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ea:	492f      	ldr	r1, [pc, #188]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	654b      	str	r3, [r1, #84]	; 0x54
 80051f0:	e001      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
 80051f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d037      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005206:	2b05      	cmp	r3, #5
 8005208:	d820      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800520a:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005253 	.word	0x08005253
 8005214:	08005229 	.word	0x08005229
 8005218:	0800523b 	.word	0x0800523b
 800521c:	08005253 	.word	0x08005253
 8005220:	08005253 	.word	0x08005253
 8005224:	08005253 	.word	0x08005253
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	2101      	movs	r1, #1
 800522e:	4618      	mov	r0, r3
 8005230:	f001 f92c 	bl	800648c <RCCEx_PLL2_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005238:	e00c      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3324      	adds	r3, #36	; 0x24
 800523e:	2101      	movs	r1, #1
 8005240:	4618      	mov	r0, r3
 8005242:	f001 f9d5 	bl	80065f0 <RCCEx_PLL3_Config>
 8005246:	4603      	mov	r3, r0
 8005248:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800524a:	e003      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	75fb      	strb	r3, [r7, #23]
      break;
 8005250:	e000      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005254:	7dfb      	ldrb	r3, [r7, #23]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	f023 0207 	bic.w	r2, r3, #7
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005266:	4910      	ldr	r1, [pc, #64]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	654b      	str	r3, [r1, #84]	; 0x54
 800526c:	e001      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526e:	7dfb      	ldrb	r3, [r7, #23]
 8005270:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d040      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005284:	2b05      	cmp	r3, #5
 8005286:	d827      	bhi.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005288:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052df 	.word	0x080052df
 8005294:	080052b5 	.word	0x080052b5
 8005298:	080052c7 	.word	0x080052c7
 800529c:	080052df 	.word	0x080052df
 80052a0:	080052df 	.word	0x080052df
 80052a4:	080052df 	.word	0x080052df
 80052a8:	58024400 	.word	0x58024400
 80052ac:	58024800 	.word	0x58024800
 80052b0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3304      	adds	r3, #4
 80052b8:	2101      	movs	r1, #1
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 f8e6 	bl	800648c <RCCEx_PLL2_Config>
 80052c0:	4603      	mov	r3, r0
 80052c2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80052c4:	e00c      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3324      	adds	r3, #36	; 0x24
 80052ca:	2101      	movs	r1, #1
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 f98f 	bl	80065f0 <RCCEx_PLL3_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80052d6:	e003      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	75fb      	strb	r3, [r7, #23]
      break;
 80052dc:	e000      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80052de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10a      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052e6:	4bb2      	ldr	r3, [pc, #712]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80052e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ea:	f023 0207 	bic.w	r2, r3, #7
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f4:	49ae      	ldr	r1, [pc, #696]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	658b      	str	r3, [r1, #88]	; 0x58
 80052fa:	e001      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
 80052fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d044      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005316:	d01b      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800531c:	d805      	bhi.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d022      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005328:	e01b      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800532a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532e:	d01d      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005334:	d01c      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005336:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800533a:	d01b      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800533c:	e011      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3304      	adds	r3, #4
 8005342:	2100      	movs	r1, #0
 8005344:	4618      	mov	r0, r3
 8005346:	f001 f8a1 	bl	800648c <RCCEx_PLL2_Config>
 800534a:	4603      	mov	r3, r0
 800534c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800534e:	e012      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3324      	adds	r3, #36	; 0x24
 8005354:	2102      	movs	r1, #2
 8005356:	4618      	mov	r0, r3
 8005358:	f001 f94a 	bl	80065f0 <RCCEx_PLL3_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005360:	e009      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	75fb      	strb	r3, [r7, #23]
      break;
 8005366:	e006      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005368:	bf00      	nop
 800536a:	e004      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800536c:	bf00      	nop
 800536e:	e002      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005370:	bf00      	nop
 8005372:	e000      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005376:	7dfb      	ldrb	r3, [r7, #23]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800537c:	4b8c      	ldr	r3, [pc, #560]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800538a:	4989      	ldr	r1, [pc, #548]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800538c:	4313      	orrs	r3, r2
 800538e:	654b      	str	r3, [r1, #84]	; 0x54
 8005390:	e001      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d044      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ac:	d01b      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80053ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b2:	d805      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d022      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80053b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053bc:	d00a      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80053be:	e01b      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80053c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c4:	d01d      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80053c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80053ca:	d01c      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80053cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053d0:	d01b      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80053d2:	e011      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3304      	adds	r3, #4
 80053d8:	2100      	movs	r1, #0
 80053da:	4618      	mov	r0, r3
 80053dc:	f001 f856 	bl	800648c <RCCEx_PLL2_Config>
 80053e0:	4603      	mov	r3, r0
 80053e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80053e4:	e012      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3324      	adds	r3, #36	; 0x24
 80053ea:	2102      	movs	r1, #2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f001 f8ff 	bl	80065f0 <RCCEx_PLL3_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80053f6:	e009      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	75fb      	strb	r3, [r7, #23]
      break;
 80053fc:	e006      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80053fe:	bf00      	nop
 8005400:	e004      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005402:	bf00      	nop
 8005404:	e002      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005406:	bf00      	nop
 8005408:	e000      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800540a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800540c:	7dfb      	ldrb	r3, [r7, #23]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005412:	4b67      	ldr	r3, [pc, #412]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005416:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005420:	4963      	ldr	r1, [pc, #396]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005422:	4313      	orrs	r3, r2
 8005424:	658b      	str	r3, [r1, #88]	; 0x58
 8005426:	e001      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005428:	7dfb      	ldrb	r3, [r7, #23]
 800542a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005434:	2b00      	cmp	r3, #0
 8005436:	d044      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800543e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005442:	d01b      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005448:	d805      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d022      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800544e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005452:	d00a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005454:	e01b      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800545a:	d01d      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800545c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005460:	d01c      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005462:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005466:	d01b      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005468:	e011      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3304      	adds	r3, #4
 800546e:	2100      	movs	r1, #0
 8005470:	4618      	mov	r0, r3
 8005472:	f001 f80b 	bl	800648c <RCCEx_PLL2_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800547a:	e012      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3324      	adds	r3, #36	; 0x24
 8005480:	2102      	movs	r1, #2
 8005482:	4618      	mov	r0, r3
 8005484:	f001 f8b4 	bl	80065f0 <RCCEx_PLL3_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800548c:	e009      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	75fb      	strb	r3, [r7, #23]
      break;
 8005492:	e006      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005494:	bf00      	nop
 8005496:	e004      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005498:	bf00      	nop
 800549a:	e002      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800549c:	bf00      	nop
 800549e:	e000      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80054a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80054a8:	4b41      	ldr	r3, [pc, #260]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80054aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054b6:	493e      	ldr	r1, [pc, #248]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	658b      	str	r3, [r1, #88]	; 0x58
 80054bc:	e001      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054be:	7dfb      	ldrb	r3, [r7, #23]
 80054c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d8:	d10a      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3324      	adds	r3, #36	; 0x24
 80054de:	2102      	movs	r1, #2
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 f885 	bl	80065f0 <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054f0:	4b2f      	ldr	r3, [pc, #188]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80054f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fe:	492c      	ldr	r1, [pc, #176]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005500:	4313      	orrs	r3, r2
 8005502:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01a      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551a:	d10a      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3324      	adds	r3, #36	; 0x24
 8005520:	2102      	movs	r1, #2
 8005522:	4618      	mov	r0, r3
 8005524:	f001 f864 	bl	80065f0 <RCCEx_PLL3_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005532:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005540:	491b      	ldr	r1, [pc, #108]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005542:	4313      	orrs	r3, r2
 8005544:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d032      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555c:	d00d      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800555e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005562:	d016      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d111      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	2100      	movs	r1, #0
 800556e:	4618      	mov	r0, r3
 8005570:	f000 ff8c 	bl	800648c <RCCEx_PLL2_Config>
 8005574:	4603      	mov	r3, r0
 8005576:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005578:	e00c      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3324      	adds	r3, #36	; 0x24
 800557e:	2102      	movs	r1, #2
 8005580:	4618      	mov	r0, r3
 8005582:	f001 f835 	bl	80065f0 <RCCEx_PLL3_Config>
 8005586:	4603      	mov	r3, r0
 8005588:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800558a:	e003      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	75fb      	strb	r3, [r7, #23]
      break;
 8005590:	e000      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005592:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10c      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800559a:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800559c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055a8:	4901      	ldr	r1, [pc, #4]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	658b      	str	r3, [r1, #88]	; 0x58
 80055ae:	e003      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80055b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d02f      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055ce:	d00c      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80055d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055d4:	d015      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80055d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055da:	d10f      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055dc:	4b71      	ldr	r3, [pc, #452]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	4a70      	ldr	r2, [pc, #448]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80055e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80055e8:	e00c      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3324      	adds	r3, #36	; 0x24
 80055ee:	2101      	movs	r1, #1
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fffd 	bl	80065f0 <RCCEx_PLL3_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80055fa:	e003      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005600:	e000      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005602:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10a      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800560a:	4b66      	ldr	r3, [pc, #408]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800560c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005618:	4962      	ldr	r1, [pc, #392]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800561a:	4313      	orrs	r3, r2
 800561c:	654b      	str	r3, [r1, #84]	; 0x54
 800561e:	e001      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005620:	7dfb      	ldrb	r3, [r7, #23]
 8005622:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d029      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563c:	d007      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800563e:	e00f      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005640:	4b58      	ldr	r3, [pc, #352]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	4a57      	ldr	r2, [pc, #348]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800564a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800564c:	e00b      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3304      	adds	r3, #4
 8005652:	2102      	movs	r1, #2
 8005654:	4618      	mov	r0, r3
 8005656:	f000 ff19 	bl	800648c <RCCEx_PLL2_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800565e:	e002      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	75fb      	strb	r3, [r7, #23]
      break;
 8005664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005666:	7dfb      	ldrb	r3, [r7, #23]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800566c:	4b4d      	ldr	r3, [pc, #308]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800566e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005670:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005678:	494a      	ldr	r1, [pc, #296]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800567a:	4313      	orrs	r3, r2
 800567c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800567e:	e001      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3324      	adds	r3, #36	; 0x24
 8005694:	2102      	movs	r1, #2
 8005696:	4618      	mov	r0, r3
 8005698:	f000 ffaa 	bl	80065f0 <RCCEx_PLL3_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d02f      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ba:	d00c      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80056bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c0:	d802      	bhi.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d011      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80056c6:	e00d      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80056c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056cc:	d00f      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80056ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056d2:	d00e      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80056d4:	e006      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d6:	4b33      	ldr	r3, [pc, #204]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	4a32      	ldr	r2, [pc, #200]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80056dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80056e2:	e007      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	75fb      	strb	r3, [r7, #23]
      break;
 80056e8:	e004      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80056ea:	bf00      	nop
 80056ec:	e002      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80056ee:	bf00      	nop
 80056f0:	e000      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80056f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f4:	7dfb      	ldrb	r3, [r7, #23]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d109      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056fa:	4b2a      	ldr	r3, [pc, #168]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80056fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005706:	4927      	ldr	r1, [pc, #156]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005708:	4313      	orrs	r3, r2
 800570a:	654b      	str	r3, [r1, #84]	; 0x54
 800570c:	e001      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570e:	7dfb      	ldrb	r3, [r7, #23]
 8005710:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d008      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800571e:	4b21      	ldr	r3, [pc, #132]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005722:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572a:	491e      	ldr	r1, [pc, #120]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800572c:	4313      	orrs	r3, r2
 800572e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800573c:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800573e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005740:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005748:	4916      	ldr	r1, [pc, #88]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800574a:	4313      	orrs	r3, r2
 800574c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00d      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800575a:	4b12      	ldr	r3, [pc, #72]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	4a11      	ldr	r2, [pc, #68]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005760:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005764:	6113      	str	r3, [r2, #16]
 8005766:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005770:	490c      	ldr	r1, [pc, #48]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005772:	4313      	orrs	r3, r2
 8005774:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	da08      	bge.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800577e:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005782:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578a:	4906      	ldr	r1, [pc, #24]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800578c:	4313      	orrs	r3, r2
 800578e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005790:	7dbb      	ldrb	r3, [r7, #22]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	e000      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	58024400 	.word	0x58024400

080057a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b090      	sub	sp, #64	; 0x40
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b6:	d150      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80057b8:	4ba1      	ldr	r3, [pc, #644]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80057ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d844      	bhi.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80057c8:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	080057e5 	.word	0x080057e5
 80057d4:	080057f5 	.word	0x080057f5
 80057d8:	08005805 	.word	0x08005805
 80057dc:	0800584d 	.word	0x0800584d
 80057e0:	08005815 	.word	0x08005815
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fd03 	bl	80061f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057f2:	e241      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057f4:	f107 0318 	add.w	r3, r7, #24
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fa63 	bl	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005802:	e239      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005804:	f107 030c 	add.w	r3, r7, #12
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fba7 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005812:	e231      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005814:	4b8a      	ldr	r3, [pc, #552]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005818:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800581c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800581e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005820:	2b00      	cmp	r3, #0
 8005822:	d102      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005824:	4b87      	ldr	r3, [pc, #540]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005828:	e226      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800582a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005830:	d102      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8005832:	4b85      	ldr	r3, [pc, #532]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005836:	e21f      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800583e:	d102      	bne.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8005840:	4b82      	ldr	r3, [pc, #520]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005844:	e218      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800584a:	e215      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800584c:	4b80      	ldr	r3, [pc, #512]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005850:	e212      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005856:	bf00      	nop
 8005858:	e20e      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005860:	d14f      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005862:	4b77      	ldr	r3, [pc, #476]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005866:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800586a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	2b80      	cmp	r3, #128	; 0x80
 8005870:	d01c      	beq.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005872:	2b80      	cmp	r3, #128	; 0x80
 8005874:	d804      	bhi.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d008      	beq.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800587a:	2b40      	cmp	r3, #64	; 0x40
 800587c:	d00e      	beq.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800587e:	e03c      	b.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8005880:	2bc0      	cmp	r3, #192	; 0xc0
 8005882:	d037      	beq.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005888:	d018      	beq.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800588a:	e036      	b.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800588c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fcaf 	bl	80061f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800589a:	e1ed      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800589c:	f107 0318 	add.w	r3, r7, #24
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fa0f 	bl	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058aa:	e1e5      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ac:	f107 030c 	add.w	r3, r7, #12
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fb53 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ba:	e1dd      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80058bc:	4b60      	ldr	r3, [pc, #384]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80058be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80058cc:	4b5d      	ldr	r3, [pc, #372]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80058d0:	e1d2      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80058d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058d8:	d102      	bne.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80058da:	4b5b      	ldr	r3, [pc, #364]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058de:	e1cb      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058e6:	d102      	bne.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80058e8:	4b58      	ldr	r3, [pc, #352]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80058ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ec:	e1c4      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058f2:	e1c1      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80058f4:	4b56      	ldr	r3, [pc, #344]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80058f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058f8:	e1be      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058fe:	bf00      	nop
 8005900:	e1ba      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005908:	d153      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800590a:	4b4d      	ldr	r3, [pc, #308]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800590c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005912:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800591a:	d01f      	beq.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800591c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005920:	d805      	bhi.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800592a:	d00f      	beq.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800592c:	e03d      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800592e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005932:	d037      	beq.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005934:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005938:	d018      	beq.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800593a:	e036      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800593c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fc57 	bl	80061f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800594a:	e195      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800594c:	f107 0318 	add.w	r3, r7, #24
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f9b7 	bl	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800595a:	e18d      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800595c:	f107 030c 	add.w	r3, r7, #12
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fafb 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800596a:	e185      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800596c:	4b34      	ldr	r3, [pc, #208]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800596e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005974:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800597c:	4b31      	ldr	r3, [pc, #196]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005980:	e17a      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005988:	d102      	bne.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800598a:	4b2f      	ldr	r3, [pc, #188]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800598c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800598e:	e173      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005996:	d102      	bne.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8005998:	4b2c      	ldr	r3, [pc, #176]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800599c:	e16c      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059a2:	e169      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80059a4:	4b2a      	ldr	r3, [pc, #168]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80059a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059a8:	e166      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059ae:	bf00      	nop
 80059b0:	e162      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b8:	d15d      	bne.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80059ba:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059be:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80059c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059ca:	d01f      	beq.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80059cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059d0:	d805      	bhi.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80059d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059da:	d00f      	beq.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80059dc:	e047      	b.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80059de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059e2:	d041      	beq.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80059e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059e8:	d018      	beq.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80059ea:	e040      	b.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fbff 	bl	80061f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059fa:	e13d      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059fc:	f107 0318 	add.w	r3, r7, #24
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 f95f 	bl	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a0a:	e135      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a0c:	f107 030c 	add.w	r3, r7, #12
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 faa3 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a1a:	e12d      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005a1c:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005a30:	e122      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a38:	d10c      	bne.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8005a3a:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a3e:	e11b      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005a40:	58024400 	.word	0x58024400
 8005a44:	03d09000 	.word	0x03d09000
 8005a48:	003d0900 	.word	0x003d0900
 8005a4c:	017d7840 	.word	0x017d7840
 8005a50:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5a:	d102      	bne.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8005a5c:	4b89      	ldr	r3, [pc, #548]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a60:	e10a      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a66:	e107      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a68:	4b87      	ldr	r3, [pc, #540]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a6c:	e104      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a72:	bf00      	nop
 8005a74:	e100      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7c:	d153      	bne.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005a7e:	4b83      	ldr	r3, [pc, #524]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a82:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005a86:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a8e:	d01f      	beq.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a94:	d805      	bhi.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9e:	d00f      	beq.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005aa0:	e03d      	b.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005aa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005aa6:	d037      	beq.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aac:	d018      	beq.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005aae:	e036      	b.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fb9d 	bl	80061f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005abe:	e0db      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ac0:	f107 0318 	add.w	r3, r7, #24
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 f8fd 	bl	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ace:	e0d3      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ad0:	f107 030c 	add.w	r3, r7, #12
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 fa41 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ade:	e0cb      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005ae0:	4b6a      	ldr	r3, [pc, #424]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ae8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005af0:	4b67      	ldr	r3, [pc, #412]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005af4:	e0c0      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005afc:	d102      	bne.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8005afe:	4b65      	ldr	r3, [pc, #404]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005b00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b02:	e0b9      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b0a:	d102      	bne.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8005b0c:	4b5d      	ldr	r3, [pc, #372]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b10:	e0b2      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b16:	e0af      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b18:	4b5b      	ldr	r3, [pc, #364]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b1c:	e0ac      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b22:	bf00      	nop
 8005b24:	e0a8      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b2c:	d13d      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005b2e:	4b57      	ldr	r3, [pc, #348]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b36:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3e:	d00c      	beq.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b44:	d011      	beq.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d12b      	bne.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b4a:	f107 0318 	add.w	r3, r7, #24
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 f8b8 	bl	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b58:	e08e      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b5a:	f107 030c 	add.w	r3, r7, #12
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f9fc 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b68:	e086      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b6a:	4b48      	ldr	r3, [pc, #288]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b72:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005b7a:	4b45      	ldr	r3, [pc, #276]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005b7e:	e07b      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b86:	d102      	bne.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8005b88:	4b42      	ldr	r3, [pc, #264]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b8c:	e074      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b94:	d102      	bne.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8005b96:	4b3b      	ldr	r3, [pc, #236]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b9a:	e06d      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ba0:	e06a      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ba6:	bf00      	nop
 8005ba8:	e066      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb0:	d11f      	bne.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005bb2:	4b36      	ldr	r3, [pc, #216]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc6:	d008      	beq.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005bc8:	e00f      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fb10 	bl	80061f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bd8:	e04e      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bda:	f107 0318 	add.w	r3, r7, #24
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f870 	bl	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005be8:	e046      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bee:	bf00      	nop
 8005bf0:	e042      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf8:	d13c      	bne.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005bfa:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005c02:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c0a:	d01e      	beq.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8005c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c10:	d805      	bhi.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00d      	beq.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c1a:	d00e      	beq.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8005c1c:	e026      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c22:	d01d      	beq.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c28:	d01d      	beq.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005c2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c2e:	d014      	beq.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8005c30:	e01c      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005c32:	f000 f831 	bl	8005c98 <HAL_RCCEx_GetD3PCLK1Freq>
 8005c36:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005c38:	e01e      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c3a:	f107 0318 	add.w	r3, r7, #24
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 f840 	bl	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c48:	e016      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c4a:	f107 030c 	add.w	r3, r7, #12
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f984 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c58:	e00e      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8005c5a:	4b0d      	ldr	r3, [pc, #52]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c5e:	e00b      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8005c60:	4b0c      	ldr	r3, [pc, #48]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005c62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c64:	e008      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8005c66:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005c68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c6a:	e005      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c70:	bf00      	nop
 8005c72:	e001      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3740      	adds	r7, #64	; 0x40
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	017d7840 	.word	0x017d7840
 8005c88:	00bb8000 	.word	0x00bb8000
 8005c8c:	58024400 	.word	0x58024400
 8005c90:	03d09000 	.word	0x03d09000
 8005c94:	003d0900 	.word	0x003d0900

08005c98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c9c:	f7fe fe76 	bl	800498c <HAL_RCC_GetHCLKFreq>
 8005ca0:	4601      	mov	r1, r0
 8005ca2:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	091b      	lsrs	r3, r3, #4
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	4a04      	ldr	r2, [pc, #16]	; (8005cc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005cae:	5cd3      	ldrb	r3, [r2, r3]
 8005cb0:	f003 031f 	and.w	r3, r3, #31
 8005cb4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	58024400 	.word	0x58024400
 8005cc0:	0800bd7c 	.word	0x0800bd7c

08005cc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b089      	sub	sp, #36	; 0x24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ccc:	4b9d      	ldr	r3, [pc, #628]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005cd6:	4b9b      	ldr	r3, [pc, #620]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cda:	0b1b      	lsrs	r3, r3, #12
 8005cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ce0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ce2:	4b98      	ldr	r3, [pc, #608]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce6:	091b      	lsrs	r3, r3, #4
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005cee:	4b95      	ldr	r3, [pc, #596]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf2:	08db      	lsrs	r3, r3, #3
 8005cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	fb02 f303 	mul.w	r3, r2, r3
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 810a 	beq.w	8005f26 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d05a      	beq.n	8005dce <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d302      	bcc.n	8005d22 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d078      	beq.n	8005e12 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005d20:	e099      	b.n	8005e56 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d22:	4b88      	ldr	r3, [pc, #544]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d02d      	beq.n	8005d8a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d2e:	4b85      	ldr	r3, [pc, #532]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	08db      	lsrs	r3, r3, #3
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	4a83      	ldr	r2, [pc, #524]	; (8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	ee07 3a90 	vmov	s15, r3
 8005d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d58:	4b7a      	ldr	r3, [pc, #488]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d60:	ee07 3a90 	vmov	s15, r3
 8005d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d68:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d84:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d88:	e087      	b.n	8005e9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	ee07 3a90 	vmov	s15, r3
 8005d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d94:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005d98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9c:	4b69      	ldr	r3, [pc, #420]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da4:	ee07 3a90 	vmov	s15, r3
 8005da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dac:	ed97 6a03 	vldr	s12, [r7, #12]
 8005db0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005db4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dcc:	e065      	b.n	8005e9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	ee07 3a90 	vmov	s15, r3
 8005dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de0:	4b58      	ldr	r3, [pc, #352]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de8:	ee07 3a90 	vmov	s15, r3
 8005dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005df4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005df8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e10:	e043      	b.n	8005e9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	ee07 3a90 	vmov	s15, r3
 8005e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e24:	4b47      	ldr	r3, [pc, #284]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e34:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e38:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005e3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e54:	e021      	b.n	8005e9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	ee07 3a90 	vmov	s15, r3
 8005e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e60:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005e64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e68:	4b36      	ldr	r3, [pc, #216]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e70:	ee07 3a90 	vmov	s15, r3
 8005e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e78:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005e80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e98:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e9a:	4b2a      	ldr	r3, [pc, #168]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	0a5b      	lsrs	r3, r3, #9
 8005ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ec0:	ee17 2a90 	vmov	r2, s15
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005ec8:	4b1e      	ldr	r3, [pc, #120]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	0c1b      	lsrs	r3, r3, #16
 8005ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eee:	ee17 2a90 	vmov	r2, s15
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005ef6:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	0e1b      	lsrs	r3, r3, #24
 8005efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f1c:	ee17 2a90 	vmov	r2, s15
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f24:	e008      	b.n	8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	609a      	str	r2, [r3, #8]
}
 8005f38:	bf00      	nop
 8005f3a:	3724      	adds	r7, #36	; 0x24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	58024400 	.word	0x58024400
 8005f48:	03d09000 	.word	0x03d09000
 8005f4c:	46000000 	.word	0x46000000
 8005f50:	4c742400 	.word	0x4c742400
 8005f54:	4a742400 	.word	0x4a742400
 8005f58:	4bbebc20 	.word	0x4bbebc20

08005f5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f64:	4b9d      	ldr	r3, [pc, #628]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005f6e:	4b9b      	ldr	r3, [pc, #620]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	0d1b      	lsrs	r3, r3, #20
 8005f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f7a:	4b98      	ldr	r3, [pc, #608]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	0a1b      	lsrs	r3, r3, #8
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f86:	4b95      	ldr	r3, [pc, #596]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8a:	08db      	lsrs	r3, r3, #3
 8005f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 810a 	beq.w	80061be <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d05a      	beq.n	8006066 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d302      	bcc.n	8005fba <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d078      	beq.n	80060aa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005fb8:	e099      	b.n	80060ee <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fba:	4b88      	ldr	r3, [pc, #544]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d02d      	beq.n	8006022 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fc6:	4b85      	ldr	r3, [pc, #532]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	08db      	lsrs	r3, r3, #3
 8005fcc:	f003 0303 	and.w	r3, r3, #3
 8005fd0:	4a83      	ldr	r2, [pc, #524]	; (80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	ee07 3a90 	vmov	s15, r3
 8005fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff0:	4b7a      	ldr	r3, [pc, #488]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006000:	ed97 6a03 	vldr	s12, [r7, #12]
 8006004:	eddf 5a77 	vldr	s11, [pc, #476]	; 80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006020:	e087      	b.n	8006132 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006034:	4b69      	ldr	r3, [pc, #420]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603c:	ee07 3a90 	vmov	s15, r3
 8006040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006044:	ed97 6a03 	vldr	s12, [r7, #12]
 8006048:	eddf 5a66 	vldr	s11, [pc, #408]	; 80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800604c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006060:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006064:	e065      	b.n	8006132 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	ee07 3a90 	vmov	s15, r3
 800606c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006070:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006078:	4b58      	ldr	r3, [pc, #352]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006088:	ed97 6a03 	vldr	s12, [r7, #12]
 800608c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800609c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060a8:	e043      	b.n	8006132 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	ee07 3a90 	vmov	s15, r3
 80060b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80060b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060bc:	4b47      	ldr	r3, [pc, #284]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c4:	ee07 3a90 	vmov	s15, r3
 80060c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80060d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80060d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060ec:	e021      	b.n	8006132 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	ee07 3a90 	vmov	s15, r3
 80060f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80060fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006100:	4b36      	ldr	r3, [pc, #216]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006108:	ee07 3a90 	vmov	s15, r3
 800610c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006110:	ed97 6a03 	vldr	s12, [r7, #12]
 8006114:	eddf 5a33 	vldr	s11, [pc, #204]	; 80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006118:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800611c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006120:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006130:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006132:	4b2a      	ldr	r3, [pc, #168]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	0a5b      	lsrs	r3, r3, #9
 8006138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800614c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006158:	ee17 2a90 	vmov	r2, s15
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006160:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006176:	ee37 7a87 	vadd.f32	s14, s15, s14
 800617a:	edd7 6a07 	vldr	s13, [r7, #28]
 800617e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006186:	ee17 2a90 	vmov	r2, s15
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800618e:	4b13      	ldr	r3, [pc, #76]	; (80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	0e1b      	lsrs	r3, r3, #24
 8006194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006198:	ee07 3a90 	vmov	s15, r3
 800619c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061b4:	ee17 2a90 	vmov	r2, s15
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061bc:	e008      	b.n	80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	609a      	str	r2, [r3, #8]
}
 80061d0:	bf00      	nop
 80061d2:	3724      	adds	r7, #36	; 0x24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	58024400 	.word	0x58024400
 80061e0:	03d09000 	.word	0x03d09000
 80061e4:	46000000 	.word	0x46000000
 80061e8:	4c742400 	.word	0x4c742400
 80061ec:	4a742400 	.word	0x4a742400
 80061f0:	4bbebc20 	.word	0x4bbebc20

080061f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b089      	sub	sp, #36	; 0x24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061fc:	4b9d      	ldr	r3, [pc, #628]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	f003 0303 	and.w	r3, r3, #3
 8006204:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006206:	4b9b      	ldr	r3, [pc, #620]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	091b      	lsrs	r3, r3, #4
 800620c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006210:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006212:	4b98      	ldr	r3, [pc, #608]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800621c:	4b95      	ldr	r3, [pc, #596]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800621e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006220:	08db      	lsrs	r3, r3, #3
 8006222:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	fb02 f303 	mul.w	r3, r2, r3
 800622c:	ee07 3a90 	vmov	s15, r3
 8006230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006234:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 810a 	beq.w	8006454 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d05a      	beq.n	80062fc <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8006246:	2b01      	cmp	r3, #1
 8006248:	d302      	bcc.n	8006250 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800624a:	2b02      	cmp	r3, #2
 800624c:	d078      	beq.n	8006340 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800624e:	e099      	b.n	8006384 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006250:	4b88      	ldr	r3, [pc, #544]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	d02d      	beq.n	80062b8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800625c:	4b85      	ldr	r3, [pc, #532]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	08db      	lsrs	r3, r3, #3
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	4a84      	ldr	r2, [pc, #528]	; (8006478 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8006268:	fa22 f303 	lsr.w	r3, r2, r3
 800626c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	ee07 3a90 	vmov	s15, r3
 8006274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006286:	4b7b      	ldr	r3, [pc, #492]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006296:	ed97 6a03 	vldr	s12, [r7, #12]
 800629a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800647c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800629e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062b6:	e087      	b.n	80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80062c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ca:	4b6a      	ldr	r3, [pc, #424]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062da:	ed97 6a03 	vldr	s12, [r7, #12]
 80062de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800647c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80062e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062fa:	e065      	b.n	80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006306:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800630a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800630e:	4b59      	ldr	r3, [pc, #356]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006322:	eddf 5a56 	vldr	s11, [pc, #344]	; 800647c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800632a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800632e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800633e:	e043      	b.n	80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800634e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006352:	4b48      	ldr	r3, [pc, #288]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006362:	ed97 6a03 	vldr	s12, [r7, #12]
 8006366:	eddf 5a45 	vldr	s11, [pc, #276]	; 800647c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800636a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800636e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800637a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006382:	e021      	b.n	80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006396:	4b37      	ldr	r3, [pc, #220]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800647c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80063ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063c6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80063c8:	4b2a      	ldr	r3, [pc, #168]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	0a5b      	lsrs	r3, r3, #9
 80063ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ee:	ee17 2a90 	vmov	r2, s15
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80063f6:	4b1f      	ldr	r3, [pc, #124]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	0c1b      	lsrs	r3, r3, #16
 80063fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006400:	ee07 3a90 	vmov	s15, r3
 8006404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800640c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006410:	edd7 6a07 	vldr	s13, [r7, #28]
 8006414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800641c:	ee17 2a90 	vmov	r2, s15
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006424:	4b13      	ldr	r3, [pc, #76]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	0e1b      	lsrs	r3, r3, #24
 800642a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800643a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800643e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800644a:	ee17 2a90 	vmov	r2, s15
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006452:	e008      	b.n	8006466 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	609a      	str	r2, [r3, #8]
}
 8006466:	bf00      	nop
 8006468:	3724      	adds	r7, #36	; 0x24
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	58024400 	.word	0x58024400
 8006478:	03d09000 	.word	0x03d09000
 800647c:	46000000 	.word	0x46000000
 8006480:	4c742400 	.word	0x4c742400
 8006484:	4a742400 	.word	0x4a742400
 8006488:	4bbebc20 	.word	0x4bbebc20

0800648c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800649a:	4b53      	ldr	r3, [pc, #332]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 800649c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d101      	bne.n	80064aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e099      	b.n	80065de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064aa:	4b4f      	ldr	r3, [pc, #316]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a4e      	ldr	r2, [pc, #312]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 80064b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b6:	f7f9 ff95 	bl	80003e4 <HAL_GetTick>
 80064ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064bc:	e008      	b.n	80064d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80064be:	f7f9 ff91 	bl	80003e4 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e086      	b.n	80065de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064d0:	4b45      	ldr	r3, [pc, #276]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1f0      	bne.n	80064be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80064dc:	4b42      	ldr	r3, [pc, #264]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 80064de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	031b      	lsls	r3, r3, #12
 80064ea:	493f      	ldr	r1, [pc, #252]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	628b      	str	r3, [r1, #40]	; 0x28
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	3b01      	subs	r3, #1
 8006500:	025b      	lsls	r3, r3, #9
 8006502:	b29b      	uxth	r3, r3
 8006504:	431a      	orrs	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	3b01      	subs	r3, #1
 800650c:	041b      	lsls	r3, r3, #16
 800650e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	3b01      	subs	r3, #1
 800651a:	061b      	lsls	r3, r3, #24
 800651c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006520:	4931      	ldr	r1, [pc, #196]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 8006522:	4313      	orrs	r3, r2
 8006524:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006526:	4b30      	ldr	r3, [pc, #192]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	492d      	ldr	r1, [pc, #180]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 8006534:	4313      	orrs	r3, r2
 8006536:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006538:	4b2b      	ldr	r3, [pc, #172]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	f023 0220 	bic.w	r2, r3, #32
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	4928      	ldr	r1, [pc, #160]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 8006546:	4313      	orrs	r3, r2
 8006548:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800654a:	4b27      	ldr	r3, [pc, #156]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 800654c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654e:	4a26      	ldr	r2, [pc, #152]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 8006550:	f023 0310 	bic.w	r3, r3, #16
 8006554:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006556:	4b24      	ldr	r3, [pc, #144]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 8006558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800655a:	4b24      	ldr	r3, [pc, #144]	; (80065ec <RCCEx_PLL2_Config+0x160>)
 800655c:	4013      	ands	r3, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	69d2      	ldr	r2, [r2, #28]
 8006562:	00d2      	lsls	r2, r2, #3
 8006564:	4920      	ldr	r1, [pc, #128]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 8006566:	4313      	orrs	r3, r2
 8006568:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800656a:	4b1f      	ldr	r3, [pc, #124]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	4a1e      	ldr	r2, [pc, #120]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 8006570:	f043 0310 	orr.w	r3, r3, #16
 8006574:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d106      	bne.n	800658a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800657c:	4b1a      	ldr	r3, [pc, #104]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	4a19      	ldr	r2, [pc, #100]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 8006582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006586:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006588:	e00f      	b.n	80065aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d106      	bne.n	800659e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006590:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	4a14      	ldr	r2, [pc, #80]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 8006596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800659a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800659c:	e005      	b.n	80065aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800659e:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 80065a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a2:	4a11      	ldr	r2, [pc, #68]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 80065a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065aa:	4b0f      	ldr	r3, [pc, #60]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a0e      	ldr	r2, [pc, #56]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 80065b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065b6:	f7f9 ff15 	bl	80003e4 <HAL_GetTick>
 80065ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065bc:	e008      	b.n	80065d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80065be:	f7f9 ff11 	bl	80003e4 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d901      	bls.n	80065d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e006      	b.n	80065de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065d0:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <RCCEx_PLL2_Config+0x15c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0f0      	beq.n	80065be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	58024400 	.word	0x58024400
 80065ec:	ffff0007 	.word	0xffff0007

080065f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065fe:	4b53      	ldr	r3, [pc, #332]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 8006600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b03      	cmp	r3, #3
 8006608:	d101      	bne.n	800660e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e099      	b.n	8006742 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800660e:	4b4f      	ldr	r3, [pc, #316]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a4e      	ldr	r2, [pc, #312]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 8006614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800661a:	f7f9 fee3 	bl	80003e4 <HAL_GetTick>
 800661e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006620:	e008      	b.n	8006634 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006622:	f7f9 fedf 	bl	80003e4 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e086      	b.n	8006742 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006634:	4b45      	ldr	r3, [pc, #276]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1f0      	bne.n	8006622 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006640:	4b42      	ldr	r3, [pc, #264]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	051b      	lsls	r3, r3, #20
 800664e:	493f      	ldr	r1, [pc, #252]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 8006650:	4313      	orrs	r3, r2
 8006652:	628b      	str	r3, [r1, #40]	; 0x28
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	3b01      	subs	r3, #1
 800665a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	3b01      	subs	r3, #1
 8006664:	025b      	lsls	r3, r3, #9
 8006666:	b29b      	uxth	r3, r3
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	3b01      	subs	r3, #1
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	3b01      	subs	r3, #1
 800667e:	061b      	lsls	r3, r3, #24
 8006680:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006684:	4931      	ldr	r1, [pc, #196]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 8006686:	4313      	orrs	r3, r2
 8006688:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800668a:	4b30      	ldr	r3, [pc, #192]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 800668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	492d      	ldr	r1, [pc, #180]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 8006698:	4313      	orrs	r3, r2
 800669a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800669c:	4b2b      	ldr	r3, [pc, #172]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	4928      	ldr	r1, [pc, #160]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066ae:	4b27      	ldr	r3, [pc, #156]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	4a26      	ldr	r2, [pc, #152]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 80066b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066ba:	4b24      	ldr	r3, [pc, #144]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 80066bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066be:	4b24      	ldr	r3, [pc, #144]	; (8006750 <RCCEx_PLL3_Config+0x160>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	69d2      	ldr	r2, [r2, #28]
 80066c6:	00d2      	lsls	r2, r2, #3
 80066c8:	4920      	ldr	r1, [pc, #128]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80066ce:	4b1f      	ldr	r3, [pc, #124]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	4a1e      	ldr	r2, [pc, #120]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 80066d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d106      	bne.n	80066ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80066e0:	4b1a      	ldr	r3, [pc, #104]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	4a19      	ldr	r2, [pc, #100]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 80066e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066ec:	e00f      	b.n	800670e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d106      	bne.n	8006702 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80066f4:	4b15      	ldr	r3, [pc, #84]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	4a14      	ldr	r2, [pc, #80]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 80066fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006700:	e005      	b.n	800670e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006702:	4b12      	ldr	r3, [pc, #72]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	4a11      	ldr	r2, [pc, #68]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 8006708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800670c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800670e:	4b0f      	ldr	r3, [pc, #60]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a0e      	ldr	r2, [pc, #56]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 8006714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800671a:	f7f9 fe63 	bl	80003e4 <HAL_GetTick>
 800671e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006720:	e008      	b.n	8006734 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006722:	f7f9 fe5f 	bl	80003e4 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e006      	b.n	8006742 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <RCCEx_PLL3_Config+0x15c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	58024400 	.word	0x58024400
 8006750:	ffff0007 	.word	0xffff0007

08006754 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e04d      	b.n	8006802 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	7a5b      	ldrb	r3, [r3, #9]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d105      	bne.n	800677c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f004 fc76 	bl	800b068 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f023 0120 	bic.w	r1, r3, #32
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0204 	orr.w	r2, r2, #4
 80067a6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b40      	cmp	r3, #64	; 0x40
 80067b4:	d104      	bne.n	80067c0 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2204      	movs	r2, #4
 80067ba:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e020      	b.n	8006802 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80067c0:	f7f9 fe10 	bl	80003e4 <HAL_GetTick>
 80067c4:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80067c6:	e00e      	b.n	80067e6 <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80067c8:	f7f9 fe0c 	bl	80003e4 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d907      	bls.n	80067e6 <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2204      	movs	r2, #4
 80067da:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e00d      	b.n	8006802 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d0e9      	beq.n	80067c8 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b04      	cmp	r3, #4
 800681e:	d81f      	bhi.n	8006860 <HAL_SAI_InitProtocol+0x54>
 8006820:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <HAL_SAI_InitProtocol+0x1c>)
 8006822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006826:	bf00      	nop
 8006828:	0800683d 	.word	0x0800683d
 800682c:	0800683d 	.word	0x0800683d
 8006830:	0800683d 	.word	0x0800683d
 8006834:	0800684f 	.word	0x0800684f
 8006838:	0800684f 	.word	0x0800684f
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 faa0 	bl	8006d88 <SAI_InitI2S>
 8006848:	4603      	mov	r3, r0
 800684a:	75fb      	strb	r3, [r7, #23]
      break;
 800684c:	e00b      	b.n	8006866 <HAL_SAI_InitProtocol+0x5a>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	68b9      	ldr	r1, [r7, #8]
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 fb49 	bl	8006eec <SAI_InitPCM>
 800685a:	4603      	mov	r3, r0
 800685c:	75fb      	strb	r3, [r7, #23]
      break;
 800685e:	e002      	b.n	8006866 <HAL_SAI_InitProtocol+0x5a>
    default :
      status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	75fb      	strb	r3, [r7, #23]
      break;
 8006864:	bf00      	nop
  }

  if (status == HAL_OK)
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d104      	bne.n	8006876 <HAL_SAI_InitProtocol+0x6a>
  {
    status = HAL_SAI_Init(hsai);
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f807 	bl	8006880 <HAL_SAI_Init>
 8006872:	4603      	mov	r3, r0
 8006874:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	; 0x28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e268      	b.n	8006d64 <HAL_SAI_Init+0x4e4>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8006892:	f7f9 fdd5 	bl	8000440 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800689c:	2b01      	cmp	r3, #1
 800689e:	d113      	bne.n	80068c8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a8b      	ldr	r2, [pc, #556]	; (8006ad4 <HAL_SAI_Init+0x254>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d004      	beq.n	80068b4 <HAL_SAI_Init+0x34>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a8a      	ldr	r2, [pc, #552]	; (8006ad8 <HAL_SAI_Init+0x258>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d107      	bne.n	80068c4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d103      	bne.n	80068c4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e24d      	b.n	8006d64 <HAL_SAI_Init+0x4e4>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a81      	ldr	r2, [pc, #516]	; (8006ad4 <HAL_SAI_Init+0x254>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d004      	beq.n	80068dc <HAL_SAI_Init+0x5c>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a81      	ldr	r2, [pc, #516]	; (8006adc <HAL_SAI_Init+0x25c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d102      	bne.n	80068e2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 80068dc:	4b80      	ldr	r3, [pc, #512]	; (8006ae0 <HAL_SAI_Init+0x260>)
 80068de:	61bb      	str	r3, [r7, #24]
 80068e0:	e028      	b.n	8006934 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a7f      	ldr	r2, [pc, #508]	; (8006ae4 <HAL_SAI_Init+0x264>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d004      	beq.n	80068f6 <HAL_SAI_Init+0x76>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a7d      	ldr	r2, [pc, #500]	; (8006ae8 <HAL_SAI_Init+0x268>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d102      	bne.n	80068fc <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 80068f6:	4b7d      	ldr	r3, [pc, #500]	; (8006aec <HAL_SAI_Init+0x26c>)
 80068f8:	61bb      	str	r3, [r7, #24]
 80068fa:	e01b      	b.n	8006934 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a7b      	ldr	r2, [pc, #492]	; (8006af0 <HAL_SAI_Init+0x270>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d004      	beq.n	8006910 <HAL_SAI_Init+0x90>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a7a      	ldr	r2, [pc, #488]	; (8006af4 <HAL_SAI_Init+0x274>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d102      	bne.n	8006916 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8006910:	4b79      	ldr	r3, [pc, #484]	; (8006af8 <HAL_SAI_Init+0x278>)
 8006912:	61bb      	str	r3, [r7, #24]
 8006914:	e00e      	b.n	8006934 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a6f      	ldr	r2, [pc, #444]	; (8006ad8 <HAL_SAI_Init+0x258>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d004      	beq.n	800692a <HAL_SAI_Init+0xaa>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a75      	ldr	r2, [pc, #468]	; (8006afc <HAL_SAI_Init+0x27c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d102      	bne.n	8006930 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800692a:	4b75      	ldr	r3, [pc, #468]	; (8006b00 <HAL_SAI_Init+0x280>)
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	e001      	b.n	8006934 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e217      	b.n	8006d64 <HAL_SAI_Init+0x4e4>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d106      	bne.n	800694e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f004 fc0f 	bl	800b16c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fb4e 	bl	8006ff0 <SAI_Disable>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e202      	b.n	8006d64 <HAL_SAI_Init+0x4e4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2202      	movs	r2, #2
 8006962:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d007      	beq.n	800697e <HAL_SAI_Init+0xfe>
 800696e:	2b01      	cmp	r3, #1
 8006970:	d302      	bcc.n	8006978 <HAL_SAI_Init+0xf8>
 8006972:	2b02      	cmp	r3, #2
 8006974:	d006      	beq.n	8006984 <HAL_SAI_Init+0x104>
 8006976:	e008      	b.n	800698a <HAL_SAI_Init+0x10a>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006978:	2300      	movs	r3, #0
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800697c:	e008      	b.n	8006990 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800697e:	2310      	movs	r3, #16
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006982:	e005      	b.n	8006990 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006984:	2320      	movs	r3, #32
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006988:	e002      	b.n	8006990 <HAL_SAI_Init+0x110>
    default:
      tmpregisterGCR = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800698e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b05      	cmp	r3, #5
 8006996:	d832      	bhi.n	80069fe <HAL_SAI_Init+0x17e>
 8006998:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <HAL_SAI_Init+0x120>)
 800699a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699e:	bf00      	nop
 80069a0:	080069b9 	.word	0x080069b9
 80069a4:	080069bf 	.word	0x080069bf
 80069a8:	080069c7 	.word	0x080069c7
 80069ac:	080069cf 	.word	0x080069cf
 80069b0:	080069df 	.word	0x080069df
 80069b4:	080069ef 	.word	0x080069ef
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	61fb      	str	r3, [r7, #28]
      break;
 80069bc:	e022      	b.n	8006a04 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80069be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069c2:	61fb      	str	r3, [r7, #28]
      break;
 80069c4:	e01e      	b.n	8006a04 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80069c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069ca:	61fb      	str	r3, [r7, #28]
      break;
 80069cc:	e01a      	b.n	8006a04 <HAL_SAI_Init+0x184>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80069ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069d2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	f043 0301 	orr.w	r3, r3, #1
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80069dc:	e012      	b.n	8006a04 <HAL_SAI_Init+0x184>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80069de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069e2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	f043 0302 	orr.w	r3, r3, #2
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80069ec:	e00a      	b.n	8006a04 <HAL_SAI_Init+0x184>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80069ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069f2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	f043 0303 	orr.w	r3, r3, #3
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80069fc:	e002      	b.n	8006a04 <HAL_SAI_Init+0x184>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
      break;
 8006a02:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a08:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 80a1 	beq.w	8006b56 <HAL_SAI_Init+0x2d6>
  {
    uint32_t freq = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a2d      	ldr	r2, [pc, #180]	; (8006ad4 <HAL_SAI_Init+0x254>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <HAL_SAI_Init+0x1ac>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a2d      	ldr	r2, [pc, #180]	; (8006adc <HAL_SAI_Init+0x25c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d104      	bne.n	8006a36 <HAL_SAI_Init+0x1b6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006a2c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006a30:	f7fe feba 	bl	80057a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a34:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a2a      	ldr	r2, [pc, #168]	; (8006ae4 <HAL_SAI_Init+0x264>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <HAL_SAI_Init+0x1ca>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a28      	ldr	r2, [pc, #160]	; (8006ae8 <HAL_SAI_Init+0x268>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d104      	bne.n	8006a54 <HAL_SAI_Init+0x1d4>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006a4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006a4e:	f7fe feab 	bl	80057a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a52:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a25      	ldr	r2, [pc, #148]	; (8006af0 <HAL_SAI_Init+0x270>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d004      	beq.n	8006a68 <HAL_SAI_Init+0x1e8>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a24      	ldr	r2, [pc, #144]	; (8006af4 <HAL_SAI_Init+0x274>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d104      	bne.n	8006a72 <HAL_SAI_Init+0x1f2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8006a68:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006a6c:	f7fe fe9c 	bl	80057a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a70:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <HAL_SAI_Init+0x258>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d104      	bne.n	8006a86 <HAL_SAI_Init+0x206>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006a7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006a80:	f7fe fe92 	bl	80057a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a84:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1c      	ldr	r2, [pc, #112]	; (8006afc <HAL_SAI_Init+0x27c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d104      	bne.n	8006a9a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006a90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006a94:	f7fe fe88 	bl	80057a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a98:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006aa2:	d10f      	bne.n	8006ac4 <HAL_SAI_Init+0x244>
    {
      /* NODIV = 1 */
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	4619      	mov	r1, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006ab8:	fb02 f303 	mul.w	r3, r2, r3
 8006abc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	e030      	b.n	8006b26 <HAL_SAI_Init+0x2a6>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006acc:	d11a      	bne.n	8006b04 <HAL_SAI_Init+0x284>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e019      	b.n	8006b06 <HAL_SAI_Init+0x286>
 8006ad2:	bf00      	nop
 8006ad4:	40015804 	.word	0x40015804
 8006ad8:	58005404 	.word	0x58005404
 8006adc:	40015824 	.word	0x40015824
 8006ae0:	40015800 	.word	0x40015800
 8006ae4:	40015c04 	.word	0x40015c04
 8006ae8:	40015c24 	.word	0x40015c24
 8006aec:	40015c00 	.word	0x40015c00
 8006af0:	40016004 	.word	0x40016004
 8006af4:	40016024 	.word	0x40016024
 8006af8:	40016000 	.word	0x40016000
 8006afc:	58005424 	.word	0x58005424
 8006b00:	58005400 	.word	0x58005400
 8006b04:	2301      	movs	r3, #1
 8006b06:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	4619      	mov	r1, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	fb02 f303 	mul.w	r3, r2, r3
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b24:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	4a90      	ldr	r2, [pc, #576]	; (8006d6c <HAL_SAI_Init+0x4ec>)
 8006b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2e:	08da      	lsrs	r2, r3, #3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006b34:	6939      	ldr	r1, [r7, #16]
 8006b36:	4b8d      	ldr	r3, [pc, #564]	; (8006d6c <HAL_SAI_Init+0x4ec>)
 8006b38:	fba3 2301 	umull	r2, r3, r3, r1
 8006b3c:	08da      	lsrs	r2, r3, #3
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	1aca      	subs	r2, r1, r3
 8006b48:	2a08      	cmp	r2, #8
 8006b4a:	d904      	bls.n	8006b56 <HAL_SAI_Init+0x2d6>
    {
      hsai->Init.Mckdiv += 1U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_SAI_Init+0x2e6>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d109      	bne.n	8006b7a <HAL_SAI_Init+0x2fa>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_SAI_Init+0x2f2>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e001      	b.n	8006b76 <HAL_SAI_Init+0x2f6>
 8006b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b76:	623b      	str	r3, [r7, #32]
 8006b78:	e008      	b.n	8006b8c <HAL_SAI_Init+0x30c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d102      	bne.n	8006b88 <HAL_SAI_Init+0x308>
 8006b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b86:	e000      	b.n	8006b8a <HAL_SAI_Init+0x30a>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8006b8c:	f7f9 fc58 	bl	8000440 <HAL_GetREVID>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b96:	d331      	bcc.n	8006bfc <HAL_SAI_Init+0x37c>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6819      	ldr	r1, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b73      	ldr	r3, [pc, #460]	; (8006d70 <HAL_SAI_Init+0x4f0>)
 8006ba4:	400b      	ands	r3, r1
 8006ba6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6819      	ldr	r1, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006bbc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8006bd0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006bdc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	051b      	lsls	r3, r3, #20
 8006be4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006bea:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	e02d      	b.n	8006c58 <HAL_SAI_Init+0x3d8>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6819      	ldr	r1, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	4b5b      	ldr	r3, [pc, #364]	; (8006d74 <HAL_SAI_Init+0x4f4>)
 8006c08:	400b      	ands	r3, r1
 8006c0a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6819      	ldr	r1, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c20:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c26:	431a      	orrs	r2, r3
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8006c34:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c40:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	051b      	lsls	r3, r3, #20
 8006c48:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006c4e:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6859      	ldr	r1, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4b45      	ldr	r3, [pc, #276]	; (8006d78 <HAL_SAI_Init+0x4f8>)
 8006c64:	400b      	ands	r3, r1
 8006c66:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6859      	ldr	r1, [r3, #4]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69da      	ldr	r2, [r3, #28]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6899      	ldr	r1, [r3, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	4b3a      	ldr	r3, [pc, #232]	; (8006d7c <HAL_SAI_Init+0x4fc>)
 8006c92:	400b      	ands	r3, r1
 8006c94:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6899      	ldr	r1, [r3, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006ca6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006cac:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006cb2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006cbc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68d9      	ldr	r1, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006cd4:	400b      	ands	r3, r1
 8006cd6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68d9      	ldr	r1, [r3, #12]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cec:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006cee:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1e      	ldr	r2, [pc, #120]	; (8006d80 <HAL_SAI_Init+0x500>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <HAL_SAI_Init+0x496>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1c      	ldr	r2, [pc, #112]	; (8006d84 <HAL_SAI_Init+0x504>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d119      	bne.n	8006d4a <HAL_SAI_Init+0x4ca>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1a:	f023 0201 	bic.w	r2, r3, #1
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d10e      	bne.n	8006d4a <HAL_SAI_Init+0x4ca>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d34:	3b01      	subs	r3, #1
 8006d36:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d42:	f043 0201 	orr.w	r2, r3, #1
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3728      	adds	r7, #40	; 0x28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	cccccccd 	.word	0xcccccccd
 8006d70:	f005c010 	.word	0xf005c010
 8006d74:	f805c010 	.word	0xf805c010
 8006d78:	ffff1ff0 	.word	0xffff1ff0
 8006d7c:	fff88000 	.word	0xfff88000
 8006d80:	40015804 	.word	0x40015804
 8006d84:	58005404 	.word	0x58005404

08006d88 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <SAI_InitI2S+0x2e>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d103      	bne.n	8006dbe <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	651a      	str	r2, [r3, #80]	; 0x50
 8006dbc:	e002      	b.n	8006dc4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006dca:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dd2:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e077      	b.n	8006ede <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d107      	bne.n	8006e04 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006e00:	665a      	str	r2, [r3, #100]	; 0x64
 8006e02:	e006      	b.n	8006e12 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e0a:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d84f      	bhi.n	8006eb8 <SAI_InitI2S+0x130>
 8006e18:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <SAI_InitI2S+0x98>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e31 	.word	0x08006e31
 8006e24:	08006e53 	.word	0x08006e53
 8006e28:	08006e75 	.word	0x08006e75
 8006e2c:	08006e97 	.word	0x08006e97
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2280      	movs	r2, #128	; 0x80
 8006e34:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	085b      	lsrs	r3, r3, #1
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	085b      	lsrs	r3, r3, #1
 8006e44:	011a      	lsls	r2, r3, #4
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2240      	movs	r2, #64	; 0x40
 8006e4e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006e50:	e035      	b.n	8006ebe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2280      	movs	r2, #128	; 0x80
 8006e56:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	085b      	lsrs	r3, r3, #1
 8006e5c:	019a      	lsls	r2, r3, #6
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	085b      	lsrs	r3, r3, #1
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2280      	movs	r2, #128	; 0x80
 8006e70:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006e72:	e024      	b.n	8006ebe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	22c0      	movs	r2, #192	; 0xc0
 8006e78:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	085b      	lsrs	r3, r3, #1
 8006e7e:	019a      	lsls	r2, r3, #6
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2280      	movs	r2, #128	; 0x80
 8006e92:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006e94:	e013      	b.n	8006ebe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	22e0      	movs	r2, #224	; 0xe0
 8006e9a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	019a      	lsls	r2, r3, #6
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2280      	movs	r2, #128	; 0x80
 8006eb4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006eb6:	e002      	b.n	8006ebe <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	75fb      	strb	r3, [r7, #23]
      break;
 8006ebc:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d10b      	bne.n	8006edc <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d102      	bne.n	8006ed0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2210      	movs	r2, #16
 8006ece:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d102      	bne.n	8006edc <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2208      	movs	r2, #8
 8006eda:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop

08006eec <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <SAI_InitPCM+0x2e>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d103      	bne.n	8006f22 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	651a      	str	r2, [r3, #80]	; 0x50
 8006f20:	e002      	b.n	8006f28 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f34:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006f3c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f50:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b04      	cmp	r3, #4
 8006f56:	d103      	bne.n	8006f60 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	659a      	str	r2, [r3, #88]	; 0x58
 8006f5e:	e002      	b.n	8006f66 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	220d      	movs	r2, #13
 8006f64:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d837      	bhi.n	8006fdc <SAI_InitPCM+0xf0>
 8006f6c:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <SAI_InitPCM+0x88>)
 8006f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f72:	bf00      	nop
 8006f74:	08006f85 	.word	0x08006f85
 8006f78:	08006f9b 	.word	0x08006f9b
 8006f7c:	08006fb1 	.word	0x08006fb1
 8006f80:	08006fc7 	.word	0x08006fc7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2280      	movs	r2, #128	; 0x80
 8006f88:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	011a      	lsls	r2, r3, #4
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2240      	movs	r2, #64	; 0x40
 8006f96:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006f98:	e023      	b.n	8006fe2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2280      	movs	r2, #128	; 0x80
 8006f9e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2280      	movs	r2, #128	; 0x80
 8006fac:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006fae:	e018      	b.n	8006fe2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	22c0      	movs	r2, #192	; 0xc0
 8006fb4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2280      	movs	r2, #128	; 0x80
 8006fc2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006fc4:	e00d      	b.n	8006fe2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	22e0      	movs	r2, #224	; 0xe0
 8006fca:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2280      	movs	r2, #128	; 0x80
 8006fd8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006fda:	e002      	b.n	8006fe2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe0:	bf00      	nop
  }

  return status;
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006ff0:	b490      	push	{r4, r7}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006ff8:	4b15      	ldr	r3, [pc, #84]	; (8007050 <SAI_Disable+0x60>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a15      	ldr	r2, [pc, #84]	; (8007054 <SAI_Disable+0x64>)
 8006ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8007002:	0b1b      	lsrs	r3, r3, #12
 8007004:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007018:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800701a:	2c00      	cmp	r4, #0
 800701c:	d10a      	bne.n	8007034 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007024:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	73fb      	strb	r3, [r7, #15]
      break;
 8007032:	e007      	b.n	8007044 <SAI_Disable+0x54>
    }
    count--;
 8007034:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1ea      	bne.n	800701a <SAI_Disable+0x2a>

  return status;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bc90      	pop	{r4, r7}
 800704e:	4770      	bx	lr
 8007050:	20000008 	.word	0x20000008
 8007054:	95cbec1b 	.word	0x95cbec1b

08007058 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	; 0x28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e07c      	b.n	8007164 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10c      	bne.n	8007090 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f004 fa6c 	bl	800b568 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2203      	movs	r2, #3
 8007094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f867 	bl	800716c <HAL_SD_InitCard>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e05d      	b.n	8007164 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80070a8:	f107 0308 	add.w	r3, r7, #8
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 ff78 	bl	8007fa4 <HAL_SD_GetCardStatus>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e052      	b.n	8007164 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80070be:	7e3b      	ldrb	r3, [r7, #24]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80070c4:	7e7b      	ldrb	r3, [r7, #25]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d10a      	bne.n	80070e8 <HAL_SD_Init+0x90>
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d102      	bne.n	80070de <HAL_SD_Init+0x86>
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80070e6:	e00b      	b.n	8007100 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d104      	bne.n	80070fa <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80070f8:	e002      	b.n	8007100 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 f82e 	bl	8008168 <HAL_SD_ConfigWideBusOperation>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e026      	b.n	8007164 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007116:	f7f9 f965 	bl	80003e4 <HAL_GetTick>
 800711a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800711c:	e011      	b.n	8007142 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800711e:	f7f9 f961 	bl	80003e4 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800712c:	d109      	bne.n	8007142 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e010      	b.n	8007164 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 f8ba 	bl	80082bc <HAL_SD_GetCardState>
 8007148:	4603      	mov	r3, r0
 800714a:	2b04      	cmp	r3, #4
 800714c:	d1e7      	bne.n	800711e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3728      	adds	r7, #40	; 0x28
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800716c:	b5b0      	push	{r4, r5, r7, lr}
 800716e:	b08e      	sub	sp, #56	; 0x38
 8007170:	af04      	add	r7, sp, #16
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007174:	2300      	movs	r3, #0
 8007176:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007180:	2300      	movs	r3, #0
 8007182:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007184:	23fa      	movs	r3, #250	; 0xfa
 8007186:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d107      	bne.n	80071a0 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0210 	orr.w	r2, r2, #16
 800719e:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681d      	ldr	r5, [r3, #0]
 80071a4:	466c      	mov	r4, sp
 80071a6:	f107 0314 	add.w	r3, r7, #20
 80071aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80071ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80071b2:	f107 0308 	add.w	r3, r7, #8
 80071b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071b8:	4628      	mov	r0, r5
 80071ba:	f002 fa55 	bl	8009668 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f002 fa98 	bl	80096f8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 80071c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80071cc:	f7fe faec 	bl	80057a8 <HAL_RCCEx_GetPeriphCLKFreq>
 80071d0:	4602      	mov	r2, r0
 80071d2:	4b2d      	ldr	r3, [pc, #180]	; (8007288 <HAL_SD_InitCard+0x11c>)
 80071d4:	fba3 2302 	umull	r2, r3, r3, r2
 80071d8:	095b      	lsrs	r3, r3, #5
 80071da:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d008      	beq.n	80071f4 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80071e2:	4a2a      	ldr	r2, [pc, #168]	; (800728c <HAL_SD_InitCard+0x120>)
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ea:	3301      	adds	r3, #1
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7f9 f905 	bl	80003fc <HAL_Delay>
 80071f2:	e002      	b.n	80071fa <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 80071f4:	2002      	movs	r0, #2
 80071f6:	f7f9 f901 	bl	80003fc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 f93c 	bl	8008478 <SD_PowerON>
 8007200:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e02e      	b.n	800727e <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 f86b 	bl	80082fc <SD_InitCard>
 8007226:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00b      	beq.n	8007246 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	431a      	orrs	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e01b      	b.n	800727e <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800724e:	4618      	mov	r0, r3
 8007250:	f002 fae8 	bl	8009824 <SDMMC_CmdBlockLength>
 8007254:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00f      	beq.n	800727c <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a0b      	ldr	r2, [pc, #44]	; (8007290 <HAL_SD_InitCard+0x124>)
 8007262:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	431a      	orrs	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e000      	b.n	800727e <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3728      	adds	r7, #40	; 0x28
 8007282:	46bd      	mov	sp, r7
 8007284:	bdb0      	pop	{r4, r5, r7, pc}
 8007286:	bf00      	nop
 8007288:	10624dd3 	.word	0x10624dd3
 800728c:	00012110 	.word	0x00012110
 8007290:	1fe00fff 	.word	0x1fe00fff

08007294 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b092      	sub	sp, #72	; 0x48
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80072a2:	f7f9 f89f 	bl	80003e4 <HAL_GetTick>
 80072a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d107      	bne.n	80072c6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e167      	b.n	8007596 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	f040 815a 	bne.w	8007588 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80072da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	441a      	add	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d907      	bls.n	80072f8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e14e      	b.n	8007596 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2203      	movs	r2, #3
 80072fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2200      	movs	r2, #0
 8007306:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730c:	2b01      	cmp	r3, #1
 800730e:	d002      	beq.n	8007316 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	025b      	lsls	r3, r3, #9
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800731a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	025b      	lsls	r3, r3, #9
 8007320:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007322:	2390      	movs	r3, #144	; 0x90
 8007324:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007326:	2302      	movs	r3, #2
 8007328:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800732a:	2300      	movs	r3, #0
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800732e:	2300      	movs	r3, #0
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f107 0214 	add.w	r2, r7, #20
 800733a:	4611      	mov	r1, r2
 800733c:	4618      	mov	r0, r3
 800733e:	f002 fa45 	bl	80097cc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007350:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d90a      	bls.n	800736e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2202      	movs	r2, #2
 800735c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007364:	4618      	mov	r0, r3
 8007366:	f002 faa3 	bl	80098b0 <SDMMC_CmdReadMultiBlock>
 800736a:	6478      	str	r0, [r7, #68]	; 0x44
 800736c:	e009      	b.n	8007382 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2201      	movs	r2, #1
 8007372:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800737a:	4618      	mov	r0, r3
 800737c:	f002 fa75 	bl	800986a <SDMMC_CmdReadSingleBlock>
 8007380:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007384:	2b00      	cmp	r3, #0
 8007386:	d012      	beq.n	80073ae <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a84      	ldr	r2, [pc, #528]	; (80075a0 <HAL_SD_ReadBlocks+0x30c>)
 800738e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007396:	431a      	orrs	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e0f3      	b.n	8007596 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80073b2:	e058      	b.n	8007466 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d033      	beq.n	800742a <HAL_SD_ReadBlocks+0x196>
 80073c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c4:	2b1f      	cmp	r3, #31
 80073c6:	d930      	bls.n	800742a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80073c8:	2300      	movs	r3, #0
 80073ca:	643b      	str	r3, [r7, #64]	; 0x40
 80073cc:	e027      	b.n	800741e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f002 f972 	bl	80096bc <SDMMC_ReadFIFO>
 80073d8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80073da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80073e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e4:	3301      	adds	r3, #1
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	0a1b      	lsrs	r3, r3, #8
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80073f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f4:	3301      	adds	r3, #1
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	0c1b      	lsrs	r3, r3, #16
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007400:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007404:	3301      	adds	r3, #1
 8007406:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	0e1b      	lsrs	r3, r3, #24
 800740c:	b2da      	uxtb	r2, r3
 800740e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007410:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007414:	3301      	adds	r3, #1
 8007416:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8007418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800741a:	3301      	adds	r3, #1
 800741c:	643b      	str	r3, [r7, #64]	; 0x40
 800741e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007420:	2b07      	cmp	r3, #7
 8007422:	d9d4      	bls.n	80073ce <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007426:	3b20      	subs	r3, #32
 8007428:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800742a:	f7f8 ffdb 	bl	80003e4 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007436:	429a      	cmp	r2, r3
 8007438:	d902      	bls.n	8007440 <HAL_SD_ReadBlocks+0x1ac>
 800743a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800743c:	2b00      	cmp	r3, #0
 800743e:	d112      	bne.n	8007466 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a56      	ldr	r2, [pc, #344]	; (80075a0 <HAL_SD_ReadBlocks+0x30c>)
 8007446:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e097      	b.n	8007596 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007470:	2b00      	cmp	r3, #0
 8007472:	d09f      	beq.n	80073b4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007482:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748e:	2b00      	cmp	r3, #0
 8007490:	d022      	beq.n	80074d8 <HAL_SD_ReadBlocks+0x244>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d91f      	bls.n	80074d8 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749c:	2b03      	cmp	r3, #3
 800749e:	d01b      	beq.n	80074d8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f002 fa6d 	bl	8009984 <SDMMC_CmdStopTransfer>
 80074aa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80074ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d012      	beq.n	80074d8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a3a      	ldr	r2, [pc, #232]	; (80075a0 <HAL_SD_ReadBlocks+0x30c>)
 80074b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074c0:	431a      	orrs	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e05e      	b.n	8007596 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d012      	beq.n	800750c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a2d      	ldr	r2, [pc, #180]	; (80075a0 <HAL_SD_ReadBlocks+0x30c>)
 80074ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	f043 0208 	orr.w	r2, r3, #8
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e044      	b.n	8007596 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d012      	beq.n	8007540 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a20      	ldr	r2, [pc, #128]	; (80075a0 <HAL_SD_ReadBlocks+0x30c>)
 8007520:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	f043 0202 	orr.w	r2, r3, #2
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e02a      	b.n	8007596 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b00      	cmp	r3, #0
 800754c:	d012      	beq.n	8007574 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a13      	ldr	r2, [pc, #76]	; (80075a0 <HAL_SD_ReadBlocks+0x30c>)
 8007554:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755a:	f043 0220 	orr.w	r2, r3, #32
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e010      	b.n	8007596 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a0a      	ldr	r2, [pc, #40]	; (80075a4 <HAL_SD_ReadBlocks+0x310>)
 800757a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	e006      	b.n	8007596 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
  }
}
 8007596:	4618      	mov	r0, r3
 8007598:	3748      	adds	r7, #72	; 0x48
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	1fe00fff 	.word	0x1fe00fff
 80075a4:	18000f3a 	.word	0x18000f3a

080075a8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b092      	sub	sp, #72	; 0x48
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80075b6:	f7f8 ff15 	bl	80003e4 <HAL_GetTick>
 80075ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d107      	bne.n	80075da <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e16b      	b.n	80078b2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	f040 815e 	bne.w	80078a4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80075ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	441a      	add	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d907      	bls.n	800760c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e152      	b.n	80078b2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2203      	movs	r2, #3
 8007610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2200      	movs	r2, #0
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007620:	2b01      	cmp	r3, #1
 8007622:	d002      	beq.n	800762a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	025b      	lsls	r3, r3, #9
 8007628:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800762a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800762e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	025b      	lsls	r3, r3, #9
 8007634:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007636:	2390      	movs	r3, #144	; 0x90
 8007638:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800763a:	2300      	movs	r3, #0
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800763e:	2300      	movs	r3, #0
 8007640:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007642:	2300      	movs	r3, #0
 8007644:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f107 0218 	add.w	r2, r7, #24
 800764e:	4611      	mov	r1, r2
 8007650:	4618      	mov	r0, r3
 8007652:	f002 f8bb 	bl	80097cc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007664:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d90a      	bls.n	8007682 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2220      	movs	r2, #32
 8007670:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007678:	4618      	mov	r0, r3
 800767a:	f002 f95f 	bl	800993c <SDMMC_CmdWriteMultiBlock>
 800767e:	6478      	str	r0, [r7, #68]	; 0x44
 8007680:	e009      	b.n	8007696 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2210      	movs	r2, #16
 8007686:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800768e:	4618      	mov	r0, r3
 8007690:	f002 f931 	bl	80098f6 <SDMMC_CmdWriteSingleBlock>
 8007694:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007698:	2b00      	cmp	r3, #0
 800769a:	d012      	beq.n	80076c2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a86      	ldr	r2, [pc, #536]	; (80078bc <HAL_SD_WriteBlocks+0x314>)
 80076a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076aa:	431a      	orrs	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e0f7      	b.n	80078b2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80076c6:	e05c      	b.n	8007782 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d037      	beq.n	8007746 <HAL_SD_WriteBlocks+0x19e>
 80076d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d8:	2b1f      	cmp	r3, #31
 80076da:	d934      	bls.n	8007746 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80076dc:	2300      	movs	r3, #0
 80076de:	643b      	str	r3, [r7, #64]	; 0x40
 80076e0:	e02b      	b.n	800773a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80076e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80076e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ea:	3301      	adds	r3, #1
 80076ec:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80076ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	021a      	lsls	r2, r3, #8
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80076fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076fc:	3301      	adds	r3, #1
 80076fe:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	041a      	lsls	r2, r3, #16
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800770c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770e:	3301      	adds	r3, #1
 8007710:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	061a      	lsls	r2, r3, #24
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800771e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007720:	3301      	adds	r3, #1
 8007722:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f107 0214 	add.w	r2, r7, #20
 800772c:	4611      	mov	r1, r2
 800772e:	4618      	mov	r0, r3
 8007730:	f001 ffd1 	bl	80096d6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007736:	3301      	adds	r3, #1
 8007738:	643b      	str	r3, [r7, #64]	; 0x40
 800773a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800773c:	2b07      	cmp	r3, #7
 800773e:	d9d0      	bls.n	80076e2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007742:	3b20      	subs	r3, #32
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007746:	f7f8 fe4d 	bl	80003e4 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007752:	429a      	cmp	r2, r3
 8007754:	d902      	bls.n	800775c <HAL_SD_WriteBlocks+0x1b4>
 8007756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007758:	2b00      	cmp	r3, #0
 800775a:	d112      	bne.n	8007782 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a56      	ldr	r2, [pc, #344]	; (80078bc <HAL_SD_WriteBlocks+0x314>)
 8007762:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800776a:	431a      	orrs	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e097      	b.n	80078b2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007788:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800778c:	2b00      	cmp	r3, #0
 800778e:	d09b      	beq.n	80076c8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d022      	beq.n	80077f4 <HAL_SD_WriteBlocks+0x24c>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d91f      	bls.n	80077f4 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d01b      	beq.n	80077f4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f002 f8df 	bl	8009984 <SDMMC_CmdStopTransfer>
 80077c6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80077c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d012      	beq.n	80077f4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a3a      	ldr	r2, [pc, #232]	; (80078bc <HAL_SD_WriteBlocks+0x314>)
 80077d4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077dc:	431a      	orrs	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e05e      	b.n	80078b2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d012      	beq.n	8007828 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a2d      	ldr	r2, [pc, #180]	; (80078bc <HAL_SD_WriteBlocks+0x314>)
 8007808:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	f043 0208 	orr.w	r2, r3, #8
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e044      	b.n	80078b2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d012      	beq.n	800785c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a20      	ldr	r2, [pc, #128]	; (80078bc <HAL_SD_WriteBlocks+0x314>)
 800783c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	f043 0202 	orr.w	r2, r3, #2
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e02a      	b.n	80078b2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007862:	f003 0310 	and.w	r3, r3, #16
 8007866:	2b00      	cmp	r3, #0
 8007868:	d012      	beq.n	8007890 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a13      	ldr	r2, [pc, #76]	; (80078bc <HAL_SD_WriteBlocks+0x314>)
 8007870:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	f043 0210 	orr.w	r2, r3, #16
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e010      	b.n	80078b2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a0a      	ldr	r2, [pc, #40]	; (80078c0 <HAL_SD_WriteBlocks+0x318>)
 8007896:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	e006      	b.n	80078b2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
  }
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3748      	adds	r7, #72	; 0x48
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	1fe00fff 	.word	0x1fe00fff
 80078c0:	18000f3a 	.word	0x18000f3a

080078c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d008      	beq.n	80078f2 <HAL_SD_IRQHandler+0x2e>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f003 0308 	and.w	r3, r3, #8
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f001 f92a 	bl	8008b44 <SD_Read_IT>
 80078f0:	e19a      	b.n	8007c28 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 80ac 	beq.w	8007a5a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800790a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	4b9d      	ldr	r3, [pc, #628]	; (8007b8c <HAL_SD_IRQHandler+0x2c8>)
 8007918:	400b      	ands	r3, r1
 800791a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800792a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800793a:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f003 0308 	and.w	r3, r3, #8
 8007942:	2b00      	cmp	r3, #0
 8007944:	d038      	beq.n	80079b8 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d104      	bne.n	800795a <HAL_SD_IRQHandler+0x96>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	d011      	beq.n	800797e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f002 f810 	bl	8009984 <SDMMC_CmdStopTransfer>
 8007964:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d008      	beq.n	800797e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f959 	bl	8007c30 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a83      	ldr	r2, [pc, #524]	; (8007b90 <HAL_SD_IRQHandler+0x2cc>)
 8007984:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	d104      	bne.n	80079a8 <HAL_SD_IRQHandler+0xe4>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f002 fe79 	bl	800a6a0 <HAL_SD_RxCpltCallback>
 80079ae:	e13b      	b.n	8007c28 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f002 fe6b 	bl	800a68c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80079b6:	e137      	b.n	8007c28 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 8132 	beq.w	8007c28 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2200      	movs	r2, #0
 80079ca:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2200      	movs	r2, #0
 80079d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2200      	movs	r2, #0
 80079da:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d104      	bne.n	80079f0 <HAL_SD_IRQHandler+0x12c>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d011      	beq.n	8007a14 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f001 ffc5 	bl	8009984 <SDMMC_CmdStopTransfer>
 80079fa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d008      	beq.n	8007a14 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f90e 	bl	8007c30 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f003 0310 	and.w	r3, r3, #16
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d104      	bne.n	8007a36 <HAL_SD_IRQHandler+0x172>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f002 fe28 	bl	800a68c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d105      	bne.n	8007a52 <HAL_SD_IRQHandler+0x18e>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 80eb 	beq.w	8007c28 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f002 fe24 	bl	800a6a0 <HAL_SD_RxCpltCallback>
}
 8007a58:	e0e6      	b.n	8007c28 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d008      	beq.n	8007a7a <HAL_SD_IRQHandler+0x1b6>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f003 0308 	and.w	r3, r3, #8
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 f8ac 	bl	8008bd0 <SD_Write_IT>
 8007a78:	e0d6      	b.n	8007c28 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a80:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 80a2 	beq.w	8007bce <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9c:	f043 0202 	orr.w	r2, r3, #2
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aaa:	f003 0308 	and.w	r3, r3, #8
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d005      	beq.n	8007abe <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab6:	f043 0208 	orr.w	r2, r3, #8
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac4:	f003 0320 	and.w	r3, r3, #32
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	f043 0220 	orr.w	r2, r3, #32
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d005      	beq.n	8007af2 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aea:	f043 0210 	orr.w	r2, r3, #16
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a26      	ldr	r2, [pc, #152]	; (8007b90 <HAL_SD_IRQHandler+0x2cc>)
 8007af8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007b08:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b18:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b28:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68da      	ldr	r2, [r3, #12]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b38:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f001 ff20 	bl	8009984 <SDMMC_CmdStopTransfer>
 8007b44:	4602      	mov	r2, r0
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b5e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f003 0308 	and.w	r3, r3, #8
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00f      	beq.n	8007b94 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f854 	bl	8007c30 <HAL_SD_ErrorCallback>
}
 8007b88:	e04e      	b.n	8007c28 <HAL_SD_IRQHandler+0x364>
 8007b8a:	bf00      	nop
 8007b8c:	ffff3ec5 	.word	0xffff3ec5
 8007b90:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d044      	beq.n	8007c28 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d040      	beq.n	8007c28 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007bb4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f832 	bl	8007c30 <HAL_SD_ErrorCallback>
}
 8007bcc:	e02c      	b.n	8007c28 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d025      	beq.n	8007c28 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be4:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10c      	bne.n	8007c0e <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 f84e 	bl	8008ca0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007c04:	e010      	b.n	8007c28 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 f836 	bl	8008c78 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8007c0c:	e00c      	b.n	8007c28 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f003 0320 	and.w	r3, r3, #32
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d003      	beq.n	8007c20 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 f837 	bl	8008c8c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8007c1e:	e003      	b.n	8007c28 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f81f 	bl	8008c64 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8007c26:	e7ff      	b.n	8007c28 <HAL_SD_IRQHandler+0x364>
 8007c28:	bf00      	nop
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
	...

08007c5c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c6a:	0f9b      	lsrs	r3, r3, #30
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c76:	0e9b      	lsrs	r3, r3, #26
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	f003 030f 	and.w	r3, r3, #15
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c88:	0e1b      	lsrs	r3, r3, #24
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	f003 0303 	and.w	r3, r3, #3
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c9a:	0c1b      	lsrs	r3, r3, #16
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca6:	0a1b      	lsrs	r3, r3, #8
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cbc:	0d1b      	lsrs	r3, r3, #20
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cc8:	0c1b      	lsrs	r3, r3, #16
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cda:	0bdb      	lsrs	r3, r3, #15
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cec:	0b9b      	lsrs	r3, r3, #14
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfe:	0b5b      	lsrs	r3, r3, #13
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d10:	0b1b      	lsrs	r3, r3, #12
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2200      	movs	r2, #0
 8007d22:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d163      	bne.n	8007df4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d30:	009a      	lsls	r2, r3, #2
 8007d32:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d36:	4013      	ands	r3, r2
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d3c:	0f92      	lsrs	r2, r2, #30
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d48:	0edb      	lsrs	r3, r3, #27
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	f003 0307 	and.w	r3, r3, #7
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d5a:	0e1b      	lsrs	r3, r3, #24
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d6c:	0d5b      	lsrs	r3, r3, #21
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	f003 0307 	and.w	r3, r3, #7
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d7e:	0c9b      	lsrs	r3, r3, #18
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	f003 0307 	and.w	r3, r3, #7
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d90:	0bdb      	lsrs	r3, r3, #15
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	f003 0307 	and.w	r3, r3, #7
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	7e1b      	ldrb	r3, [r3, #24]
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	f003 0307 	and.w	r3, r3, #7
 8007db2:	3302      	adds	r3, #2
 8007db4:	2201      	movs	r2, #1
 8007db6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007dbe:	fb02 f203 	mul.w	r2, r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	7a1b      	ldrb	r3, [r3, #8]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	f003 030f 	and.w	r3, r3, #15
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	409a      	lsls	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007de0:	0a52      	lsrs	r2, r2, #9
 8007de2:	fb02 f203 	mul.w	r2, r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007df0:	659a      	str	r2, [r3, #88]	; 0x58
 8007df2:	e031      	b.n	8007e58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d11d      	bne.n	8007e38 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e00:	041b      	lsls	r3, r3, #16
 8007e02:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e0a:	0c1b      	lsrs	r3, r3, #16
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	3301      	adds	r3, #1
 8007e18:	029a      	lsls	r2, r3, #10
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e2c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	659a      	str	r2, [r3, #88]	; 0x58
 8007e36:	e00f      	b.n	8007e58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a58      	ldr	r2, [pc, #352]	; (8007fa0 <HAL_SD_GetCardCSD+0x344>)
 8007e3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e09d      	b.n	8007f94 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e5c:	0b9b      	lsrs	r3, r3, #14
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e6e:	09db      	lsrs	r3, r3, #7
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e90:	0fdb      	lsrs	r3, r3, #31
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e9c:	0f5b      	lsrs	r3, r3, #29
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	f003 0303 	and.w	r3, r3, #3
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eae:	0e9b      	lsrs	r3, r3, #26
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ec0:	0d9b      	lsrs	r3, r3, #22
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f003 030f 	and.w	r3, r3, #15
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ed2:	0d5b      	lsrs	r3, r3, #21
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eee:	0c1b      	lsrs	r3, r3, #16
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f02:	0bdb      	lsrs	r3, r3, #15
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f16:	0b9b      	lsrs	r3, r3, #14
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f2a:	0b5b      	lsrs	r3, r3, #13
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f3e:	0b1b      	lsrs	r3, r3, #12
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f52:	0a9b      	lsrs	r3, r3, #10
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f66:	0a1b      	lsrs	r3, r3, #8
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	f003 0303 	and.w	r3, r3, #3
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f7a:	085b      	lsrs	r3, r3, #1
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	1fe00fff 	.word	0x1fe00fff

08007fa4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b094      	sub	sp, #80	; 0x50
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007fb4:	f107 0308 	add.w	r3, r7, #8
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fb64 	bl	8008688 <SD_SendSDStatus>
 8007fc0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d011      	beq.n	8007fec <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a4f      	ldr	r2, [pc, #316]	; (800810c <HAL_SD_GetCardStatus+0x168>)
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007fea:	e070      	b.n	80080ce <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	099b      	lsrs	r3, r3, #6
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	095b      	lsrs	r3, r3, #5
 8008000:	b2db      	uxtb	r3, r3
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	b2da      	uxtb	r2, r3
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	0a1b      	lsrs	r3, r3, #8
 8008010:	b29b      	uxth	r3, r3
 8008012:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008016:	b29a      	uxth	r2, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	0e1b      	lsrs	r3, r3, #24
 800801c:	b29b      	uxth	r3, r3
 800801e:	4313      	orrs	r3, r2
 8008020:	b29a      	uxth	r2, r3
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	061a      	lsls	r2, r3, #24
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	021b      	lsls	r3, r3, #8
 800802e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008032:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	0a1b      	lsrs	r3, r3, #8
 8008038:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800803c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	0e1b      	lsrs	r3, r3, #24
 8008042:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	b2da      	uxtb	r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	0a1b      	lsrs	r3, r3, #8
 8008054:	b2da      	uxtb	r2, r3
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	0d1b      	lsrs	r3, r3, #20
 800805e:	b2db      	uxtb	r3, r3
 8008060:	f003 030f 	and.w	r3, r3, #15
 8008064:	b2da      	uxtb	r2, r3
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	0c1b      	lsrs	r3, r3, #16
 800806e:	b29b      	uxth	r3, r3
 8008070:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008074:	b29a      	uxth	r2, r3
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	b29b      	uxth	r3, r3
 800807a:	b2db      	uxtb	r3, r3
 800807c:	b29b      	uxth	r3, r3
 800807e:	4313      	orrs	r3, r2
 8008080:	b29a      	uxth	r2, r3
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	0a9b      	lsrs	r3, r3, #10
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008090:	b2da      	uxtb	r2, r3
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	0a1b      	lsrs	r3, r3, #8
 800809a:	b2db      	uxtb	r3, r3
 800809c:	f003 0303 	and.w	r3, r3, #3
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	091b      	lsrs	r3, r3, #4
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	f003 030f 	and.w	r3, r3, #15
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	0e1b      	lsrs	r3, r3, #24
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80080d6:	4618      	mov	r0, r3
 80080d8:	f001 fba4 	bl	8009824 <SDMMC_CmdBlockLength>
 80080dc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80080de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00d      	beq.n	8008100 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a08      	ldr	r2, [pc, #32]	; (800810c <HAL_SD_GetCardStatus+0x168>)
 80080ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008100:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008104:	4618      	mov	r0, r3
 8008106:	3750      	adds	r7, #80	; 0x50
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	1fe00fff 	.word	0x1fe00fff

08008110 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008168:	b5b0      	push	{r4, r5, r7, lr}
 800816a:	b08e      	sub	sp, #56	; 0x38
 800816c:	af04      	add	r7, sp, #16
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2203      	movs	r2, #3
 800817c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008184:	2b03      	cmp	r3, #3
 8008186:	d02e      	beq.n	80081e6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800818e:	d106      	bne.n	800819e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008194:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	639a      	str	r2, [r3, #56]	; 0x38
 800819c:	e029      	b.n	80081f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081a4:	d10a      	bne.n	80081bc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fb66 	bl	8008878 <SD_WideBus_Enable>
 80081ac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	431a      	orrs	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	639a      	str	r2, [r3, #56]	; 0x38
 80081ba:	e01a      	b.n	80081f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10a      	bne.n	80081d8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fba3 	bl	800890e <SD_WideBus_Disable>
 80081c8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	639a      	str	r2, [r3, #56]	; 0x38
 80081d6:	e00c      	b.n	80081f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	639a      	str	r2, [r3, #56]	; 0x38
 80081e4:	e005      	b.n	80081f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d007      	beq.n	800820a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a2e      	ldr	r2, [pc, #184]	; (80082b8 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008200:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008208:	e034      	b.n	8008274 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	2b03      	cmp	r3, #3
 8008226:	d903      	bls.n	8008230 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	61bb      	str	r3, [r7, #24]
 800822e:	e012      	b.n	8008256 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008238:	d103      	bne.n	8008242 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	61bb      	str	r3, [r7, #24]
 8008240:	e009      	b.n	8008256 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800824a:	d102      	bne.n	8008252 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800824c:	2302      	movs	r3, #2
 800824e:	61bb      	str	r3, [r7, #24]
 8008250:	e001      	b.n	8008256 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8008252:	2304      	movs	r3, #4
 8008254:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681d      	ldr	r5, [r3, #0]
 800825a:	466c      	mov	r4, sp
 800825c:	f107 0314 	add.w	r3, r7, #20
 8008260:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008268:	f107 0308 	add.w	r3, r7, #8
 800826c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800826e:	4628      	mov	r0, r5
 8008270:	f001 f9fa 	bl	8009668 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800827c:	4618      	mov	r0, r3
 800827e:	f001 fad1 	bl	8009824 <SDMMC_CmdBlockLength>
 8008282:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00c      	beq.n	80082a4 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a0a      	ldr	r2, [pc, #40]	; (80082b8 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008290:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	431a      	orrs	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80082ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3728      	adds	r7, #40	; 0x28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bdb0      	pop	{r4, r5, r7, pc}
 80082b8:	1fe00fff 	.word	0x1fe00fff

080082bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80082c8:	f107 030c 	add.w	r3, r7, #12
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 faaa 	bl	8008828 <SD_SendStatus>
 80082d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	431a      	orrs	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	0a5b      	lsrs	r3, r3, #9
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80082f2:	693b      	ldr	r3, [r7, #16]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082fc:	b590      	push	{r4, r7, lr}
 80082fe:	b091      	sub	sp, #68	; 0x44
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008304:	2301      	movs	r3, #1
 8008306:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4618      	mov	r0, r3
 800830e:	f001 fa04 	bl	800971a <SDMMC_GetPowerState>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d102      	bne.n	800831e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008318:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800831c:	e0a8      	b.n	8008470 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008322:	2b03      	cmp	r3, #3
 8008324:	d02e      	beq.n	8008384 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4618      	mov	r0, r3
 800832c:	f001 fc50 	bl	8009bd0 <SDMMC_CmdSendCID>
 8008330:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <SD_InitCard+0x40>
    {
      return errorstate;
 8008338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833a:	e099      	b.n	8008470 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2100      	movs	r1, #0
 8008342:	4618      	mov	r0, r3
 8008344:	f001 fa2f 	bl	80097a6 <SDMMC_GetResponse>
 8008348:	4602      	mov	r2, r0
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2104      	movs	r1, #4
 8008354:	4618      	mov	r0, r3
 8008356:	f001 fa26 	bl	80097a6 <SDMMC_GetResponse>
 800835a:	4602      	mov	r2, r0
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2108      	movs	r1, #8
 8008366:	4618      	mov	r0, r3
 8008368:	f001 fa1d 	bl	80097a6 <SDMMC_GetResponse>
 800836c:	4602      	mov	r2, r0
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	210c      	movs	r1, #12
 8008378:	4618      	mov	r0, r3
 800837a:	f001 fa14 	bl	80097a6 <SDMMC_GetResponse>
 800837e:	4602      	mov	r2, r0
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008388:	2b03      	cmp	r3, #3
 800838a:	d00d      	beq.n	80083a8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f107 020e 	add.w	r2, r7, #14
 8008394:	4611      	mov	r1, r2
 8008396:	4618      	mov	r0, r3
 8008398:	f001 fc59 	bl	8009c4e <SDMMC_CmdSetRelAdd>
 800839c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800839e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <SD_InitCard+0xac>
    {
      return errorstate;
 80083a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a6:	e063      	b.n	8008470 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d036      	beq.n	800841e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80083b0:	89fb      	ldrh	r3, [r7, #14]
 80083b2:	461a      	mov	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083c0:	041b      	lsls	r3, r3, #16
 80083c2:	4619      	mov	r1, r3
 80083c4:	4610      	mov	r0, r2
 80083c6:	f001 fc22 	bl	8009c0e <SDMMC_CmdSendCSD>
 80083ca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80083cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <SD_InitCard+0xda>
    {
      return errorstate;
 80083d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d4:	e04c      	b.n	8008470 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2100      	movs	r1, #0
 80083dc:	4618      	mov	r0, r3
 80083de:	f001 f9e2 	bl	80097a6 <SDMMC_GetResponse>
 80083e2:	4602      	mov	r2, r0
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2104      	movs	r1, #4
 80083ee:	4618      	mov	r0, r3
 80083f0:	f001 f9d9 	bl	80097a6 <SDMMC_GetResponse>
 80083f4:	4602      	mov	r2, r0
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2108      	movs	r1, #8
 8008400:	4618      	mov	r0, r3
 8008402:	f001 f9d0 	bl	80097a6 <SDMMC_GetResponse>
 8008406:	4602      	mov	r2, r0
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	210c      	movs	r1, #12
 8008412:	4618      	mov	r0, r3
 8008414:	f001 f9c7 	bl	80097a6 <SDMMC_GetResponse>
 8008418:	4602      	mov	r2, r0
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2104      	movs	r1, #4
 8008424:	4618      	mov	r0, r3
 8008426:	f001 f9be 	bl	80097a6 <SDMMC_GetResponse>
 800842a:	4603      	mov	r3, r0
 800842c:	0d1a      	lsrs	r2, r3, #20
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008432:	f107 0310 	add.w	r3, r7, #16
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff fc0f 	bl	8007c5c <HAL_SD_GetCardCSD>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008444:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008448:	e012      	b.n	8008470 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6819      	ldr	r1, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008452:	041b      	lsls	r3, r3, #16
 8008454:	f04f 0400 	mov.w	r4, #0
 8008458:	461a      	mov	r2, r3
 800845a:	4623      	mov	r3, r4
 800845c:	4608      	mov	r0, r1
 800845e:	f001 facd 	bl	80099fc <SDMMC_CmdSelDesel>
 8008462:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <SD_InitCard+0x172>
  {
    return errorstate;
 800846a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846c:	e000      	b.n	8008470 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3744      	adds	r7, #68	; 0x44
 8008474:	46bd      	mov	sp, r7
 8008476:	bd90      	pop	{r4, r7, pc}

08008478 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008484:	2300      	movs	r3, #0
 8008486:	61fb      	str	r3, [r7, #28]
 8008488:	2300      	movs	r3, #0
 800848a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800848c:	f7f7 ffaa 	bl	80003e4 <HAL_GetTick>
 8008490:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f001 fad4 	bl	8009a44 <SDMMC_CmdGoIdleState>
 800849c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <SD_PowerON+0x30>
  {
    return errorstate;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	e0e9      	b.n	800867c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 fae7 	bl	8009a80 <SDMMC_CmdOperCond>
 80084b2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00d      	beq.n	80084d6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f001 fabd 	bl	8009a44 <SDMMC_CmdGoIdleState>
 80084ca:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <SD_PowerON+0x64>
    {
      return errorstate;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	e0d2      	b.n	800867c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d137      	bne.n	8008554 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2100      	movs	r1, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f001 fae8 	bl	8009ac0 <SDMMC_CmdAppCommand>
 80084f0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d02d      	beq.n	8008554 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084fc:	e0be      	b.n	800867c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2100      	movs	r1, #0
 8008504:	4618      	mov	r0, r3
 8008506:	f001 fadb 	bl	8009ac0 <SDMMC_CmdAppCommand>
 800850a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <SD_PowerON+0x9e>
    {
      return errorstate;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	e0b2      	b.n	800867c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	495a      	ldr	r1, [pc, #360]	; (8008684 <SD_PowerON+0x20c>)
 800851c:	4618      	mov	r0, r3
 800851e:	f001 faf2 	bl	8009b06 <SDMMC_CmdAppOperCommand>
 8008522:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800852a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800852e:	e0a5      	b.n	800867c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2100      	movs	r1, #0
 8008536:	4618      	mov	r0, r3
 8008538:	f001 f935 	bl	80097a6 <SDMMC_GetResponse>
 800853c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	0fdb      	lsrs	r3, r3, #31
 8008542:	2b01      	cmp	r3, #1
 8008544:	d101      	bne.n	800854a <SD_PowerON+0xd2>
 8008546:	2301      	movs	r3, #1
 8008548:	e000      	b.n	800854c <SD_PowerON+0xd4>
 800854a:	2300      	movs	r3, #0
 800854c:	61bb      	str	r3, [r7, #24]

    count++;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3301      	adds	r3, #1
 8008552:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800855a:	4293      	cmp	r3, r2
 800855c:	d802      	bhi.n	8008564 <SD_PowerON+0xec>
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d0cc      	beq.n	80084fe <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800856a:	4293      	cmp	r3, r2
 800856c:	d902      	bls.n	8008574 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800856e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008572:	e083      	b.n	800867c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d07d      	beq.n	800867a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	2b02      	cmp	r3, #2
 800858a:	d176      	bne.n	800867a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d071      	beq.n	800867a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800859c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f042 0208 	orr.w	r2, r2, #8
 80085ac:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f001 fbb2 	bl	8009d1c <SDMMC_CmdVoltageSwitch>
 80085b8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00c      	beq.n	80085da <SD_PowerON+0x162>
        {
          return errorstate;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	e05b      	b.n	800867c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80085c4:	f7f7 ff0e 	bl	80003e4 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085d2:	d102      	bne.n	80085da <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80085d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085d8:	e050      	b.n	800867c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085e8:	d1ec      	bne.n	80085c4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008602:	d002      	beq.n	800860a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008604:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008608:	e038      	b.n	800867c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800860a:	2001      	movs	r0, #1
 800860c:	f7ff fb1a 	bl	8007c44 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f042 0204 	orr.w	r2, r2, #4
 800861e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008620:	e00a      	b.n	8008638 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008622:	f7f7 fedf 	bl	80003e4 <HAL_GetTick>
 8008626:	4602      	mov	r2, r0
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008630:	d102      	bne.n	8008638 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008632:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008636:	e021      	b.n	800867c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008642:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008646:	d1ec      	bne.n	8008622 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008650:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800865c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008660:	d102      	bne.n	8008668 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008662:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008666:	e009      	b.n	800867c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2213      	movs	r2, #19
 800866e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008678:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3720      	adds	r7, #32
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	c1100000 	.word	0xc1100000

08008688 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08c      	sub	sp, #48	; 0x30
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008692:	f7f7 fea7 	bl	80003e4 <HAL_GetTick>
 8008696:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2100      	movs	r1, #0
 80086a2:	4618      	mov	r0, r3
 80086a4:	f001 f87f 	bl	80097a6 <SDMMC_GetResponse>
 80086a8:	4603      	mov	r3, r0
 80086aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086b2:	d102      	bne.n	80086ba <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80086b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086b8:	e0b0      	b.n	800881c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2140      	movs	r1, #64	; 0x40
 80086c0:	4618      	mov	r0, r3
 80086c2:	f001 f8af 	bl	8009824 <SDMMC_CmdBlockLength>
 80086c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d005      	beq.n	80086da <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	e0a0      	b.n	800881c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e2:	041b      	lsls	r3, r3, #16
 80086e4:	4619      	mov	r1, r3
 80086e6:	4610      	mov	r0, r2
 80086e8:	f001 f9ea 	bl	8009ac0 <SDMMC_CmdAppCommand>
 80086ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	e08d      	b.n	800881c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008704:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008706:	2340      	movs	r3, #64	; 0x40
 8008708:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800870a:	2360      	movs	r3, #96	; 0x60
 800870c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800870e:	2302      	movs	r3, #2
 8008710:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008712:	2300      	movs	r3, #0
 8008714:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008716:	2301      	movs	r3, #1
 8008718:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f107 0208 	add.w	r2, r7, #8
 8008722:	4611      	mov	r1, r2
 8008724:	4618      	mov	r0, r3
 8008726:	f001 f851 	bl	80097cc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4618      	mov	r0, r3
 8008730:	f001 fad2 	bl	8009cd8 <SDMMC_CmdStatusRegister>
 8008734:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d02b      	beq.n	8008794 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	e069      	b.n	800881c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d013      	beq.n	800877e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008756:	2300      	movs	r3, #0
 8008758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800875a:	e00d      	b.n	8008778 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4618      	mov	r0, r3
 8008762:	f000 ffab 	bl	80096bc <SDMMC_ReadFIFO>
 8008766:	4602      	mov	r2, r0
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	601a      	str	r2, [r3, #0]
        pData++;
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	3304      	adds	r3, #4
 8008770:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	3301      	adds	r3, #1
 8008776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	2b07      	cmp	r3, #7
 800877c:	d9ee      	bls.n	800875c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800877e:	f7f7 fe31 	bl	80003e4 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800878c:	d102      	bne.n	8008794 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800878e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008792:	e043      	b.n	800881c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800879a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0d2      	beq.n	8008748 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a8:	f003 0308 	and.w	r3, r3, #8
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80087b0:	2308      	movs	r3, #8
 80087b2:	e033      	b.n	800881c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80087c2:	2302      	movs	r3, #2
 80087c4:	e02a      	b.n	800881c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087cc:	f003 0320 	and.w	r3, r3, #32
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d017      	beq.n	8008804 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80087d4:	2320      	movs	r3, #32
 80087d6:	e021      	b.n	800881c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 ff6d 	bl	80096bc <SDMMC_ReadFIFO>
 80087e2:	4602      	mov	r2, r0
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	601a      	str	r2, [r3, #0]
    pData++;
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	3304      	adds	r3, #4
 80087ec:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80087ee:	f7f7 fdf9 	bl	80003e4 <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087fc:	d102      	bne.n	8008804 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80087fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008802:	e00b      	b.n	800881c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1e2      	bne.n	80087d8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a03      	ldr	r2, [pc, #12]	; (8008824 <SD_SendSDStatus+0x19c>)
 8008818:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3730      	adds	r7, #48	; 0x30
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	18000f3a 	.word	0x18000f3a

08008828 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d102      	bne.n	800883e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008838:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800883c:	e018      	b.n	8008870 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008846:	041b      	lsls	r3, r3, #16
 8008848:	4619      	mov	r1, r3
 800884a:	4610      	mov	r0, r2
 800884c:	f001 fa21 	bl	8009c92 <SDMMC_CmdSendStatus>
 8008850:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	e009      	b.n	8008870 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2100      	movs	r1, #0
 8008862:	4618      	mov	r0, r3
 8008864:	f000 ff9f 	bl	80097a6 <SDMMC_GetResponse>
 8008868:	4602      	mov	r2, r0
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008880:	2300      	movs	r3, #0
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	2300      	movs	r3, #0
 8008886:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2100      	movs	r1, #0
 800888e:	4618      	mov	r0, r3
 8008890:	f000 ff89 	bl	80097a6 <SDMMC_GetResponse>
 8008894:	4603      	mov	r3, r0
 8008896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800889a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800889e:	d102      	bne.n	80088a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088a4:	e02f      	b.n	8008906 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80088a6:	f107 030c 	add.w	r3, r7, #12
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f879 	bl	80089a4 <SD_FindSCR>
 80088b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	e023      	b.n	8008906 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d01c      	beq.n	8008902 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088d0:	041b      	lsls	r3, r3, #16
 80088d2:	4619      	mov	r1, r3
 80088d4:	4610      	mov	r0, r2
 80088d6:	f001 f8f3 	bl	8009ac0 <SDMMC_CmdAppCommand>
 80088da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	e00f      	b.n	8008906 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2102      	movs	r1, #2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f001 f92a 	bl	8009b46 <SDMMC_CmdBusWidth>
 80088f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	e003      	b.n	8008906 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088fe:	2300      	movs	r3, #0
 8008900:	e001      	b.n	8008906 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008902:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b086      	sub	sp, #24
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008916:	2300      	movs	r3, #0
 8008918:	60fb      	str	r3, [r7, #12]
 800891a:	2300      	movs	r3, #0
 800891c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2100      	movs	r1, #0
 8008924:	4618      	mov	r0, r3
 8008926:	f000 ff3e 	bl	80097a6 <SDMMC_GetResponse>
 800892a:	4603      	mov	r3, r0
 800892c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008934:	d102      	bne.n	800893c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800893a:	e02f      	b.n	800899c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800893c:	f107 030c 	add.w	r3, r7, #12
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f82e 	bl	80089a4 <SD_FindSCR>
 8008948:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	e023      	b.n	800899c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d01c      	beq.n	8008998 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008966:	041b      	lsls	r3, r3, #16
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f001 f8a8 	bl	8009ac0 <SDMMC_CmdAppCommand>
 8008970:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	e00f      	b.n	800899c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2100      	movs	r1, #0
 8008982:	4618      	mov	r0, r3
 8008984:	f001 f8df 	bl	8009b46 <SDMMC_CmdBusWidth>
 8008988:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	e003      	b.n	800899c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008994:	2300      	movs	r3, #0
 8008996:	e001      	b.n	800899c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008998:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800899c:	4618      	mov	r0, r3
 800899e:	3718      	adds	r7, #24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b08e      	sub	sp, #56	; 0x38
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80089ae:	f7f7 fd19 	bl	80003e4 <HAL_GetTick>
 80089b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80089b4:	2300      	movs	r3, #0
 80089b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80089b8:	2300      	movs	r3, #0
 80089ba:	60bb      	str	r3, [r7, #8]
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2108      	movs	r1, #8
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 ff2a 	bl	8009824 <SDMMC_CmdBlockLength>
 80089d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <SD_FindSCR+0x38>
  {
    return errorstate;
 80089d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089da:	e0ad      	b.n	8008b38 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089e4:	041b      	lsls	r3, r3, #16
 80089e6:	4619      	mov	r1, r3
 80089e8:	4610      	mov	r0, r2
 80089ea:	f001 f869 	bl	8009ac0 <SDMMC_CmdAppCommand>
 80089ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <SD_FindSCR+0x56>
  {
    return errorstate;
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	e09e      	b.n	8008b38 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008a00:	2308      	movs	r3, #8
 8008a02:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008a04:	2330      	movs	r3, #48	; 0x30
 8008a06:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a08:	2302      	movs	r3, #2
 8008a0a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a10:	2301      	movs	r3, #1
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f107 0210 	add.w	r2, r7, #16
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 fed4 	bl	80097cc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f001 f8af 	bl	8009b8c <SDMMC_CmdSendSCR>
 8008a2e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d027      	beq.n	8008a86 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	e07e      	b.n	8008b38 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d113      	bne.n	8008a70 <SD_FindSCR+0xcc>
 8008a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d110      	bne.n	8008a70 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fe32 	bl	80096bc <SDMMC_ReadFIFO>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 fe2b 	bl	80096bc <SDMMC_ReadFIFO>
 8008a66:	4603      	mov	r3, r0
 8008a68:	60fb      	str	r3, [r7, #12]
      index++;
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a70:	f7f7 fcb8 	bl	80003e4 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a7e:	d102      	bne.n	8008a86 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a84:	e058      	b.n	8008b38 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a8c:	f240 532a 	movw	r3, #1322	; 0x52a
 8008a90:	4013      	ands	r3, r2
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0d1      	beq.n	8008a3a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9c:	f003 0308 	and.w	r3, r3, #8
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2208      	movs	r2, #8
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008aac:	2308      	movs	r3, #8
 8008aae:	e043      	b.n	8008b38 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab6:	f003 0302 	and.w	r3, r3, #2
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d005      	beq.n	8008aca <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	e036      	b.n	8008b38 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad0:	f003 0320 	and.w	r3, r3, #32
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2220      	movs	r2, #32
 8008ade:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008ae0:	2320      	movs	r3, #32
 8008ae2:	e029      	b.n	8008b38 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <SD_FindSCR+0x19c>)
 8008aea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	061a      	lsls	r2, r3, #24
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	021b      	lsls	r3, r3, #8
 8008af4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008af8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	0a1b      	lsrs	r3, r3, #8
 8008afe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b02:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	0e1b      	lsrs	r3, r3, #24
 8008b08:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	601a      	str	r2, [r3, #0]
    scr++;
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b10:	3304      	adds	r3, #4
 8008b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	061a      	lsls	r2, r3, #24
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	021b      	lsls	r3, r3, #8
 8008b1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	0a1b      	lsrs	r3, r3, #8
 8008b26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b2a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	0e1b      	lsrs	r3, r3, #24
 8008b30:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3738      	adds	r7, #56	; 0x38
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	18000f3a 	.word	0x18000f3a

08008b44 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b50:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b56:	2b1f      	cmp	r3, #31
 8008b58:	d936      	bls.n	8008bc8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	617b      	str	r3, [r7, #20]
 8008b5e:	e027      	b.n	8008bb0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 fda9 	bl	80096bc <SDMMC_ReadFIFO>
 8008b6a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	3301      	adds	r3, #1
 8008b78:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	0a1b      	lsrs	r3, r3, #8
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	3301      	adds	r3, #1
 8008b88:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	0c1b      	lsrs	r3, r3, #16
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	3301      	adds	r3, #1
 8008b98:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	0e1b      	lsrs	r3, r3, #24
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	3301      	adds	r3, #1
 8008bae:	617b      	str	r3, [r7, #20]
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2b07      	cmp	r3, #7
 8008bb4:	d9d4      	bls.n	8008b60 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	f1a3 0220 	sub.w	r2, r3, #32
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008bc8:	bf00      	nop
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a1b      	ldr	r3, [r3, #32]
 8008bdc:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be2:	2b1f      	cmp	r3, #31
 8008be4:	d93a      	bls.n	8008c5c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008be6:	2300      	movs	r3, #0
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	e02b      	b.n	8008c44 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	021a      	lsls	r2, r3, #8
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	3301      	adds	r3, #1
 8008c08:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	041a      	lsls	r2, r3, #16
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	061a      	lsls	r2, r3, #24
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f107 020c 	add.w	r2, r7, #12
 8008c36:	4611      	mov	r1, r2
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 fd4c 	bl	80096d6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	3301      	adds	r3, #1
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	2b07      	cmp	r3, #7
 8008c48:	d9d0      	bls.n	8008bec <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	f1a3 0220 	sub.w	r2, r3, #32
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008c5c:	bf00      	nop
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e02b      	b.n	8008d20 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d106      	bne.n	8008ce2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 fe4f 	bl	800a980 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	f000 fbf1 	bl	80094dc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	461a      	mov	r2, r3
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	f000 fc45 	bl	8009594 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008d0a:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <HAL_SDRAM_Init+0x74>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a06      	ldr	r2, [pc, #24]	; (8008d28 <HAL_SDRAM_Init+0x74>)
 8008d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d14:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	52004000 	.word	0x52004000

08008d2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e0e2      	b.n	8008f08 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a70      	ldr	r2, [pc, #448]	; (8008f10 <HAL_SPI_Init+0x1e4>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00f      	beq.n	8008d72 <HAL_SPI_Init+0x46>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a6f      	ldr	r2, [pc, #444]	; (8008f14 <HAL_SPI_Init+0x1e8>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d00a      	beq.n	8008d72 <HAL_SPI_Init+0x46>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a6d      	ldr	r2, [pc, #436]	; (8008f18 <HAL_SPI_Init+0x1ec>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d005      	beq.n	8008d72 <HAL_SPI_Init+0x46>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	2b0f      	cmp	r3, #15
 8008d6c:	d901      	bls.n	8008d72 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e0ca      	b.n	8008f08 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fb96 	bl	80094a4 <SPI_GetPacketSize>
 8008d78:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a64      	ldr	r2, [pc, #400]	; (8008f10 <HAL_SPI_Init+0x1e4>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d00c      	beq.n	8008d9e <HAL_SPI_Init+0x72>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a62      	ldr	r2, [pc, #392]	; (8008f14 <HAL_SPI_Init+0x1e8>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d007      	beq.n	8008d9e <HAL_SPI_Init+0x72>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a61      	ldr	r2, [pc, #388]	; (8008f18 <HAL_SPI_Init+0x1ec>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d002      	beq.n	8008d9e <HAL_SPI_Init+0x72>
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b08      	cmp	r3, #8
 8008d9c:	d811      	bhi.n	8008dc2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008da2:	4a5b      	ldr	r2, [pc, #364]	; (8008f10 <HAL_SPI_Init+0x1e4>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d009      	beq.n	8008dbc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a59      	ldr	r2, [pc, #356]	; (8008f14 <HAL_SPI_Init+0x1e8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d004      	beq.n	8008dbc <HAL_SPI_Init+0x90>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a58      	ldr	r2, [pc, #352]	; (8008f18 <HAL_SPI_Init+0x1ec>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d104      	bne.n	8008dc6 <HAL_SPI_Init+0x9a>
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2b10      	cmp	r3, #16
 8008dc0:	d901      	bls.n	8008dc6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e0a0      	b.n	8008f08 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d106      	bne.n	8008de0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f002 fce0 	bl	800b7a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2202      	movs	r2, #2
 8008de4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f022 0201 	bic.w	r2, r2, #1
 8008df6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e00:	d110      	bne.n	8008e24 <HAL_SPI_Init+0xf8>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e0a:	d10b      	bne.n	8008e24 <HAL_SPI_Init+0xf8>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d107      	bne.n	8008e24 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e22:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	69da      	ldr	r2, [r3, #28]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2c:	431a      	orrs	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	431a      	orrs	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e36:	ea42 0103 	orr.w	r1, r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	431a      	orrs	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	431a      	orrs	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	431a      	orrs	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a1b      	ldr	r3, [r3, #32]
 8008e6c:	431a      	orrs	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	431a      	orrs	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e84:	ea42 0103 	orr.w	r1, r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	430a      	orrs	r2, r1
 8008e92:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d113      	bne.n	8008ec4 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008eae:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ec2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 0201 	bic.w	r2, r2, #1
 8008ed2:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00a      	beq.n	8008ef6 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	40013000 	.word	0x40013000
 8008f14:	40003800 	.word	0x40003800
 8008f18:	40003c00 	.word	0x40003c00

08008f1c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b08a      	sub	sp, #40	; 0x28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008f34:	6a3a      	ldr	r2, [r7, #32]
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	4013      	ands	r3, r2
 8008f3a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008f44:	2300      	movs	r3, #0
 8008f46:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f4e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3330      	adds	r3, #48	; 0x30
 8008f56:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d113      	bne.n	8008f8a <HAL_SPI_IRQHandler+0x6e>
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	f003 0320 	and.w	r3, r3, #32
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10e      	bne.n	8008f8a <HAL_SPI_IRQHandler+0x6e>
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d009      	beq.n	8008f8a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	4798      	blx	r3
    handled = 1UL;
 8008f86:	2301      	movs	r3, #1
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10f      	bne.n	8008fb4 <HAL_SPI_IRQHandler+0x98>
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00a      	beq.n	8008fb4 <HAL_SPI_IRQHandler+0x98>
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d105      	bne.n	8008fb4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	4798      	blx	r3
    handled = 1UL;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	f003 0320 	and.w	r3, r3, #32
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10f      	bne.n	8008fde <HAL_SPI_IRQHandler+0xc2>
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00a      	beq.n	8008fde <HAL_SPI_IRQHandler+0xc2>
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	f003 0304 	and.w	r3, r3, #4
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d105      	bne.n	8008fde <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	4798      	blx	r3
    handled = 1UL;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f040 8170 	bne.w	80092c6 <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	f003 0308 	and.w	r3, r3, #8
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f000 80a0 	beq.w	8009132 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	699a      	ldr	r2, [r3, #24]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f042 0208 	orr.w	r2, r2, #8
 8009000:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	699a      	ldr	r2, [r3, #24]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f042 0210 	orr.w	r2, r2, #16
 8009010:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	699a      	ldr	r2, [r3, #24]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009020:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	691a      	ldr	r2, [r3, #16]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 0208 	bic.w	r2, r2, #8
 8009030:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00f      	beq.n	800905c <HAL_SPI_IRQHandler+0x140>
 800903c:	7cfb      	ldrb	r3, [r7, #19]
 800903e:	2b04      	cmp	r3, #4
 8009040:	d004      	beq.n	800904c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d007      	beq.n	800905c <HAL_SPI_IRQHandler+0x140>
 800904c:	7cfb      	ldrb	r3, [r7, #19]
 800904e:	2b03      	cmp	r3, #3
 8009050:	d059      	beq.n	8009106 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d154      	bne.n	8009106 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d13d      	bne.n	80090e6 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800906a:	e036      	b.n	80090da <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	2b0f      	cmp	r3, #15
 8009072:	d90b      	bls.n	800908c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800907c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800907e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009084:	1d1a      	adds	r2, r3, #4
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	665a      	str	r2, [r3, #100]	; 0x64
 800908a:	e01d      	b.n	80090c8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	2b07      	cmp	r3, #7
 8009092:	d90b      	bls.n	80090ac <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	8812      	ldrh	r2, [r2, #0]
 800909c:	b292      	uxth	r2, r2
 800909e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090a4:	1c9a      	adds	r2, r3, #2
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	665a      	str	r2, [r3, #100]	; 0x64
 80090aa:	e00d      	b.n	80090c8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090b8:	7812      	ldrb	r2, [r2, #0]
 80090ba:	b2d2      	uxtb	r2, r2
 80090bc:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	3b01      	subs	r3, #1
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1c2      	bne.n	800906c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f93c 	bl	8009364 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f90c 	bl	800931c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8009104:	e0e4      	b.n	80092d0 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009106:	7cfb      	ldrb	r3, [r7, #19]
 8009108:	2b05      	cmp	r3, #5
 800910a:	d103      	bne.n	8009114 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f8fb 	bl	8009308 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8009112:	e0da      	b.n	80092ca <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009114:	7cfb      	ldrb	r3, [r7, #19]
 8009116:	2b04      	cmp	r3, #4
 8009118:	d103      	bne.n	8009122 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f8ea 	bl	80092f4 <HAL_SPI_RxCpltCallback>
    return;
 8009120:	e0d3      	b.n	80092ca <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009122:	7cfb      	ldrb	r3, [r7, #19]
 8009124:	2b03      	cmp	r3, #3
 8009126:	f040 80d0 	bne.w	80092ca <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f8d8 	bl	80092e0 <HAL_SPI_TxCpltCallback>
    return;
 8009130:	e0cb      	b.n	80092ca <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00d      	beq.n	8009158 <HAL_SPI_IRQHandler+0x23c>
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	f003 0308 	and.w	r3, r3, #8
 8009142:	2b00      	cmp	r3, #0
 8009144:	d008      	beq.n	8009158 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	699a      	ldr	r2, [r3, #24]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009154:	619a      	str	r2, [r3, #24]

    return;
 8009156:	e0bb      	b.n	80092d0 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 80b6 	beq.w	80092d0 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00f      	beq.n	800918e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009174:	f043 0204 	orr.w	r2, r3, #4
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	699a      	ldr	r2, [r3, #24]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800918c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00f      	beq.n	80091b8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800919e:	f043 0201 	orr.w	r2, r3, #1
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	699a      	ldr	r2, [r3, #24]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091b6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00f      	beq.n	80091e2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091c8:	f043 0208 	orr.w	r2, r3, #8
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	699a      	ldr	r2, [r3, #24]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091e0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00f      	beq.n	800920c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	699a      	ldr	r2, [r3, #24]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0220 	orr.w	r2, r2, #32
 800920a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009212:	2b00      	cmp	r3, #0
 8009214:	d05b      	beq.n	80092ce <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 0201 	bic.w	r2, r2, #1
 8009224:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6919      	ldr	r1, [r3, #16]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	4b29      	ldr	r3, [pc, #164]	; (80092d8 <HAL_SPI_IRQHandler+0x3bc>)
 8009232:	400b      	ands	r3, r1
 8009234:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800923c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009240:	d138      	bne.n	80092b4 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009250:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009256:	2b00      	cmp	r3, #0
 8009258:	d013      	beq.n	8009282 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800925e:	4a1f      	ldr	r2, [pc, #124]	; (80092dc <HAL_SPI_IRQHandler+0x3c0>)
 8009260:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009266:	4618      	mov	r0, r3
 8009268:	f7f8 fda2 	bl	8001db0 <HAL_DMA_Abort_IT>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d007      	beq.n	8009282 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009278:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009286:	2b00      	cmp	r3, #0
 8009288:	d021      	beq.n	80092ce <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800928e:	4a13      	ldr	r2, [pc, #76]	; (80092dc <HAL_SPI_IRQHandler+0x3c0>)
 8009290:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009296:	4618      	mov	r0, r3
 8009298:	f7f8 fd8a 	bl	8001db0 <HAL_DMA_Abort_IT>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d015      	beq.n	80092ce <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80092b2:	e00c      	b.n	80092ce <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f82d 	bl	800931c <HAL_SPI_ErrorCallback>
    return;
 80092c2:	bf00      	nop
 80092c4:	e003      	b.n	80092ce <HAL_SPI_IRQHandler+0x3b2>
    return;
 80092c6:	bf00      	nop
 80092c8:	e002      	b.n	80092d0 <HAL_SPI_IRQHandler+0x3b4>
    return;
 80092ca:	bf00      	nop
 80092cc:	e000      	b.n	80092d0 <HAL_SPI_IRQHandler+0x3b4>
    return;
 80092ce:	bf00      	nop
  }
}
 80092d0:	3728      	adds	r7, #40	; 0x28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	fffffc94 	.word	0xfffffc94
 80092dc:	08009331 	.word	0x08009331

080092e0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f7ff ffe0 	bl	800931c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800935c:	bf00      	nop
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	699a      	ldr	r2, [r3, #24]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f042 0208 	orr.w	r2, r2, #8
 8009382:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	699a      	ldr	r2, [r3, #24]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0210 	orr.w	r2, r2, #16
 8009392:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f022 0201 	bic.w	r2, r2, #1
 80093a2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6919      	ldr	r1, [r3, #16]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	4b3c      	ldr	r3, [pc, #240]	; (80094a0 <SPI_CloseTransfer+0x13c>)
 80093b0:	400b      	ands	r3, r1
 80093b2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80093c2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b04      	cmp	r3, #4
 80093ce:	d014      	beq.n	80093fa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f003 0320 	and.w	r3, r3, #32
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00f      	beq.n	80093fa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	699a      	ldr	r2, [r3, #24]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f042 0220 	orr.w	r2, r2, #32
 80093f8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b03      	cmp	r3, #3
 8009404:	d014      	beq.n	8009430 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00f      	beq.n	8009430 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009416:	f043 0204 	orr.w	r2, r3, #4
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	699a      	ldr	r2, [r3, #24]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800942e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00f      	beq.n	800945a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009440:	f043 0201 	orr.w	r2, r3, #1
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	699a      	ldr	r2, [r3, #24]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009458:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00f      	beq.n	8009484 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800946a:	f043 0208 	orr.w	r2, r3, #8
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	699a      	ldr	r2, [r3, #24]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009482:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009494:	bf00      	nop
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	fffffc90 	.word	0xfffffc90

080094a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b0:	095b      	lsrs	r3, r3, #5
 80094b2:	3301      	adds	r3, #1
 80094b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	3301      	adds	r3, #1
 80094bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	3307      	adds	r3, #7
 80094c2:	08db      	lsrs	r3, r3, #3
 80094c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	fb02 f303 	mul.w	r3, r2, r3
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
	...

080094dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d121      	bne.n	8009532 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b27      	ldr	r3, [pc, #156]	; (8009590 <FMC_SDRAM_Init+0xb4>)
 80094f4:	4013      	ands	r3, r2
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	6851      	ldr	r1, [r2, #4]
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	6892      	ldr	r2, [r2, #8]
 80094fe:	4311      	orrs	r1, r2
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	68d2      	ldr	r2, [r2, #12]
 8009504:	4311      	orrs	r1, r2
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	6912      	ldr	r2, [r2, #16]
 800950a:	4311      	orrs	r1, r2
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	6952      	ldr	r2, [r2, #20]
 8009510:	4311      	orrs	r1, r2
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	6992      	ldr	r2, [r2, #24]
 8009516:	4311      	orrs	r1, r2
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	69d2      	ldr	r2, [r2, #28]
 800951c:	4311      	orrs	r1, r2
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	6a12      	ldr	r2, [r2, #32]
 8009522:	4311      	orrs	r1, r2
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009528:	430a      	orrs	r2, r1
 800952a:	431a      	orrs	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	601a      	str	r2, [r3, #0]
 8009530:	e026      	b.n	8009580 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	69d9      	ldr	r1, [r3, #28]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	4319      	orrs	r1, r3
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009548:	430b      	orrs	r3, r1
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	4b0e      	ldr	r3, [pc, #56]	; (8009590 <FMC_SDRAM_Init+0xb4>)
 8009556:	4013      	ands	r3, r2
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	6851      	ldr	r1, [r2, #4]
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	6892      	ldr	r2, [r2, #8]
 8009560:	4311      	orrs	r1, r2
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	68d2      	ldr	r2, [r2, #12]
 8009566:	4311      	orrs	r1, r2
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	6912      	ldr	r2, [r2, #16]
 800956c:	4311      	orrs	r1, r2
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	6952      	ldr	r2, [r2, #20]
 8009572:	4311      	orrs	r1, r2
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	6992      	ldr	r2, [r2, #24]
 8009578:	430a      	orrs	r2, r1
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	ffff8000 	.word	0xffff8000

08009594 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d128      	bne.n	80095f8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	1e59      	subs	r1, r3, #1
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	3b01      	subs	r3, #1
 80095ba:	011b      	lsls	r3, r3, #4
 80095bc:	4319      	orrs	r1, r3
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	021b      	lsls	r3, r3, #8
 80095c6:	4319      	orrs	r1, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	031b      	lsls	r3, r3, #12
 80095d0:	4319      	orrs	r1, r3
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	041b      	lsls	r3, r3, #16
 80095da:	4319      	orrs	r1, r3
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	051b      	lsls	r3, r3, #20
 80095e4:	4319      	orrs	r1, r3
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	061b      	lsls	r3, r3, #24
 80095ee:	430b      	orrs	r3, r1
 80095f0:	431a      	orrs	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	609a      	str	r2, [r3, #8]
 80095f6:	e02d      	b.n	8009654 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	4b19      	ldr	r3, [pc, #100]	; (8009664 <FMC_SDRAM_Timing_Init+0xd0>)
 80095fe:	4013      	ands	r3, r2
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	68d2      	ldr	r2, [r2, #12]
 8009604:	3a01      	subs	r2, #1
 8009606:	0311      	lsls	r1, r2, #12
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	6952      	ldr	r2, [r2, #20]
 800960c:	3a01      	subs	r2, #1
 800960e:	0512      	lsls	r2, r2, #20
 8009610:	430a      	orrs	r2, r1
 8009612:	431a      	orrs	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	1e59      	subs	r1, r3, #1
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	3b01      	subs	r3, #1
 800962c:	011b      	lsls	r3, r3, #4
 800962e:	4319      	orrs	r1, r3
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	3b01      	subs	r3, #1
 8009636:	021b      	lsls	r3, r3, #8
 8009638:	4319      	orrs	r1, r3
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	3b01      	subs	r3, #1
 8009640:	041b      	lsls	r3, r3, #16
 8009642:	4319      	orrs	r1, r3
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	3b01      	subs	r3, #1
 800964a:	061b      	lsls	r3, r3, #24
 800964c:	430b      	orrs	r3, r1
 800964e:	431a      	orrs	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	ff0f0fff 	.word	0xff0f0fff

08009668 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009668:	b084      	sub	sp, #16
 800966a:	b480      	push	{r7}
 800966c:	b085      	sub	sp, #20
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	f107 001c 	add.w	r0, r7, #28
 8009676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800967a:	2300      	movs	r3, #0
 800967c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800967e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009680:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009682:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8009686:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800968a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800968e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	4313      	orrs	r3, r2
 8009694:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	4b07      	ldr	r3, [pc, #28]	; (80096b8 <SDMMC_Init+0x50>)
 800969c:	4013      	ands	r3, r2
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	431a      	orrs	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	b004      	add	sp, #16
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	ffc02c00 	.word	0xffc02c00

080096bc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b083      	sub	sp, #12
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f043 0203 	orr.w	r2, r3, #3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800971a:	b480      	push	{r7}
 800971c:	b083      	sub	sp, #12
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0303 	and.w	r3, r3, #3
}
 800972a:	4618      	mov	r0, r3
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
	...

08009738 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009756:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800975c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009762:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68da      	ldr	r2, [r3, #12]
 800976e:	4b06      	ldr	r3, [pc, #24]	; (8009788 <SDMMC_SendCommand+0x50>)
 8009770:	4013      	ands	r3, r2
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	431a      	orrs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	fffee0c0 	.word	0xfffee0c0

0800978c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	b2db      	uxtb	r3, r3
}
 800979a:	4618      	mov	r0, r3
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b085      	sub	sp, #20
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3314      	adds	r3, #20
 80097b4:	461a      	mov	r2, r3
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	4413      	add	r3, r2
 80097ba:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097f2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80097f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80097fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	4313      	orrs	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	431a      	orrs	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009816:	2300      	movs	r3, #0

}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b088      	sub	sp, #32
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009832:	2310      	movs	r3, #16
 8009834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800983a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800983c:	2300      	movs	r3, #0
 800983e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009844:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009846:	f107 0308 	add.w	r3, r7, #8
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff ff73 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009852:	f241 3288 	movw	r2, #5000	; 0x1388
 8009856:	2110      	movs	r1, #16
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 faab 	bl	8009db4 <SDMMC_GetCmdResp1>
 800985e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009860:	69fb      	ldr	r3, [r7, #28]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3720      	adds	r7, #32
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b088      	sub	sp, #32
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009878:	2311      	movs	r3, #17
 800987a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800987c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009882:	2300      	movs	r3, #0
 8009884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800988a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800988c:	f107 0308 	add.w	r3, r7, #8
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff ff50 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009898:	f241 3288 	movw	r2, #5000	; 0x1388
 800989c:	2111      	movs	r1, #17
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fa88 	bl	8009db4 <SDMMC_GetCmdResp1>
 80098a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098a6:	69fb      	ldr	r3, [r7, #28]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3720      	adds	r7, #32
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80098be:	2312      	movs	r3, #18
 80098c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098c8:	2300      	movs	r3, #0
 80098ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098d2:	f107 0308 	add.w	r3, r7, #8
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff ff2d 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80098de:	f241 3288 	movw	r2, #5000	; 0x1388
 80098e2:	2112      	movs	r1, #18
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fa65 	bl	8009db4 <SDMMC_GetCmdResp1>
 80098ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098ec:	69fb      	ldr	r3, [r7, #28]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3720      	adds	r7, #32
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b088      	sub	sp, #32
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009904:	2318      	movs	r3, #24
 8009906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800990c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800990e:	2300      	movs	r3, #0
 8009910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009916:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009918:	f107 0308 	add.w	r3, r7, #8
 800991c:	4619      	mov	r1, r3
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f7ff ff0a 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009924:	f241 3288 	movw	r2, #5000	; 0x1388
 8009928:	2118      	movs	r1, #24
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fa42 	bl	8009db4 <SDMMC_GetCmdResp1>
 8009930:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009932:	69fb      	ldr	r3, [r7, #28]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3720      	adds	r7, #32
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800994a:	2319      	movs	r3, #25
 800994c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800994e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009952:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009954:	2300      	movs	r3, #0
 8009956:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800995c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800995e:	f107 0308 	add.w	r3, r7, #8
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7ff fee7 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800996a:	f241 3288 	movw	r2, #5000	; 0x1388
 800996e:	2119      	movs	r1, #25
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fa1f 	bl	8009db4 <SDMMC_GetCmdResp1>
 8009976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009978:	69fb      	ldr	r3, [r7, #28]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3720      	adds	r7, #32
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
	...

08009984 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800998c:	2300      	movs	r3, #0
 800998e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009990:	230c      	movs	r3, #12
 8009992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009998:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800999a:	2300      	movs	r3, #0
 800999c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800999e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099a2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099bc:	f107 0308 	add.w	r3, r7, #8
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7ff feb8 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80099c8:	4a0b      	ldr	r2, [pc, #44]	; (80099f8 <SDMMC_CmdStopTransfer+0x74>)
 80099ca:	210c      	movs	r1, #12
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f9f1 	bl	8009db4 <SDMMC_GetCmdResp1>
 80099d2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099e6:	d101      	bne.n	80099ec <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80099ec:	69fb      	ldr	r3, [r7, #28]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3720      	adds	r7, #32
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	05f5e100 	.word	0x05f5e100

080099fc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08a      	sub	sp, #40	; 0x28
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009a0c:	2307      	movs	r3, #7
 8009a0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a14:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a16:	2300      	movs	r3, #0
 8009a18:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a1e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a20:	f107 0310 	add.w	r3, r7, #16
 8009a24:	4619      	mov	r1, r3
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f7ff fe86 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a30:	2107      	movs	r1, #7
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 f9be 	bl	8009db4 <SDMMC_GetCmdResp1>
 8009a38:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3728      	adds	r7, #40	; 0x28
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009a50:	2300      	movs	r3, #0
 8009a52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009a54:	2300      	movs	r3, #0
 8009a56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a62:	f107 0308 	add.w	r3, r7, #8
 8009a66:	4619      	mov	r1, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7ff fe65 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f976 	bl	8009d60 <SDMMC_GetCmdError>
 8009a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a76:	69fb      	ldr	r3, [r7, #28]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3720      	adds	r7, #32
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009a88:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009a8e:	2308      	movs	r3, #8
 8009a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009aa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009aa2:	f107 0308 	add.w	r3, r7, #8
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff fe45 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fb6a 	bl	800a188 <SDMMC_GetCmdResp7>
 8009ab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ab6:	69fb      	ldr	r3, [r7, #28]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3720      	adds	r7, #32
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009ace:	2337      	movs	r3, #55	; 0x37
 8009ad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ae0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ae2:	f107 0308 	add.w	r3, r7, #8
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f7ff fe25 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8009af2:	2137      	movs	r1, #55	; 0x37
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f95d 	bl	8009db4 <SDMMC_GetCmdResp1>
 8009afa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009afc:	69fb      	ldr	r3, [r7, #28]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3720      	adds	r7, #32
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b088      	sub	sp, #32
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009b14:	2329      	movs	r3, #41	; 0x29
 8009b16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b28:	f107 0308 	add.w	r3, r7, #8
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7ff fe02 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fa75 	bl	800a024 <SDMMC_GetCmdResp3>
 8009b3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b3c:	69fb      	ldr	r3, [r7, #28]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3720      	adds	r7, #32
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b088      	sub	sp, #32
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009b54:	2306      	movs	r3, #6
 8009b56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b68:	f107 0308 	add.w	r3, r7, #8
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff fde2 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b78:	2106      	movs	r1, #6
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f91a 	bl	8009db4 <SDMMC_GetCmdResp1>
 8009b80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b82:	69fb      	ldr	r3, [r7, #28]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3720      	adds	r7, #32
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b088      	sub	sp, #32
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b94:	2300      	movs	r3, #0
 8009b96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009b98:	2333      	movs	r3, #51	; 0x33
 8009b9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009baa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bac:	f107 0308 	add.w	r3, r7, #8
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7ff fdc0 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bbc:	2133      	movs	r1, #51	; 0x33
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f8f8 	bl	8009db4 <SDMMC_GetCmdResp1>
 8009bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bc6:	69fb      	ldr	r3, [r7, #28]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3720      	adds	r7, #32
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b088      	sub	sp, #32
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009bdc:	2302      	movs	r3, #2
 8009bde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009be0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009be4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009be6:	2300      	movs	r3, #0
 8009be8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bf0:	f107 0308 	add.w	r3, r7, #8
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7ff fd9e 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f9c9 	bl	8009f94 <SDMMC_GetCmdResp2>
 8009c02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c04:	69fb      	ldr	r3, [r7, #28]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3720      	adds	r7, #32
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b088      	sub	sp, #32
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009c1c:	2309      	movs	r3, #9
 8009c1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009c20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009c24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c26:	2300      	movs	r3, #0
 8009c28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c30:	f107 0308 	add.w	r3, r7, #8
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7ff fd7e 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f9a9 	bl	8009f94 <SDMMC_GetCmdResp2>
 8009c42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c44:	69fb      	ldr	r3, [r7, #28]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3720      	adds	r7, #32
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b088      	sub	sp, #32
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c66:	2300      	movs	r3, #0
 8009c68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c70:	f107 0308 	add.w	r3, r7, #8
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7ff fd5e 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009c7c:	683a      	ldr	r2, [r7, #0]
 8009c7e:	2103      	movs	r1, #3
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fa0b 	bl	800a09c <SDMMC_GetCmdResp6>
 8009c86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c88:	69fb      	ldr	r3, [r7, #28]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3720      	adds	r7, #32
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b088      	sub	sp, #32
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009ca0:	230d      	movs	r3, #13
 8009ca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009caa:	2300      	movs	r3, #0
 8009cac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cb4:	f107 0308 	add.w	r3, r7, #8
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff fd3c 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc4:	210d      	movs	r1, #13
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f874 	bl	8009db4 <SDMMC_GetCmdResp1>
 8009ccc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cce:	69fb      	ldr	r3, [r7, #28]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3720      	adds	r7, #32
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b088      	sub	sp, #32
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009ce4:	230d      	movs	r3, #13
 8009ce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cf8:	f107 0308 	add.w	r3, r7, #8
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7ff fd1a 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d08:	210d      	movs	r1, #13
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f852 	bl	8009db4 <SDMMC_GetCmdResp1>
 8009d10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d12:	69fb      	ldr	r3, [r7, #28]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3720      	adds	r7, #32
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b088      	sub	sp, #32
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009d24:	2300      	movs	r3, #0
 8009d26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009d28:	230b      	movs	r3, #11
 8009d2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d32:	2300      	movs	r3, #0
 8009d34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d3c:	f107 0308 	add.w	r3, r7, #8
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7ff fcf8 	bl	8009738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8009d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d4c:	210b      	movs	r1, #11
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f830 	bl	8009db4 <SDMMC_GetCmdResp1>
 8009d54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d56:	69fb      	ldr	r3, [r7, #28]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3720      	adds	r7, #32
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009d60:	b490      	push	{r4, r7}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d68:	4b0f      	ldr	r3, [pc, #60]	; (8009da8 <SDMMC_GetCmdError+0x48>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a0f      	ldr	r2, [pc, #60]	; (8009dac <SDMMC_GetCmdError+0x4c>)
 8009d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d72:	0a5b      	lsrs	r3, r3, #9
 8009d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d78:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8009d7c:	4623      	mov	r3, r4
 8009d7e:	1e5c      	subs	r4, r3, #1
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d102      	bne.n	8009d8a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d88:	e009      	b.n	8009d9e <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0f2      	beq.n	8009d7c <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a05      	ldr	r2, [pc, #20]	; (8009db0 <SDMMC_GetCmdError+0x50>)
 8009d9a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bc90      	pop	{r4, r7}
 8009da6:	4770      	bx	lr
 8009da8:	20000008 	.word	0x20000008
 8009dac:	10624dd3 	.word	0x10624dd3
 8009db0:	002000c5 	.word	0x002000c5

08009db4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009db4:	b590      	push	{r4, r7, lr}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009dc2:	4b6f      	ldr	r3, [pc, #444]	; (8009f80 <SDMMC_GetCmdResp1+0x1cc>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a6f      	ldr	r2, [pc, #444]	; (8009f84 <SDMMC_GetCmdResp1+0x1d0>)
 8009dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dcc:	0a5b      	lsrs	r3, r3, #9
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8009dd4:	4623      	mov	r3, r4
 8009dd6:	1e5c      	subs	r4, r3, #1
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d102      	bne.n	8009de2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ddc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009de0:	e0c9      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	4b67      	ldr	r3, [pc, #412]	; (8009f88 <SDMMC_GetCmdResp1+0x1d4>)
 8009dec:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d0f0      	beq.n	8009dd4 <SDMMC_GetCmdResp1+0x20>
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1eb      	bne.n	8009dd4 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2204      	movs	r2, #4
 8009e0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e0e:	2304      	movs	r3, #4
 8009e10:	e0b1      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d004      	beq.n	8009e28 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2201      	movs	r2, #1
 8009e22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e0a6      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	4a58      	ldr	r2, [pc, #352]	; (8009f8c <SDMMC_GetCmdResp1+0x1d8>)
 8009e2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f7ff fcac 	bl	800978c <SDMMC_GetCommandResponse>
 8009e34:	4603      	mov	r3, r0
 8009e36:	461a      	mov	r2, r3
 8009e38:	7afb      	ldrb	r3, [r7, #11]
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d001      	beq.n	8009e42 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e099      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009e42:	2100      	movs	r1, #0
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f7ff fcae 	bl	80097a6 <SDMMC_GetResponse>
 8009e4a:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	4b50      	ldr	r3, [pc, #320]	; (8009f90 <SDMMC_GetCmdResp1+0x1dc>)
 8009e50:	4013      	ands	r3, r2
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d101      	bne.n	8009e5a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009e56:	2300      	movs	r3, #0
 8009e58:	e08d      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	da02      	bge.n	8009e66 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009e60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e64:	e087      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009e70:	2340      	movs	r3, #64	; 0x40
 8009e72:	e080      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009e7e:	2380      	movs	r3, #128	; 0x80
 8009e80:	e079      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e90:	e071      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ea0:	e069      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eb0:	e061      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009ebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ec0:	e059      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ed0:	e051      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ee0:	e049      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009eec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ef0:	e041      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f00:	e039      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f10:	e031      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009f20:	e029      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f30:	e021      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009f40:	e019      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009f50:	e011      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009f5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f60:	e009      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f003 0308 	and.w	r3, r3, #8
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009f6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009f70:	e001      	b.n	8009f76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	371c      	adds	r7, #28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd90      	pop	{r4, r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	20000008 	.word	0x20000008
 8009f84:	10624dd3 	.word	0x10624dd3
 8009f88:	00200045 	.word	0x00200045
 8009f8c:	002000c5 	.word	0x002000c5
 8009f90:	fdffe008 	.word	0xfdffe008

08009f94 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009f94:	b490      	push	{r4, r7}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f9c:	4b1e      	ldr	r3, [pc, #120]	; (800a018 <SDMMC_GetCmdResp2+0x84>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a1e      	ldr	r2, [pc, #120]	; (800a01c <SDMMC_GetCmdResp2+0x88>)
 8009fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa6:	0a5b      	lsrs	r3, r3, #9
 8009fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fac:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8009fb0:	4623      	mov	r3, r4
 8009fb2:	1e5c      	subs	r4, r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d102      	bne.n	8009fbe <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fbc:	e026      	b.n	800a00c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0f0      	beq.n	8009fb0 <SDMMC_GetCmdResp2+0x1c>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1eb      	bne.n	8009fb0 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d004      	beq.n	8009fee <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2204      	movs	r2, #4
 8009fe8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fea:	2304      	movs	r3, #4
 8009fec:	e00e      	b.n	800a00c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d004      	beq.n	800a004 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a000:	2301      	movs	r3, #1
 800a002:	e003      	b.n	800a00c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a06      	ldr	r2, [pc, #24]	; (800a020 <SDMMC_GetCmdResp2+0x8c>)
 800a008:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bc90      	pop	{r4, r7}
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	20000008 	.word	0x20000008
 800a01c:	10624dd3 	.word	0x10624dd3
 800a020:	002000c5 	.word	0x002000c5

0800a024 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a024:	b490      	push	{r4, r7}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a02c:	4b18      	ldr	r3, [pc, #96]	; (800a090 <SDMMC_GetCmdResp3+0x6c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a18      	ldr	r2, [pc, #96]	; (800a094 <SDMMC_GetCmdResp3+0x70>)
 800a032:	fba2 2303 	umull	r2, r3, r2, r3
 800a036:	0a5b      	lsrs	r3, r3, #9
 800a038:	f241 3288 	movw	r2, #5000	; 0x1388
 800a03c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a040:	4623      	mov	r3, r4
 800a042:	1e5c      	subs	r4, r3, #1
 800a044:	2b00      	cmp	r3, #0
 800a046:	d102      	bne.n	800a04e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a048:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a04c:	e01b      	b.n	800a086 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a052:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0f0      	beq.n	800a040 <SDMMC_GetCmdResp3+0x1c>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1eb      	bne.n	800a040 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a06c:	f003 0304 	and.w	r3, r3, #4
 800a070:	2b00      	cmp	r3, #0
 800a072:	d004      	beq.n	800a07e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2204      	movs	r2, #4
 800a078:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a07a:	2304      	movs	r3, #4
 800a07c:	e003      	b.n	800a086 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a05      	ldr	r2, [pc, #20]	; (800a098 <SDMMC_GetCmdResp3+0x74>)
 800a082:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bc90      	pop	{r4, r7}
 800a08e:	4770      	bx	lr
 800a090:	20000008 	.word	0x20000008
 800a094:	10624dd3 	.word	0x10624dd3
 800a098:	002000c5 	.word	0x002000c5

0800a09c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a09c:	b590      	push	{r4, r7, lr}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	607a      	str	r2, [r7, #4]
 800a0a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0aa:	4b34      	ldr	r3, [pc, #208]	; (800a17c <SDMMC_GetCmdResp6+0xe0>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a34      	ldr	r2, [pc, #208]	; (800a180 <SDMMC_GetCmdResp6+0xe4>)
 800a0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b4:	0a5b      	lsrs	r3, r3, #9
 800a0b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ba:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a0be:	4623      	mov	r3, r4
 800a0c0:	1e5c      	subs	r4, r3, #1
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d102      	bne.n	800a0cc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0ca:	e052      	b.n	800a172 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d0f0      	beq.n	800a0be <SDMMC_GetCmdResp6+0x22>
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1eb      	bne.n	800a0be <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ea:	f003 0304 	and.w	r3, r3, #4
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2204      	movs	r2, #4
 800a0f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0f8:	2304      	movs	r3, #4
 800a0fa:	e03a      	b.n	800a172 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	d004      	beq.n	800a112 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a10e:	2301      	movs	r3, #1
 800a110:	e02f      	b.n	800a172 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f7ff fb3a 	bl	800978c <SDMMC_GetCommandResponse>
 800a118:	4603      	mov	r3, r0
 800a11a:	461a      	mov	r2, r3
 800a11c:	7afb      	ldrb	r3, [r7, #11]
 800a11e:	4293      	cmp	r3, r2
 800a120:	d001      	beq.n	800a126 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a122:	2301      	movs	r3, #1
 800a124:	e025      	b.n	800a172 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	4a16      	ldr	r2, [pc, #88]	; (800a184 <SDMMC_GetCmdResp6+0xe8>)
 800a12a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a12c:	2100      	movs	r1, #0
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7ff fb39 	bl	80097a6 <SDMMC_GetResponse>
 800a134:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d106      	bne.n	800a14e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	0c1b      	lsrs	r3, r3, #16
 800a144:	b29a      	uxth	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a14a:	2300      	movs	r3, #0
 800a14c:	e011      	b.n	800a172 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a15c:	e009      	b.n	800a172 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a16c:	e001      	b.n	800a172 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a16e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a172:	4618      	mov	r0, r3
 800a174:	371c      	adds	r7, #28
 800a176:	46bd      	mov	sp, r7
 800a178:	bd90      	pop	{r4, r7, pc}
 800a17a:	bf00      	nop
 800a17c:	20000008 	.word	0x20000008
 800a180:	10624dd3 	.word	0x10624dd3
 800a184:	002000c5 	.word	0x002000c5

0800a188 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a188:	b490      	push	{r4, r7}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a190:	4b21      	ldr	r3, [pc, #132]	; (800a218 <SDMMC_GetCmdResp7+0x90>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a21      	ldr	r2, [pc, #132]	; (800a21c <SDMMC_GetCmdResp7+0x94>)
 800a196:	fba2 2303 	umull	r2, r3, r2, r3
 800a19a:	0a5b      	lsrs	r3, r3, #9
 800a19c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a1a4:	4623      	mov	r3, r4
 800a1a6:	1e5c      	subs	r4, r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d102      	bne.n	800a1b2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1b0:	e02c      	b.n	800a20c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0f0      	beq.n	800a1a4 <SDMMC_GetCmdResp7+0x1c>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1eb      	bne.n	800a1a4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d0:	f003 0304 	and.w	r3, r3, #4
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d004      	beq.n	800a1e2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2204      	movs	r2, #4
 800a1dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1de:	2304      	movs	r3, #4
 800a1e0:	e014      	b.n	800a20c <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e6:	f003 0301 	and.w	r3, r3, #1
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d004      	beq.n	800a1f8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e009      	b.n	800a20c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a200:	2b00      	cmp	r3, #0
 800a202:	d002      	beq.n	800a20a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2240      	movs	r2, #64	; 0x40
 800a208:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a20a:	2300      	movs	r3, #0

}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bc90      	pop	{r4, r7}
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	20000008 	.word	0x20000008
 800a21c:	10624dd3 	.word	0x10624dd3

0800a220 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	4613      	mov	r3, r2
 800a22c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a22e:	2301      	movs	r3, #1
 800a230:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a236:	4b1f      	ldr	r3, [pc, #124]	; (800a2b4 <FATFS_LinkDriverEx+0x94>)
 800a238:	7a5b      	ldrb	r3, [r3, #9]
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d131      	bne.n	800a2a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a240:	4b1c      	ldr	r3, [pc, #112]	; (800a2b4 <FATFS_LinkDriverEx+0x94>)
 800a242:	7a5b      	ldrb	r3, [r3, #9]
 800a244:	b2db      	uxtb	r3, r3
 800a246:	461a      	mov	r2, r3
 800a248:	4b1a      	ldr	r3, [pc, #104]	; (800a2b4 <FATFS_LinkDriverEx+0x94>)
 800a24a:	2100      	movs	r1, #0
 800a24c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a24e:	4b19      	ldr	r3, [pc, #100]	; (800a2b4 <FATFS_LinkDriverEx+0x94>)
 800a250:	7a5b      	ldrb	r3, [r3, #9]
 800a252:	b2db      	uxtb	r3, r3
 800a254:	4a17      	ldr	r2, [pc, #92]	; (800a2b4 <FATFS_LinkDriverEx+0x94>)
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a25e:	4b15      	ldr	r3, [pc, #84]	; (800a2b4 <FATFS_LinkDriverEx+0x94>)
 800a260:	7a5b      	ldrb	r3, [r3, #9]
 800a262:	b2db      	uxtb	r3, r3
 800a264:	461a      	mov	r2, r3
 800a266:	4b13      	ldr	r3, [pc, #76]	; (800a2b4 <FATFS_LinkDriverEx+0x94>)
 800a268:	4413      	add	r3, r2
 800a26a:	79fa      	ldrb	r2, [r7, #7]
 800a26c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a26e:	4b11      	ldr	r3, [pc, #68]	; (800a2b4 <FATFS_LinkDriverEx+0x94>)
 800a270:	7a5b      	ldrb	r3, [r3, #9]
 800a272:	b2db      	uxtb	r3, r3
 800a274:	1c5a      	adds	r2, r3, #1
 800a276:	b2d1      	uxtb	r1, r2
 800a278:	4a0e      	ldr	r2, [pc, #56]	; (800a2b4 <FATFS_LinkDriverEx+0x94>)
 800a27a:	7251      	strb	r1, [r2, #9]
 800a27c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a27e:	7dbb      	ldrb	r3, [r7, #22]
 800a280:	3330      	adds	r3, #48	; 0x30
 800a282:	b2da      	uxtb	r2, r3
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	3301      	adds	r3, #1
 800a28c:	223a      	movs	r2, #58	; 0x3a
 800a28e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	3302      	adds	r3, #2
 800a294:	222f      	movs	r2, #47	; 0x2f
 800a296:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	3303      	adds	r3, #3
 800a29c:	2200      	movs	r2, #0
 800a29e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a2a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	371c      	adds	r7, #28
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	2000002c 	.word	0x2000002c

0800a2b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f7ff ffaa 	bl	800a220 <FATFS_LinkDriverEx>
 800a2cc:	4603      	mov	r3, r0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
	...

0800a2d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08a      	sub	sp, #40	; 0x28
 800a2dc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800a2de:	f107 031c 	add.w	r3, r7, #28
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	605a      	str	r2, [r3, #4]
 800a2e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800a2ea:	463b      	mov	r3, r7
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	605a      	str	r2, [r3, #4]
 800a2f2:	609a      	str	r2, [r3, #8]
 800a2f4:	60da      	str	r2, [r3, #12]
 800a2f6:	611a      	str	r2, [r3, #16]
 800a2f8:	615a      	str	r2, [r3, #20]
 800a2fa:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800a2fc:	4b4d      	ldr	r3, [pc, #308]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a2fe:	4a4e      	ldr	r2, [pc, #312]	; (800a438 <MX_ADC1_Init+0x160>)
 800a300:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800a302:	4b4c      	ldr	r3, [pc, #304]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a304:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a308:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800a30a:	4b4a      	ldr	r3, [pc, #296]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a30c:	2200      	movs	r2, #0
 800a30e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800a310:	4b48      	ldr	r3, [pc, #288]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a312:	2201      	movs	r2, #1
 800a314:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a316:	4b47      	ldr	r3, [pc, #284]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a318:	2208      	movs	r2, #8
 800a31a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a31c:	4b45      	ldr	r3, [pc, #276]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a31e:	2200      	movs	r2, #0
 800a320:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a322:	4b44      	ldr	r3, [pc, #272]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a324:	2200      	movs	r2, #0
 800a326:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 4;
 800a328:	4b42      	ldr	r3, [pc, #264]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a32a:	2204      	movs	r2, #4
 800a32c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a32e:	4b41      	ldr	r3, [pc, #260]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a330:	2200      	movs	r2, #0
 800a332:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 4;
 800a334:	4b3f      	ldr	r3, [pc, #252]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a336:	2204      	movs	r2, #4
 800a338:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800a33a:	4b3e      	ldr	r3, [pc, #248]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a33c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a340:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800a342:	4b3c      	ldr	r3, [pc, #240]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a344:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800a348:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800a34a:	4b3a      	ldr	r3, [pc, #232]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a34c:	2203      	movs	r2, #3
 800a34e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a350:	4b38      	ldr	r3, [pc, #224]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a352:	2200      	movs	r2, #0
 800a354:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800a356:	4b37      	ldr	r3, [pc, #220]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a358:	2200      	movs	r2, #0
 800a35a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800a35c:	4b35      	ldr	r3, [pc, #212]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 2;
 800a364:	4b33      	ldr	r3, [pc, #204]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a366:	2202      	movs	r2, #2
 800a368:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800a36a:	4b32      	ldr	r3, [pc, #200]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a36c:	2220      	movs	r2, #32
 800a36e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800a370:	4b30      	ldr	r3, [pc, #192]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a372:	2200      	movs	r2, #0
 800a374:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 800a376:	4b2f      	ldr	r3, [pc, #188]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a378:	f240 4201 	movw	r2, #1025	; 0x401
 800a37c:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a37e:	482d      	ldr	r0, [pc, #180]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a380:	f7f6 f9fe 	bl	8000780 <HAL_ADC_Init>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800a38a:	f000 fe4f 	bl	800b02c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800a38e:	2300      	movs	r3, #0
 800a390:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800a392:	f107 031c 	add.w	r3, r7, #28
 800a396:	4619      	mov	r1, r3
 800a398:	4826      	ldr	r0, [pc, #152]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a39a:	f7f6 ffc3 	bl	8001324 <HAL_ADCEx_MultiModeConfigChannel>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800a3a4:	f000 fe42 	bl	800b02c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800a3a8:	4b24      	ldr	r3, [pc, #144]	; (800a43c <MX_ADC1_Init+0x164>)
 800a3aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a3ac:	2306      	movs	r3, #6
 800a3ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a3b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a3b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a3ba:	2304      	movs	r3, #4
 800a3bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 32768;
 800a3be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3c2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a3c4:	463b      	mov	r3, r7
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	481a      	ldr	r0, [pc, #104]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a3ca:	f7f6 fb79 	bl	8000ac0 <HAL_ADC_ConfigChannel>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800a3d4:	f000 fe2a 	bl	800b02c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800a3d8:	4b19      	ldr	r3, [pc, #100]	; (800a440 <MX_ADC1_Init+0x168>)
 800a3da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800a3dc:	230c      	movs	r3, #12
 800a3de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a3e0:	463b      	mov	r3, r7
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	4813      	ldr	r0, [pc, #76]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a3e6:	f7f6 fb6b 	bl	8000ac0 <HAL_ADC_ConfigChannel>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800a3f0:	f000 fe1c 	bl	800b02c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800a3f4:	4b13      	ldr	r3, [pc, #76]	; (800a444 <MX_ADC1_Init+0x16c>)
 800a3f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800a3f8:	2312      	movs	r3, #18
 800a3fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a3fc:	463b      	mov	r3, r7
 800a3fe:	4619      	mov	r1, r3
 800a400:	480c      	ldr	r0, [pc, #48]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a402:	f7f6 fb5d 	bl	8000ac0 <HAL_ADC_ConfigChannel>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800a40c:	f000 fe0e 	bl	800b02c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800a410:	4b0d      	ldr	r3, [pc, #52]	; (800a448 <MX_ADC1_Init+0x170>)
 800a412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800a414:	2318      	movs	r3, #24
 800a416:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a418:	463b      	mov	r3, r7
 800a41a:	4619      	mov	r1, r3
 800a41c:	4805      	ldr	r0, [pc, #20]	; (800a434 <MX_ADC1_Init+0x15c>)
 800a41e:	f7f6 fb4f 	bl	8000ac0 <HAL_ADC_ConfigChannel>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d001      	beq.n	800a42c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800a428:	f000 fe00 	bl	800b02c <Error_Handler>
  }

}
 800a42c:	bf00      	nop
 800a42e:	3728      	adds	r7, #40	; 0x28
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20000044 	.word	0x20000044
 800a438:	40022000 	.word	0x40022000
 800a43c:	3ef08000 	.word	0x3ef08000
 800a440:	47520000 	.word	0x47520000
 800a444:	3ac04000 	.word	0x3ac04000
 800a448:	43210000 	.word	0x43210000

0800a44c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b08a      	sub	sp, #40	; 0x28
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a454:	f107 0314 	add.w	r3, r7, #20
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	605a      	str	r2, [r3, #4]
 800a45e:	609a      	str	r2, [r3, #8]
 800a460:	60da      	str	r2, [r3, #12]
 800a462:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a42      	ldr	r2, [pc, #264]	; (800a574 <HAL_ADC_MspInit+0x128>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d17e      	bne.n	800a56c <HAL_ADC_MspInit+0x120>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800a46e:	4b42      	ldr	r3, [pc, #264]	; (800a578 <HAL_ADC_MspInit+0x12c>)
 800a470:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a474:	4a40      	ldr	r2, [pc, #256]	; (800a578 <HAL_ADC_MspInit+0x12c>)
 800a476:	f043 0320 	orr.w	r3, r3, #32
 800a47a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a47e:	4b3e      	ldr	r3, [pc, #248]	; (800a578 <HAL_ADC_MspInit+0x12c>)
 800a480:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a484:	f003 0320 	and.w	r3, r3, #32
 800a488:	613b      	str	r3, [r7, #16]
 800a48a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a48c:	4b3a      	ldr	r3, [pc, #232]	; (800a578 <HAL_ADC_MspInit+0x12c>)
 800a48e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a492:	4a39      	ldr	r2, [pc, #228]	; (800a578 <HAL_ADC_MspInit+0x12c>)
 800a494:	f043 0301 	orr.w	r3, r3, #1
 800a498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a49c:	4b36      	ldr	r3, [pc, #216]	; (800a578 <HAL_ADC_MspInit+0x12c>)
 800a49e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4a2:	f003 0301 	and.w	r3, r3, #1
 800a4a6:	60fb      	str	r3, [r7, #12]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4aa:	4b33      	ldr	r3, [pc, #204]	; (800a578 <HAL_ADC_MspInit+0x12c>)
 800a4ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4b0:	4a31      	ldr	r2, [pc, #196]	; (800a578 <HAL_ADC_MspInit+0x12c>)
 800a4b2:	f043 0304 	orr.w	r3, r3, #4
 800a4b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a4ba:	4b2f      	ldr	r3, [pc, #188]	; (800a578 <HAL_ADC_MspInit+0x12c>)
 800a4bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4c0:	f003 0304 	and.w	r3, r3, #4
 800a4c4:	60bb      	str	r3, [r7, #8]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800a4c8:	23ff      	movs	r3, #255	; 0xff
 800a4ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4d4:	f107 0314 	add.w	r3, r7, #20
 800a4d8:	4619      	mov	r1, r3
 800a4da:	4828      	ldr	r0, [pc, #160]	; (800a57c <HAL_ADC_MspInit+0x130>)
 800a4dc:	f7f9 f812 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800a4e0:	2330      	movs	r3, #48	; 0x30
 800a4e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4ec:	f107 0314 	add.w	r3, r7, #20
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4823      	ldr	r0, [pc, #140]	; (800a580 <HAL_ADC_MspInit+0x134>)
 800a4f4:	f7f9 f806 	bl	8003504 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800a4f8:	4b22      	ldr	r3, [pc, #136]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a4fa:	4a23      	ldr	r2, [pc, #140]	; (800a588 <HAL_ADC_MspInit+0x13c>)
 800a4fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800a4fe:	4b21      	ldr	r3, [pc, #132]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a500:	2209      	movs	r2, #9
 800a502:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a504:	4b1f      	ldr	r3, [pc, #124]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a506:	2200      	movs	r2, #0
 800a508:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a50a:	4b1e      	ldr	r3, [pc, #120]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a50c:	2200      	movs	r2, #0
 800a50e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a510:	4b1c      	ldr	r3, [pc, #112]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a516:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a518:	4b1a      	ldr	r3, [pc, #104]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a51a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a51e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a520:	4b18      	ldr	r3, [pc, #96]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a522:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a526:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800a528:	4b16      	ldr	r3, [pc, #88]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a52a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a52e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a530:	4b14      	ldr	r3, [pc, #80]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a532:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a536:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a538:	4b12      	ldr	r3, [pc, #72]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a53a:	2204      	movs	r2, #4
 800a53c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800a53e:	4b11      	ldr	r3, [pc, #68]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a540:	2201      	movs	r2, #1
 800a542:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800a544:	4b0f      	ldr	r3, [pc, #60]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a546:	2200      	movs	r2, #0
 800a548:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800a54a:	4b0e      	ldr	r3, [pc, #56]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a550:	480c      	ldr	r0, [pc, #48]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a552:	f7f7 f8d1 	bl	80016f8 <HAL_DMA_Init>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d001      	beq.n	800a560 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 800a55c:	f000 fd66 	bl	800b02c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a08      	ldr	r2, [pc, #32]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a564:	64da      	str	r2, [r3, #76]	; 0x4c
 800a566:	4a07      	ldr	r2, [pc, #28]	; (800a584 <HAL_ADC_MspInit+0x138>)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800a56c:	bf00      	nop
 800a56e:	3728      	adds	r7, #40	; 0x28
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	40022000 	.word	0x40022000
 800a578:	58024400 	.word	0x58024400
 800a57c:	58020000 	.word	0x58020000
 800a580:	58020800 	.word	0x58020800
 800a584:	200000a8 	.word	0x200000a8
 800a588:	40020010 	.word	0x40020010

0800a58c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a596:	f000 f89b 	bl	800a6d0 <BSP_SD_IsDetected>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d001      	beq.n	800a5a4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	e012      	b.n	800a5ca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a5a4:	480b      	ldr	r0, [pc, #44]	; (800a5d4 <BSP_SD_Init+0x48>)
 800a5a6:	f7fc fd57 	bl	8007058 <HAL_SD_Init>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d109      	bne.n	800a5c8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a5b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a5b8:	4806      	ldr	r0, [pc, #24]	; (800a5d4 <BSP_SD_Init+0x48>)
 800a5ba:	f7fd fdd5 	bl	8008168 <HAL_SD_ConfigWideBusOperation>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d001      	beq.n	800a5c8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a5c8:	79fb      	ldrb	r3, [r7, #7]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20000840 	.word	0x20000840

0800a5d8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b088      	sub	sp, #32
 800a5dc:	af02      	add	r7, sp, #8
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	607a      	str	r2, [r7, #4]
 800a5e4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	68f9      	ldr	r1, [r7, #12]
 800a5f4:	4806      	ldr	r0, [pc, #24]	; (800a610 <BSP_SD_ReadBlocks+0x38>)
 800a5f6:	f7fc fe4d 	bl	8007294 <HAL_SD_ReadBlocks>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800a604:	7dfb      	ldrb	r3, [r7, #23]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	20000840 	.word	0x20000840

0800a614 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b088      	sub	sp, #32
 800a618:	af02      	add	r7, sp, #8
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
 800a620:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	68f9      	ldr	r1, [r7, #12]
 800a630:	4806      	ldr	r0, [pc, #24]	; (800a64c <BSP_SD_WriteBlocks+0x38>)
 800a632:	f7fc ffb9 	bl	80075a8 <HAL_SD_WriteBlocks>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800a640:	7dfb      	ldrb	r3, [r7, #23]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3718      	adds	r7, #24
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20000840 	.word	0x20000840

0800a650 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a654:	4805      	ldr	r0, [pc, #20]	; (800a66c <BSP_SD_GetCardState+0x1c>)
 800a656:	f7fd fe31 	bl	80082bc <HAL_SD_GetCardState>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b04      	cmp	r3, #4
 800a65e:	bf14      	ite	ne
 800a660:	2301      	movne	r3, #1
 800a662:	2300      	moveq	r3, #0
 800a664:	b2db      	uxtb	r3, r3
}
 800a666:	4618      	mov	r0, r3
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20000840 	.word	0x20000840

0800a670 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a678:	6879      	ldr	r1, [r7, #4]
 800a67a:	4803      	ldr	r0, [pc, #12]	; (800a688 <BSP_SD_GetCardInfo+0x18>)
 800a67c:	f7fd fd48 	bl	8008110 <HAL_SD_GetCardInfo>
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	20000840 	.word	0x20000840

0800a68c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a694:	f000 f80e 	bl	800a6b4 <BSP_SD_WriteCpltCallback>
}
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a6a8:	f000 f80b 	bl	800a6c2 <BSP_SD_ReadCpltCallback>
}
 800a6ac:	bf00      	nop
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	af00      	add	r7, sp, #0

}
 800a6b8:	bf00      	nop
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	af00      	add	r7, sp, #0

}
 800a6c6:	bf00      	nop
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800a6da:	f000 f865 	bl	800a7a8 <BSP_PlatformIsDetected>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a6e8:	79fb      	ldrb	r3, [r7, #7]
 800a6ea:	b2db      	uxtb	r3, r3
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a6fa:	4b21      	ldr	r3, [pc, #132]	; (800a780 <MX_DMA_Init+0x8c>)
 800a6fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a700:	4a1f      	ldr	r2, [pc, #124]	; (800a780 <MX_DMA_Init+0x8c>)
 800a702:	f043 0301 	orr.w	r3, r3, #1
 800a706:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a70a:	4b1d      	ldr	r3, [pc, #116]	; (800a780 <MX_DMA_Init+0x8c>)
 800a70c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a710:	f003 0301 	and.w	r3, r3, #1
 800a714:	607b      	str	r3, [r7, #4]
 800a716:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800a718:	2200      	movs	r2, #0
 800a71a:	2101      	movs	r1, #1
 800a71c:	200b      	movs	r0, #11
 800a71e:	f7f6 ffb6 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800a722:	200b      	movs	r0, #11
 800a724:	f7f6 ffcd 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 800a728:	2200      	movs	r2, #0
 800a72a:	2102      	movs	r1, #2
 800a72c:	200c      	movs	r0, #12
 800a72e:	f7f6 ffae 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a732:	200c      	movs	r0, #12
 800a734:	f7f6 ffc5 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
 800a738:	2200      	movs	r2, #0
 800a73a:	2103      	movs	r1, #3
 800a73c:	200d      	movs	r0, #13
 800a73e:	f7f6 ffa6 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800a742:	200d      	movs	r0, #13
 800a744:	f7f6 ffbd 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
 800a748:	2200      	movs	r2, #0
 800a74a:	2104      	movs	r1, #4
 800a74c:	200e      	movs	r0, #14
 800a74e:	f7f6 ff9e 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800a752:	200e      	movs	r0, #14
 800a754:	f7f6 ffb5 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800a758:	2200      	movs	r2, #0
 800a75a:	2105      	movs	r1, #5
 800a75c:	200f      	movs	r0, #15
 800a75e:	f7f6 ff96 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800a762:	200f      	movs	r0, #15
 800a764:	f7f6 ffad 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800a768:	2200      	movs	r2, #0
 800a76a:	2100      	movs	r1, #0
 800a76c:	2010      	movs	r0, #16
 800a76e:	f7f6 ff8e 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800a772:	2010      	movs	r0, #16
 800a774:	f7f6 ffa5 	bl	80016c2 <HAL_NVIC_EnableIRQ>

}
 800a778:	bf00      	nop
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	58024400 	.word	0x58024400

0800a784 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a784:	b580      	push	{r7, lr}
 800a786:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a788:	4904      	ldr	r1, [pc, #16]	; (800a79c <MX_FATFS_Init+0x18>)
 800a78a:	4805      	ldr	r0, [pc, #20]	; (800a7a0 <MX_FATFS_Init+0x1c>)
 800a78c:	f7ff fd94 	bl	800a2b8 <FATFS_LinkDriver>
 800a790:	4603      	mov	r3, r0
 800a792:	461a      	mov	r2, r3
 800a794:	4b03      	ldr	r3, [pc, #12]	; (800a7a4 <MX_FATFS_Init+0x20>)
 800a796:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a798:	bf00      	nop
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	20000124 	.word	0x20000124
 800a7a0:	0800bd68 	.word	0x0800bd68
 800a7a4:	20000120 	.word	0x20000120

0800a7a8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a7b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a7b6:	4806      	ldr	r0, [pc, #24]	; (800a7d0 <BSP_PlatformIsDetected+0x28>)
 800a7b8:	f7f9 f854 	bl	8003864 <HAL_GPIO_ReadPin>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d001      	beq.n	800a7c6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800a7c6:	79fb      	ldrb	r3, [r7, #7]
}  
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	58020800 	.word	0x58020800

0800a7d4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800a7da:	1d3b      	adds	r3, r7, #4
 800a7dc:	2200      	movs	r2, #0
 800a7de:	601a      	str	r2, [r3, #0]
 800a7e0:	605a      	str	r2, [r3, #4]
 800a7e2:	609a      	str	r2, [r3, #8]
 800a7e4:	60da      	str	r2, [r3, #12]
 800a7e6:	611a      	str	r2, [r3, #16]
 800a7e8:	615a      	str	r2, [r3, #20]
 800a7ea:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a7ec:	4b21      	ldr	r3, [pc, #132]	; (800a874 <MX_FMC_Init+0xa0>)
 800a7ee:	4a22      	ldr	r2, [pc, #136]	; (800a878 <MX_FMC_Init+0xa4>)
 800a7f0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800a7f2:	4b20      	ldr	r3, [pc, #128]	; (800a874 <MX_FMC_Init+0xa0>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800a7f8:	4b1e      	ldr	r3, [pc, #120]	; (800a874 <MX_FMC_Init+0xa0>)
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800a7fe:	4b1d      	ldr	r3, [pc, #116]	; (800a874 <MX_FMC_Init+0xa0>)
 800a800:	2208      	movs	r2, #8
 800a802:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a804:	4b1b      	ldr	r3, [pc, #108]	; (800a874 <MX_FMC_Init+0xa0>)
 800a806:	2210      	movs	r2, #16
 800a808:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a80a:	4b1a      	ldr	r3, [pc, #104]	; (800a874 <MX_FMC_Init+0xa0>)
 800a80c:	2240      	movs	r2, #64	; 0x40
 800a80e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800a810:	4b18      	ldr	r3, [pc, #96]	; (800a874 <MX_FMC_Init+0xa0>)
 800a812:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a816:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a818:	4b16      	ldr	r3, [pc, #88]	; (800a874 <MX_FMC_Init+0xa0>)
 800a81a:	2200      	movs	r2, #0
 800a81c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800a81e:	4b15      	ldr	r3, [pc, #84]	; (800a874 <MX_FMC_Init+0xa0>)
 800a820:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800a824:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800a826:	4b13      	ldr	r3, [pc, #76]	; (800a874 <MX_FMC_Init+0xa0>)
 800a828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a82c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800a82e:	4b11      	ldr	r3, [pc, #68]	; (800a874 <MX_FMC_Init+0xa0>)
 800a830:	2200      	movs	r2, #0
 800a832:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800a834:	2302      	movs	r3, #2
 800a836:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 800a838:	2306      	movs	r3, #6
 800a83a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800a83c:	2304      	movs	r3, #4
 800a83e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 800a840:	2306      	movs	r3, #6
 800a842:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800a844:	2302      	movs	r3, #2
 800a846:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800a848:	2302      	movs	r3, #2
 800a84a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800a84c:	2302      	movs	r3, #2
 800a84e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a850:	1d3b      	adds	r3, r7, #4
 800a852:	4619      	mov	r1, r3
 800a854:	4807      	ldr	r0, [pc, #28]	; (800a874 <MX_FMC_Init+0xa0>)
 800a856:	f7fe fa2d 	bl	8008cb4 <HAL_SDRAM_Init>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800a860:	f000 fbe4 	bl	800b02c <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800a864:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a868:	f7f5 fdf6 	bl	8000458 <HAL_SetFMCMemorySwappingConfig>

}
 800a86c:	bf00      	nop
 800a86e:	3720      	adds	r7, #32
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	2000058c 	.word	0x2000058c
 800a878:	52004140 	.word	0x52004140

0800a87c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a882:	1d3b      	adds	r3, r7, #4
 800a884:	2200      	movs	r2, #0
 800a886:	601a      	str	r2, [r3, #0]
 800a888:	605a      	str	r2, [r3, #4]
 800a88a:	609a      	str	r2, [r3, #8]
 800a88c:	60da      	str	r2, [r3, #12]
 800a88e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800a890:	4b34      	ldr	r3, [pc, #208]	; (800a964 <HAL_FMC_MspInit+0xe8>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d161      	bne.n	800a95c <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 800a898:	4b32      	ldr	r3, [pc, #200]	; (800a964 <HAL_FMC_MspInit+0xe8>)
 800a89a:	2201      	movs	r2, #1
 800a89c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a89e:	4b32      	ldr	r3, [pc, #200]	; (800a968 <HAL_FMC_MspInit+0xec>)
 800a8a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a8a4:	4a30      	ldr	r2, [pc, #192]	; (800a968 <HAL_FMC_MspInit+0xec>)
 800a8a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a8aa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800a8ae:	4b2e      	ldr	r3, [pc, #184]	; (800a968 <HAL_FMC_MspInit+0xec>)
 800a8b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a8b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8b8:	603b      	str	r3, [r7, #0]
 800a8ba:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800a8bc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800a8c0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8c2:	2302      	movs	r3, #2
 800a8c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a8ce:	230c      	movs	r3, #12
 800a8d0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a8d2:	1d3b      	adds	r3, r7, #4
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	4825      	ldr	r0, [pc, #148]	; (800a96c <HAL_FMC_MspInit+0xf0>)
 800a8d8:	f7f8 fe14 	bl	8003504 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800a8dc:	230d      	movs	r3, #13
 800a8de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a8ec:	230c      	movs	r3, #12
 800a8ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a8f0:	1d3b      	adds	r3, r7, #4
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	481e      	ldr	r0, [pc, #120]	; (800a970 <HAL_FMC_MspInit+0xf4>)
 800a8f6:	f7f8 fe05 	bl	8003504 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800a8fa:	f248 1337 	movw	r3, #33079	; 0x8137
 800a8fe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a900:	2302      	movs	r3, #2
 800a902:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a904:	2300      	movs	r3, #0
 800a906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a908:	2303      	movs	r3, #3
 800a90a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a90c:	230c      	movs	r3, #12
 800a90e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a910:	1d3b      	adds	r3, r7, #4
 800a912:	4619      	mov	r1, r3
 800a914:	4817      	ldr	r0, [pc, #92]	; (800a974 <HAL_FMC_MspInit+0xf8>)
 800a916:	f7f8 fdf5 	bl	8003504 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800a91a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800a91e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a920:	2302      	movs	r3, #2
 800a922:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a924:	2300      	movs	r3, #0
 800a926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a928:	2303      	movs	r3, #3
 800a92a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a92c:	230c      	movs	r3, #12
 800a92e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a930:	1d3b      	adds	r3, r7, #4
 800a932:	4619      	mov	r1, r3
 800a934:	4810      	ldr	r0, [pc, #64]	; (800a978 <HAL_FMC_MspInit+0xfc>)
 800a936:	f7f8 fde5 	bl	8003504 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800a93a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800a93e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a940:	2302      	movs	r3, #2
 800a942:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a944:	2300      	movs	r3, #0
 800a946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a948:	2303      	movs	r3, #3
 800a94a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a94c:	230c      	movs	r3, #12
 800a94e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a950:	1d3b      	adds	r3, r7, #4
 800a952:	4619      	mov	r1, r3
 800a954:	4809      	ldr	r0, [pc, #36]	; (800a97c <HAL_FMC_MspInit+0x100>)
 800a956:	f7f8 fdd5 	bl	8003504 <HAL_GPIO_Init>
 800a95a:	e000      	b.n	800a95e <HAL_FMC_MspInit+0xe2>
    return;
 800a95c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20000038 	.word	0x20000038
 800a968:	58024400 	.word	0x58024400
 800a96c:	58021400 	.word	0x58021400
 800a970:	58020800 	.word	0x58020800
 800a974:	58021800 	.word	0x58021800
 800a978:	58021000 	.word	0x58021000
 800a97c:	58020c00 	.word	0x58020c00

0800a980 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a988:	f7ff ff78 	bl	800a87c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800a98c:	bf00      	nop
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b08e      	sub	sp, #56	; 0x38
 800a998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a99a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a99e:	2200      	movs	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	605a      	str	r2, [r3, #4]
 800a9a4:	609a      	str	r2, [r3, #8]
 800a9a6:	60da      	str	r2, [r3, #12]
 800a9a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a9aa:	4b8f      	ldr	r3, [pc, #572]	; (800abe8 <MX_GPIO_Init+0x254>)
 800a9ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9b0:	4a8d      	ldr	r2, [pc, #564]	; (800abe8 <MX_GPIO_Init+0x254>)
 800a9b2:	f043 0310 	orr.w	r3, r3, #16
 800a9b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a9ba:	4b8b      	ldr	r3, [pc, #556]	; (800abe8 <MX_GPIO_Init+0x254>)
 800a9bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9c0:	f003 0310 	and.w	r3, r3, #16
 800a9c4:	623b      	str	r3, [r7, #32]
 800a9c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a9c8:	4b87      	ldr	r3, [pc, #540]	; (800abe8 <MX_GPIO_Init+0x254>)
 800a9ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9ce:	4a86      	ldr	r2, [pc, #536]	; (800abe8 <MX_GPIO_Init+0x254>)
 800a9d0:	f043 0304 	orr.w	r3, r3, #4
 800a9d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a9d8:	4b83      	ldr	r3, [pc, #524]	; (800abe8 <MX_GPIO_Init+0x254>)
 800a9da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9de:	f003 0304 	and.w	r3, r3, #4
 800a9e2:	61fb      	str	r3, [r7, #28]
 800a9e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a9e6:	4b80      	ldr	r3, [pc, #512]	; (800abe8 <MX_GPIO_Init+0x254>)
 800a9e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9ec:	4a7e      	ldr	r2, [pc, #504]	; (800abe8 <MX_GPIO_Init+0x254>)
 800a9ee:	f043 0320 	orr.w	r3, r3, #32
 800a9f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a9f6:	4b7c      	ldr	r3, [pc, #496]	; (800abe8 <MX_GPIO_Init+0x254>)
 800a9f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9fc:	f003 0320 	and.w	r3, r3, #32
 800aa00:	61bb      	str	r3, [r7, #24]
 800aa02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800aa04:	4b78      	ldr	r3, [pc, #480]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa0a:	4a77      	ldr	r2, [pc, #476]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa14:	4b74      	ldr	r3, [pc, #464]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa1e:	617b      	str	r3, [r7, #20]
 800aa20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa22:	4b71      	ldr	r3, [pc, #452]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa28:	4a6f      	ldr	r2, [pc, #444]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa2a:	f043 0301 	orr.w	r3, r3, #1
 800aa2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa32:	4b6d      	ldr	r3, [pc, #436]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	613b      	str	r3, [r7, #16]
 800aa3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa40:	4b69      	ldr	r3, [pc, #420]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa46:	4a68      	ldr	r2, [pc, #416]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa48:	f043 0302 	orr.w	r3, r3, #2
 800aa4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa50:	4b65      	ldr	r3, [pc, #404]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa56:	f003 0302 	and.w	r3, r3, #2
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800aa5e:	4b62      	ldr	r3, [pc, #392]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa64:	4a60      	ldr	r2, [pc, #384]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa6e:	4b5e      	ldr	r3, [pc, #376]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa78:	60bb      	str	r3, [r7, #8]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa7c:	4b5a      	ldr	r3, [pc, #360]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa82:	4a59      	ldr	r2, [pc, #356]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa84:	f043 0308 	orr.w	r3, r3, #8
 800aa88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa8c:	4b56      	ldr	r3, [pc, #344]	; (800abe8 <MX_GPIO_Init+0x254>)
 800aa8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa92:	f003 0308 	and.w	r3, r3, #8
 800aa96:	607b      	str	r3, [r7, #4]
 800aa98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aaa0:	4852      	ldr	r0, [pc, #328]	; (800abec <MX_GPIO_Init+0x258>)
 800aaa2:	f7f8 fef7 	bl	8003894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	2180      	movs	r1, #128	; 0x80
 800aaaa:	4851      	ldr	r0, [pc, #324]	; (800abf0 <MX_GPIO_Init+0x25c>)
 800aaac:	f7f8 fef2 	bl	8003894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800aab0:	2200      	movs	r2, #0
 800aab2:	2110      	movs	r1, #16
 800aab4:	484f      	ldr	r0, [pc, #316]	; (800abf4 <MX_GPIO_Init+0x260>)
 800aab6:	f7f8 feed 	bl	8003894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800aaba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aabe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aac0:	2300      	movs	r3, #0
 800aac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800aac4:	2302      	movs	r3, #2
 800aac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aacc:	4619      	mov	r1, r3
 800aace:	4847      	ldr	r0, [pc, #284]	; (800abec <MX_GPIO_Init+0x258>)
 800aad0:	f7f8 fd18 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800aad4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aada:	2301      	movs	r3, #1
 800aadc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800aade:	2302      	movs	r3, #2
 800aae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aae2:	2300      	movs	r3, #0
 800aae4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaea:	4619      	mov	r1, r3
 800aaec:	483f      	ldr	r0, [pc, #252]	; (800abec <MX_GPIO_Init+0x258>)
 800aaee:	f7f8 fd09 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800aaf2:	f248 03c2 	movw	r3, #32962	; 0x80c2
 800aaf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aafc:	2300      	movs	r3, #0
 800aafe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab04:	4619      	mov	r1, r3
 800ab06:	4839      	ldr	r0, [pc, #228]	; (800abec <MX_GPIO_Init+0x258>)
 800ab08:	f7f8 fcfc 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800ab0c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800ab10:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ab12:	2303      	movs	r3, #3
 800ab14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab16:	2300      	movs	r3, #0
 800ab18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ab1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab1e:	4619      	mov	r1, r3
 800ab20:	4835      	ldr	r0, [pc, #212]	; (800abf8 <MX_GPIO_Init+0x264>)
 800ab22:	f7f8 fcef 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
 800ab26:	f240 33e7 	movw	r3, #999	; 0x3e7
 800ab2a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab30:	2300      	movs	r3, #0
 800ab32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab38:	4619      	mov	r1, r3
 800ab3a:	482e      	ldr	r0, [pc, #184]	; (800abf4 <MX_GPIO_Init+0x260>)
 800ab3c:	f7f8 fce2 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800ab40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ab46:	4b2d      	ldr	r3, [pc, #180]	; (800abfc <MX_GPIO_Init+0x268>)
 800ab48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab52:	4619      	mov	r1, r3
 800ab54:	482a      	ldr	r0, [pc, #168]	; (800ac00 <MX_GPIO_Init+0x26c>)
 800ab56:	f7f8 fcd5 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 PD4 
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 800ab5a:	f243 0378 	movw	r3, #12408	; 0x3078
 800ab5e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ab60:	2303      	movs	r3, #3
 800ab62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab64:	2300      	movs	r3, #0
 800ab66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4824      	ldr	r0, [pc, #144]	; (800ac00 <MX_GPIO_Init+0x26c>)
 800ab70:	f7f8 fcc8 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG12 PG13 
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13 
 800ab74:	f247 0348 	movw	r3, #28744	; 0x7048
 800ab78:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ab82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab86:	4619      	mov	r1, r3
 800ab88:	4819      	ldr	r0, [pc, #100]	; (800abf0 <MX_GPIO_Init+0x25c>)
 800ab8a:	f7f8 fcbb 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800ab8e:	2380      	movs	r3, #128	; 0x80
 800ab90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab92:	2301      	movs	r3, #1
 800ab94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab96:	2300      	movs	r3, #0
 800ab98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ab9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aba2:	4619      	mov	r1, r3
 800aba4:	4812      	ldr	r0, [pc, #72]	; (800abf0 <MX_GPIO_Init+0x25c>)
 800aba6:	f7f8 fcad 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800abaa:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 800abae:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800abb0:	2303      	movs	r3, #3
 800abb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abb4:	2300      	movs	r3, #0
 800abb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abbc:	4619      	mov	r1, r3
 800abbe:	4811      	ldr	r0, [pc, #68]	; (800ac04 <MX_GPIO_Init+0x270>)
 800abc0:	f7f8 fca0 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800abc4:	2310      	movs	r3, #16
 800abc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800abc8:	2301      	movs	r3, #1
 800abca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abcc:	2300      	movs	r3, #0
 800abce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abd0:	2300      	movs	r3, #0
 800abd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800abd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abd8:	4619      	mov	r1, r3
 800abda:	4806      	ldr	r0, [pc, #24]	; (800abf4 <MX_GPIO_Init+0x260>)
 800abdc:	f7f8 fc92 	bl	8003504 <HAL_GPIO_Init>

}
 800abe0:	bf00      	nop
 800abe2:	3738      	adds	r7, #56	; 0x38
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	58024400 	.word	0x58024400
 800abec:	58020800 	.word	0x58020800
 800abf0:	58021800 	.word	0x58021800
 800abf4:	58020400 	.word	0x58020400
 800abf8:	58021400 	.word	0x58021400
 800abfc:	11110000 	.word	0x11110000
 800ac00:	58020c00 	.word	0x58020c00
 800ac04:	58020000 	.word	0x58020000

0800ac08 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800ac0c:	4b1b      	ldr	r3, [pc, #108]	; (800ac7c <MX_I2C2_Init+0x74>)
 800ac0e:	4a1c      	ldr	r2, [pc, #112]	; (800ac80 <MX_I2C2_Init+0x78>)
 800ac10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800ac12:	4b1a      	ldr	r3, [pc, #104]	; (800ac7c <MX_I2C2_Init+0x74>)
 800ac14:	4a1b      	ldr	r2, [pc, #108]	; (800ac84 <MX_I2C2_Init+0x7c>)
 800ac16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800ac18:	4b18      	ldr	r3, [pc, #96]	; (800ac7c <MX_I2C2_Init+0x74>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ac1e:	4b17      	ldr	r3, [pc, #92]	; (800ac7c <MX_I2C2_Init+0x74>)
 800ac20:	2201      	movs	r2, #1
 800ac22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ac24:	4b15      	ldr	r3, [pc, #84]	; (800ac7c <MX_I2C2_Init+0x74>)
 800ac26:	2200      	movs	r2, #0
 800ac28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800ac2a:	4b14      	ldr	r3, [pc, #80]	; (800ac7c <MX_I2C2_Init+0x74>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800ac30:	4b12      	ldr	r3, [pc, #72]	; (800ac7c <MX_I2C2_Init+0x74>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ac36:	4b11      	ldr	r3, [pc, #68]	; (800ac7c <MX_I2C2_Init+0x74>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ac3c:	4b0f      	ldr	r3, [pc, #60]	; (800ac7c <MX_I2C2_Init+0x74>)
 800ac3e:	2200      	movs	r2, #0
 800ac40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800ac42:	480e      	ldr	r0, [pc, #56]	; (800ac7c <MX_I2C2_Init+0x74>)
 800ac44:	f7f8 fe40 	bl	80038c8 <HAL_I2C_Init>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800ac4e:	f000 f9ed 	bl	800b02c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ac52:	2100      	movs	r1, #0
 800ac54:	4809      	ldr	r0, [pc, #36]	; (800ac7c <MX_I2C2_Init+0x74>)
 800ac56:	f7f8 fec7 	bl	80039e8 <HAL_I2CEx_ConfigAnalogFilter>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d001      	beq.n	800ac64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800ac60:	f000 f9e4 	bl	800b02c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800ac64:	2100      	movs	r1, #0
 800ac66:	4805      	ldr	r0, [pc, #20]	; (800ac7c <MX_I2C2_Init+0x74>)
 800ac68:	f7f8 ff09 	bl	8003a7e <HAL_I2CEx_ConfigDigitalFilter>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d001      	beq.n	800ac76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800ac72:	f000 f9db 	bl	800b02c <Error_Handler>
  }

}
 800ac76:	bf00      	nop
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	200005c0 	.word	0x200005c0
 800ac80:	40005800 	.word	0x40005800
 800ac84:	00b03fdb 	.word	0x00b03fdb

0800ac88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08a      	sub	sp, #40	; 0x28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac90:	f107 0314 	add.w	r3, r7, #20
 800ac94:	2200      	movs	r2, #0
 800ac96:	601a      	str	r2, [r3, #0]
 800ac98:	605a      	str	r2, [r3, #4]
 800ac9a:	609a      	str	r2, [r3, #8]
 800ac9c:	60da      	str	r2, [r3, #12]
 800ac9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a1a      	ldr	r2, [pc, #104]	; (800ad10 <HAL_I2C_MspInit+0x88>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d12e      	bne.n	800ad08 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800acaa:	4b1a      	ldr	r3, [pc, #104]	; (800ad14 <HAL_I2C_MspInit+0x8c>)
 800acac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acb0:	4a18      	ldr	r2, [pc, #96]	; (800ad14 <HAL_I2C_MspInit+0x8c>)
 800acb2:	f043 0302 	orr.w	r3, r3, #2
 800acb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800acba:	4b16      	ldr	r3, [pc, #88]	; (800ad14 <HAL_I2C_MspInit+0x8c>)
 800acbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acc0:	f003 0302 	and.w	r3, r3, #2
 800acc4:	613b      	str	r3, [r7, #16]
 800acc6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800acc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800accc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800acce:	2312      	movs	r3, #18
 800acd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acd6:	2303      	movs	r3, #3
 800acd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800acda:	2304      	movs	r3, #4
 800acdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800acde:	f107 0314 	add.w	r3, r7, #20
 800ace2:	4619      	mov	r1, r3
 800ace4:	480c      	ldr	r0, [pc, #48]	; (800ad18 <HAL_I2C_MspInit+0x90>)
 800ace6:	f7f8 fc0d 	bl	8003504 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800acea:	4b0a      	ldr	r3, [pc, #40]	; (800ad14 <HAL_I2C_MspInit+0x8c>)
 800acec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800acf0:	4a08      	ldr	r2, [pc, #32]	; (800ad14 <HAL_I2C_MspInit+0x8c>)
 800acf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800acf6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800acfa:	4b06      	ldr	r3, [pc, #24]	; (800ad14 <HAL_I2C_MspInit+0x8c>)
 800acfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ad00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad04:	60fb      	str	r3, [r7, #12]
 800ad06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800ad08:	bf00      	nop
 800ad0a:	3728      	adds	r7, #40	; 0x28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	40005800 	.word	0x40005800
 800ad14:	58024400 	.word	0x58024400
 800ad18:	58020400 	.word	0x58020400

0800ad1c <SCB_EnableICache>:
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ad20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ad24:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800ad28:	4b0b      	ldr	r3, [pc, #44]	; (800ad58 <SCB_EnableICache+0x3c>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800ad30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ad34:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800ad38:	4b07      	ldr	r3, [pc, #28]	; (800ad58 <SCB_EnableICache+0x3c>)
 800ad3a:	695b      	ldr	r3, [r3, #20]
 800ad3c:	4a06      	ldr	r2, [pc, #24]	; (800ad58 <SCB_EnableICache+0x3c>)
 800ad3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad42:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800ad44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ad48:	f3bf 8f6f 	isb	sy
}
 800ad4c:	bf00      	nop
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	e000ed00 	.word	0xe000ed00

0800ad5c <SCB_EnableDCache>:
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800ad62:	4b1d      	ldr	r3, [pc, #116]	; (800add8 <SCB_EnableDCache+0x7c>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800ad6a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800ad6e:	4b1a      	ldr	r3, [pc, #104]	; (800add8 <SCB_EnableDCache+0x7c>)
 800ad70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad74:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	0b5b      	lsrs	r3, r3, #13
 800ad7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ad7e:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	08db      	lsrs	r3, r3, #3
 800ad84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad88:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	015a      	lsls	r2, r3, #5
 800ad8e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800ad92:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ad98:	490f      	ldr	r1, [pc, #60]	; (800add8 <SCB_EnableDCache+0x7c>)
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	1e5a      	subs	r2, r3, #1
 800ada4:	60ba      	str	r2, [r7, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1ef      	bne.n	800ad8a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	1e5a      	subs	r2, r3, #1
 800adae:	60fa      	str	r2, [r7, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1e5      	bne.n	800ad80 <SCB_EnableDCache+0x24>
 800adb4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800adb8:	4b07      	ldr	r3, [pc, #28]	; (800add8 <SCB_EnableDCache+0x7c>)
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	4a06      	ldr	r2, [pc, #24]	; (800add8 <SCB_EnableDCache+0x7c>)
 800adbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adc2:	6153      	str	r3, [r2, #20]
 800adc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800adc8:	f3bf 8f6f 	isb	sy
}
 800adcc:	bf00      	nop
 800adce:	3714      	adds	r7, #20
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr
 800add8:	e000ed00 	.word	0xe000ed00

0800addc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800ade0:	f7ff ff9c 	bl	800ad1c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800ade4:	f7ff ffba 	bl	800ad5c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ade8:	f7f5 fa76 	bl	80002d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800adec:	f000 f818 	bl	800ae20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800adf0:	f7ff fdd0 	bl	800a994 <MX_GPIO_Init>
  MX_DMA_Init();
 800adf4:	f7ff fc7e 	bl	800a6f4 <MX_DMA_Init>
  MX_FMC_Init();
 800adf8:	f7ff fcec 	bl	800a7d4 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 800adfc:	f000 fb92 	bl	800b524 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800ae00:	f7ff fcc0 	bl	800a784 <MX_FATFS_Init>
  MX_SAI1_Init();
 800ae04:	f000 f952 	bl	800b0ac <MX_SAI1_Init>
  MX_RNG_Init();
 800ae08:	f000 f918 	bl	800b03c <MX_RNG_Init>
  MX_SPI2_Init();
 800ae0c:	f000 fc78 	bl	800b700 <MX_SPI2_Init>
  MX_I2C2_Init();
 800ae10:	f7ff fefa 	bl	800ac08 <MX_I2C2_Init>
  MX_ADC1_Init();
 800ae14:	f7ff fa60 	bl	800a2d8 <MX_ADC1_Init>
  MX_SPI1_Init();
 800ae18:	f000 fc1a 	bl	800b650 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ae1c:	e7fe      	b.n	800ae1c <main+0x40>
	...

0800ae20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b0cc      	sub	sp, #304	; 0x130
 800ae24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ae26:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ae2a:	224c      	movs	r2, #76	; 0x4c
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 ff82 	bl	800bd38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ae34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ae38:	2220      	movs	r2, #32
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 ff7b 	bl	800bd38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ae42:	f107 0308 	add.w	r3, r7, #8
 800ae46:	4618      	mov	r0, r3
 800ae48:	23bc      	movs	r3, #188	; 0xbc
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	f000 ff73 	bl	800bd38 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800ae52:	2002      	movs	r0, #2
 800ae54:	f7f8 fe60 	bl	8003b18 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800ae58:	1d3b      	adds	r3, r7, #4
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	4b6f      	ldr	r3, [pc, #444]	; (800b01c <SystemClock_Config+0x1fc>)
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	4a6e      	ldr	r2, [pc, #440]	; (800b01c <SystemClock_Config+0x1fc>)
 800ae64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae68:	6193      	str	r3, [r2, #24]
 800ae6a:	4b6c      	ldr	r3, [pc, #432]	; (800b01c <SystemClock_Config+0x1fc>)
 800ae6c:	699b      	ldr	r3, [r3, #24]
 800ae6e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800ae72:	1d3b      	adds	r3, r7, #4
 800ae74:	601a      	str	r2, [r3, #0]
 800ae76:	4b6a      	ldr	r3, [pc, #424]	; (800b020 <SystemClock_Config+0x200>)
 800ae78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7a:	4a69      	ldr	r2, [pc, #420]	; (800b020 <SystemClock_Config+0x200>)
 800ae7c:	f043 0301 	orr.w	r3, r3, #1
 800ae80:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae82:	4b67      	ldr	r3, [pc, #412]	; (800b020 <SystemClock_Config+0x200>)
 800ae84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae86:	f003 0201 	and.w	r2, r3, #1
 800ae8a:	1d3b      	adds	r3, r7, #4
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	1d3b      	adds	r3, r7, #4
 800ae90:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800ae92:	bf00      	nop
 800ae94:	4b61      	ldr	r3, [pc, #388]	; (800b01c <SystemClock_Config+0x1fc>)
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aea0:	d1f8      	bne.n	800ae94 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800aea2:	4b60      	ldr	r3, [pc, #384]	; (800b024 <SystemClock_Config+0x204>)
 800aea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea6:	f023 0303 	bic.w	r3, r3, #3
 800aeaa:	4a5e      	ldr	r2, [pc, #376]	; (800b024 <SystemClock_Config+0x204>)
 800aeac:	f043 0302 	orr.w	r3, r3, #2
 800aeb0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800aeb2:	2323      	movs	r3, #35	; 0x23
 800aeb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800aeb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aebc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800aec0:	2301      	movs	r3, #1
 800aec2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800aec6:	2340      	movs	r3, #64	; 0x40
 800aec8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800aecc:	2301      	movs	r3, #1
 800aece:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800aed2:	2302      	movs	r3, #2
 800aed4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800aed8:	2302      	movs	r3, #2
 800aeda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800aede:	2305      	movs	r3, #5
 800aee0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 800aee4:	23c0      	movs	r3, #192	; 0xc0
 800aee6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800aeea:	2302      	movs	r3, #2
 800aeec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800aef0:	2302      	movs	r3, #2
 800aef2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800aef6:	2302      	movs	r3, #2
 800aef8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800aefc:	2308      	movs	r3, #8
 800aefe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800af02:	2300      	movs	r3, #0
 800af04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800af0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800af12:	4618      	mov	r0, r3
 800af14:	f7f8 fe3a 	bl	8003b8c <HAL_RCC_OscConfig>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d001      	beq.n	800af22 <SystemClock_Config+0x102>
  {
    Error_Handler();
 800af1e:	f000 f885 	bl	800b02c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800af22:	233f      	movs	r3, #63	; 0x3f
 800af24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800af28:	2303      	movs	r3, #3
 800af2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800af2e:	2300      	movs	r3, #0
 800af30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800af34:	2308      	movs	r3, #8
 800af36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800af3a:	2340      	movs	r3, #64	; 0x40
 800af3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800af40:	2340      	movs	r3, #64	; 0x40
 800af42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800af46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800af4e:	2340      	movs	r3, #64	; 0x40
 800af50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800af54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800af58:	2104      	movs	r1, #4
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7f9 f9ee 	bl	800433c <HAL_RCC_ClockConfig>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800af66:	f000 f861 	bl	800b02c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SPI1
 800af6a:	f107 0308 	add.w	r3, r7, #8
 800af6e:	4a2e      	ldr	r2, [pc, #184]	; (800b028 <SystemClock_Config+0x208>)
 800af70:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FMC
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800af72:	f107 0308 	add.w	r3, r7, #8
 800af76:	2219      	movs	r2, #25
 800af78:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800af7a:	f107 0308 	add.w	r3, r7, #8
 800af7e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800af82:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800af84:	f107 0308 	add.w	r3, r7, #8
 800af88:	2207      	movs	r2, #7
 800af8a:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800af8c:	f107 0308 	add.w	r3, r7, #8
 800af90:	2202      	movs	r2, #2
 800af92:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800af94:	f107 0308 	add.w	r3, r7, #8
 800af98:	2202      	movs	r2, #2
 800af9a:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800af9c:	f107 0308 	add.w	r3, r7, #8
 800afa0:	2200      	movs	r2, #0
 800afa2:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800afa4:	f107 0308 	add.w	r3, r7, #8
 800afa8:	2200      	movs	r2, #0
 800afaa:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800afac:	f107 0308 	add.w	r3, r7, #8
 800afb0:	2200      	movs	r2, #0
 800afb2:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800afb4:	f107 0308 	add.w	r3, r7, #8
 800afb8:	2200      	movs	r2, #0
 800afba:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800afbc:	f107 0308 	add.w	r3, r7, #8
 800afc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800afc4:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800afc6:	f107 0308 	add.w	r3, r7, #8
 800afca:	2200      	movs	r2, #0
 800afcc:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800afce:	f107 0308 	add.w	r3, r7, #8
 800afd2:	2201      	movs	r2, #1
 800afd4:	655a      	str	r2, [r3, #84]	; 0x54
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800afd6:	f107 0308 	add.w	r3, r7, #8
 800afda:	2200      	movs	r2, #0
 800afdc:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800afde:	f107 0308 	add.w	r3, r7, #8
 800afe2:	2200      	movs	r2, #0
 800afe4:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800afe6:	f107 0308 	add.w	r3, r7, #8
 800afea:	2200      	movs	r2, #0
 800afec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800aff0:	f107 0308 	add.w	r3, r7, #8
 800aff4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800aff8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800affc:	f107 0308 	add.w	r3, r7, #8
 800b000:	4618      	mov	r0, r3
 800b002:	f7f9 fcf3 	bl	80049ec <HAL_RCCEx_PeriphCLKConfig>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <SystemClock_Config+0x1f0>
  {
    Error_Handler();
 800b00c:	f000 f80e 	bl	800b02c <Error_Handler>
  }
}
 800b010:	bf00      	nop
 800b012:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	58024800 	.word	0x58024800
 800b020:	58000400 	.word	0x58000400
 800b024:	58024400 	.word	0x58024400
 800b028:	810b1108 	.word	0x810b1108

0800b02c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b02c:	b480      	push	{r7}
 800b02e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b030:	bf00      	nop
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
	...

0800b03c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 800b040:	4b07      	ldr	r3, [pc, #28]	; (800b060 <MX_RNG_Init+0x24>)
 800b042:	4a08      	ldr	r2, [pc, #32]	; (800b064 <MX_RNG_Init+0x28>)
 800b044:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800b046:	4b06      	ldr	r3, [pc, #24]	; (800b060 <MX_RNG_Init+0x24>)
 800b048:	2200      	movs	r2, #0
 800b04a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800b04c:	4804      	ldr	r0, [pc, #16]	; (800b060 <MX_RNG_Init+0x24>)
 800b04e:	f7fb fb81 	bl	8006754 <HAL_RNG_Init>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800b058:	f7ff ffe8 	bl	800b02c <Error_Handler>
  }

}
 800b05c:	bf00      	nop
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	2000060c 	.word	0x2000060c
 800b064:	48021800 	.word	0x48021800

0800b068 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a0b      	ldr	r2, [pc, #44]	; (800b0a4 <HAL_RNG_MspInit+0x3c>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d10e      	bne.n	800b098 <HAL_RNG_MspInit+0x30>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800b07a:	4b0b      	ldr	r3, [pc, #44]	; (800b0a8 <HAL_RNG_MspInit+0x40>)
 800b07c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b080:	4a09      	ldr	r2, [pc, #36]	; (800b0a8 <HAL_RNG_MspInit+0x40>)
 800b082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b086:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800b08a:	4b07      	ldr	r3, [pc, #28]	; (800b0a8 <HAL_RNG_MspInit+0x40>)
 800b08c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b094:	60fb      	str	r3, [r7, #12]
 800b096:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800b098:	bf00      	nop
 800b09a:	3714      	adds	r7, #20
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	48021800 	.word	0x48021800
 800b0a8:	58024400 	.word	0x58024400

0800b0ac <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 800b0b0:	4b2a      	ldr	r3, [pc, #168]	; (800b15c <MX_SAI1_Init+0xb0>)
 800b0b2:	4a2b      	ldr	r2, [pc, #172]	; (800b160 <MX_SAI1_Init+0xb4>)
 800b0b4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800b0b6:	4b29      	ldr	r3, [pc, #164]	; (800b15c <MX_SAI1_Init+0xb0>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800b0bc:	4b27      	ldr	r3, [pc, #156]	; (800b15c <MX_SAI1_Init+0xb0>)
 800b0be:	2200      	movs	r2, #0
 800b0c0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800b0c2:	4b26      	ldr	r3, [pc, #152]	; (800b15c <MX_SAI1_Init+0xb0>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800b0c8:	4b24      	ldr	r3, [pc, #144]	; (800b15c <MX_SAI1_Init+0xb0>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800b0ce:	4b23      	ldr	r3, [pc, #140]	; (800b15c <MX_SAI1_Init+0xb0>)
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800b0d4:	4b21      	ldr	r3, [pc, #132]	; (800b15c <MX_SAI1_Init+0xb0>)
 800b0d6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800b0da:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800b0dc:	4b1f      	ldr	r3, [pc, #124]	; (800b15c <MX_SAI1_Init+0xb0>)
 800b0de:	2200      	movs	r2, #0
 800b0e0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800b0e2:	4b1e      	ldr	r3, [pc, #120]	; (800b15c <MX_SAI1_Init+0xb0>)
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800b0e8:	4b1c      	ldr	r3, [pc, #112]	; (800b15c <MX_SAI1_Init+0xb0>)
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800b0ee:	4b1b      	ldr	r3, [pc, #108]	; (800b15c <MX_SAI1_Init+0xb0>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	4818      	ldr	r0, [pc, #96]	; (800b15c <MX_SAI1_Init+0xb0>)
 800b0fc:	f7fb fb86 	bl	800680c <HAL_SAI_InitProtocol>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d001      	beq.n	800b10a <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 800b106:	f7ff ff91 	bl	800b02c <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800b10a:	4b16      	ldr	r3, [pc, #88]	; (800b164 <MX_SAI1_Init+0xb8>)
 800b10c:	4a16      	ldr	r2, [pc, #88]	; (800b168 <MX_SAI1_Init+0xbc>)
 800b10e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800b110:	4b14      	ldr	r3, [pc, #80]	; (800b164 <MX_SAI1_Init+0xb8>)
 800b112:	2203      	movs	r2, #3
 800b114:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800b116:	4b13      	ldr	r3, [pc, #76]	; (800b164 <MX_SAI1_Init+0xb8>)
 800b118:	2201      	movs	r2, #1
 800b11a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800b11c:	4b11      	ldr	r3, [pc, #68]	; (800b164 <MX_SAI1_Init+0xb8>)
 800b11e:	2200      	movs	r2, #0
 800b120:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800b122:	4b10      	ldr	r3, [pc, #64]	; (800b164 <MX_SAI1_Init+0xb8>)
 800b124:	2201      	movs	r2, #1
 800b126:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800b128:	4b0e      	ldr	r3, [pc, #56]	; (800b164 <MX_SAI1_Init+0xb8>)
 800b12a:	2200      	movs	r2, #0
 800b12c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800b12e:	4b0d      	ldr	r3, [pc, #52]	; (800b164 <MX_SAI1_Init+0xb8>)
 800b130:	2200      	movs	r2, #0
 800b132:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800b134:	4b0b      	ldr	r3, [pc, #44]	; (800b164 <MX_SAI1_Init+0xb8>)
 800b136:	2200      	movs	r2, #0
 800b138:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800b13a:	4b0a      	ldr	r3, [pc, #40]	; (800b164 <MX_SAI1_Init+0xb8>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800b140:	2302      	movs	r3, #2
 800b142:	2202      	movs	r2, #2
 800b144:	2100      	movs	r1, #0
 800b146:	4807      	ldr	r0, [pc, #28]	; (800b164 <MX_SAI1_Init+0xb8>)
 800b148:	f7fb fb60 	bl	800680c <HAL_SAI_InitProtocol>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 800b152:	f7ff ff6b 	bl	800b02c <Error_Handler>
  }

}
 800b156:	bf00      	nop
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	200007a8 	.word	0x200007a8
 800b160:	40015804 	.word	0x40015804
 800b164:	20000620 	.word	0x20000620
 800b168:	40015824 	.word	0x40015824

0800b16c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b08a      	sub	sp, #40	; 0x28
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a6f      	ldr	r2, [pc, #444]	; (800b338 <HAL_SAI_MspInit+0x1cc>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d169      	bne.n	800b252 <HAL_SAI_MspInit+0xe6>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800b17e:	4b6f      	ldr	r3, [pc, #444]	; (800b33c <HAL_SAI_MspInit+0x1d0>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10e      	bne.n	800b1a4 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800b186:	4b6e      	ldr	r3, [pc, #440]	; (800b340 <HAL_SAI_MspInit+0x1d4>)
 800b188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b18c:	4a6c      	ldr	r2, [pc, #432]	; (800b340 <HAL_SAI_MspInit+0x1d4>)
 800b18e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b192:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800b196:	4b6a      	ldr	r3, [pc, #424]	; (800b340 <HAL_SAI_MspInit+0x1d4>)
 800b198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b19c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1a0:	613b      	str	r3, [r7, #16]
 800b1a2:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800b1a4:	4b65      	ldr	r3, [pc, #404]	; (800b33c <HAL_SAI_MspInit+0x1d0>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	4a64      	ldr	r2, [pc, #400]	; (800b33c <HAL_SAI_MspInit+0x1d0>)
 800b1ac:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800b1ae:	2374      	movs	r3, #116	; 0x74
 800b1b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1b2:	2302      	movs	r3, #2
 800b1b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800b1be:	2306      	movs	r3, #6
 800b1c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b1c2:	f107 0314 	add.w	r3, r7, #20
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	485e      	ldr	r0, [pc, #376]	; (800b344 <HAL_SAI_MspInit+0x1d8>)
 800b1ca:	f7f8 f99b 	bl	8003504 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai1_a.Instance = DMA1_Stream1;
 800b1ce:	4b5e      	ldr	r3, [pc, #376]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b1d0:	4a5e      	ldr	r2, [pc, #376]	; (800b34c <HAL_SAI_MspInit+0x1e0>)
 800b1d2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800b1d4:	4b5c      	ldr	r3, [pc, #368]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b1d6:	2257      	movs	r2, #87	; 0x57
 800b1d8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b1da:	4b5b      	ldr	r3, [pc, #364]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b1dc:	2240      	movs	r2, #64	; 0x40
 800b1de:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800b1e0:	4b59      	ldr	r3, [pc, #356]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800b1e6:	4b58      	ldr	r3, [pc, #352]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b1e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b1ec:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b1ee:	4b56      	ldr	r3, [pc, #344]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b1f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b1f4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b1f6:	4b54      	ldr	r3, [pc, #336]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b1f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b1fc:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800b1fe:	4b52      	ldr	r3, [pc, #328]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b200:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b204:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b206:	4b50      	ldr	r3, [pc, #320]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b208:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800b20c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b20e:	4b4e      	ldr	r3, [pc, #312]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b210:	2204      	movs	r2, #4
 800b212:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800b214:	4b4c      	ldr	r3, [pc, #304]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b216:	2200      	movs	r2, #0
 800b218:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800b21a:	4b4b      	ldr	r3, [pc, #300]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b220:	4b49      	ldr	r3, [pc, #292]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b222:	2200      	movs	r2, #0
 800b224:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800b226:	4848      	ldr	r0, [pc, #288]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b228:	f7f6 fa66 	bl	80016f8 <HAL_DMA_Init>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <HAL_SAI_MspInit+0xca>
    {
      Error_Handler();
 800b232:	f7ff fefb 	bl	800b02c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a43      	ldr	r2, [pc, #268]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b23a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b23e:	4a42      	ldr	r2, [pc, #264]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a40      	ldr	r2, [pc, #256]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b24c:	4a3e      	ldr	r2, [pc, #248]	; (800b348 <HAL_SAI_MspInit+0x1dc>)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(hsai->Instance==SAI1_Block_B)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a3e      	ldr	r2, [pc, #248]	; (800b350 <HAL_SAI_MspInit+0x1e4>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d169      	bne.n	800b330 <HAL_SAI_MspInit+0x1c4>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 800b25c:	4b37      	ldr	r3, [pc, #220]	; (800b33c <HAL_SAI_MspInit+0x1d0>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10e      	bne.n	800b282 <HAL_SAI_MspInit+0x116>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800b264:	4b36      	ldr	r3, [pc, #216]	; (800b340 <HAL_SAI_MspInit+0x1d4>)
 800b266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b26a:	4a35      	ldr	r2, [pc, #212]	; (800b340 <HAL_SAI_MspInit+0x1d4>)
 800b26c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b270:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800b274:	4b32      	ldr	r3, [pc, #200]	; (800b340 <HAL_SAI_MspInit+0x1d4>)
 800b276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b27a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b27e:	60fb      	str	r3, [r7, #12]
 800b280:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800b282:	4b2e      	ldr	r3, [pc, #184]	; (800b33c <HAL_SAI_MspInit+0x1d0>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3301      	adds	r3, #1
 800b288:	4a2c      	ldr	r2, [pc, #176]	; (800b33c <HAL_SAI_MspInit+0x1d0>)
 800b28a:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b28c:	2308      	movs	r3, #8
 800b28e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b290:	2302      	movs	r3, #2
 800b292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b294:	2300      	movs	r3, #0
 800b296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b298:	2303      	movs	r3, #3
 800b29a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800b29c:	2306      	movs	r3, #6
 800b29e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b2a0:	f107 0314 	add.w	r3, r7, #20
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4827      	ldr	r0, [pc, #156]	; (800b344 <HAL_SAI_MspInit+0x1d8>)
 800b2a8:	f7f8 f92c 	bl	8003504 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai1_b.Instance = DMA1_Stream2;
 800b2ac:	4b29      	ldr	r3, [pc, #164]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b2ae:	4a2a      	ldr	r2, [pc, #168]	; (800b358 <HAL_SAI_MspInit+0x1ec>)
 800b2b0:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800b2b2:	4b28      	ldr	r3, [pc, #160]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b2b4:	2258      	movs	r2, #88	; 0x58
 800b2b6:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b2b8:	4b26      	ldr	r3, [pc, #152]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800b2be:	4b25      	ldr	r3, [pc, #148]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800b2c4:	4b23      	ldr	r3, [pc, #140]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b2c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b2ca:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b2cc:	4b21      	ldr	r3, [pc, #132]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b2ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b2d2:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b2d4:	4b1f      	ldr	r3, [pc, #124]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b2d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b2da:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800b2dc:	4b1d      	ldr	r3, [pc, #116]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b2de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2e2:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b2e4:	4b1b      	ldr	r3, [pc, #108]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b2e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800b2ea:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b2ec:	4b19      	ldr	r3, [pc, #100]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b2ee:	2204      	movs	r2, #4
 800b2f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800b2f2:	4b18      	ldr	r3, [pc, #96]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800b2f8:	4b16      	ldr	r3, [pc, #88]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b2fe:	4b15      	ldr	r3, [pc, #84]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b300:	2200      	movs	r2, #0
 800b302:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800b304:	4813      	ldr	r0, [pc, #76]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b306:	f7f6 f9f7 	bl	80016f8 <HAL_DMA_Init>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d001      	beq.n	800b314 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 800b310:	f7ff fe8c 	bl	800b02c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a0f      	ldr	r2, [pc, #60]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b31c:	4a0d      	ldr	r2, [pc, #52]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a0b      	ldr	r2, [pc, #44]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b32a:	4a0a      	ldr	r2, [pc, #40]	; (800b354 <HAL_SAI_MspInit+0x1e8>)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800b330:	bf00      	nop
 800b332:	3728      	adds	r7, #40	; 0x28
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	40015804 	.word	0x40015804
 800b33c:	2000003c 	.word	0x2000003c
 800b340:	58024400 	.word	0x58024400
 800b344:	58021000 	.word	0x58021000
 800b348:	200006b8 	.word	0x200006b8
 800b34c:	40020028 	.word	0x40020028
 800b350:	40015824 	.word	0x40015824
 800b354:	20000730 	.word	0x20000730
 800b358:	40020040 	.word	0x40020040

0800b35c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	4603      	mov	r3, r0
 800b364:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b366:	4b0b      	ldr	r3, [pc, #44]	; (800b394 <SD_CheckStatus+0x38>)
 800b368:	2201      	movs	r2, #1
 800b36a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b36c:	f7ff f970 	bl	800a650 <BSP_SD_GetCardState>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d107      	bne.n	800b386 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b376:	4b07      	ldr	r3, [pc, #28]	; (800b394 <SD_CheckStatus+0x38>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	f023 0301 	bic.w	r3, r3, #1
 800b380:	b2da      	uxtb	r2, r3
 800b382:	4b04      	ldr	r3, [pc, #16]	; (800b394 <SD_CheckStatus+0x38>)
 800b384:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b386:	4b03      	ldr	r3, [pc, #12]	; (800b394 <SD_CheckStatus+0x38>)
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	b2db      	uxtb	r3, r3
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	20000005 	.word	0x20000005

0800b398 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	4603      	mov	r3, r0
 800b3a0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800b3a2:	4b0b      	ldr	r3, [pc, #44]	; (800b3d0 <SD_initialize+0x38>)
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b3a8:	f7ff f8f0 	bl	800a58c <BSP_SD_Init>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d107      	bne.n	800b3c2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b3b2:	79fb      	ldrb	r3, [r7, #7]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7ff ffd1 	bl	800b35c <SD_CheckStatus>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	461a      	mov	r2, r3
 800b3be:	4b04      	ldr	r3, [pc, #16]	; (800b3d0 <SD_initialize+0x38>)
 800b3c0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b3c2:	4b03      	ldr	r3, [pc, #12]	; (800b3d0 <SD_initialize+0x38>)
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	b2db      	uxtb	r3, r3
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	20000005 	.word	0x20000005

0800b3d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	4603      	mov	r3, r0
 800b3dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b3de:	79fb      	ldrb	r3, [r7, #7]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7ff ffbb 	bl	800b35c <SD_CheckStatus>
 800b3e6:	4603      	mov	r3, r0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60b9      	str	r1, [r7, #8]
 800b3f8:	607a      	str	r2, [r7, #4]
 800b3fa:	603b      	str	r3, [r7, #0]
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	6879      	ldr	r1, [r7, #4]
 800b40c:	68b8      	ldr	r0, [r7, #8]
 800b40e:	f7ff f8e3 	bl	800a5d8 <BSP_SD_ReadBlocks>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d107      	bne.n	800b428 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b418:	bf00      	nop
 800b41a:	f7ff f919 	bl	800a650 <BSP_SD_GetCardState>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1fa      	bne.n	800b41a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b424:	2300      	movs	r3, #0
 800b426:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b428:	7dfb      	ldrb	r3, [r7, #23]
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3718      	adds	r7, #24
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b086      	sub	sp, #24
 800b436:	af00      	add	r7, sp, #0
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	603b      	str	r3, [r7, #0]
 800b43e:	4603      	mov	r3, r0
 800b440:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	6879      	ldr	r1, [r7, #4]
 800b44e:	68b8      	ldr	r0, [r7, #8]
 800b450:	f7ff f8e0 	bl	800a614 <BSP_SD_WriteBlocks>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d107      	bne.n	800b46a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b45a:	bf00      	nop
 800b45c:	f7ff f8f8 	bl	800a650 <BSP_SD_GetCardState>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1fa      	bne.n	800b45c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b466:	2300      	movs	r3, #0
 800b468:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b46a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3718      	adds	r7, #24
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b08c      	sub	sp, #48	; 0x30
 800b478:	af00      	add	r7, sp, #0
 800b47a:	4603      	mov	r3, r0
 800b47c:	603a      	str	r2, [r7, #0]
 800b47e:	71fb      	strb	r3, [r7, #7]
 800b480:	460b      	mov	r3, r1
 800b482:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b48a:	4b25      	ldr	r3, [pc, #148]	; (800b520 <SD_ioctl+0xac>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	f003 0301 	and.w	r3, r3, #1
 800b494:	2b00      	cmp	r3, #0
 800b496:	d001      	beq.n	800b49c <SD_ioctl+0x28>
 800b498:	2303      	movs	r3, #3
 800b49a:	e03c      	b.n	800b516 <SD_ioctl+0xa2>

  switch (cmd)
 800b49c:	79bb      	ldrb	r3, [r7, #6]
 800b49e:	2b03      	cmp	r3, #3
 800b4a0:	d834      	bhi.n	800b50c <SD_ioctl+0x98>
 800b4a2:	a201      	add	r2, pc, #4	; (adr r2, 800b4a8 <SD_ioctl+0x34>)
 800b4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a8:	0800b4b9 	.word	0x0800b4b9
 800b4ac:	0800b4c1 	.word	0x0800b4c1
 800b4b0:	0800b4d9 	.word	0x0800b4d9
 800b4b4:	0800b4f3 	.word	0x0800b4f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4be:	e028      	b.n	800b512 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4c0:	f107 0308 	add.w	r3, r7, #8
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7ff f8d3 	bl	800a670 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b4ca:	6a3a      	ldr	r2, [r7, #32]
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4d6:	e01c      	b.n	800b512 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4d8:	f107 0308 	add.w	r3, r7, #8
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7ff f8c7 	bl	800a670 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4f0:	e00f      	b.n	800b512 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4f2:	f107 0308 	add.w	r3, r7, #8
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7ff f8ba 	bl	800a670 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fe:	0a5a      	lsrs	r2, r3, #9
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b504:	2300      	movs	r3, #0
 800b506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b50a:	e002      	b.n	800b512 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b50c:	2304      	movs	r3, #4
 800b50e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b516:	4618      	mov	r0, r3
 800b518:	3730      	adds	r7, #48	; 0x30
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	20000005 	.word	0x20000005

0800b524 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800b524:	b480      	push	{r7}
 800b526:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 800b528:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <MX_SDMMC1_SD_Init+0x3c>)
 800b52a:	4a0e      	ldr	r2, [pc, #56]	; (800b564 <MX_SDMMC1_SD_Init+0x40>)
 800b52c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800b52e:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <MX_SDMMC1_SD_Init+0x3c>)
 800b530:	2200      	movs	r2, #0
 800b532:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b534:	4b0a      	ldr	r3, [pc, #40]	; (800b560 <MX_SDMMC1_SD_Init+0x3c>)
 800b536:	2200      	movs	r2, #0
 800b538:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800b53a:	4b09      	ldr	r3, [pc, #36]	; (800b560 <MX_SDMMC1_SD_Init+0x3c>)
 800b53c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b540:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b542:	4b07      	ldr	r3, [pc, #28]	; (800b560 <MX_SDMMC1_SD_Init+0x3c>)
 800b544:	2200      	movs	r2, #0
 800b546:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 16;
 800b548:	4b05      	ldr	r3, [pc, #20]	; (800b560 <MX_SDMMC1_SD_Init+0x3c>)
 800b54a:	2210      	movs	r2, #16
 800b54c:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800b54e:	4b04      	ldr	r3, [pc, #16]	; (800b560 <MX_SDMMC1_SD_Init+0x3c>)
 800b550:	2201      	movs	r2, #1
 800b552:	619a      	str	r2, [r3, #24]

}
 800b554:	bf00      	nop
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	20000840 	.word	0x20000840
 800b564:	52007000 	.word	0x52007000

0800b568 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b08a      	sub	sp, #40	; 0x28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b570:	f107 0314 	add.w	r3, r7, #20
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	605a      	str	r2, [r3, #4]
 800b57a:	609a      	str	r2, [r3, #8]
 800b57c:	60da      	str	r2, [r3, #12]
 800b57e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a2e      	ldr	r2, [pc, #184]	; (800b640 <HAL_SD_MspInit+0xd8>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d155      	bne.n	800b636 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b58a:	4b2e      	ldr	r3, [pc, #184]	; (800b644 <HAL_SD_MspInit+0xdc>)
 800b58c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b590:	4a2c      	ldr	r2, [pc, #176]	; (800b644 <HAL_SD_MspInit+0xdc>)
 800b592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b596:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800b59a:	4b2a      	ldr	r3, [pc, #168]	; (800b644 <HAL_SD_MspInit+0xdc>)
 800b59c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b5a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5a4:	613b      	str	r3, [r7, #16]
 800b5a6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b5a8:	4b26      	ldr	r3, [pc, #152]	; (800b644 <HAL_SD_MspInit+0xdc>)
 800b5aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5ae:	4a25      	ldr	r2, [pc, #148]	; (800b644 <HAL_SD_MspInit+0xdc>)
 800b5b0:	f043 0304 	orr.w	r3, r3, #4
 800b5b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b5b8:	4b22      	ldr	r3, [pc, #136]	; (800b644 <HAL_SD_MspInit+0xdc>)
 800b5ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5be:	f003 0304 	and.w	r3, r3, #4
 800b5c2:	60fb      	str	r3, [r7, #12]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b5c6:	4b1f      	ldr	r3, [pc, #124]	; (800b644 <HAL_SD_MspInit+0xdc>)
 800b5c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5cc:	4a1d      	ldr	r2, [pc, #116]	; (800b644 <HAL_SD_MspInit+0xdc>)
 800b5ce:	f043 0308 	orr.w	r3, r3, #8
 800b5d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b5d6:	4b1b      	ldr	r3, [pc, #108]	; (800b644 <HAL_SD_MspInit+0xdc>)
 800b5d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5dc:	f003 0308 	and.w	r3, r3, #8
 800b5e0:	60bb      	str	r3, [r7, #8]
 800b5e2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800b5e4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800b5e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5ea:	2302      	movs	r3, #2
 800b5ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800b5f6:	230c      	movs	r3, #12
 800b5f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b5fa:	f107 0314 	add.w	r3, r7, #20
 800b5fe:	4619      	mov	r1, r3
 800b600:	4811      	ldr	r0, [pc, #68]	; (800b648 <HAL_SD_MspInit+0xe0>)
 800b602:	f7f7 ff7f 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b606:	2304      	movs	r3, #4
 800b608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b60a:	2302      	movs	r3, #2
 800b60c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b60e:	2301      	movs	r3, #1
 800b610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b612:	2301      	movs	r3, #1
 800b614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800b616:	230c      	movs	r3, #12
 800b618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b61a:	f107 0314 	add.w	r3, r7, #20
 800b61e:	4619      	mov	r1, r3
 800b620:	480a      	ldr	r0, [pc, #40]	; (800b64c <HAL_SD_MspInit+0xe4>)
 800b622:	f7f7 ff6f 	bl	8003504 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 800b626:	2200      	movs	r2, #0
 800b628:	2107      	movs	r1, #7
 800b62a:	2031      	movs	r0, #49	; 0x31
 800b62c:	f7f6 f82f 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800b630:	2031      	movs	r0, #49	; 0x31
 800b632:	f7f6 f846 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800b636:	bf00      	nop
 800b638:	3728      	adds	r7, #40	; 0x28
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	52007000 	.word	0x52007000
 800b644:	58024400 	.word	0x58024400
 800b648:	58020800 	.word	0x58020800
 800b64c:	58020c00 	.word	0x58020c00

0800b650 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800b654:	4b28      	ldr	r3, [pc, #160]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b656:	4a29      	ldr	r2, [pc, #164]	; (800b6fc <MX_SPI1_Init+0xac>)
 800b658:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b65a:	4b27      	ldr	r3, [pc, #156]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b65c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800b660:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800b662:	4b25      	ldr	r3, [pc, #148]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b664:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800b668:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800b66a:	4b23      	ldr	r3, [pc, #140]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b66c:	2207      	movs	r2, #7
 800b66e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b670:	4b21      	ldr	r3, [pc, #132]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b672:	2200      	movs	r2, #0
 800b674:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b676:	4b20      	ldr	r3, [pc, #128]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b678:	2200      	movs	r2, #0
 800b67a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800b67c:	4b1e      	ldr	r3, [pc, #120]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b67e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b682:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800b684:	4b1c      	ldr	r3, [pc, #112]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b686:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b68a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b68c:	4b1a      	ldr	r3, [pc, #104]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b68e:	2200      	movs	r2, #0
 800b690:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800b692:	4b19      	ldr	r3, [pc, #100]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b694:	2200      	movs	r2, #0
 800b696:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b698:	4b17      	ldr	r3, [pc, #92]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800b69e:	4b16      	ldr	r3, [pc, #88]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800b6a4:	4b14      	ldr	r3, [pc, #80]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b6a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b6aa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800b6ac:	4b12      	ldr	r3, [pc, #72]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800b6b2:	4b11      	ldr	r3, [pc, #68]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b6b8:	4b0f      	ldr	r3, [pc, #60]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b6be:	4b0e      	ldr	r3, [pc, #56]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800b6c4:	4b0c      	ldr	r3, [pc, #48]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800b6ca:	4b0b      	ldr	r3, [pc, #44]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800b6d0:	4b09      	ldr	r3, [pc, #36]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800b6d6:	4b08      	ldr	r3, [pc, #32]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800b6dc:	4b06      	ldr	r3, [pc, #24]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b6e2:	4805      	ldr	r0, [pc, #20]	; (800b6f8 <MX_SPI1_Init+0xa8>)
 800b6e4:	f7fd fb22 	bl	8008d2c <HAL_SPI_Init>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d001      	beq.n	800b6f2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800b6ee:	f7ff fc9d 	bl	800b02c <Error_Handler>
  }

}
 800b6f2:	bf00      	nop
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	200009c0 	.word	0x200009c0
 800b6fc:	40013000 	.word	0x40013000

0800b700 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800b704:	4b24      	ldr	r3, [pc, #144]	; (800b798 <MX_SPI2_Init+0x98>)
 800b706:	4a25      	ldr	r2, [pc, #148]	; (800b79c <MX_SPI2_Init+0x9c>)
 800b708:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800b70a:	4b23      	ldr	r3, [pc, #140]	; (800b798 <MX_SPI2_Init+0x98>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800b710:	4b21      	ldr	r3, [pc, #132]	; (800b798 <MX_SPI2_Init+0x98>)
 800b712:	2200      	movs	r2, #0
 800b714:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800b716:	4b20      	ldr	r3, [pc, #128]	; (800b798 <MX_SPI2_Init+0x98>)
 800b718:	2207      	movs	r2, #7
 800b71a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b71c:	4b1e      	ldr	r3, [pc, #120]	; (800b798 <MX_SPI2_Init+0x98>)
 800b71e:	2200      	movs	r2, #0
 800b720:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b722:	4b1d      	ldr	r3, [pc, #116]	; (800b798 <MX_SPI2_Init+0x98>)
 800b724:	2200      	movs	r2, #0
 800b726:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800b728:	4b1b      	ldr	r3, [pc, #108]	; (800b798 <MX_SPI2_Init+0x98>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b72e:	4b1a      	ldr	r3, [pc, #104]	; (800b798 <MX_SPI2_Init+0x98>)
 800b730:	2200      	movs	r2, #0
 800b732:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800b734:	4b18      	ldr	r3, [pc, #96]	; (800b798 <MX_SPI2_Init+0x98>)
 800b736:	2200      	movs	r2, #0
 800b738:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b73a:	4b17      	ldr	r3, [pc, #92]	; (800b798 <MX_SPI2_Init+0x98>)
 800b73c:	2200      	movs	r2, #0
 800b73e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800b740:	4b15      	ldr	r3, [pc, #84]	; (800b798 <MX_SPI2_Init+0x98>)
 800b742:	2200      	movs	r2, #0
 800b744:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800b746:	4b14      	ldr	r3, [pc, #80]	; (800b798 <MX_SPI2_Init+0x98>)
 800b748:	2200      	movs	r2, #0
 800b74a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800b74c:	4b12      	ldr	r3, [pc, #72]	; (800b798 <MX_SPI2_Init+0x98>)
 800b74e:	2200      	movs	r2, #0
 800b750:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800b752:	4b11      	ldr	r3, [pc, #68]	; (800b798 <MX_SPI2_Init+0x98>)
 800b754:	2200      	movs	r2, #0
 800b756:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b758:	4b0f      	ldr	r3, [pc, #60]	; (800b798 <MX_SPI2_Init+0x98>)
 800b75a:	2200      	movs	r2, #0
 800b75c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b75e:	4b0e      	ldr	r3, [pc, #56]	; (800b798 <MX_SPI2_Init+0x98>)
 800b760:	2200      	movs	r2, #0
 800b762:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800b764:	4b0c      	ldr	r3, [pc, #48]	; (800b798 <MX_SPI2_Init+0x98>)
 800b766:	2200      	movs	r2, #0
 800b768:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800b76a:	4b0b      	ldr	r3, [pc, #44]	; (800b798 <MX_SPI2_Init+0x98>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800b770:	4b09      	ldr	r3, [pc, #36]	; (800b798 <MX_SPI2_Init+0x98>)
 800b772:	2200      	movs	r2, #0
 800b774:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800b776:	4b08      	ldr	r3, [pc, #32]	; (800b798 <MX_SPI2_Init+0x98>)
 800b778:	2200      	movs	r2, #0
 800b77a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800b77c:	4b06      	ldr	r3, [pc, #24]	; (800b798 <MX_SPI2_Init+0x98>)
 800b77e:	2200      	movs	r2, #0
 800b780:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800b782:	4805      	ldr	r0, [pc, #20]	; (800b798 <MX_SPI2_Init+0x98>)
 800b784:	f7fd fad2 	bl	8008d2c <HAL_SPI_Init>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d001      	beq.n	800b792 <MX_SPI2_Init+0x92>
  {
    Error_Handler();
 800b78e:	f7ff fc4d 	bl	800b02c <Error_Handler>
  }

}
 800b792:	bf00      	nop
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	200008c0 	.word	0x200008c0
 800b79c:	40003800 	.word	0x40003800

0800b7a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b08c      	sub	sp, #48	; 0x30
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7a8:	f107 031c 	add.w	r3, r7, #28
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	601a      	str	r2, [r3, #0]
 800b7b0:	605a      	str	r2, [r3, #4]
 800b7b2:	609a      	str	r2, [r3, #8]
 800b7b4:	60da      	str	r2, [r3, #12]
 800b7b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4aa9      	ldr	r2, [pc, #676]	; (800ba64 <HAL_SPI_MspInit+0x2c4>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	f040 809f 	bne.w	800b902 <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b7c4:	4ba8      	ldr	r3, [pc, #672]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b7c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b7ca:	4aa7      	ldr	r2, [pc, #668]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b7cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b7d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800b7d4:	4ba4      	ldr	r3, [pc, #656]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b7d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b7da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b7de:	61bb      	str	r3, [r7, #24]
 800b7e0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b7e2:	4ba1      	ldr	r3, [pc, #644]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b7e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b7e8:	4a9f      	ldr	r2, [pc, #636]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b7ea:	f043 0308 	orr.w	r3, r3, #8
 800b7ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b7f2:	4b9d      	ldr	r3, [pc, #628]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b7f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b7f8:	f003 0308 	and.w	r3, r3, #8
 800b7fc:	617b      	str	r3, [r7, #20]
 800b7fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b800:	4b99      	ldr	r3, [pc, #612]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b806:	4a98      	ldr	r2, [pc, #608]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b80c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b810:	4b95      	ldr	r3, [pc, #596]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b81a:	613b      	str	r3, [r7, #16]
 800b81c:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800b81e:	2380      	movs	r3, #128	; 0x80
 800b820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b822:	2302      	movs	r3, #2
 800b824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b826:	2300      	movs	r3, #0
 800b828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b82a:	2302      	movs	r3, #2
 800b82c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b82e:	2305      	movs	r3, #5
 800b830:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b832:	f107 031c 	add.w	r3, r7, #28
 800b836:	4619      	mov	r1, r3
 800b838:	488c      	ldr	r0, [pc, #560]	; (800ba6c <HAL_SPI_MspInit+0x2cc>)
 800b83a:	f7f7 fe63 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b83e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b844:	2302      	movs	r3, #2
 800b846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b848:	2300      	movs	r3, #0
 800b84a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b84c:	2300      	movs	r3, #0
 800b84e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b850:	2305      	movs	r3, #5
 800b852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b854:	f107 031c 	add.w	r3, r7, #28
 800b858:	4619      	mov	r1, r3
 800b85a:	4885      	ldr	r0, [pc, #532]	; (800ba70 <HAL_SPI_MspInit+0x2d0>)
 800b85c:	f7f7 fe52 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b860:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b866:	2302      	movs	r3, #2
 800b868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b86a:	2300      	movs	r3, #0
 800b86c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b86e:	2302      	movs	r3, #2
 800b870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b872:	2305      	movs	r3, #5
 800b874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b876:	f107 031c 	add.w	r3, r7, #28
 800b87a:	4619      	mov	r1, r3
 800b87c:	487c      	ldr	r0, [pc, #496]	; (800ba70 <HAL_SPI_MspInit+0x2d0>)
 800b87e:	f7f7 fe41 	bl	8003504 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 800b882:	4b7c      	ldr	r3, [pc, #496]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b884:	4a7c      	ldr	r2, [pc, #496]	; (800ba78 <HAL_SPI_MspInit+0x2d8>)
 800b886:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800b888:	4b7a      	ldr	r3, [pc, #488]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b88a:	2226      	movs	r2, #38	; 0x26
 800b88c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b88e:	4b79      	ldr	r3, [pc, #484]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b890:	2240      	movs	r2, #64	; 0x40
 800b892:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b894:	4b77      	ldr	r3, [pc, #476]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b896:	2200      	movs	r2, #0
 800b898:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b89a:	4b76      	ldr	r3, [pc, #472]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b89c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b8a0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8a2:	4b74      	ldr	r3, [pc, #464]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b8a8:	4b72      	ldr	r3, [pc, #456]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800b8ae:	4b71      	ldr	r3, [pc, #452]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800b8b4:	4b6f      	ldr	r3, [pc, #444]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b8b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b8ba:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b8bc:	4b6d      	ldr	r3, [pc, #436]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b8be:	2204      	movs	r2, #4
 800b8c0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b8c2:	4b6c      	ldr	r3, [pc, #432]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800b8c8:	4b6a      	ldr	r3, [pc, #424]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b8ce:	4b69      	ldr	r3, [pc, #420]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800b8d4:	4867      	ldr	r0, [pc, #412]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b8d6:	f7f5 ff0f 	bl	80016f8 <HAL_DMA_Init>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d001      	beq.n	800b8e4 <HAL_SPI_MspInit+0x144>
    {
      Error_Handler();
 800b8e0:	f7ff fba4 	bl	800b02c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a63      	ldr	r2, [pc, #396]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b8e8:	679a      	str	r2, [r3, #120]	; 0x78
 800b8ea:	4a62      	ldr	r2, [pc, #392]	; (800ba74 <HAL_SPI_MspInit+0x2d4>)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	2023      	movs	r0, #35	; 0x23
 800b8f6:	f7f5 feca 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800b8fa:	2023      	movs	r0, #35	; 0x23
 800b8fc:	f7f5 fee1 	bl	80016c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800b900:	e0ac      	b.n	800ba5c <HAL_SPI_MspInit+0x2bc>
  else if(spiHandle->Instance==SPI2)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a5d      	ldr	r2, [pc, #372]	; (800ba7c <HAL_SPI_MspInit+0x2dc>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	f040 80a7 	bne.w	800ba5c <HAL_SPI_MspInit+0x2bc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b90e:	4b56      	ldr	r3, [pc, #344]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b914:	4a54      	ldr	r2, [pc, #336]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b91a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b91e:	4b52      	ldr	r3, [pc, #328]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b928:	60fb      	str	r3, [r7, #12]
 800b92a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b92c:	4b4e      	ldr	r3, [pc, #312]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b92e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b932:	4a4d      	ldr	r2, [pc, #308]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b934:	f043 0302 	orr.w	r3, r3, #2
 800b938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b93c:	4b4a      	ldr	r3, [pc, #296]	; (800ba68 <HAL_SPI_MspInit+0x2c8>)
 800b93e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b942:	f003 0302 	and.w	r3, r3, #2
 800b946:	60bb      	str	r3, [r7, #8]
 800b948:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800b94a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b94e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b950:	2302      	movs	r3, #2
 800b952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b954:	2300      	movs	r3, #0
 800b956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b958:	2303      	movs	r3, #3
 800b95a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b95c:	2305      	movs	r3, #5
 800b95e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b960:	f107 031c 	add.w	r3, r7, #28
 800b964:	4619      	mov	r1, r3
 800b966:	4846      	ldr	r0, [pc, #280]	; (800ba80 <HAL_SPI_MspInit+0x2e0>)
 800b968:	f7f7 fdcc 	bl	8003504 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800b96c:	4b45      	ldr	r3, [pc, #276]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b96e:	4a46      	ldr	r2, [pc, #280]	; (800ba88 <HAL_SPI_MspInit+0x2e8>)
 800b970:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800b972:	4b44      	ldr	r3, [pc, #272]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b974:	2227      	movs	r2, #39	; 0x27
 800b976:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b978:	4b42      	ldr	r3, [pc, #264]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b97e:	4b41      	ldr	r3, [pc, #260]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b980:	2200      	movs	r2, #0
 800b982:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b984:	4b3f      	ldr	r3, [pc, #252]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b98a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b98c:	4b3d      	ldr	r3, [pc, #244]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b98e:	2200      	movs	r2, #0
 800b990:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b992:	4b3c      	ldr	r3, [pc, #240]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b994:	2200      	movs	r2, #0
 800b996:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800b998:	4b3a      	ldr	r3, [pc, #232]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b99a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b99e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b9a0:	4b38      	ldr	r3, [pc, #224]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b9a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b9a6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b9a8:	4b36      	ldr	r3, [pc, #216]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b9aa:	2204      	movs	r2, #4
 800b9ac:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b9ae:	4b35      	ldr	r3, [pc, #212]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800b9b4:	4b33      	ldr	r3, [pc, #204]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b9ba:	4b32      	ldr	r3, [pc, #200]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800b9c0:	4830      	ldr	r0, [pc, #192]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b9c2:	f7f5 fe99 	bl	80016f8 <HAL_DMA_Init>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <HAL_SPI_MspInit+0x230>
      Error_Handler();
 800b9cc:	f7ff fb2e 	bl	800b02c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a2c      	ldr	r2, [pc, #176]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b9d4:	67da      	str	r2, [r3, #124]	; 0x7c
 800b9d6:	4a2b      	ldr	r2, [pc, #172]	; (800ba84 <HAL_SPI_MspInit+0x2e4>)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800b9dc:	4b2b      	ldr	r3, [pc, #172]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800b9de:	4a2c      	ldr	r2, [pc, #176]	; (800ba90 <HAL_SPI_MspInit+0x2f0>)
 800b9e0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800b9e2:	4b2a      	ldr	r3, [pc, #168]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800b9e4:	2228      	movs	r2, #40	; 0x28
 800b9e6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b9e8:	4b28      	ldr	r3, [pc, #160]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800b9ea:	2240      	movs	r2, #64	; 0x40
 800b9ec:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b9ee:	4b27      	ldr	r3, [pc, #156]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b9f4:	4b25      	ldr	r3, [pc, #148]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800b9f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b9fa:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b9fc:	4b23      	ldr	r3, [pc, #140]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ba02:	4b22      	ldr	r3, [pc, #136]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800ba04:	2200      	movs	r2, #0
 800ba06:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800ba08:	4b20      	ldr	r3, [pc, #128]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800ba0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba0e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ba10:	4b1e      	ldr	r3, [pc, #120]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800ba12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ba16:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ba18:	4b1c      	ldr	r3, [pc, #112]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800ba1a:	2204      	movs	r2, #4
 800ba1c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800ba1e:	4b1b      	ldr	r3, [pc, #108]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800ba20:	2201      	movs	r2, #1
 800ba22:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800ba24:	4b19      	ldr	r3, [pc, #100]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800ba26:	2200      	movs	r2, #0
 800ba28:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800ba2a:	4b18      	ldr	r3, [pc, #96]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800ba30:	4816      	ldr	r0, [pc, #88]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800ba32:	f7f5 fe61 	bl	80016f8 <HAL_DMA_Init>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d001      	beq.n	800ba40 <HAL_SPI_MspInit+0x2a0>
      Error_Handler();
 800ba3c:	f7ff faf6 	bl	800b02c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a12      	ldr	r2, [pc, #72]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800ba44:	679a      	str	r2, [r3, #120]	; 0x78
 800ba46:	4a11      	ldr	r2, [pc, #68]	; (800ba8c <HAL_SPI_MspInit+0x2ec>)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	2100      	movs	r1, #0
 800ba50:	2024      	movs	r0, #36	; 0x24
 800ba52:	f7f5 fe1c 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800ba56:	2024      	movs	r0, #36	; 0x24
 800ba58:	f7f5 fe33 	bl	80016c2 <HAL_NVIC_EnableIRQ>
}
 800ba5c:	bf00      	nop
 800ba5e:	3730      	adds	r7, #48	; 0x30
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	40013000 	.word	0x40013000
 800ba68:	58024400 	.word	0x58024400
 800ba6c:	58020c00 	.word	0x58020c00
 800ba70:	58021800 	.word	0x58021800
 800ba74:	20000ac0 	.word	0x20000ac0
 800ba78:	40020088 	.word	0x40020088
 800ba7c:	40003800 	.word	0x40003800
 800ba80:	58020400 	.word	0x58020400
 800ba84:	20000948 	.word	0x20000948
 800ba88:	40020058 	.word	0x40020058
 800ba8c:	20000a48 	.word	0x20000a48
 800ba90:	40020070 	.word	0x40020070

0800ba94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba9a:	4b0a      	ldr	r3, [pc, #40]	; (800bac4 <HAL_MspInit+0x30>)
 800ba9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800baa0:	4a08      	ldr	r2, [pc, #32]	; (800bac4 <HAL_MspInit+0x30>)
 800baa2:	f043 0302 	orr.w	r3, r3, #2
 800baa6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800baaa:	4b06      	ldr	r3, [pc, #24]	; (800bac4 <HAL_MspInit+0x30>)
 800baac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bab0:	f003 0302 	and.w	r3, r3, #2
 800bab4:	607b      	str	r3, [r7, #4]
 800bab6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bab8:	bf00      	nop
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	58024400 	.word	0x58024400

0800bac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bac8:	b480      	push	{r7}
 800baca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800bacc:	bf00      	nop
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr

0800bad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bad6:	b480      	push	{r7}
 800bad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bada:	e7fe      	b.n	800bada <HardFault_Handler+0x4>

0800badc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800badc:	b480      	push	{r7}
 800bade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bae0:	e7fe      	b.n	800bae0 <MemManage_Handler+0x4>

0800bae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bae2:	b480      	push	{r7}
 800bae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bae6:	e7fe      	b.n	800bae6 <BusFault_Handler+0x4>

0800bae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bae8:	b480      	push	{r7}
 800baea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800baec:	e7fe      	b.n	800baec <UsageFault_Handler+0x4>

0800baee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800baee:	b480      	push	{r7}
 800baf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800baf2:	bf00      	nop
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bafc:	b480      	push	{r7}
 800bafe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bb00:	bf00      	nop
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bb0e:	bf00      	nop
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bb1c:	f7f4 fc4e 	bl	80003bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bb20:	bf00      	nop
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800bb28:	4802      	ldr	r0, [pc, #8]	; (800bb34 <DMA1_Stream0_IRQHandler+0x10>)
 800bb2a:	f7f6 fb85 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800bb2e:	bf00      	nop
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	200000a8 	.word	0x200000a8

0800bb38 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800bb3c:	4802      	ldr	r0, [pc, #8]	; (800bb48 <DMA1_Stream1_IRQHandler+0x10>)
 800bb3e:	f7f6 fb7b 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800bb42:	bf00      	nop
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	200006b8 	.word	0x200006b8

0800bb4c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800bb50:	4802      	ldr	r0, [pc, #8]	; (800bb5c <DMA1_Stream2_IRQHandler+0x10>)
 800bb52:	f7f6 fb71 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800bb56:	bf00      	nop
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20000730 	.word	0x20000730

0800bb60 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800bb64:	4802      	ldr	r0, [pc, #8]	; (800bb70 <DMA1_Stream3_IRQHandler+0x10>)
 800bb66:	f7f6 fb67 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800bb6a:	bf00      	nop
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20000948 	.word	0x20000948

0800bb74 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800bb78:	4802      	ldr	r0, [pc, #8]	; (800bb84 <DMA1_Stream4_IRQHandler+0x10>)
 800bb7a:	f7f6 fb5d 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800bb7e:	bf00      	nop
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	20000a48 	.word	0x20000a48

0800bb88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800bb8c:	4802      	ldr	r0, [pc, #8]	; (800bb98 <DMA1_Stream5_IRQHandler+0x10>)
 800bb8e:	f7f6 fb53 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800bb92:	bf00      	nop
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	20000ac0 	.word	0x20000ac0

0800bb9c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800bba0:	4802      	ldr	r0, [pc, #8]	; (800bbac <SPI1_IRQHandler+0x10>)
 800bba2:	f7fd f9bb 	bl	8008f1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800bba6:	bf00      	nop
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	200009c0 	.word	0x200009c0

0800bbb0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800bbb4:	4802      	ldr	r0, [pc, #8]	; (800bbc0 <SPI2_IRQHandler+0x10>)
 800bbb6:	f7fd f9b1 	bl	8008f1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800bbba:	bf00      	nop
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	200008c0 	.word	0x200008c0

0800bbc4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800bbc8:	4802      	ldr	r0, [pc, #8]	; (800bbd4 <SDMMC1_IRQHandler+0x10>)
 800bbca:	f7fb fe7b 	bl	80078c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800bbce:	bf00      	nop
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	20000840 	.word	0x20000840

0800bbd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800bbdc:	4b29      	ldr	r3, [pc, #164]	; (800bc84 <SystemInit+0xac>)
 800bbde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbe2:	4a28      	ldr	r2, [pc, #160]	; (800bc84 <SystemInit+0xac>)
 800bbe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bbe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800bbec:	4b26      	ldr	r3, [pc, #152]	; (800bc88 <SystemInit+0xb0>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a25      	ldr	r2, [pc, #148]	; (800bc88 <SystemInit+0xb0>)
 800bbf2:	f043 0301 	orr.w	r3, r3, #1
 800bbf6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bbf8:	4b23      	ldr	r3, [pc, #140]	; (800bc88 <SystemInit+0xb0>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800bbfe:	4b22      	ldr	r3, [pc, #136]	; (800bc88 <SystemInit+0xb0>)
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	4921      	ldr	r1, [pc, #132]	; (800bc88 <SystemInit+0xb0>)
 800bc04:	4b21      	ldr	r3, [pc, #132]	; (800bc8c <SystemInit+0xb4>)
 800bc06:	4013      	ands	r3, r2
 800bc08:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800bc0a:	4b1f      	ldr	r3, [pc, #124]	; (800bc88 <SystemInit+0xb0>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800bc10:	4b1d      	ldr	r3, [pc, #116]	; (800bc88 <SystemInit+0xb0>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800bc16:	4b1c      	ldr	r3, [pc, #112]	; (800bc88 <SystemInit+0xb0>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800bc1c:	4b1a      	ldr	r3, [pc, #104]	; (800bc88 <SystemInit+0xb0>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800bc22:	4b19      	ldr	r3, [pc, #100]	; (800bc88 <SystemInit+0xb0>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800bc28:	4b17      	ldr	r3, [pc, #92]	; (800bc88 <SystemInit+0xb0>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800bc2e:	4b16      	ldr	r3, [pc, #88]	; (800bc88 <SystemInit+0xb0>)
 800bc30:	2200      	movs	r2, #0
 800bc32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800bc34:	4b14      	ldr	r3, [pc, #80]	; (800bc88 <SystemInit+0xb0>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800bc3a:	4b13      	ldr	r3, [pc, #76]	; (800bc88 <SystemInit+0xb0>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800bc40:	4b11      	ldr	r3, [pc, #68]	; (800bc88 <SystemInit+0xb0>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800bc46:	4b10      	ldr	r3, [pc, #64]	; (800bc88 <SystemInit+0xb0>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bc4c:	4b0e      	ldr	r3, [pc, #56]	; (800bc88 <SystemInit+0xb0>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a0d      	ldr	r2, [pc, #52]	; (800bc88 <SystemInit+0xb0>)
 800bc52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800bc58:	4b0b      	ldr	r3, [pc, #44]	; (800bc88 <SystemInit+0xb0>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800bc5e:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <SystemInit+0xb8>)
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	4b0c      	ldr	r3, [pc, #48]	; (800bc94 <SystemInit+0xbc>)
 800bc64:	4013      	ands	r3, r2
 800bc66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc6a:	d202      	bcs.n	800bc72 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800bc6c:	4b0a      	ldr	r3, [pc, #40]	; (800bc98 <SystemInit+0xc0>)
 800bc6e:	2201      	movs	r2, #1
 800bc70:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bc72:	4b04      	ldr	r3, [pc, #16]	; (800bc84 <SystemInit+0xac>)
 800bc74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bc78:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800bc7a:	bf00      	nop
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	e000ed00 	.word	0xe000ed00
 800bc88:	58024400 	.word	0x58024400
 800bc8c:	eaf6ed7f 	.word	0xeaf6ed7f
 800bc90:	5c001000 	.word	0x5c001000
 800bc94:	ffff0000 	.word	0xffff0000
 800bc98:	51008108 	.word	0x51008108

0800bc9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800bc9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bcd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bca0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bca2:	e003      	b.n	800bcac <LoopCopyDataInit>

0800bca4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bca4:	4b0c      	ldr	r3, [pc, #48]	; (800bcd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bca6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bca8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bcaa:	3104      	adds	r1, #4

0800bcac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bcac:	480b      	ldr	r0, [pc, #44]	; (800bcdc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bcae:	4b0c      	ldr	r3, [pc, #48]	; (800bce0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bcb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bcb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bcb4:	d3f6      	bcc.n	800bca4 <CopyDataInit>
  ldr  r2, =_sbss
 800bcb6:	4a0b      	ldr	r2, [pc, #44]	; (800bce4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bcb8:	e002      	b.n	800bcc0 <LoopFillZerobss>

0800bcba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bcba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bcbc:	f842 3b04 	str.w	r3, [r2], #4

0800bcc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bcc0:	4b09      	ldr	r3, [pc, #36]	; (800bce8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bcc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bcc4:	d3f9      	bcc.n	800bcba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bcc6:	f7ff ff87 	bl	800bbd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bcca:	f000 f811 	bl	800bcf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bcce:	f7ff f885 	bl	800addc <main>
  bx  lr    
 800bcd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bcd4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800bcd8:	0800bd94 	.word	0x0800bd94
  ldr  r0, =_sdata
 800bcdc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bce0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800bce4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800bce8:	20000b38 	.word	0x20000b38

0800bcec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bcec:	e7fe      	b.n	800bcec <ADC3_IRQHandler>
	...

0800bcf0 <__libc_init_array>:
 800bcf0:	b570      	push	{r4, r5, r6, lr}
 800bcf2:	4e0d      	ldr	r6, [pc, #52]	; (800bd28 <__libc_init_array+0x38>)
 800bcf4:	4c0d      	ldr	r4, [pc, #52]	; (800bd2c <__libc_init_array+0x3c>)
 800bcf6:	1ba4      	subs	r4, r4, r6
 800bcf8:	10a4      	asrs	r4, r4, #2
 800bcfa:	2500      	movs	r5, #0
 800bcfc:	42a5      	cmp	r5, r4
 800bcfe:	d109      	bne.n	800bd14 <__libc_init_array+0x24>
 800bd00:	4e0b      	ldr	r6, [pc, #44]	; (800bd30 <__libc_init_array+0x40>)
 800bd02:	4c0c      	ldr	r4, [pc, #48]	; (800bd34 <__libc_init_array+0x44>)
 800bd04:	f000 f820 	bl	800bd48 <_init>
 800bd08:	1ba4      	subs	r4, r4, r6
 800bd0a:	10a4      	asrs	r4, r4, #2
 800bd0c:	2500      	movs	r5, #0
 800bd0e:	42a5      	cmp	r5, r4
 800bd10:	d105      	bne.n	800bd1e <__libc_init_array+0x2e>
 800bd12:	bd70      	pop	{r4, r5, r6, pc}
 800bd14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd18:	4798      	blx	r3
 800bd1a:	3501      	adds	r5, #1
 800bd1c:	e7ee      	b.n	800bcfc <__libc_init_array+0xc>
 800bd1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd22:	4798      	blx	r3
 800bd24:	3501      	adds	r5, #1
 800bd26:	e7f2      	b.n	800bd0e <__libc_init_array+0x1e>
 800bd28:	0800bd8c 	.word	0x0800bd8c
 800bd2c:	0800bd8c 	.word	0x0800bd8c
 800bd30:	0800bd8c 	.word	0x0800bd8c
 800bd34:	0800bd90 	.word	0x0800bd90

0800bd38 <memset>:
 800bd38:	4402      	add	r2, r0
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d100      	bne.n	800bd42 <memset+0xa>
 800bd40:	4770      	bx	lr
 800bd42:	f803 1b01 	strb.w	r1, [r3], #1
 800bd46:	e7f9      	b.n	800bd3c <memset+0x4>

0800bd48 <_init>:
 800bd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd4a:	bf00      	nop
 800bd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd4e:	bc08      	pop	{r3}
 800bd50:	469e      	mov	lr, r3
 800bd52:	4770      	bx	lr

0800bd54 <_fini>:
 800bd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd56:	bf00      	nop
 800bd58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd5a:	bc08      	pop	{r3}
 800bd5c:	469e      	mov	lr, r3
 800bd5e:	4770      	bx	lr

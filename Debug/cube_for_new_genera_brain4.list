
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001206c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08012308  08012308  00022308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012890  08012890  00030080  2**0
                  CONTENTS
  4 .ARM          00000000  08012890  08012890  00030080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012890  08012890  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012890  08012890  00022890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012894  08012894  00022894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08012898  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ffdc  20000080  08012918  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2001005c  08012918  0004005c  2**0
                  ALLOC
 11 .RAM_D1       00061a80  24000000  24000000  00040000  2**5
                  ALLOC
 12 .RAM_D2       00003840  30000000  30000000  00040000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 15 .debug_info   000420c5  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00006bff  00000000  00000000  00072173  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00002178  00000000  00000000  00078d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001ed8  00000000  00000000  0007aef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003f407  00000000  00000000  0007cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   000258b5  00000000  00000000  000bc1cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    00178879  00000000  00000000  000e1a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  0025a2fd  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000090c8  00000000  00000000  0025a378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000080 	.word	0x20000080
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080122ec 	.word	0x080122ec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000084 	.word	0x20000084
 80002d4:	080122ec 	.word	0x080122ec

080002d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002de:	2003      	movs	r0, #3
 80002e0:	f001 fc0c 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80002e4:	f005 f8bc 	bl	8005460 <HAL_RCC_GetSysClockFreq>
 80002e8:	4601      	mov	r1, r0
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <HAL_Init+0x68>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	f003 030f 	and.w	r3, r3, #15
 80002f4:	4a13      	ldr	r2, [pc, #76]	; (8000344 <HAL_Init+0x6c>)
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	f003 031f 	and.w	r3, r3, #31
 80002fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000300:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_Init+0x68>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 030f 	and.w	r3, r3, #15
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_Init+0x6c>)
 800030c:	5cd3      	ldrb	r3, [r2, r3]
 800030e:	f003 031f 	and.w	r3, r3, #31
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	fa22 f303 	lsr.w	r3, r2, r3
 8000318:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <HAL_Init+0x70>)
 800031a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800031c:	4a0b      	ldr	r2, [pc, #44]	; (800034c <HAL_Init+0x74>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f814 	bl	8000350 <HAL_InitTick>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800032e:	2301      	movs	r3, #1
 8000330:	e002      	b.n	8000338 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000332:	f010 fb1f 	bl	8010974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000336:	2300      	movs	r3, #0
}
 8000338:	4618      	mov	r0, r3
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	58024400 	.word	0x58024400
 8000344:	080127ac 	.word	0x080127ac
 8000348:	20000014 	.word	0x20000014
 800034c:	20000010 	.word	0x20000010

08000350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <HAL_InitTick+0x60>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d101      	bne.n	8000364 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000360:	2301      	movs	r3, #1
 8000362:	e021      	b.n	80003a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <HAL_InitTick+0x64>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <HAL_InitTick+0x60>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	4619      	mov	r1, r3
 800036e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000372:	fbb3 f3f1 	udiv	r3, r3, r1
 8000376:	fbb2 f3f3 	udiv	r3, r2, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f001 fbf1 	bl	8001b62 <HAL_SYSTICK_Config>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000386:	2301      	movs	r3, #1
 8000388:	e00e      	b.n	80003a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b0f      	cmp	r3, #15
 800038e:	d80a      	bhi.n	80003a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000390:	2200      	movs	r2, #0
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000398:	f001 fbbb 	bl	8001b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800039c:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <HAL_InitTick+0x68>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003a2:	2300      	movs	r3, #0
 80003a4:	e000      	b.n	80003a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80003a6:	2301      	movs	r3, #1
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000004 	.word	0x20000004
 80003b4:	20000010 	.word	0x20000010
 80003b8:	20000000 	.word	0x20000000

080003bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <HAL_IncTick+0x20>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_IncTick+0x24>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4413      	add	r3, r2
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <HAL_IncTick+0x24>)
 80003ce:	6013      	str	r3, [r2, #0]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000004 	.word	0x20000004
 80003e0:	200002dc 	.word	0x200002dc

080003e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  return uwTick;
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <HAL_GetTick+0x14>)
 80003ea:	681b      	ldr	r3, [r3, #0]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	200002dc 	.word	0x200002dc

080003fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000404:	f7ff ffee 	bl	80003e4 <HAL_GetTick>
 8000408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000414:	d005      	beq.n	8000422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <HAL_Delay+0x40>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	461a      	mov	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4413      	add	r3, r2
 8000420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000422:	bf00      	nop
 8000424:	f7ff ffde 	bl	80003e4 <HAL_GetTick>
 8000428:	4602      	mov	r2, r0
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	429a      	cmp	r2, r3
 8000432:	d8f7      	bhi.n	8000424 <HAL_Delay+0x28>
  {
  }
}
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000004 	.word	0x20000004

08000440 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <HAL_GetREVID+0x14>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	0c1b      	lsrs	r3, r3, #16
}
 800044a:	4618      	mov	r0, r3
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	5c001000 	.word	0x5c001000

08000458 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <HAL_SetFMCMemorySwappingConfig+0x24>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8000468:	4904      	ldr	r1, [pc, #16]	; (800047c <HAL_SetFMCMemorySwappingConfig+0x24>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4313      	orrs	r3, r2
 800046e:	600b      	str	r3, [r1, #0]
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	52004000 	.word	0x52004000

08000480 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	431a      	orrs	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	609a      	str	r2, [r3, #8]
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b083      	sub	sp, #12
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
 80004ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	431a      	orrs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	609a      	str	r2, [r3, #8]
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80004dc:	4618      	mov	r0, r3
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80004e8:	b490      	push	{r4, r7}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
 80004f4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	3360      	adds	r3, #96	; 0x60
 80004fa:	461a      	mov	r2, r3
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	4413      	add	r3, r2
 8000502:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000504:	6823      	ldr	r3, [r4, #0]
 8000506:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	430b      	orrs	r3, r1
 8000514:	4313      	orrs	r3, r2
 8000516:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bc90      	pop	{r4, r7}
 8000520:	4770      	bx	lr

08000522 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000522:	b480      	push	{r7}
 8000524:	b085      	sub	sp, #20
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	f003 031f 	and.w	r3, r3, #31
 800053c:	6879      	ldr	r1, [r7, #4]
 800053e:	fa01 f303 	lsl.w	r3, r1, r3
 8000542:	431a      	orrs	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	611a      	str	r2, [r3, #16]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000554:	b490      	push	{r4, r7}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3360      	adds	r3, #96	; 0x60
 8000564:	461a      	mov	r2, r3
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4313      	orrs	r3, r2
 8000578:	6023      	str	r3, [r4, #0]
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bc90      	pop	{r4, r7}
 8000582:	4770      	bx	lr

08000584 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000594:	2b00      	cmp	r3, #0
 8000596:	d101      	bne.n	800059c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000598:	2301      	movs	r3, #1
 800059a:	e000      	b.n	800059e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80005aa:	b490      	push	{r4, r7}
 80005ac:	b084      	sub	sp, #16
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	3330      	adds	r3, #48	; 0x30
 80005ba:	461a      	mov	r2, r3
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	0a1b      	lsrs	r3, r3, #8
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	f003 030c 	and.w	r3, r3, #12
 80005c6:	4413      	add	r3, r2
 80005c8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80005ca:	6822      	ldr	r2, [r4, #0]
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	f003 031f 	and.w	r3, r3, #31
 80005d2:	211f      	movs	r1, #31
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	43db      	mvns	r3, r3
 80005da:	401a      	ands	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	0e9b      	lsrs	r3, r3, #26
 80005e0:	f003 011f 	and.w	r1, r3, #31
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	f003 031f 	and.w	r3, r3, #31
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	4313      	orrs	r3, r2
 80005f0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc90      	pop	{r4, r7}
 80005fa:	4770      	bx	lr

080005fc <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	f023 0203 	bic.w	r2, r3, #3
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	431a      	orrs	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60da      	str	r2, [r3, #12]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000622:	b490      	push	{r4, r7}
 8000624:	b084      	sub	sp, #16
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3314      	adds	r3, #20
 8000632:	461a      	mov	r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	0e5b      	lsrs	r3, r3, #25
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	4413      	add	r3, r2
 8000640:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000642:	6822      	ldr	r2, [r4, #0]
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	0d1b      	lsrs	r3, r3, #20
 8000648:	f003 031f 	and.w	r3, r3, #31
 800064c:	2107      	movs	r1, #7
 800064e:	fa01 f303 	lsl.w	r3, r1, r3
 8000652:	43db      	mvns	r3, r3
 8000654:	401a      	ands	r2, r3
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	0d1b      	lsrs	r3, r3, #20
 800065a:	f003 031f 	and.w	r3, r3, #31
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	fa01 f303 	lsl.w	r3, r1, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bc90      	pop	{r4, r7}
 8000670:	4770      	bx	lr
	...

08000674 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800068c:	43db      	mvns	r3, r3
 800068e:	401a      	ands	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f003 0318 	and.w	r3, r3, #24
 8000696:	4908      	ldr	r1, [pc, #32]	; (80006b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000698:	40d9      	lsrs	r1, r3
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	400b      	ands	r3, r1
 800069e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80006a2:	431a      	orrs	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	000fffff 	.word	0x000fffff

080006bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	f003 031f 	and.w	r3, r3, #31
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	689a      	ldr	r2, [r3, #8]
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	6093      	str	r3, [r2, #8]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	5fffffc0 	.word	0x5fffffc0

080006fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800070c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000710:	d101      	bne.n	8000716 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000712:	2301      	movs	r3, #1
 8000714:	e000      	b.n	8000718 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	689a      	ldr	r2, [r3, #8]
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <LL_ADC_EnableInternalRegulator+0x24>)
 8000732:	4013      	ands	r3, r2
 8000734:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	6fffffc0 	.word	0x6fffffc0

0800074c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000760:	d101      	bne.n	8000766 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <LL_ADC_Enable+0x24>)
 8000782:	4013      	ands	r3, r2
 8000784:	f043 0201 	orr.w	r2, r3, #1
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	7fffffc0 	.word	0x7fffffc0

0800079c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d101      	bne.n	80007b4 <LL_ADC_IsEnabled+0x18>
 80007b0:	2301      	movs	r3, #1
 80007b2:	e000      	b.n	80007b6 <LL_ADC_IsEnabled+0x1a>
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689a      	ldr	r2, [r3, #8]
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <LL_ADC_REG_StartConversion+0x24>)
 80007d2:	4013      	ands	r3, r2
 80007d4:	f043 0204 	orr.w	r2, r3, #4
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	7fffffc0 	.word	0x7fffffc0

080007ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d101      	bne.n	8000804 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000800:	2301      	movs	r3, #1
 8000802:	e000      	b.n	8000806 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	2b08      	cmp	r3, #8
 8000824:	d101      	bne.n	800082a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000826:	2301      	movs	r3, #1
 8000828:	e000      	b.n	800082c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800082a:	2300      	movs	r3, #0
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e18e      	b.n	8000b70 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800085c:	2b00      	cmp	r3, #0
 800085e:	d109      	bne.n	8000874 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f00d fd93 	bl	800e38c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff3f 	bl	80006fc <LL_ADC_IsDeepPowerDownEnabled>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d004      	beq.n	800088e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff25 	bl	80006d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff5a 	bl	800074c <LL_ADC_IsInternalRegulatorEnabled>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d113      	bne.n	80008c6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff3e 	bl	8000724 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80008a8:	4b9a      	ldr	r3, [pc, #616]	; (8000b14 <HAL_ADC_Init+0x2dc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	099b      	lsrs	r3, r3, #6
 80008ae:	4a9a      	ldr	r2, [pc, #616]	; (8000b18 <HAL_ADC_Init+0x2e0>)
 80008b0:	fba2 2303 	umull	r2, r3, r2, r3
 80008b4:	099b      	lsrs	r3, r3, #6
 80008b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80008b8:	e002      	b.n	80008c0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	3b01      	subs	r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1f9      	bne.n	80008ba <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ff3e 	bl	800074c <LL_ADC_IsInternalRegulatorEnabled>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10d      	bne.n	80008f2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008da:	f043 0210 	orr.w	r2, r3, #16
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e6:	f043 0201 	orr.w	r2, r3, #1
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff78 	bl	80007ec <LL_ADC_REG_IsConversionOngoing>
 80008fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8129 	bne.w	8000b5e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	2b00      	cmp	r3, #0
 8000910:	f040 8125 	bne.w	8000b5e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000918:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800091c:	f043 0202 	orr.w	r2, r3, #2
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff37 	bl	800079c <LL_ADC_IsEnabled>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d136      	bne.n	80009a2 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a78      	ldr	r2, [pc, #480]	; (8000b1c <HAL_ADC_Init+0x2e4>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d004      	beq.n	8000948 <HAL_ADC_Init+0x110>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a77      	ldr	r2, [pc, #476]	; (8000b20 <HAL_ADC_Init+0x2e8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d10e      	bne.n	8000966 <HAL_ADC_Init+0x12e>
 8000948:	4874      	ldr	r0, [pc, #464]	; (8000b1c <HAL_ADC_Init+0x2e4>)
 800094a:	f7ff ff27 	bl	800079c <LL_ADC_IsEnabled>
 800094e:	4604      	mov	r4, r0
 8000950:	4873      	ldr	r0, [pc, #460]	; (8000b20 <HAL_ADC_Init+0x2e8>)
 8000952:	f7ff ff23 	bl	800079c <LL_ADC_IsEnabled>
 8000956:	4603      	mov	r3, r0
 8000958:	4323      	orrs	r3, r4
 800095a:	2b00      	cmp	r3, #0
 800095c:	bf0c      	ite	eq
 800095e:	2301      	moveq	r3, #1
 8000960:	2300      	movne	r3, #0
 8000962:	b2db      	uxtb	r3, r3
 8000964:	e008      	b.n	8000978 <HAL_ADC_Init+0x140>
 8000966:	486f      	ldr	r0, [pc, #444]	; (8000b24 <HAL_ADC_Init+0x2ec>)
 8000968:	f7ff ff18 	bl	800079c <LL_ADC_IsEnabled>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	bf0c      	ite	eq
 8000972:	2301      	moveq	r3, #1
 8000974:	2300      	movne	r3, #0
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d012      	beq.n	80009a2 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a66      	ldr	r2, [pc, #408]	; (8000b1c <HAL_ADC_Init+0x2e4>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d004      	beq.n	8000990 <HAL_ADC_Init+0x158>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a65      	ldr	r2, [pc, #404]	; (8000b20 <HAL_ADC_Init+0x2e8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d101      	bne.n	8000994 <HAL_ADC_Init+0x15c>
 8000990:	4a65      	ldr	r2, [pc, #404]	; (8000b28 <HAL_ADC_Init+0x2f0>)
 8000992:	e000      	b.n	8000996 <HAL_ADC_Init+0x15e>
 8000994:	4a65      	ldr	r2, [pc, #404]	; (8000b2c <HAL_ADC_Init+0x2f4>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	4619      	mov	r1, r3
 800099c:	4610      	mov	r0, r2
 800099e:	f7ff fd6f 	bl	8000480 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80009a2:	f7ff fd4d 	bl	8000440 <HAL_GetREVID>
 80009a6:	4602      	mov	r2, r0
 80009a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d914      	bls.n	80009da <HAL_ADC_Init+0x1a2>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	2b10      	cmp	r3, #16
 80009b6:	d110      	bne.n	80009da <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	7d5b      	ldrb	r3, [r3, #21]
 80009bc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009c2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80009c8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7f1b      	ldrb	r3, [r3, #28]
 80009ce:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80009d0:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009d2:	f043 030c 	orr.w	r3, r3, #12
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	e00d      	b.n	80009f6 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7d5b      	ldrb	r3, [r3, #21]
 80009de:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009e4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80009ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7f1b      	ldrb	r3, [r3, #28]
 80009f0:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009f2:	4313      	orrs	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7f1b      	ldrb	r3, [r3, #28]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d106      	bne.n	8000a0c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6a1b      	ldr	r3, [r3, #32]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	045b      	lsls	r3, r3, #17
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d009      	beq.n	8000a28 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a18:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	68da      	ldr	r2, [r3, #12]
 8000a2e:	4b40      	ldr	r3, [pc, #256]	; (8000b30 <HAL_ADC_Init+0x2f8>)
 8000a30:	4013      	ands	r3, r2
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	6812      	ldr	r2, [r2, #0]
 8000a36:	69b9      	ldr	r1, [r7, #24]
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fed3 	bl	80007ec <LL_ADC_REG_IsConversionOngoing>
 8000a46:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fee0 	bl	8000812 <LL_ADC_INJ_IsConversionOngoing>
 8000a52:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d14a      	bne.n	8000af0 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d147      	bne.n	8000af0 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7d1b      	ldrb	r3, [r3, #20]
 8000a64:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	68da      	ldr	r2, [r3, #12]
 8000a74:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <HAL_ADC_Init+0x2fc>)
 8000a76:	4013      	ands	r3, r2
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	6812      	ldr	r2, [r2, #0]
 8000a7c:	69b9      	ldr	r1, [r7, #24]
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d11b      	bne.n	8000ac4 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a90:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	691a      	ldr	r2, [r3, #16]
 8000a98:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <HAL_ADC_Init+0x300>)
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000aa0:	3a01      	subs	r2, #1
 8000aa2:	0411      	lsls	r1, r2, #16
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000aa8:	4311      	orrs	r1, r2
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000aae:	4311      	orrs	r1, r2
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f042 0201 	orr.w	r2, r2, #1
 8000ac0:	611a      	str	r2, [r3, #16]
 8000ac2:	e007      	b.n	8000ad4 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	691a      	ldr	r2, [r3, #16]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f022 0201 	bic.w	r2, r2, #1
 8000ad2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f000 fd3e 	bl	800156c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d121      	bne.n	8000b3c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f023 010f 	bic.w	r1, r3, #15
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	1e5a      	subs	r2, r3, #1
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b10:	e01c      	b.n	8000b4c <HAL_ADC_Init+0x314>
 8000b12:	bf00      	nop
 8000b14:	20000010 	.word	0x20000010
 8000b18:	053e2d63 	.word	0x053e2d63
 8000b1c:	40022000 	.word	0x40022000
 8000b20:	40022100 	.word	0x40022100
 8000b24:	58026000 	.word	0x58026000
 8000b28:	40022300 	.word	0x40022300
 8000b2c:	58026300 	.word	0x58026300
 8000b30:	fff0c003 	.word	0xfff0c003
 8000b34:	ffffbffc 	.word	0xffffbffc
 8000b38:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f022 020f 	bic.w	r2, r2, #15
 8000b4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b50:	f023 0303 	bic.w	r3, r3, #3
 8000b54:	f043 0201 	orr.w	r2, r3, #1
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	655a      	str	r2, [r3, #84]	; 0x54
 8000b5c:	e007      	b.n	8000b6e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b62:	f043 0210 	orr.w	r2, r3, #16
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3724      	adds	r7, #36	; 0x24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd90      	pop	{r4, r7, pc}

08000b78 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a55      	ldr	r2, [pc, #340]	; (8000ce0 <HAL_ADC_Start_DMA+0x168>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d004      	beq.n	8000b98 <HAL_ADC_Start_DMA+0x20>
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a54      	ldr	r2, [pc, #336]	; (8000ce4 <HAL_ADC_Start_DMA+0x16c>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d101      	bne.n	8000b9c <HAL_ADC_Start_DMA+0x24>
 8000b98:	4b53      	ldr	r3, [pc, #332]	; (8000ce8 <HAL_ADC_Start_DMA+0x170>)
 8000b9a:	e000      	b.n	8000b9e <HAL_ADC_Start_DMA+0x26>
 8000b9c:	4b53      	ldr	r3, [pc, #332]	; (8000cec <HAL_ADC_Start_DMA+0x174>)
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fd8c 	bl	80006bc <LL_ADC_GetMultimode>
 8000ba4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fe1e 	bl	80007ec <LL_ADC_REG_IsConversionOngoing>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f040 808c 	bne.w	8000cd0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d101      	bne.n	8000bc6 <HAL_ADC_Start_DMA+0x4e>
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	e087      	b.n	8000cd6 <HAL_ADC_Start_DMA+0x15e>
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d005      	beq.n	8000be0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	2b05      	cmp	r3, #5
 8000bd8:	d002      	beq.n	8000be0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	2b09      	cmp	r3, #9
 8000bde:	d170      	bne.n	8000cc2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f000 fbab 	bl	800133c <ADC_Enable>
 8000be6:	4603      	mov	r3, r0
 8000be8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000bea:	7dfb      	ldrb	r3, [r7, #23]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d163      	bne.n	8000cb8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000bf4:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <HAL_ADC_Start_DMA+0x178>)
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a37      	ldr	r2, [pc, #220]	; (8000ce4 <HAL_ADC_Start_DMA+0x16c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d002      	beq.n	8000c10 <HAL_ADC_Start_DMA+0x98>
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	e000      	b.n	8000c12 <HAL_ADC_Start_DMA+0x9a>
 8000c10:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <HAL_ADC_Start_DMA+0x168>)
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d002      	beq.n	8000c20 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d105      	bne.n	8000c2c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d006      	beq.n	8000c46 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3c:	f023 0206 	bic.w	r2, r3, #6
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	659a      	str	r2, [r3, #88]	; 0x58
 8000c44:	e002      	b.n	8000c4c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c50:	4a28      	ldr	r2, [pc, #160]	; (8000cf4 <HAL_ADC_Start_DMA+0x17c>)
 8000c52:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <HAL_ADC_Start_DMA+0x180>)
 8000c5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c60:	4a26      	ldr	r2, [pc, #152]	; (8000cfc <HAL_ADC_Start_DMA+0x184>)
 8000c62:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	221c      	movs	r2, #28
 8000c6a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f042 0210 	orr.w	r2, r2, #16
 8000c82:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4610      	mov	r0, r2
 8000c90:	f7ff fcb4 	bl	80005fc <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3340      	adds	r3, #64	; 0x40
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	68ba      	ldr	r2, [r7, #8]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f001 fb3e 	bl	8002324 <HAL_DMA_Start_IT>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fd87 	bl	80007c4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8000cb6:	e00d      	b.n	8000cd4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8000cc0:	e008      	b.n	8000cd4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000cce:	e001      	b.n	8000cd4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40022000 	.word	0x40022000
 8000ce4:	40022100 	.word	0x40022100
 8000ce8:	40022300 	.word	0x40022300
 8000cec:	58026300 	.word	0x58026300
 8000cf0:	fffff0fe 	.word	0xfffff0fe
 8000cf4:	08001445 	.word	0x08001445
 8000cf8:	0800151d 	.word	0x0800151d
 8000cfc:	08001539 	.word	0x08001539

08000d00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b099      	sub	sp, #100	; 0x64
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	4a99      	ldr	r2, [pc, #612]	; (8000f94 <HAL_ADC_ConfigChannel+0x280>)
 8000d2e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <HAL_ADC_ConfigChannel+0x2a>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e2e6      	b.n	800130c <HAL_ADC_ConfigChannel+0x5f8>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fd4e 	bl	80007ec <LL_ADC_REG_IsConversionOngoing>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 82cb 	bne.w	80012ee <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d108      	bne.n	8000d76 <HAL_ADC_ConfigChannel+0x62>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	0e9b      	lsrs	r3, r3, #26
 8000d6a:	f003 031f 	and.w	r3, r3, #31
 8000d6e:	2201      	movs	r2, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	e00f      	b.n	8000d96 <HAL_ADC_ConfigChannel+0x82>
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d7e:	fa93 f3a3 	rbit	r3, r3
 8000d82:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d86:	fab3 f383 	clz	r3, r3
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	f003 031f 	and.w	r3, r3, #31
 8000d90:	2201      	movs	r2, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	6812      	ldr	r2, [r2, #0]
 8000d9a:	69d1      	ldr	r1, [r2, #28]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	430b      	orrs	r3, r1
 8000da2:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	6859      	ldr	r1, [r3, #4]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	f7ff fbfa 	bl	80005aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fd16 	bl	80007ec <LL_ADC_REG_IsConversionOngoing>
 8000dc0:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fd23 	bl	8000812 <LL_ADC_INJ_IsConversionOngoing>
 8000dcc:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f040 80b3 	bne.w	8000f3c <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f040 80af 	bne.w	8000f3c <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	6819      	ldr	r1, [r3, #0]
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	461a      	mov	r2, r3
 8000dec:	f7ff fc19 	bl	8000622 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000df0:	4b69      	ldr	r3, [pc, #420]	; (8000f98 <HAL_ADC_ConfigChannel+0x284>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000dfc:	d10b      	bne.n	8000e16 <HAL_ADC_ConfigChannel+0x102>
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	695a      	ldr	r2, [r3, #20]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	e01d      	b.n	8000e52 <HAL_ADC_ConfigChannel+0x13e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10b      	bne.n	8000e3c <HAL_ADC_ConfigChannel+0x128>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	695a      	ldr	r2, [r3, #20]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	e00a      	b.n	8000e52 <HAL_ADC_ConfigChannel+0x13e>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	695a      	ldr	r2, [r3, #20]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d027      	beq.n	8000eac <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6818      	ldr	r0, [r3, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	6919      	ldr	r1, [r3, #16]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e6a:	f7ff fb3d 	bl	80004e8 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	6919      	ldr	r1, [r3, #16]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	7e5b      	ldrb	r3, [r3, #25]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d102      	bne.n	8000e84 <HAL_ADC_ConfigChannel+0x170>
 8000e7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000e82:	e000      	b.n	8000e86 <HAL_ADC_ConfigChannel+0x172>
 8000e84:	2300      	movs	r3, #0
 8000e86:	461a      	mov	r2, r3
 8000e88:	f7ff fb64 	bl	8000554 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	6919      	ldr	r1, [r3, #16]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	7e1b      	ldrb	r3, [r3, #24]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d102      	bne.n	8000ea2 <HAL_ADC_ConfigChannel+0x18e>
 8000e9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ea0:	e000      	b.n	8000ea4 <HAL_ADC_ConfigChannel+0x190>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	f7ff fb3c 	bl	8000522 <LL_ADC_SetDataRightShift>
 8000eaa:	e047      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	069b      	lsls	r3, r3, #26
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d107      	bne.n	8000ed0 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ece:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000ed6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	069b      	lsls	r3, r3, #26
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d107      	bne.n	8000ef4 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ef2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	069b      	lsls	r3, r3, #26
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d107      	bne.n	8000f18 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f16:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	069b      	lsls	r3, r3, #26
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d107      	bne.n	8000f3c <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f3a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fc2b 	bl	800079c <LL_ADC_IsEnabled>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f040 81d9 	bne.w	8001300 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	6819      	ldr	r1, [r3, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	f7ff fb8a 	bl	8000674 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <HAL_ADC_ConfigChannel+0x280>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	f040 8101 	bne.w	800116e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10f      	bne.n	8000f9c <HAL_ADC_ConfigChannel+0x288>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	0e9b      	lsrs	r3, r3, #26
 8000f82:	3301      	adds	r3, #1
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	2b09      	cmp	r3, #9
 8000f8a:	bf94      	ite	ls
 8000f8c:	2301      	movls	r3, #1
 8000f8e:	2300      	movhi	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	e016      	b.n	8000fc2 <HAL_ADC_ConfigChannel+0x2ae>
 8000f94:	47ff0000 	.word	0x47ff0000
 8000f98:	5c001000 	.word	0x5c001000
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fa4:	fa93 f3a3 	rbit	r3, r3
 8000fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fac:	fab3 f383 	clz	r3, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	f003 031f 	and.w	r3, r3, #31
 8000fb8:	2b09      	cmp	r3, #9
 8000fba:	bf94      	ite	ls
 8000fbc:	2301      	movls	r3, #1
 8000fbe:	2300      	movhi	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d064      	beq.n	8001090 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d107      	bne.n	8000fe2 <HAL_ADC_ConfigChannel+0x2ce>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	0e9b      	lsrs	r3, r3, #26
 8000fd8:	3301      	adds	r3, #1
 8000fda:	069b      	lsls	r3, r3, #26
 8000fdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fe0:	e00e      	b.n	8001000 <HAL_ADC_ConfigChannel+0x2ec>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff2:	fab3 f383 	clz	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	069b      	lsls	r3, r3, #26
 8000ffc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001008:	2b00      	cmp	r3, #0
 800100a:	d109      	bne.n	8001020 <HAL_ADC_ConfigChannel+0x30c>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	0e9b      	lsrs	r3, r3, #26
 8001012:	3301      	adds	r3, #1
 8001014:	f003 031f 	and.w	r3, r3, #31
 8001018:	2101      	movs	r1, #1
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	e010      	b.n	8001042 <HAL_ADC_ConfigChannel+0x32e>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001028:	fa93 f3a3 	rbit	r3, r3
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800102e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001030:	fab3 f383 	clz	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	3301      	adds	r3, #1
 8001038:	f003 031f 	and.w	r3, r3, #31
 800103c:	2101      	movs	r1, #1
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	ea42 0103 	orr.w	r1, r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10a      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x354>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	0e9b      	lsrs	r3, r3, #26
 8001058:	3301      	adds	r3, #1
 800105a:	f003 021f 	and.w	r2, r3, #31
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	051b      	lsls	r3, r3, #20
 8001066:	e011      	b.n	800108c <HAL_ADC_ConfigChannel+0x378>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001070:	fa93 f3a3 	rbit	r3, r3
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	fab3 f383 	clz	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	3301      	adds	r3, #1
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800108c:	430b      	orrs	r3, r1
 800108e:	e069      	b.n	8001164 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001098:	2b00      	cmp	r3, #0
 800109a:	d107      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x398>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0e9b      	lsrs	r3, r3, #26
 80010a2:	3301      	adds	r3, #1
 80010a4:	069b      	lsls	r3, r3, #26
 80010a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010aa:	e00e      	b.n	80010ca <HAL_ADC_ConfigChannel+0x3b6>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	61fb      	str	r3, [r7, #28]
  return result;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fab3 f383 	clz	r3, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	069b      	lsls	r3, r3, #26
 80010c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <HAL_ADC_ConfigChannel+0x3d6>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	0e9b      	lsrs	r3, r3, #26
 80010dc:	3301      	adds	r3, #1
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	2101      	movs	r1, #1
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	e010      	b.n	800110c <HAL_ADC_ConfigChannel+0x3f8>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	617b      	str	r3, [r7, #20]
  return result;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fab3 f383 	clz	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	3301      	adds	r3, #1
 8001102:	f003 031f 	and.w	r3, r3, #31
 8001106:	2101      	movs	r1, #1
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	ea42 0103 	orr.w	r1, r2, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10d      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x424>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0e9b      	lsrs	r3, r3, #26
 8001122:	3301      	adds	r3, #1
 8001124:	f003 021f 	and.w	r2, r3, #31
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	3b1e      	subs	r3, #30
 8001130:	051b      	lsls	r3, r3, #20
 8001132:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001136:	e014      	b.n	8001162 <HAL_ADC_ConfigChannel+0x44e>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	60fb      	str	r3, [r7, #12]
  return result;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	fab3 f383 	clz	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	3301      	adds	r3, #1
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	3b1e      	subs	r3, #30
 800115c:	051b      	lsls	r3, r3, #20
 800115e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001162:	430b      	orrs	r3, r1
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	6892      	ldr	r2, [r2, #8]
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fa5a 	bl	8000622 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f280 80c4 	bge.w	8001300 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a65      	ldr	r2, [pc, #404]	; (8001314 <HAL_ADC_ConfigChannel+0x600>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d004      	beq.n	800118c <HAL_ADC_ConfigChannel+0x478>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a64      	ldr	r2, [pc, #400]	; (8001318 <HAL_ADC_ConfigChannel+0x604>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d101      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x47c>
 800118c:	4b63      	ldr	r3, [pc, #396]	; (800131c <HAL_ADC_ConfigChannel+0x608>)
 800118e:	e000      	b.n	8001192 <HAL_ADC_ConfigChannel+0x47e>
 8001190:	4b63      	ldr	r3, [pc, #396]	; (8001320 <HAL_ADC_ConfigChannel+0x60c>)
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f99a 	bl	80004cc <LL_ADC_GetCommonPathInternalCh>
 8001198:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a5d      	ldr	r2, [pc, #372]	; (8001314 <HAL_ADC_ConfigChannel+0x600>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d004      	beq.n	80011ae <HAL_ADC_ConfigChannel+0x49a>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a5b      	ldr	r2, [pc, #364]	; (8001318 <HAL_ADC_ConfigChannel+0x604>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d10e      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x4b8>
 80011ae:	4859      	ldr	r0, [pc, #356]	; (8001314 <HAL_ADC_ConfigChannel+0x600>)
 80011b0:	f7ff faf4 	bl	800079c <LL_ADC_IsEnabled>
 80011b4:	4604      	mov	r4, r0
 80011b6:	4858      	ldr	r0, [pc, #352]	; (8001318 <HAL_ADC_ConfigChannel+0x604>)
 80011b8:	f7ff faf0 	bl	800079c <LL_ADC_IsEnabled>
 80011bc:	4603      	mov	r3, r0
 80011be:	4323      	orrs	r3, r4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	bf0c      	ite	eq
 80011c4:	2301      	moveq	r3, #1
 80011c6:	2300      	movne	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	e008      	b.n	80011de <HAL_ADC_ConfigChannel+0x4ca>
 80011cc:	4855      	ldr	r0, [pc, #340]	; (8001324 <HAL_ADC_ConfigChannel+0x610>)
 80011ce:	f7ff fae5 	bl	800079c <LL_ADC_IsEnabled>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	bf0c      	ite	eq
 80011d8:	2301      	moveq	r3, #1
 80011da:	2300      	movne	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d07b      	beq.n	80012da <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a50      	ldr	r2, [pc, #320]	; (8001328 <HAL_ADC_ConfigChannel+0x614>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d12e      	bne.n	800124a <HAL_ADC_ConfigChannel+0x536>
 80011ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d129      	bne.n	800124a <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a4a      	ldr	r2, [pc, #296]	; (8001324 <HAL_ADC_ConfigChannel+0x610>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d17f      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a43      	ldr	r2, [pc, #268]	; (8001314 <HAL_ADC_ConfigChannel+0x600>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d004      	beq.n	8001214 <HAL_ADC_ConfigChannel+0x500>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a42      	ldr	r2, [pc, #264]	; (8001318 <HAL_ADC_ConfigChannel+0x604>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d101      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x504>
 8001214:	4a41      	ldr	r2, [pc, #260]	; (800131c <HAL_ADC_ConfigChannel+0x608>)
 8001216:	e000      	b.n	800121a <HAL_ADC_ConfigChannel+0x506>
 8001218:	4a41      	ldr	r2, [pc, #260]	; (8001320 <HAL_ADC_ConfigChannel+0x60c>)
 800121a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800121c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001220:	4619      	mov	r1, r3
 8001222:	4610      	mov	r0, r2
 8001224:	f7ff f93f 	bl	80004a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001228:	4b40      	ldr	r3, [pc, #256]	; (800132c <HAL_ADC_ConfigChannel+0x618>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	099b      	lsrs	r3, r3, #6
 800122e:	4a40      	ldr	r2, [pc, #256]	; (8001330 <HAL_ADC_ConfigChannel+0x61c>)
 8001230:	fba2 2303 	umull	r2, r3, r2, r3
 8001234:	099b      	lsrs	r3, r3, #6
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800123a:	e002      	b.n	8001242 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	3b01      	subs	r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f9      	bne.n	800123c <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001248:	e05a      	b.n	8001300 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a39      	ldr	r2, [pc, #228]	; (8001334 <HAL_ADC_ConfigChannel+0x620>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d11e      	bne.n	8001292 <HAL_ADC_ConfigChannel+0x57e>
 8001254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d119      	bne.n	8001292 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a30      	ldr	r2, [pc, #192]	; (8001324 <HAL_ADC_ConfigChannel+0x610>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d14b      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a29      	ldr	r2, [pc, #164]	; (8001314 <HAL_ADC_ConfigChannel+0x600>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d004      	beq.n	800127c <HAL_ADC_ConfigChannel+0x568>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a28      	ldr	r2, [pc, #160]	; (8001318 <HAL_ADC_ConfigChannel+0x604>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d101      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x56c>
 800127c:	4a27      	ldr	r2, [pc, #156]	; (800131c <HAL_ADC_ConfigChannel+0x608>)
 800127e:	e000      	b.n	8001282 <HAL_ADC_ConfigChannel+0x56e>
 8001280:	4a27      	ldr	r2, [pc, #156]	; (8001320 <HAL_ADC_ConfigChannel+0x60c>)
 8001282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001288:	4619      	mov	r1, r3
 800128a:	4610      	mov	r0, r2
 800128c:	f7ff f90b 	bl	80004a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001290:	e036      	b.n	8001300 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a28      	ldr	r2, [pc, #160]	; (8001338 <HAL_ADC_ConfigChannel+0x624>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d131      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x5ec>
 800129c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800129e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d12c      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <HAL_ADC_ConfigChannel+0x610>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d127      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a17      	ldr	r2, [pc, #92]	; (8001314 <HAL_ADC_ConfigChannel+0x600>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d004      	beq.n	80012c4 <HAL_ADC_ConfigChannel+0x5b0>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a16      	ldr	r2, [pc, #88]	; (8001318 <HAL_ADC_ConfigChannel+0x604>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d101      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x5b4>
 80012c4:	4a15      	ldr	r2, [pc, #84]	; (800131c <HAL_ADC_ConfigChannel+0x608>)
 80012c6:	e000      	b.n	80012ca <HAL_ADC_ConfigChannel+0x5b6>
 80012c8:	4a15      	ldr	r2, [pc, #84]	; (8001320 <HAL_ADC_ConfigChannel+0x60c>)
 80012ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d0:	4619      	mov	r1, r3
 80012d2:	4610      	mov	r0, r2
 80012d4:	f7ff f8e7 	bl	80004a6 <LL_ADC_SetCommonPathInternalCh>
 80012d8:	e012      	b.n	8001300 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012de:	f043 0220 	orr.w	r2, r3, #32
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80012ec:	e008      	b.n	8001300 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f2:	f043 0220 	orr.w	r2, r3, #32
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001308:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800130c:	4618      	mov	r0, r3
 800130e:	3764      	adds	r7, #100	; 0x64
 8001310:	46bd      	mov	sp, r7
 8001312:	bd90      	pop	{r4, r7, pc}
 8001314:	40022000 	.word	0x40022000
 8001318:	40022100 	.word	0x40022100
 800131c:	40022300 	.word	0x40022300
 8001320:	58026300 	.word	0x58026300
 8001324:	58026000 	.word	0x58026000
 8001328:	cb840000 	.word	0xcb840000
 800132c:	20000010 	.word	0x20000010
 8001330:	053e2d63 	.word	0x053e2d63
 8001334:	c7520000 	.word	0xc7520000
 8001338:	cfb80000 	.word	0xcfb80000

0800133c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fa27 	bl	800079c <LL_ADC_IsEnabled>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d167      	bne.n	8001424 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	4b35      	ldr	r3, [pc, #212]	; (8001430 <ADC_Enable+0xf4>)
 800135c:	4013      	ands	r3, r2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00d      	beq.n	800137e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001366:	f043 0210 	orr.w	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	f043 0201 	orr.w	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e053      	b.n	8001426 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f9f6 	bl	8000774 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001388:	f7ff f82c 	bl	80003e4 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a28      	ldr	r2, [pc, #160]	; (8001434 <ADC_Enable+0xf8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d004      	beq.n	80013a2 <ADC_Enable+0x66>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a26      	ldr	r2, [pc, #152]	; (8001438 <ADC_Enable+0xfc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <ADC_Enable+0x6a>
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <ADC_Enable+0x100>)
 80013a4:	e000      	b.n	80013a8 <ADC_Enable+0x6c>
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <ADC_Enable+0x104>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f987 	bl	80006bc <LL_ADC_GetMultimode>
 80013ae:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a20      	ldr	r2, [pc, #128]	; (8001438 <ADC_Enable+0xfc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d002      	beq.n	80013c0 <ADC_Enable+0x84>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	e000      	b.n	80013c2 <ADC_Enable+0x86>
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <ADC_Enable+0xf8>)
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d025      	beq.n	8001416 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d129      	bne.n	8001424 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013d0:	e021      	b.n	8001416 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f9e0 	bl	800079c <LL_ADC_IsEnabled>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d104      	bne.n	80013ec <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f9c4 	bl	8000774 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013ec:	f7fe fffa 	bl	80003e4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d90d      	bls.n	8001416 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fe:	f043 0210 	orr.w	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	f043 0201 	orr.w	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e007      	b.n	8001426 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b01      	cmp	r3, #1
 8001422:	d1d6      	bne.n	80013d2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	8000003f 	.word	0x8000003f
 8001434:	40022000 	.word	0x40022000
 8001438:	40022100 	.word	0x40022100
 800143c:	40022300 	.word	0x40022300
 8001440:	58026300 	.word	0x58026300

08001444 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001450:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001456:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800145a:	2b00      	cmp	r3, #0
 800145c:	d14b      	bne.n	80014f6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001462:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d021      	beq.n	80014bc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f881 	bl	8000584 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d032      	beq.n	80014ee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d12b      	bne.n	80014ee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d11f      	bne.n	80014ee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b2:	f043 0201 	orr.w	r2, r3, #1
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	655a      	str	r2, [r3, #84]	; 0x54
 80014ba:	e018      	b.n	80014ee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d111      	bne.n	80014ee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d105      	bne.n	80014ee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e6:	f043 0201 	orr.w	r2, r3, #1
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f00d ff38 	bl	800f364 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80014f4:	e00e      	b.n	8001514 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f7ff fbfc 	bl	8000d00 <HAL_ADC_ErrorCallback>
}
 8001508:	e004      	b.n	8001514 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	4798      	blx	r3
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001528:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f00d ff25 	bl	800f37a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001544:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	f043 0204 	orr.w	r2, r3, #4
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff fbce 	bl	8000d00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a70      	ldr	r2, [pc, #448]	; (800173c <ADC_ConfigureBoostMode+0x1d0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d004      	beq.n	8001588 <ADC_ConfigureBoostMode+0x1c>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a6f      	ldr	r2, [pc, #444]	; (8001740 <ADC_ConfigureBoostMode+0x1d4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d109      	bne.n	800159c <ADC_ConfigureBoostMode+0x30>
 8001588:	4b6e      	ldr	r3, [pc, #440]	; (8001744 <ADC_ConfigureBoostMode+0x1d8>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf14      	ite	ne
 8001594:	2301      	movne	r3, #1
 8001596:	2300      	moveq	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	e008      	b.n	80015ae <ADC_ConfigureBoostMode+0x42>
 800159c:	4b6a      	ldr	r3, [pc, #424]	; (8001748 <ADC_ConfigureBoostMode+0x1dc>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf14      	ite	ne
 80015a8:	2301      	movne	r3, #1
 80015aa:	2300      	moveq	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d01a      	beq.n	80015e8 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80015b2:	f004 f8c7 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 80015b6:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015c0:	d006      	beq.n	80015d0 <ADC_ConfigureBoostMode+0x64>
 80015c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80015c6:	d00b      	beq.n	80015e0 <ADC_ConfigureBoostMode+0x74>
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d000      	beq.n	80015d0 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80015ce:	e05d      	b.n	800168c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	0c1b      	lsrs	r3, r3, #16
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015dc:	60fb      	str	r3, [r7, #12]
        break;
 80015de:	e055      	b.n	800168c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	60fb      	str	r3, [r7, #12]
        break;
 80015e6:	e051      	b.n	800168c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80015e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015ec:	f004 ffb8 	bl	8006560 <HAL_RCCEx_GetPeriphCLKFreq>
 80015f0:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80015fa:	d02a      	beq.n	8001652 <ADC_ConfigureBoostMode+0xe6>
 80015fc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001600:	d813      	bhi.n	800162a <ADC_ConfigureBoostMode+0xbe>
 8001602:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001606:	d024      	beq.n	8001652 <ADC_ConfigureBoostMode+0xe6>
 8001608:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800160c:	d806      	bhi.n	800161c <ADC_ConfigureBoostMode+0xb0>
 800160e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001612:	d01e      	beq.n	8001652 <ADC_ConfigureBoostMode+0xe6>
 8001614:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001618:	d01b      	beq.n	8001652 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800161a:	e037      	b.n	800168c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800161c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001620:	d017      	beq.n	8001652 <ADC_ConfigureBoostMode+0xe6>
 8001622:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001626:	d014      	beq.n	8001652 <ADC_ConfigureBoostMode+0xe6>
        break;
 8001628:	e030      	b.n	800168c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800162a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800162e:	d021      	beq.n	8001674 <ADC_ConfigureBoostMode+0x108>
 8001630:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001634:	d806      	bhi.n	8001644 <ADC_ConfigureBoostMode+0xd8>
 8001636:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800163a:	d013      	beq.n	8001664 <ADC_ConfigureBoostMode+0xf8>
 800163c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001640:	d014      	beq.n	800166c <ADC_ConfigureBoostMode+0x100>
        break;
 8001642:	e023      	b.n	800168c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001644:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001648:	d018      	beq.n	800167c <ADC_ConfigureBoostMode+0x110>
 800164a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800164e:	d019      	beq.n	8001684 <ADC_ConfigureBoostMode+0x118>
        break;
 8001650:	e01c      	b.n	800168c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001660:	60fb      	str	r3, [r7, #12]
        break;
 8001662:	e013      	b.n	800168c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	60fb      	str	r3, [r7, #12]
      break;
 800166a:	e00f      	b.n	800168c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	60fb      	str	r3, [r7, #12]
        break;
 8001672:	e00b      	b.n	800168c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	60fb      	str	r3, [r7, #12]
        break;
 800167a:	e007      	b.n	800168c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	09db      	lsrs	r3, r3, #7
 8001680:	60fb      	str	r3, [r7, #12]
        break;
 8001682:	e003      	b.n	800168c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	60fb      	str	r3, [r7, #12]
        break;
 800168a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800168c:	f7fe fed8 	bl	8000440 <HAL_GetREVID>
 8001690:	4602      	mov	r2, r0
 8001692:	f241 0303 	movw	r3, #4099	; 0x1003
 8001696:	429a      	cmp	r2, r3
 8001698:	d815      	bhi.n	80016c6 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4a2b      	ldr	r2, [pc, #172]	; (800174c <ADC_ConfigureBoostMode+0x1e0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d908      	bls.n	80016b4 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016b0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80016b2:	e03e      	b.n	8001732 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016c2:	609a      	str	r2, [r3, #8]
}
 80016c4:	e035      	b.n	8001732 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4a20      	ldr	r2, [pc, #128]	; (8001750 <ADC_ConfigureBoostMode+0x1e4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d808      	bhi.n	80016e6 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80016e2:	609a      	str	r2, [r3, #8]
}
 80016e4:	e025      	b.n	8001732 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4a1a      	ldr	r2, [pc, #104]	; (8001754 <ADC_ConfigureBoostMode+0x1e8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d80a      	bhi.n	8001704 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001700:	609a      	str	r2, [r3, #8]
}
 8001702:	e016      	b.n	8001732 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4a14      	ldr	r2, [pc, #80]	; (8001758 <ADC_ConfigureBoostMode+0x1ec>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d80a      	bhi.n	8001722 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	e007      	b.n	8001732 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001730:	609a      	str	r2, [r3, #8]
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40022000 	.word	0x40022000
 8001740:	40022100 	.word	0x40022100
 8001744:	40022300 	.word	0x40022300
 8001748:	58026300 	.word	0x58026300
 800174c:	01312d00 	.word	0x01312d00
 8001750:	005f5e10 	.word	0x005f5e10
 8001754:	00bebc20 	.word	0x00bebc20
 8001758:	017d7840 	.word	0x017d7840

0800175c <LL_ADC_IsEnabled>:
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <LL_ADC_IsEnabled+0x18>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <LL_ADC_IsEnabled+0x1a>
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_ADC_REG_IsConversionOngoing>:
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b04      	cmp	r3, #4
 8001794:	d101      	bne.n	800179a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b09f      	sub	sp, #124	; 0x7c
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e0ba      	b.n	800193c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a5c      	ldr	r2, [pc, #368]	; (8001944 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d102      	bne.n	80017de <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80017d8:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	e001      	b.n	80017e2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10b      	bne.n	8001800 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	f043 0220 	orr.w	r2, r3, #32
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e09d      	b.n	800193c <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ffbd 	bl	8001782 <LL_ADC_REG_IsConversionOngoing>
 8001808:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ffb7 	bl	8001782 <LL_ADC_REG_IsConversionOngoing>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d17f      	bne.n	800191a <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800181a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800181c:	2b00      	cmp	r3, #0
 800181e:	d17c      	bne.n	800191a <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a47      	ldr	r2, [pc, #284]	; (8001944 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d004      	beq.n	8001834 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a46      	ldr	r2, [pc, #280]	; (8001948 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d101      	bne.n	8001838 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8001834:	4b45      	ldr	r3, [pc, #276]	; (800194c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001836:	e000      	b.n	800183a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8001838:	4b45      	ldr	r3, [pc, #276]	; (8001950 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800183a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d039      	beq.n	80018b8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	431a      	orrs	r2, r3
 8001852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001854:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a3a      	ldr	r2, [pc, #232]	; (8001944 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d004      	beq.n	800186a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a38      	ldr	r2, [pc, #224]	; (8001948 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d10e      	bne.n	8001888 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800186a:	4836      	ldr	r0, [pc, #216]	; (8001944 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800186c:	f7ff ff76 	bl	800175c <LL_ADC_IsEnabled>
 8001870:	4604      	mov	r4, r0
 8001872:	4835      	ldr	r0, [pc, #212]	; (8001948 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001874:	f7ff ff72 	bl	800175c <LL_ADC_IsEnabled>
 8001878:	4603      	mov	r3, r0
 800187a:	4323      	orrs	r3, r4
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	e008      	b.n	800189a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8001888:	4832      	ldr	r0, [pc, #200]	; (8001954 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800188a:	f7ff ff67 	bl	800175c <LL_ADC_IsEnabled>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d047      	beq.n	800192e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800189e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	6811      	ldr	r1, [r2, #0]
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	6892      	ldr	r2, [r2, #8]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	431a      	orrs	r2, r3
 80018b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018b6:	e03a      	b.n	800192e <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80018b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80018c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d004      	beq.n	80018d8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d10e      	bne.n	80018f6 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 80018d8:	481a      	ldr	r0, [pc, #104]	; (8001944 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80018da:	f7ff ff3f 	bl	800175c <LL_ADC_IsEnabled>
 80018de:	4604      	mov	r4, r0
 80018e0:	4819      	ldr	r0, [pc, #100]	; (8001948 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80018e2:	f7ff ff3b 	bl	800175c <LL_ADC_IsEnabled>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4323      	orrs	r3, r4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bf0c      	ite	eq
 80018ee:	2301      	moveq	r3, #1
 80018f0:	2300      	movne	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	e008      	b.n	8001908 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80018f6:	4817      	ldr	r0, [pc, #92]	; (8001954 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80018f8:	f7ff ff30 	bl	800175c <LL_ADC_IsEnabled>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bf0c      	ite	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	2300      	movne	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d010      	beq.n	800192e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800190c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001912:	4013      	ands	r3, r2
 8001914:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001916:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001918:	e009      	b.n	800192e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	f043 0220 	orr.w	r2, r3, #32
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800192c:	e000      	b.n	8001930 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800192e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001938:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800193c:	4618      	mov	r0, r3
 800193e:	377c      	adds	r7, #124	; 0x7c
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}
 8001944:	40022000 	.word	0x40022000
 8001948:	40022100 	.word	0x40022100
 800194c:	40022300 	.word	0x40022300
 8001950:	58026300 	.word	0x58026300
 8001954:	58026000 	.word	0x58026000
 8001958:	fffff0e0 	.word	0xfffff0e0

0800195c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <__NVIC_SetPriorityGrouping+0x40>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	4313      	orrs	r3, r2
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x40>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00
 80019a0:	05fa0000 	.word	0x05fa0000

080019a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db0b      	blt.n	80019ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4907      	ldr	r1, [pc, #28]	; (80019f8 <__NVIC_EnableIRQ+0x38>)
 80019da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2001      	movs	r0, #1
 80019e2:	fa00 f202 	lsl.w	r2, r0, r2
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000e100 	.word	0xe000e100

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	; (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	; (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac8:	d301      	bcc.n	8001ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00f      	b.n	8001aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <SysTick_Config+0x40>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001adc:	f7ff ff8e 	bl	80019fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <SysTick_Config+0x40>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <SysTick_Config+0x40>)
 8001ae8:	2207      	movs	r2, #7
 8001aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff29 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b20:	f7ff ff40 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff ff90 	bl	8001a50 <NVIC_EncodePriority>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5f 	bl	80019fc <__NVIC_SetPriority>
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff33 	bl	80019c0 <__NVIC_EnableIRQ>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffa4 	bl	8001ab8 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001b80:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_MPU_Disable+0x24>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <HAL_MPU_Disable+0x24>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <HAL_MPU_Disable+0x28>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	605a      	str	r2, [r3, #4]
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00
 8001ba4:	e000ed90 	.word	0xe000ed90

08001ba8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <HAL_MPU_Enable+0x34>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_MPU_Enable+0x38>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_MPU_Enable+0x38>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001bca:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed90 	.word	0xe000ed90
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	785a      	ldrb	r2, [r3, #1]
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_MPU_ConfigRegion+0x84>)
 8001bf2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d029      	beq.n	8001c50 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001bfc:	4a1a      	ldr	r2, [pc, #104]	; (8001c68 <HAL_MPU_ConfigRegion+0x84>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7b1b      	ldrb	r3, [r3, #12]
 8001c08:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7adb      	ldrb	r3, [r3, #11]
 8001c0e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7a9b      	ldrb	r3, [r3, #10]
 8001c16:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7b5b      	ldrb	r3, [r3, #13]
 8001c1e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7b9b      	ldrb	r3, [r3, #14]
 8001c26:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7bdb      	ldrb	r3, [r3, #15]
 8001c2e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	7a5b      	ldrb	r3, [r3, #9]
 8001c36:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	7a1b      	ldrb	r3, [r3, #8]
 8001c3e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c40:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	7812      	ldrb	r2, [r2, #0]
 8001c46:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c4a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c4c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001c4e:	e005      	b.n	8001c5c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_MPU_ConfigRegion+0x84>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001c56:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <HAL_MPU_ConfigRegion+0x84>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed90 	.word	0xe000ed90

08001c6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001c74:	f7fe fbb6 	bl	80003e4 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e316      	b.n	80022b2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a66      	ldr	r2, [pc, #408]	; (8001e24 <HAL_DMA_Init+0x1b8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d04a      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a65      	ldr	r2, [pc, #404]	; (8001e28 <HAL_DMA_Init+0x1bc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d045      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a63      	ldr	r2, [pc, #396]	; (8001e2c <HAL_DMA_Init+0x1c0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d040      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a62      	ldr	r2, [pc, #392]	; (8001e30 <HAL_DMA_Init+0x1c4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d03b      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a60      	ldr	r2, [pc, #384]	; (8001e34 <HAL_DMA_Init+0x1c8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d036      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a5f      	ldr	r2, [pc, #380]	; (8001e38 <HAL_DMA_Init+0x1cc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d031      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a5d      	ldr	r2, [pc, #372]	; (8001e3c <HAL_DMA_Init+0x1d0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d02c      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a5c      	ldr	r2, [pc, #368]	; (8001e40 <HAL_DMA_Init+0x1d4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d027      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a5a      	ldr	r2, [pc, #360]	; (8001e44 <HAL_DMA_Init+0x1d8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d022      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a59      	ldr	r2, [pc, #356]	; (8001e48 <HAL_DMA_Init+0x1dc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d01d      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a57      	ldr	r2, [pc, #348]	; (8001e4c <HAL_DMA_Init+0x1e0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d018      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a56      	ldr	r2, [pc, #344]	; (8001e50 <HAL_DMA_Init+0x1e4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d013      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a54      	ldr	r2, [pc, #336]	; (8001e54 <HAL_DMA_Init+0x1e8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00e      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a53      	ldr	r2, [pc, #332]	; (8001e58 <HAL_DMA_Init+0x1ec>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a51      	ldr	r2, [pc, #324]	; (8001e5c <HAL_DMA_Init+0x1f0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d004      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a50      	ldr	r2, [pc, #320]	; (8001e60 <HAL_DMA_Init+0x1f4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_DMA_Init+0xbc>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_DMA_Init+0xbe>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 813b 	beq.w	8001fa6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a37      	ldr	r2, [pc, #220]	; (8001e24 <HAL_DMA_Init+0x1b8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d04a      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a36      	ldr	r2, [pc, #216]	; (8001e28 <HAL_DMA_Init+0x1bc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d045      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a34      	ldr	r2, [pc, #208]	; (8001e2c <HAL_DMA_Init+0x1c0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d040      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a33      	ldr	r2, [pc, #204]	; (8001e30 <HAL_DMA_Init+0x1c4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d03b      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a31      	ldr	r2, [pc, #196]	; (8001e34 <HAL_DMA_Init+0x1c8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d036      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a30      	ldr	r2, [pc, #192]	; (8001e38 <HAL_DMA_Init+0x1cc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d031      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <HAL_DMA_Init+0x1d0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d02c      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2d      	ldr	r2, [pc, #180]	; (8001e40 <HAL_DMA_Init+0x1d4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d027      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <HAL_DMA_Init+0x1d8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d022      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <HAL_DMA_Init+0x1dc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d01d      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_DMA_Init+0x1e0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d018      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a27      	ldr	r2, [pc, #156]	; (8001e50 <HAL_DMA_Init+0x1e4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d013      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <HAL_DMA_Init+0x1e8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00e      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a24      	ldr	r2, [pc, #144]	; (8001e58 <HAL_DMA_Init+0x1ec>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d009      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_DMA_Init+0x1f0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d004      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <HAL_DMA_Init+0x1f4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d108      	bne.n	8001df2 <HAL_DMA_Init+0x186>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e007      	b.n	8001e02 <HAL_DMA_Init+0x196>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e02:	e02f      	b.n	8001e64 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e04:	f7fe faee 	bl	80003e4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b05      	cmp	r3, #5
 8001e10:	d928      	bls.n	8001e64 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2220      	movs	r2, #32
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e246      	b.n	80022b2 <HAL_DMA_Init+0x646>
 8001e24:	40020010 	.word	0x40020010
 8001e28:	40020028 	.word	0x40020028
 8001e2c:	40020040 	.word	0x40020040
 8001e30:	40020058 	.word	0x40020058
 8001e34:	40020070 	.word	0x40020070
 8001e38:	40020088 	.word	0x40020088
 8001e3c:	400200a0 	.word	0x400200a0
 8001e40:	400200b8 	.word	0x400200b8
 8001e44:	40020410 	.word	0x40020410
 8001e48:	40020428 	.word	0x40020428
 8001e4c:	40020440 	.word	0x40020440
 8001e50:	40020458 	.word	0x40020458
 8001e54:	40020470 	.word	0x40020470
 8001e58:	40020488 	.word	0x40020488
 8001e5c:	400204a0 	.word	0x400204a0
 8001e60:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1c8      	bne.n	8001e04 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4b83      	ldr	r3, [pc, #524]	; (800208c <HAL_DMA_Init+0x420>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001e8a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e96:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d107      	bne.n	8001ec8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001ec8:	4b71      	ldr	r3, [pc, #452]	; (8002090 <HAL_DMA_Init+0x424>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b71      	ldr	r3, [pc, #452]	; (8002094 <HAL_DMA_Init+0x428>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ed4:	d328      	bcc.n	8001f28 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b28      	cmp	r3, #40	; 0x28
 8001edc:	d903      	bls.n	8001ee6 <HAL_DMA_Init+0x27a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8001ee4:	d917      	bls.n	8001f16 <HAL_DMA_Init+0x2aa>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b3e      	cmp	r3, #62	; 0x3e
 8001eec:	d903      	bls.n	8001ef6 <HAL_DMA_Init+0x28a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b42      	cmp	r3, #66	; 0x42
 8001ef4:	d90f      	bls.n	8001f16 <HAL_DMA_Init+0x2aa>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b46      	cmp	r3, #70	; 0x46
 8001efc:	d903      	bls.n	8001f06 <HAL_DMA_Init+0x29a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b48      	cmp	r3, #72	; 0x48
 8001f04:	d907      	bls.n	8001f16 <HAL_DMA_Init+0x2aa>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b4e      	cmp	r3, #78	; 0x4e
 8001f0c:	d905      	bls.n	8001f1a <HAL_DMA_Init+0x2ae>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b52      	cmp	r3, #82	; 0x52
 8001f14:	d801      	bhi.n	8001f1a <HAL_DMA_Init+0x2ae>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_DMA_Init+0x2b0>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f26:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f023 0307 	bic.w	r3, r3, #7
 8001f3e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d117      	bne.n	8001f82 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00e      	beq.n	8001f82 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f002 f81f 	bl	8003fa8 <DMA_CheckFifoParam>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2240      	movs	r2, #64	; 0x40
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e197      	b.n	80022b2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f001 ff5a 	bl	8003e44 <DMA_CalcBaseAndBitshift>
 8001f90:	4603      	mov	r3, r0
 8001f92:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	223f      	movs	r2, #63	; 0x3f
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	e0cd      	b.n	8002142 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a3b      	ldr	r2, [pc, #236]	; (8002098 <HAL_DMA_Init+0x42c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d022      	beq.n	8001ff6 <HAL_DMA_Init+0x38a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a39      	ldr	r2, [pc, #228]	; (800209c <HAL_DMA_Init+0x430>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01d      	beq.n	8001ff6 <HAL_DMA_Init+0x38a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a38      	ldr	r2, [pc, #224]	; (80020a0 <HAL_DMA_Init+0x434>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d018      	beq.n	8001ff6 <HAL_DMA_Init+0x38a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a36      	ldr	r2, [pc, #216]	; (80020a4 <HAL_DMA_Init+0x438>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_DMA_Init+0x38a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a35      	ldr	r2, [pc, #212]	; (80020a8 <HAL_DMA_Init+0x43c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00e      	beq.n	8001ff6 <HAL_DMA_Init+0x38a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a33      	ldr	r2, [pc, #204]	; (80020ac <HAL_DMA_Init+0x440>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_DMA_Init+0x38a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a32      	ldr	r2, [pc, #200]	; (80020b0 <HAL_DMA_Init+0x444>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d004      	beq.n	8001ff6 <HAL_DMA_Init+0x38a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a30      	ldr	r2, [pc, #192]	; (80020b4 <HAL_DMA_Init+0x448>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_DMA_Init+0x38e>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_DMA_Init+0x390>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8097 	beq.w	8002130 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a24      	ldr	r2, [pc, #144]	; (8002098 <HAL_DMA_Init+0x42c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d021      	beq.n	8002050 <HAL_DMA_Init+0x3e4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a22      	ldr	r2, [pc, #136]	; (800209c <HAL_DMA_Init+0x430>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01c      	beq.n	8002050 <HAL_DMA_Init+0x3e4>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <HAL_DMA_Init+0x434>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d017      	beq.n	8002050 <HAL_DMA_Init+0x3e4>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <HAL_DMA_Init+0x438>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d012      	beq.n	8002050 <HAL_DMA_Init+0x3e4>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <HAL_DMA_Init+0x43c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00d      	beq.n	8002050 <HAL_DMA_Init+0x3e4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <HAL_DMA_Init+0x440>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d008      	beq.n	8002050 <HAL_DMA_Init+0x3e4>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <HAL_DMA_Init+0x444>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d003      	beq.n	8002050 <HAL_DMA_Init+0x3e4>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_DMA_Init+0x448>)
 800204e:	4293      	cmp	r3, r2
 8002050:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2202      	movs	r2, #2
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_DMA_Init+0x44c>)
 800206e:	4013      	ands	r3, r2
 8002070:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b40      	cmp	r3, #64	; 0x40
 8002078:	d020      	beq.n	80020bc <HAL_DMA_Init+0x450>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b80      	cmp	r3, #128	; 0x80
 8002080:	d102      	bne.n	8002088 <HAL_DMA_Init+0x41c>
 8002082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002086:	e01a      	b.n	80020be <HAL_DMA_Init+0x452>
 8002088:	2300      	movs	r3, #0
 800208a:	e018      	b.n	80020be <HAL_DMA_Init+0x452>
 800208c:	fe10803f 	.word	0xfe10803f
 8002090:	5c001000 	.word	0x5c001000
 8002094:	ffff0000 	.word	0xffff0000
 8002098:	58025408 	.word	0x58025408
 800209c:	5802541c 	.word	0x5802541c
 80020a0:	58025430 	.word	0x58025430
 80020a4:	58025444 	.word	0x58025444
 80020a8:	58025458 	.word	0x58025458
 80020ac:	5802546c 	.word	0x5802546c
 80020b0:	58025480 	.word	0x58025480
 80020b4:	58025494 	.word	0x58025494
 80020b8:	fffe000f 	.word	0xfffe000f
 80020bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68d2      	ldr	r2, [r2, #12]
 80020c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b6e      	ldr	r3, [pc, #440]	; (80022bc <HAL_DMA_Init+0x650>)
 8002104:	4413      	add	r3, r2
 8002106:	4a6e      	ldr	r2, [pc, #440]	; (80022c0 <HAL_DMA_Init+0x654>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	009a      	lsls	r2, r3, #2
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f001 fe95 	bl	8003e44 <DMA_CalcBaseAndBitshift>
 800211a:	4603      	mov	r3, r0
 800211c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	2201      	movs	r2, #1
 8002128:	409a      	lsls	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	e008      	b.n	8002142 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2240      	movs	r2, #64	; 0x40
 8002134:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2203      	movs	r2, #3
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0b7      	b.n	80022b2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a5f      	ldr	r2, [pc, #380]	; (80022c4 <HAL_DMA_Init+0x658>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d072      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a5d      	ldr	r2, [pc, #372]	; (80022c8 <HAL_DMA_Init+0x65c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d06d      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5c      	ldr	r2, [pc, #368]	; (80022cc <HAL_DMA_Init+0x660>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d068      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5a      	ldr	r2, [pc, #360]	; (80022d0 <HAL_DMA_Init+0x664>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d063      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a59      	ldr	r2, [pc, #356]	; (80022d4 <HAL_DMA_Init+0x668>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d05e      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a57      	ldr	r2, [pc, #348]	; (80022d8 <HAL_DMA_Init+0x66c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d059      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a56      	ldr	r2, [pc, #344]	; (80022dc <HAL_DMA_Init+0x670>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d054      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a54      	ldr	r2, [pc, #336]	; (80022e0 <HAL_DMA_Init+0x674>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d04f      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a53      	ldr	r2, [pc, #332]	; (80022e4 <HAL_DMA_Init+0x678>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d04a      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a51      	ldr	r2, [pc, #324]	; (80022e8 <HAL_DMA_Init+0x67c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d045      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a50      	ldr	r2, [pc, #320]	; (80022ec <HAL_DMA_Init+0x680>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d040      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a4e      	ldr	r2, [pc, #312]	; (80022f0 <HAL_DMA_Init+0x684>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d03b      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a4d      	ldr	r2, [pc, #308]	; (80022f4 <HAL_DMA_Init+0x688>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d036      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4b      	ldr	r2, [pc, #300]	; (80022f8 <HAL_DMA_Init+0x68c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d031      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a4a      	ldr	r2, [pc, #296]	; (80022fc <HAL_DMA_Init+0x690>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d02c      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a48      	ldr	r2, [pc, #288]	; (8002300 <HAL_DMA_Init+0x694>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d027      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a47      	ldr	r2, [pc, #284]	; (8002304 <HAL_DMA_Init+0x698>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d022      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a45      	ldr	r2, [pc, #276]	; (8002308 <HAL_DMA_Init+0x69c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01d      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a44      	ldr	r2, [pc, #272]	; (800230c <HAL_DMA_Init+0x6a0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d018      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a42      	ldr	r2, [pc, #264]	; (8002310 <HAL_DMA_Init+0x6a4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a41      	ldr	r2, [pc, #260]	; (8002314 <HAL_DMA_Init+0x6a8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00e      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a3f      	ldr	r2, [pc, #252]	; (8002318 <HAL_DMA_Init+0x6ac>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d009      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a3e      	ldr	r2, [pc, #248]	; (800231c <HAL_DMA_Init+0x6b0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d004      	beq.n	8002232 <HAL_DMA_Init+0x5c6>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a3c      	ldr	r2, [pc, #240]	; (8002320 <HAL_DMA_Init+0x6b4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_DMA_Init+0x5ca>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_DMA_Init+0x5cc>
 8002236:	2300      	movs	r3, #0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d032      	beq.n	80022a2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f001 ff2f 	bl	80040a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b80      	cmp	r3, #128	; 0x80
 8002248:	d102      	bne.n	8002250 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002264:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d010      	beq.n	8002290 <HAL_DMA_Init+0x624>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b08      	cmp	r3, #8
 8002274:	d80c      	bhi.n	8002290 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f001 ffac 	bl	80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	e008      	b.n	80022a2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	a7fdabf8 	.word	0xa7fdabf8
 80022c0:	cccccccd 	.word	0xcccccccd
 80022c4:	40020010 	.word	0x40020010
 80022c8:	40020028 	.word	0x40020028
 80022cc:	40020040 	.word	0x40020040
 80022d0:	40020058 	.word	0x40020058
 80022d4:	40020070 	.word	0x40020070
 80022d8:	40020088 	.word	0x40020088
 80022dc:	400200a0 	.word	0x400200a0
 80022e0:	400200b8 	.word	0x400200b8
 80022e4:	40020410 	.word	0x40020410
 80022e8:	40020428 	.word	0x40020428
 80022ec:	40020440 	.word	0x40020440
 80022f0:	40020458 	.word	0x40020458
 80022f4:	40020470 	.word	0x40020470
 80022f8:	40020488 	.word	0x40020488
 80022fc:	400204a0 	.word	0x400204a0
 8002300:	400204b8 	.word	0x400204b8
 8002304:	58025408 	.word	0x58025408
 8002308:	5802541c 	.word	0x5802541c
 800230c:	58025430 	.word	0x58025430
 8002310:	58025444 	.word	0x58025444
 8002314:	58025458 	.word	0x58025458
 8002318:	5802546c 	.word	0x5802546c
 800231c:	58025480 	.word	0x58025480
 8002320:	58025494 	.word	0x58025494

08002324 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e226      	b.n	800278e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_DMA_Start_IT+0x2a>
 800234a:	2302      	movs	r3, #2
 800234c:	e21f      	b.n	800278e <HAL_DMA_Start_IT+0x46a>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	f040 820a 	bne.w	8002778 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a68      	ldr	r2, [pc, #416]	; (8002518 <HAL_DMA_Start_IT+0x1f4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d04a      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a66      	ldr	r2, [pc, #408]	; (800251c <HAL_DMA_Start_IT+0x1f8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d045      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a65      	ldr	r2, [pc, #404]	; (8002520 <HAL_DMA_Start_IT+0x1fc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d040      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a63      	ldr	r2, [pc, #396]	; (8002524 <HAL_DMA_Start_IT+0x200>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d03b      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a62      	ldr	r2, [pc, #392]	; (8002528 <HAL_DMA_Start_IT+0x204>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d036      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a60      	ldr	r2, [pc, #384]	; (800252c <HAL_DMA_Start_IT+0x208>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d031      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5f      	ldr	r2, [pc, #380]	; (8002530 <HAL_DMA_Start_IT+0x20c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d02c      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5d      	ldr	r2, [pc, #372]	; (8002534 <HAL_DMA_Start_IT+0x210>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d027      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5c      	ldr	r2, [pc, #368]	; (8002538 <HAL_DMA_Start_IT+0x214>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d022      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5a      	ldr	r2, [pc, #360]	; (800253c <HAL_DMA_Start_IT+0x218>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01d      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a59      	ldr	r2, [pc, #356]	; (8002540 <HAL_DMA_Start_IT+0x21c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d018      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a57      	ldr	r2, [pc, #348]	; (8002544 <HAL_DMA_Start_IT+0x220>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a56      	ldr	r2, [pc, #344]	; (8002548 <HAL_DMA_Start_IT+0x224>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00e      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a54      	ldr	r2, [pc, #336]	; (800254c <HAL_DMA_Start_IT+0x228>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d009      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a53      	ldr	r2, [pc, #332]	; (8002550 <HAL_DMA_Start_IT+0x22c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d004      	beq.n	8002412 <HAL_DMA_Start_IT+0xee>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a51      	ldr	r2, [pc, #324]	; (8002554 <HAL_DMA_Start_IT+0x230>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d108      	bne.n	8002424 <HAL_DMA_Start_IT+0x100>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e007      	b.n	8002434 <HAL_DMA_Start_IT+0x110>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f001 fb56 	bl	8003aec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a34      	ldr	r2, [pc, #208]	; (8002518 <HAL_DMA_Start_IT+0x1f4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d04a      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a33      	ldr	r2, [pc, #204]	; (800251c <HAL_DMA_Start_IT+0x1f8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d045      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a31      	ldr	r2, [pc, #196]	; (8002520 <HAL_DMA_Start_IT+0x1fc>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d040      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a30      	ldr	r2, [pc, #192]	; (8002524 <HAL_DMA_Start_IT+0x200>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d03b      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2e      	ldr	r2, [pc, #184]	; (8002528 <HAL_DMA_Start_IT+0x204>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d036      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2d      	ldr	r2, [pc, #180]	; (800252c <HAL_DMA_Start_IT+0x208>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d031      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2b      	ldr	r2, [pc, #172]	; (8002530 <HAL_DMA_Start_IT+0x20c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d02c      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2a      	ldr	r2, [pc, #168]	; (8002534 <HAL_DMA_Start_IT+0x210>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d027      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a28      	ldr	r2, [pc, #160]	; (8002538 <HAL_DMA_Start_IT+0x214>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d022      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a27      	ldr	r2, [pc, #156]	; (800253c <HAL_DMA_Start_IT+0x218>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d01d      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a25      	ldr	r2, [pc, #148]	; (8002540 <HAL_DMA_Start_IT+0x21c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d018      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a24      	ldr	r2, [pc, #144]	; (8002544 <HAL_DMA_Start_IT+0x220>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a22      	ldr	r2, [pc, #136]	; (8002548 <HAL_DMA_Start_IT+0x224>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00e      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a21      	ldr	r2, [pc, #132]	; (800254c <HAL_DMA_Start_IT+0x228>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1f      	ldr	r2, [pc, #124]	; (8002550 <HAL_DMA_Start_IT+0x22c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_DMA_Start_IT+0x1bc>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <HAL_DMA_Start_IT+0x230>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_DMA_Start_IT+0x1c0>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <HAL_DMA_Start_IT+0x1c2>
 80024e4:	2300      	movs	r3, #0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d036      	beq.n	8002558 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 021e 	bic.w	r2, r3, #30
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0216 	orr.w	r2, r2, #22
 80024fc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d03e      	beq.n	8002584 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0208 	orr.w	r2, r2, #8
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	e035      	b.n	8002584 <HAL_DMA_Start_IT+0x260>
 8002518:	40020010 	.word	0x40020010
 800251c:	40020028 	.word	0x40020028
 8002520:	40020040 	.word	0x40020040
 8002524:	40020058 	.word	0x40020058
 8002528:	40020070 	.word	0x40020070
 800252c:	40020088 	.word	0x40020088
 8002530:	400200a0 	.word	0x400200a0
 8002534:	400200b8 	.word	0x400200b8
 8002538:	40020410 	.word	0x40020410
 800253c:	40020428 	.word	0x40020428
 8002540:	40020440 	.word	0x40020440
 8002544:	40020458 	.word	0x40020458
 8002548:	40020470 	.word	0x40020470
 800254c:	40020488 	.word	0x40020488
 8002550:	400204a0 	.word	0x400204a0
 8002554:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 020e 	bic.w	r2, r3, #14
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 020a 	orr.w	r2, r2, #10
 800256a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0204 	orr.w	r2, r2, #4
 8002582:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a83      	ldr	r2, [pc, #524]	; (8002798 <HAL_DMA_Start_IT+0x474>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d072      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a82      	ldr	r2, [pc, #520]	; (800279c <HAL_DMA_Start_IT+0x478>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d06d      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a80      	ldr	r2, [pc, #512]	; (80027a0 <HAL_DMA_Start_IT+0x47c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d068      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a7f      	ldr	r2, [pc, #508]	; (80027a4 <HAL_DMA_Start_IT+0x480>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d063      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a7d      	ldr	r2, [pc, #500]	; (80027a8 <HAL_DMA_Start_IT+0x484>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d05e      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a7c      	ldr	r2, [pc, #496]	; (80027ac <HAL_DMA_Start_IT+0x488>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d059      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a7a      	ldr	r2, [pc, #488]	; (80027b0 <HAL_DMA_Start_IT+0x48c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d054      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a79      	ldr	r2, [pc, #484]	; (80027b4 <HAL_DMA_Start_IT+0x490>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d04f      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a77      	ldr	r2, [pc, #476]	; (80027b8 <HAL_DMA_Start_IT+0x494>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d04a      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a76      	ldr	r2, [pc, #472]	; (80027bc <HAL_DMA_Start_IT+0x498>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d045      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a74      	ldr	r2, [pc, #464]	; (80027c0 <HAL_DMA_Start_IT+0x49c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d040      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a73      	ldr	r2, [pc, #460]	; (80027c4 <HAL_DMA_Start_IT+0x4a0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d03b      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a71      	ldr	r2, [pc, #452]	; (80027c8 <HAL_DMA_Start_IT+0x4a4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d036      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a70      	ldr	r2, [pc, #448]	; (80027cc <HAL_DMA_Start_IT+0x4a8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d031      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a6e      	ldr	r2, [pc, #440]	; (80027d0 <HAL_DMA_Start_IT+0x4ac>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d02c      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6d      	ldr	r2, [pc, #436]	; (80027d4 <HAL_DMA_Start_IT+0x4b0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d027      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a6b      	ldr	r2, [pc, #428]	; (80027d8 <HAL_DMA_Start_IT+0x4b4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d022      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6a      	ldr	r2, [pc, #424]	; (80027dc <HAL_DMA_Start_IT+0x4b8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d01d      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a68      	ldr	r2, [pc, #416]	; (80027e0 <HAL_DMA_Start_IT+0x4bc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d018      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a67      	ldr	r2, [pc, #412]	; (80027e4 <HAL_DMA_Start_IT+0x4c0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d013      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <HAL_DMA_Start_IT+0x4c4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00e      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a64      	ldr	r2, [pc, #400]	; (80027ec <HAL_DMA_Start_IT+0x4c8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d009      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a62      	ldr	r2, [pc, #392]	; (80027f0 <HAL_DMA_Start_IT+0x4cc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d004      	beq.n	8002674 <HAL_DMA_Start_IT+0x350>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a61      	ldr	r2, [pc, #388]	; (80027f4 <HAL_DMA_Start_IT+0x4d0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_DMA_Start_IT+0x354>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_DMA_Start_IT+0x356>
 8002678:	2300      	movs	r3, #0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01a      	beq.n	80026b4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d007      	beq.n	80026b4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a37      	ldr	r2, [pc, #220]	; (8002798 <HAL_DMA_Start_IT+0x474>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d04a      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a36      	ldr	r2, [pc, #216]	; (800279c <HAL_DMA_Start_IT+0x478>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d045      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a34      	ldr	r2, [pc, #208]	; (80027a0 <HAL_DMA_Start_IT+0x47c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d040      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a33      	ldr	r2, [pc, #204]	; (80027a4 <HAL_DMA_Start_IT+0x480>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d03b      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a31      	ldr	r2, [pc, #196]	; (80027a8 <HAL_DMA_Start_IT+0x484>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d036      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a30      	ldr	r2, [pc, #192]	; (80027ac <HAL_DMA_Start_IT+0x488>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d031      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2e      	ldr	r2, [pc, #184]	; (80027b0 <HAL_DMA_Start_IT+0x48c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d02c      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2d      	ldr	r2, [pc, #180]	; (80027b4 <HAL_DMA_Start_IT+0x490>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d027      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <HAL_DMA_Start_IT+0x494>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d022      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2a      	ldr	r2, [pc, #168]	; (80027bc <HAL_DMA_Start_IT+0x498>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d01d      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <HAL_DMA_Start_IT+0x49c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d018      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <HAL_DMA_Start_IT+0x4a0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d013      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a25      	ldr	r2, [pc, #148]	; (80027c8 <HAL_DMA_Start_IT+0x4a4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00e      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a24      	ldr	r2, [pc, #144]	; (80027cc <HAL_DMA_Start_IT+0x4a8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d009      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a22      	ldr	r2, [pc, #136]	; (80027d0 <HAL_DMA_Start_IT+0x4ac>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d004      	beq.n	8002754 <HAL_DMA_Start_IT+0x430>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a21      	ldr	r2, [pc, #132]	; (80027d4 <HAL_DMA_Start_IT+0x4b0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d108      	bne.n	8002766 <HAL_DMA_Start_IT+0x442>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e012      	b.n	800278c <HAL_DMA_Start_IT+0x468>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0201 	orr.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e009      	b.n	800278c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002786:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800278c:	7dfb      	ldrb	r3, [r7, #23]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40020010 	.word	0x40020010
 800279c:	40020028 	.word	0x40020028
 80027a0:	40020040 	.word	0x40020040
 80027a4:	40020058 	.word	0x40020058
 80027a8:	40020070 	.word	0x40020070
 80027ac:	40020088 	.word	0x40020088
 80027b0:	400200a0 	.word	0x400200a0
 80027b4:	400200b8 	.word	0x400200b8
 80027b8:	40020410 	.word	0x40020410
 80027bc:	40020428 	.word	0x40020428
 80027c0:	40020440 	.word	0x40020440
 80027c4:	40020458 	.word	0x40020458
 80027c8:	40020470 	.word	0x40020470
 80027cc:	40020488 	.word	0x40020488
 80027d0:	400204a0 	.word	0x400204a0
 80027d4:	400204b8 	.word	0x400204b8
 80027d8:	58025408 	.word	0x58025408
 80027dc:	5802541c 	.word	0x5802541c
 80027e0:	58025430 	.word	0x58025430
 80027e4:	58025444 	.word	0x58025444
 80027e8:	58025458 	.word	0x58025458
 80027ec:	5802546c 	.word	0x5802546c
 80027f0:	58025480 	.word	0x58025480
 80027f4:	58025494 	.word	0x58025494

080027f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e205      	b.n	8002c16 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d004      	beq.n	8002820 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e1fa      	b.n	8002c16 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a8c      	ldr	r2, [pc, #560]	; (8002a58 <HAL_DMA_Abort_IT+0x260>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d04a      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a8b      	ldr	r2, [pc, #556]	; (8002a5c <HAL_DMA_Abort_IT+0x264>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d045      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a89      	ldr	r2, [pc, #548]	; (8002a60 <HAL_DMA_Abort_IT+0x268>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d040      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a88      	ldr	r2, [pc, #544]	; (8002a64 <HAL_DMA_Abort_IT+0x26c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d03b      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a86      	ldr	r2, [pc, #536]	; (8002a68 <HAL_DMA_Abort_IT+0x270>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d036      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a85      	ldr	r2, [pc, #532]	; (8002a6c <HAL_DMA_Abort_IT+0x274>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d031      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a83      	ldr	r2, [pc, #524]	; (8002a70 <HAL_DMA_Abort_IT+0x278>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d02c      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a82      	ldr	r2, [pc, #520]	; (8002a74 <HAL_DMA_Abort_IT+0x27c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d027      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a80      	ldr	r2, [pc, #512]	; (8002a78 <HAL_DMA_Abort_IT+0x280>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d022      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a7f      	ldr	r2, [pc, #508]	; (8002a7c <HAL_DMA_Abort_IT+0x284>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d01d      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a7d      	ldr	r2, [pc, #500]	; (8002a80 <HAL_DMA_Abort_IT+0x288>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d018      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7c      	ldr	r2, [pc, #496]	; (8002a84 <HAL_DMA_Abort_IT+0x28c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d013      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a7a      	ldr	r2, [pc, #488]	; (8002a88 <HAL_DMA_Abort_IT+0x290>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00e      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a79      	ldr	r2, [pc, #484]	; (8002a8c <HAL_DMA_Abort_IT+0x294>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d009      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a77      	ldr	r2, [pc, #476]	; (8002a90 <HAL_DMA_Abort_IT+0x298>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d004      	beq.n	80028c0 <HAL_DMA_Abort_IT+0xc8>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a76      	ldr	r2, [pc, #472]	; (8002a94 <HAL_DMA_Abort_IT+0x29c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_DMA_Abort_IT+0xcc>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_DMA_Abort_IT+0xce>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d065      	beq.n	8002996 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2204      	movs	r2, #4
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a60      	ldr	r2, [pc, #384]	; (8002a58 <HAL_DMA_Abort_IT+0x260>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d04a      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a5e      	ldr	r2, [pc, #376]	; (8002a5c <HAL_DMA_Abort_IT+0x264>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d045      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a5d      	ldr	r2, [pc, #372]	; (8002a60 <HAL_DMA_Abort_IT+0x268>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d040      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a5b      	ldr	r2, [pc, #364]	; (8002a64 <HAL_DMA_Abort_IT+0x26c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d03b      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a5a      	ldr	r2, [pc, #360]	; (8002a68 <HAL_DMA_Abort_IT+0x270>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d036      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a58      	ldr	r2, [pc, #352]	; (8002a6c <HAL_DMA_Abort_IT+0x274>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d031      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a57      	ldr	r2, [pc, #348]	; (8002a70 <HAL_DMA_Abort_IT+0x278>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d02c      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a55      	ldr	r2, [pc, #340]	; (8002a74 <HAL_DMA_Abort_IT+0x27c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d027      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a54      	ldr	r2, [pc, #336]	; (8002a78 <HAL_DMA_Abort_IT+0x280>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a52      	ldr	r2, [pc, #328]	; (8002a7c <HAL_DMA_Abort_IT+0x284>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01d      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a51      	ldr	r2, [pc, #324]	; (8002a80 <HAL_DMA_Abort_IT+0x288>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d018      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a4f      	ldr	r2, [pc, #316]	; (8002a84 <HAL_DMA_Abort_IT+0x28c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a4e      	ldr	r2, [pc, #312]	; (8002a88 <HAL_DMA_Abort_IT+0x290>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00e      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a4c      	ldr	r2, [pc, #304]	; (8002a8c <HAL_DMA_Abort_IT+0x294>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d009      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a4b      	ldr	r2, [pc, #300]	; (8002a90 <HAL_DMA_Abort_IT+0x298>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d004      	beq.n	8002972 <HAL_DMA_Abort_IT+0x17a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a49      	ldr	r2, [pc, #292]	; (8002a94 <HAL_DMA_Abort_IT+0x29c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d108      	bne.n	8002984 <HAL_DMA_Abort_IT+0x18c>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	e147      	b.n	8002c14 <HAL_DMA_Abort_IT+0x41c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e13e      	b.n	8002c14 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 020e 	bic.w	r2, r2, #14
 80029a4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a2b      	ldr	r2, [pc, #172]	; (8002a58 <HAL_DMA_Abort_IT+0x260>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d04a      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a29      	ldr	r2, [pc, #164]	; (8002a5c <HAL_DMA_Abort_IT+0x264>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d045      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a28      	ldr	r2, [pc, #160]	; (8002a60 <HAL_DMA_Abort_IT+0x268>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d040      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <HAL_DMA_Abort_IT+0x26c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d03b      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a25      	ldr	r2, [pc, #148]	; (8002a68 <HAL_DMA_Abort_IT+0x270>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d036      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <HAL_DMA_Abort_IT+0x274>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d031      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <HAL_DMA_Abort_IT+0x278>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d02c      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <HAL_DMA_Abort_IT+0x27c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d027      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <HAL_DMA_Abort_IT+0x280>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d022      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <HAL_DMA_Abort_IT+0x284>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01d      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <HAL_DMA_Abort_IT+0x288>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d018      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1a      	ldr	r2, [pc, #104]	; (8002a84 <HAL_DMA_Abort_IT+0x28c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a19      	ldr	r2, [pc, #100]	; (8002a88 <HAL_DMA_Abort_IT+0x290>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00e      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <HAL_DMA_Abort_IT+0x294>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d009      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a16      	ldr	r2, [pc, #88]	; (8002a90 <HAL_DMA_Abort_IT+0x298>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x24e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <HAL_DMA_Abort_IT+0x29c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d128      	bne.n	8002a98 <HAL_DMA_Abort_IT+0x2a0>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e027      	b.n	8002aa8 <HAL_DMA_Abort_IT+0x2b0>
 8002a58:	40020010 	.word	0x40020010
 8002a5c:	40020028 	.word	0x40020028
 8002a60:	40020040 	.word	0x40020040
 8002a64:	40020058 	.word	0x40020058
 8002a68:	40020070 	.word	0x40020070
 8002a6c:	40020088 	.word	0x40020088
 8002a70:	400200a0 	.word	0x400200a0
 8002a74:	400200b8 	.word	0x400200b8
 8002a78:	40020410 	.word	0x40020410
 8002a7c:	40020428 	.word	0x40020428
 8002a80:	40020440 	.word	0x40020440
 8002a84:	40020458 	.word	0x40020458
 8002a88:	40020470 	.word	0x40020470
 8002a8c:	40020488 	.word	0x40020488
 8002a90:	400204a0 	.word	0x400204a0
 8002a94:	400204b8 	.word	0x400204b8
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a5c      	ldr	r2, [pc, #368]	; (8002c20 <HAL_DMA_Abort_IT+0x428>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d072      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a5b      	ldr	r2, [pc, #364]	; (8002c24 <HAL_DMA_Abort_IT+0x42c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d06d      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a59      	ldr	r2, [pc, #356]	; (8002c28 <HAL_DMA_Abort_IT+0x430>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d068      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a58      	ldr	r2, [pc, #352]	; (8002c2c <HAL_DMA_Abort_IT+0x434>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d063      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a56      	ldr	r2, [pc, #344]	; (8002c30 <HAL_DMA_Abort_IT+0x438>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d05e      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a55      	ldr	r2, [pc, #340]	; (8002c34 <HAL_DMA_Abort_IT+0x43c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d059      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a53      	ldr	r2, [pc, #332]	; (8002c38 <HAL_DMA_Abort_IT+0x440>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d054      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_DMA_Abort_IT+0x444>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d04f      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a50      	ldr	r2, [pc, #320]	; (8002c40 <HAL_DMA_Abort_IT+0x448>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d04a      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a4f      	ldr	r2, [pc, #316]	; (8002c44 <HAL_DMA_Abort_IT+0x44c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d045      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a4d      	ldr	r2, [pc, #308]	; (8002c48 <HAL_DMA_Abort_IT+0x450>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d040      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a4c      	ldr	r2, [pc, #304]	; (8002c4c <HAL_DMA_Abort_IT+0x454>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d03b      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a4a      	ldr	r2, [pc, #296]	; (8002c50 <HAL_DMA_Abort_IT+0x458>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d036      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a49      	ldr	r2, [pc, #292]	; (8002c54 <HAL_DMA_Abort_IT+0x45c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d031      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a47      	ldr	r2, [pc, #284]	; (8002c58 <HAL_DMA_Abort_IT+0x460>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d02c      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a46      	ldr	r2, [pc, #280]	; (8002c5c <HAL_DMA_Abort_IT+0x464>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d027      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a44      	ldr	r2, [pc, #272]	; (8002c60 <HAL_DMA_Abort_IT+0x468>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d022      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a43      	ldr	r2, [pc, #268]	; (8002c64 <HAL_DMA_Abort_IT+0x46c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d01d      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a41      	ldr	r2, [pc, #260]	; (8002c68 <HAL_DMA_Abort_IT+0x470>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d018      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a40      	ldr	r2, [pc, #256]	; (8002c6c <HAL_DMA_Abort_IT+0x474>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a3e      	ldr	r2, [pc, #248]	; (8002c70 <HAL_DMA_Abort_IT+0x478>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00e      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a3d      	ldr	r2, [pc, #244]	; (8002c74 <HAL_DMA_Abort_IT+0x47c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d009      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a3b      	ldr	r2, [pc, #236]	; (8002c78 <HAL_DMA_Abort_IT+0x480>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x3a0>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3a      	ldr	r2, [pc, #232]	; (8002c7c <HAL_DMA_Abort_IT+0x484>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_DMA_Abort_IT+0x3a4>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_DMA_Abort_IT+0x3a6>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d028      	beq.n	8002bf4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002bd0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bf2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40020010 	.word	0x40020010
 8002c24:	40020028 	.word	0x40020028
 8002c28:	40020040 	.word	0x40020040
 8002c2c:	40020058 	.word	0x40020058
 8002c30:	40020070 	.word	0x40020070
 8002c34:	40020088 	.word	0x40020088
 8002c38:	400200a0 	.word	0x400200a0
 8002c3c:	400200b8 	.word	0x400200b8
 8002c40:	40020410 	.word	0x40020410
 8002c44:	40020428 	.word	0x40020428
 8002c48:	40020440 	.word	0x40020440
 8002c4c:	40020458 	.word	0x40020458
 8002c50:	40020470 	.word	0x40020470
 8002c54:	40020488 	.word	0x40020488
 8002c58:	400204a0 	.word	0x400204a0
 8002c5c:	400204b8 	.word	0x400204b8
 8002c60:	58025408 	.word	0x58025408
 8002c64:	5802541c 	.word	0x5802541c
 8002c68:	58025430 	.word	0x58025430
 8002c6c:	58025444 	.word	0x58025444
 8002c70:	58025458 	.word	0x58025458
 8002c74:	5802546c 	.word	0x5802546c
 8002c78:	58025480 	.word	0x58025480
 8002c7c:	58025494 	.word	0x58025494

08002c80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c8c:	4b67      	ldr	r3, [pc, #412]	; (8002e2c <HAL_DMA_IRQHandler+0x1ac>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a67      	ldr	r2, [pc, #412]	; (8002e30 <HAL_DMA_IRQHandler+0x1b0>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0a9b      	lsrs	r3, r3, #10
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a5f      	ldr	r2, [pc, #380]	; (8002e34 <HAL_DMA_IRQHandler+0x1b4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d04a      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a5d      	ldr	r2, [pc, #372]	; (8002e38 <HAL_DMA_IRQHandler+0x1b8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d045      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a5c      	ldr	r2, [pc, #368]	; (8002e3c <HAL_DMA_IRQHandler+0x1bc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d040      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a5a      	ldr	r2, [pc, #360]	; (8002e40 <HAL_DMA_IRQHandler+0x1c0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d03b      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a59      	ldr	r2, [pc, #356]	; (8002e44 <HAL_DMA_IRQHandler+0x1c4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d036      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a57      	ldr	r2, [pc, #348]	; (8002e48 <HAL_DMA_IRQHandler+0x1c8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d031      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a56      	ldr	r2, [pc, #344]	; (8002e4c <HAL_DMA_IRQHandler+0x1cc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d02c      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a54      	ldr	r2, [pc, #336]	; (8002e50 <HAL_DMA_IRQHandler+0x1d0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d027      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a53      	ldr	r2, [pc, #332]	; (8002e54 <HAL_DMA_IRQHandler+0x1d4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d022      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a51      	ldr	r2, [pc, #324]	; (8002e58 <HAL_DMA_IRQHandler+0x1d8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01d      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a50      	ldr	r2, [pc, #320]	; (8002e5c <HAL_DMA_IRQHandler+0x1dc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d018      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a4e      	ldr	r2, [pc, #312]	; (8002e60 <HAL_DMA_IRQHandler+0x1e0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a4d      	ldr	r2, [pc, #308]	; (8002e64 <HAL_DMA_IRQHandler+0x1e4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00e      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a4b      	ldr	r2, [pc, #300]	; (8002e68 <HAL_DMA_IRQHandler+0x1e8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a4a      	ldr	r2, [pc, #296]	; (8002e6c <HAL_DMA_IRQHandler+0x1ec>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d004      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xd2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a48      	ldr	r2, [pc, #288]	; (8002e70 <HAL_DMA_IRQHandler+0x1f0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <HAL_DMA_IRQHandler+0xd6>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <HAL_DMA_IRQHandler+0xd8>
 8002d56:	2300      	movs	r3, #0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 842b 	beq.w	80035b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2208      	movs	r2, #8
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80a2 	beq.w	8002eb8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <HAL_DMA_IRQHandler+0x1b4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d04a      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <HAL_DMA_IRQHandler+0x1b8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d045      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a2b      	ldr	r2, [pc, #172]	; (8002e3c <HAL_DMA_IRQHandler+0x1bc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d040      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2a      	ldr	r2, [pc, #168]	; (8002e40 <HAL_DMA_IRQHandler+0x1c0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d03b      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a28      	ldr	r2, [pc, #160]	; (8002e44 <HAL_DMA_IRQHandler+0x1c4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d036      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a27      	ldr	r2, [pc, #156]	; (8002e48 <HAL_DMA_IRQHandler+0x1c8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d031      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <HAL_DMA_IRQHandler+0x1cc>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d02c      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <HAL_DMA_IRQHandler+0x1d0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d027      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <HAL_DMA_IRQHandler+0x1d4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d022      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a21      	ldr	r2, [pc, #132]	; (8002e58 <HAL_DMA_IRQHandler+0x1d8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d01d      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a1f      	ldr	r2, [pc, #124]	; (8002e5c <HAL_DMA_IRQHandler+0x1dc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d018      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a1e      	ldr	r2, [pc, #120]	; (8002e60 <HAL_DMA_IRQHandler+0x1e0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d013      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1c      	ldr	r2, [pc, #112]	; (8002e64 <HAL_DMA_IRQHandler+0x1e4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00e      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1b      	ldr	r2, [pc, #108]	; (8002e68 <HAL_DMA_IRQHandler+0x1e8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d009      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a19      	ldr	r2, [pc, #100]	; (8002e6c <HAL_DMA_IRQHandler+0x1ec>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d004      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x194>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a18      	ldr	r2, [pc, #96]	; (8002e70 <HAL_DMA_IRQHandler+0x1f0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d12f      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x1f4>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bf14      	ite	ne
 8002e22:	2301      	movne	r3, #1
 8002e24:	2300      	moveq	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	e02e      	b.n	8002e88 <HAL_DMA_IRQHandler+0x208>
 8002e2a:	bf00      	nop
 8002e2c:	20000010 	.word	0x20000010
 8002e30:	1b4e81b5 	.word	0x1b4e81b5
 8002e34:	40020010 	.word	0x40020010
 8002e38:	40020028 	.word	0x40020028
 8002e3c:	40020040 	.word	0x40020040
 8002e40:	40020058 	.word	0x40020058
 8002e44:	40020070 	.word	0x40020070
 8002e48:	40020088 	.word	0x40020088
 8002e4c:	400200a0 	.word	0x400200a0
 8002e50:	400200b8 	.word	0x400200b8
 8002e54:	40020410 	.word	0x40020410
 8002e58:	40020428 	.word	0x40020428
 8002e5c:	40020440 	.word	0x40020440
 8002e60:	40020458 	.word	0x40020458
 8002e64:	40020470 	.word	0x40020470
 8002e68:	40020488 	.word	0x40020488
 8002e6c:	400204a0 	.word	0x400204a0
 8002e70:	400204b8 	.word	0x400204b8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bf14      	ite	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	2300      	moveq	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d015      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0204 	bic.w	r2, r2, #4
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d06e      	beq.n	8002fac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a69      	ldr	r2, [pc, #420]	; (8003078 <HAL_DMA_IRQHandler+0x3f8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d04a      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a67      	ldr	r2, [pc, #412]	; (800307c <HAL_DMA_IRQHandler+0x3fc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d045      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a66      	ldr	r2, [pc, #408]	; (8003080 <HAL_DMA_IRQHandler+0x400>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d040      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a64      	ldr	r2, [pc, #400]	; (8003084 <HAL_DMA_IRQHandler+0x404>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d03b      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a63      	ldr	r2, [pc, #396]	; (8003088 <HAL_DMA_IRQHandler+0x408>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d036      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a61      	ldr	r2, [pc, #388]	; (800308c <HAL_DMA_IRQHandler+0x40c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d031      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a60      	ldr	r2, [pc, #384]	; (8003090 <HAL_DMA_IRQHandler+0x410>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d02c      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a5e      	ldr	r2, [pc, #376]	; (8003094 <HAL_DMA_IRQHandler+0x414>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d027      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a5d      	ldr	r2, [pc, #372]	; (8003098 <HAL_DMA_IRQHandler+0x418>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d022      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a5b      	ldr	r2, [pc, #364]	; (800309c <HAL_DMA_IRQHandler+0x41c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01d      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a5a      	ldr	r2, [pc, #360]	; (80030a0 <HAL_DMA_IRQHandler+0x420>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d018      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a58      	ldr	r2, [pc, #352]	; (80030a4 <HAL_DMA_IRQHandler+0x424>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a57      	ldr	r2, [pc, #348]	; (80030a8 <HAL_DMA_IRQHandler+0x428>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00e      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a55      	ldr	r2, [pc, #340]	; (80030ac <HAL_DMA_IRQHandler+0x42c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d009      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a54      	ldr	r2, [pc, #336]	; (80030b0 <HAL_DMA_IRQHandler+0x430>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2ee>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_DMA_IRQHandler+0x434>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10a      	bne.n	8002f84 <HAL_DMA_IRQHandler+0x304>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e003      	b.n	8002f8c <HAL_DMA_IRQHandler+0x30c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00d      	beq.n	8002fac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2201      	movs	r2, #1
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	f043 0202 	orr.w	r2, r3, #2
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 808f 	beq.w	80030e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2c      	ldr	r2, [pc, #176]	; (8003078 <HAL_DMA_IRQHandler+0x3f8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d04a      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	; (800307c <HAL_DMA_IRQHandler+0x3fc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d045      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a29      	ldr	r2, [pc, #164]	; (8003080 <HAL_DMA_IRQHandler+0x400>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d040      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a27      	ldr	r2, [pc, #156]	; (8003084 <HAL_DMA_IRQHandler+0x404>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d03b      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <HAL_DMA_IRQHandler+0x408>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d036      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a24      	ldr	r2, [pc, #144]	; (800308c <HAL_DMA_IRQHandler+0x40c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d031      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a23      	ldr	r2, [pc, #140]	; (8003090 <HAL_DMA_IRQHandler+0x410>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d02c      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a21      	ldr	r2, [pc, #132]	; (8003094 <HAL_DMA_IRQHandler+0x414>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d027      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a20      	ldr	r2, [pc, #128]	; (8003098 <HAL_DMA_IRQHandler+0x418>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d022      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1e      	ldr	r2, [pc, #120]	; (800309c <HAL_DMA_IRQHandler+0x41c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01d      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <HAL_DMA_IRQHandler+0x420>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d018      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1b      	ldr	r2, [pc, #108]	; (80030a4 <HAL_DMA_IRQHandler+0x424>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1a      	ldr	r2, [pc, #104]	; (80030a8 <HAL_DMA_IRQHandler+0x428>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00e      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a18      	ldr	r2, [pc, #96]	; (80030ac <HAL_DMA_IRQHandler+0x42c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d009      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <HAL_DMA_IRQHandler+0x430>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d004      	beq.n	8003062 <HAL_DMA_IRQHandler+0x3e2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <HAL_DMA_IRQHandler+0x434>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d12a      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x438>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e023      	b.n	80030c0 <HAL_DMA_IRQHandler+0x440>
 8003078:	40020010 	.word	0x40020010
 800307c:	40020028 	.word	0x40020028
 8003080:	40020040 	.word	0x40020040
 8003084:	40020058 	.word	0x40020058
 8003088:	40020070 	.word	0x40020070
 800308c:	40020088 	.word	0x40020088
 8003090:	400200a0 	.word	0x400200a0
 8003094:	400200b8 	.word	0x400200b8
 8003098:	40020410 	.word	0x40020410
 800309c:	40020428 	.word	0x40020428
 80030a0:	40020440 	.word	0x40020440
 80030a4:	40020458 	.word	0x40020458
 80030a8:	40020470 	.word	0x40020470
 80030ac:	40020488 	.word	0x40020488
 80030b0:	400204a0 	.word	0x400204a0
 80030b4:	400204b8 	.word	0x400204b8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	2204      	movs	r2, #4
 80030ce:	409a      	lsls	r2, r3
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	f043 0204 	orr.w	r2, r3, #4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	2210      	movs	r2, #16
 80030ea:	409a      	lsls	r2, r3
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80a6 	beq.w	8003242 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a85      	ldr	r2, [pc, #532]	; (8003310 <HAL_DMA_IRQHandler+0x690>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d04a      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a83      	ldr	r2, [pc, #524]	; (8003314 <HAL_DMA_IRQHandler+0x694>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d045      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a82      	ldr	r2, [pc, #520]	; (8003318 <HAL_DMA_IRQHandler+0x698>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d040      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a80      	ldr	r2, [pc, #512]	; (800331c <HAL_DMA_IRQHandler+0x69c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d03b      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a7f      	ldr	r2, [pc, #508]	; (8003320 <HAL_DMA_IRQHandler+0x6a0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d036      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a7d      	ldr	r2, [pc, #500]	; (8003324 <HAL_DMA_IRQHandler+0x6a4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d031      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a7c      	ldr	r2, [pc, #496]	; (8003328 <HAL_DMA_IRQHandler+0x6a8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d02c      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a7a      	ldr	r2, [pc, #488]	; (800332c <HAL_DMA_IRQHandler+0x6ac>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d027      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a79      	ldr	r2, [pc, #484]	; (8003330 <HAL_DMA_IRQHandler+0x6b0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d022      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a77      	ldr	r2, [pc, #476]	; (8003334 <HAL_DMA_IRQHandler+0x6b4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01d      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a76      	ldr	r2, [pc, #472]	; (8003338 <HAL_DMA_IRQHandler+0x6b8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d018      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a74      	ldr	r2, [pc, #464]	; (800333c <HAL_DMA_IRQHandler+0x6bc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a73      	ldr	r2, [pc, #460]	; (8003340 <HAL_DMA_IRQHandler+0x6c0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00e      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a71      	ldr	r2, [pc, #452]	; (8003344 <HAL_DMA_IRQHandler+0x6c4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d009      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a70      	ldr	r2, [pc, #448]	; (8003348 <HAL_DMA_IRQHandler+0x6c8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d004      	beq.n	8003196 <HAL_DMA_IRQHandler+0x516>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a6e      	ldr	r2, [pc, #440]	; (800334c <HAL_DMA_IRQHandler+0x6cc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10a      	bne.n	80031ac <HAL_DMA_IRQHandler+0x52c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e009      	b.n	80031c0 <HAL_DMA_IRQHandler+0x540>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bf14      	ite	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	2300      	moveq	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d03e      	beq.n	8003242 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2210      	movs	r2, #16
 80031ce:	409a      	lsls	r2, r3
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d018      	beq.n	8003214 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d108      	bne.n	8003202 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d024      	beq.n	8003242 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	4798      	blx	r3
 8003200:	e01f      	b.n	8003242 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01b      	beq.n	8003242 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
 8003212:	e016      	b.n	8003242 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d107      	bne.n	8003232 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0208 	bic.w	r2, r2, #8
 8003230:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	2220      	movs	r2, #32
 800324c:	409a      	lsls	r2, r3
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8110 	beq.w	8003478 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2c      	ldr	r2, [pc, #176]	; (8003310 <HAL_DMA_IRQHandler+0x690>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d04a      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <HAL_DMA_IRQHandler+0x694>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d045      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a29      	ldr	r2, [pc, #164]	; (8003318 <HAL_DMA_IRQHandler+0x698>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d040      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a28      	ldr	r2, [pc, #160]	; (800331c <HAL_DMA_IRQHandler+0x69c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d03b      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a26      	ldr	r2, [pc, #152]	; (8003320 <HAL_DMA_IRQHandler+0x6a0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d036      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a25      	ldr	r2, [pc, #148]	; (8003324 <HAL_DMA_IRQHandler+0x6a4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d031      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a23      	ldr	r2, [pc, #140]	; (8003328 <HAL_DMA_IRQHandler+0x6a8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d02c      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a22      	ldr	r2, [pc, #136]	; (800332c <HAL_DMA_IRQHandler+0x6ac>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d027      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a20      	ldr	r2, [pc, #128]	; (8003330 <HAL_DMA_IRQHandler+0x6b0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d022      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1f      	ldr	r2, [pc, #124]	; (8003334 <HAL_DMA_IRQHandler+0x6b4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d01d      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <HAL_DMA_IRQHandler+0x6b8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d018      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1c      	ldr	r2, [pc, #112]	; (800333c <HAL_DMA_IRQHandler+0x6bc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1a      	ldr	r2, [pc, #104]	; (8003340 <HAL_DMA_IRQHandler+0x6c0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a19      	ldr	r2, [pc, #100]	; (8003344 <HAL_DMA_IRQHandler+0x6c4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d009      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a17      	ldr	r2, [pc, #92]	; (8003348 <HAL_DMA_IRQHandler+0x6c8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x678>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a16      	ldr	r2, [pc, #88]	; (800334c <HAL_DMA_IRQHandler+0x6cc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d12b      	bne.n	8003350 <HAL_DMA_IRQHandler+0x6d0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	bf14      	ite	ne
 8003306:	2301      	movne	r3, #1
 8003308:	2300      	moveq	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	e02a      	b.n	8003364 <HAL_DMA_IRQHandler+0x6e4>
 800330e:	bf00      	nop
 8003310:	40020010 	.word	0x40020010
 8003314:	40020028 	.word	0x40020028
 8003318:	40020040 	.word	0x40020040
 800331c:	40020058 	.word	0x40020058
 8003320:	40020070 	.word	0x40020070
 8003324:	40020088 	.word	0x40020088
 8003328:	400200a0 	.word	0x400200a0
 800332c:	400200b8 	.word	0x400200b8
 8003330:	40020410 	.word	0x40020410
 8003334:	40020428 	.word	0x40020428
 8003338:	40020440 	.word	0x40020440
 800333c:	40020458 	.word	0x40020458
 8003340:	40020470 	.word	0x40020470
 8003344:	40020488 	.word	0x40020488
 8003348:	400204a0 	.word	0x400204a0
 800334c:	400204b8 	.word	0x400204b8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	bf14      	ite	ne
 800335e:	2301      	movne	r3, #1
 8003360:	2300      	moveq	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8087 	beq.w	8003478 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	2220      	movs	r2, #32
 8003374:	409a      	lsls	r2, r3
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b04      	cmp	r3, #4
 8003384:	d139      	bne.n	80033fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0216 	bic.w	r2, r2, #22
 8003394:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d103      	bne.n	80033b6 <HAL_DMA_IRQHandler+0x736>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0208 	bic.w	r2, r2, #8
 80033c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	223f      	movs	r2, #63	; 0x3f
 80033d0:	409a      	lsls	r2, r3
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 834a 	beq.w	8003a84 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
          }
          return;
 80033f8:	e344      	b.n	8003a84 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d018      	beq.n	800343a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d108      	bne.n	8003428 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	2b00      	cmp	r3, #0
 800341c:	d02c      	beq.n	8003478 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4798      	blx	r3
 8003426:	e027      	b.n	8003478 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d023      	beq.n	8003478 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
 8003438:	e01e      	b.n	8003478 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10f      	bne.n	8003468 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0210 	bic.w	r2, r2, #16
 8003456:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8306 	beq.w	8003a8e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8088 	beq.w	80035a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2204      	movs	r2, #4
 8003494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a7a      	ldr	r2, [pc, #488]	; (8003688 <HAL_DMA_IRQHandler+0xa08>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d04a      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a79      	ldr	r2, [pc, #484]	; (800368c <HAL_DMA_IRQHandler+0xa0c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d045      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a77      	ldr	r2, [pc, #476]	; (8003690 <HAL_DMA_IRQHandler+0xa10>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d040      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a76      	ldr	r2, [pc, #472]	; (8003694 <HAL_DMA_IRQHandler+0xa14>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d03b      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a74      	ldr	r2, [pc, #464]	; (8003698 <HAL_DMA_IRQHandler+0xa18>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d036      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a73      	ldr	r2, [pc, #460]	; (800369c <HAL_DMA_IRQHandler+0xa1c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d031      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a71      	ldr	r2, [pc, #452]	; (80036a0 <HAL_DMA_IRQHandler+0xa20>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d02c      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a70      	ldr	r2, [pc, #448]	; (80036a4 <HAL_DMA_IRQHandler+0xa24>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d027      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a6e      	ldr	r2, [pc, #440]	; (80036a8 <HAL_DMA_IRQHandler+0xa28>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d022      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a6d      	ldr	r2, [pc, #436]	; (80036ac <HAL_DMA_IRQHandler+0xa2c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d01d      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a6b      	ldr	r2, [pc, #428]	; (80036b0 <HAL_DMA_IRQHandler+0xa30>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d018      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6a      	ldr	r2, [pc, #424]	; (80036b4 <HAL_DMA_IRQHandler+0xa34>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a68      	ldr	r2, [pc, #416]	; (80036b8 <HAL_DMA_IRQHandler+0xa38>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00e      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a67      	ldr	r2, [pc, #412]	; (80036bc <HAL_DMA_IRQHandler+0xa3c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a65      	ldr	r2, [pc, #404]	; (80036c0 <HAL_DMA_IRQHandler+0xa40>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_DMA_IRQHandler+0x8b8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a64      	ldr	r2, [pc, #400]	; (80036c4 <HAL_DMA_IRQHandler+0xa44>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d108      	bne.n	800354a <HAL_DMA_IRQHandler+0x8ca>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	e007      	b.n	800355a <HAL_DMA_IRQHandler+0x8da>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3301      	adds	r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	429a      	cmp	r2, r3
 8003564:	d307      	bcc.n	8003576 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f2      	bne.n	800355a <HAL_DMA_IRQHandler+0x8da>
 8003574:	e000      	b.n	8003578 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003576:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2203      	movs	r2, #3
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003596:	e003      	b.n	80035a0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8272 	beq.w	8003a8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
 80035b2:	e26c      	b.n	8003a8e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a43      	ldr	r2, [pc, #268]	; (80036c8 <HAL_DMA_IRQHandler+0xa48>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d022      	beq.n	8003604 <HAL_DMA_IRQHandler+0x984>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a42      	ldr	r2, [pc, #264]	; (80036cc <HAL_DMA_IRQHandler+0xa4c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d01d      	beq.n	8003604 <HAL_DMA_IRQHandler+0x984>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a40      	ldr	r2, [pc, #256]	; (80036d0 <HAL_DMA_IRQHandler+0xa50>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d018      	beq.n	8003604 <HAL_DMA_IRQHandler+0x984>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a3f      	ldr	r2, [pc, #252]	; (80036d4 <HAL_DMA_IRQHandler+0xa54>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d013      	beq.n	8003604 <HAL_DMA_IRQHandler+0x984>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a3d      	ldr	r2, [pc, #244]	; (80036d8 <HAL_DMA_IRQHandler+0xa58>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00e      	beq.n	8003604 <HAL_DMA_IRQHandler+0x984>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a3c      	ldr	r2, [pc, #240]	; (80036dc <HAL_DMA_IRQHandler+0xa5c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_DMA_IRQHandler+0x984>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a3a      	ldr	r2, [pc, #232]	; (80036e0 <HAL_DMA_IRQHandler+0xa60>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <HAL_DMA_IRQHandler+0x984>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a39      	ldr	r2, [pc, #228]	; (80036e4 <HAL_DMA_IRQHandler+0xa64>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <HAL_DMA_IRQHandler+0x988>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_DMA_IRQHandler+0x98a>
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 823f 	beq.w	8003a8e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2204      	movs	r2, #4
 8003622:	409a      	lsls	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 80cd 	beq.w	80037c8 <HAL_DMA_IRQHandler+0xb48>
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80c7 	beq.w	80037c8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2204      	movs	r2, #4
 8003644:	409a      	lsls	r2, r3
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d049      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 8210 	beq.w	8003a88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003670:	e20a      	b.n	8003a88 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8206 	beq.w	8003a88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003684:	e200      	b.n	8003a88 <HAL_DMA_IRQHandler+0xe08>
 8003686:	bf00      	nop
 8003688:	40020010 	.word	0x40020010
 800368c:	40020028 	.word	0x40020028
 8003690:	40020040 	.word	0x40020040
 8003694:	40020058 	.word	0x40020058
 8003698:	40020070 	.word	0x40020070
 800369c:	40020088 	.word	0x40020088
 80036a0:	400200a0 	.word	0x400200a0
 80036a4:	400200b8 	.word	0x400200b8
 80036a8:	40020410 	.word	0x40020410
 80036ac:	40020428 	.word	0x40020428
 80036b0:	40020440 	.word	0x40020440
 80036b4:	40020458 	.word	0x40020458
 80036b8:	40020470 	.word	0x40020470
 80036bc:	40020488 	.word	0x40020488
 80036c0:	400204a0 	.word	0x400204a0
 80036c4:	400204b8 	.word	0x400204b8
 80036c8:	58025408 	.word	0x58025408
 80036cc:	5802541c 	.word	0x5802541c
 80036d0:	58025430 	.word	0x58025430
 80036d4:	58025444 	.word	0x58025444
 80036d8:	58025458 	.word	0x58025458
 80036dc:	5802546c 	.word	0x5802546c
 80036e0:	58025480 	.word	0x58025480
 80036e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d160      	bne.n	80037b4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a8c      	ldr	r2, [pc, #560]	; (8003928 <HAL_DMA_IRQHandler+0xca8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d04a      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a8a      	ldr	r2, [pc, #552]	; (800392c <HAL_DMA_IRQHandler+0xcac>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d045      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a89      	ldr	r2, [pc, #548]	; (8003930 <HAL_DMA_IRQHandler+0xcb0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d040      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a87      	ldr	r2, [pc, #540]	; (8003934 <HAL_DMA_IRQHandler+0xcb4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d03b      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a86      	ldr	r2, [pc, #536]	; (8003938 <HAL_DMA_IRQHandler+0xcb8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d036      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a84      	ldr	r2, [pc, #528]	; (800393c <HAL_DMA_IRQHandler+0xcbc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d031      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a83      	ldr	r2, [pc, #524]	; (8003940 <HAL_DMA_IRQHandler+0xcc0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d02c      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a81      	ldr	r2, [pc, #516]	; (8003944 <HAL_DMA_IRQHandler+0xcc4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d027      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a80      	ldr	r2, [pc, #512]	; (8003948 <HAL_DMA_IRQHandler+0xcc8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d022      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a7e      	ldr	r2, [pc, #504]	; (800394c <HAL_DMA_IRQHandler+0xccc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d01d      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7d      	ldr	r2, [pc, #500]	; (8003950 <HAL_DMA_IRQHandler+0xcd0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d018      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a7b      	ldr	r2, [pc, #492]	; (8003954 <HAL_DMA_IRQHandler+0xcd4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7a      	ldr	r2, [pc, #488]	; (8003958 <HAL_DMA_IRQHandler+0xcd8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00e      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a78      	ldr	r2, [pc, #480]	; (800395c <HAL_DMA_IRQHandler+0xcdc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d009      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a77      	ldr	r2, [pc, #476]	; (8003960 <HAL_DMA_IRQHandler+0xce0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_DMA_IRQHandler+0xb12>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a75      	ldr	r2, [pc, #468]	; (8003964 <HAL_DMA_IRQHandler+0xce4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d108      	bne.n	80037a4 <HAL_DMA_IRQHandler+0xb24>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0208 	bic.w	r2, r2, #8
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e007      	b.n	80037b4 <HAL_DMA_IRQHandler+0xb34>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0204 	bic.w	r2, r2, #4
 80037b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8165 	beq.w	8003a88 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037c6:	e15f      	b.n	8003a88 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	2202      	movs	r2, #2
 80037d2:	409a      	lsls	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80c5 	beq.w	8003968 <HAL_DMA_IRQHandler+0xce8>
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80bf 	beq.w	8003968 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2202      	movs	r2, #2
 80037f4:	409a      	lsls	r2, r3
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d018      	beq.n	8003836 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 813a 	beq.w	8003a8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003820:	e134      	b.n	8003a8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8130 	beq.w	8003a8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003834:	e12a      	b.n	8003a8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d168      	bne.n	8003912 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a38      	ldr	r2, [pc, #224]	; (8003928 <HAL_DMA_IRQHandler+0xca8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d04a      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a37      	ldr	r2, [pc, #220]	; (800392c <HAL_DMA_IRQHandler+0xcac>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d045      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a35      	ldr	r2, [pc, #212]	; (8003930 <HAL_DMA_IRQHandler+0xcb0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d040      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a34      	ldr	r2, [pc, #208]	; (8003934 <HAL_DMA_IRQHandler+0xcb4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d03b      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a32      	ldr	r2, [pc, #200]	; (8003938 <HAL_DMA_IRQHandler+0xcb8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d036      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a31      	ldr	r2, [pc, #196]	; (800393c <HAL_DMA_IRQHandler+0xcbc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d031      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a2f      	ldr	r2, [pc, #188]	; (8003940 <HAL_DMA_IRQHandler+0xcc0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d02c      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a2e      	ldr	r2, [pc, #184]	; (8003944 <HAL_DMA_IRQHandler+0xcc4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d027      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2c      	ldr	r2, [pc, #176]	; (8003948 <HAL_DMA_IRQHandler+0xcc8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d022      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2b      	ldr	r2, [pc, #172]	; (800394c <HAL_DMA_IRQHandler+0xccc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d01d      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a29      	ldr	r2, [pc, #164]	; (8003950 <HAL_DMA_IRQHandler+0xcd0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d018      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a28      	ldr	r2, [pc, #160]	; (8003954 <HAL_DMA_IRQHandler+0xcd4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a26      	ldr	r2, [pc, #152]	; (8003958 <HAL_DMA_IRQHandler+0xcd8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00e      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a25      	ldr	r2, [pc, #148]	; (800395c <HAL_DMA_IRQHandler+0xcdc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a23      	ldr	r2, [pc, #140]	; (8003960 <HAL_DMA_IRQHandler+0xce0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xc60>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a22      	ldr	r2, [pc, #136]	; (8003964 <HAL_DMA_IRQHandler+0xce4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d108      	bne.n	80038f2 <HAL_DMA_IRQHandler+0xc72>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0214 	bic.w	r2, r2, #20
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e007      	b.n	8003902 <HAL_DMA_IRQHandler+0xc82>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 020a 	bic.w	r2, r2, #10
 8003900:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80b8 	beq.w	8003a8c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003924:	e0b2      	b.n	8003a8c <HAL_DMA_IRQHandler+0xe0c>
 8003926:	bf00      	nop
 8003928:	40020010 	.word	0x40020010
 800392c:	40020028 	.word	0x40020028
 8003930:	40020040 	.word	0x40020040
 8003934:	40020058 	.word	0x40020058
 8003938:	40020070 	.word	0x40020070
 800393c:	40020088 	.word	0x40020088
 8003940:	400200a0 	.word	0x400200a0
 8003944:	400200b8 	.word	0x400200b8
 8003948:	40020410 	.word	0x40020410
 800394c:	40020428 	.word	0x40020428
 8003950:	40020440 	.word	0x40020440
 8003954:	40020458 	.word	0x40020458
 8003958:	40020470 	.word	0x40020470
 800395c:	40020488 	.word	0x40020488
 8003960:	400204a0 	.word	0x400204a0
 8003964:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2208      	movs	r2, #8
 8003972:	409a      	lsls	r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8088 	beq.w	8003a8e <HAL_DMA_IRQHandler+0xe0e>
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8082 	beq.w	8003a8e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a41      	ldr	r2, [pc, #260]	; (8003a94 <HAL_DMA_IRQHandler+0xe14>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d04a      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a3f      	ldr	r2, [pc, #252]	; (8003a98 <HAL_DMA_IRQHandler+0xe18>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d045      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a3e      	ldr	r2, [pc, #248]	; (8003a9c <HAL_DMA_IRQHandler+0xe1c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d040      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a3c      	ldr	r2, [pc, #240]	; (8003aa0 <HAL_DMA_IRQHandler+0xe20>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d03b      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a3b      	ldr	r2, [pc, #236]	; (8003aa4 <HAL_DMA_IRQHandler+0xe24>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d036      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a39      	ldr	r2, [pc, #228]	; (8003aa8 <HAL_DMA_IRQHandler+0xe28>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d031      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a38      	ldr	r2, [pc, #224]	; (8003aac <HAL_DMA_IRQHandler+0xe2c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d02c      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a36      	ldr	r2, [pc, #216]	; (8003ab0 <HAL_DMA_IRQHandler+0xe30>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d027      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a35      	ldr	r2, [pc, #212]	; (8003ab4 <HAL_DMA_IRQHandler+0xe34>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d022      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a33      	ldr	r2, [pc, #204]	; (8003ab8 <HAL_DMA_IRQHandler+0xe38>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01d      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a32      	ldr	r2, [pc, #200]	; (8003abc <HAL_DMA_IRQHandler+0xe3c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d018      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <HAL_DMA_IRQHandler+0xe40>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2f      	ldr	r2, [pc, #188]	; (8003ac4 <HAL_DMA_IRQHandler+0xe44>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00e      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a2d      	ldr	r2, [pc, #180]	; (8003ac8 <HAL_DMA_IRQHandler+0xe48>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d009      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2c      	ldr	r2, [pc, #176]	; (8003acc <HAL_DMA_IRQHandler+0xe4c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xdaa>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <HAL_DMA_IRQHandler+0xe50>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d108      	bne.n	8003a3c <HAL_DMA_IRQHandler+0xdbc>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 021c 	bic.w	r2, r2, #28
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e007      	b.n	8003a4c <HAL_DMA_IRQHandler+0xdcc>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 020e 	bic.w	r2, r2, #14
 8003a4a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	2201      	movs	r2, #1
 8003a56:	409a      	lsls	r2, r3
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
 8003a82:	e004      	b.n	8003a8e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003a84:	bf00      	nop
 8003a86:	e002      	b.n	8003a8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a88:	bf00      	nop
 8003a8a:	e000      	b.n	8003a8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a8c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a8e:	3728      	adds	r7, #40	; 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40020010 	.word	0x40020010
 8003a98:	40020028 	.word	0x40020028
 8003a9c:	40020040 	.word	0x40020040
 8003aa0:	40020058 	.word	0x40020058
 8003aa4:	40020070 	.word	0x40020070
 8003aa8:	40020088 	.word	0x40020088
 8003aac:	400200a0 	.word	0x400200a0
 8003ab0:	400200b8 	.word	0x400200b8
 8003ab4:	40020410 	.word	0x40020410
 8003ab8:	40020428 	.word	0x40020428
 8003abc:	40020440 	.word	0x40020440
 8003ac0:	40020458 	.word	0x40020458
 8003ac4:	40020470 	.word	0x40020470
 8003ac8:	40020488 	.word	0x40020488
 8003acc:	400204a0 	.word	0x400204a0
 8003ad0:	400204b8 	.word	0x400204b8

08003ad4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a84      	ldr	r2, [pc, #528]	; (8003d1c <DMA_SetConfig+0x230>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d072      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a82      	ldr	r2, [pc, #520]	; (8003d20 <DMA_SetConfig+0x234>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d06d      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a81      	ldr	r2, [pc, #516]	; (8003d24 <DMA_SetConfig+0x238>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d068      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a7f      	ldr	r2, [pc, #508]	; (8003d28 <DMA_SetConfig+0x23c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d063      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a7e      	ldr	r2, [pc, #504]	; (8003d2c <DMA_SetConfig+0x240>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d05e      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a7c      	ldr	r2, [pc, #496]	; (8003d30 <DMA_SetConfig+0x244>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d059      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a7b      	ldr	r2, [pc, #492]	; (8003d34 <DMA_SetConfig+0x248>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d054      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a79      	ldr	r2, [pc, #484]	; (8003d38 <DMA_SetConfig+0x24c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d04f      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a78      	ldr	r2, [pc, #480]	; (8003d3c <DMA_SetConfig+0x250>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d04a      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a76      	ldr	r2, [pc, #472]	; (8003d40 <DMA_SetConfig+0x254>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d045      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a75      	ldr	r2, [pc, #468]	; (8003d44 <DMA_SetConfig+0x258>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d040      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a73      	ldr	r2, [pc, #460]	; (8003d48 <DMA_SetConfig+0x25c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d03b      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a72      	ldr	r2, [pc, #456]	; (8003d4c <DMA_SetConfig+0x260>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d036      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a70      	ldr	r2, [pc, #448]	; (8003d50 <DMA_SetConfig+0x264>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d031      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a6f      	ldr	r2, [pc, #444]	; (8003d54 <DMA_SetConfig+0x268>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d02c      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a6d      	ldr	r2, [pc, #436]	; (8003d58 <DMA_SetConfig+0x26c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d027      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6c      	ldr	r2, [pc, #432]	; (8003d5c <DMA_SetConfig+0x270>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d022      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6a      	ldr	r2, [pc, #424]	; (8003d60 <DMA_SetConfig+0x274>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01d      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a69      	ldr	r2, [pc, #420]	; (8003d64 <DMA_SetConfig+0x278>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d018      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a67      	ldr	r2, [pc, #412]	; (8003d68 <DMA_SetConfig+0x27c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a66      	ldr	r2, [pc, #408]	; (8003d6c <DMA_SetConfig+0x280>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a64      	ldr	r2, [pc, #400]	; (8003d70 <DMA_SetConfig+0x284>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a63      	ldr	r2, [pc, #396]	; (8003d74 <DMA_SetConfig+0x288>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <DMA_SetConfig+0x10a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a61      	ldr	r2, [pc, #388]	; (8003d78 <DMA_SetConfig+0x28c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <DMA_SetConfig+0x10e>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <DMA_SetConfig+0x110>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00d      	beq.n	8003c1c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c08:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d004      	beq.n	8003c1c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c1a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a3e      	ldr	r2, [pc, #248]	; (8003d1c <DMA_SetConfig+0x230>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d04a      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a3d      	ldr	r2, [pc, #244]	; (8003d20 <DMA_SetConfig+0x234>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d045      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a3b      	ldr	r2, [pc, #236]	; (8003d24 <DMA_SetConfig+0x238>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d040      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a3a      	ldr	r2, [pc, #232]	; (8003d28 <DMA_SetConfig+0x23c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d03b      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a38      	ldr	r2, [pc, #224]	; (8003d2c <DMA_SetConfig+0x240>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d036      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a37      	ldr	r2, [pc, #220]	; (8003d30 <DMA_SetConfig+0x244>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d031      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a35      	ldr	r2, [pc, #212]	; (8003d34 <DMA_SetConfig+0x248>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d02c      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a34      	ldr	r2, [pc, #208]	; (8003d38 <DMA_SetConfig+0x24c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d027      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a32      	ldr	r2, [pc, #200]	; (8003d3c <DMA_SetConfig+0x250>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d022      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a31      	ldr	r2, [pc, #196]	; (8003d40 <DMA_SetConfig+0x254>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d01d      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a2f      	ldr	r2, [pc, #188]	; (8003d44 <DMA_SetConfig+0x258>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d018      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a2e      	ldr	r2, [pc, #184]	; (8003d48 <DMA_SetConfig+0x25c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2c      	ldr	r2, [pc, #176]	; (8003d4c <DMA_SetConfig+0x260>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00e      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2b      	ldr	r2, [pc, #172]	; (8003d50 <DMA_SetConfig+0x264>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a29      	ldr	r2, [pc, #164]	; (8003d54 <DMA_SetConfig+0x268>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <DMA_SetConfig+0x1d0>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a28      	ldr	r2, [pc, #160]	; (8003d58 <DMA_SetConfig+0x26c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <DMA_SetConfig+0x1d4>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <DMA_SetConfig+0x1d6>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d05a      	beq.n	8003d7c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	223f      	movs	r2, #63	; 0x3f
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ce4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	d108      	bne.n	8003d08 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d06:	e087      	b.n	8003e18 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]
}
 8003d18:	e07e      	b.n	8003e18 <DMA_SetConfig+0x32c>
 8003d1a:	bf00      	nop
 8003d1c:	40020010 	.word	0x40020010
 8003d20:	40020028 	.word	0x40020028
 8003d24:	40020040 	.word	0x40020040
 8003d28:	40020058 	.word	0x40020058
 8003d2c:	40020070 	.word	0x40020070
 8003d30:	40020088 	.word	0x40020088
 8003d34:	400200a0 	.word	0x400200a0
 8003d38:	400200b8 	.word	0x400200b8
 8003d3c:	40020410 	.word	0x40020410
 8003d40:	40020428 	.word	0x40020428
 8003d44:	40020440 	.word	0x40020440
 8003d48:	40020458 	.word	0x40020458
 8003d4c:	40020470 	.word	0x40020470
 8003d50:	40020488 	.word	0x40020488
 8003d54:	400204a0 	.word	0x400204a0
 8003d58:	400204b8 	.word	0x400204b8
 8003d5c:	58025408 	.word	0x58025408
 8003d60:	5802541c 	.word	0x5802541c
 8003d64:	58025430 	.word	0x58025430
 8003d68:	58025444 	.word	0x58025444
 8003d6c:	58025458 	.word	0x58025458
 8003d70:	5802546c 	.word	0x5802546c
 8003d74:	58025480 	.word	0x58025480
 8003d78:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a28      	ldr	r2, [pc, #160]	; (8003e24 <DMA_SetConfig+0x338>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d022      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a27      	ldr	r2, [pc, #156]	; (8003e28 <DMA_SetConfig+0x33c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d01d      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a25      	ldr	r2, [pc, #148]	; (8003e2c <DMA_SetConfig+0x340>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d018      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a24      	ldr	r2, [pc, #144]	; (8003e30 <DMA_SetConfig+0x344>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d013      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a22      	ldr	r2, [pc, #136]	; (8003e34 <DMA_SetConfig+0x348>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00e      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <DMA_SetConfig+0x34c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d009      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <DMA_SetConfig+0x350>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d004      	beq.n	8003dcc <DMA_SetConfig+0x2e0>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <DMA_SetConfig+0x354>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d101      	bne.n	8003dd0 <DMA_SetConfig+0x2e4>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <DMA_SetConfig+0x2e6>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d020      	beq.n	8003e18 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2201      	movs	r2, #1
 8003de0:	409a      	lsls	r2, r3
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d108      	bne.n	8003e08 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	60da      	str	r2, [r3, #12]
}
 8003e06:	e007      	b.n	8003e18 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	60da      	str	r2, [r3, #12]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	58025408 	.word	0x58025408
 8003e28:	5802541c 	.word	0x5802541c
 8003e2c:	58025430 	.word	0x58025430
 8003e30:	58025444 	.word	0x58025444
 8003e34:	58025458 	.word	0x58025458
 8003e38:	5802546c 	.word	0x5802546c
 8003e3c:	58025480 	.word	0x58025480
 8003e40:	58025494 	.word	0x58025494

08003e44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a42      	ldr	r2, [pc, #264]	; (8003f5c <DMA_CalcBaseAndBitshift+0x118>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d04a      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a41      	ldr	r2, [pc, #260]	; (8003f60 <DMA_CalcBaseAndBitshift+0x11c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d045      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a3f      	ldr	r2, [pc, #252]	; (8003f64 <DMA_CalcBaseAndBitshift+0x120>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d040      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a3e      	ldr	r2, [pc, #248]	; (8003f68 <DMA_CalcBaseAndBitshift+0x124>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d03b      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a3c      	ldr	r2, [pc, #240]	; (8003f6c <DMA_CalcBaseAndBitshift+0x128>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d036      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a3b      	ldr	r2, [pc, #236]	; (8003f70 <DMA_CalcBaseAndBitshift+0x12c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d031      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a39      	ldr	r2, [pc, #228]	; (8003f74 <DMA_CalcBaseAndBitshift+0x130>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d02c      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a38      	ldr	r2, [pc, #224]	; (8003f78 <DMA_CalcBaseAndBitshift+0x134>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d027      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a36      	ldr	r2, [pc, #216]	; (8003f7c <DMA_CalcBaseAndBitshift+0x138>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d022      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a35      	ldr	r2, [pc, #212]	; (8003f80 <DMA_CalcBaseAndBitshift+0x13c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d01d      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a33      	ldr	r2, [pc, #204]	; (8003f84 <DMA_CalcBaseAndBitshift+0x140>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d018      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a32      	ldr	r2, [pc, #200]	; (8003f88 <DMA_CalcBaseAndBitshift+0x144>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a30      	ldr	r2, [pc, #192]	; (8003f8c <DMA_CalcBaseAndBitshift+0x148>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00e      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2f      	ldr	r2, [pc, #188]	; (8003f90 <DMA_CalcBaseAndBitshift+0x14c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d009      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a2d      	ldr	r2, [pc, #180]	; (8003f94 <DMA_CalcBaseAndBitshift+0x150>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xa8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2c      	ldr	r2, [pc, #176]	; (8003f98 <DMA_CalcBaseAndBitshift+0x154>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d101      	bne.n	8003ef0 <DMA_CalcBaseAndBitshift+0xac>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <DMA_CalcBaseAndBitshift+0xae>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d024      	beq.n	8003f40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	3b10      	subs	r3, #16
 8003efe:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <DMA_CalcBaseAndBitshift+0x158>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003f10:	5cd3      	ldrb	r3, [r2, r3]
 8003f12:	461a      	mov	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d908      	bls.n	8003f30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b1f      	ldr	r3, [pc, #124]	; (8003fa4 <DMA_CalcBaseAndBitshift+0x160>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	1d1a      	adds	r2, r3, #4
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	659a      	str	r2, [r3, #88]	; 0x58
 8003f2e:	e00d      	b.n	8003f4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <DMA_CalcBaseAndBitshift+0x160>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f3e:	e005      	b.n	8003f4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	40020010 	.word	0x40020010
 8003f60:	40020028 	.word	0x40020028
 8003f64:	40020040 	.word	0x40020040
 8003f68:	40020058 	.word	0x40020058
 8003f6c:	40020070 	.word	0x40020070
 8003f70:	40020088 	.word	0x40020088
 8003f74:	400200a0 	.word	0x400200a0
 8003f78:	400200b8 	.word	0x400200b8
 8003f7c:	40020410 	.word	0x40020410
 8003f80:	40020428 	.word	0x40020428
 8003f84:	40020440 	.word	0x40020440
 8003f88:	40020458 	.word	0x40020458
 8003f8c:	40020470 	.word	0x40020470
 8003f90:	40020488 	.word	0x40020488
 8003f94:	400204a0 	.word	0x400204a0
 8003f98:	400204b8 	.word	0x400204b8
 8003f9c:	aaaaaaab 	.word	0xaaaaaaab
 8003fa0:	08012350 	.word	0x08012350
 8003fa4:	fffffc00 	.word	0xfffffc00

08003fa8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d120      	bne.n	8003ffe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d858      	bhi.n	8004076 <DMA_CheckFifoParam+0xce>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <DMA_CheckFifoParam+0x24>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08003fdd 	.word	0x08003fdd
 8003fd0:	08003fef 	.word	0x08003fef
 8003fd4:	08003fdd 	.word	0x08003fdd
 8003fd8:	08004077 	.word	0x08004077
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d048      	beq.n	800407a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fec:	e045      	b.n	800407a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ff6:	d142      	bne.n	800407e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ffc:	e03f      	b.n	800407e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004006:	d123      	bne.n	8004050 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	2b03      	cmp	r3, #3
 800400e:	d838      	bhi.n	8004082 <DMA_CheckFifoParam+0xda>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <DMA_CheckFifoParam+0x70>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	08004029 	.word	0x08004029
 800401c:	0800402f 	.word	0x0800402f
 8004020:	08004029 	.word	0x08004029
 8004024:	08004041 	.word	0x08004041
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
        break;
 800402c:	e030      	b.n	8004090 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d025      	beq.n	8004086 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800403e:	e022      	b.n	8004086 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004048:	d11f      	bne.n	800408a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800404e:	e01c      	b.n	800408a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	2b02      	cmp	r3, #2
 8004056:	d902      	bls.n	800405e <DMA_CheckFifoParam+0xb6>
 8004058:	2b03      	cmp	r3, #3
 800405a:	d003      	beq.n	8004064 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800405c:	e018      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
        break;
 8004062:	e015      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00e      	beq.n	800408e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
    break;
 8004074:	e00b      	b.n	800408e <DMA_CheckFifoParam+0xe6>
        break;
 8004076:	bf00      	nop
 8004078:	e00a      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        break;
 800407a:	bf00      	nop
 800407c:	e008      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        break;
 800407e:	bf00      	nop
 8004080:	e006      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        break;
 8004082:	bf00      	nop
 8004084:	e004      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        break;
 8004086:	bf00      	nop
 8004088:	e002      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
        break;
 800408a:	bf00      	nop
 800408c:	e000      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
    break;
 800408e:	bf00      	nop
    }
  }

  return status;
 8004090:	7bfb      	ldrb	r3, [r7, #15]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop

080040a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a38      	ldr	r2, [pc, #224]	; (8004194 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d022      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a36      	ldr	r2, [pc, #216]	; (8004198 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01d      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a35      	ldr	r2, [pc, #212]	; (800419c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d018      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a33      	ldr	r2, [pc, #204]	; (80041a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d013      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a32      	ldr	r2, [pc, #200]	; (80041a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00e      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a30      	ldr	r2, [pc, #192]	; (80041a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d009      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a2f      	ldr	r2, [pc, #188]	; (80041ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d004      	beq.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a2d      	ldr	r2, [pc, #180]	; (80041b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004102:	2300      	movs	r3, #0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01a      	beq.n	800413e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	3b08      	subs	r3, #8
 8004110:	4a28      	ldr	r2, [pc, #160]	; (80041b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	461a      	mov	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a24      	ldr	r2, [pc, #144]	; (80041bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800412c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	2201      	movs	r2, #1
 8004136:	409a      	lsls	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800413c:	e024      	b.n	8004188 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	3b10      	subs	r3, #16
 8004146:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004148:	fba2 2303 	umull	r2, r3, r2, r3
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d806      	bhi.n	8004166 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d902      	bls.n	8004166 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3308      	adds	r3, #8
 8004164:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4b18      	ldr	r3, [pc, #96]	; (80041cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	461a      	mov	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004178:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2201      	movs	r2, #1
 8004182:	409a      	lsls	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	58025408 	.word	0x58025408
 8004198:	5802541c 	.word	0x5802541c
 800419c:	58025430 	.word	0x58025430
 80041a0:	58025444 	.word	0x58025444
 80041a4:	58025458 	.word	0x58025458
 80041a8:	5802546c 	.word	0x5802546c
 80041ac:	58025480 	.word	0x58025480
 80041b0:	58025494 	.word	0x58025494
 80041b4:	cccccccd 	.word	0xcccccccd
 80041b8:	16009600 	.word	0x16009600
 80041bc:	58025880 	.word	0x58025880
 80041c0:	aaaaaaab 	.word	0xaaaaaaab
 80041c4:	400204b8 	.word	0x400204b8
 80041c8:	4002040f 	.word	0x4002040f
 80041cc:	10008200 	.word	0x10008200
 80041d0:	40020880 	.word	0x40020880

080041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d04a      	beq.n	8004280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d847      	bhi.n	8004280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a25      	ldr	r2, [pc, #148]	; (800428c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d022      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a24      	ldr	r2, [pc, #144]	; (8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d01d      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a22      	ldr	r2, [pc, #136]	; (8004294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d018      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a21      	ldr	r2, [pc, #132]	; (8004298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d013      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1f      	ldr	r2, [pc, #124]	; (800429c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00e      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d009      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d101      	bne.n	8004244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004244:	2300      	movs	r3, #0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4b17      	ldr	r3, [pc, #92]	; (80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	461a      	mov	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800425c:	671a      	str	r2, [r3, #112]	; 0x70
 800425e:	e009      	b.n	8004274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	461a      	mov	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a11      	ldr	r2, [pc, #68]	; (80042b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004272:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3b01      	subs	r3, #1
 8004278:	2201      	movs	r2, #1
 800427a:	409a      	lsls	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	58025408 	.word	0x58025408
 8004290:	5802541c 	.word	0x5802541c
 8004294:	58025430 	.word	0x58025430
 8004298:	58025444 	.word	0x58025444
 800429c:	58025458 	.word	0x58025458
 80042a0:	5802546c 	.word	0x5802546c
 80042a4:	58025480 	.word	0x58025480
 80042a8:	58025494 	.word	0x58025494
 80042ac:	1600963f 	.word	0x1600963f
 80042b0:	58025940 	.word	0x58025940
 80042b4:	1000823f 	.word	0x1000823f
 80042b8:	40020940 	.word	0x40020940

080042bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042bc:	b480      	push	{r7}
 80042be:	b089      	sub	sp, #36	; 0x24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80042ca:	4b89      	ldr	r3, [pc, #548]	; (80044f0 <HAL_GPIO_Init+0x234>)
 80042cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042ce:	e194      	b.n	80045fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	2101      	movs	r1, #1
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	fa01 f303 	lsl.w	r3, r1, r3
 80042dc:	4013      	ands	r3, r2
 80042de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 8186 	beq.w	80045f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d00b      	beq.n	8004308 <HAL_GPIO_Init+0x4c>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d007      	beq.n	8004308 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042fc:	2b11      	cmp	r3, #17
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b12      	cmp	r3, #18
 8004306:	d130      	bne.n	800436a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	2203      	movs	r2, #3
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800433e:	2201      	movs	r2, #1
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4013      	ands	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	f003 0201 	and.w	r2, r3, #1
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2203      	movs	r2, #3
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0xee>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b12      	cmp	r3, #18
 80043a8:	d123      	bne.n	80043f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	08da      	lsrs	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3208      	adds	r2, #8
 80043b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	220f      	movs	r2, #15
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	08da      	lsrs	r2, r3, #3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3208      	adds	r2, #8
 80043ec:	69b9      	ldr	r1, [r7, #24]
 80043ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	2203      	movs	r2, #3
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4013      	ands	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f003 0203 	and.w	r2, r3, #3
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4313      	orrs	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 80e0 	beq.w	80045f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004434:	4b2f      	ldr	r3, [pc, #188]	; (80044f4 <HAL_GPIO_Init+0x238>)
 8004436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800443a:	4a2e      	ldr	r2, [pc, #184]	; (80044f4 <HAL_GPIO_Init+0x238>)
 800443c:	f043 0302 	orr.w	r3, r3, #2
 8004440:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004444:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <HAL_GPIO_Init+0x238>)
 8004446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004452:	4a29      	ldr	r2, [pc, #164]	; (80044f8 <HAL_GPIO_Init+0x23c>)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	089b      	lsrs	r3, r3, #2
 8004458:	3302      	adds	r3, #2
 800445a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	220f      	movs	r2, #15
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a20      	ldr	r2, [pc, #128]	; (80044fc <HAL_GPIO_Init+0x240>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d052      	beq.n	8004524 <HAL_GPIO_Init+0x268>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_GPIO_Init+0x244>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d031      	beq.n	80044ea <HAL_GPIO_Init+0x22e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <HAL_GPIO_Init+0x248>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d02b      	beq.n	80044e6 <HAL_GPIO_Init+0x22a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <HAL_GPIO_Init+0x24c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d025      	beq.n	80044e2 <HAL_GPIO_Init+0x226>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a1c      	ldr	r2, [pc, #112]	; (800450c <HAL_GPIO_Init+0x250>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01f      	beq.n	80044de <HAL_GPIO_Init+0x222>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <HAL_GPIO_Init+0x254>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d019      	beq.n	80044da <HAL_GPIO_Init+0x21e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1a      	ldr	r2, [pc, #104]	; (8004514 <HAL_GPIO_Init+0x258>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_GPIO_Init+0x21a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a19      	ldr	r2, [pc, #100]	; (8004518 <HAL_GPIO_Init+0x25c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00d      	beq.n	80044d2 <HAL_GPIO_Init+0x216>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a18      	ldr	r2, [pc, #96]	; (800451c <HAL_GPIO_Init+0x260>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <HAL_GPIO_Init+0x212>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a17      	ldr	r2, [pc, #92]	; (8004520 <HAL_GPIO_Init+0x264>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d101      	bne.n	80044ca <HAL_GPIO_Init+0x20e>
 80044c6:	2309      	movs	r3, #9
 80044c8:	e02d      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044ca:	230a      	movs	r3, #10
 80044cc:	e02b      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044ce:	2308      	movs	r3, #8
 80044d0:	e029      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044d2:	2307      	movs	r3, #7
 80044d4:	e027      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044d6:	2306      	movs	r3, #6
 80044d8:	e025      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044da:	2305      	movs	r3, #5
 80044dc:	e023      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044de:	2304      	movs	r3, #4
 80044e0:	e021      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044e2:	2303      	movs	r3, #3
 80044e4:	e01f      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e01d      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e01b      	b.n	8004526 <HAL_GPIO_Init+0x26a>
 80044ee:	bf00      	nop
 80044f0:	58000080 	.word	0x58000080
 80044f4:	58024400 	.word	0x58024400
 80044f8:	58000400 	.word	0x58000400
 80044fc:	58020000 	.word	0x58020000
 8004500:	58020400 	.word	0x58020400
 8004504:	58020800 	.word	0x58020800
 8004508:	58020c00 	.word	0x58020c00
 800450c:	58021000 	.word	0x58021000
 8004510:	58021400 	.word	0x58021400
 8004514:	58021800 	.word	0x58021800
 8004518:	58021c00 	.word	0x58021c00
 800451c:	58022000 	.word	0x58022000
 8004520:	58022400 	.word	0x58022400
 8004524:	2300      	movs	r3, #0
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	f002 0203 	and.w	r2, r2, #3
 800452c:	0092      	lsls	r2, r2, #2
 800452e:	4093      	lsls	r3, r2
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4313      	orrs	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004536:	4938      	ldr	r1, [pc, #224]	; (8004618 <HAL_GPIO_Init+0x35c>)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	089b      	lsrs	r3, r3, #2
 800453c:	3302      	adds	r3, #2
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	43db      	mvns	r3, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80045be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4013      	ands	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80045ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	3301      	adds	r3, #1
 80045f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	f47f ae63 	bne.w	80042d0 <HAL_GPIO_Init+0x14>
  }
}
 800460a:	bf00      	nop
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	58000400 	.word	0x58000400

0800461c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	887b      	ldrh	r3, [r7, #2]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
 8004638:	e001      	b.n	800463e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800463e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	807b      	strh	r3, [r7, #2]
 8004658:	4613      	mov	r3, r2
 800465a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800465c:	787b      	ldrb	r3, [r7, #1]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004662:	887a      	ldrh	r2, [r7, #2]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004668:	e003      	b.n	8004672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800466a:	887b      	ldrh	r3, [r7, #2]
 800466c:	041a      	lsls	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	619a      	str	r2, [r3, #24]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e07f      	b.n	8004792 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f00a faa2 	bl	800ebf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2224      	movs	r2, #36	; 0x24
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d107      	bne.n	80046fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	e006      	b.n	8004708 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004706:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	2b02      	cmp	r3, #2
 800470e:	d104      	bne.n	800471a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004718:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_I2C_Init+0x11c>)
 8004726:	430b      	orrs	r3, r1
 8004728:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004738:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	ea42 0103 	orr.w	r1, r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	021a      	lsls	r2, r3, #8
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69d9      	ldr	r1, [r3, #28]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	02008000 	.word	0x02008000

080047a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d138      	bne.n	8004828 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e032      	b.n	800482a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2224      	movs	r2, #36	; 0x24
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0201 	bic.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6819      	ldr	r1, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004836:	b480      	push	{r7}
 8004838:	b085      	sub	sp, #20
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b20      	cmp	r3, #32
 800484a:	d139      	bne.n	80048c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004856:	2302      	movs	r3, #2
 8004858:	e033      	b.n	80048c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2224      	movs	r2, #36	; 0x24
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004888:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	e000      	b.n	80048c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048c0:	2302      	movs	r3, #2
  }
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80048d8:	4b19      	ldr	r3, [pc, #100]	; (8004940 <HAL_PWREx_ConfigSupply+0x70>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d00a      	beq.n	80048fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80048e4:	4b16      	ldr	r3, [pc, #88]	; (8004940 <HAL_PWREx_ConfigSupply+0x70>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d001      	beq.n	80048f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e01f      	b.n	8004936 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	e01d      	b.n	8004936 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80048fa:	4b11      	ldr	r3, [pc, #68]	; (8004940 <HAL_PWREx_ConfigSupply+0x70>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f023 0207 	bic.w	r2, r3, #7
 8004902:	490f      	ldr	r1, [pc, #60]	; (8004940 <HAL_PWREx_ConfigSupply+0x70>)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4313      	orrs	r3, r2
 8004908:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800490a:	f7fb fd6b 	bl	80003e4 <HAL_GetTick>
 800490e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004910:	e009      	b.n	8004926 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004912:	f7fb fd67 	bl	80003e4 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004920:	d901      	bls.n	8004926 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e007      	b.n	8004936 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <HAL_PWREx_ConfigSupply+0x70>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800492e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004932:	d1ee      	bne.n	8004912 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	58024800 	.word	0x58024800

08004944 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08c      	sub	sp, #48	; 0x30
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e3c4      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 8087 	beq.w	8004a72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004964:	4ba2      	ldr	r3, [pc, #648]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800496c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800496e:	4ba0      	ldr	r3, [pc, #640]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004972:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	2b10      	cmp	r3, #16
 8004978:	d007      	beq.n	800498a <HAL_RCC_OscConfig+0x46>
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	2b18      	cmp	r3, #24
 800497e:	d110      	bne.n	80049a2 <HAL_RCC_OscConfig+0x5e>
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d10b      	bne.n	80049a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800498a:	4b99      	ldr	r3, [pc, #612]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d06c      	beq.n	8004a70 <HAL_RCC_OscConfig+0x12c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d168      	bne.n	8004a70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e39e      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049aa:	d106      	bne.n	80049ba <HAL_RCC_OscConfig+0x76>
 80049ac:	4b90      	ldr	r3, [pc, #576]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a8f      	ldr	r2, [pc, #572]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 80049b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	e02e      	b.n	8004a18 <HAL_RCC_OscConfig+0xd4>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10c      	bne.n	80049dc <HAL_RCC_OscConfig+0x98>
 80049c2:	4b8b      	ldr	r3, [pc, #556]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a8a      	ldr	r2, [pc, #552]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	4b88      	ldr	r3, [pc, #544]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a87      	ldr	r2, [pc, #540]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e01d      	b.n	8004a18 <HAL_RCC_OscConfig+0xd4>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCC_OscConfig+0xbc>
 80049e6:	4b82      	ldr	r3, [pc, #520]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a81      	ldr	r2, [pc, #516]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	4b7f      	ldr	r3, [pc, #508]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a7e      	ldr	r2, [pc, #504]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	e00b      	b.n	8004a18 <HAL_RCC_OscConfig+0xd4>
 8004a00:	4b7b      	ldr	r3, [pc, #492]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a7a      	ldr	r2, [pc, #488]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	4b78      	ldr	r3, [pc, #480]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a77      	ldr	r2, [pc, #476]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d013      	beq.n	8004a48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fb fce0 	bl	80003e4 <HAL_GetTick>
 8004a24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a28:	f7fb fcdc 	bl	80003e4 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	; 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e352      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a3a:	4b6d      	ldr	r3, [pc, #436]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0xe4>
 8004a46:	e014      	b.n	8004a72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fb fccc 	bl	80003e4 <HAL_GetTick>
 8004a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a50:	f7fb fcc8 	bl	80003e4 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	; 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e33e      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a62:	4b63      	ldr	r3, [pc, #396]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x10c>
 8004a6e:	e000      	b.n	8004a72 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 8092 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a80:	4b5b      	ldr	r3, [pc, #364]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a8a:	4b59      	ldr	r3, [pc, #356]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d007      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x162>
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	2b18      	cmp	r3, #24
 8004a9a:	d12d      	bne.n	8004af8 <HAL_RCC_OscConfig+0x1b4>
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d128      	bne.n	8004af8 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aa6:	4b52      	ldr	r3, [pc, #328]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_RCC_OscConfig+0x17a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e310      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004abe:	f7fb fcbf 	bl	8000440 <HAL_GetREVID>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	f241 0303 	movw	r3, #4099	; 0x1003
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d80a      	bhi.n	8004ae2 <HAL_RCC_OscConfig+0x19e>
 8004acc:	4b48      	ldr	r3, [pc, #288]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	031b      	lsls	r3, r3, #12
 8004ada:	4945      	ldr	r1, [pc, #276]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae0:	e060      	b.n	8004ba4 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae2:	4b43      	ldr	r3, [pc, #268]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	061b      	lsls	r3, r3, #24
 8004af0:	493f      	ldr	r1, [pc, #252]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af6:	e055      	b.n	8004ba4 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d038      	beq.n	8004b72 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b00:	4b3b      	ldr	r3, [pc, #236]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f023 0219 	bic.w	r2, r3, #25
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4938      	ldr	r1, [pc, #224]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fb fc67 	bl	80003e4 <HAL_GetTick>
 8004b16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b1a:	f7fb fc63 	bl	80003e4 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e2d9      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b2c:	4b30      	ldr	r3, [pc, #192]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b38:	f7fb fc82 	bl	8000440 <HAL_GetREVID>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d80a      	bhi.n	8004b5c <HAL_RCC_OscConfig+0x218>
 8004b46:	4b2a      	ldr	r3, [pc, #168]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	031b      	lsls	r3, r3, #12
 8004b54:	4926      	ldr	r1, [pc, #152]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	604b      	str	r3, [r1, #4]
 8004b5a:	e023      	b.n	8004ba4 <HAL_RCC_OscConfig+0x260>
 8004b5c:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	061b      	lsls	r3, r3, #24
 8004b6a:	4921      	ldr	r1, [pc, #132]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]
 8004b70:	e018      	b.n	8004ba4 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b72:	4b1f      	ldr	r3, [pc, #124]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1e      	ldr	r2, [pc, #120]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7e:	f7fb fc31 	bl	80003e4 <HAL_GetTick>
 8004b82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b86:	f7fb fc2d 	bl	80003e4 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e2a3      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f0      	bne.n	8004b86 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8091 	beq.w	8004cd4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d007      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x294>
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b18      	cmp	r3, #24
 8004bcc:	d12f      	bne.n	8004c2e <HAL_RCC_OscConfig+0x2ea>
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d12a      	bne.n	8004c2e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <HAL_RCC_OscConfig+0x2ac>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x2b0>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	2b80      	cmp	r3, #128	; 0x80
 8004bea:	d003      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e277      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
 8004bf0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bf4:	f7fb fc24 	bl	8000440 <HAL_GetREVID>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	f241 0303 	movw	r3, #4099	; 0x1003
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d80a      	bhi.n	8004c18 <HAL_RCC_OscConfig+0x2d4>
 8004c02:	4ba2      	ldr	r3, [pc, #648]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	069b      	lsls	r3, r3, #26
 8004c10:	499e      	ldr	r1, [pc, #632]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c16:	e05d      	b.n	8004cd4 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c18:	4b9c      	ldr	r3, [pc, #624]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	061b      	lsls	r3, r3, #24
 8004c26:	4999      	ldr	r1, [pc, #612]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c2c:	e052      	b.n	8004cd4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d035      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c36:	4b95      	ldr	r3, [pc, #596]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a94      	ldr	r2, [pc, #592]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fb fbcf 	bl	80003e4 <HAL_GetTick>
 8004c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c4a:	f7fb fbcb 	bl	80003e4 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e241      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c5c:	4b8b      	ldr	r3, [pc, #556]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c68:	f7fb fbea 	bl	8000440 <HAL_GetREVID>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d80a      	bhi.n	8004c8c <HAL_RCC_OscConfig+0x348>
 8004c76:	4b85      	ldr	r3, [pc, #532]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	069b      	lsls	r3, r3, #26
 8004c84:	4981      	ldr	r1, [pc, #516]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	604b      	str	r3, [r1, #4]
 8004c8a:	e023      	b.n	8004cd4 <HAL_RCC_OscConfig+0x390>
 8004c8c:	4b7f      	ldr	r3, [pc, #508]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	061b      	lsls	r3, r3, #24
 8004c9a:	497c      	ldr	r1, [pc, #496]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60cb      	str	r3, [r1, #12]
 8004ca0:	e018      	b.n	8004cd4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ca2:	4b7a      	ldr	r3, [pc, #488]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a79      	ldr	r2, [pc, #484]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cae:	f7fb fb99 	bl	80003e4 <HAL_GetTick>
 8004cb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004cb6:	f7fb fb95 	bl	80003e4 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e20b      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cc8:	4b70      	ldr	r3, [pc, #448]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f0      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d036      	beq.n	8004d4e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d019      	beq.n	8004d1c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ce8:	4b68      	ldr	r3, [pc, #416]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cec:	4a67      	ldr	r2, [pc, #412]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fb fb76 	bl	80003e4 <HAL_GetTick>
 8004cf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cfc:	f7fb fb72 	bl	80003e4 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e1e8      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d0e:	4b5f      	ldr	r3, [pc, #380]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0x3b8>
 8004d1a:	e018      	b.n	8004d4e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d1c:	4b5b      	ldr	r3, [pc, #364]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d20:	4a5a      	ldr	r2, [pc, #360]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d28:	f7fb fb5c 	bl	80003e4 <HAL_GetTick>
 8004d2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d30:	f7fb fb58 	bl	80003e4 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e1ce      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d42:	4b52      	ldr	r3, [pc, #328]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f0      	bne.n	8004d30 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d036      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d019      	beq.n	8004d96 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d62:	4b4a      	ldr	r3, [pc, #296]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a49      	ldr	r2, [pc, #292]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004d68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d6e:	f7fb fb39 	bl	80003e4 <HAL_GetTick>
 8004d72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d76:	f7fb fb35 	bl	80003e4 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e1ab      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d88:	4b40      	ldr	r3, [pc, #256]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCC_OscConfig+0x432>
 8004d94:	e018      	b.n	8004dc8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d96:	4b3d      	ldr	r3, [pc, #244]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a3c      	ldr	r2, [pc, #240]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004d9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004da0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004da2:	f7fb fb1f 	bl	80003e4 <HAL_GetTick>
 8004da6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004daa:	f7fb fb1b 	bl	80003e4 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e191      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dbc:	4b33      	ldr	r3, [pc, #204]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1f0      	bne.n	8004daa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8086 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004dd6:	4b2e      	ldr	r3, [pc, #184]	; (8004e90 <HAL_RCC_OscConfig+0x54c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a2d      	ldr	r2, [pc, #180]	; (8004e90 <HAL_RCC_OscConfig+0x54c>)
 8004ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004de2:	f7fb faff 	bl	80003e4 <HAL_GetTick>
 8004de6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dea:	f7fb fafb 	bl	80003e4 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b64      	cmp	r3, #100	; 0x64
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e171      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dfc:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <HAL_RCC_OscConfig+0x54c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d106      	bne.n	8004e1e <HAL_RCC_OscConfig+0x4da>
 8004e10:	4b1e      	ldr	r3, [pc, #120]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	4a1d      	ldr	r2, [pc, #116]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1c:	e02d      	b.n	8004e7a <HAL_RCC_OscConfig+0x536>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10c      	bne.n	8004e40 <HAL_RCC_OscConfig+0x4fc>
 8004e26:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e2c:	f023 0301 	bic.w	r3, r3, #1
 8004e30:	6713      	str	r3, [r2, #112]	; 0x70
 8004e32:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e38:	f023 0304 	bic.w	r3, r3, #4
 8004e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3e:	e01c      	b.n	8004e7a <HAL_RCC_OscConfig+0x536>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b05      	cmp	r3, #5
 8004e46:	d10c      	bne.n	8004e62 <HAL_RCC_OscConfig+0x51e>
 8004e48:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4c:	4a0f      	ldr	r2, [pc, #60]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e4e:	f043 0304 	orr.w	r3, r3, #4
 8004e52:	6713      	str	r3, [r2, #112]	; 0x70
 8004e54:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	4a0c      	ldr	r2, [pc, #48]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e60:	e00b      	b.n	8004e7a <HAL_RCC_OscConfig+0x536>
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e66:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6e:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	4a06      	ldr	r2, [pc, #24]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e74:	f023 0304 	bic.w	r3, r3, #4
 8004e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01a      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e82:	f7fb faaf 	bl	80003e4 <HAL_GetTick>
 8004e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e88:	e00f      	b.n	8004eaa <HAL_RCC_OscConfig+0x566>
 8004e8a:	bf00      	nop
 8004e8c:	58024400 	.word	0x58024400
 8004e90:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e94:	f7fb faa6 	bl	80003e4 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e11a      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eaa:	4b8f      	ldr	r3, [pc, #572]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0ee      	beq.n	8004e94 <HAL_RCC_OscConfig+0x550>
 8004eb6:	e014      	b.n	8004ee2 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fb fa94 	bl	80003e4 <HAL_GetTick>
 8004ebc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ebe:	e00a      	b.n	8004ed6 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec0:	f7fb fa90 	bl	80003e4 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e104      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ed6:	4b84      	ldr	r3, [pc, #528]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ee      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 80f9 	beq.w	80050de <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004eec:	4b7e      	ldr	r3, [pc, #504]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ef4:	2b18      	cmp	r3, #24
 8004ef6:	f000 80b4 	beq.w	8005062 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	f040 8095 	bne.w	800502e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f04:	4b78      	ldr	r3, [pc, #480]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a77      	ldr	r2, [pc, #476]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fb fa68 	bl	80003e4 <HAL_GetTick>
 8004f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fb fa64 	bl	80003e4 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e0da      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f2a:	4b6f      	ldr	r3, [pc, #444]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f36:	4b6c      	ldr	r3, [pc, #432]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f3a:	4b6c      	ldr	r3, [pc, #432]	; (80050ec <HAL_RCC_OscConfig+0x7a8>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f46:	0112      	lsls	r2, r2, #4
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	4967      	ldr	r1, [pc, #412]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	628b      	str	r3, [r1, #40]	; 0x28
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	3b01      	subs	r3, #1
 8004f56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	025b      	lsls	r3, r3, #9
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	041b      	lsls	r3, r3, #16
 8004f6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	061b      	lsls	r3, r3, #24
 8004f7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f80:	4959      	ldr	r1, [pc, #356]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004f86:	4b58      	ldr	r3, [pc, #352]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	4a57      	ldr	r2, [pc, #348]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f92:	4b55      	ldr	r3, [pc, #340]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f96:	4b56      	ldr	r3, [pc, #344]	; (80050f0 <HAL_RCC_OscConfig+0x7ac>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f9e:	00d2      	lsls	r2, r2, #3
 8004fa0:	4951      	ldr	r1, [pc, #324]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004fa6:	4b50      	ldr	r3, [pc, #320]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	f023 020c 	bic.w	r2, r3, #12
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	494d      	ldr	r1, [pc, #308]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fb8:	4b4b      	ldr	r3, [pc, #300]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	f023 0202 	bic.w	r2, r3, #2
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc4:	4948      	ldr	r1, [pc, #288]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fca:	4b47      	ldr	r3, [pc, #284]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	4a46      	ldr	r2, [pc, #280]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd6:	4b44      	ldr	r3, [pc, #272]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	4a43      	ldr	r2, [pc, #268]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004fe2:	4b41      	ldr	r3, [pc, #260]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	4a40      	ldr	r2, [pc, #256]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004fee:	4b3e      	ldr	r3, [pc, #248]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	4a3d      	ldr	r2, [pc, #244]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ffa:	4b3b      	ldr	r3, [pc, #236]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a3a      	ldr	r2, [pc, #232]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8005000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fb f9ed 	bl	80003e4 <HAL_GetTick>
 800500a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800500e:	f7fb f9e9 	bl	80003e4 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e05f      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005020:	4b31      	ldr	r3, [pc, #196]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x6ca>
 800502c:	e057      	b.n	80050de <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502e:	4b2e      	ldr	r3, [pc, #184]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a2d      	ldr	r2, [pc, #180]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8005034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7fb f9d3 	bl	80003e4 <HAL_GetTick>
 800503e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005042:	f7fb f9cf 	bl	80003e4 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e045      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005054:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f0      	bne.n	8005042 <HAL_RCC_OscConfig+0x6fe>
 8005060:	e03d      	b.n	80050de <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005062:	4b21      	ldr	r3, [pc, #132]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 8005064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005066:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005068:	4b1f      	ldr	r3, [pc, #124]	; (80050e8 <HAL_RCC_OscConfig+0x7a4>)
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	2b01      	cmp	r3, #1
 8005074:	d031      	beq.n	80050da <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f003 0203 	and.w	r2, r3, #3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005080:	429a      	cmp	r2, r3
 8005082:	d12a      	bne.n	80050da <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	091b      	lsrs	r3, r3, #4
 8005088:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d122      	bne.n	80050da <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d11a      	bne.n	80050da <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	0a5b      	lsrs	r3, r3, #9
 80050a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d111      	bne.n	80050da <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	0c1b      	lsrs	r3, r3, #16
 80050ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d108      	bne.n	80050da <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	0e1b      	lsrs	r3, r3, #24
 80050cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d001      	beq.n	80050de <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3730      	adds	r7, #48	; 0x30
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	58024400 	.word	0x58024400
 80050ec:	fffffc0c 	.word	0xfffffc0c
 80050f0:	ffff0007 	.word	0xffff0007

080050f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e19c      	b.n	8005442 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005108:	4b8a      	ldr	r3, [pc, #552]	; (8005334 <HAL_RCC_ClockConfig+0x240>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d910      	bls.n	8005138 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b87      	ldr	r3, [pc, #540]	; (8005334 <HAL_RCC_ClockConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 020f 	bic.w	r2, r3, #15
 800511e:	4985      	ldr	r1, [pc, #532]	; (8005334 <HAL_RCC_ClockConfig+0x240>)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	4313      	orrs	r3, r2
 8005124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b83      	ldr	r3, [pc, #524]	; (8005334 <HAL_RCC_ClockConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e184      	b.n	8005442 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d010      	beq.n	8005166 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	4b7b      	ldr	r3, [pc, #492]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005150:	429a      	cmp	r2, r3
 8005152:	d908      	bls.n	8005166 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005154:	4b78      	ldr	r3, [pc, #480]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	4975      	ldr	r1, [pc, #468]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 8005162:	4313      	orrs	r3, r2
 8005164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d010      	beq.n	8005194 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695a      	ldr	r2, [r3, #20]
 8005176:	4b70      	ldr	r3, [pc, #448]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800517e:	429a      	cmp	r2, r3
 8005180:	d908      	bls.n	8005194 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005182:	4b6d      	ldr	r3, [pc, #436]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	496a      	ldr	r1, [pc, #424]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 8005190:	4313      	orrs	r3, r2
 8005192:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2b00      	cmp	r3, #0
 800519e:	d010      	beq.n	80051c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	4b64      	ldr	r3, [pc, #400]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d908      	bls.n	80051c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051b0:	4b61      	ldr	r3, [pc, #388]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	495e      	ldr	r1, [pc, #376]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d010      	beq.n	80051f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	4b59      	ldr	r3, [pc, #356]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051da:	429a      	cmp	r2, r3
 80051dc:	d908      	bls.n	80051f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80051de:	4b56      	ldr	r3, [pc, #344]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	4953      	ldr	r1, [pc, #332]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d010      	beq.n	800521e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	4b4d      	ldr	r3, [pc, #308]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	f003 030f 	and.w	r3, r3, #15
 8005208:	429a      	cmp	r2, r3
 800520a:	d908      	bls.n	800521e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800520c:	4b4a      	ldr	r3, [pc, #296]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f023 020f 	bic.w	r2, r3, #15
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	4947      	ldr	r1, [pc, #284]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 800521a:	4313      	orrs	r3, r2
 800521c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d055      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800522a:	4b43      	ldr	r3, [pc, #268]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	4940      	ldr	r1, [pc, #256]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 8005238:	4313      	orrs	r3, r2
 800523a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d107      	bne.n	8005254 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005244:	4b3c      	ldr	r3, [pc, #240]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d121      	bne.n	8005294 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0f6      	b.n	8005442 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d107      	bne.n	800526c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800525c:	4b36      	ldr	r3, [pc, #216]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d115      	bne.n	8005294 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0ea      	b.n	8005442 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d107      	bne.n	8005284 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005274:	4b30      	ldr	r3, [pc, #192]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d109      	bne.n	8005294 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0de      	b.n	8005442 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005284:	4b2c      	ldr	r3, [pc, #176]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0d6      	b.n	8005442 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005294:	4b28      	ldr	r3, [pc, #160]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f023 0207 	bic.w	r2, r3, #7
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	4925      	ldr	r1, [pc, #148]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a6:	f7fb f89d 	bl	80003e4 <HAL_GetTick>
 80052aa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ac:	e00a      	b.n	80052c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ae:	f7fb f899 	bl	80003e4 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052bc:	4293      	cmp	r3, r2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e0be      	b.n	8005442 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c4:	4b1c      	ldr	r3, [pc, #112]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d1eb      	bne.n	80052ae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d010      	beq.n	8005304 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	4b14      	ldr	r3, [pc, #80]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d208      	bcs.n	8005304 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f2:	4b11      	ldr	r3, [pc, #68]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f023 020f 	bic.w	r2, r3, #15
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	490e      	ldr	r1, [pc, #56]	; (8005338 <HAL_RCC_ClockConfig+0x244>)
 8005300:	4313      	orrs	r3, r2
 8005302:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCC_ClockConfig+0x240>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d214      	bcs.n	800533c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005312:	4b08      	ldr	r3, [pc, #32]	; (8005334 <HAL_RCC_ClockConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 020f 	bic.w	r2, r3, #15
 800531a:	4906      	ldr	r1, [pc, #24]	; (8005334 <HAL_RCC_ClockConfig+0x240>)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	4313      	orrs	r3, r2
 8005320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005322:	4b04      	ldr	r3, [pc, #16]	; (8005334 <HAL_RCC_ClockConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e086      	b.n	8005442 <HAL_RCC_ClockConfig+0x34e>
 8005334:	52002000 	.word	0x52002000
 8005338:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d010      	beq.n	800536a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	4b3f      	ldr	r3, [pc, #252]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005354:	429a      	cmp	r2, r3
 8005356:	d208      	bcs.n	800536a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005358:	4b3c      	ldr	r3, [pc, #240]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	4939      	ldr	r1, [pc, #228]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 8005366:	4313      	orrs	r3, r2
 8005368:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d010      	beq.n	8005398 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	4b34      	ldr	r3, [pc, #208]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005382:	429a      	cmp	r2, r3
 8005384:	d208      	bcs.n	8005398 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005386:	4b31      	ldr	r3, [pc, #196]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	492e      	ldr	r1, [pc, #184]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 8005394:	4313      	orrs	r3, r2
 8005396:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d010      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699a      	ldr	r2, [r3, #24]
 80053a8:	4b28      	ldr	r3, [pc, #160]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d208      	bcs.n	80053c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053b4:	4b25      	ldr	r3, [pc, #148]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	4922      	ldr	r1, [pc, #136]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d010      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69da      	ldr	r2, [r3, #28]
 80053d6:	4b1d      	ldr	r3, [pc, #116]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053de:	429a      	cmp	r2, r3
 80053e0:	d208      	bcs.n	80053f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80053e2:	4b1a      	ldr	r3, [pc, #104]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	4917      	ldr	r1, [pc, #92]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053f4:	f000 f834 	bl	8005460 <HAL_RCC_GetSysClockFreq>
 80053f8:	4601      	mov	r1, r0
 80053fa:	4b14      	ldr	r3, [pc, #80]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	0a1b      	lsrs	r3, r3, #8
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	4a12      	ldr	r2, [pc, #72]	; (8005450 <HAL_RCC_ClockConfig+0x35c>)
 8005406:	5cd3      	ldrb	r3, [r2, r3]
 8005408:	f003 031f 	and.w	r3, r3, #31
 800540c:	fa21 f303 	lsr.w	r3, r1, r3
 8005410:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005412:	4b0e      	ldr	r3, [pc, #56]	; (800544c <HAL_RCC_ClockConfig+0x358>)
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	4a0d      	ldr	r2, [pc, #52]	; (8005450 <HAL_RCC_ClockConfig+0x35c>)
 800541c:	5cd3      	ldrb	r3, [r2, r3]
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
 8005428:	4a0a      	ldr	r2, [pc, #40]	; (8005454 <HAL_RCC_ClockConfig+0x360>)
 800542a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800542c:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <HAL_RCC_ClockConfig+0x364>)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005432:	4b0a      	ldr	r3, [pc, #40]	; (800545c <HAL_RCC_ClockConfig+0x368>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f7fa ff8a 	bl	8000350 <HAL_InitTick>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	58024400 	.word	0x58024400
 8005450:	080127ac 	.word	0x080127ac
 8005454:	20000014 	.word	0x20000014
 8005458:	20000010 	.word	0x20000010
 800545c:	20000000 	.word	0x20000000

08005460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005460:	b480      	push	{r7}
 8005462:	b089      	sub	sp, #36	; 0x24
 8005464:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005466:	4baf      	ldr	r3, [pc, #700]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800546e:	2b18      	cmp	r3, #24
 8005470:	f200 814e 	bhi.w	8005710 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005474:	a201      	add	r2, pc, #4	; (adr r2, 800547c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547a:	bf00      	nop
 800547c:	080054e1 	.word	0x080054e1
 8005480:	08005711 	.word	0x08005711
 8005484:	08005711 	.word	0x08005711
 8005488:	08005711 	.word	0x08005711
 800548c:	08005711 	.word	0x08005711
 8005490:	08005711 	.word	0x08005711
 8005494:	08005711 	.word	0x08005711
 8005498:	08005711 	.word	0x08005711
 800549c:	08005507 	.word	0x08005507
 80054a0:	08005711 	.word	0x08005711
 80054a4:	08005711 	.word	0x08005711
 80054a8:	08005711 	.word	0x08005711
 80054ac:	08005711 	.word	0x08005711
 80054b0:	08005711 	.word	0x08005711
 80054b4:	08005711 	.word	0x08005711
 80054b8:	08005711 	.word	0x08005711
 80054bc:	0800550d 	.word	0x0800550d
 80054c0:	08005711 	.word	0x08005711
 80054c4:	08005711 	.word	0x08005711
 80054c8:	08005711 	.word	0x08005711
 80054cc:	08005711 	.word	0x08005711
 80054d0:	08005711 	.word	0x08005711
 80054d4:	08005711 	.word	0x08005711
 80054d8:	08005711 	.word	0x08005711
 80054dc:	08005513 	.word	0x08005513
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054e0:	4b90      	ldr	r3, [pc, #576]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d009      	beq.n	8005500 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054ec:	4b8d      	ldr	r3, [pc, #564]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	08db      	lsrs	r3, r3, #3
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	4a8c      	ldr	r2, [pc, #560]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80054f8:	fa22 f303 	lsr.w	r3, r2, r3
 80054fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80054fe:	e10a      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005500:	4b89      	ldr	r3, [pc, #548]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005502:	61bb      	str	r3, [r7, #24]
    break;
 8005504:	e107      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005506:	4b89      	ldr	r3, [pc, #548]	; (800572c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005508:	61bb      	str	r3, [r7, #24]
    break;
 800550a:	e104      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800550c:	4b88      	ldr	r3, [pc, #544]	; (8005730 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800550e:	61bb      	str	r3, [r7, #24]
    break;
 8005510:	e101      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005512:	4b84      	ldr	r3, [pc, #528]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800551c:	4b81      	ldr	r3, [pc, #516]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	091b      	lsrs	r3, r3, #4
 8005522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005526:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005528:	4b7e      	ldr	r3, [pc, #504]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005532:	4b7c      	ldr	r3, [pc, #496]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005536:	08db      	lsrs	r3, r3, #3
 8005538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80da 	beq.w	800570a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d05a      	beq.n	8005612 <HAL_RCC_GetSysClockFreq+0x1b2>
 800555c:	2b01      	cmp	r3, #1
 800555e:	d302      	bcc.n	8005566 <HAL_RCC_GetSysClockFreq+0x106>
 8005560:	2b02      	cmp	r3, #2
 8005562:	d078      	beq.n	8005656 <HAL_RCC_GetSysClockFreq+0x1f6>
 8005564:	e099      	b.n	800569a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005566:	4b6f      	ldr	r3, [pc, #444]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b00      	cmp	r3, #0
 8005570:	d02d      	beq.n	80055ce <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005572:	4b6c      	ldr	r3, [pc, #432]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	08db      	lsrs	r3, r3, #3
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	4a6a      	ldr	r2, [pc, #424]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800557e:	fa22 f303 	lsr.w	r3, r2, r3
 8005582:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	ee07 3a90 	vmov	s15, r3
 8005594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800559c:	4b61      	ldr	r3, [pc, #388]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a4:	ee07 3a90 	vmov	s15, r3
 80055a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80055b0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005734 <HAL_RCC_GetSysClockFreq+0x2d4>
 80055b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80055cc:	e087      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	ee07 3a90 	vmov	s15, r3
 80055d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005738 <HAL_RCC_GetSysClockFreq+0x2d8>
 80055dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e0:	4b50      	ldr	r3, [pc, #320]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e8:	ee07 3a90 	vmov	s15, r3
 80055ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80055f4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005734 <HAL_RCC_GetSysClockFreq+0x2d4>
 80055f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005610:	e065      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	ee07 3a90 	vmov	s15, r3
 8005618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800573c <HAL_RCC_GetSysClockFreq+0x2dc>
 8005620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005624:	4b3f      	ldr	r3, [pc, #252]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005634:	ed97 6a02 	vldr	s12, [r7, #8]
 8005638:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005734 <HAL_RCC_GetSysClockFreq+0x2d4>
 800563c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005644:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005650:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005654:	e043      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	ee07 3a90 	vmov	s15, r3
 800565c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005660:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005740 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005668:	4b2e      	ldr	r3, [pc, #184]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005670:	ee07 3a90 	vmov	s15, r3
 8005674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005678:	ed97 6a02 	vldr	s12, [r7, #8]
 800567c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005734 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800568c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005694:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005698:	e021      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	ee07 3a90 	vmov	s15, r3
 80056a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800573c <HAL_RCC_GetSysClockFreq+0x2dc>
 80056a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ac:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b4:	ee07 3a90 	vmov	s15, r3
 80056b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005734 <HAL_RCC_GetSysClockFreq+0x2d4>
 80056c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056dc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	0a5b      	lsrs	r3, r3, #9
 80056e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056e8:	3301      	adds	r3, #1
 80056ea:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80056fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005702:	ee17 3a90 	vmov	r3, s15
 8005706:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005708:	e005      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	61bb      	str	r3, [r7, #24]
    break;
 800570e:	e002      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005710:	4b06      	ldr	r3, [pc, #24]	; (800572c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005712:	61bb      	str	r3, [r7, #24]
    break;
 8005714:	bf00      	nop
  }

  return sysclockfreq;
 8005716:	69bb      	ldr	r3, [r7, #24]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3724      	adds	r7, #36	; 0x24
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	58024400 	.word	0x58024400
 8005728:	03d09000 	.word	0x03d09000
 800572c:	003d0900 	.word	0x003d0900
 8005730:	017d7840 	.word	0x017d7840
 8005734:	46000000 	.word	0x46000000
 8005738:	4c742400 	.word	0x4c742400
 800573c:	4a742400 	.word	0x4a742400
 8005740:	4bbebc20 	.word	0x4bbebc20

08005744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800574a:	f7ff fe89 	bl	8005460 <HAL_RCC_GetSysClockFreq>
 800574e:	4601      	mov	r1, r0
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <HAL_RCC_GetHCLKFreq+0x50>)
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	4a0f      	ldr	r2, [pc, #60]	; (8005798 <HAL_RCC_GetHCLKFreq+0x54>)
 800575c:	5cd3      	ldrb	r3, [r2, r3]
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	fa21 f303 	lsr.w	r3, r1, r3
 8005766:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <HAL_RCC_GetHCLKFreq+0x50>)
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	4a09      	ldr	r2, [pc, #36]	; (8005798 <HAL_RCC_GetHCLKFreq+0x54>)
 8005772:	5cd3      	ldrb	r3, [r2, r3]
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	fa22 f303 	lsr.w	r3, r2, r3
 800577e:	4a07      	ldr	r2, [pc, #28]	; (800579c <HAL_RCC_GetHCLKFreq+0x58>)
 8005780:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005782:	4a07      	ldr	r2, [pc, #28]	; (80057a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005788:	4b04      	ldr	r3, [pc, #16]	; (800579c <HAL_RCC_GetHCLKFreq+0x58>)
 800578a:	681b      	ldr	r3, [r3, #0]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	58024400 	.word	0x58024400
 8005798:	080127ac 	.word	0x080127ac
 800579c:	20000014 	.word	0x20000014
 80057a0:	20000010 	.word	0x20000010

080057a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057ac:	2300      	movs	r3, #0
 80057ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057b0:	2300      	movs	r3, #0
 80057b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d03d      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c8:	d013      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80057ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ce:	d802      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80057d4:	e01f      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80057d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057da:	d013      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80057dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057e0:	d01c      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80057e2:	e018      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e4:	4baf      	ldr	r3, [pc, #700]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	4aae      	ldr	r2, [pc, #696]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80057ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80057f0:	e015      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3304      	adds	r3, #4
 80057f6:	2102      	movs	r1, #2
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 fd23 	bl	8007244 <RCCEx_PLL2_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005802:	e00c      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3324      	adds	r3, #36	; 0x24
 8005808:	2102      	movs	r1, #2
 800580a:	4618      	mov	r0, r3
 800580c:	f001 fdcc 	bl	80073a8 <RCCEx_PLL3_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005814:	e003      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	75fb      	strb	r3, [r7, #23]
      break;
 800581a:	e000      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800581c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800581e:	7dfb      	ldrb	r3, [r7, #23]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005824:	4b9f      	ldr	r3, [pc, #636]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005828:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005830:	499c      	ldr	r1, [pc, #624]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005832:	4313      	orrs	r3, r2
 8005834:	650b      	str	r3, [r1, #80]	; 0x50
 8005836:	e001      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	7dfb      	ldrb	r3, [r7, #23]
 800583a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005844:	2b00      	cmp	r3, #0
 8005846:	d03d      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584c:	2b04      	cmp	r3, #4
 800584e:	d826      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005850:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	0800586d 	.word	0x0800586d
 800585c:	0800587b 	.word	0x0800587b
 8005860:	0800588d 	.word	0x0800588d
 8005864:	080058a5 	.word	0x080058a5
 8005868:	080058a5 	.word	0x080058a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800586c:	4b8d      	ldr	r3, [pc, #564]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	4a8c      	ldr	r2, [pc, #560]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005876:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005878:	e015      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3304      	adds	r3, #4
 800587e:	2100      	movs	r1, #0
 8005880:	4618      	mov	r0, r3
 8005882:	f001 fcdf 	bl	8007244 <RCCEx_PLL2_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800588a:	e00c      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3324      	adds	r3, #36	; 0x24
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f001 fd88 	bl	80073a8 <RCCEx_PLL3_Config>
 8005898:	4603      	mov	r3, r0
 800589a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800589c:	e003      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	75fb      	strb	r3, [r7, #23]
      break;
 80058a2:	e000      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80058a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a6:	7dfb      	ldrb	r3, [r7, #23]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d109      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058ac:	4b7d      	ldr	r3, [pc, #500]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b0:	f023 0207 	bic.w	r2, r3, #7
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b8:	497a      	ldr	r1, [pc, #488]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	650b      	str	r3, [r1, #80]	; 0x50
 80058be:	e001      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d03e      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d4:	2b80      	cmp	r3, #128	; 0x80
 80058d6:	d01c      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80058d8:	2b80      	cmp	r3, #128	; 0x80
 80058da:	d804      	bhi.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d00d      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80058e4:	e01e      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80058e6:	2bc0      	cmp	r3, #192	; 0xc0
 80058e8:	d01f      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80058ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ee:	d01e      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80058f0:	e018      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f2:	4b6c      	ldr	r3, [pc, #432]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	4a6b      	ldr	r2, [pc, #428]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80058fe:	e017      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3304      	adds	r3, #4
 8005904:	2100      	movs	r1, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f001 fc9c 	bl	8007244 <RCCEx_PLL2_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005910:	e00e      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3324      	adds	r3, #36	; 0x24
 8005916:	2100      	movs	r1, #0
 8005918:	4618      	mov	r0, r3
 800591a:	f001 fd45 	bl	80073a8 <RCCEx_PLL3_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005922:	e005      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]
      break;
 8005928:	e002      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800592a:	bf00      	nop
 800592c:	e000      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800592e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d109      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005936:	4b5b      	ldr	r3, [pc, #364]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005942:	4958      	ldr	r1, [pc, #352]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005944:	4313      	orrs	r3, r2
 8005946:	650b      	str	r3, [r1, #80]	; 0x50
 8005948:	e001      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594a:	7dfb      	ldrb	r3, [r7, #23]
 800594c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005956:	2b00      	cmp	r3, #0
 8005958:	d044      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005964:	d01f      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800596a:	d805      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005970:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005974:	d00e      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005976:	e01f      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005978:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800597c:	d01f      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800597e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005982:	d01e      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005984:	e018      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005986:	4b47      	ldr	r3, [pc, #284]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	4a46      	ldr	r2, [pc, #280]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800598c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005990:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005992:	e017      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3304      	adds	r3, #4
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f001 fc52 	bl	8007244 <RCCEx_PLL2_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80059a4:	e00e      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3324      	adds	r3, #36	; 0x24
 80059aa:	2100      	movs	r1, #0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 fcfb 	bl	80073a8 <RCCEx_PLL3_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059b6:	e005      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	75fb      	strb	r3, [r7, #23]
      break;
 80059bc:	e002      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80059be:	bf00      	nop
 80059c0:	e000      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80059c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059ca:	4b36      	ldr	r3, [pc, #216]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ce:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059d8:	4932      	ldr	r1, [pc, #200]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	658b      	str	r3, [r1, #88]	; 0x58
 80059de:	e001      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
 80059e2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d044      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059fa:	d01f      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x298>
 80059fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a00:	d805      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005a06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a0a:	d00e      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a0c:	e01f      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005a0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a12:	d01f      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005a14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a18:	d01e      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005a1a:	e018      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a1c:	4b21      	ldr	r3, [pc, #132]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	4a20      	ldr	r2, [pc, #128]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a28:	e017      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 fc07 	bl	8007244 <RCCEx_PLL2_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a3a:	e00e      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3324      	adds	r3, #36	; 0x24
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 fcb0 	bl	80073a8 <RCCEx_PLL3_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a4c:	e005      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	75fb      	strb	r3, [r7, #23]
      break;
 8005a52:	e002      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005a54:	bf00      	nop
 8005a56:	e000      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a60:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a64:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a6e:	490d      	ldr	r1, [pc, #52]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	658b      	str	r3, [r1, #88]	; 0x58
 8005a74:	e001      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
 8005a78:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d035      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a8a:	2b10      	cmp	r3, #16
 8005a8c:	d00c      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005a8e:	2b10      	cmp	r3, #16
 8005a90:	d802      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d01b      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005a96:	e017      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d00c      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005a9c:	2b30      	cmp	r3, #48	; 0x30
 8005a9e:	d018      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005aa0:	e012      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005aa2:	bf00      	nop
 8005aa4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa8:	4baf      	ldr	r3, [pc, #700]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	4aae      	ldr	r2, [pc, #696]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ab4:	e00e      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	2102      	movs	r1, #2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 fbc1 	bl	8007244 <RCCEx_PLL2_Config>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ac6:	e005      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	75fb      	strb	r3, [r7, #23]
      break;
 8005acc:	e002      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005ace:	bf00      	nop
 8005ad0:	e000      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ada:	4ba3      	ldr	r3, [pc, #652]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ade:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae6:	49a0      	ldr	r1, [pc, #640]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005aec:	e001      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
 8005af0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d042      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b06:	d01f      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b0c:	d805      	bhi.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b16:	d00e      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005b18:	e01f      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005b1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b1e:	d01f      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005b20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b24:	d01e      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005b26:	e018      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b28:	4b8f      	ldr	r3, [pc, #572]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	4a8e      	ldr	r2, [pc, #568]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b34:	e017      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f001 fb81 	bl	8007244 <RCCEx_PLL2_Config>
 8005b42:	4603      	mov	r3, r0
 8005b44:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b46:	e00e      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3324      	adds	r3, #36	; 0x24
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 fc2a 	bl	80073a8 <RCCEx_PLL3_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b58:	e005      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b5e:	e002      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005b60:	bf00      	nop
 8005b62:	e000      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d109      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b6c:	4b7e      	ldr	r3, [pc, #504]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b70:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b78:	497b      	ldr	r1, [pc, #492]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	650b      	str	r3, [r1, #80]	; 0x50
 8005b7e:	e001      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d042      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b98:	d01b      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005b9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b9e:	d805      	bhi.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d022      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba8:	d00a      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005baa:	e01b      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005bac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bb0:	d01d      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005bb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bb6:	d01c      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005bb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bbc:	d01b      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005bbe:	e011      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 fb3c 	bl	8007244 <RCCEx_PLL2_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005bd0:	e012      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3324      	adds	r3, #36	; 0x24
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f001 fbe5 	bl	80073a8 <RCCEx_PLL3_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005be2:	e009      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	75fb      	strb	r3, [r7, #23]
      break;
 8005be8:	e006      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005bea:	bf00      	nop
 8005bec:	e004      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005bee:	bf00      	nop
 8005bf0:	e002      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005bf2:	bf00      	nop
 8005bf4:	e000      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005bfe:	4b5a      	ldr	r3, [pc, #360]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c02:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0a:	4957      	ldr	r1, [pc, #348]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	650b      	str	r3, [r1, #80]	; 0x50
 8005c10:	e001      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
 8005c14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d044      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c2c:	d01b      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c32:	d805      	bhi.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d022      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c3c:	d00a      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005c3e:	e01b      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c44:	d01d      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c4a:	d01c      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005c4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c50:	d01b      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005c52:	e011      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	2101      	movs	r1, #1
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f001 faf2 	bl	8007244 <RCCEx_PLL2_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005c64:	e012      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3324      	adds	r3, #36	; 0x24
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 fb9b 	bl	80073a8 <RCCEx_PLL3_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005c76:	e009      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7c:	e006      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005c7e:	bf00      	nop
 8005c80:	e004      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005c82:	bf00      	nop
 8005c84:	e002      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005c86:	bf00      	nop
 8005c88:	e000      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10a      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c92:	4b35      	ldr	r3, [pc, #212]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ca0:	4931      	ldr	r1, [pc, #196]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	658b      	str	r3, [r1, #88]	; 0x58
 8005ca6:	e001      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d02d      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cc0:	d005      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005cc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cc6:	d009      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d013      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005ccc:	e00f      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cce:	4b26      	ldr	r3, [pc, #152]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	4a25      	ldr	r2, [pc, #148]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005cda:	e00c      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 faae 	bl	8007244 <RCCEx_PLL2_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005cec:	e003      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf2:	e000      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d109      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cfc:	4b1a      	ldr	r3, [pc, #104]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d08:	4917      	ldr	r1, [pc, #92]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	650b      	str	r3, [r1, #80]	; 0x50
 8005d0e:	e001      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d035      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d81b      	bhi.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d6d 	.word	0x08005d6d
 8005d34:	08005d41 	.word	0x08005d41
 8005d38:	08005d4f 	.word	0x08005d4f
 8005d3c:	08005d6d 	.word	0x08005d6d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d40:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	4a08      	ldr	r2, [pc, #32]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d4c:	e00f      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3304      	adds	r3, #4
 8005d52:	2102      	movs	r1, #2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 fa75 	bl	8007244 <RCCEx_PLL2_Config>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d5e:	e006      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	75fb      	strb	r3, [r7, #23]
      break;
 8005d64:	e003      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005d66:	bf00      	nop
 8005d68:	58024400 	.word	0x58024400
      break;
 8005d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d74:	4bba      	ldr	r3, [pc, #744]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d78:	f023 0203 	bic.w	r2, r3, #3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d80:	49b7      	ldr	r1, [pc, #732]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d86:	e001      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
 8005d8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8086 	beq.w	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d9a:	4bb2      	ldr	r3, [pc, #712]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4ab1      	ldr	r2, [pc, #708]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005da6:	f7fa fb1d 	bl	80003e4 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dac:	e009      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dae:	f7fa fb19 	bl	80003e4 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b64      	cmp	r3, #100	; 0x64
 8005dba:	d902      	bls.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	75fb      	strb	r3, [r7, #23]
        break;
 8005dc0:	e005      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dc2:	4ba8      	ldr	r3, [pc, #672]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0ef      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d166      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005dd4:	4ba2      	ldr	r3, [pc, #648]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005dd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dde:	4053      	eors	r3, r2
 8005de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d013      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005de8:	4b9d      	ldr	r3, [pc, #628]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005df2:	4b9b      	ldr	r3, [pc, #620]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	4a9a      	ldr	r2, [pc, #616]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dfc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dfe:	4b98      	ldr	r3, [pc, #608]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	4a97      	ldr	r2, [pc, #604]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e08:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e0a:	4a95      	ldr	r2, [pc, #596]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e1a:	d115      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1c:	f7fa fae2 	bl	80003e4 <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e22:	e00b      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e24:	f7fa fade 	bl	80003e4 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d902      	bls.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	75fb      	strb	r3, [r7, #23]
            break;
 8005e3a:	e005      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e3c:	4b88      	ldr	r3, [pc, #544]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0ed      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d126      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e5c:	d10d      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005e5e:	4b80      	ldr	r3, [pc, #512]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e6c:	0919      	lsrs	r1, r3, #4
 8005e6e:	4b7e      	ldr	r3, [pc, #504]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005e70:	400b      	ands	r3, r1
 8005e72:	497b      	ldr	r1, [pc, #492]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	610b      	str	r3, [r1, #16]
 8005e78:	e005      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005e7a:	4b79      	ldr	r3, [pc, #484]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	4a78      	ldr	r2, [pc, #480]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e84:	6113      	str	r3, [r2, #16]
 8005e86:	4b76      	ldr	r3, [pc, #472]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e94:	4972      	ldr	r1, [pc, #456]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	670b      	str	r3, [r1, #112]	; 0x70
 8005e9a:	e004      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
 8005e9e:	75bb      	strb	r3, [r7, #22]
 8005ea0:	e001      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
 8005ea4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d07d      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eb6:	2b28      	cmp	r3, #40	; 0x28
 8005eb8:	d866      	bhi.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005eba:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	08005f8f 	.word	0x08005f8f
 8005ec4:	08005f89 	.word	0x08005f89
 8005ec8:	08005f89 	.word	0x08005f89
 8005ecc:	08005f89 	.word	0x08005f89
 8005ed0:	08005f89 	.word	0x08005f89
 8005ed4:	08005f89 	.word	0x08005f89
 8005ed8:	08005f89 	.word	0x08005f89
 8005edc:	08005f89 	.word	0x08005f89
 8005ee0:	08005f65 	.word	0x08005f65
 8005ee4:	08005f89 	.word	0x08005f89
 8005ee8:	08005f89 	.word	0x08005f89
 8005eec:	08005f89 	.word	0x08005f89
 8005ef0:	08005f89 	.word	0x08005f89
 8005ef4:	08005f89 	.word	0x08005f89
 8005ef8:	08005f89 	.word	0x08005f89
 8005efc:	08005f89 	.word	0x08005f89
 8005f00:	08005f77 	.word	0x08005f77
 8005f04:	08005f89 	.word	0x08005f89
 8005f08:	08005f89 	.word	0x08005f89
 8005f0c:	08005f89 	.word	0x08005f89
 8005f10:	08005f89 	.word	0x08005f89
 8005f14:	08005f89 	.word	0x08005f89
 8005f18:	08005f89 	.word	0x08005f89
 8005f1c:	08005f89 	.word	0x08005f89
 8005f20:	08005f8f 	.word	0x08005f8f
 8005f24:	08005f89 	.word	0x08005f89
 8005f28:	08005f89 	.word	0x08005f89
 8005f2c:	08005f89 	.word	0x08005f89
 8005f30:	08005f89 	.word	0x08005f89
 8005f34:	08005f89 	.word	0x08005f89
 8005f38:	08005f89 	.word	0x08005f89
 8005f3c:	08005f89 	.word	0x08005f89
 8005f40:	08005f8f 	.word	0x08005f8f
 8005f44:	08005f89 	.word	0x08005f89
 8005f48:	08005f89 	.word	0x08005f89
 8005f4c:	08005f89 	.word	0x08005f89
 8005f50:	08005f89 	.word	0x08005f89
 8005f54:	08005f89 	.word	0x08005f89
 8005f58:	08005f89 	.word	0x08005f89
 8005f5c:	08005f89 	.word	0x08005f89
 8005f60:	08005f8f 	.word	0x08005f8f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3304      	adds	r3, #4
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f001 f96a 	bl	8007244 <RCCEx_PLL2_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f74:	e00c      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3324      	adds	r3, #36	; 0x24
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f001 fa13 	bl	80073a8 <RCCEx_PLL3_Config>
 8005f82:	4603      	mov	r3, r0
 8005f84:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f86:	e003      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f8c:	e000      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f96:	4b32      	ldr	r3, [pc, #200]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa2:	492f      	ldr	r1, [pc, #188]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	654b      	str	r3, [r1, #84]	; 0x54
 8005fa8:	e001      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d037      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fbe:	2b05      	cmp	r3, #5
 8005fc0:	d820      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	0800600b 	.word	0x0800600b
 8005fcc:	08005fe1 	.word	0x08005fe1
 8005fd0:	08005ff3 	.word	0x08005ff3
 8005fd4:	0800600b 	.word	0x0800600b
 8005fd8:	0800600b 	.word	0x0800600b
 8005fdc:	0800600b 	.word	0x0800600b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 f92c 	bl	8007244 <RCCEx_PLL2_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005ff0:	e00c      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3324      	adds	r3, #36	; 0x24
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 f9d5 	bl	80073a8 <RCCEx_PLL3_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006002:	e003      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	75fb      	strb	r3, [r7, #23]
      break;
 8006008:	e000      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800600a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800600c:	7dfb      	ldrb	r3, [r7, #23]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d109      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006012:	4b13      	ldr	r3, [pc, #76]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006016:	f023 0207 	bic.w	r2, r3, #7
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800601e:	4910      	ldr	r1, [pc, #64]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006020:	4313      	orrs	r3, r2
 8006022:	654b      	str	r3, [r1, #84]	; 0x54
 8006024:	e001      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006026:	7dfb      	ldrb	r3, [r7, #23]
 8006028:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	2b00      	cmp	r3, #0
 8006034:	d040      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603c:	2b05      	cmp	r3, #5
 800603e:	d827      	bhi.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006040:	a201      	add	r2, pc, #4	; (adr r2, 8006048 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006046:	bf00      	nop
 8006048:	08006097 	.word	0x08006097
 800604c:	0800606d 	.word	0x0800606d
 8006050:	0800607f 	.word	0x0800607f
 8006054:	08006097 	.word	0x08006097
 8006058:	08006097 	.word	0x08006097
 800605c:	08006097 	.word	0x08006097
 8006060:	58024400 	.word	0x58024400
 8006064:	58024800 	.word	0x58024800
 8006068:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3304      	adds	r3, #4
 8006070:	2101      	movs	r1, #1
 8006072:	4618      	mov	r0, r3
 8006074:	f001 f8e6 	bl	8007244 <RCCEx_PLL2_Config>
 8006078:	4603      	mov	r3, r0
 800607a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800607c:	e00c      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3324      	adds	r3, #36	; 0x24
 8006082:	2101      	movs	r1, #1
 8006084:	4618      	mov	r0, r3
 8006086:	f001 f98f 	bl	80073a8 <RCCEx_PLL3_Config>
 800608a:	4603      	mov	r3, r0
 800608c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800608e:	e003      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	75fb      	strb	r3, [r7, #23]
      break;
 8006094:	e000      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800609e:	4bb2      	ldr	r3, [pc, #712]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80060a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a2:	f023 0207 	bic.w	r2, r3, #7
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ac:	49ae      	ldr	r1, [pc, #696]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	658b      	str	r3, [r1, #88]	; 0x58
 80060b2:	e001      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
 80060b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0320 	and.w	r3, r3, #32
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d044      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ce:	d01b      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80060d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060d4:	d805      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d022      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80060da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060de:	d00a      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80060e0:	e01b      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x976>
 80060e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e6:	d01d      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80060e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060ec:	d01c      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80060ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060f2:	d01b      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x988>
 80060f4:	e011      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3304      	adds	r3, #4
 80060fa:	2100      	movs	r1, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 f8a1 	bl	8007244 <RCCEx_PLL2_Config>
 8006102:	4603      	mov	r3, r0
 8006104:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006106:	e012      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3324      	adds	r3, #36	; 0x24
 800610c:	2102      	movs	r1, #2
 800610e:	4618      	mov	r0, r3
 8006110:	f001 f94a 	bl	80073a8 <RCCEx_PLL3_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006118:	e009      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	75fb      	strb	r3, [r7, #23]
      break;
 800611e:	e006      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006120:	bf00      	nop
 8006122:	e004      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006124:	bf00      	nop
 8006126:	e002      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006128:	bf00      	nop
 800612a:	e000      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800612c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006134:	4b8c      	ldr	r3, [pc, #560]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006138:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006142:	4989      	ldr	r1, [pc, #548]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006144:	4313      	orrs	r3, r2
 8006146:	654b      	str	r3, [r1, #84]	; 0x54
 8006148:	e001      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d044      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006164:	d01b      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616a:	d805      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d022      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006174:	d00a      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006176:	e01b      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617c:	d01d      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800617e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006182:	d01c      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006188:	d01b      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800618a:	e011      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	2100      	movs	r1, #0
 8006192:	4618      	mov	r0, r3
 8006194:	f001 f856 	bl	8007244 <RCCEx_PLL2_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800619c:	e012      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3324      	adds	r3, #36	; 0x24
 80061a2:	2102      	movs	r1, #2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f001 f8ff 	bl	80073a8 <RCCEx_PLL3_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061ae:	e009      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	75fb      	strb	r3, [r7, #23]
      break;
 80061b4:	e006      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80061b6:	bf00      	nop
 80061b8:	e004      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80061ba:	bf00      	nop
 80061bc:	e002      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80061be:	bf00      	nop
 80061c0:	e000      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80061c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061ca:	4b67      	ldr	r3, [pc, #412]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80061cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061d8:	4963      	ldr	r1, [pc, #396]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	658b      	str	r3, [r1, #88]	; 0x58
 80061de:	e001      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d044      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061fa:	d01b      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80061fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006200:	d805      	bhi.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d022      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800620a:	d00a      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800620c:	e01b      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800620e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006212:	d01d      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006214:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006218:	d01c      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800621a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800621e:	d01b      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006220:	e011      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3304      	adds	r3, #4
 8006226:	2100      	movs	r1, #0
 8006228:	4618      	mov	r0, r3
 800622a:	f001 f80b 	bl	8007244 <RCCEx_PLL2_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006232:	e012      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3324      	adds	r3, #36	; 0x24
 8006238:	2102      	movs	r1, #2
 800623a:	4618      	mov	r0, r3
 800623c:	f001 f8b4 	bl	80073a8 <RCCEx_PLL3_Config>
 8006240:	4603      	mov	r3, r0
 8006242:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006244:	e009      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	75fb      	strb	r3, [r7, #23]
      break;
 800624a:	e006      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800624c:	bf00      	nop
 800624e:	e004      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006250:	bf00      	nop
 8006252:	e002      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006254:	bf00      	nop
 8006256:	e000      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800625a:	7dfb      	ldrb	r3, [r7, #23]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006260:	4b41      	ldr	r3, [pc, #260]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006264:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800626e:	493e      	ldr	r1, [pc, #248]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006270:	4313      	orrs	r3, r2
 8006272:	658b      	str	r3, [r1, #88]	; 0x58
 8006274:	e001      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01a      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800628c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006290:	d10a      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3324      	adds	r3, #36	; 0x24
 8006296:	2102      	movs	r1, #2
 8006298:	4618      	mov	r0, r3
 800629a:	f001 f885 	bl	80073a8 <RCCEx_PLL3_Config>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062a8:	4b2f      	ldr	r3, [pc, #188]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80062aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b6:	492c      	ldr	r1, [pc, #176]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0310 	and.w	r3, r3, #16
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01a      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d2:	d10a      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3324      	adds	r3, #36	; 0x24
 80062d8:	2102      	movs	r1, #2
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 f864 	bl	80073a8 <RCCEx_PLL3_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062ea:	4b1f      	ldr	r3, [pc, #124]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80062ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f8:	491b      	ldr	r1, [pc, #108]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d032      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006314:	d00d      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800631a:	d016      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d111      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3304      	adds	r3, #4
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f000 ff8c 	bl	8007244 <RCCEx_PLL2_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006330:	e00c      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3324      	adds	r3, #36	; 0x24
 8006336:	2102      	movs	r1, #2
 8006338:	4618      	mov	r0, r3
 800633a:	f001 f835 	bl	80073a8 <RCCEx_PLL3_Config>
 800633e:	4603      	mov	r3, r0
 8006340:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006342:	e003      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	75fb      	strb	r3, [r7, #23]
      break;
 8006348:	e000      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800634a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800634c:	7dfb      	ldrb	r3, [r7, #23]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10c      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006352:	4b05      	ldr	r3, [pc, #20]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006356:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006360:	4901      	ldr	r1, [pc, #4]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006362:	4313      	orrs	r3, r2
 8006364:	658b      	str	r3, [r1, #88]	; 0x58
 8006366:	e003      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006368:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d02f      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006386:	d00c      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006388:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800638c:	d015      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800638e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006392:	d10f      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006394:	4b71      	ldr	r3, [pc, #452]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	4a70      	ldr	r2, [pc, #448]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800639a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800639e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80063a0:	e00c      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3324      	adds	r3, #36	; 0x24
 80063a6:	2101      	movs	r1, #1
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fffd 	bl	80073a8 <RCCEx_PLL3_Config>
 80063ae:	4603      	mov	r3, r0
 80063b0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80063b2:	e003      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	75fb      	strb	r3, [r7, #23]
      break;
 80063b8:	e000      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80063ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063c2:	4b66      	ldr	r3, [pc, #408]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80063c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063d0:	4962      	ldr	r1, [pc, #392]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	654b      	str	r3, [r1, #84]	; 0x54
 80063d6:	e001      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d8:	7dfb      	ldrb	r3, [r7, #23]
 80063da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d029      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80063f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f4:	d007      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80063f6:	e00f      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f8:	4b58      	ldr	r3, [pc, #352]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	4a57      	ldr	r2, [pc, #348]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80063fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006402:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006404:	e00b      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3304      	adds	r3, #4
 800640a:	2102      	movs	r1, #2
 800640c:	4618      	mov	r0, r3
 800640e:	f000 ff19 	bl	8007244 <RCCEx_PLL2_Config>
 8006412:	4603      	mov	r3, r0
 8006414:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006416:	e002      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	75fb      	strb	r3, [r7, #23]
      break;
 800641c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800641e:	7dfb      	ldrb	r3, [r7, #23]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d109      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006424:	4b4d      	ldr	r3, [pc, #308]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006428:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006430:	494a      	ldr	r1, [pc, #296]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006432:	4313      	orrs	r3, r2
 8006434:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006436:	e001      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3324      	adds	r3, #36	; 0x24
 800644c:	2102      	movs	r1, #2
 800644e:	4618      	mov	r0, r3
 8006450:	f000 ffaa 	bl	80073a8 <RCCEx_PLL3_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d02f      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006472:	d00c      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006478:	d802      	bhi.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d011      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800647e:	e00d      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006484:	d00f      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800648a:	d00e      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800648c:	e006      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800648e:	4b33      	ldr	r3, [pc, #204]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	4a32      	ldr	r2, [pc, #200]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006498:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800649a:	e007      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	75fb      	strb	r3, [r7, #23]
      break;
 80064a0:	e004      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80064a2:	bf00      	nop
 80064a4:	e002      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80064a6:	bf00      	nop
 80064a8:	e000      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80064aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d109      	bne.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064b2:	4b2a      	ldr	r3, [pc, #168]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064be:	4927      	ldr	r1, [pc, #156]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	654b      	str	r3, [r1, #84]	; 0x54
 80064c4:	e001      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
 80064c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d008      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064d6:	4b21      	ldr	r3, [pc, #132]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	491e      	ldr	r1, [pc, #120]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d008      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064f4:	4b19      	ldr	r3, [pc, #100]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006500:	4916      	ldr	r1, [pc, #88]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006502:	4313      	orrs	r3, r2
 8006504:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00d      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006512:	4b12      	ldr	r3, [pc, #72]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	4a11      	ldr	r2, [pc, #68]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006518:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800651c:	6113      	str	r3, [r2, #16]
 800651e:	4b0f      	ldr	r3, [pc, #60]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006528:	490c      	ldr	r1, [pc, #48]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800652a:	4313      	orrs	r3, r2
 800652c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	da08      	bge.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006542:	4906      	ldr	r1, [pc, #24]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006544:	4313      	orrs	r3, r2
 8006546:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006548:	7dbb      	ldrb	r3, [r7, #22]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	e000      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	58024400 	.word	0x58024400

08006560 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b090      	sub	sp, #64	; 0x40
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656e:	d150      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006570:	4ba1      	ldr	r3, [pc, #644]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	2b04      	cmp	r3, #4
 800657e:	d844      	bhi.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8006580:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006586:	bf00      	nop
 8006588:	0800659d 	.word	0x0800659d
 800658c:	080065ad 	.word	0x080065ad
 8006590:	080065bd 	.word	0x080065bd
 8006594:	08006605 	.word	0x08006605
 8006598:	080065cd 	.word	0x080065cd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800659c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fd03 	bl	8006fac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065aa:	e241      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ac:	f107 0318 	add.w	r3, r7, #24
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fa63 	bl	8006a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ba:	e239      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065bc:	f107 030c 	add.w	r3, r7, #12
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fba7 	bl	8006d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ca:	e231      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80065cc:	4b8a      	ldr	r3, [pc, #552]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80065ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80065d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80065dc:	4b87      	ldr	r3, [pc, #540]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80065de:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80065e0:	e226      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80065e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065e8:	d102      	bne.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80065ea:	4b85      	ldr	r3, [pc, #532]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80065ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ee:	e21f      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80065f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065f6:	d102      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80065f8:	4b82      	ldr	r3, [pc, #520]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065fc:	e218      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006602:	e215      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006604:	4b80      	ldr	r3, [pc, #512]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006608:	e212      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800660e:	bf00      	nop
 8006610:	e20e      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006618:	d14f      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800661a:	4b77      	ldr	r3, [pc, #476]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800661c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006622:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	2b80      	cmp	r3, #128	; 0x80
 8006628:	d01c      	beq.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800662a:	2b80      	cmp	r3, #128	; 0x80
 800662c:	d804      	bhi.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d008      	beq.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006632:	2b40      	cmp	r3, #64	; 0x40
 8006634:	d00e      	beq.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006636:	e03c      	b.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006638:	2bc0      	cmp	r3, #192	; 0xc0
 800663a:	d037      	beq.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800663c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006640:	d018      	beq.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006642:	e036      	b.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fcaf 	bl	8006fac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006652:	e1ed      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006654:	f107 0318 	add.w	r3, r7, #24
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fa0f 	bl	8006a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006662:	e1e5      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006664:	f107 030c 	add.w	r3, r7, #12
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fb53 	bl	8006d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006672:	e1dd      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006674:	4b60      	ldr	r3, [pc, #384]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800667c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800667e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006684:	4b5d      	ldr	r3, [pc, #372]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006686:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006688:	e1d2      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006690:	d102      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8006692:	4b5b      	ldr	r3, [pc, #364]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006696:	e1cb      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669e:	d102      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80066a0:	4b58      	ldr	r3, [pc, #352]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80066a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066a4:	e1c4      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066aa:	e1c1      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80066ac:	4b56      	ldr	r3, [pc, #344]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80066ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066b0:	e1be      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066b6:	bf00      	nop
 80066b8:	e1ba      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c0:	d153      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80066c2:	4b4d      	ldr	r3, [pc, #308]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80066c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80066ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066d2:	d01f      	beq.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80066d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066d8:	d805      	bhi.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80066de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066e2:	d00f      	beq.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80066e4:	e03d      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80066e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066ea:	d037      	beq.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80066ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066f0:	d018      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80066f2:	e036      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fc57 	bl	8006fac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006702:	e195      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006704:	f107 0318 	add.w	r3, r7, #24
 8006708:	4618      	mov	r0, r3
 800670a:	f000 f9b7 	bl	8006a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006712:	e18d      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006714:	f107 030c 	add.w	r3, r7, #12
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fafb 	bl	8006d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006722:	e185      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006724:	4b34      	ldr	r3, [pc, #208]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006728:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800672c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800672e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006730:	2b00      	cmp	r3, #0
 8006732:	d102      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006734:	4b31      	ldr	r3, [pc, #196]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006736:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006738:	e17a      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800673a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006740:	d102      	bne.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8006742:	4b2f      	ldr	r3, [pc, #188]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006746:	e173      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800674e:	d102      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8006750:	4b2c      	ldr	r3, [pc, #176]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006754:	e16c      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800675a:	e169      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800675c:	4b2a      	ldr	r3, [pc, #168]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800675e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006760:	e166      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006766:	bf00      	nop
 8006768:	e162      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006770:	d15d      	bne.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006772:	4b21      	ldr	r3, [pc, #132]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006776:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800677a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006782:	d01f      	beq.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006788:	d805      	bhi.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800678e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006792:	d00f      	beq.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8006794:	e047      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8006796:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800679a:	d041      	beq.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800679c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067a0:	d018      	beq.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80067a2:	e040      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fbff 	bl	8006fac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067b2:	e13d      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067b4:	f107 0318 	add.w	r3, r7, #24
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 f95f 	bl	8006a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067c2:	e135      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067c4:	f107 030c 	add.w	r3, r7, #12
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 faa3 	bl	8006d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067d2:	e12d      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80067d4:	4b08      	ldr	r3, [pc, #32]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067dc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80067de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d102      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80067e4:	4b05      	ldr	r3, [pc, #20]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80067e8:	e122      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80067ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067f0:	d10c      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80067f2:	4b03      	ldr	r3, [pc, #12]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067f6:	e11b      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80067f8:	58024400 	.word	0x58024400
 80067fc:	03d09000 	.word	0x03d09000
 8006800:	003d0900 	.word	0x003d0900
 8006804:	017d7840 	.word	0x017d7840
 8006808:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800680c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006812:	d102      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8006814:	4b89      	ldr	r3, [pc, #548]	; (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006818:	e10a      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800681e:	e107      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006820:	4b87      	ldr	r3, [pc, #540]	; (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006824:	e104      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800682a:	bf00      	nop
 800682c:	e100      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006834:	d153      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006836:	4b83      	ldr	r3, [pc, #524]	; (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800683e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006846:	d01f      	beq.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800684c:	d805      	bhi.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006856:	d00f      	beq.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006858:	e03d      	b.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800685a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800685e:	d037      	beq.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8006860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006864:	d018      	beq.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006866:	e036      	b.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fb9d 	bl	8006fac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006876:	e0db      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006878:	f107 0318 	add.w	r3, r7, #24
 800687c:	4618      	mov	r0, r3
 800687e:	f000 f8fd 	bl	8006a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006886:	e0d3      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006888:	f107 030c 	add.w	r3, r7, #12
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fa41 	bl	8006d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006896:	e0cb      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006898:	4b6a      	ldr	r3, [pc, #424]	; (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800689a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068a0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80068a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d102      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80068a8:	4b67      	ldr	r3, [pc, #412]	; (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80068ac:	e0c0      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068b4:	d102      	bne.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80068b6:	4b65      	ldr	r3, [pc, #404]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80068b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068ba:	e0b9      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80068bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c2:	d102      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80068c4:	4b5d      	ldr	r3, [pc, #372]	; (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068c8:	e0b2      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068ce:	e0af      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80068d0:	4b5b      	ldr	r3, [pc, #364]	; (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80068d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068d4:	e0ac      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068da:	bf00      	nop
 80068dc:	e0a8      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068e4:	d13d      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80068e6:	4b57      	ldr	r3, [pc, #348]	; (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80068e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068ee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f6:	d00c      	beq.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80068f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068fc:	d011      	beq.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d12b      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006902:	f107 0318 	add.w	r3, r7, #24
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f8b8 	bl	8006a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006910:	e08e      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006912:	f107 030c 	add.w	r3, r7, #12
 8006916:	4618      	mov	r0, r3
 8006918:	f000 f9fc 	bl	8006d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006920:	e086      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006922:	4b48      	ldr	r3, [pc, #288]	; (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006926:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800692a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800692c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692e:	2b00      	cmp	r3, #0
 8006930:	d102      	bne.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006932:	4b45      	ldr	r3, [pc, #276]	; (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006934:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006936:	e07b      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800693e:	d102      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8006940:	4b42      	ldr	r3, [pc, #264]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006944:	e074      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800694c:	d102      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800694e:	4b3b      	ldr	r3, [pc, #236]	; (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006952:	e06d      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006958:	e06a      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800695e:	bf00      	nop
 8006960:	e066      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006968:	d11f      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800696a:	4b36      	ldr	r3, [pc, #216]	; (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800696c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006972:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800697a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800697e:	d008      	beq.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006980:	e00f      	b.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fb10 	bl	8006fac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006990:	e04e      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006992:	f107 0318 	add.w	r3, r7, #24
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f870 	bl	8006a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069a0:	e046      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069a6:	bf00      	nop
 80069a8:	e042      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069b0:	d13c      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80069b2:	4b24      	ldr	r3, [pc, #144]	; (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80069b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80069ba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c2:	d01e      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80069c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c8:	d805      	bhi.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00d      	beq.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80069ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069d2:	d00e      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80069d4:	e026      	b.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80069d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069da:	d01d      	beq.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80069dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069e0:	d01d      	beq.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80069e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069e6:	d014      	beq.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80069e8:	e01c      	b.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80069ea:	f000 f831 	bl	8006a50 <HAL_RCCEx_GetD3PCLK1Freq>
 80069ee:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80069f0:	e01e      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069f2:	f107 0318 	add.w	r3, r7, #24
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 f840 	bl	8006a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a00:	e016      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a02:	f107 030c 	add.w	r3, r7, #12
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 f984 	bl	8006d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a10:	e00e      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8006a12:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a16:	e00b      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a1c:	e008      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8006a1e:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006a20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a22:	e005      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a28:	bf00      	nop
 8006a2a:	e001      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3740      	adds	r7, #64	; 0x40
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	017d7840 	.word	0x017d7840
 8006a40:	00bb8000 	.word	0x00bb8000
 8006a44:	58024400 	.word	0x58024400
 8006a48:	03d09000 	.word	0x03d09000
 8006a4c:	003d0900 	.word	0x003d0900

08006a50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a54:	f7fe fe76 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 8006a58:	4601      	mov	r1, r0
 8006a5a:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	091b      	lsrs	r3, r3, #4
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	4a04      	ldr	r2, [pc, #16]	; (8006a78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a66:	5cd3      	ldrb	r3, [r2, r3]
 8006a68:	f003 031f 	and.w	r3, r3, #31
 8006a6c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	58024400 	.word	0x58024400
 8006a78:	080127ac 	.word	0x080127ac

08006a7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b089      	sub	sp, #36	; 0x24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a84:	4b9d      	ldr	r3, [pc, #628]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006a8e:	4b9b      	ldr	r3, [pc, #620]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	0b1b      	lsrs	r3, r3, #12
 8006a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a9a:	4b98      	ldr	r3, [pc, #608]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	091b      	lsrs	r3, r3, #4
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006aa6:	4b95      	ldr	r3, [pc, #596]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aaa:	08db      	lsrs	r3, r3, #3
 8006aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	fb02 f303 	mul.w	r3, r2, r3
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 810a 	beq.w	8006cde <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d05a      	beq.n	8006b86 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d302      	bcc.n	8006ada <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d078      	beq.n	8006bca <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006ad8:	e099      	b.n	8006c0e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ada:	4b88      	ldr	r3, [pc, #544]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d02d      	beq.n	8006b42 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ae6:	4b85      	ldr	r3, [pc, #532]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	08db      	lsrs	r3, r3, #3
 8006aec:	f003 0303 	and.w	r3, r3, #3
 8006af0:	4a83      	ldr	r2, [pc, #524]	; (8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006af2:	fa22 f303 	lsr.w	r3, r2, r3
 8006af6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	ee07 3a90 	vmov	s15, r3
 8006b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b10:	4b7a      	ldr	r3, [pc, #488]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b18:	ee07 3a90 	vmov	s15, r3
 8006b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b20:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b24:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b40:	e087      	b.n	8006c52 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	ee07 3a90 	vmov	s15, r3
 8006b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b54:	4b69      	ldr	r3, [pc, #420]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b64:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b68:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006b6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b84:	e065      	b.n	8006c52 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	ee07 3a90 	vmov	s15, r3
 8006b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b90:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b98:	4b58      	ldr	r3, [pc, #352]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba0:	ee07 3a90 	vmov	s15, r3
 8006ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006bb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bc8:	e043      	b.n	8006c52 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006bd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bdc:	4b47      	ldr	r3, [pc, #284]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be4:	ee07 3a90 	vmov	s15, r3
 8006be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bec:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006bf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c0c:	e021      	b.n	8006c52 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	ee07 3a90 	vmov	s15, r3
 8006c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c18:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006c1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c20:	4b36      	ldr	r3, [pc, #216]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c30:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c34:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006c38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c50:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006c52:	4b2a      	ldr	r3, [pc, #168]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	0a5b      	lsrs	r3, r3, #9
 8006c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5c:	ee07 3a90 	vmov	s15, r3
 8006c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c78:	ee17 2a90 	vmov	r2, s15
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006c80:	4b1e      	ldr	r3, [pc, #120]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	0c1b      	lsrs	r3, r3, #16
 8006c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ca6:	ee17 2a90 	vmov	r2, s15
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	0e1b      	lsrs	r3, r3, #24
 8006cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb8:	ee07 3a90 	vmov	s15, r3
 8006cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd4:	ee17 2a90 	vmov	r2, s15
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006cdc:	e008      	b.n	8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	609a      	str	r2, [r3, #8]
}
 8006cf0:	bf00      	nop
 8006cf2:	3724      	adds	r7, #36	; 0x24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	58024400 	.word	0x58024400
 8006d00:	03d09000 	.word	0x03d09000
 8006d04:	46000000 	.word	0x46000000
 8006d08:	4c742400 	.word	0x4c742400
 8006d0c:	4a742400 	.word	0x4a742400
 8006d10:	4bbebc20 	.word	0x4bbebc20

08006d14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b089      	sub	sp, #36	; 0x24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d1c:	4b9d      	ldr	r3, [pc, #628]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	f003 0303 	and.w	r3, r3, #3
 8006d24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006d26:	4b9b      	ldr	r3, [pc, #620]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2a:	0d1b      	lsrs	r3, r3, #20
 8006d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d32:	4b98      	ldr	r3, [pc, #608]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006d3e:	4b95      	ldr	r3, [pc, #596]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d42:	08db      	lsrs	r3, r3, #3
 8006d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	fb02 f303 	mul.w	r3, r2, r3
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 810a 	beq.w	8006f76 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d05a      	beq.n	8006e1e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d302      	bcc.n	8006d72 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d078      	beq.n	8006e62 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006d70:	e099      	b.n	8006ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d72:	4b88      	ldr	r3, [pc, #544]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d02d      	beq.n	8006dda <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d7e:	4b85      	ldr	r3, [pc, #532]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	08db      	lsrs	r3, r3, #3
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	4a83      	ldr	r2, [pc, #524]	; (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d8e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	ee07 3a90 	vmov	s15, r3
 8006da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da8:	4b7a      	ldr	r3, [pc, #488]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db0:	ee07 3a90 	vmov	s15, r3
 8006db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dbc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006dd8:	e087      	b.n	8006eea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dec:	4b69      	ldr	r3, [pc, #420]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df4:	ee07 3a90 	vmov	s15, r3
 8006df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e00:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e1c:	e065      	b.n	8006eea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	ee07 3a90 	vmov	s15, r3
 8006e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e28:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e30:	4b58      	ldr	r3, [pc, #352]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e40:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e44:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e60:	e043      	b.n	8006eea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	ee07 3a90 	vmov	s15, r3
 8006e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e74:	4b47      	ldr	r3, [pc, #284]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7c:	ee07 3a90 	vmov	s15, r3
 8006e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e84:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e88:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ea4:	e021      	b.n	8006eea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	ee07 3a90 	vmov	s15, r3
 8006eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb8:	4b36      	ldr	r3, [pc, #216]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec0:	ee07 3a90 	vmov	s15, r3
 8006ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ecc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ee8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006eea:	4b2a      	ldr	r3, [pc, #168]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	0a5b      	lsrs	r3, r3, #9
 8006ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef4:	ee07 3a90 	vmov	s15, r3
 8006ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f10:	ee17 2a90 	vmov	r2, s15
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006f18:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	0c1b      	lsrs	r3, r3, #16
 8006f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f3e:	ee17 2a90 	vmov	r2, s15
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006f46:	4b13      	ldr	r3, [pc, #76]	; (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	0e1b      	lsrs	r3, r3, #24
 8006f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f50:	ee07 3a90 	vmov	s15, r3
 8006f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f6c:	ee17 2a90 	vmov	r2, s15
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f74:	e008      	b.n	8006f88 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	609a      	str	r2, [r3, #8]
}
 8006f88:	bf00      	nop
 8006f8a:	3724      	adds	r7, #36	; 0x24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	58024400 	.word	0x58024400
 8006f98:	03d09000 	.word	0x03d09000
 8006f9c:	46000000 	.word	0x46000000
 8006fa0:	4c742400 	.word	0x4c742400
 8006fa4:	4a742400 	.word	0x4a742400
 8006fa8:	4bbebc20 	.word	0x4bbebc20

08006fac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b089      	sub	sp, #36	; 0x24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fb4:	4b9d      	ldr	r3, [pc, #628]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb8:	f003 0303 	and.w	r3, r3, #3
 8006fbc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006fbe:	4b9b      	ldr	r3, [pc, #620]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc2:	091b      	lsrs	r3, r3, #4
 8006fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fc8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006fca:	4b98      	ldr	r3, [pc, #608]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006fd4:	4b95      	ldr	r3, [pc, #596]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd8:	08db      	lsrs	r3, r3, #3
 8006fda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	fb02 f303 	mul.w	r3, r2, r3
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 810a 	beq.w	800720c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d05a      	beq.n	80070b4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d302      	bcc.n	8007008 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007002:	2b02      	cmp	r3, #2
 8007004:	d078      	beq.n	80070f8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007006:	e099      	b.n	800713c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007008:	4b88      	ldr	r3, [pc, #544]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0320 	and.w	r3, r3, #32
 8007010:	2b00      	cmp	r3, #0
 8007012:	d02d      	beq.n	8007070 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007014:	4b85      	ldr	r3, [pc, #532]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	08db      	lsrs	r3, r3, #3
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	4a84      	ldr	r2, [pc, #528]	; (8007230 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007020:	fa22 f303 	lsr.w	r3, r2, r3
 8007024:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	ee07 3a90 	vmov	s15, r3
 800702c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703e:	4b7b      	ldr	r3, [pc, #492]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007052:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007234 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800706e:	e087      	b.n	8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007082:	4b6a      	ldr	r3, [pc, #424]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007092:	ed97 6a03 	vldr	s12, [r7, #12]
 8007096:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007234 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070b2:	e065      	b.n	8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800723c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c6:	4b59      	ldr	r3, [pc, #356]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007234 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070f6:	e043      	b.n	8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007240 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710a:	4b48      	ldr	r3, [pc, #288]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711a:	ed97 6a03 	vldr	s12, [r7, #12]
 800711e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007234 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800713a:	e021      	b.n	8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800723c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800714a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714e:	4b37      	ldr	r3, [pc, #220]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007162:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007234 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800717e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007180:	4b2a      	ldr	r3, [pc, #168]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	0a5b      	lsrs	r3, r3, #9
 8007186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007196:	ee37 7a87 	vadd.f32	s14, s15, s14
 800719a:	edd7 6a07 	vldr	s13, [r7, #28]
 800719e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071a6:	ee17 2a90 	vmov	r2, s15
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80071ae:	4b1f      	ldr	r3, [pc, #124]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80071b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b2:	0c1b      	lsrs	r3, r3, #16
 80071b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80071cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071d4:	ee17 2a90 	vmov	r2, s15
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80071dc:	4b13      	ldr	r3, [pc, #76]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80071de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e0:	0e1b      	lsrs	r3, r3, #24
 80071e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007202:	ee17 2a90 	vmov	r2, s15
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800720a:	e008      	b.n	800721e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	609a      	str	r2, [r3, #8]
}
 800721e:	bf00      	nop
 8007220:	3724      	adds	r7, #36	; 0x24
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	58024400 	.word	0x58024400
 8007230:	03d09000 	.word	0x03d09000
 8007234:	46000000 	.word	0x46000000
 8007238:	4c742400 	.word	0x4c742400
 800723c:	4a742400 	.word	0x4a742400
 8007240:	4bbebc20 	.word	0x4bbebc20

08007244 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007252:	4b53      	ldr	r3, [pc, #332]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	2b03      	cmp	r3, #3
 800725c:	d101      	bne.n	8007262 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e099      	b.n	8007396 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007262:	4b4f      	ldr	r3, [pc, #316]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a4e      	ldr	r2, [pc, #312]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007268:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800726c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800726e:	f7f9 f8b9 	bl	80003e4 <HAL_GetTick>
 8007272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007274:	e008      	b.n	8007288 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007276:	f7f9 f8b5 	bl	80003e4 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	2b02      	cmp	r3, #2
 8007282:	d901      	bls.n	8007288 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e086      	b.n	8007396 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007288:	4b45      	ldr	r3, [pc, #276]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1f0      	bne.n	8007276 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007294:	4b42      	ldr	r3, [pc, #264]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	031b      	lsls	r3, r3, #12
 80072a2:	493f      	ldr	r1, [pc, #252]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	628b      	str	r3, [r1, #40]	; 0x28
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	025b      	lsls	r3, r3, #9
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	431a      	orrs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	041b      	lsls	r3, r3, #16
 80072c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80072ca:	431a      	orrs	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	061b      	lsls	r3, r3, #24
 80072d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80072d8:	4931      	ldr	r1, [pc, #196]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80072de:	4b30      	ldr	r3, [pc, #192]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	492d      	ldr	r1, [pc, #180]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80072f0:	4b2b      	ldr	r3, [pc, #172]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	f023 0220 	bic.w	r2, r3, #32
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	4928      	ldr	r1, [pc, #160]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007302:	4b27      	ldr	r3, [pc, #156]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	4a26      	ldr	r2, [pc, #152]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007308:	f023 0310 	bic.w	r3, r3, #16
 800730c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800730e:	4b24      	ldr	r3, [pc, #144]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007312:	4b24      	ldr	r3, [pc, #144]	; (80073a4 <RCCEx_PLL2_Config+0x160>)
 8007314:	4013      	ands	r3, r2
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	69d2      	ldr	r2, [r2, #28]
 800731a:	00d2      	lsls	r2, r2, #3
 800731c:	4920      	ldr	r1, [pc, #128]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800731e:	4313      	orrs	r3, r2
 8007320:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007322:	4b1f      	ldr	r3, [pc, #124]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	4a1e      	ldr	r2, [pc, #120]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007328:	f043 0310 	orr.w	r3, r3, #16
 800732c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d106      	bne.n	8007342 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007334:	4b1a      	ldr	r3, [pc, #104]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	4a19      	ldr	r2, [pc, #100]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800733a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800733e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007340:	e00f      	b.n	8007362 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d106      	bne.n	8007356 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007348:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	4a14      	ldr	r2, [pc, #80]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800734e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007352:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007354:	e005      	b.n	8007362 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007356:	4b12      	ldr	r3, [pc, #72]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735a:	4a11      	ldr	r2, [pc, #68]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800735c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007360:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007362:	4b0f      	ldr	r3, [pc, #60]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a0e      	ldr	r2, [pc, #56]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007368:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800736c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800736e:	f7f9 f839 	bl	80003e4 <HAL_GetTick>
 8007372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007374:	e008      	b.n	8007388 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007376:	f7f9 f835 	bl	80003e4 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e006      	b.n	8007396 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007388:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0f0      	beq.n	8007376 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	58024400 	.word	0x58024400
 80073a4:	ffff0007 	.word	0xffff0007

080073a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073b6:	4b53      	ldr	r3, [pc, #332]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d101      	bne.n	80073c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e099      	b.n	80074fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80073c6:	4b4f      	ldr	r3, [pc, #316]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a4e      	ldr	r2, [pc, #312]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80073cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073d2:	f7f9 f807 	bl	80003e4 <HAL_GetTick>
 80073d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073d8:	e008      	b.n	80073ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80073da:	f7f9 f803 	bl	80003e4 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e086      	b.n	80074fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073ec:	4b45      	ldr	r3, [pc, #276]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1f0      	bne.n	80073da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073f8:	4b42      	ldr	r3, [pc, #264]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	051b      	lsls	r3, r3, #20
 8007406:	493f      	ldr	r1, [pc, #252]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007408:	4313      	orrs	r3, r2
 800740a:	628b      	str	r3, [r1, #40]	; 0x28
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	3b01      	subs	r3, #1
 8007412:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	3b01      	subs	r3, #1
 800741c:	025b      	lsls	r3, r3, #9
 800741e:	b29b      	uxth	r3, r3
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	3b01      	subs	r3, #1
 8007428:	041b      	lsls	r3, r3, #16
 800742a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	3b01      	subs	r3, #1
 8007436:	061b      	lsls	r3, r3, #24
 8007438:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800743c:	4931      	ldr	r1, [pc, #196]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007442:	4b30      	ldr	r3, [pc, #192]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	492d      	ldr	r1, [pc, #180]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007450:	4313      	orrs	r3, r2
 8007452:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007454:	4b2b      	ldr	r3, [pc, #172]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	4928      	ldr	r1, [pc, #160]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007462:	4313      	orrs	r3, r2
 8007464:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007466:	4b27      	ldr	r3, [pc, #156]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	4a26      	ldr	r2, [pc, #152]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 800746c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007470:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007472:	4b24      	ldr	r3, [pc, #144]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007476:	4b24      	ldr	r3, [pc, #144]	; (8007508 <RCCEx_PLL3_Config+0x160>)
 8007478:	4013      	ands	r3, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	69d2      	ldr	r2, [r2, #28]
 800747e:	00d2      	lsls	r2, r2, #3
 8007480:	4920      	ldr	r1, [pc, #128]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007482:	4313      	orrs	r3, r2
 8007484:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007486:	4b1f      	ldr	r3, [pc, #124]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	4a1e      	ldr	r2, [pc, #120]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 800748c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007490:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d106      	bne.n	80074a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007498:	4b1a      	ldr	r3, [pc, #104]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	4a19      	ldr	r2, [pc, #100]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 800749e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074a4:	e00f      	b.n	80074c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d106      	bne.n	80074ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80074ac:	4b15      	ldr	r3, [pc, #84]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	4a14      	ldr	r2, [pc, #80]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80074b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074b8:	e005      	b.n	80074c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80074ba:	4b12      	ldr	r3, [pc, #72]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	4a11      	ldr	r2, [pc, #68]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80074c6:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a0e      	ldr	r2, [pc, #56]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074d2:	f7f8 ff87 	bl	80003e4 <HAL_GetTick>
 80074d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074d8:	e008      	b.n	80074ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80074da:	f7f8 ff83 	bl	80003e4 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e006      	b.n	80074fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0f0      	beq.n	80074da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	58024400 	.word	0x58024400
 8007508:	ffff0007 	.word	0xffff0007

0800750c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e04d      	b.n	80075ba <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	7a5b      	ldrb	r3, [r3, #9]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	d105      	bne.n	8007534 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f008 fd0a 	bl	800ff48 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f023 0120 	bic.w	r1, r3, #32
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0204 	orr.w	r2, r2, #4
 800755e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	d104      	bne.n	8007578 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2204      	movs	r2, #4
 8007572:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e020      	b.n	80075ba <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8007578:	f7f8 ff34 	bl	80003e4 <HAL_GetTick>
 800757c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800757e:	e00e      	b.n	800759e <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007580:	f7f8 ff30 	bl	80003e4 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d907      	bls.n	800759e <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2204      	movs	r2, #4
 8007592:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e00d      	b.n	80075ba <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d0e9      	beq.n	8007580 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	7a1b      	ldrb	r3, [r3, #8]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <HAL_RNG_GenerateRandomNumber+0x1a>
 80075d8:	2302      	movs	r3, #2
 80075da:	e03d      	b.n	8007658 <HAL_RNG_GenerateRandomNumber+0x96>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	7a5b      	ldrb	r3, [r3, #9]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d12c      	bne.n	8007646 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075f2:	f7f8 fef7 	bl	80003e4 <HAL_GetTick>
 80075f6:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80075f8:	e011      	b.n	800761e <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80075fa:	f7f8 fef3 	bl	80003e4 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d90a      	bls.n	800761e <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2202      	movs	r2, #2
 8007612:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e01c      	b.n	8007658 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b01      	cmp	r3, #1
 800762a:	d1e6      	bne.n	80075fa <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	691a      	ldr	r2, [r3, #16]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	725a      	strb	r2, [r3, #9]
 8007644:	e004      	b.n	8007650 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2204      	movs	r2, #4
 800764a:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	721a      	strb	r2, [r3, #8]

  return status;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2b04      	cmp	r3, #4
 8007672:	d81f      	bhi.n	80076b4 <HAL_SAI_InitProtocol+0x54>
 8007674:	a201      	add	r2, pc, #4	; (adr r2, 800767c <HAL_SAI_InitProtocol+0x1c>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	08007691 	.word	0x08007691
 8007680:	08007691 	.word	0x08007691
 8007684:	08007691 	.word	0x08007691
 8007688:	080076a3 	.word	0x080076a3
 800768c:	080076a3 	.word	0x080076a3
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	68b9      	ldr	r1, [r7, #8]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fc1c 	bl	8007ed4 <SAI_InitI2S>
 800769c:	4603      	mov	r3, r0
 800769e:	75fb      	strb	r3, [r7, #23]
      break;
 80076a0:	e00b      	b.n	80076ba <HAL_SAI_InitProtocol+0x5a>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	68b9      	ldr	r1, [r7, #8]
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fcc5 	bl	8008038 <SAI_InitPCM>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75fb      	strb	r3, [r7, #23]
      break;
 80076b2:	e002      	b.n	80076ba <HAL_SAI_InitProtocol+0x5a>
    default :
      status = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	75fb      	strb	r3, [r7, #23]
      break;
 80076b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d104      	bne.n	80076ca <HAL_SAI_InitProtocol+0x6a>
  {
    status = HAL_SAI_Init(hsai);
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f807 	bl	80076d4 <HAL_SAI_Init>
 80076c6:	4603      	mov	r3, r0
 80076c8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08a      	sub	sp, #40	; 0x28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e268      	b.n	8007bb8 <HAL_SAI_Init+0x4e4>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80076e6:	f7f8 feab 	bl	8000440 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d113      	bne.n	800771c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a8b      	ldr	r2, [pc, #556]	; (8007928 <HAL_SAI_Init+0x254>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d004      	beq.n	8007708 <HAL_SAI_Init+0x34>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a8a      	ldr	r2, [pc, #552]	; (800792c <HAL_SAI_Init+0x258>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d107      	bne.n	8007718 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800770c:	2b01      	cmp	r3, #1
 800770e:	d103      	bne.n	8007718 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e24d      	b.n	8007bb8 <HAL_SAI_Init+0x4e4>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a81      	ldr	r2, [pc, #516]	; (8007928 <HAL_SAI_Init+0x254>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d004      	beq.n	8007730 <HAL_SAI_Init+0x5c>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a81      	ldr	r2, [pc, #516]	; (8007930 <HAL_SAI_Init+0x25c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d102      	bne.n	8007736 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007730:	4b80      	ldr	r3, [pc, #512]	; (8007934 <HAL_SAI_Init+0x260>)
 8007732:	61bb      	str	r3, [r7, #24]
 8007734:	e028      	b.n	8007788 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a7f      	ldr	r2, [pc, #508]	; (8007938 <HAL_SAI_Init+0x264>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d004      	beq.n	800774a <HAL_SAI_Init+0x76>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a7d      	ldr	r2, [pc, #500]	; (800793c <HAL_SAI_Init+0x268>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d102      	bne.n	8007750 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800774a:	4b7d      	ldr	r3, [pc, #500]	; (8007940 <HAL_SAI_Init+0x26c>)
 800774c:	61bb      	str	r3, [r7, #24]
 800774e:	e01b      	b.n	8007788 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a7b      	ldr	r2, [pc, #492]	; (8007944 <HAL_SAI_Init+0x270>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d004      	beq.n	8007764 <HAL_SAI_Init+0x90>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a7a      	ldr	r2, [pc, #488]	; (8007948 <HAL_SAI_Init+0x274>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d102      	bne.n	800776a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007764:	4b79      	ldr	r3, [pc, #484]	; (800794c <HAL_SAI_Init+0x278>)
 8007766:	61bb      	str	r3, [r7, #24]
 8007768:	e00e      	b.n	8007788 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a6f      	ldr	r2, [pc, #444]	; (800792c <HAL_SAI_Init+0x258>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d004      	beq.n	800777e <HAL_SAI_Init+0xaa>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a75      	ldr	r2, [pc, #468]	; (8007950 <HAL_SAI_Init+0x27c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d102      	bne.n	8007784 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800777e:	4b75      	ldr	r3, [pc, #468]	; (8007954 <HAL_SAI_Init+0x280>)
 8007780:	61bb      	str	r3, [r7, #24]
 8007782:	e001      	b.n	8007788 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e217      	b.n	8007bb8 <HAL_SAI_Init+0x4e4>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d106      	bne.n	80077a2 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f008 fc55 	bl	801004c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fd02 	bl	80081ac <SAI_Disable>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e202      	b.n	8007bb8 <HAL_SAI_Init+0x4e4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2202      	movs	r2, #2
 80077b6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d007      	beq.n	80077d2 <HAL_SAI_Init+0xfe>
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d302      	bcc.n	80077cc <HAL_SAI_Init+0xf8>
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d006      	beq.n	80077d8 <HAL_SAI_Init+0x104>
 80077ca:	e008      	b.n	80077de <HAL_SAI_Init+0x10a>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80077d0:	e008      	b.n	80077e4 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80077d2:	2310      	movs	r3, #16
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80077d6:	e005      	b.n	80077e4 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80077d8:	2320      	movs	r3, #32
 80077da:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80077dc:	e002      	b.n	80077e4 <HAL_SAI_Init+0x110>
    default:
      tmpregisterGCR = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80077e2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2b05      	cmp	r3, #5
 80077ea:	d832      	bhi.n	8007852 <HAL_SAI_Init+0x17e>
 80077ec:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <HAL_SAI_Init+0x120>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	0800780d 	.word	0x0800780d
 80077f8:	08007813 	.word	0x08007813
 80077fc:	0800781b 	.word	0x0800781b
 8007800:	08007823 	.word	0x08007823
 8007804:	08007833 	.word	0x08007833
 8007808:	08007843 	.word	0x08007843
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	61fb      	str	r3, [r7, #28]
      break;
 8007810:	e022      	b.n	8007858 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007816:	61fb      	str	r3, [r7, #28]
      break;
 8007818:	e01e      	b.n	8007858 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800781a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800781e:	61fb      	str	r3, [r7, #28]
      break;
 8007820:	e01a      	b.n	8007858 <HAL_SAI_Init+0x184>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007826:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	f043 0301 	orr.w	r3, r3, #1
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007830:	e012      	b.n	8007858 <HAL_SAI_Init+0x184>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007832:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007836:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	f043 0302 	orr.w	r3, r3, #2
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007840:	e00a      	b.n	8007858 <HAL_SAI_Init+0x184>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007846:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	f043 0303 	orr.w	r3, r3, #3
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007850:	e002      	b.n	8007858 <HAL_SAI_Init+0x184>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	61fb      	str	r3, [r7, #28]
      break;
 8007856:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 80a1 	beq.w	80079aa <HAL_SAI_Init+0x2d6>
  {
    uint32_t freq = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a2d      	ldr	r2, [pc, #180]	; (8007928 <HAL_SAI_Init+0x254>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d004      	beq.n	8007880 <HAL_SAI_Init+0x1ac>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a2d      	ldr	r2, [pc, #180]	; (8007930 <HAL_SAI_Init+0x25c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d104      	bne.n	800788a <HAL_SAI_Init+0x1b6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007880:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007884:	f7fe fe6c 	bl	8006560 <HAL_RCCEx_GetPeriphCLKFreq>
 8007888:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a2a      	ldr	r2, [pc, #168]	; (8007938 <HAL_SAI_Init+0x264>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d004      	beq.n	800789e <HAL_SAI_Init+0x1ca>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a28      	ldr	r2, [pc, #160]	; (800793c <HAL_SAI_Init+0x268>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d104      	bne.n	80078a8 <HAL_SAI_Init+0x1d4>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800789e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80078a2:	f7fe fe5d 	bl	8006560 <HAL_RCCEx_GetPeriphCLKFreq>
 80078a6:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a25      	ldr	r2, [pc, #148]	; (8007944 <HAL_SAI_Init+0x270>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d004      	beq.n	80078bc <HAL_SAI_Init+0x1e8>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a24      	ldr	r2, [pc, #144]	; (8007948 <HAL_SAI_Init+0x274>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d104      	bne.n	80078c6 <HAL_SAI_Init+0x1f2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80078bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80078c0:	f7fe fe4e 	bl	8006560 <HAL_RCCEx_GetPeriphCLKFreq>
 80078c4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a18      	ldr	r2, [pc, #96]	; (800792c <HAL_SAI_Init+0x258>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d104      	bne.n	80078da <HAL_SAI_Init+0x206>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80078d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80078d4:	f7fe fe44 	bl	8006560 <HAL_RCCEx_GetPeriphCLKFreq>
 80078d8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a1c      	ldr	r2, [pc, #112]	; (8007950 <HAL_SAI_Init+0x27c>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d104      	bne.n	80078ee <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80078e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80078e8:	f7fe fe3a 	bl	8006560 <HAL_RCCEx_GetPeriphCLKFreq>
 80078ec:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80078f6:	d10f      	bne.n	8007918 <HAL_SAI_Init+0x244>
    {
      /* NODIV = 1 */
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	4613      	mov	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	4619      	mov	r1, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	fbb1 f3f3 	udiv	r3, r1, r3
 8007914:	613b      	str	r3, [r7, #16]
 8007916:	e030      	b.n	800797a <HAL_SAI_Init+0x2a6>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007920:	d11a      	bne.n	8007958 <HAL_SAI_Init+0x284>
 8007922:	2302      	movs	r3, #2
 8007924:	e019      	b.n	800795a <HAL_SAI_Init+0x286>
 8007926:	bf00      	nop
 8007928:	40015804 	.word	0x40015804
 800792c:	58005404 	.word	0x58005404
 8007930:	40015824 	.word	0x40015824
 8007934:	40015800 	.word	0x40015800
 8007938:	40015c04 	.word	0x40015c04
 800793c:	40015c24 	.word	0x40015c24
 8007940:	40015c00 	.word	0x40015c00
 8007944:	40016004 	.word	0x40016004
 8007948:	40016024 	.word	0x40016024
 800794c:	40016000 	.word	0x40016000
 8007950:	58005424 	.word	0x58005424
 8007954:	58005400 	.word	0x58005400
 8007958:	2301      	movs	r3, #1
 800795a:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	4619      	mov	r1, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	fb02 f303 	mul.w	r3, r2, r3
 8007972:	021b      	lsls	r3, r3, #8
 8007974:	fbb1 f3f3 	udiv	r3, r1, r3
 8007978:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	4a90      	ldr	r2, [pc, #576]	; (8007bc0 <HAL_SAI_Init+0x4ec>)
 800797e:	fba2 2303 	umull	r2, r3, r2, r3
 8007982:	08da      	lsrs	r2, r3, #3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007988:	6939      	ldr	r1, [r7, #16]
 800798a:	4b8d      	ldr	r3, [pc, #564]	; (8007bc0 <HAL_SAI_Init+0x4ec>)
 800798c:	fba3 2301 	umull	r2, r3, r3, r1
 8007990:	08da      	lsrs	r2, r3, #3
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	1aca      	subs	r2, r1, r3
 800799c:	2a08      	cmp	r2, #8
 800799e:	d904      	bls.n	80079aa <HAL_SAI_Init+0x2d6>
    {
      hsai->Init.Mckdiv += 1U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <HAL_SAI_Init+0x2e6>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d109      	bne.n	80079ce <HAL_SAI_Init+0x2fa>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d101      	bne.n	80079c6 <HAL_SAI_Init+0x2f2>
 80079c2:	2300      	movs	r3, #0
 80079c4:	e001      	b.n	80079ca <HAL_SAI_Init+0x2f6>
 80079c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ca:	623b      	str	r3, [r7, #32]
 80079cc:	e008      	b.n	80079e0 <HAL_SAI_Init+0x30c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d102      	bne.n	80079dc <HAL_SAI_Init+0x308>
 80079d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079da:	e000      	b.n	80079de <HAL_SAI_Init+0x30a>
 80079dc:	2300      	movs	r3, #0
 80079de:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80079e0:	f7f8 fd2e 	bl	8000440 <HAL_GetREVID>
 80079e4:	4603      	mov	r3, r0
 80079e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ea:	d331      	bcc.n	8007a50 <HAL_SAI_Init+0x37c>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6819      	ldr	r1, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	4b73      	ldr	r3, [pc, #460]	; (8007bc4 <HAL_SAI_Init+0x4f0>)
 80079f8:	400b      	ands	r3, r1
 80079fa:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6819      	ldr	r1, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a10:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a16:	431a      	orrs	r2, r3
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007a24:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a30:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	051b      	lsls	r3, r3, #20
 8007a38:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a3e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	e02d      	b.n	8007aac <HAL_SAI_Init+0x3d8>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6819      	ldr	r1, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	4b5b      	ldr	r3, [pc, #364]	; (8007bc8 <HAL_SAI_Init+0x4f4>)
 8007a5c:	400b      	ands	r3, r1
 8007a5e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6819      	ldr	r1, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a74:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007a88:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a94:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9a:	051b      	lsls	r3, r3, #20
 8007a9c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007aa2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6859      	ldr	r1, [r3, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4b45      	ldr	r3, [pc, #276]	; (8007bcc <HAL_SAI_Init+0x4f8>)
 8007ab8:	400b      	ands	r3, r1
 8007aba:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6859      	ldr	r1, [r3, #4]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	69da      	ldr	r2, [r3, #28]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6899      	ldr	r1, [r3, #8]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	4b3a      	ldr	r3, [pc, #232]	; (8007bd0 <HAL_SAI_Init+0x4fc>)
 8007ae6:	400b      	ands	r3, r1
 8007ae8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6899      	ldr	r1, [r3, #8]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007afa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8007b00:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007b06:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007b10:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68d9      	ldr	r1, [r3, #12]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007b28:	400b      	ands	r3, r1
 8007b2a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68d9      	ldr	r1, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b3a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b40:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b42:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	021b      	lsls	r3, r3, #8
 8007b4c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a1e      	ldr	r2, [pc, #120]	; (8007bd4 <HAL_SAI_Init+0x500>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d004      	beq.n	8007b6a <HAL_SAI_Init+0x496>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a1c      	ldr	r2, [pc, #112]	; (8007bd8 <HAL_SAI_Init+0x504>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d119      	bne.n	8007b9e <HAL_SAI_Init+0x4ca>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b6e:	f023 0201 	bic.w	r2, r3, #1
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d10e      	bne.n	8007b9e <HAL_SAI_Init+0x4ca>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b96:	f043 0201 	orr.w	r2, r3, #1
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3728      	adds	r7, #40	; 0x28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	cccccccd 	.word	0xcccccccd
 8007bc4:	f005c010 	.word	0xf005c010
 8007bc8:	f805c010 	.word	0xf805c010
 8007bcc:	ffff1ff0 	.word	0xffff1ff0
 8007bd0:	fff88000 	.word	0xfff88000
 8007bd4:	40015804 	.word	0x40015804
 8007bd8:	58005404 	.word	0x58005404

08007bdc <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	4613      	mov	r3, r2
 8007be8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007bea:	f7f8 fbfb 	bl	80003e4 <HAL_GetTick>
 8007bee:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <HAL_SAI_Transmit_DMA+0x20>
 8007bf6:	88fb      	ldrh	r3, [r7, #6]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e098      	b.n	8007d32 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	f040 8091 	bne.w	8007d30 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_SAI_Transmit_DMA+0x40>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e08a      	b.n	8007d32 <HAL_SAI_Transmit_DMA+0x156>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	88fa      	ldrh	r2, [r7, #6]
 8007c2e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	88fa      	ldrh	r2, [r7, #6]
 8007c36:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2212      	movs	r2, #18
 8007c46:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c50:	4a3a      	ldr	r2, [pc, #232]	; (8007d3c <HAL_SAI_Transmit_DMA+0x160>)
 8007c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c5a:	4a39      	ldr	r2, [pc, #228]	; (8007d40 <HAL_SAI_Transmit_DMA+0x164>)
 8007c5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c64:	4a37      	ldr	r2, [pc, #220]	; (8007d44 <HAL_SAI_Transmit_DMA+0x168>)
 8007c66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c6e:	2200      	movs	r2, #0
 8007c70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	331c      	adds	r3, #28
 8007c84:	461a      	mov	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007c8c:	f7fa fb4a 	bl	8002324 <HAL_DMA_Start_IT>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d005      	beq.n	8007ca2 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e047      	b.n	8007d32 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 fa49 	bl	800813c <SAI_InterruptFlag>
 8007caa:	4601      	mov	r1, r0
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691a      	ldr	r2, [r3, #16]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007cc8:	601a      	str	r2, [r3, #0]

    /* Wait untill FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007cca:	e015      	b.n	8007cf8 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007ccc:	f7f8 fb8a 	bl	80003e4 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cda:	d90d      	bls.n	8007cf8 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ce2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e01c      	b.n	8007d32 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0e2      	beq.n	8007ccc <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d107      	bne.n	8007d24 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d22:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	e000      	b.n	8007d32 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8007d30:	2302      	movs	r3, #2
  }
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3718      	adds	r7, #24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	08008275 	.word	0x08008275
 8007d40:	08008215 	.word	0x08008215
 8007d44:	0800830d 	.word	0x0800830d

08007d48 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <HAL_SAI_Receive_DMA+0x1a>
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e079      	b.n	8007e5a <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d172      	bne.n	8007e58 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d101      	bne.n	8007d80 <HAL_SAI_Receive_DMA+0x38>
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	e06c      	b.n	8007e5a <HAL_SAI_Receive_DMA+0x112>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	88fa      	ldrh	r2, [r7, #6]
 8007d92:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	88fa      	ldrh	r2, [r7, #6]
 8007d9a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2222      	movs	r2, #34	; 0x22
 8007daa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007db4:	4a2b      	ldr	r2, [pc, #172]	; (8007e64 <HAL_SAI_Receive_DMA+0x11c>)
 8007db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dbe:	4a2a      	ldr	r2, [pc, #168]	; (8007e68 <HAL_SAI_Receive_DMA+0x120>)
 8007dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc8:	4a28      	ldr	r2, [pc, #160]	; (8007e6c <HAL_SAI_Receive_DMA+0x124>)
 8007dca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	331c      	adds	r3, #28
 8007de2:	4619      	mov	r1, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007de8:	461a      	mov	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007df0:	f7fa fa98 	bl	8002324 <HAL_DMA_Start_IT>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e029      	b.n	8007e5a <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007e06:	2100      	movs	r1, #0
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 f997 	bl	800813c <SAI_InterruptFlag>
 8007e0e:	4601      	mov	r1, r0
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691a      	ldr	r2, [r3, #16]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007e2c:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d107      	bne.n	8007e4c <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007e4a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	e000      	b.n	8007e5a <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8007e58:	2302      	movs	r3, #2
  }
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	080082f1 	.word	0x080082f1
 8007e68:	08008291 	.word	0x08008291
 8007e6c:	0800830d 	.word	0x0800830d

08007e70 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <SAI_InitI2S+0x2e>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d103      	bne.n	8007f0a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	651a      	str	r2, [r3, #80]	; 0x50
 8007f08:	e002      	b.n	8007f10 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007f16:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f1e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e077      	b.n	800802a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d107      	bne.n	8007f50 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007f4c:	665a      	str	r2, [r3, #100]	; 0x64
 8007f4e:	e006      	b.n	8007f5e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f56:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d84f      	bhi.n	8008004 <SAI_InitI2S+0x130>
 8007f64:	a201      	add	r2, pc, #4	; (adr r2, 8007f6c <SAI_InitI2S+0x98>)
 8007f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6a:	bf00      	nop
 8007f6c:	08007f7d 	.word	0x08007f7d
 8007f70:	08007f9f 	.word	0x08007f9f
 8007f74:	08007fc1 	.word	0x08007fc1
 8007f78:	08007fe3 	.word	0x08007fe3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2280      	movs	r2, #128	; 0x80
 8007f80:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	085b      	lsrs	r3, r3, #1
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	011a      	lsls	r2, r3, #4
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2240      	movs	r2, #64	; 0x40
 8007f9a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f9c:	e035      	b.n	800800a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2280      	movs	r2, #128	; 0x80
 8007fa2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	085b      	lsrs	r3, r3, #1
 8007fa8:	019a      	lsls	r2, r3, #6
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	085b      	lsrs	r3, r3, #1
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2280      	movs	r2, #128	; 0x80
 8007fbc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007fbe:	e024      	b.n	800800a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	22c0      	movs	r2, #192	; 0xc0
 8007fc4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	085b      	lsrs	r3, r3, #1
 8007fca:	019a      	lsls	r2, r3, #6
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	085b      	lsrs	r3, r3, #1
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2280      	movs	r2, #128	; 0x80
 8007fde:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007fe0:	e013      	b.n	800800a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	22e0      	movs	r2, #224	; 0xe0
 8007fe6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	085b      	lsrs	r3, r3, #1
 8007fec:	019a      	lsls	r2, r3, #6
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	085b      	lsrs	r3, r3, #1
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2280      	movs	r2, #128	; 0x80
 8008000:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008002:	e002      	b.n	800800a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	75fb      	strb	r3, [r7, #23]
      break;
 8008008:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d10b      	bne.n	8008028 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d102      	bne.n	800801c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2210      	movs	r2, #16
 800801a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d102      	bne.n	8008028 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2208      	movs	r2, #8
 8008026:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
}
 800802a:	4618      	mov	r0, r3
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop

08008038 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <SAI_InitPCM+0x2e>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	2b02      	cmp	r3, #2
 8008064:	d103      	bne.n	800806e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2201      	movs	r2, #1
 800806a:	651a      	str	r2, [r3, #80]	; 0x50
 800806c:	e002      	b.n	8008074 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008080:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008088:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800809c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d103      	bne.n	80080ac <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2201      	movs	r2, #1
 80080a8:	659a      	str	r2, [r3, #88]	; 0x58
 80080aa:	e002      	b.n	80080b2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	220d      	movs	r2, #13
 80080b0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d837      	bhi.n	8008128 <SAI_InitPCM+0xf0>
 80080b8:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <SAI_InitPCM+0x88>)
 80080ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080be:	bf00      	nop
 80080c0:	080080d1 	.word	0x080080d1
 80080c4:	080080e7 	.word	0x080080e7
 80080c8:	080080fd 	.word	0x080080fd
 80080cc:	08008113 	.word	0x08008113
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2280      	movs	r2, #128	; 0x80
 80080d4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	011a      	lsls	r2, r3, #4
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2240      	movs	r2, #64	; 0x40
 80080e2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80080e4:	e023      	b.n	800812e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2280      	movs	r2, #128	; 0x80
 80080ea:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2280      	movs	r2, #128	; 0x80
 80080f8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80080fa:	e018      	b.n	800812e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	22c0      	movs	r2, #192	; 0xc0
 8008100:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2280      	movs	r2, #128	; 0x80
 800810e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008110:	e00d      	b.n	800812e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	22e0      	movs	r2, #224	; 0xe0
 8008116:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2280      	movs	r2, #128	; 0x80
 8008124:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008126:	e002      	b.n	800812e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	75fb      	strb	r3, [r7, #23]
      break;
 800812c:	bf00      	nop
  }

  return status;
 800812e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008130:	4618      	mov	r0, r3
 8008132:	371c      	adds	r7, #28
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008148:	2301      	movs	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d103      	bne.n	800815a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f043 0308 	orr.w	r3, r3, #8
 8008158:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815e:	2b08      	cmp	r3, #8
 8008160:	d10b      	bne.n	800817a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008166:	2b03      	cmp	r3, #3
 8008168:	d003      	beq.n	8008172 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d103      	bne.n	800817a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f043 0310 	orr.w	r3, r3, #16
 8008178:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	2b03      	cmp	r3, #3
 8008180:	d003      	beq.n	800818a <SAI_InterruptFlag+0x4e>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	2b02      	cmp	r3, #2
 8008188:	d104      	bne.n	8008194 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	e003      	b.n	800819c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f043 0304 	orr.w	r3, r3, #4
 800819a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800819c:	68fb      	ldr	r3, [r7, #12]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
	...

080081ac <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80081ac:	b490      	push	{r4, r7}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80081b4:	4b15      	ldr	r3, [pc, #84]	; (800820c <SAI_Disable+0x60>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a15      	ldr	r2, [pc, #84]	; (8008210 <SAI_Disable+0x64>)
 80081ba:	fba2 2303 	umull	r2, r3, r2, r3
 80081be:	0b1b      	lsrs	r3, r3, #12
 80081c0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80081d4:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80081d6:	2c00      	cmp	r4, #0
 80081d8:	d10a      	bne.n	80081f0 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	73fb      	strb	r3, [r7, #15]
      break;
 80081ee:	e007      	b.n	8008200 <SAI_Disable+0x54>
    }
    count--;
 80081f0:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1ea      	bne.n	80081d6 <SAI_Disable+0x2a>

  return status;
 8008200:	7bfb      	ldrb	r3, [r7, #15]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bc90      	pop	{r4, r7}
 800820a:	4770      	bx	lr
 800820c:	20000010 	.word	0x20000010
 8008210:	95cbec1b 	.word	0x95cbec1b

08008214 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008220:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800822a:	d01c      	beq.n	8008266 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008242:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008244:	2100      	movs	r1, #0
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f7ff ff78 	bl	800813c <SAI_InterruptFlag>
 800824c:	4603      	mov	r3, r0
 800824e:	43d9      	mvns	r1, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691a      	ldr	r2, [r3, #16]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	400a      	ands	r2, r1
 800825c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f7ff fe02 	bl	8007e70 <HAL_SAI_TxCpltCallback>
#endif
}
 800826c:	bf00      	nop
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7ff fdfe 	bl	8007e84 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8008288:	bf00      	nop
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082a6:	d01c      	beq.n	80082e2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80082b6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80082c0:	2100      	movs	r1, #0
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff ff3a 	bl	800813c <SAI_InterruptFlag>
 80082c8:	4603      	mov	r3, r0
 80082ca:	43d9      	mvns	r1, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	400a      	ands	r2, r1
 80082d8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f7ff fdd8 	bl	8007e98 <HAL_SAI_RxCpltCallback>
#endif
}
 80082e8:	bf00      	nop
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f7ff fdd4 	bl	8007eac <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008318:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7fb fbda 	bl	8003ad4 <HAL_DMA_GetError>
 8008320:	4603      	mov	r3, r0
 8008322:	2b02      	cmp	r3, #2
 8008324:	d01d      	beq.n	8008362 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800832c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008344:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7ff ff30 	bl	80081ac <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7ff fdaf 	bl	8007ec0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8008362:	bf00      	nop
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b08a      	sub	sp, #40	; 0x28
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e07c      	b.n	8008476 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10c      	bne.n	80083a2 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d102      	bne.n	800839c <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2202      	movs	r2, #2
 800839a:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f008 f853 	bl	8010448 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2203      	movs	r2, #3
 80083a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f868 	bl	8008480 <HAL_SD_InitCard>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e05d      	b.n	8008476 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80083ba:	f107 0308 	add.w	r3, r7, #8
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 ff79 	bl	80092b8 <HAL_SD_GetCardStatus>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e052      	b.n	8008476 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80083d0:	7e3b      	ldrb	r3, [r7, #24]
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80083d6:	7e7b      	ldrb	r3, [r7, #25]
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d10a      	bne.n	80083fa <HAL_SD_Init+0x90>
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <HAL_SD_Init+0x86>
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d004      	beq.n	80083fa <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80083f8:	e00b      	b.n	8008412 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d104      	bne.n	800840c <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008408:	65da      	str	r2, [r3, #92]	; 0x5c
 800840a:	e002      	b.n	8008412 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f001 f82f 	bl	800947c <HAL_SD_ConfigWideBusOperation>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e026      	b.n	8008476 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008428:	f7f7 ffdc 	bl	80003e4 <HAL_GetTick>
 800842c:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800842e:	e011      	b.n	8008454 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008430:	f7f7 ffd8 	bl	80003e4 <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800843e:	d109      	bne.n	8008454 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008446:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e010      	b.n	8008476 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f001 f8bb 	bl	80095d0 <HAL_SD_GetCardState>
 800845a:	4603      	mov	r3, r0
 800845c:	2b04      	cmp	r3, #4
 800845e:	d1e7      	bne.n	8008430 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3728      	adds	r7, #40	; 0x28
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
	...

08008480 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008480:	b5b0      	push	{r4, r5, r7, lr}
 8008482:	b08e      	sub	sp, #56	; 0x38
 8008484:	af04      	add	r7, sp, #16
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008488:	2300      	movs	r3, #0
 800848a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008490:	2300      	movs	r3, #0
 8008492:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008494:	2300      	movs	r3, #0
 8008496:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008498:	23fa      	movs	r3, #250	; 0xfa
 800849a:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d107      	bne.n	80084b4 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0210 	orr.w	r2, r2, #16
 80084b2:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681d      	ldr	r5, [r3, #0]
 80084b8:	466c      	mov	r4, sp
 80084ba:	f107 0314 	add.w	r3, r7, #20
 80084be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80084c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80084c6:	f107 0308 	add.w	r3, r7, #8
 80084ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084cc:	4628      	mov	r0, r5
 80084ce:	f002 fd53 	bl	800af78 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f002 fd96 	bl	800b008 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 80084dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80084e0:	f7fe f83e 	bl	8006560 <HAL_RCCEx_GetPeriphCLKFreq>
 80084e4:	4602      	mov	r2, r0
 80084e6:	4b2d      	ldr	r3, [pc, #180]	; (800859c <HAL_SD_InitCard+0x11c>)
 80084e8:	fba3 2302 	umull	r2, r3, r3, r2
 80084ec:	095b      	lsrs	r3, r3, #5
 80084ee:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d008      	beq.n	8008508 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80084f6:	4a2a      	ldr	r2, [pc, #168]	; (80085a0 <HAL_SD_InitCard+0x120>)
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fe:	3301      	adds	r3, #1
 8008500:	4618      	mov	r0, r3
 8008502:	f7f7 ff7b 	bl	80003fc <HAL_Delay>
 8008506:	e002      	b.n	800850e <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 8008508:	2002      	movs	r0, #2
 800850a:	f7f7 ff77 	bl	80003fc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f001 f93c 	bl	800978c <SD_PowerON>
 8008514:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00b      	beq.n	8008534 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	431a      	orrs	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e02e      	b.n	8008592 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 f86b 	bl	8009610 <SD_InitCard>
 800853a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00b      	beq.n	800855a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	431a      	orrs	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e01b      	b.n	8008592 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008562:	4618      	mov	r0, r3
 8008564:	f002 fde6 	bl	800b134 <SDMMC_CmdBlockLength>
 8008568:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00f      	beq.n	8008590 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a0b      	ldr	r2, [pc, #44]	; (80085a4 <HAL_SD_InitCard+0x124>)
 8008576:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	431a      	orrs	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e000      	b.n	8008592 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3728      	adds	r7, #40	; 0x28
 8008596:	46bd      	mov	sp, r7
 8008598:	bdb0      	pop	{r4, r5, r7, pc}
 800859a:	bf00      	nop
 800859c:	10624dd3 	.word	0x10624dd3
 80085a0:	00012110 	.word	0x00012110
 80085a4:	1fe00fff 	.word	0x1fe00fff

080085a8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b092      	sub	sp, #72	; 0x48
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80085b6:	f7f7 ff15 	bl	80003e4 <HAL_GetTick>
 80085ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d107      	bne.n	80085da <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e167      	b.n	80088aa <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	f040 815a 	bne.w	800889c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	441a      	add	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d907      	bls.n	800860c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e14e      	b.n	80088aa <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2203      	movs	r2, #3
 8008610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2200      	movs	r2, #0
 800861a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008620:	2b01      	cmp	r3, #1
 8008622:	d002      	beq.n	800862a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	025b      	lsls	r3, r3, #9
 8008628:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800862a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800862e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	025b      	lsls	r3, r3, #9
 8008634:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008636:	2390      	movs	r3, #144	; 0x90
 8008638:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800863a:	2302      	movs	r3, #2
 800863c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800863e:	2300      	movs	r3, #0
 8008640:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008642:	2300      	movs	r3, #0
 8008644:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f107 0214 	add.w	r2, r7, #20
 800864e:	4611      	mov	r1, r2
 8008650:	4618      	mov	r0, r3
 8008652:	f002 fd43 	bl	800b0dc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008664:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d90a      	bls.n	8008682 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2202      	movs	r2, #2
 8008670:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008678:	4618      	mov	r0, r3
 800867a:	f002 fda1 	bl	800b1c0 <SDMMC_CmdReadMultiBlock>
 800867e:	6478      	str	r0, [r7, #68]	; 0x44
 8008680:	e009      	b.n	8008696 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2201      	movs	r2, #1
 8008686:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800868e:	4618      	mov	r0, r3
 8008690:	f002 fd73 	bl	800b17a <SDMMC_CmdReadSingleBlock>
 8008694:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008698:	2b00      	cmp	r3, #0
 800869a:	d012      	beq.n	80086c2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a84      	ldr	r2, [pc, #528]	; (80088b4 <HAL_SD_ReadBlocks+0x30c>)
 80086a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086aa:	431a      	orrs	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e0f3      	b.n	80088aa <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80086c6:	e058      	b.n	800877a <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d033      	beq.n	800873e <HAL_SD_ReadBlocks+0x196>
 80086d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d8:	2b1f      	cmp	r3, #31
 80086da:	d930      	bls.n	800873e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80086dc:	2300      	movs	r3, #0
 80086de:	643b      	str	r3, [r7, #64]	; 0x40
 80086e0:	e027      	b.n	8008732 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f002 fc70 	bl	800afcc <SDMMC_ReadFIFO>
 80086ec:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80086f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f8:	3301      	adds	r3, #1
 80086fa:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	0a1b      	lsrs	r3, r3, #8
 8008700:	b2da      	uxtb	r2, r3
 8008702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008704:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008708:	3301      	adds	r3, #1
 800870a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800870c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870e:	0c1b      	lsrs	r3, r3, #16
 8008710:	b2da      	uxtb	r2, r3
 8008712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008714:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008718:	3301      	adds	r3, #1
 800871a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	0e1b      	lsrs	r3, r3, #24
 8008720:	b2da      	uxtb	r2, r3
 8008722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008724:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008728:	3301      	adds	r3, #1
 800872a:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800872c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800872e:	3301      	adds	r3, #1
 8008730:	643b      	str	r3, [r7, #64]	; 0x40
 8008732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008734:	2b07      	cmp	r3, #7
 8008736:	d9d4      	bls.n	80086e2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873a:	3b20      	subs	r3, #32
 800873c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800873e:	f7f7 fe51 	bl	80003e4 <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800874a:	429a      	cmp	r2, r3
 800874c:	d902      	bls.n	8008754 <HAL_SD_ReadBlocks+0x1ac>
 800874e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008750:	2b00      	cmp	r3, #0
 8008752:	d112      	bne.n	800877a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a56      	ldr	r2, [pc, #344]	; (80088b4 <HAL_SD_ReadBlocks+0x30c>)
 800875a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e097      	b.n	80088aa <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008780:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008784:	2b00      	cmp	r3, #0
 8008786:	d09f      	beq.n	80086c8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008796:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800879e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d022      	beq.n	80087ec <HAL_SD_ReadBlocks+0x244>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d91f      	bls.n	80087ec <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d01b      	beq.n	80087ec <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f002 fd6b 	bl	800b294 <SDMMC_CmdStopTransfer>
 80087be:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80087c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d012      	beq.n	80087ec <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a3a      	ldr	r2, [pc, #232]	; (80088b4 <HAL_SD_ReadBlocks+0x30c>)
 80087cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d4:	431a      	orrs	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e05e      	b.n	80088aa <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d012      	beq.n	8008820 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a2d      	ldr	r2, [pc, #180]	; (80088b4 <HAL_SD_ReadBlocks+0x30c>)
 8008800:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	f043 0208 	orr.w	r2, r3, #8
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e044      	b.n	80088aa <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d012      	beq.n	8008854 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a20      	ldr	r2, [pc, #128]	; (80088b4 <HAL_SD_ReadBlocks+0x30c>)
 8008834:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883a:	f043 0202 	orr.w	r2, r3, #2
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e02a      	b.n	80088aa <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885a:	f003 0320 	and.w	r3, r3, #32
 800885e:	2b00      	cmp	r3, #0
 8008860:	d012      	beq.n	8008888 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a13      	ldr	r2, [pc, #76]	; (80088b4 <HAL_SD_ReadBlocks+0x30c>)
 8008868:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886e:	f043 0220 	orr.w	r2, r3, #32
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e010      	b.n	80088aa <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a0a      	ldr	r2, [pc, #40]	; (80088b8 <HAL_SD_ReadBlocks+0x310>)
 800888e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	e006      	b.n	80088aa <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
  }
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3748      	adds	r7, #72	; 0x48
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	1fe00fff 	.word	0x1fe00fff
 80088b8:	18000f3a 	.word	0x18000f3a

080088bc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b092      	sub	sp, #72	; 0x48
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
 80088c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088ca:	f7f7 fd8b 	bl	80003e4 <HAL_GetTick>
 80088ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d107      	bne.n	80088ee <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e16b      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	f040 815e 	bne.w	8008bb8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	441a      	add	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890c:	429a      	cmp	r2, r3
 800890e:	d907      	bls.n	8008920 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008914:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e152      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2203      	movs	r2, #3
 8008924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2200      	movs	r2, #0
 800892e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008934:	2b01      	cmp	r3, #1
 8008936:	d002      	beq.n	800893e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	025b      	lsls	r3, r3, #9
 800893c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800893e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008942:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	025b      	lsls	r3, r3, #9
 8008948:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800894a:	2390      	movs	r3, #144	; 0x90
 800894c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800894e:	2300      	movs	r3, #0
 8008950:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008952:	2300      	movs	r3, #0
 8008954:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008956:	2300      	movs	r3, #0
 8008958:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f107 0218 	add.w	r2, r7, #24
 8008962:	4611      	mov	r1, r2
 8008964:	4618      	mov	r0, r3
 8008966:	f002 fbb9 	bl	800b0dc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68da      	ldr	r2, [r3, #12]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008978:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d90a      	bls.n	8008996 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2220      	movs	r2, #32
 8008984:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800898c:	4618      	mov	r0, r3
 800898e:	f002 fc5d 	bl	800b24c <SDMMC_CmdWriteMultiBlock>
 8008992:	6478      	str	r0, [r7, #68]	; 0x44
 8008994:	e009      	b.n	80089aa <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2210      	movs	r2, #16
 800899a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089a2:	4618      	mov	r0, r3
 80089a4:	f002 fc2f 	bl	800b206 <SDMMC_CmdWriteSingleBlock>
 80089a8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80089aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d012      	beq.n	80089d6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a86      	ldr	r2, [pc, #536]	; (8008bd0 <HAL_SD_WriteBlocks+0x314>)
 80089b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089be:	431a      	orrs	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e0f7      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80089da:	e05c      	b.n	8008a96 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d037      	beq.n	8008a5a <HAL_SD_WriteBlocks+0x19e>
 80089ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ec:	2b1f      	cmp	r3, #31
 80089ee:	d934      	bls.n	8008a5a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80089f0:	2300      	movs	r3, #0
 80089f2:	643b      	str	r3, [r7, #64]	; 0x40
 80089f4:	e02b      	b.n	8008a4e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80089f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80089fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fe:	3301      	adds	r3, #1
 8008a00:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	021a      	lsls	r2, r3, #8
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a10:	3301      	adds	r3, #1
 8008a12:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	041a      	lsls	r2, r3, #16
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a22:	3301      	adds	r3, #1
 8008a24:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	061a      	lsls	r2, r3, #24
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a34:	3301      	adds	r3, #1
 8008a36:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f107 0214 	add.w	r2, r7, #20
 8008a40:	4611      	mov	r1, r2
 8008a42:	4618      	mov	r0, r3
 8008a44:	f002 facf 	bl	800afe6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8008a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a50:	2b07      	cmp	r3, #7
 8008a52:	d9d0      	bls.n	80089f6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a56:	3b20      	subs	r3, #32
 8008a58:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008a5a:	f7f7 fcc3 	bl	80003e4 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d902      	bls.n	8008a70 <HAL_SD_WriteBlocks+0x1b4>
 8008a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d112      	bne.n	8008a96 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a56      	ldr	r2, [pc, #344]	; (8008bd0 <HAL_SD_WriteBlocks+0x314>)
 8008a76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e097      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d09b      	beq.n	80089dc <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ab2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d022      	beq.n	8008b08 <HAL_SD_WriteBlocks+0x24c>
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d91f      	bls.n	8008b08 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	d01b      	beq.n	8008b08 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f002 fbdd 	bl	800b294 <SDMMC_CmdStopTransfer>
 8008ada:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d012      	beq.n	8008b08 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a3a      	ldr	r2, [pc, #232]	; (8008bd0 <HAL_SD_WriteBlocks+0x314>)
 8008ae8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af0:	431a      	orrs	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e05e      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0e:	f003 0308 	and.w	r3, r3, #8
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d012      	beq.n	8008b3c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a2d      	ldr	r2, [pc, #180]	; (8008bd0 <HAL_SD_WriteBlocks+0x314>)
 8008b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b22:	f043 0208 	orr.w	r2, r3, #8
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e044      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d012      	beq.n	8008b70 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a20      	ldr	r2, [pc, #128]	; (8008bd0 <HAL_SD_WriteBlocks+0x314>)
 8008b50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b56:	f043 0202 	orr.w	r2, r3, #2
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e02a      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b76:	f003 0310 	and.w	r3, r3, #16
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d012      	beq.n	8008ba4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a13      	ldr	r2, [pc, #76]	; (8008bd0 <HAL_SD_WriteBlocks+0x314>)
 8008b84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	f043 0210 	orr.w	r2, r3, #16
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e010      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a0a      	ldr	r2, [pc, #40]	; (8008bd4 <HAL_SD_WriteBlocks+0x318>)
 8008baa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	e006      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
  }
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3748      	adds	r7, #72	; 0x48
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	1fe00fff 	.word	0x1fe00fff
 8008bd4:	18000f3a 	.word	0x18000f3a

08008bd8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d008      	beq.n	8008c06 <HAL_SD_IRQHandler+0x2e>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f003 0308 	and.w	r3, r3, #8
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f001 f92a 	bl	8009e58 <SD_Read_IT>
 8008c04:	e19a      	b.n	8008f3c <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 80ac 	beq.w	8008d6e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	4b9d      	ldr	r3, [pc, #628]	; (8008ea0 <HAL_SD_IRQHandler+0x2c8>)
 8008c2c:	400b      	ands	r3, r1
 8008c2e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008c3e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c4e:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f003 0308 	and.w	r3, r3, #8
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d038      	beq.n	8008ccc <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d104      	bne.n	8008c6e <HAL_SD_IRQHandler+0x96>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d011      	beq.n	8008c92 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f002 fb0e 	bl	800b294 <SDMMC_CmdStopTransfer>
 8008c78:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d008      	beq.n	8008c92 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	431a      	orrs	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f959 	bl	8008f44 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a83      	ldr	r2, [pc, #524]	; (8008ea4 <HAL_SD_IRQHandler+0x2cc>)
 8008c98:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d104      	bne.n	8008cbc <HAL_SD_IRQHandler+0xe4>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f005 fc8f 	bl	800e5e0 <HAL_SD_RxCpltCallback>
 8008cc2:	e13b      	b.n	8008f3c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f005 fc81 	bl	800e5cc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008cca:	e137      	b.n	8008f3c <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 8132 	beq.w	8008f3c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2200      	movs	r2, #0
 8008cee:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d104      	bne.n	8008d04 <HAL_SD_IRQHandler+0x12c>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d011      	beq.n	8008d28 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f002 fac3 	bl	800b294 <SDMMC_CmdStopTransfer>
 8008d0e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d008      	beq.n	8008d28 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f90e 	bl	8008f44 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f003 0310 	and.w	r3, r3, #16
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d104      	bne.n	8008d4a <HAL_SD_IRQHandler+0x172>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f003 0320 	and.w	r3, r3, #32
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d002      	beq.n	8008d50 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f005 fc3e 	bl	800e5cc <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d105      	bne.n	8008d66 <HAL_SD_IRQHandler+0x18e>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f003 0302 	and.w	r3, r3, #2
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 80eb 	beq.w	8008f3c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f005 fc3a 	bl	800e5e0 <HAL_SD_RxCpltCallback>
}
 8008d6c:	e0e6      	b.n	8008f3c <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d008      	beq.n	8008d8e <HAL_SD_IRQHandler+0x1b6>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f003 0308 	and.w	r3, r3, #8
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 f8ac 	bl	8009ee4 <SD_Write_IT>
 8008d8c:	e0d6      	b.n	8008f3c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d94:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 80a2 	beq.w	8008ee2 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	f043 0202 	orr.w	r2, r3, #2
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbe:	f003 0308 	and.w	r3, r3, #8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d005      	beq.n	8008dd2 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	f043 0208 	orr.w	r2, r3, #8
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd8:	f003 0320 	and.w	r3, r3, #32
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d005      	beq.n	8008dec <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de4:	f043 0220 	orr.w	r2, r3, #32
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df2:	f003 0310 	and.w	r3, r3, #16
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d005      	beq.n	8008e06 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	f043 0210 	orr.w	r2, r3, #16
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a26      	ldr	r2, [pc, #152]	; (8008ea4 <HAL_SD_IRQHandler+0x2cc>)
 8008e0c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008e1c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68da      	ldr	r2, [r3, #12]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e2c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e4c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f002 fa1e 	bl	800b294 <SDMMC_CmdStopTransfer>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68da      	ldr	r2, [r3, #12]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e72:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e7c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00f      	beq.n	8008ea8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f854 	bl	8008f44 <HAL_SD_ErrorCallback>
}
 8008e9c:	e04e      	b.n	8008f3c <HAL_SD_IRQHandler+0x364>
 8008e9e:	bf00      	nop
 8008ea0:	ffff3ec5 	.word	0xffff3ec5
 8008ea4:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d044      	beq.n	8008f3c <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d040      	beq.n	8008f3c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008ec8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f832 	bl	8008f44 <HAL_SD_ErrorCallback>
}
 8008ee0:	e02c      	b.n	8008f3c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d025      	beq.n	8008f3c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ef8:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10c      	bne.n	8008f22 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f003 0320 	and.w	r3, r3, #32
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 f84e 	bl	8009fb4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008f18:	e010      	b.n	8008f3c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f001 f836 	bl	8009f8c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008f20:	e00c      	b.n	8008f3c <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f003 0320 	and.w	r3, r3, #32
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d003      	beq.n	8008f34 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f001 f837 	bl	8009fa0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8008f32:	e003      	b.n	8008f3c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 f81f 	bl	8009f78 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008f3a:	e7ff      	b.n	8008f3c <HAL_SD_IRQHandler+0x364>
 8008f3c:	bf00      	nop
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8008f62:	bf00      	nop
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
	...

08008f70 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f7e:	0f9b      	lsrs	r3, r3, #30
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f8a:	0e9b      	lsrs	r3, r3, #26
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	f003 030f 	and.w	r3, r3, #15
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f9c:	0e1b      	lsrs	r3, r3, #24
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	f003 0303 	and.w	r3, r3, #3
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fae:	0c1b      	lsrs	r3, r3, #16
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fba:	0a1b      	lsrs	r3, r3, #8
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd0:	0d1b      	lsrs	r3, r3, #20
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fdc:	0c1b      	lsrs	r3, r3, #16
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 030f 	and.w	r3, r3, #15
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fee:	0bdb      	lsrs	r3, r3, #15
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	b2da      	uxtb	r2, r3
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009000:	0b9b      	lsrs	r3, r3, #14
 8009002:	b2db      	uxtb	r3, r3
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	b2da      	uxtb	r2, r3
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009012:	0b5b      	lsrs	r3, r3, #13
 8009014:	b2db      	uxtb	r3, r3
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	b2da      	uxtb	r2, r3
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009024:	0b1b      	lsrs	r3, r3, #12
 8009026:	b2db      	uxtb	r3, r3
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	b2da      	uxtb	r2, r3
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	2200      	movs	r2, #0
 8009036:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903c:	2b00      	cmp	r3, #0
 800903e:	d163      	bne.n	8009108 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009044:	009a      	lsls	r2, r3, #2
 8009046:	f640 73fc 	movw	r3, #4092	; 0xffc
 800904a:	4013      	ands	r3, r2
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009050:	0f92      	lsrs	r2, r2, #30
 8009052:	431a      	orrs	r2, r3
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800905c:	0edb      	lsrs	r3, r3, #27
 800905e:	b2db      	uxtb	r3, r3
 8009060:	f003 0307 	and.w	r3, r3, #7
 8009064:	b2da      	uxtb	r2, r3
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800906e:	0e1b      	lsrs	r3, r3, #24
 8009070:	b2db      	uxtb	r3, r3
 8009072:	f003 0307 	and.w	r3, r3, #7
 8009076:	b2da      	uxtb	r2, r3
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009080:	0d5b      	lsrs	r3, r3, #21
 8009082:	b2db      	uxtb	r3, r3
 8009084:	f003 0307 	and.w	r3, r3, #7
 8009088:	b2da      	uxtb	r2, r3
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009092:	0c9b      	lsrs	r3, r3, #18
 8009094:	b2db      	uxtb	r3, r3
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	b2da      	uxtb	r2, r3
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090a4:	0bdb      	lsrs	r3, r3, #15
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	7e1b      	ldrb	r3, [r3, #24]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	f003 0307 	and.w	r3, r3, #7
 80090c6:	3302      	adds	r3, #2
 80090c8:	2201      	movs	r2, #1
 80090ca:	fa02 f303 	lsl.w	r3, r2, r3
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80090d2:	fb02 f203 	mul.w	r2, r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	7a1b      	ldrb	r3, [r3, #8]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	f003 030f 	and.w	r3, r3, #15
 80090e4:	2201      	movs	r2, #1
 80090e6:	409a      	lsls	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80090f4:	0a52      	lsrs	r2, r2, #9
 80090f6:	fb02 f203 	mul.w	r2, r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009104:	659a      	str	r2, [r3, #88]	; 0x58
 8009106:	e031      	b.n	800916c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910c:	2b01      	cmp	r3, #1
 800910e:	d11d      	bne.n	800914c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009114:	041b      	lsls	r3, r3, #16
 8009116:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800911e:	0c1b      	lsrs	r3, r3, #16
 8009120:	431a      	orrs	r2, r3
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	3301      	adds	r3, #1
 800912c:	029a      	lsls	r2, r3, #10
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009140:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	659a      	str	r2, [r3, #88]	; 0x58
 800914a:	e00f      	b.n	800916c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a58      	ldr	r2, [pc, #352]	; (80092b4 <HAL_SD_GetCardCSD+0x344>)
 8009152:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009158:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e09d      	b.n	80092a8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009170:	0b9b      	lsrs	r3, r3, #14
 8009172:	b2db      	uxtb	r3, r3
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	b2da      	uxtb	r2, r3
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009182:	09db      	lsrs	r3, r3, #7
 8009184:	b2db      	uxtb	r3, r3
 8009186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918a:	b2da      	uxtb	r2, r3
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009194:	b2db      	uxtb	r3, r3
 8009196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800919a:	b2da      	uxtb	r2, r3
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091a4:	0fdb      	lsrs	r3, r3, #31
 80091a6:	b2da      	uxtb	r2, r3
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091b0:	0f5b      	lsrs	r3, r3, #29
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 0303 	and.w	r3, r3, #3
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091c2:	0e9b      	lsrs	r3, r3, #26
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	f003 0307 	and.w	r3, r3, #7
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091d4:	0d9b      	lsrs	r3, r3, #22
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	f003 030f 	and.w	r3, r3, #15
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091e6:	0d5b      	lsrs	r3, r3, #21
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009202:	0c1b      	lsrs	r3, r3, #16
 8009204:	b2db      	uxtb	r3, r3
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	b2da      	uxtb	r2, r3
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009216:	0bdb      	lsrs	r3, r3, #15
 8009218:	b2db      	uxtb	r3, r3
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	b2da      	uxtb	r2, r3
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800922a:	0b9b      	lsrs	r3, r3, #14
 800922c:	b2db      	uxtb	r3, r3
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	b2da      	uxtb	r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800923e:	0b5b      	lsrs	r3, r3, #13
 8009240:	b2db      	uxtb	r3, r3
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	b2da      	uxtb	r2, r3
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009252:	0b1b      	lsrs	r3, r3, #12
 8009254:	b2db      	uxtb	r3, r3
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	b2da      	uxtb	r2, r3
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009266:	0a9b      	lsrs	r3, r3, #10
 8009268:	b2db      	uxtb	r3, r3
 800926a:	f003 0303 	and.w	r3, r3, #3
 800926e:	b2da      	uxtb	r2, r3
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800927a:	0a1b      	lsrs	r3, r3, #8
 800927c:	b2db      	uxtb	r3, r3
 800927e:	f003 0303 	and.w	r3, r3, #3
 8009282:	b2da      	uxtb	r2, r3
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800928e:	085b      	lsrs	r3, r3, #1
 8009290:	b2db      	uxtb	r3, r3
 8009292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009296:	b2da      	uxtb	r2, r3
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	1fe00fff 	.word	0x1fe00fff

080092b8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b094      	sub	sp, #80	; 0x50
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80092c8:	f107 0308 	add.w	r3, r7, #8
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fb64 	bl	800999c <SD_SendSDStatus>
 80092d4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80092d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d011      	beq.n	8009300 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a4f      	ldr	r2, [pc, #316]	; (8009420 <HAL_SD_GetCardStatus+0x168>)
 80092e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ea:	431a      	orrs	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80092fe:	e070      	b.n	80093e2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	099b      	lsrs	r3, r3, #6
 8009304:	b2db      	uxtb	r3, r3
 8009306:	f003 0303 	and.w	r3, r3, #3
 800930a:	b2da      	uxtb	r2, r3
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	095b      	lsrs	r3, r3, #5
 8009314:	b2db      	uxtb	r3, r3
 8009316:	f003 0301 	and.w	r3, r3, #1
 800931a:	b2da      	uxtb	r2, r3
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	0a1b      	lsrs	r3, r3, #8
 8009324:	b29b      	uxth	r3, r3
 8009326:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800932a:	b29a      	uxth	r2, r3
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	0e1b      	lsrs	r3, r3, #24
 8009330:	b29b      	uxth	r3, r3
 8009332:	4313      	orrs	r3, r2
 8009334:	b29a      	uxth	r2, r3
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	061a      	lsls	r2, r3, #24
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	021b      	lsls	r3, r3, #8
 8009342:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009346:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	0a1b      	lsrs	r3, r3, #8
 800934c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009350:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	0e1b      	lsrs	r3, r3, #24
 8009356:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	b2da      	uxtb	r2, r3
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	0a1b      	lsrs	r3, r3, #8
 8009368:	b2da      	uxtb	r2, r3
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	0d1b      	lsrs	r3, r3, #20
 8009372:	b2db      	uxtb	r3, r3
 8009374:	f003 030f 	and.w	r3, r3, #15
 8009378:	b2da      	uxtb	r2, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	0c1b      	lsrs	r3, r3, #16
 8009382:	b29b      	uxth	r3, r3
 8009384:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009388:	b29a      	uxth	r2, r3
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	b29b      	uxth	r3, r3
 800938e:	b2db      	uxtb	r3, r3
 8009390:	b29b      	uxth	r3, r3
 8009392:	4313      	orrs	r3, r2
 8009394:	b29a      	uxth	r2, r3
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	0a9b      	lsrs	r3, r3, #10
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	0a1b      	lsrs	r3, r3, #8
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	f003 0303 	and.w	r3, r3, #3
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	091b      	lsrs	r3, r3, #4
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f003 030f 	and.w	r3, r3, #15
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	f003 030f 	and.w	r3, r3, #15
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	0e1b      	lsrs	r3, r3, #24
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093ea:	4618      	mov	r0, r3
 80093ec:	f001 fea2 	bl	800b134 <SDMMC_CmdBlockLength>
 80093f0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80093f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00d      	beq.n	8009414 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a08      	ldr	r2, [pc, #32]	; (8009420 <HAL_SD_GetCardStatus+0x168>)
 80093fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009404:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009414:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009418:	4618      	mov	r0, r3
 800941a:	3750      	adds	r7, #80	; 0x50
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	1fe00fff 	.word	0x1fe00fff

08009424 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800947c:	b5b0      	push	{r4, r5, r7, lr}
 800947e:	b08e      	sub	sp, #56	; 0x38
 8009480:	af04      	add	r7, sp, #16
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2203      	movs	r2, #3
 8009490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009498:	2b03      	cmp	r3, #3
 800949a:	d02e      	beq.n	80094fa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094a2:	d106      	bne.n	80094b2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38
 80094b0:	e029      	b.n	8009506 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094b8:	d10a      	bne.n	80094d0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fb66 	bl	8009b8c <SD_WideBus_Enable>
 80094c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	639a      	str	r2, [r3, #56]	; 0x38
 80094ce:	e01a      	b.n	8009506 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10a      	bne.n	80094ec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fba3 	bl	8009c22 <SD_WideBus_Disable>
 80094dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	431a      	orrs	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	639a      	str	r2, [r3, #56]	; 0x38
 80094ea:	e00c      	b.n	8009506 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	639a      	str	r2, [r3, #56]	; 0x38
 80094f8:	e005      	b.n	8009506 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950a:	2b00      	cmp	r3, #0
 800950c:	d007      	beq.n	800951e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a2e      	ldr	r2, [pc, #184]	; (80095cc <HAL_SD_ConfigWideBusOperation+0x150>)
 8009514:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800951c:	e034      	b.n	8009588 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	2b03      	cmp	r3, #3
 800953a:	d903      	bls.n	8009544 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	61bb      	str	r3, [r7, #24]
 8009542:	e012      	b.n	800956a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800954c:	d103      	bne.n	8009556 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	61bb      	str	r3, [r7, #24]
 8009554:	e009      	b.n	800956a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800955e:	d102      	bne.n	8009566 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8009560:	2302      	movs	r3, #2
 8009562:	61bb      	str	r3, [r7, #24]
 8009564:	e001      	b.n	800956a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8009566:	2304      	movs	r3, #4
 8009568:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681d      	ldr	r5, [r3, #0]
 800956e:	466c      	mov	r4, sp
 8009570:	f107 0314 	add.w	r3, r7, #20
 8009574:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800957c:	f107 0308 	add.w	r3, r7, #8
 8009580:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009582:	4628      	mov	r0, r5
 8009584:	f001 fcf8 	bl	800af78 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009590:	4618      	mov	r0, r3
 8009592:	f001 fdcf 	bl	800b134 <SDMMC_CmdBlockLength>
 8009596:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00c      	beq.n	80095b8 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a0a      	ldr	r2, [pc, #40]	; (80095cc <HAL_SD_ConfigWideBusOperation+0x150>)
 80095a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	431a      	orrs	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80095c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3728      	adds	r7, #40	; 0x28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bdb0      	pop	{r4, r5, r7, pc}
 80095cc:	1fe00fff 	.word	0x1fe00fff

080095d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80095d8:	2300      	movs	r3, #0
 80095da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80095dc:	f107 030c 	add.w	r3, r7, #12
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 faaa 	bl	8009b3c <SD_SendStatus>
 80095e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	431a      	orrs	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	0a5b      	lsrs	r3, r3, #9
 8009600:	f003 030f 	and.w	r3, r3, #15
 8009604:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009606:	693b      	ldr	r3, [r7, #16]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009610:	b590      	push	{r4, r7, lr}
 8009612:	b091      	sub	sp, #68	; 0x44
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009618:	2301      	movs	r3, #1
 800961a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4618      	mov	r0, r3
 8009622:	f001 fd02 	bl	800b02a <SDMMC_GetPowerState>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d102      	bne.n	8009632 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800962c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009630:	e0a8      	b.n	8009784 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009636:	2b03      	cmp	r3, #3
 8009638:	d02e      	beq.n	8009698 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4618      	mov	r0, r3
 8009640:	f001 ff4e 	bl	800b4e0 <SDMMC_CmdSendCID>
 8009644:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <SD_InitCard+0x40>
    {
      return errorstate;
 800964c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964e:	e099      	b.n	8009784 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2100      	movs	r1, #0
 8009656:	4618      	mov	r0, r3
 8009658:	f001 fd2d 	bl	800b0b6 <SDMMC_GetResponse>
 800965c:	4602      	mov	r2, r0
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2104      	movs	r1, #4
 8009668:	4618      	mov	r0, r3
 800966a:	f001 fd24 	bl	800b0b6 <SDMMC_GetResponse>
 800966e:	4602      	mov	r2, r0
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2108      	movs	r1, #8
 800967a:	4618      	mov	r0, r3
 800967c:	f001 fd1b 	bl	800b0b6 <SDMMC_GetResponse>
 8009680:	4602      	mov	r2, r0
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	210c      	movs	r1, #12
 800968c:	4618      	mov	r0, r3
 800968e:	f001 fd12 	bl	800b0b6 <SDMMC_GetResponse>
 8009692:	4602      	mov	r2, r0
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969c:	2b03      	cmp	r3, #3
 800969e:	d00d      	beq.n	80096bc <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f107 020e 	add.w	r2, r7, #14
 80096a8:	4611      	mov	r1, r2
 80096aa:	4618      	mov	r0, r3
 80096ac:	f001 ff57 	bl	800b55e <SDMMC_CmdSetRelAdd>
 80096b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80096b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <SD_InitCard+0xac>
    {
      return errorstate;
 80096b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ba:	e063      	b.n	8009784 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d036      	beq.n	8009732 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80096c4:	89fb      	ldrh	r3, [r7, #14]
 80096c6:	461a      	mov	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096d4:	041b      	lsls	r3, r3, #16
 80096d6:	4619      	mov	r1, r3
 80096d8:	4610      	mov	r0, r2
 80096da:	f001 ff20 	bl	800b51e <SDMMC_CmdSendCSD>
 80096de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80096e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <SD_InitCard+0xda>
    {
      return errorstate;
 80096e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e8:	e04c      	b.n	8009784 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2100      	movs	r1, #0
 80096f0:	4618      	mov	r0, r3
 80096f2:	f001 fce0 	bl	800b0b6 <SDMMC_GetResponse>
 80096f6:	4602      	mov	r2, r0
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2104      	movs	r1, #4
 8009702:	4618      	mov	r0, r3
 8009704:	f001 fcd7 	bl	800b0b6 <SDMMC_GetResponse>
 8009708:	4602      	mov	r2, r0
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2108      	movs	r1, #8
 8009714:	4618      	mov	r0, r3
 8009716:	f001 fcce 	bl	800b0b6 <SDMMC_GetResponse>
 800971a:	4602      	mov	r2, r0
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	210c      	movs	r1, #12
 8009726:	4618      	mov	r0, r3
 8009728:	f001 fcc5 	bl	800b0b6 <SDMMC_GetResponse>
 800972c:	4602      	mov	r2, r0
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2104      	movs	r1, #4
 8009738:	4618      	mov	r0, r3
 800973a:	f001 fcbc 	bl	800b0b6 <SDMMC_GetResponse>
 800973e:	4603      	mov	r3, r0
 8009740:	0d1a      	lsrs	r2, r3, #20
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009746:	f107 0310 	add.w	r3, r7, #16
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7ff fc0f 	bl	8008f70 <HAL_SD_GetCardCSD>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009758:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800975c:	e012      	b.n	8009784 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6819      	ldr	r1, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009766:	041b      	lsls	r3, r3, #16
 8009768:	f04f 0400 	mov.w	r4, #0
 800976c:	461a      	mov	r2, r3
 800976e:	4623      	mov	r3, r4
 8009770:	4608      	mov	r0, r1
 8009772:	f001 fdcb 	bl	800b30c <SDMMC_CmdSelDesel>
 8009776:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <SD_InitCard+0x172>
  {
    return errorstate;
 800977e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009780:	e000      	b.n	8009784 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3744      	adds	r7, #68	; 0x44
 8009788:	46bd      	mov	sp, r7
 800978a:	bd90      	pop	{r4, r7, pc}

0800978c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009794:	2300      	movs	r3, #0
 8009796:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009798:	2300      	movs	r3, #0
 800979a:	61fb      	str	r3, [r7, #28]
 800979c:	2300      	movs	r3, #0
 800979e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 80097a0:	f7f6 fe20 	bl	80003e4 <HAL_GetTick>
 80097a4:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f001 fdd2 	bl	800b354 <SDMMC_CmdGoIdleState>
 80097b0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <SD_PowerON+0x30>
  {
    return errorstate;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	e0e9      	b.n	8009990 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f001 fde5 	bl	800b390 <SDMMC_CmdOperCond>
 80097c6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00d      	beq.n	80097ea <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 fdbb 	bl	800b354 <SDMMC_CmdGoIdleState>
 80097de:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d004      	beq.n	80097f0 <SD_PowerON+0x64>
    {
      return errorstate;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	e0d2      	b.n	8009990 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d137      	bne.n	8009868 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2100      	movs	r1, #0
 80097fe:	4618      	mov	r0, r3
 8009800:	f001 fde6 	bl	800b3d0 <SDMMC_CmdAppCommand>
 8009804:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d02d      	beq.n	8009868 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800980c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009810:	e0be      	b.n	8009990 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2100      	movs	r1, #0
 8009818:	4618      	mov	r0, r3
 800981a:	f001 fdd9 	bl	800b3d0 <SDMMC_CmdAppCommand>
 800981e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <SD_PowerON+0x9e>
    {
      return errorstate;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	e0b2      	b.n	8009990 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	495a      	ldr	r1, [pc, #360]	; (8009998 <SD_PowerON+0x20c>)
 8009830:	4618      	mov	r0, r3
 8009832:	f001 fdf0 	bl	800b416 <SDMMC_CmdAppOperCommand>
 8009836:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800983e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009842:	e0a5      	b.n	8009990 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2100      	movs	r1, #0
 800984a:	4618      	mov	r0, r3
 800984c:	f001 fc33 	bl	800b0b6 <SDMMC_GetResponse>
 8009850:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	0fdb      	lsrs	r3, r3, #31
 8009856:	2b01      	cmp	r3, #1
 8009858:	d101      	bne.n	800985e <SD_PowerON+0xd2>
 800985a:	2301      	movs	r3, #1
 800985c:	e000      	b.n	8009860 <SD_PowerON+0xd4>
 800985e:	2300      	movs	r3, #0
 8009860:	61bb      	str	r3, [r7, #24]

    count++;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3301      	adds	r3, #1
 8009866:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800986e:	4293      	cmp	r3, r2
 8009870:	d802      	bhi.n	8009878 <SD_PowerON+0xec>
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0cc      	beq.n	8009812 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800987e:	4293      	cmp	r3, r2
 8009880:	d902      	bls.n	8009888 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009886:	e083      	b.n	8009990 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d07d      	beq.n	800998e <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	2b02      	cmp	r3, #2
 800989e:	d176      	bne.n	800998e <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d071      	beq.n	800998e <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098b0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f042 0208 	orr.w	r2, r2, #8
 80098c0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f001 feb0 	bl	800b62c <SDMMC_CmdVoltageSwitch>
 80098cc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00c      	beq.n	80098ee <SD_PowerON+0x162>
        {
          return errorstate;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	e05b      	b.n	8009990 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80098d8:	f7f6 fd84 	bl	80003e4 <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098e6:	d102      	bne.n	80098ee <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80098e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098ec:	e050      	b.n	8009990 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098fc:	d1ec      	bne.n	80098d8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009906:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009916:	d002      	beq.n	800991e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009918:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800991c:	e038      	b.n	8009990 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800991e:	2001      	movs	r0, #1
 8009920:	f7ff fb1a 	bl	8008f58 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0204 	orr.w	r2, r2, #4
 8009932:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009934:	e00a      	b.n	800994c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009936:	f7f6 fd55 	bl	80003e4 <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009944:	d102      	bne.n	800994c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009946:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800994a:	e021      	b.n	8009990 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800995a:	d1ec      	bne.n	8009936 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009964:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800996c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009974:	d102      	bne.n	800997c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800997a:	e009      	b.n	8009990 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2213      	movs	r2, #19
 8009982:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800998c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3720      	adds	r7, #32
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	c1100000 	.word	0xc1100000

0800999c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b08c      	sub	sp, #48	; 0x30
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80099a6:	f7f6 fd1d 	bl	80003e4 <HAL_GetTick>
 80099aa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2100      	movs	r1, #0
 80099b6:	4618      	mov	r0, r3
 80099b8:	f001 fb7d 	bl	800b0b6 <SDMMC_GetResponse>
 80099bc:	4603      	mov	r3, r0
 80099be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099c6:	d102      	bne.n	80099ce <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80099c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099cc:	e0b0      	b.n	8009b30 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2140      	movs	r1, #64	; 0x40
 80099d4:	4618      	mov	r0, r3
 80099d6:	f001 fbad 	bl	800b134 <SDMMC_CmdBlockLength>
 80099da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d005      	beq.n	80099ee <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	e0a0      	b.n	8009b30 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099f6:	041b      	lsls	r3, r3, #16
 80099f8:	4619      	mov	r1, r3
 80099fa:	4610      	mov	r0, r2
 80099fc:	f001 fce8 	bl	800b3d0 <SDMMC_CmdAppCommand>
 8009a00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d005      	beq.n	8009a14 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	e08d      	b.n	8009b30 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a18:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009a1a:	2340      	movs	r3, #64	; 0x40
 8009a1c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009a1e:	2360      	movs	r3, #96	; 0x60
 8009a20:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a22:	2302      	movs	r3, #2
 8009a24:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f107 0208 	add.w	r2, r7, #8
 8009a36:	4611      	mov	r1, r2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f001 fb4f 	bl	800b0dc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f001 fdd0 	bl	800b5e8 <SDMMC_CmdStatusRegister>
 8009a48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d02b      	beq.n	8009aa8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009a58:	6a3b      	ldr	r3, [r7, #32]
 8009a5a:	e069      	b.n	8009b30 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d013      	beq.n	8009a92 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a6e:	e00d      	b.n	8009a8c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f001 faa9 	bl	800afcc <SDMMC_ReadFIFO>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	601a      	str	r2, [r3, #0]
        pData++;
 8009a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a82:	3304      	adds	r3, #4
 8009a84:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a88:	3301      	adds	r3, #1
 8009a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8e:	2b07      	cmp	r3, #7
 8009a90:	d9ee      	bls.n	8009a70 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009a92:	f7f6 fca7 	bl	80003e4 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aa0:	d102      	bne.n	8009aa8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009aa2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009aa6:	e043      	b.n	8009b30 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aae:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d0d2      	beq.n	8009a5c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009abc:	f003 0308 	and.w	r3, r3, #8
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ac4:	2308      	movs	r3, #8
 8009ac6:	e033      	b.n	8009b30 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ace:	f003 0302 	and.w	r3, r3, #2
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	e02a      	b.n	8009b30 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae0:	f003 0320 	and.w	r3, r3, #32
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d017      	beq.n	8009b18 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009ae8:	2320      	movs	r3, #32
 8009aea:	e021      	b.n	8009b30 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f001 fa6b 	bl	800afcc <SDMMC_ReadFIFO>
 8009af6:	4602      	mov	r2, r0
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	601a      	str	r2, [r3, #0]
    pData++;
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	3304      	adds	r3, #4
 8009b00:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009b02:	f7f6 fc6f 	bl	80003e4 <HAL_GetTick>
 8009b06:	4602      	mov	r2, r0
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b10:	d102      	bne.n	8009b18 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009b12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b16:	e00b      	b.n	8009b30 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1e2      	bne.n	8009aec <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a03      	ldr	r2, [pc, #12]	; (8009b38 <SD_SendSDStatus+0x19c>)
 8009b2c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3730      	adds	r7, #48	; 0x30
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	18000f3a 	.word	0x18000f3a

08009b3c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d102      	bne.n	8009b52 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009b4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b50:	e018      	b.n	8009b84 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b5a:	041b      	lsls	r3, r3, #16
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	4610      	mov	r0, r2
 8009b60:	f001 fd1f 	bl	800b5a2 <SDMMC_CmdSendStatus>
 8009b64:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	e009      	b.n	8009b84 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2100      	movs	r1, #0
 8009b76:	4618      	mov	r0, r3
 8009b78:	f001 fa9d 	bl	800b0b6 <SDMMC_GetResponse>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009b94:	2300      	movs	r3, #0
 8009b96:	60fb      	str	r3, [r7, #12]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f001 fa87 	bl	800b0b6 <SDMMC_GetResponse>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bb2:	d102      	bne.n	8009bba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009bb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bb8:	e02f      	b.n	8009c1a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009bba:	f107 030c 	add.w	r3, r7, #12
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f879 	bl	8009cb8 <SD_FindSCR>
 8009bc6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	e023      	b.n	8009c1a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d01c      	beq.n	8009c16 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009be4:	041b      	lsls	r3, r3, #16
 8009be6:	4619      	mov	r1, r3
 8009be8:	4610      	mov	r0, r2
 8009bea:	f001 fbf1 	bl	800b3d0 <SDMMC_CmdAppCommand>
 8009bee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	e00f      	b.n	8009c1a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2102      	movs	r1, #2
 8009c00:	4618      	mov	r0, r3
 8009c02:	f001 fc28 	bl	800b456 <SDMMC_CmdBusWidth>
 8009c06:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d001      	beq.n	8009c12 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	e003      	b.n	8009c1a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c12:	2300      	movs	r3, #0
 8009c14:	e001      	b.n	8009c1a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b086      	sub	sp, #24
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2100      	movs	r1, #0
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f001 fa3c 	bl	800b0b6 <SDMMC_GetResponse>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c48:	d102      	bne.n	8009c50 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c4e:	e02f      	b.n	8009cb0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c50:	f107 030c 	add.w	r3, r7, #12
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f82e 	bl	8009cb8 <SD_FindSCR>
 8009c5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	e023      	b.n	8009cb0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d01c      	beq.n	8009cac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c7a:	041b      	lsls	r3, r3, #16
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	4610      	mov	r0, r2
 8009c80:	f001 fba6 	bl	800b3d0 <SDMMC_CmdAppCommand>
 8009c84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	e00f      	b.n	8009cb0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2100      	movs	r1, #0
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 fbdd 	bl	800b456 <SDMMC_CmdBusWidth>
 8009c9c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	e003      	b.n	8009cb0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e001      	b.n	8009cb0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009cac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b08e      	sub	sp, #56	; 0x38
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009cc2:	f7f6 fb8f 	bl	80003e4 <HAL_GetTick>
 8009cc6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009ccc:	2300      	movs	r3, #0
 8009cce:	60bb      	str	r3, [r7, #8]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2108      	movs	r1, #8
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f001 fa28 	bl	800b134 <SDMMC_CmdBlockLength>
 8009ce4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	e0ad      	b.n	8009e4c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cf8:	041b      	lsls	r3, r3, #16
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	4610      	mov	r0, r2
 8009cfe:	f001 fb67 	bl	800b3d0 <SDMMC_CmdAppCommand>
 8009d02:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <SD_FindSCR+0x56>
  {
    return errorstate;
 8009d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0c:	e09e      	b.n	8009e4c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d12:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009d14:	2308      	movs	r3, #8
 8009d16:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009d18:	2330      	movs	r3, #48	; 0x30
 8009d1a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d20:	2300      	movs	r3, #0
 8009d22:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d24:	2301      	movs	r3, #1
 8009d26:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f107 0210 	add.w	r2, r7, #16
 8009d30:	4611      	mov	r1, r2
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 f9d2 	bl	800b0dc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f001 fbad 	bl	800b49c <SDMMC_CmdSendSCR>
 8009d42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d027      	beq.n	8009d9a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4c:	e07e      	b.n	8009e4c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d113      	bne.n	8009d84 <SD_FindSCR+0xcc>
 8009d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d110      	bne.n	8009d84 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f001 f930 	bl	800afcc <SDMMC_ReadFIFO>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f001 f929 	bl	800afcc <SDMMC_ReadFIFO>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	60fb      	str	r3, [r7, #12]
      index++;
 8009d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d80:	3301      	adds	r3, #1
 8009d82:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d84:	f7f6 fb2e 	bl	80003e4 <HAL_GetTick>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d92:	d102      	bne.n	8009d9a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009d94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d98:	e058      	b.n	8009e4c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009da0:	f240 532a 	movw	r3, #1322	; 0x52a
 8009da4:	4013      	ands	r3, r2
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0d1      	beq.n	8009d4e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db0:	f003 0308 	and.w	r3, r3, #8
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d005      	beq.n	8009dc4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2208      	movs	r2, #8
 8009dbe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009dc0:	2308      	movs	r3, #8
 8009dc2:	e043      	b.n	8009e4c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dca:	f003 0302 	and.w	r3, r3, #2
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d005      	beq.n	8009dde <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009dda:	2302      	movs	r3, #2
 8009ddc:	e036      	b.n	8009e4c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de4:	f003 0320 	and.w	r3, r3, #32
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d005      	beq.n	8009df8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2220      	movs	r2, #32
 8009df2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009df4:	2320      	movs	r3, #32
 8009df6:	e029      	b.n	8009e4c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a15      	ldr	r2, [pc, #84]	; (8009e54 <SD_FindSCR+0x19c>)
 8009dfe:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	061a      	lsls	r2, r3, #24
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	021b      	lsls	r3, r3, #8
 8009e08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e0c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	0a1b      	lsrs	r3, r3, #8
 8009e12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e16:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	0e1b      	lsrs	r3, r3, #24
 8009e1c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	601a      	str	r2, [r3, #0]
    scr++;
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	3304      	adds	r3, #4
 8009e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	061a      	lsls	r2, r3, #24
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	021b      	lsls	r3, r3, #8
 8009e30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e34:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	0a1b      	lsrs	r3, r3, #8
 8009e3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e3e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	0e1b      	lsrs	r3, r3, #24
 8009e44:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e48:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3738      	adds	r7, #56	; 0x38
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	18000f3a 	.word	0x18000f3a

08009e58 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e64:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6a:	2b1f      	cmp	r3, #31
 8009e6c:	d936      	bls.n	8009edc <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009e6e:	2300      	movs	r3, #0
 8009e70:	617b      	str	r3, [r7, #20]
 8009e72:	e027      	b.n	8009ec4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f001 f8a7 	bl	800afcc <SDMMC_ReadFIFO>
 8009e7e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	0a1b      	lsrs	r3, r3, #8
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	0c1b      	lsrs	r3, r3, #16
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	0e1b      	lsrs	r3, r3, #24
 8009eb2:	b2da      	uxtb	r2, r3
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	617b      	str	r3, [r7, #20]
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	2b07      	cmp	r3, #7
 8009ec8:	d9d4      	bls.n	8009e74 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed4:	f1a3 0220 	sub.w	r2, r3, #32
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009edc:	bf00      	nop
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a1b      	ldr	r3, [r3, #32]
 8009ef0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef6:	2b1f      	cmp	r3, #31
 8009ef8:	d93a      	bls.n	8009f70 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009efa:	2300      	movs	r3, #0
 8009efc:	617b      	str	r3, [r7, #20]
 8009efe:	e02b      	b.n	8009f58 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	021a      	lsls	r2, r3, #8
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	041a      	lsls	r2, r3, #16
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	061a      	lsls	r2, r3, #24
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f107 020c 	add.w	r2, r7, #12
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 f84a 	bl	800afe6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	3301      	adds	r3, #1
 8009f56:	617b      	str	r3, [r7, #20]
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2b07      	cmp	r3, #7
 8009f5c:	d9d0      	bls.n	8009f00 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	f1a3 0220 	sub.w	r2, r3, #32
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009f70:	bf00      	nop
 8009f72:	3718      	adds	r7, #24
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e02b      	b.n	800a034 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d106      	bne.n	8009ff6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f004 fc79 	bl	800e8e8 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2202      	movs	r2, #2
 8009ffa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	3304      	adds	r3, #4
 800a006:	4619      	mov	r1, r3
 800a008:	4610      	mov	r0, r2
 800a00a:	f000 feb7 	bl	800ad7c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	461a      	mov	r2, r3
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	f000 ff0b 	bl	800ae34 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a01e:	4b07      	ldr	r3, [pc, #28]	; (800a03c <HAL_SDRAM_Init+0x74>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a06      	ldr	r2, [pc, #24]	; (800a03c <HAL_SDRAM_Init+0x74>)
 800a024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a028:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	52004000 	.word	0x52004000

0800a040 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a052:	75fb      	strb	r3, [r7, #23]
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a054:	7dfb      	ldrb	r3, [r7, #23]
 800a056:	2b02      	cmp	r3, #2
 800a058:	d101      	bne.n	800a05e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a05a:	2302      	movs	r3, #2
 800a05c:	e021      	b.n	800a0a2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a05e:	7dfb      	ldrb	r3, [r7, #23]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d002      	beq.n	800a06a <HAL_SDRAM_SendCommand+0x2a>
 800a064:	7dfb      	ldrb	r3, [r7, #23]
 800a066:	2b05      	cmp	r3, #5
 800a068:	d118      	bne.n	800a09c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2202      	movs	r2, #2
 800a06e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	68b9      	ldr	r1, [r7, #8]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 ff44 	bl	800af08 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d104      	bne.n	800a092 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2205      	movs	r2, #5
 800a08c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a090:	e006      	b.n	800a0a0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a09a:	e001      	b.n	800a0a0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e000      	b.n	800a0a2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3718      	adds	r7, #24
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b082      	sub	sp, #8
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d101      	bne.n	800a0c4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	e016      	b.n	800a0f2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d10f      	bne.n	800a0f0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 ff32 	bl	800af48 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	e000      	b.n	800a0f2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800a104:	2300      	movs	r3, #0
 800a106:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e0e2      	b.n	800a2d8 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a70      	ldr	r2, [pc, #448]	; (800a2e0 <HAL_SPI_Init+0x1e4>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d00f      	beq.n	800a142 <HAL_SPI_Init+0x46>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a6f      	ldr	r2, [pc, #444]	; (800a2e4 <HAL_SPI_Init+0x1e8>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d00a      	beq.n	800a142 <HAL_SPI_Init+0x46>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a6d      	ldr	r2, [pc, #436]	; (800a2e8 <HAL_SPI_Init+0x1ec>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d005      	beq.n	800a142 <HAL_SPI_Init+0x46>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	2b0f      	cmp	r3, #15
 800a13c:	d901      	bls.n	800a142 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e0ca      	b.n	800a2d8 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fdfe 	bl	800ad44 <SPI_GetPacketSize>
 800a148:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a64      	ldr	r2, [pc, #400]	; (800a2e0 <HAL_SPI_Init+0x1e4>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d00c      	beq.n	800a16e <HAL_SPI_Init+0x72>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a62      	ldr	r2, [pc, #392]	; (800a2e4 <HAL_SPI_Init+0x1e8>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d007      	beq.n	800a16e <HAL_SPI_Init+0x72>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a61      	ldr	r2, [pc, #388]	; (800a2e8 <HAL_SPI_Init+0x1ec>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d002      	beq.n	800a16e <HAL_SPI_Init+0x72>
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	2b08      	cmp	r3, #8
 800a16c:	d811      	bhi.n	800a192 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a172:	4a5b      	ldr	r2, [pc, #364]	; (800a2e0 <HAL_SPI_Init+0x1e4>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d009      	beq.n	800a18c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a59      	ldr	r2, [pc, #356]	; (800a2e4 <HAL_SPI_Init+0x1e8>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d004      	beq.n	800a18c <HAL_SPI_Init+0x90>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a58      	ldr	r2, [pc, #352]	; (800a2e8 <HAL_SPI_Init+0x1ec>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d104      	bne.n	800a196 <HAL_SPI_Init+0x9a>
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b10      	cmp	r3, #16
 800a190:	d901      	bls.n	800a196 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e0a0      	b.n	800a2d8 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d106      	bne.n	800a1b0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f006 fa68 	bl	8010680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f022 0201 	bic.w	r2, r2, #1
 800a1c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1d0:	d110      	bne.n	800a1f4 <HAL_SPI_Init+0xf8>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1da:	d10b      	bne.n	800a1f4 <HAL_SPI_Init+0xf8>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d107      	bne.n	800a1f4 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a1f2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	69da      	ldr	r2, [r3, #28]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	431a      	orrs	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a206:	ea42 0103 	orr.w	r1, r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68da      	ldr	r2, [r3, #12]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	430a      	orrs	r2, r1
 800a214:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21e:	431a      	orrs	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a224:	431a      	orrs	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	431a      	orrs	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	431a      	orrs	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	431a      	orrs	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	431a      	orrs	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	431a      	orrs	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a248:	431a      	orrs	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	431a      	orrs	r2, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a254:	ea42 0103 	orr.w	r1, r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	430a      	orrs	r2, r1
 800a262:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d113      	bne.n	800a294 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a27e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a292:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f022 0201 	bic.w	r2, r2, #1
 800a2a2:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00a      	beq.n	800a2c6 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	430a      	orrs	r2, r1
 800a2c4:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	40013000 	.word	0x40013000
 800a2e4:	40003800 	.word	0x40003800
 800a2e8:	40003c00 	.word	0x40003c00

0800a2ec <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
 800a2f8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a304:	2b01      	cmp	r3, #1
 800a306:	d101      	bne.n	800a30c <HAL_SPI_TransmitReceive_DMA+0x20>
 800a308:	2302      	movs	r3, #2
 800a30a:	e1ac      	b.n	800a666 <HAL_SPI_TransmitReceive_DMA+0x37a>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a31a:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	613b      	str	r3, [r7, #16]

  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a328:	d106      	bne.n	800a338 <HAL_SPI_TransmitReceive_DMA+0x4c>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d102      	bne.n	800a338 <HAL_SPI_TransmitReceive_DMA+0x4c>
 800a332:	7dbb      	ldrb	r3, [r7, #22]
 800a334:	2b04      	cmp	r3, #4
 800a336:	d00a      	beq.n	800a34e <HAL_SPI_TransmitReceive_DMA+0x62>
 800a338:	7dbb      	ldrb	r3, [r7, #22]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d007      	beq.n	800a34e <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 800a33e:	2302      	movs	r3, #2
 800a340:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
 800a34c:	e18b      	b.n	800a666 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d005      	beq.n	800a360 <HAL_SPI_TransmitReceive_DMA+0x74>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <HAL_SPI_TransmitReceive_DMA+0x74>
 800a35a:	887b      	ldrh	r3, [r7, #2]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d107      	bne.n	800a370 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	e17a      	b.n	800a666 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d003      	beq.n	800a384 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2205      	movs	r2, #5
 800a380:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	887a      	ldrh	r2, [r7, #2]
 800a396:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	887a      	ldrh	r2, [r7, #2]
 800a39e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	887a      	ldrh	r2, [r7, #2]
 800a3ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	887a      	ldrh	r2, [r7, #2]
 800a3b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689a      	ldr	r2, [r3, #8]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a3d2:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	2b0f      	cmp	r3, #15
 800a3da:	d905      	bls.n	800a3e8 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3e6:	d10f      	bne.n	800a408 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a3ec:	2b07      	cmp	r3, #7
 800a3ee:	d913      	bls.n	800a418 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3fa:	d00d      	beq.n	800a418 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a400:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a406:	d007      	beq.n	800a418 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	75fb      	strb	r3, [r7, #23]
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a414:	7dfb      	ldrb	r3, [r7, #23]
 800a416:	e126      	b.n	800a666 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	2b07      	cmp	r3, #7
 800a41e:	d840      	bhi.n	800a4a2 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a42a:	d109      	bne.n	800a440 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a432:	b29b      	uxth	r3, r3
 800a434:	3301      	adds	r3, #1
 800a436:	105b      	asrs	r3, r3, #1
 800a438:	b29a      	uxth	r2, r3
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a44a:	d109      	bne.n	800a460 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a452:	b29b      	uxth	r3, r3
 800a454:	3303      	adds	r3, #3
 800a456:	109b      	asrs	r3, r3, #2
 800a458:	b29a      	uxth	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a46a:	d109      	bne.n	800a480 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a472:	b29b      	uxth	r3, r3
 800a474:	3301      	adds	r3, #1
 800a476:	105b      	asrs	r3, r3, #1
 800a478:	b29a      	uxth	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a484:	699b      	ldr	r3, [r3, #24]
 800a486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a48a:	d12e      	bne.n	800a4ea <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a492:	b29b      	uxth	r3, r3
 800a494:	3303      	adds	r3, #3
 800a496:	109b      	asrs	r3, r3, #2
 800a498:	b29a      	uxth	r2, r3
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a4a0:	e023      	b.n	800a4ea <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	2b0f      	cmp	r3, #15
 800a4a8:	d81f      	bhi.n	800a4ea <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4b4:	d109      	bne.n	800a4ca <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	3301      	adds	r3, #1
 800a4c0:	105b      	asrs	r3, r3, #1
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4d4:	d109      	bne.n	800a4ea <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	3301      	adds	r3, #1
 800a4e0:	105b      	asrs	r3, r3, #1
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	2b04      	cmp	r3, #4
 800a4f4:	d108      	bne.n	800a508 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4fa:	4a5d      	ldr	r2, [pc, #372]	; (800a670 <HAL_SPI_TransmitReceive_DMA+0x384>)
 800a4fc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a502:	4a5c      	ldr	r2, [pc, #368]	; (800a674 <HAL_SPI_TransmitReceive_DMA+0x388>)
 800a504:	63da      	str	r2, [r3, #60]	; 0x3c
 800a506:	e007      	b.n	800a518 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a50c:	4a5a      	ldr	r2, [pc, #360]	; (800a678 <HAL_SPI_TransmitReceive_DMA+0x38c>)
 800a50e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a514:	4a59      	ldr	r2, [pc, #356]	; (800a67c <HAL_SPI_TransmitReceive_DMA+0x390>)
 800a516:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a51c:	4a58      	ldr	r2, [pc, #352]	; (800a680 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800a51e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a524:	2200      	movs	r2, #0
 800a526:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3330      	adds	r3, #48	; 0x30
 800a532:	4619      	mov	r1, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a538:	461a      	mov	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a540:	b29b      	uxth	r3, r3
 800a542:	f7f7 feef 	bl	8002324 <HAL_DMA_Start_IT>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00f      	beq.n	800a56c <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a552:	f043 0210 	orr.w	r2, r3, #16
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 800a568:	7dfb      	ldrb	r3, [r7, #23]
 800a56a:	e07c      	b.n	800a666 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689a      	ldr	r2, [r3, #8]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a57a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a580:	2200      	movs	r2, #0
 800a582:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a588:	2200      	movs	r2, #0
 800a58a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a590:	2200      	movs	r2, #0
 800a592:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a598:	2200      	movs	r2, #0
 800a59a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	3320      	adds	r3, #32
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	f7f7 feb5 	bl	8002324 <HAL_DMA_Start_IT>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00f      	beq.n	800a5e0 <HAL_SPI_TransmitReceive_DMA+0x2f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5c6:	f043 0210 	orr.w	r2, r3, #16
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 800a5dc:	7dfb      	ldrb	r3, [r7, #23]
 800a5de:	e042      	b.n	800a666 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5e4:	69db      	ldr	r3, [r3, #28]
 800a5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ea:	d108      	bne.n	800a5fe <HAL_SPI_TransmitReceive_DMA+0x312>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6859      	ldr	r1, [r3, #4]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	4b23      	ldr	r3, [pc, #140]	; (800a684 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800a5f8:	400b      	ands	r3, r1
 800a5fa:	6053      	str	r3, [r2, #4]
 800a5fc:	e009      	b.n	800a612 <HAL_SPI_TransmitReceive_DMA+0x326>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	4b1f      	ldr	r3, [pc, #124]	; (800a684 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800a606:	4013      	ands	r3, r2
 800a608:	8879      	ldrh	r1, [r7, #2]
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	6812      	ldr	r2, [r2, #0]
 800a60e:	430b      	orrs	r3, r1
 800a610:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	689a      	ldr	r2, [r3, #8]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a620:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	691a      	ldr	r2, [r3, #16]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800a630:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f042 0201 	orr.w	r2, r2, #1
 800a640:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a64a:	d107      	bne.n	800a65c <HAL_SPI_TransmitReceive_DMA+0x370>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a65a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800a664:	7dfb      	ldrb	r3, [r7, #23]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3718      	adds	r7, #24
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	0800ab51 	.word	0x0800ab51
 800a674:	0800aac5 	.word	0x0800aac5
 800a678:	0800ab6d 	.word	0x0800ab6d
 800a67c:	0800ab0b 	.word	0x0800ab0b
 800a680:	0800ab89 	.word	0x0800ab89
 800a684:	ffff0000 	.word	0xffff0000

0800a688 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08a      	sub	sp, #40	; 0x28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a6a0:	6a3a      	ldr	r2, [r7, #32]
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6ba:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3330      	adds	r3, #48	; 0x30
 800a6c2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d113      	bne.n	800a6f6 <HAL_SPI_IRQHandler+0x6e>
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	f003 0320 	and.w	r3, r3, #32
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10e      	bne.n	800a6f6 <HAL_SPI_IRQHandler+0x6e>
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	f003 0304 	and.w	r3, r3, #4
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d009      	beq.n	800a6f6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	4798      	blx	r3
    handled = 1UL;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d10f      	bne.n	800a720 <HAL_SPI_IRQHandler+0x98>
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	f003 0301 	and.w	r3, r3, #1
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <HAL_SPI_IRQHandler+0x98>
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	f003 0304 	and.w	r3, r3, #4
 800a710:	2b00      	cmp	r3, #0
 800a712:	d105      	bne.n	800a720 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	4798      	blx	r3
    handled = 1UL;
 800a71c:	2301      	movs	r3, #1
 800a71e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	f003 0320 	and.w	r3, r3, #32
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10f      	bne.n	800a74a <HAL_SPI_IRQHandler+0xc2>
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	f003 0302 	and.w	r3, r3, #2
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00a      	beq.n	800a74a <HAL_SPI_IRQHandler+0xc2>
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	f003 0304 	and.w	r3, r3, #4
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d105      	bne.n	800a74a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	4798      	blx	r3
    handled = 1UL;
 800a746:	2301      	movs	r3, #1
 800a748:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f040 8170 	bne.w	800aa32 <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	f003 0308 	and.w	r3, r3, #8
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 80a0 	beq.w	800a89e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	699a      	ldr	r2, [r3, #24]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f042 0208 	orr.w	r2, r2, #8
 800a76c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	699a      	ldr	r2, [r3, #24]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f042 0210 	orr.w	r2, r2, #16
 800a77c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	699a      	ldr	r2, [r3, #24]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a78c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	691a      	ldr	r2, [r3, #16]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 0208 	bic.w	r2, r2, #8
 800a79c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00f      	beq.n	800a7c8 <HAL_SPI_IRQHandler+0x140>
 800a7a8:	7cfb      	ldrb	r3, [r7, #19]
 800a7aa:	2b04      	cmp	r3, #4
 800a7ac:	d004      	beq.n	800a7b8 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d007      	beq.n	800a7c8 <HAL_SPI_IRQHandler+0x140>
 800a7b8:	7cfb      	ldrb	r3, [r7, #19]
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d059      	beq.n	800a872 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7c2:	69db      	ldr	r3, [r3, #28]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d154      	bne.n	800a872 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d13d      	bne.n	800a852 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a7d6:	e036      	b.n	800a846 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	2b0f      	cmp	r3, #15
 800a7de:	d90b      	bls.n	800a7f8 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a7ea:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7f0:	1d1a      	adds	r2, r3, #4
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	665a      	str	r2, [r3, #100]	; 0x64
 800a7f6:	e01d      	b.n	800a834 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	2b07      	cmp	r3, #7
 800a7fe:	d90b      	bls.n	800a818 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	8812      	ldrh	r2, [r2, #0]
 800a808:	b292      	uxth	r2, r2
 800a80a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a810:	1c9a      	adds	r2, r3, #2
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	665a      	str	r2, [r3, #100]	; 0x64
 800a816:	e00d      	b.n	800a834 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a824:	7812      	ldrb	r2, [r2, #0]
 800a826:	b2d2      	uxtb	r2, r2
 800a828:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	3b01      	subs	r3, #1
 800a83e:	b29a      	uxth	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1c2      	bne.n	800a7d8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f9d6 	bl	800ac04 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f920 	bl	800aab0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a870:	e0e4      	b.n	800aa3c <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a872:	7cfb      	ldrb	r3, [r7, #19]
 800a874:	2b05      	cmp	r3, #5
 800a876:	d103      	bne.n	800a880 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f8fb 	bl	800aa74 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 800a87e:	e0da      	b.n	800aa36 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a880:	7cfb      	ldrb	r3, [r7, #19]
 800a882:	2b04      	cmp	r3, #4
 800a884:	d103      	bne.n	800a88e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f8ea 	bl	800aa60 <HAL_SPI_RxCpltCallback>
    return;
 800a88c:	e0d3      	b.n	800aa36 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a88e:	7cfb      	ldrb	r3, [r7, #19]
 800a890:	2b03      	cmp	r3, #3
 800a892:	f040 80d0 	bne.w	800aa36 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f8d8 	bl	800aa4c <HAL_SPI_TxCpltCallback>
    return;
 800a89c:	e0cb      	b.n	800aa36 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00d      	beq.n	800a8c4 <HAL_SPI_IRQHandler+0x23c>
 800a8a8:	6a3b      	ldr	r3, [r7, #32]
 800a8aa:	f003 0308 	and.w	r3, r3, #8
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d008      	beq.n	800a8c4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	699a      	ldr	r2, [r3, #24]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8c0:	619a      	str	r2, [r3, #24]

    return;
 800a8c2:	e0bb      	b.n	800aa3c <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 80b6 	beq.w	800aa3c <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00f      	beq.n	800a8fa <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8e0:	f043 0204 	orr.w	r2, r3, #4
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	699a      	ldr	r2, [r3, #24]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8f8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00f      	beq.n	800a924 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a90a:	f043 0201 	orr.w	r2, r3, #1
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	699a      	ldr	r2, [r3, #24]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a922:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00f      	beq.n	800a94e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a934:	f043 0208 	orr.w	r2, r3, #8
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	699a      	ldr	r2, [r3, #24]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a94c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	f003 0320 	and.w	r3, r3, #32
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00f      	beq.n	800a978 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a95e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	699a      	ldr	r2, [r3, #24]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f042 0220 	orr.w	r2, r2, #32
 800a976:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d05b      	beq.n	800aa3a <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f022 0201 	bic.w	r2, r2, #1
 800a990:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6919      	ldr	r1, [r3, #16]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	4b29      	ldr	r3, [pc, #164]	; (800aa44 <HAL_SPI_IRQHandler+0x3bc>)
 800a99e:	400b      	ands	r3, r1
 800a9a0:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a9a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a9ac:	d138      	bne.n	800aa20 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	689a      	ldr	r2, [r3, #8]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a9bc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d013      	beq.n	800a9ee <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9ca:	4a1f      	ldr	r2, [pc, #124]	; (800aa48 <HAL_SPI_IRQHandler+0x3c0>)
 800a9cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7f7 ff10 	bl	80027f8 <HAL_DMA_Abort_IT>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d007      	beq.n	800a9ee <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d021      	beq.n	800aa3a <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9fa:	4a13      	ldr	r2, [pc, #76]	; (800aa48 <HAL_SPI_IRQHandler+0x3c0>)
 800a9fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7f7 fef8 	bl	80027f8 <HAL_DMA_Abort_IT>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d015      	beq.n	800aa3a <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800aa1e:	e00c      	b.n	800aa3a <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f841 	bl	800aab0 <HAL_SPI_ErrorCallback>
    return;
 800aa2e:	bf00      	nop
 800aa30:	e003      	b.n	800aa3a <HAL_SPI_IRQHandler+0x3b2>
    return;
 800aa32:	bf00      	nop
 800aa34:	e002      	b.n	800aa3c <HAL_SPI_IRQHandler+0x3b4>
    return;
 800aa36:	bf00      	nop
 800aa38:	e000      	b.n	800aa3c <HAL_SPI_IRQHandler+0x3b4>
    return;
 800aa3a:	bf00      	nop
  }
}
 800aa3c:	3728      	adds	r7, #40	; 0x28
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	fffffc94 	.word	0xfffffc94
 800aa48:	0800abcf 	.word	0x0800abcf

0800aa4c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800aaa4:	bf00      	nop
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	2b07      	cmp	r3, #7
 800aadc:	d011      	beq.n	800ab02 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aae2:	69db      	ldr	r3, [r3, #28]
 800aae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aae8:	d103      	bne.n	800aaf2 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f7ff ffb8 	bl	800aa60 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800aaf0:	e007      	b.n	800ab02 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	691a      	ldr	r2, [r3, #16]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f042 0208 	orr.w	r2, r2, #8
 800ab00:	611a      	str	r2, [r3, #16]
}
 800ab02:	bf00      	nop
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b084      	sub	sp, #16
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab16:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b07      	cmp	r3, #7
 800ab22:	d011      	beq.n	800ab48 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab28:	69db      	ldr	r3, [r3, #28]
 800ab2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab2e:	d103      	bne.n	800ab38 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f7ff ff9f 	bl	800aa74 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800ab36:	e007      	b.n	800ab48 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	691a      	ldr	r2, [r3, #16]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f042 0208 	orr.w	r2, r2, #8
 800ab46:	611a      	str	r2, [r3, #16]
}
 800ab48:	bf00      	nop
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f7ff ff92 	bl	800aa88 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ab64:	bf00      	nop
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab78:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f7ff ff8e 	bl	800aa9c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ab80:	bf00      	nop
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab94:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7f8 ff9c 	bl	8003ad4 <HAL_DMA_GetError>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d011      	beq.n	800abc6 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f000 f82e 	bl	800ac04 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abae:	f043 0210 	orr.w	r2, r3, #16
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f7ff ff75 	bl	800aab0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800abc6:	bf00      	nop
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abda:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f7ff ff5b 	bl	800aab0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800abfa:	bf00      	nop
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
	...

0800ac04 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	699a      	ldr	r2, [r3, #24]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f042 0208 	orr.w	r2, r2, #8
 800ac22:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	699a      	ldr	r2, [r3, #24]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f042 0210 	orr.w	r2, r2, #16
 800ac32:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f022 0201 	bic.w	r2, r2, #1
 800ac42:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6919      	ldr	r1, [r3, #16]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	4b3c      	ldr	r3, [pc, #240]	; (800ad40 <SPI_CloseTransfer+0x13c>)
 800ac50:	400b      	ands	r3, r1
 800ac52:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	689a      	ldr	r2, [r3, #8]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ac62:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	d014      	beq.n	800ac9a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f003 0320 	and.w	r3, r3, #32
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00f      	beq.n	800ac9a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	699a      	ldr	r2, [r3, #24]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f042 0220 	orr.w	r2, r2, #32
 800ac98:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	d014      	beq.n	800acd0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00f      	beq.n	800acd0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acb6:	f043 0204 	orr.w	r2, r3, #4
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	699a      	ldr	r2, [r3, #24]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00f      	beq.n	800acfa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ace0:	f043 0201 	orr.w	r2, r3, #1
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	699a      	ldr	r2, [r3, #24]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acf8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00f      	beq.n	800ad24 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad0a:	f043 0208 	orr.w	r2, r3, #8
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	699a      	ldr	r2, [r3, #24]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad22:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ad34:	bf00      	nop
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	fffffc90 	.word	0xfffffc90

0800ad44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad50:	095b      	lsrs	r3, r3, #5
 800ad52:	3301      	adds	r3, #1
 800ad54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	3307      	adds	r3, #7
 800ad62:	08db      	lsrs	r3, r3, #3
 800ad64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	fb02 f303 	mul.w	r3, r2, r3
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
	...

0800ad7c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d121      	bne.n	800add2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	4b27      	ldr	r3, [pc, #156]	; (800ae30 <FMC_SDRAM_Init+0xb4>)
 800ad94:	4013      	ands	r3, r2
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	6851      	ldr	r1, [r2, #4]
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	6892      	ldr	r2, [r2, #8]
 800ad9e:	4311      	orrs	r1, r2
 800ada0:	683a      	ldr	r2, [r7, #0]
 800ada2:	68d2      	ldr	r2, [r2, #12]
 800ada4:	4311      	orrs	r1, r2
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	6912      	ldr	r2, [r2, #16]
 800adaa:	4311      	orrs	r1, r2
 800adac:	683a      	ldr	r2, [r7, #0]
 800adae:	6952      	ldr	r2, [r2, #20]
 800adb0:	4311      	orrs	r1, r2
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	6992      	ldr	r2, [r2, #24]
 800adb6:	4311      	orrs	r1, r2
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	69d2      	ldr	r2, [r2, #28]
 800adbc:	4311      	orrs	r1, r2
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	6a12      	ldr	r2, [r2, #32]
 800adc2:	4311      	orrs	r1, r2
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800adc8:	430a      	orrs	r2, r1
 800adca:	431a      	orrs	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	601a      	str	r2, [r3, #0]
 800add0:	e026      	b.n	800ae20 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	69d9      	ldr	r1, [r3, #28]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	4319      	orrs	r1, r3
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade8:	430b      	orrs	r3, r1
 800adea:	431a      	orrs	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	4b0e      	ldr	r3, [pc, #56]	; (800ae30 <FMC_SDRAM_Init+0xb4>)
 800adf6:	4013      	ands	r3, r2
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	6851      	ldr	r1, [r2, #4]
 800adfc:	683a      	ldr	r2, [r7, #0]
 800adfe:	6892      	ldr	r2, [r2, #8]
 800ae00:	4311      	orrs	r1, r2
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	68d2      	ldr	r2, [r2, #12]
 800ae06:	4311      	orrs	r1, r2
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	6912      	ldr	r2, [r2, #16]
 800ae0c:	4311      	orrs	r1, r2
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	6952      	ldr	r2, [r2, #20]
 800ae12:	4311      	orrs	r1, r2
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	6992      	ldr	r2, [r2, #24]
 800ae18:	430a      	orrs	r2, r1
 800ae1a:	431a      	orrs	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	370c      	adds	r7, #12
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	ffff8000 	.word	0xffff8000

0800ae34 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d128      	bne.n	800ae98 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	1e59      	subs	r1, r3, #1
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	4319      	orrs	r1, r3
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	3b01      	subs	r3, #1
 800ae64:	021b      	lsls	r3, r3, #8
 800ae66:	4319      	orrs	r1, r3
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	031b      	lsls	r3, r3, #12
 800ae70:	4319      	orrs	r1, r3
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	3b01      	subs	r3, #1
 800ae78:	041b      	lsls	r3, r3, #16
 800ae7a:	4319      	orrs	r1, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	3b01      	subs	r3, #1
 800ae82:	051b      	lsls	r3, r3, #20
 800ae84:	4319      	orrs	r1, r3
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	061b      	lsls	r3, r3, #24
 800ae8e:	430b      	orrs	r3, r1
 800ae90:	431a      	orrs	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	609a      	str	r2, [r3, #8]
 800ae96:	e02d      	b.n	800aef4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	689a      	ldr	r2, [r3, #8]
 800ae9c:	4b19      	ldr	r3, [pc, #100]	; (800af04 <FMC_SDRAM_Timing_Init+0xd0>)
 800ae9e:	4013      	ands	r3, r2
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	68d2      	ldr	r2, [r2, #12]
 800aea4:	3a01      	subs	r2, #1
 800aea6:	0311      	lsls	r1, r2, #12
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	6952      	ldr	r2, [r2, #20]
 800aeac:	3a01      	subs	r2, #1
 800aeae:	0512      	lsls	r2, r2, #20
 800aeb0:	430a      	orrs	r2, r1
 800aeb2:	431a      	orrs	r2, r3
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	1e59      	subs	r1, r3, #1
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	3b01      	subs	r3, #1
 800aecc:	011b      	lsls	r3, r3, #4
 800aece:	4319      	orrs	r1, r3
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	3b01      	subs	r3, #1
 800aed6:	021b      	lsls	r3, r3, #8
 800aed8:	4319      	orrs	r1, r3
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	3b01      	subs	r3, #1
 800aee0:	041b      	lsls	r3, r3, #16
 800aee2:	4319      	orrs	r1, r3
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	061b      	lsls	r3, r3, #24
 800aeec:	430b      	orrs	r3, r1
 800aeee:	431a      	orrs	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	ff0f0fff 	.word	0xff0f0fff

0800af08 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	691a      	ldr	r2, [r3, #16]
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	6819      	ldr	r1, [r3, #0]
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	4319      	orrs	r1, r3
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	3b01      	subs	r3, #1
 800af28:	015b      	lsls	r3, r3, #5
 800af2a:	4319      	orrs	r1, r3
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	025b      	lsls	r3, r3, #9
 800af32:	430b      	orrs	r3, r1
 800af34:	431a      	orrs	r2, r3
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	611a      	str	r2, [r3, #16]
                          (Command->CommandTarget)                                               |
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	695a      	ldr	r2, [r3, #20]
 800af56:	4b07      	ldr	r3, [pc, #28]	; (800af74 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800af58:	4013      	ands	r3, r2
 800af5a:	683a      	ldr	r2, [r7, #0]
 800af5c:	0052      	lsls	r2, r2, #1
 800af5e:	431a      	orrs	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	ffffc001 	.word	0xffffc001

0800af78 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800af78:	b084      	sub	sp, #16
 800af7a:	b480      	push	{r7}
 800af7c:	b085      	sub	sp, #20
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	f107 001c 	add.w	r0, r7, #28
 800af86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800af8e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800af90:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800af92:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800af94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800af96:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800af98:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800af9a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800af9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800af9e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	4b07      	ldr	r3, [pc, #28]	; (800afc8 <SDMMC_Init+0x50>)
 800afac:	4013      	ands	r3, r2
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	431a      	orrs	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	b004      	add	sp, #16
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	ffc02c00 	.word	0xffc02c00

0800afcc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800afda:	4618      	mov	r0, r3
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b083      	sub	sp, #12
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	370c      	adds	r7, #12
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f043 0203 	orr.w	r2, r3, #3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b02a:	b480      	push	{r7}
 800b02c:	b083      	sub	sp, #12
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0303 	and.w	r3, r3, #3
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	370c      	adds	r7, #12
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
	...

0800b048 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b066:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b06c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b072:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	4313      	orrs	r3, r2
 800b078:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	68da      	ldr	r2, [r3, #12]
 800b07e:	4b06      	ldr	r3, [pc, #24]	; (800b098 <SDMMC_SendCommand+0x50>)
 800b080:	4013      	ands	r3, r2
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	431a      	orrs	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	fffee0c0 	.word	0xfffee0c0

0800b09c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	b2db      	uxtb	r3, r3
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	370c      	adds	r7, #12
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b085      	sub	sp, #20
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	3314      	adds	r3, #20
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b085      	sub	sp, #20
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685a      	ldr	r2, [r3, #4]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b102:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b108:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b10e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	4313      	orrs	r3, r2
 800b114:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	431a      	orrs	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b126:	2300      	movs	r3, #0

}
 800b128:	4618      	mov	r0, r3
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b088      	sub	sp, #32
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b142:	2310      	movs	r3, #16
 800b144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b14a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b14c:	2300      	movs	r3, #0
 800b14e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b154:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b156:	f107 0308 	add.w	r3, r7, #8
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f7ff ff73 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b162:	f241 3288 	movw	r2, #5000	; 0x1388
 800b166:	2110      	movs	r1, #16
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 faab 	bl	800b6c4 <SDMMC_GetCmdResp1>
 800b16e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b170:	69fb      	ldr	r3, [r7, #28]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3720      	adds	r7, #32
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b088      	sub	sp, #32
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b188:	2311      	movs	r3, #17
 800b18a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b18c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b190:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b192:	2300      	movs	r3, #0
 800b194:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b19a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b19c:	f107 0308 	add.w	r3, r7, #8
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7ff ff50 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b1a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ac:	2111      	movs	r1, #17
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fa88 	bl	800b6c4 <SDMMC_GetCmdResp1>
 800b1b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1b6:	69fb      	ldr	r3, [r7, #28]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3720      	adds	r7, #32
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b088      	sub	sp, #32
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b1ce:	2312      	movs	r3, #18
 800b1d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1e2:	f107 0308 	add.w	r3, r7, #8
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7ff ff2d 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b1ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f2:	2112      	movs	r1, #18
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fa65 	bl	800b6c4 <SDMMC_GetCmdResp1>
 800b1fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1fc:	69fb      	ldr	r3, [r7, #28]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3720      	adds	r7, #32
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b088      	sub	sp, #32
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b214:	2318      	movs	r3, #24
 800b216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b21c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b21e:	2300      	movs	r3, #0
 800b220:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b226:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b228:	f107 0308 	add.w	r3, r7, #8
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7ff ff0a 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b234:	f241 3288 	movw	r2, #5000	; 0x1388
 800b238:	2118      	movs	r1, #24
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fa42 	bl	800b6c4 <SDMMC_GetCmdResp1>
 800b240:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b242:	69fb      	ldr	r3, [r7, #28]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3720      	adds	r7, #32
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b088      	sub	sp, #32
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b25a:	2319      	movs	r3, #25
 800b25c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b25e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b264:	2300      	movs	r3, #0
 800b266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b26c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b26e:	f107 0308 	add.w	r3, r7, #8
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f7ff fee7 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b27a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b27e:	2119      	movs	r1, #25
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fa1f 	bl	800b6c4 <SDMMC_GetCmdResp1>
 800b286:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b288:	69fb      	ldr	r3, [r7, #28]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3720      	adds	r7, #32
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
	...

0800b294 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b088      	sub	sp, #32
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b29c:	2300      	movs	r3, #0
 800b29e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b2a0:	230c      	movs	r3, #12
 800b2a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2b2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2cc:	f107 0308 	add.w	r3, r7, #8
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f7ff feb8 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b2d8:	4a0b      	ldr	r2, [pc, #44]	; (800b308 <SDMMC_CmdStopTransfer+0x74>)
 800b2da:	210c      	movs	r1, #12
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f9f1 	bl	800b6c4 <SDMMC_GetCmdResp1>
 800b2e2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2f6:	d101      	bne.n	800b2fc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b2fc:	69fb      	ldr	r3, [r7, #28]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3720      	adds	r7, #32
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	05f5e100 	.word	0x05f5e100

0800b30c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b08a      	sub	sp, #40	; 0x28
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b31c:	2307      	movs	r3, #7
 800b31e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b320:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b324:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b326:	2300      	movs	r3, #0
 800b328:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b32a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b32e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b330:	f107 0310 	add.w	r3, r7, #16
 800b334:	4619      	mov	r1, r3
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f7ff fe86 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b33c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b340:	2107      	movs	r1, #7
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f000 f9be 	bl	800b6c4 <SDMMC_GetCmdResp1>
 800b348:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3728      	adds	r7, #40	; 0x28
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b088      	sub	sp, #32
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b35c:	2300      	movs	r3, #0
 800b35e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b360:	2300      	movs	r3, #0
 800b362:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b364:	2300      	movs	r3, #0
 800b366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b368:	2300      	movs	r3, #0
 800b36a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b36c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b370:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b372:	f107 0308 	add.w	r3, r7, #8
 800b376:	4619      	mov	r1, r3
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7ff fe65 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f976 	bl	800b670 <SDMMC_GetCmdError>
 800b384:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b386:	69fb      	ldr	r3, [r7, #28]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3720      	adds	r7, #32
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b088      	sub	sp, #32
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b398:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b39c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b39e:	2308      	movs	r3, #8
 800b3a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3b2:	f107 0308 	add.w	r3, r7, #8
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f7ff fe45 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fb6a 	bl	800ba98 <SDMMC_GetCmdResp7>
 800b3c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3720      	adds	r7, #32
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b3de:	2337      	movs	r3, #55	; 0x37
 800b3e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3f2:	f107 0308 	add.w	r3, r7, #8
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f7ff fe25 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b3fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b402:	2137      	movs	r1, #55	; 0x37
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f95d 	bl	800b6c4 <SDMMC_GetCmdResp1>
 800b40a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b40c:	69fb      	ldr	r3, [r7, #28]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3720      	adds	r7, #32
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b088      	sub	sp, #32
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b424:	2329      	movs	r3, #41	; 0x29
 800b426:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b42c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b42e:	2300      	movs	r3, #0
 800b430:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b436:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b438:	f107 0308 	add.w	r3, r7, #8
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7ff fe02 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 fa75 	bl	800b934 <SDMMC_GetCmdResp3>
 800b44a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b44c:	69fb      	ldr	r3, [r7, #28]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3720      	adds	r7, #32
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b088      	sub	sp, #32
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b464:	2306      	movs	r3, #6
 800b466:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b46c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b46e:	2300      	movs	r3, #0
 800b470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b476:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b478:	f107 0308 	add.w	r3, r7, #8
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7ff fde2 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b484:	f241 3288 	movw	r2, #5000	; 0x1388
 800b488:	2106      	movs	r1, #6
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f91a 	bl	800b6c4 <SDMMC_GetCmdResp1>
 800b490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b492:	69fb      	ldr	r3, [r7, #28]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3720      	adds	r7, #32
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b088      	sub	sp, #32
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b4a8:	2333      	movs	r3, #51	; 0x33
 800b4aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4bc:	f107 0308 	add.w	r3, r7, #8
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7ff fdc0 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b4c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4cc:	2133      	movs	r1, #51	; 0x33
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f8f8 	bl	800b6c4 <SDMMC_GetCmdResp1>
 800b4d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4d6:	69fb      	ldr	r3, [r7, #28]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3720      	adds	r7, #32
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b088      	sub	sp, #32
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b4f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b4f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b500:	f107 0308 	add.w	r3, r7, #8
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f7ff fd9e 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 f9c9 	bl	800b8a4 <SDMMC_GetCmdResp2>
 800b512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b514:	69fb      	ldr	r3, [r7, #28]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3720      	adds	r7, #32
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b088      	sub	sp, #32
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b52c:	2309      	movs	r3, #9
 800b52e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b530:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b534:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b536:	2300      	movs	r3, #0
 800b538:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b53e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b540:	f107 0308 	add.w	r3, r7, #8
 800b544:	4619      	mov	r1, r3
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7ff fd7e 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f9a9 	bl	800b8a4 <SDMMC_GetCmdResp2>
 800b552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b554:	69fb      	ldr	r3, [r7, #28]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3720      	adds	r7, #32
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b088      	sub	sp, #32
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b568:	2300      	movs	r3, #0
 800b56a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b56c:	2303      	movs	r3, #3
 800b56e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b570:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b576:	2300      	movs	r3, #0
 800b578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b57a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b57e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b580:	f107 0308 	add.w	r3, r7, #8
 800b584:	4619      	mov	r1, r3
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7ff fd5e 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b58c:	683a      	ldr	r2, [r7, #0]
 800b58e:	2103      	movs	r1, #3
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fa0b 	bl	800b9ac <SDMMC_GetCmdResp6>
 800b596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b598:	69fb      	ldr	r3, [r7, #28]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3720      	adds	r7, #32
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b088      	sub	sp, #32
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
 800b5aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b5b0:	230d      	movs	r3, #13
 800b5b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5c4:	f107 0308 	add.w	r3, r7, #8
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7ff fd3c 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b5d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5d4:	210d      	movs	r1, #13
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f874 	bl	800b6c4 <SDMMC_GetCmdResp1>
 800b5dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5de:	69fb      	ldr	r3, [r7, #28]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3720      	adds	r7, #32
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b5f4:	230d      	movs	r3, #13
 800b5f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5fe:	2300      	movs	r3, #0
 800b600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b608:	f107 0308 	add.w	r3, r7, #8
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7ff fd1a 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b614:	f241 3288 	movw	r2, #5000	; 0x1388
 800b618:	210d      	movs	r1, #13
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f852 	bl	800b6c4 <SDMMC_GetCmdResp1>
 800b620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b622:	69fb      	ldr	r3, [r7, #28]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3720      	adds	r7, #32
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b088      	sub	sp, #32
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b634:	2300      	movs	r3, #0
 800b636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b638:	230b      	movs	r3, #11
 800b63a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b63c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b642:	2300      	movs	r3, #0
 800b644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b64a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b64c:	f107 0308 	add.w	r3, r7, #8
 800b650:	4619      	mov	r1, r3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f7ff fcf8 	bl	800b048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b658:	f241 3288 	movw	r2, #5000	; 0x1388
 800b65c:	210b      	movs	r1, #11
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 f830 	bl	800b6c4 <SDMMC_GetCmdResp1>
 800b664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b666:	69fb      	ldr	r3, [r7, #28]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3720      	adds	r7, #32
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b670:	b490      	push	{r4, r7}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b678:	4b0f      	ldr	r3, [pc, #60]	; (800b6b8 <SDMMC_GetCmdError+0x48>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a0f      	ldr	r2, [pc, #60]	; (800b6bc <SDMMC_GetCmdError+0x4c>)
 800b67e:	fba2 2303 	umull	r2, r3, r2, r3
 800b682:	0a5b      	lsrs	r3, r3, #9
 800b684:	f241 3288 	movw	r2, #5000	; 0x1388
 800b688:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b68c:	4623      	mov	r3, r4
 800b68e:	1e5c      	subs	r4, r3, #1
 800b690:	2b00      	cmp	r3, #0
 800b692:	d102      	bne.n	800b69a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b694:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b698:	e009      	b.n	800b6ae <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d0f2      	beq.n	800b68c <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a05      	ldr	r2, [pc, #20]	; (800b6c0 <SDMMC_GetCmdError+0x50>)
 800b6aa:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bc90      	pop	{r4, r7}
 800b6b6:	4770      	bx	lr
 800b6b8:	20000010 	.word	0x20000010
 800b6bc:	10624dd3 	.word	0x10624dd3
 800b6c0:	002000c5 	.word	0x002000c5

0800b6c4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b6c4:	b590      	push	{r4, r7, lr}
 800b6c6:	b087      	sub	sp, #28
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	607a      	str	r2, [r7, #4]
 800b6d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b6d2:	4b6f      	ldr	r3, [pc, #444]	; (800b890 <SDMMC_GetCmdResp1+0x1cc>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a6f      	ldr	r2, [pc, #444]	; (800b894 <SDMMC_GetCmdResp1+0x1d0>)
 800b6d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b6dc:	0a5b      	lsrs	r3, r3, #9
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b6e4:	4623      	mov	r3, r4
 800b6e6:	1e5c      	subs	r4, r3, #1
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d102      	bne.n	800b6f2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6f0:	e0c9      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	4b67      	ldr	r3, [pc, #412]	; (800b898 <SDMMC_GetCmdResp1+0x1d4>)
 800b6fc:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0f0      	beq.n	800b6e4 <SDMMC_GetCmdResp1+0x20>
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1eb      	bne.n	800b6e4 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b710:	f003 0304 	and.w	r3, r3, #4
 800b714:	2b00      	cmp	r3, #0
 800b716:	d004      	beq.n	800b722 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2204      	movs	r2, #4
 800b71c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b71e:	2304      	movs	r3, #4
 800b720:	e0b1      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d004      	beq.n	800b738 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2201      	movs	r2, #1
 800b732:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b734:	2301      	movs	r3, #1
 800b736:	e0a6      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	4a58      	ldr	r2, [pc, #352]	; (800b89c <SDMMC_GetCmdResp1+0x1d8>)
 800b73c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f7ff fcac 	bl	800b09c <SDMMC_GetCommandResponse>
 800b744:	4603      	mov	r3, r0
 800b746:	461a      	mov	r2, r3
 800b748:	7afb      	ldrb	r3, [r7, #11]
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d001      	beq.n	800b752 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b74e:	2301      	movs	r3, #1
 800b750:	e099      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b752:	2100      	movs	r1, #0
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f7ff fcae 	bl	800b0b6 <SDMMC_GetResponse>
 800b75a:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	4b50      	ldr	r3, [pc, #320]	; (800b8a0 <SDMMC_GetCmdResp1+0x1dc>)
 800b760:	4013      	ands	r3, r2
 800b762:	2b00      	cmp	r3, #0
 800b764:	d101      	bne.n	800b76a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b766:	2300      	movs	r3, #0
 800b768:	e08d      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	da02      	bge.n	800b776 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b770:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b774:	e087      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d001      	beq.n	800b784 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b780:	2340      	movs	r3, #64	; 0x40
 800b782:	e080      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d001      	beq.n	800b792 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b78e:	2380      	movs	r3, #128	; 0x80
 800b790:	e079      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b79c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7a0:	e071      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d002      	beq.n	800b7b2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b7ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7b0:	e069      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d002      	beq.n	800b7c2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b7bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7c0:	e061      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b7cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7d0:	e059      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b7dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7e0:	e051      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b7ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7f0:	e049      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d002      	beq.n	800b802 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b7fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b800:	e041      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d002      	beq.n	800b812 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b80c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b810:	e039      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b81c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b820:	e031      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b82c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b830:	e029      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b83c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b840:	e021      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d002      	beq.n	800b852 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b84c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b850:	e019      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b85c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b860:	e011      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d002      	beq.n	800b872 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b86c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b870:	e009      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	f003 0308 	and.w	r3, r3, #8
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d002      	beq.n	800b882 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b87c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b880:	e001      	b.n	800b886 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b886:	4618      	mov	r0, r3
 800b888:	371c      	adds	r7, #28
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd90      	pop	{r4, r7, pc}
 800b88e:	bf00      	nop
 800b890:	20000010 	.word	0x20000010
 800b894:	10624dd3 	.word	0x10624dd3
 800b898:	00200045 	.word	0x00200045
 800b89c:	002000c5 	.word	0x002000c5
 800b8a0:	fdffe008 	.word	0xfdffe008

0800b8a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b8a4:	b490      	push	{r4, r7}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8ac:	4b1e      	ldr	r3, [pc, #120]	; (800b928 <SDMMC_GetCmdResp2+0x84>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a1e      	ldr	r2, [pc, #120]	; (800b92c <SDMMC_GetCmdResp2+0x88>)
 800b8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8b6:	0a5b      	lsrs	r3, r3, #9
 800b8b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8bc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b8c0:	4623      	mov	r3, r4
 800b8c2:	1e5c      	subs	r4, r3, #1
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d102      	bne.n	800b8ce <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8cc:	e026      	b.n	800b91c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d0f0      	beq.n	800b8c0 <SDMMC_GetCmdResp2+0x1c>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1eb      	bne.n	800b8c0 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ec:	f003 0304 	and.w	r3, r3, #4
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d004      	beq.n	800b8fe <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2204      	movs	r2, #4
 800b8f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8fa:	2304      	movs	r3, #4
 800b8fc:	e00e      	b.n	800b91c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b902:	f003 0301 	and.w	r3, r3, #1
 800b906:	2b00      	cmp	r3, #0
 800b908:	d004      	beq.n	800b914 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2201      	movs	r2, #1
 800b90e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b910:	2301      	movs	r3, #1
 800b912:	e003      	b.n	800b91c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	4a06      	ldr	r2, [pc, #24]	; (800b930 <SDMMC_GetCmdResp2+0x8c>)
 800b918:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bc90      	pop	{r4, r7}
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	20000010 	.word	0x20000010
 800b92c:	10624dd3 	.word	0x10624dd3
 800b930:	002000c5 	.word	0x002000c5

0800b934 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b934:	b490      	push	{r4, r7}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b93c:	4b18      	ldr	r3, [pc, #96]	; (800b9a0 <SDMMC_GetCmdResp3+0x6c>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a18      	ldr	r2, [pc, #96]	; (800b9a4 <SDMMC_GetCmdResp3+0x70>)
 800b942:	fba2 2303 	umull	r2, r3, r2, r3
 800b946:	0a5b      	lsrs	r3, r3, #9
 800b948:	f241 3288 	movw	r2, #5000	; 0x1388
 800b94c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b950:	4623      	mov	r3, r4
 800b952:	1e5c      	subs	r4, r3, #1
 800b954:	2b00      	cmp	r3, #0
 800b956:	d102      	bne.n	800b95e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b958:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b95c:	e01b      	b.n	800b996 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b962:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0f0      	beq.n	800b950 <SDMMC_GetCmdResp3+0x1c>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1eb      	bne.n	800b950 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b00      	cmp	r3, #0
 800b982:	d004      	beq.n	800b98e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2204      	movs	r2, #4
 800b988:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b98a:	2304      	movs	r3, #4
 800b98c:	e003      	b.n	800b996 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a05      	ldr	r2, [pc, #20]	; (800b9a8 <SDMMC_GetCmdResp3+0x74>)
 800b992:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bc90      	pop	{r4, r7}
 800b99e:	4770      	bx	lr
 800b9a0:	20000010 	.word	0x20000010
 800b9a4:	10624dd3 	.word	0x10624dd3
 800b9a8:	002000c5 	.word	0x002000c5

0800b9ac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b9ac:	b590      	push	{r4, r7, lr}
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	607a      	str	r2, [r7, #4]
 800b9b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9ba:	4b34      	ldr	r3, [pc, #208]	; (800ba8c <SDMMC_GetCmdResp6+0xe0>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a34      	ldr	r2, [pc, #208]	; (800ba90 <SDMMC_GetCmdResp6+0xe4>)
 800b9c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b9c4:	0a5b      	lsrs	r3, r3, #9
 800b9c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9ca:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b9ce:	4623      	mov	r3, r4
 800b9d0:	1e5c      	subs	r4, r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d102      	bne.n	800b9dc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9da:	e052      	b.n	800ba82 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9e0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d0f0      	beq.n	800b9ce <SDMMC_GetCmdResp6+0x22>
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1eb      	bne.n	800b9ce <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fa:	f003 0304 	and.w	r3, r3, #4
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d004      	beq.n	800ba0c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2204      	movs	r2, #4
 800ba06:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba08:	2304      	movs	r3, #4
 800ba0a:	e03a      	b.n	800ba82 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba10:	f003 0301 	and.w	r3, r3, #1
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d004      	beq.n	800ba22 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e02f      	b.n	800ba82 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7ff fb3a 	bl	800b09c <SDMMC_GetCommandResponse>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	7afb      	ldrb	r3, [r7, #11]
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d001      	beq.n	800ba36 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e025      	b.n	800ba82 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	4a16      	ldr	r2, [pc, #88]	; (800ba94 <SDMMC_GetCmdResp6+0xe8>)
 800ba3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f7ff fb39 	bl	800b0b6 <SDMMC_GetResponse>
 800ba44:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d106      	bne.n	800ba5e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	0c1b      	lsrs	r3, r3, #16
 800ba54:	b29a      	uxth	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	e011      	b.n	800ba82 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba6c:	e009      	b.n	800ba82 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba7c:	e001      	b.n	800ba82 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	371c      	adds	r7, #28
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd90      	pop	{r4, r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20000010 	.word	0x20000010
 800ba90:	10624dd3 	.word	0x10624dd3
 800ba94:	002000c5 	.word	0x002000c5

0800ba98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ba98:	b490      	push	{r4, r7}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800baa0:	4b21      	ldr	r3, [pc, #132]	; (800bb28 <SDMMC_GetCmdResp7+0x90>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a21      	ldr	r2, [pc, #132]	; (800bb2c <SDMMC_GetCmdResp7+0x94>)
 800baa6:	fba2 2303 	umull	r2, r3, r2, r3
 800baaa:	0a5b      	lsrs	r3, r3, #9
 800baac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bab0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bab4:	4623      	mov	r3, r4
 800bab6:	1e5c      	subs	r4, r3, #1
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d102      	bne.n	800bac2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800babc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bac0:	e02c      	b.n	800bb1c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d0f0      	beq.n	800bab4 <SDMMC_GetCmdResp7+0x1c>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1eb      	bne.n	800bab4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae0:	f003 0304 	and.w	r3, r3, #4
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d004      	beq.n	800baf2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2204      	movs	r2, #4
 800baec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baee:	2304      	movs	r3, #4
 800baf0:	e014      	b.n	800bb1c <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf6:	f003 0301 	and.w	r3, r3, #1
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d004      	beq.n	800bb08 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2201      	movs	r2, #1
 800bb02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb04:	2301      	movs	r3, #1
 800bb06:	e009      	b.n	800bb1c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2240      	movs	r2, #64	; 0x40
 800bb18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb1a:	2300      	movs	r3, #0

}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bc90      	pop	{r4, r7}
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	20000010 	.word	0x20000010
 800bb2c:	10624dd3 	.word	0x10624dd3

0800bb30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	4603      	mov	r3, r0
 800bb38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bb3a:	79fb      	ldrb	r3, [r7, #7]
 800bb3c:	4a08      	ldr	r2, [pc, #32]	; (800bb60 <disk_status+0x30>)
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	79fa      	ldrb	r2, [r7, #7]
 800bb48:	4905      	ldr	r1, [pc, #20]	; (800bb60 <disk_status+0x30>)
 800bb4a:	440a      	add	r2, r1
 800bb4c:	7a12      	ldrb	r2, [r2, #8]
 800bb4e:	4610      	mov	r0, r2
 800bb50:	4798      	blx	r3
 800bb52:	4603      	mov	r3, r0
 800bb54:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	200002c4 	.word	0x200002c4

0800bb64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bb72:	79fb      	ldrb	r3, [r7, #7]
 800bb74:	4a0d      	ldr	r2, [pc, #52]	; (800bbac <disk_initialize+0x48>)
 800bb76:	5cd3      	ldrb	r3, [r2, r3]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d111      	bne.n	800bba0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bb7c:	79fb      	ldrb	r3, [r7, #7]
 800bb7e:	4a0b      	ldr	r2, [pc, #44]	; (800bbac <disk_initialize+0x48>)
 800bb80:	2101      	movs	r1, #1
 800bb82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bb84:	79fb      	ldrb	r3, [r7, #7]
 800bb86:	4a09      	ldr	r2, [pc, #36]	; (800bbac <disk_initialize+0x48>)
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4413      	add	r3, r2
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	79fa      	ldrb	r2, [r7, #7]
 800bb92:	4906      	ldr	r1, [pc, #24]	; (800bbac <disk_initialize+0x48>)
 800bb94:	440a      	add	r2, r1
 800bb96:	7a12      	ldrb	r2, [r2, #8]
 800bb98:	4610      	mov	r0, r2
 800bb9a:	4798      	blx	r3
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	200002c4 	.word	0x200002c4

0800bbb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bbb0:	b590      	push	{r4, r7, lr}
 800bbb2:	b087      	sub	sp, #28
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60b9      	str	r1, [r7, #8]
 800bbb8:	607a      	str	r2, [r7, #4]
 800bbba:	603b      	str	r3, [r7, #0]
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
 800bbc2:	4a0a      	ldr	r2, [pc, #40]	; (800bbec <disk_read+0x3c>)
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	4413      	add	r3, r2
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	689c      	ldr	r4, [r3, #8]
 800bbcc:	7bfb      	ldrb	r3, [r7, #15]
 800bbce:	4a07      	ldr	r2, [pc, #28]	; (800bbec <disk_read+0x3c>)
 800bbd0:	4413      	add	r3, r2
 800bbd2:	7a18      	ldrb	r0, [r3, #8]
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	68b9      	ldr	r1, [r7, #8]
 800bbda:	47a0      	blx	r4
 800bbdc:	4603      	mov	r3, r0
 800bbde:	75fb      	strb	r3, [r7, #23]
  return res;
 800bbe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	371c      	adds	r7, #28
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd90      	pop	{r4, r7, pc}
 800bbea:	bf00      	nop
 800bbec:	200002c4 	.word	0x200002c4

0800bbf0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bbf0:	b590      	push	{r4, r7, lr}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60b9      	str	r1, [r7, #8]
 800bbf8:	607a      	str	r2, [r7, #4]
 800bbfa:	603b      	str	r3, [r7, #0]
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
 800bc02:	4a0a      	ldr	r2, [pc, #40]	; (800bc2c <disk_write+0x3c>)
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	68dc      	ldr	r4, [r3, #12]
 800bc0c:	7bfb      	ldrb	r3, [r7, #15]
 800bc0e:	4a07      	ldr	r2, [pc, #28]	; (800bc2c <disk_write+0x3c>)
 800bc10:	4413      	add	r3, r2
 800bc12:	7a18      	ldrb	r0, [r3, #8]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	68b9      	ldr	r1, [r7, #8]
 800bc1a:	47a0      	blx	r4
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	75fb      	strb	r3, [r7, #23]
  return res;
 800bc20:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	371c      	adds	r7, #28
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd90      	pop	{r4, r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	200002c4 	.word	0x200002c4

0800bc30 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bc40:	89fb      	ldrh	r3, [r7, #14]
 800bc42:	021b      	lsls	r3, r3, #8
 800bc44:	b21a      	sxth	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	b21b      	sxth	r3, r3
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	b21b      	sxth	r3, r3
 800bc50:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bc52:	89fb      	ldrh	r3, [r7, #14]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	3303      	adds	r3, #3
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	021b      	lsls	r3, r3, #8
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	3202      	adds	r2, #2
 800bc78:	7812      	ldrb	r2, [r2, #0]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	021b      	lsls	r3, r3, #8
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	3201      	adds	r2, #1
 800bc86:	7812      	ldrb	r2, [r2, #0]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	021b      	lsls	r3, r3, #8
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	7812      	ldrb	r2, [r2, #0]
 800bc94:	4313      	orrs	r3, r2
 800bc96:	60fb      	str	r3, [r7, #12]
	return rv;
 800bc98:	68fb      	ldr	r3, [r7, #12]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bca6:	b480      	push	{r7}
 800bca8:	b083      	sub	sp, #12
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	460b      	mov	r3, r1
 800bcb0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	1c5a      	adds	r2, r3, #1
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	887a      	ldrh	r2, [r7, #2]
 800bcba:	b2d2      	uxtb	r2, r2
 800bcbc:	701a      	strb	r2, [r3, #0]
 800bcbe:	887b      	ldrh	r3, [r7, #2]
 800bcc0:	0a1b      	lsrs	r3, r3, #8
 800bcc2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	1c5a      	adds	r2, r3, #1
 800bcc8:	607a      	str	r2, [r7, #4]
 800bcca:	887a      	ldrh	r2, [r7, #2]
 800bccc:	b2d2      	uxtb	r2, r2
 800bcce:	701a      	strb	r2, [r3, #0]
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	1c5a      	adds	r2, r3, #1
 800bcea:	607a      	str	r2, [r7, #4]
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	b2d2      	uxtb	r2, r2
 800bcf0:	701a      	strb	r2, [r3, #0]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	0a1b      	lsrs	r3, r3, #8
 800bcf6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	1c5a      	adds	r2, r3, #1
 800bcfc:	607a      	str	r2, [r7, #4]
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	b2d2      	uxtb	r2, r2
 800bd02:	701a      	strb	r2, [r3, #0]
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	0a1b      	lsrs	r3, r3, #8
 800bd08:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	1c5a      	adds	r2, r3, #1
 800bd0e:	607a      	str	r2, [r7, #4]
 800bd10:	683a      	ldr	r2, [r7, #0]
 800bd12:	b2d2      	uxtb	r2, r2
 800bd14:	701a      	strb	r2, [r3, #0]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	0a1b      	lsrs	r3, r3, #8
 800bd1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	1c5a      	adds	r2, r3, #1
 800bd20:	607a      	str	r2, [r7, #4]
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	b2d2      	uxtb	r2, r2
 800bd26:	701a      	strb	r2, [r3, #0]
}
 800bd28:	bf00      	nop
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bd34:	b480      	push	{r7}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00d      	beq.n	800bd6a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bd4e:	693a      	ldr	r2, [r7, #16]
 800bd50:	1c53      	adds	r3, r2, #1
 800bd52:	613b      	str	r3, [r7, #16]
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	1c59      	adds	r1, r3, #1
 800bd58:	6179      	str	r1, [r7, #20]
 800bd5a:	7812      	ldrb	r2, [r2, #0]
 800bd5c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	3b01      	subs	r3, #1
 800bd62:	607b      	str	r3, [r7, #4]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1f1      	bne.n	800bd4e <mem_cpy+0x1a>
	}
}
 800bd6a:	bf00      	nop
 800bd6c:	371c      	adds	r7, #28
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bd76:	b480      	push	{r7}
 800bd78:	b087      	sub	sp, #28
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	60f8      	str	r0, [r7, #12]
 800bd7e:	60b9      	str	r1, [r7, #8]
 800bd80:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	1c5a      	adds	r2, r3, #1
 800bd8a:	617a      	str	r2, [r7, #20]
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	b2d2      	uxtb	r2, r2
 800bd90:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	607b      	str	r3, [r7, #4]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1f3      	bne.n	800bd86 <mem_set+0x10>
}
 800bd9e:	bf00      	nop
 800bda0:	371c      	adds	r7, #28
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bdaa:	b480      	push	{r7}
 800bdac:	b089      	sub	sp, #36	; 0x24
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	60b9      	str	r1, [r7, #8]
 800bdb4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	61fb      	str	r3, [r7, #28]
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	1c5a      	adds	r2, r3, #1
 800bdc6:	61fa      	str	r2, [r7, #28]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	4619      	mov	r1, r3
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	1c5a      	adds	r2, r3, #1
 800bdd0:	61ba      	str	r2, [r7, #24]
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	1acb      	subs	r3, r1, r3
 800bdd6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	3b01      	subs	r3, #1
 800bddc:	607b      	str	r3, [r7, #4]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d002      	beq.n	800bdea <mem_cmp+0x40>
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d0eb      	beq.n	800bdc2 <mem_cmp+0x18>

	return r;
 800bdea:	697b      	ldr	r3, [r7, #20]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3724      	adds	r7, #36	; 0x24
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800be02:	e002      	b.n	800be0a <chk_chr+0x12>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	3301      	adds	r3, #1
 800be08:	607b      	str	r3, [r7, #4]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d005      	beq.n	800be1e <chk_chr+0x26>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	461a      	mov	r2, r3
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d1f2      	bne.n	800be04 <chk_chr+0xc>
	return *str;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	781b      	ldrb	r3, [r3, #0]
}
 800be22:	4618      	mov	r0, r3
 800be24:	370c      	adds	r7, #12
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
	...

0800be30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be3a:	2300      	movs	r3, #0
 800be3c:	60bb      	str	r3, [r7, #8]
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	60fb      	str	r3, [r7, #12]
 800be42:	e029      	b.n	800be98 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800be44:	4a27      	ldr	r2, [pc, #156]	; (800bee4 <chk_lock+0xb4>)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	011b      	lsls	r3, r3, #4
 800be4a:	4413      	add	r3, r2
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d01d      	beq.n	800be8e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be52:	4a24      	ldr	r2, [pc, #144]	; (800bee4 <chk_lock+0xb4>)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	011b      	lsls	r3, r3, #4
 800be58:	4413      	add	r3, r2
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	429a      	cmp	r2, r3
 800be62:	d116      	bne.n	800be92 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800be64:	4a1f      	ldr	r2, [pc, #124]	; (800bee4 <chk_lock+0xb4>)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	011b      	lsls	r3, r3, #4
 800be6a:	4413      	add	r3, r2
 800be6c:	3304      	adds	r3, #4
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be74:	429a      	cmp	r2, r3
 800be76:	d10c      	bne.n	800be92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be78:	4a1a      	ldr	r2, [pc, #104]	; (800bee4 <chk_lock+0xb4>)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	011b      	lsls	r3, r3, #4
 800be7e:	4413      	add	r3, r2
 800be80:	3308      	adds	r3, #8
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800be88:	429a      	cmp	r2, r3
 800be8a:	d102      	bne.n	800be92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be8c:	e007      	b.n	800be9e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800be8e:	2301      	movs	r3, #1
 800be90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	3301      	adds	r3, #1
 800be96:	60fb      	str	r3, [r7, #12]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d9d2      	bls.n	800be44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d109      	bne.n	800beb8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d102      	bne.n	800beb0 <chk_lock+0x80>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	2b02      	cmp	r3, #2
 800beae:	d101      	bne.n	800beb4 <chk_lock+0x84>
 800beb0:	2300      	movs	r3, #0
 800beb2:	e010      	b.n	800bed6 <chk_lock+0xa6>
 800beb4:	2312      	movs	r3, #18
 800beb6:	e00e      	b.n	800bed6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d108      	bne.n	800bed0 <chk_lock+0xa0>
 800bebe:	4a09      	ldr	r2, [pc, #36]	; (800bee4 <chk_lock+0xb4>)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	011b      	lsls	r3, r3, #4
 800bec4:	4413      	add	r3, r2
 800bec6:	330c      	adds	r3, #12
 800bec8:	881b      	ldrh	r3, [r3, #0]
 800beca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bece:	d101      	bne.n	800bed4 <chk_lock+0xa4>
 800bed0:	2310      	movs	r3, #16
 800bed2:	e000      	b.n	800bed6 <chk_lock+0xa6>
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	200000a4 	.word	0x200000a4

0800bee8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800beee:	2300      	movs	r3, #0
 800bef0:	607b      	str	r3, [r7, #4]
 800bef2:	e002      	b.n	800befa <enq_lock+0x12>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	3301      	adds	r3, #1
 800bef8:	607b      	str	r3, [r7, #4]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d806      	bhi.n	800bf0e <enq_lock+0x26>
 800bf00:	4a09      	ldr	r2, [pc, #36]	; (800bf28 <enq_lock+0x40>)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	011b      	lsls	r3, r3, #4
 800bf06:	4413      	add	r3, r2
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1f2      	bne.n	800bef4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	bf14      	ite	ne
 800bf14:	2301      	movne	r3, #1
 800bf16:	2300      	moveq	r3, #0
 800bf18:	b2db      	uxtb	r3, r3
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	370c      	adds	r7, #12
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	200000a4 	.word	0x200000a4

0800bf2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf36:	2300      	movs	r3, #0
 800bf38:	60fb      	str	r3, [r7, #12]
 800bf3a:	e01f      	b.n	800bf7c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bf3c:	4a41      	ldr	r2, [pc, #260]	; (800c044 <inc_lock+0x118>)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	011b      	lsls	r3, r3, #4
 800bf42:	4413      	add	r3, r2
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d113      	bne.n	800bf76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bf4e:	4a3d      	ldr	r2, [pc, #244]	; (800c044 <inc_lock+0x118>)
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	011b      	lsls	r3, r3, #4
 800bf54:	4413      	add	r3, r2
 800bf56:	3304      	adds	r3, #4
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d109      	bne.n	800bf76 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bf62:	4a38      	ldr	r2, [pc, #224]	; (800c044 <inc_lock+0x118>)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	011b      	lsls	r3, r3, #4
 800bf68:	4413      	add	r3, r2
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d006      	beq.n	800bf84 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d9dc      	bls.n	800bf3c <inc_lock+0x10>
 800bf82:	e000      	b.n	800bf86 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bf84:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d132      	bne.n	800bff2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	60fb      	str	r3, [r7, #12]
 800bf90:	e002      	b.n	800bf98 <inc_lock+0x6c>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	3301      	adds	r3, #1
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d806      	bhi.n	800bfac <inc_lock+0x80>
 800bf9e:	4a29      	ldr	r2, [pc, #164]	; (800c044 <inc_lock+0x118>)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	011b      	lsls	r3, r3, #4
 800bfa4:	4413      	add	r3, r2
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1f2      	bne.n	800bf92 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d101      	bne.n	800bfb6 <inc_lock+0x8a>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	e040      	b.n	800c038 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	4922      	ldr	r1, [pc, #136]	; (800c044 <inc_lock+0x118>)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	011b      	lsls	r3, r3, #4
 800bfc0:	440b      	add	r3, r1
 800bfc2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	689a      	ldr	r2, [r3, #8]
 800bfc8:	491e      	ldr	r1, [pc, #120]	; (800c044 <inc_lock+0x118>)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	011b      	lsls	r3, r3, #4
 800bfce:	440b      	add	r3, r1
 800bfd0:	3304      	adds	r3, #4
 800bfd2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	695a      	ldr	r2, [r3, #20]
 800bfd8:	491a      	ldr	r1, [pc, #104]	; (800c044 <inc_lock+0x118>)
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	011b      	lsls	r3, r3, #4
 800bfde:	440b      	add	r3, r1
 800bfe0:	3308      	adds	r3, #8
 800bfe2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bfe4:	4a17      	ldr	r2, [pc, #92]	; (800c044 <inc_lock+0x118>)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	011b      	lsls	r3, r3, #4
 800bfea:	4413      	add	r3, r2
 800bfec:	330c      	adds	r3, #12
 800bfee:	2200      	movs	r2, #0
 800bff0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d009      	beq.n	800c00c <inc_lock+0xe0>
 800bff8:	4a12      	ldr	r2, [pc, #72]	; (800c044 <inc_lock+0x118>)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	011b      	lsls	r3, r3, #4
 800bffe:	4413      	add	r3, r2
 800c000:	330c      	adds	r3, #12
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d001      	beq.n	800c00c <inc_lock+0xe0>
 800c008:	2300      	movs	r3, #0
 800c00a:	e015      	b.n	800c038 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d108      	bne.n	800c024 <inc_lock+0xf8>
 800c012:	4a0c      	ldr	r2, [pc, #48]	; (800c044 <inc_lock+0x118>)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	011b      	lsls	r3, r3, #4
 800c018:	4413      	add	r3, r2
 800c01a:	330c      	adds	r3, #12
 800c01c:	881b      	ldrh	r3, [r3, #0]
 800c01e:	3301      	adds	r3, #1
 800c020:	b29a      	uxth	r2, r3
 800c022:	e001      	b.n	800c028 <inc_lock+0xfc>
 800c024:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c028:	4906      	ldr	r1, [pc, #24]	; (800c044 <inc_lock+0x118>)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	011b      	lsls	r3, r3, #4
 800c02e:	440b      	add	r3, r1
 800c030:	330c      	adds	r3, #12
 800c032:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	3301      	adds	r3, #1
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr
 800c044:	200000a4 	.word	0x200000a4

0800c048 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c050:	2300      	movs	r3, #0
 800c052:	60fb      	str	r3, [r7, #12]
 800c054:	e010      	b.n	800c078 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c056:	4a0d      	ldr	r2, [pc, #52]	; (800c08c <clear_lock+0x44>)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	011b      	lsls	r3, r3, #4
 800c05c:	4413      	add	r3, r2
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	429a      	cmp	r2, r3
 800c064:	d105      	bne.n	800c072 <clear_lock+0x2a>
 800c066:	4a09      	ldr	r2, [pc, #36]	; (800c08c <clear_lock+0x44>)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	011b      	lsls	r3, r3, #4
 800c06c:	4413      	add	r3, r2
 800c06e:	2200      	movs	r2, #0
 800c070:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	3301      	adds	r3, #1
 800c076:	60fb      	str	r3, [r7, #12]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d9eb      	bls.n	800c056 <clear_lock+0xe>
	}
}
 800c07e:	bf00      	nop
 800c080:	3714      	adds	r7, #20
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	200000a4 	.word	0x200000a4

0800c090 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c098:	2300      	movs	r3, #0
 800c09a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	78db      	ldrb	r3, [r3, #3]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d034      	beq.n	800c10e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	7858      	ldrb	r0, [r3, #1]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	f7ff fd9a 	bl	800bbf0 <disk_write>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d002      	beq.n	800c0c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	73fb      	strb	r3, [r7, #15]
 800c0c6:	e022      	b.n	800c10e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d2:	697a      	ldr	r2, [r7, #20]
 800c0d4:	1ad2      	subs	r2, r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	69db      	ldr	r3, [r3, #28]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d217      	bcs.n	800c10e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	789b      	ldrb	r3, [r3, #2]
 800c0e2:	613b      	str	r3, [r7, #16]
 800c0e4:	e010      	b.n	800c108 <sync_window+0x78>
					wsect += fs->fsize;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	697a      	ldr	r2, [r7, #20]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	7858      	ldrb	r0, [r3, #1]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	697a      	ldr	r2, [r7, #20]
 800c0fe:	f7ff fd77 	bl	800bbf0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	3b01      	subs	r3, #1
 800c106:	613b      	str	r3, [r7, #16]
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d8eb      	bhi.n	800c0e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3718      	adds	r7, #24
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d01b      	beq.n	800c168 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7ff ffad 	bl	800c090 <sync_window>
 800c136:	4603      	mov	r3, r0
 800c138:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d113      	bne.n	800c168 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	7858      	ldrb	r0, [r3, #1]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c14a:	2301      	movs	r3, #1
 800c14c:	683a      	ldr	r2, [r7, #0]
 800c14e:	f7ff fd2f 	bl	800bbb0 <disk_read>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d004      	beq.n	800c162 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c15c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c15e:	2301      	movs	r3, #1
 800c160:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	683a      	ldr	r2, [r7, #0]
 800c166:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c168:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c172:	b480      	push	{r7}
 800c174:	b083      	sub	sp, #12
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	3b02      	subs	r3, #2
 800c180:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	699b      	ldr	r3, [r3, #24]
 800c186:	3b02      	subs	r3, #2
 800c188:	683a      	ldr	r2, [r7, #0]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d301      	bcc.n	800c192 <clust2sect+0x20>
 800c18e:	2300      	movs	r3, #0
 800c190:	e008      	b.n	800c1a4 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	895b      	ldrh	r3, [r3, #10]
 800c196:	461a      	mov	r2, r3
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	fb03 f202 	mul.w	r2, r3, r2
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a2:	4413      	add	r3, r2
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d904      	bls.n	800c1d0 <get_fat+0x20>
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	699b      	ldr	r3, [r3, #24]
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d302      	bcc.n	800c1d6 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	617b      	str	r3, [r7, #20]
 800c1d4:	e08c      	b.n	800c2f0 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c1d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1da:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	2b02      	cmp	r3, #2
 800c1e2:	d045      	beq.n	800c270 <get_fat+0xc0>
 800c1e4:	2b03      	cmp	r3, #3
 800c1e6:	d05d      	beq.n	800c2a4 <get_fat+0xf4>
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d177      	bne.n	800c2dc <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	60fb      	str	r3, [r7, #12]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	085b      	lsrs	r3, r3, #1
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	0a5b      	lsrs	r3, r3, #9
 800c202:	4413      	add	r3, r2
 800c204:	4619      	mov	r1, r3
 800c206:	6938      	ldr	r0, [r7, #16]
 800c208:	f7ff ff86 	bl	800c118 <move_window>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d167      	bne.n	800c2e2 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	1c5a      	adds	r2, r3, #1
 800c216:	60fa      	str	r2, [r7, #12]
 800c218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c21c:	693a      	ldr	r2, [r7, #16]
 800c21e:	4413      	add	r3, r2
 800c220:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c224:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	0a5b      	lsrs	r3, r3, #9
 800c22e:	4413      	add	r3, r2
 800c230:	4619      	mov	r1, r3
 800c232:	6938      	ldr	r0, [r7, #16]
 800c234:	f7ff ff70 	bl	800c118 <move_window>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d153      	bne.n	800c2e6 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c244:	693a      	ldr	r2, [r7, #16]
 800c246:	4413      	add	r3, r2
 800c248:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c24c:	021b      	lsls	r3, r3, #8
 800c24e:	461a      	mov	r2, r3
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	4313      	orrs	r3, r2
 800c254:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	f003 0301 	and.w	r3, r3, #1
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d002      	beq.n	800c266 <get_fat+0xb6>
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	091b      	lsrs	r3, r3, #4
 800c264:	e002      	b.n	800c26c <get_fat+0xbc>
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c26c:	617b      	str	r3, [r7, #20]
			break;
 800c26e:	e03f      	b.n	800c2f0 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	0a1b      	lsrs	r3, r3, #8
 800c278:	4413      	add	r3, r2
 800c27a:	4619      	mov	r1, r3
 800c27c:	6938      	ldr	r0, [r7, #16]
 800c27e:	f7ff ff4b 	bl	800c118 <move_window>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d130      	bne.n	800c2ea <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c296:	4413      	add	r3, r2
 800c298:	4618      	mov	r0, r3
 800c29a:	f7ff fcc9 	bl	800bc30 <ld_word>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	617b      	str	r3, [r7, #20]
			break;
 800c2a2:	e025      	b.n	800c2f0 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	09db      	lsrs	r3, r3, #7
 800c2ac:	4413      	add	r3, r2
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	6938      	ldr	r0, [r7, #16]
 800c2b2:	f7ff ff31 	bl	800c118 <move_window>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d118      	bne.n	800c2ee <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c2ca:	4413      	add	r3, r2
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7ff fcc7 	bl	800bc60 <ld_dword>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c2d8:	617b      	str	r3, [r7, #20]
			break;
 800c2da:	e009      	b.n	800c2f0 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c2dc:	2301      	movs	r3, #1
 800c2de:	617b      	str	r3, [r7, #20]
 800c2e0:	e006      	b.n	800c2f0 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c2e2:	bf00      	nop
 800c2e4:	e004      	b.n	800c2f0 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c2e6:	bf00      	nop
 800c2e8:	e002      	b.n	800c2f0 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c2ea:	bf00      	nop
 800c2ec:	e000      	b.n	800c2f0 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c2ee:	bf00      	nop
		}
	}

	return val;
 800c2f0:	697b      	ldr	r3, [r7, #20]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3718      	adds	r7, #24
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c2fa:	b590      	push	{r4, r7, lr}
 800c2fc:	b089      	sub	sp, #36	; 0x24
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	60f8      	str	r0, [r7, #12]
 800c302:	60b9      	str	r1, [r7, #8]
 800c304:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c306:	2302      	movs	r3, #2
 800c308:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	f240 80d6 	bls.w	800c4be <put_fat+0x1c4>
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	699b      	ldr	r3, [r3, #24]
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	429a      	cmp	r2, r3
 800c31a:	f080 80d0 	bcs.w	800c4be <put_fat+0x1c4>
		switch (fs->fs_type) {
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	2b02      	cmp	r3, #2
 800c324:	d073      	beq.n	800c40e <put_fat+0x114>
 800c326:	2b03      	cmp	r3, #3
 800c328:	f000 8091 	beq.w	800c44e <put_fat+0x154>
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	f040 80c6 	bne.w	800c4be <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	61bb      	str	r3, [r7, #24]
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	085b      	lsrs	r3, r3, #1
 800c33a:	69ba      	ldr	r2, [r7, #24]
 800c33c:	4413      	add	r3, r2
 800c33e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	0a5b      	lsrs	r3, r3, #9
 800c348:	4413      	add	r3, r2
 800c34a:	4619      	mov	r1, r3
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f7ff fee3 	bl	800c118 <move_window>
 800c352:	4603      	mov	r3, r0
 800c354:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c356:	7ffb      	ldrb	r3, [r7, #31]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f040 80a9 	bne.w	800c4b0 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	1c59      	adds	r1, r3, #1
 800c368:	61b9      	str	r1, [r7, #24]
 800c36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c36e:	4413      	add	r3, r2
 800c370:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	f003 0301 	and.w	r3, r3, #1
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00d      	beq.n	800c398 <put_fat+0x9e>
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	b25b      	sxtb	r3, r3
 800c382:	f003 030f 	and.w	r3, r3, #15
 800c386:	b25a      	sxtb	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	011b      	lsls	r3, r3, #4
 800c38e:	b25b      	sxtb	r3, r3
 800c390:	4313      	orrs	r3, r2
 800c392:	b25b      	sxtb	r3, r3
 800c394:	b2db      	uxtb	r3, r3
 800c396:	e001      	b.n	800c39c <put_fat+0xa2>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	697a      	ldr	r2, [r7, #20]
 800c39e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	0a5b      	lsrs	r3, r3, #9
 800c3ae:	4413      	add	r3, r2
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f7ff feb0 	bl	800c118 <move_window>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3bc:	7ffb      	ldrb	r3, [r7, #31]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d178      	bne.n	800c4b4 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ce:	4413      	add	r3, r2
 800c3d0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	f003 0301 	and.w	r3, r3, #1
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d003      	beq.n	800c3e4 <put_fat+0xea>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	091b      	lsrs	r3, r3, #4
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	e00e      	b.n	800c402 <put_fat+0x108>
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	b25b      	sxtb	r3, r3
 800c3ea:	f023 030f 	bic.w	r3, r3, #15
 800c3ee:	b25a      	sxtb	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	0a1b      	lsrs	r3, r3, #8
 800c3f4:	b25b      	sxtb	r3, r3
 800c3f6:	f003 030f 	and.w	r3, r3, #15
 800c3fa:	b25b      	sxtb	r3, r3
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	b25b      	sxtb	r3, r3
 800c400:	b2db      	uxtb	r3, r3
 800c402:	697a      	ldr	r2, [r7, #20]
 800c404:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2201      	movs	r2, #1
 800c40a:	70da      	strb	r2, [r3, #3]
			break;
 800c40c:	e057      	b.n	800c4be <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	0a1b      	lsrs	r3, r3, #8
 800c416:	4413      	add	r3, r2
 800c418:	4619      	mov	r1, r3
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f7ff fe7c 	bl	800c118 <move_window>
 800c420:	4603      	mov	r3, r0
 800c422:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c424:	7ffb      	ldrb	r3, [r7, #31]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d146      	bne.n	800c4b8 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	005b      	lsls	r3, r3, #1
 800c434:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c438:	4413      	add	r3, r2
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	b292      	uxth	r2, r2
 800c43e:	4611      	mov	r1, r2
 800c440:	4618      	mov	r0, r3
 800c442:	f7ff fc30 	bl	800bca6 <st_word>
			fs->wflag = 1;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2201      	movs	r2, #1
 800c44a:	70da      	strb	r2, [r3, #3]
			break;
 800c44c:	e037      	b.n	800c4be <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	09db      	lsrs	r3, r3, #7
 800c456:	4413      	add	r3, r2
 800c458:	4619      	mov	r1, r3
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f7ff fe5c 	bl	800c118 <move_window>
 800c460:	4603      	mov	r3, r0
 800c462:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c464:	7ffb      	ldrb	r3, [r7, #31]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d128      	bne.n	800c4bc <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c47e:	4413      	add	r3, r2
 800c480:	4618      	mov	r0, r3
 800c482:	f7ff fbed 	bl	800bc60 <ld_dword>
 800c486:	4603      	mov	r3, r0
 800c488:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c48c:	4323      	orrs	r3, r4
 800c48e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c49e:	4413      	add	r3, r2
 800c4a0:	6879      	ldr	r1, [r7, #4]
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7ff fc1a 	bl	800bcdc <st_dword>
			fs->wflag = 1;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	70da      	strb	r2, [r3, #3]
			break;
 800c4ae:	e006      	b.n	800c4be <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c4b0:	bf00      	nop
 800c4b2:	e004      	b.n	800c4be <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c4b4:	bf00      	nop
 800c4b6:	e002      	b.n	800c4be <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c4b8:	bf00      	nop
 800c4ba:	e000      	b.n	800c4be <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c4bc:	bf00      	nop
		}
	}
	return res;
 800c4be:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3724      	adds	r7, #36	; 0x24
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd90      	pop	{r4, r7, pc}

0800c4c8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b088      	sub	sp, #32
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d904      	bls.n	800c4ee <remove_chain+0x26>
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d301      	bcc.n	800c4f2 <remove_chain+0x2a>
 800c4ee:	2302      	movs	r3, #2
 800c4f0:	e04b      	b.n	800c58a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00c      	beq.n	800c512 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c4f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4fc:	6879      	ldr	r1, [r7, #4]
 800c4fe:	69b8      	ldr	r0, [r7, #24]
 800c500:	f7ff fefb 	bl	800c2fa <put_fat>
 800c504:	4603      	mov	r3, r0
 800c506:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c508:	7ffb      	ldrb	r3, [r7, #31]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d001      	beq.n	800c512 <remove_chain+0x4a>
 800c50e:	7ffb      	ldrb	r3, [r7, #31]
 800c510:	e03b      	b.n	800c58a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c512:	68b9      	ldr	r1, [r7, #8]
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	f7ff fe4b 	bl	800c1b0 <get_fat>
 800c51a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d031      	beq.n	800c586 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d101      	bne.n	800c52c <remove_chain+0x64>
 800c528:	2302      	movs	r3, #2
 800c52a:	e02e      	b.n	800c58a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c532:	d101      	bne.n	800c538 <remove_chain+0x70>
 800c534:	2301      	movs	r3, #1
 800c536:	e028      	b.n	800c58a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c538:	2200      	movs	r2, #0
 800c53a:	68b9      	ldr	r1, [r7, #8]
 800c53c:	69b8      	ldr	r0, [r7, #24]
 800c53e:	f7ff fedc 	bl	800c2fa <put_fat>
 800c542:	4603      	mov	r3, r0
 800c544:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c546:	7ffb      	ldrb	r3, [r7, #31]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d001      	beq.n	800c550 <remove_chain+0x88>
 800c54c:	7ffb      	ldrb	r3, [r7, #31]
 800c54e:	e01c      	b.n	800c58a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	695a      	ldr	r2, [r3, #20]
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	3b02      	subs	r3, #2
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d20b      	bcs.n	800c576 <remove_chain+0xae>
			fs->free_clst++;
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	695b      	ldr	r3, [r3, #20]
 800c562:	1c5a      	adds	r2, r3, #1
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	791b      	ldrb	r3, [r3, #4]
 800c56c:	f043 0301 	orr.w	r3, r3, #1
 800c570:	b2da      	uxtb	r2, r3
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	699b      	ldr	r3, [r3, #24]
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	429a      	cmp	r2, r3
 800c582:	d3c6      	bcc.n	800c512 <remove_chain+0x4a>
 800c584:	e000      	b.n	800c588 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c586:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c588:	2300      	movs	r3, #0
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3720      	adds	r7, #32
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b088      	sub	sp, #32
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10d      	bne.n	800c5c4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	691b      	ldr	r3, [r3, #16]
 800c5ac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d004      	beq.n	800c5be <create_chain+0x2c>
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	699b      	ldr	r3, [r3, #24]
 800c5b8:	69ba      	ldr	r2, [r7, #24]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d31b      	bcc.n	800c5f6 <create_chain+0x64>
 800c5be:	2301      	movs	r3, #1
 800c5c0:	61bb      	str	r3, [r7, #24]
 800c5c2:	e018      	b.n	800c5f6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c5c4:	6839      	ldr	r1, [r7, #0]
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f7ff fdf2 	bl	800c1b0 <get_fat>
 800c5cc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d801      	bhi.n	800c5d8 <create_chain+0x46>
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	e070      	b.n	800c6ba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5de:	d101      	bne.n	800c5e4 <create_chain+0x52>
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	e06a      	b.n	800c6ba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d201      	bcs.n	800c5f2 <create_chain+0x60>
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	e063      	b.n	800c6ba <create_chain+0x128>
		scl = clst;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	69fa      	ldr	r2, [r7, #28]
 800c606:	429a      	cmp	r2, r3
 800c608:	d307      	bcc.n	800c61a <create_chain+0x88>
				ncl = 2;
 800c60a:	2302      	movs	r3, #2
 800c60c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c60e:	69fa      	ldr	r2, [r7, #28]
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	429a      	cmp	r2, r3
 800c614:	d901      	bls.n	800c61a <create_chain+0x88>
 800c616:	2300      	movs	r3, #0
 800c618:	e04f      	b.n	800c6ba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c61a:	69f9      	ldr	r1, [r7, #28]
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f7ff fdc7 	bl	800c1b0 <get_fat>
 800c622:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00e      	beq.n	800c648 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d003      	beq.n	800c638 <create_chain+0xa6>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c636:	d101      	bne.n	800c63c <create_chain+0xaa>
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	e03e      	b.n	800c6ba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c63c:	69fa      	ldr	r2, [r7, #28]
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	429a      	cmp	r2, r3
 800c642:	d1da      	bne.n	800c5fa <create_chain+0x68>
 800c644:	2300      	movs	r3, #0
 800c646:	e038      	b.n	800c6ba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c648:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c64a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c64e:	69f9      	ldr	r1, [r7, #28]
 800c650:	6938      	ldr	r0, [r7, #16]
 800c652:	f7ff fe52 	bl	800c2fa <put_fat>
 800c656:	4603      	mov	r3, r0
 800c658:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c65a:	7dfb      	ldrb	r3, [r7, #23]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d109      	bne.n	800c674 <create_chain+0xe2>
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d006      	beq.n	800c674 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c666:	69fa      	ldr	r2, [r7, #28]
 800c668:	6839      	ldr	r1, [r7, #0]
 800c66a:	6938      	ldr	r0, [r7, #16]
 800c66c:	f7ff fe45 	bl	800c2fa <put_fat>
 800c670:	4603      	mov	r3, r0
 800c672:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c674:	7dfb      	ldrb	r3, [r7, #23]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d116      	bne.n	800c6a8 <create_chain+0x116>
		fs->last_clst = ncl;
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	69fa      	ldr	r2, [r7, #28]
 800c67e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	695a      	ldr	r2, [r3, #20]
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	699b      	ldr	r3, [r3, #24]
 800c688:	3b02      	subs	r3, #2
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d804      	bhi.n	800c698 <create_chain+0x106>
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	695b      	ldr	r3, [r3, #20]
 800c692:	1e5a      	subs	r2, r3, #1
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	791b      	ldrb	r3, [r3, #4]
 800c69c:	f043 0301 	orr.w	r3, r3, #1
 800c6a0:	b2da      	uxtb	r2, r3
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	711a      	strb	r2, [r3, #4]
 800c6a6:	e007      	b.n	800c6b8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c6a8:	7dfb      	ldrb	r3, [r7, #23]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d102      	bne.n	800c6b4 <create_chain+0x122>
 800c6ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6b2:	e000      	b.n	800c6b6 <create_chain+0x124>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c6b8:	69fb      	ldr	r3, [r7, #28]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3720      	adds	r7, #32
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b086      	sub	sp, #24
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6d8:	d204      	bcs.n	800c6e4 <dir_sdi+0x22>
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	f003 031f 	and.w	r3, r3, #31
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d001      	beq.n	800c6e8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	e063      	b.n	800c7b0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d106      	bne.n	800c708 <dir_sdi+0x46>
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d902      	bls.n	800c708 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c706:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d10c      	bne.n	800c728 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	095b      	lsrs	r3, r3, #5
 800c712:	693a      	ldr	r2, [r7, #16]
 800c714:	8912      	ldrh	r2, [r2, #8]
 800c716:	4293      	cmp	r3, r2
 800c718:	d301      	bcc.n	800c71e <dir_sdi+0x5c>
 800c71a:	2302      	movs	r3, #2
 800c71c:	e048      	b.n	800c7b0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	61da      	str	r2, [r3, #28]
 800c726:	e029      	b.n	800c77c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	895b      	ldrh	r3, [r3, #10]
 800c72c:	025b      	lsls	r3, r3, #9
 800c72e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c730:	e019      	b.n	800c766 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6979      	ldr	r1, [r7, #20]
 800c736:	4618      	mov	r0, r3
 800c738:	f7ff fd3a 	bl	800c1b0 <get_fat>
 800c73c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c744:	d101      	bne.n	800c74a <dir_sdi+0x88>
 800c746:	2301      	movs	r3, #1
 800c748:	e032      	b.n	800c7b0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d904      	bls.n	800c75a <dir_sdi+0x98>
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	699b      	ldr	r3, [r3, #24]
 800c754:	697a      	ldr	r2, [r7, #20]
 800c756:	429a      	cmp	r2, r3
 800c758:	d301      	bcc.n	800c75e <dir_sdi+0x9c>
 800c75a:	2302      	movs	r3, #2
 800c75c:	e028      	b.n	800c7b0 <dir_sdi+0xee>
			ofs -= csz;
 800c75e:	683a      	ldr	r2, [r7, #0]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	1ad3      	subs	r3, r2, r3
 800c764:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d2e1      	bcs.n	800c732 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c76e:	6979      	ldr	r1, [r7, #20]
 800c770:	6938      	ldr	r0, [r7, #16]
 800c772:	f7ff fcfe 	bl	800c172 <clust2sect>
 800c776:	4602      	mov	r2, r0
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	69db      	ldr	r3, [r3, #28]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d101      	bne.n	800c78e <dir_sdi+0xcc>
 800c78a:	2302      	movs	r3, #2
 800c78c:	e010      	b.n	800c7b0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	69da      	ldr	r2, [r3, #28]
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	0a5b      	lsrs	r3, r3, #9
 800c796:	441a      	add	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7a8:	441a      	add	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3718      	adds	r7, #24
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	695b      	ldr	r3, [r3, #20]
 800c7cc:	3320      	adds	r3, #32
 800c7ce:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	69db      	ldr	r3, [r3, #28]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d003      	beq.n	800c7e0 <dir_next+0x28>
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7de:	d301      	bcc.n	800c7e4 <dir_next+0x2c>
 800c7e0:	2304      	movs	r3, #4
 800c7e2:	e0aa      	b.n	800c93a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	f040 8098 	bne.w	800c920 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	69db      	ldr	r3, [r3, #28]
 800c7f4:	1c5a      	adds	r2, r3, #1
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	699b      	ldr	r3, [r3, #24]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10b      	bne.n	800c81a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	095b      	lsrs	r3, r3, #5
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	8912      	ldrh	r2, [r2, #8]
 800c80a:	4293      	cmp	r3, r2
 800c80c:	f0c0 8088 	bcc.w	800c920 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	61da      	str	r2, [r3, #28]
 800c816:	2304      	movs	r3, #4
 800c818:	e08f      	b.n	800c93a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	0a5b      	lsrs	r3, r3, #9
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	8952      	ldrh	r2, [r2, #10]
 800c822:	3a01      	subs	r2, #1
 800c824:	4013      	ands	r3, r2
 800c826:	2b00      	cmp	r3, #0
 800c828:	d17a      	bne.n	800c920 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	699b      	ldr	r3, [r3, #24]
 800c830:	4619      	mov	r1, r3
 800c832:	4610      	mov	r0, r2
 800c834:	f7ff fcbc 	bl	800c1b0 <get_fat>
 800c838:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d801      	bhi.n	800c844 <dir_next+0x8c>
 800c840:	2302      	movs	r3, #2
 800c842:	e07a      	b.n	800c93a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c84a:	d101      	bne.n	800c850 <dir_next+0x98>
 800c84c:	2301      	movs	r3, #1
 800c84e:	e074      	b.n	800c93a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	699b      	ldr	r3, [r3, #24]
 800c854:	697a      	ldr	r2, [r7, #20]
 800c856:	429a      	cmp	r2, r3
 800c858:	d358      	bcc.n	800c90c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d104      	bne.n	800c86a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	61da      	str	r2, [r3, #28]
 800c866:	2304      	movs	r3, #4
 800c868:	e067      	b.n	800c93a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	699b      	ldr	r3, [r3, #24]
 800c870:	4619      	mov	r1, r3
 800c872:	4610      	mov	r0, r2
 800c874:	f7ff fe8d 	bl	800c592 <create_chain>
 800c878:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d101      	bne.n	800c884 <dir_next+0xcc>
 800c880:	2307      	movs	r3, #7
 800c882:	e05a      	b.n	800c93a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	2b01      	cmp	r3, #1
 800c888:	d101      	bne.n	800c88e <dir_next+0xd6>
 800c88a:	2302      	movs	r3, #2
 800c88c:	e055      	b.n	800c93a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c894:	d101      	bne.n	800c89a <dir_next+0xe2>
 800c896:	2301      	movs	r3, #1
 800c898:	e04f      	b.n	800c93a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f7ff fbf8 	bl	800c090 <sync_window>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d001      	beq.n	800c8aa <dir_next+0xf2>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e047      	b.n	800c93a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3334      	adds	r3, #52	; 0x34
 800c8ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7ff fa5e 	bl	800bd76 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	613b      	str	r3, [r7, #16]
 800c8be:	6979      	ldr	r1, [r7, #20]
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f7ff fc56 	bl	800c172 <clust2sect>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	631a      	str	r2, [r3, #48]	; 0x30
 800c8cc:	e012      	b.n	800c8f4 <dir_next+0x13c>
						fs->wflag = 1;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	f7ff fbdb 	bl	800c090 <sync_window>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d001      	beq.n	800c8e4 <dir_next+0x12c>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e02a      	b.n	800c93a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	613b      	str	r3, [r7, #16]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ee:	1c5a      	adds	r2, r3, #1
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	631a      	str	r2, [r3, #48]	; 0x30
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	895b      	ldrh	r3, [r3, #10]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d3e6      	bcc.n	800c8ce <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	1ad2      	subs	r2, r2, r3
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c912:	6979      	ldr	r1, [r7, #20]
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f7ff fc2c 	bl	800c172 <clust2sect>
 800c91a:	4602      	mov	r2, r0
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	68ba      	ldr	r2, [r7, #8]
 800c924:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c932:	441a      	add	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c938:	2300      	movs	r3, #0
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3718      	adds	r7, #24
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b086      	sub	sp, #24
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c952:	2100      	movs	r1, #0
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f7ff feb4 	bl	800c6c2 <dir_sdi>
 800c95a:	4603      	mov	r3, r0
 800c95c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d12b      	bne.n	800c9bc <dir_alloc+0x7a>
		n = 0;
 800c964:	2300      	movs	r3, #0
 800c966:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	69db      	ldr	r3, [r3, #28]
 800c96c:	4619      	mov	r1, r3
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f7ff fbd2 	bl	800c118 <move_window>
 800c974:	4603      	mov	r3, r0
 800c976:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c978:	7dfb      	ldrb	r3, [r7, #23]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d11d      	bne.n	800c9ba <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a1b      	ldr	r3, [r3, #32]
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2be5      	cmp	r3, #229	; 0xe5
 800c986:	d004      	beq.n	800c992 <dir_alloc+0x50>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6a1b      	ldr	r3, [r3, #32]
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d107      	bne.n	800c9a2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	3301      	adds	r3, #1
 800c996:	613b      	str	r3, [r7, #16]
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d102      	bne.n	800c9a6 <dir_alloc+0x64>
 800c9a0:	e00c      	b.n	800c9bc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c9a6:	2101      	movs	r1, #1
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7ff ff05 	bl	800c7b8 <dir_next>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c9b2:	7dfb      	ldrb	r3, [r7, #23]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d0d7      	beq.n	800c968 <dir_alloc+0x26>
 800c9b8:	e000      	b.n	800c9bc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c9ba:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c9bc:	7dfb      	ldrb	r3, [r7, #23]
 800c9be:	2b04      	cmp	r3, #4
 800c9c0:	d101      	bne.n	800c9c6 <dir_alloc+0x84>
 800c9c2:	2307      	movs	r3, #7
 800c9c4:	75fb      	strb	r3, [r7, #23]
	return res;
 800c9c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3718      	adds	r7, #24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	331a      	adds	r3, #26
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7ff f926 	bl	800bc30 <ld_word>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	2b03      	cmp	r3, #3
 800c9ee:	d109      	bne.n	800ca04 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	3314      	adds	r3, #20
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7ff f91b 	bl	800bc30 <ld_word>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	041b      	lsls	r3, r3, #16
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	4313      	orrs	r3, r2
 800ca02:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ca04:	68fb      	ldr	r3, [r7, #12]
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b084      	sub	sp, #16
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	60f8      	str	r0, [r7, #12]
 800ca16:	60b9      	str	r1, [r7, #8]
 800ca18:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	331a      	adds	r3, #26
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	b292      	uxth	r2, r2
 800ca22:	4611      	mov	r1, r2
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7ff f93e 	bl	800bca6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	2b03      	cmp	r3, #3
 800ca30:	d109      	bne.n	800ca46 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	f103 0214 	add.w	r2, r3, #20
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	0c1b      	lsrs	r3, r3, #16
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	4619      	mov	r1, r3
 800ca40:	4610      	mov	r0, r2
 800ca42:	f7ff f930 	bl	800bca6 <st_word>
	}
}
 800ca46:	bf00      	nop
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
	...

0800ca50 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ca50:	b590      	push	{r4, r7, lr}
 800ca52:	b087      	sub	sp, #28
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	331a      	adds	r3, #26
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7ff f8e6 	bl	800bc30 <ld_word>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d001      	beq.n	800ca6e <cmp_lfn+0x1e>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	e059      	b.n	800cb22 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca76:	1e5a      	subs	r2, r3, #1
 800ca78:	4613      	mov	r3, r2
 800ca7a:	005b      	lsls	r3, r3, #1
 800ca7c:	4413      	add	r3, r2
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	4413      	add	r3, r2
 800ca82:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ca84:	2301      	movs	r3, #1
 800ca86:	81fb      	strh	r3, [r7, #14]
 800ca88:	2300      	movs	r3, #0
 800ca8a:	613b      	str	r3, [r7, #16]
 800ca8c:	e033      	b.n	800caf6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ca8e:	4a27      	ldr	r2, [pc, #156]	; (800cb2c <cmp_lfn+0xdc>)
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	4413      	add	r3, r2
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	461a      	mov	r2, r3
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7ff f8c7 	bl	800bc30 <ld_word>
 800caa2:	4603      	mov	r3, r0
 800caa4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800caa6:	89fb      	ldrh	r3, [r7, #14]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d01a      	beq.n	800cae2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	2bfe      	cmp	r3, #254	; 0xfe
 800cab0:	d812      	bhi.n	800cad8 <cmp_lfn+0x88>
 800cab2:	89bb      	ldrh	r3, [r7, #12]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f001 fabf 	bl	800e038 <ff_wtoupper>
 800caba:	4603      	mov	r3, r0
 800cabc:	461c      	mov	r4, r3
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	1c5a      	adds	r2, r3, #1
 800cac2:	617a      	str	r2, [r7, #20]
 800cac4:	005b      	lsls	r3, r3, #1
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	4413      	add	r3, r2
 800caca:	881b      	ldrh	r3, [r3, #0]
 800cacc:	4618      	mov	r0, r3
 800cace:	f001 fab3 	bl	800e038 <ff_wtoupper>
 800cad2:	4603      	mov	r3, r0
 800cad4:	429c      	cmp	r4, r3
 800cad6:	d001      	beq.n	800cadc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cad8:	2300      	movs	r3, #0
 800cada:	e022      	b.n	800cb22 <cmp_lfn+0xd2>
			}
			wc = uc;
 800cadc:	89bb      	ldrh	r3, [r7, #12]
 800cade:	81fb      	strh	r3, [r7, #14]
 800cae0:	e006      	b.n	800caf0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cae2:	89bb      	ldrh	r3, [r7, #12]
 800cae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cae8:	4293      	cmp	r3, r2
 800caea:	d001      	beq.n	800caf0 <cmp_lfn+0xa0>
 800caec:	2300      	movs	r3, #0
 800caee:	e018      	b.n	800cb22 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	3301      	adds	r3, #1
 800caf4:	613b      	str	r3, [r7, #16]
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	2b0c      	cmp	r3, #12
 800cafa:	d9c8      	bls.n	800ca8e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d00b      	beq.n	800cb20 <cmp_lfn+0xd0>
 800cb08:	89fb      	ldrh	r3, [r7, #14]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d008      	beq.n	800cb20 <cmp_lfn+0xd0>
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	005b      	lsls	r3, r3, #1
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	4413      	add	r3, r2
 800cb16:	881b      	ldrh	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d001      	beq.n	800cb20 <cmp_lfn+0xd0>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	e000      	b.n	800cb22 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cb20:	2301      	movs	r3, #1
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	371c      	adds	r7, #28
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd90      	pop	{r4, r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	080123d8 	.word	0x080123d8

0800cb30 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b088      	sub	sp, #32
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	4611      	mov	r1, r2
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	460b      	mov	r3, r1
 800cb40:	71fb      	strb	r3, [r7, #7]
 800cb42:	4613      	mov	r3, r2
 800cb44:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	330d      	adds	r3, #13
 800cb4a:	79ba      	ldrb	r2, [r7, #6]
 800cb4c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	330b      	adds	r3, #11
 800cb52:	220f      	movs	r2, #15
 800cb54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	330c      	adds	r3, #12
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	331a      	adds	r3, #26
 800cb62:	2100      	movs	r1, #0
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7ff f89e 	bl	800bca6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cb6a:	79fb      	ldrb	r3, [r7, #7]
 800cb6c:	1e5a      	subs	r2, r3, #1
 800cb6e:	4613      	mov	r3, r2
 800cb70:	005b      	lsls	r3, r3, #1
 800cb72:	4413      	add	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	82fb      	strh	r3, [r7, #22]
 800cb7e:	2300      	movs	r3, #0
 800cb80:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cb82:	8afb      	ldrh	r3, [r7, #22]
 800cb84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d007      	beq.n	800cb9c <put_lfn+0x6c>
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	1c5a      	adds	r2, r3, #1
 800cb90:	61fa      	str	r2, [r7, #28]
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	4413      	add	r3, r2
 800cb98:	881b      	ldrh	r3, [r3, #0]
 800cb9a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800cb9c:	4a17      	ldr	r2, [pc, #92]	; (800cbfc <put_lfn+0xcc>)
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	4413      	add	r3, r2
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	461a      	mov	r2, r3
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	4413      	add	r3, r2
 800cbaa:	8afa      	ldrh	r2, [r7, #22]
 800cbac:	4611      	mov	r1, r2
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7ff f879 	bl	800bca6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cbb4:	8afb      	ldrh	r3, [r7, #22]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d102      	bne.n	800cbc0 <put_lfn+0x90>
 800cbba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbbe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	61bb      	str	r3, [r7, #24]
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	2b0c      	cmp	r3, #12
 800cbca:	d9da      	bls.n	800cb82 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cbcc:	8afb      	ldrh	r3, [r7, #22]
 800cbce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d006      	beq.n	800cbe4 <put_lfn+0xb4>
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	005b      	lsls	r3, r3, #1
 800cbda:	68fa      	ldr	r2, [r7, #12]
 800cbdc:	4413      	add	r3, r2
 800cbde:	881b      	ldrh	r3, [r3, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d103      	bne.n	800cbec <put_lfn+0xbc>
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbea:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	79fa      	ldrb	r2, [r7, #7]
 800cbf0:	701a      	strb	r2, [r3, #0]
}
 800cbf2:	bf00      	nop
 800cbf4:	3720      	adds	r7, #32
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	080123d8 	.word	0x080123d8

0800cc00 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b08c      	sub	sp, #48	; 0x30
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
 800cc0c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cc0e:	220b      	movs	r2, #11
 800cc10:	68b9      	ldr	r1, [r7, #8]
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f7ff f88e 	bl	800bd34 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	2b05      	cmp	r3, #5
 800cc1c:	d929      	bls.n	800cc72 <gen_numname+0x72>
		sr = seq;
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cc22:	e020      	b.n	800cc66 <gen_numname+0x66>
			wc = *lfn++;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	1c9a      	adds	r2, r3, #2
 800cc28:	607a      	str	r2, [r7, #4]
 800cc2a:	881b      	ldrh	r3, [r3, #0]
 800cc2c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800cc2e:	2300      	movs	r3, #0
 800cc30:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc32:	e015      	b.n	800cc60 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	005a      	lsls	r2, r3, #1
 800cc38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc3a:	f003 0301 	and.w	r3, r3, #1
 800cc3e:	4413      	add	r3, r2
 800cc40:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cc42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc44:	085b      	lsrs	r3, r3, #1
 800cc46:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d003      	beq.n	800cc5a <gen_numname+0x5a>
 800cc52:	69fa      	ldr	r2, [r7, #28]
 800cc54:	4b31      	ldr	r3, [pc, #196]	; (800cd1c <gen_numname+0x11c>)
 800cc56:	4053      	eors	r3, r2
 800cc58:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc62:	2b0f      	cmp	r3, #15
 800cc64:	d9e6      	bls.n	800cc34 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	881b      	ldrh	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d1da      	bne.n	800cc24 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cc72:	2307      	movs	r3, #7
 800cc74:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	f003 030f 	and.w	r3, r3, #15
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	3330      	adds	r3, #48	; 0x30
 800cc82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cc86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc8a:	2b39      	cmp	r3, #57	; 0x39
 800cc8c:	d904      	bls.n	800cc98 <gen_numname+0x98>
 800cc8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc92:	3307      	adds	r3, #7
 800cc94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9a:	1e5a      	subs	r2, r3, #1
 800cc9c:	62ba      	str	r2, [r7, #40]	; 0x28
 800cc9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cca2:	4413      	add	r3, r2
 800cca4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cca8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	091b      	lsrs	r3, r3, #4
 800ccb0:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1de      	bne.n	800cc76 <gen_numname+0x76>
	ns[i] = '~';
 800ccb8:	f107 0214 	add.w	r2, r7, #20
 800ccbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbe:	4413      	add	r3, r2
 800ccc0:	227e      	movs	r2, #126	; 0x7e
 800ccc2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	627b      	str	r3, [r7, #36]	; 0x24
 800ccc8:	e002      	b.n	800ccd0 <gen_numname+0xd0>
 800ccca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cccc:	3301      	adds	r3, #1
 800ccce:	627b      	str	r3, [r7, #36]	; 0x24
 800ccd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d205      	bcs.n	800cce4 <gen_numname+0xe4>
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccdc:	4413      	add	r3, r2
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	2b20      	cmp	r3, #32
 800cce2:	d1f2      	bne.n	800ccca <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce6:	2b07      	cmp	r3, #7
 800cce8:	d808      	bhi.n	800ccfc <gen_numname+0xfc>
 800ccea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccec:	1c5a      	adds	r2, r3, #1
 800ccee:	62ba      	str	r2, [r7, #40]	; 0x28
 800ccf0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ccfa:	e000      	b.n	800ccfe <gen_numname+0xfe>
 800ccfc:	2120      	movs	r1, #32
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd00:	1c5a      	adds	r2, r3, #1
 800cd02:	627a      	str	r2, [r7, #36]	; 0x24
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	4413      	add	r3, r2
 800cd08:	460a      	mov	r2, r1
 800cd0a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	2b07      	cmp	r3, #7
 800cd10:	d9e8      	bls.n	800cce4 <gen_numname+0xe4>
}
 800cd12:	bf00      	nop
 800cd14:	3730      	adds	r7, #48	; 0x30
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	00011021 	.word	0x00011021

0800cd20 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cd2c:	230b      	movs	r3, #11
 800cd2e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cd30:	7bfb      	ldrb	r3, [r7, #15]
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	0852      	lsrs	r2, r2, #1
 800cd36:	01db      	lsls	r3, r3, #7
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	b2da      	uxtb	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	1c59      	adds	r1, r3, #1
 800cd40:	6079      	str	r1, [r7, #4]
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	4413      	add	r3, r2
 800cd46:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	60bb      	str	r3, [r7, #8]
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d1ed      	bne.n	800cd30 <sum_sfn+0x10>
	return sum;
 800cd54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3714      	adds	r7, #20
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr

0800cd62 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b086      	sub	sp, #24
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cd70:	2100      	movs	r1, #0
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7ff fca5 	bl	800c6c2 <dir_sdi>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cd7c:	7dfb      	ldrb	r3, [r7, #23]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d001      	beq.n	800cd86 <dir_find+0x24>
 800cd82:	7dfb      	ldrb	r3, [r7, #23]
 800cd84:	e0a9      	b.n	800ceda <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cd86:	23ff      	movs	r3, #255	; 0xff
 800cd88:	753b      	strb	r3, [r7, #20]
 800cd8a:	7d3b      	ldrb	r3, [r7, #20]
 800cd8c:	757b      	strb	r3, [r7, #21]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd94:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	69db      	ldr	r3, [r3, #28]
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	6938      	ldr	r0, [r7, #16]
 800cd9e:	f7ff f9bb 	bl	800c118 <move_window>
 800cda2:	4603      	mov	r3, r0
 800cda4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f040 8090 	bne.w	800cece <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6a1b      	ldr	r3, [r3, #32]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cdb6:	7dbb      	ldrb	r3, [r7, #22]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d102      	bne.n	800cdc2 <dir_find+0x60>
 800cdbc:	2304      	movs	r3, #4
 800cdbe:	75fb      	strb	r3, [r7, #23]
 800cdc0:	e08a      	b.n	800ced8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a1b      	ldr	r3, [r3, #32]
 800cdc6:	330b      	adds	r3, #11
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdce:	73fb      	strb	r3, [r7, #15]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	7bfa      	ldrb	r2, [r7, #15]
 800cdd4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cdd6:	7dbb      	ldrb	r3, [r7, #22]
 800cdd8:	2be5      	cmp	r3, #229	; 0xe5
 800cdda:	d007      	beq.n	800cdec <dir_find+0x8a>
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
 800cdde:	f003 0308 	and.w	r3, r3, #8
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d009      	beq.n	800cdfa <dir_find+0x98>
 800cde6:	7bfb      	ldrb	r3, [r7, #15]
 800cde8:	2b0f      	cmp	r3, #15
 800cdea:	d006      	beq.n	800cdfa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cdec:	23ff      	movs	r3, #255	; 0xff
 800cdee:	757b      	strb	r3, [r7, #21]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cdf6:	631a      	str	r2, [r3, #48]	; 0x30
 800cdf8:	e05e      	b.n	800ceb8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	2b0f      	cmp	r3, #15
 800cdfe:	d136      	bne.n	800ce6e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d154      	bne.n	800ceb8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ce0e:	7dbb      	ldrb	r3, [r7, #22]
 800ce10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00d      	beq.n	800ce34 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6a1b      	ldr	r3, [r3, #32]
 800ce1c:	7b5b      	ldrb	r3, [r3, #13]
 800ce1e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ce20:	7dbb      	ldrb	r3, [r7, #22]
 800ce22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce26:	75bb      	strb	r3, [r7, #22]
 800ce28:	7dbb      	ldrb	r3, [r7, #22]
 800ce2a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	695a      	ldr	r2, [r3, #20]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ce34:	7dba      	ldrb	r2, [r7, #22]
 800ce36:	7d7b      	ldrb	r3, [r7, #21]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d115      	bne.n	800ce68 <dir_find+0x106>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6a1b      	ldr	r3, [r3, #32]
 800ce40:	330d      	adds	r3, #13
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	7d3a      	ldrb	r2, [r7, #20]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d10e      	bne.n	800ce68 <dir_find+0x106>
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	68da      	ldr	r2, [r3, #12]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a1b      	ldr	r3, [r3, #32]
 800ce52:	4619      	mov	r1, r3
 800ce54:	4610      	mov	r0, r2
 800ce56:	f7ff fdfb 	bl	800ca50 <cmp_lfn>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <dir_find+0x106>
 800ce60:	7d7b      	ldrb	r3, [r7, #21]
 800ce62:	3b01      	subs	r3, #1
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	e000      	b.n	800ce6a <dir_find+0x108>
 800ce68:	23ff      	movs	r3, #255	; 0xff
 800ce6a:	757b      	strb	r3, [r7, #21]
 800ce6c:	e024      	b.n	800ceb8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ce6e:	7d7b      	ldrb	r3, [r7, #21]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d109      	bne.n	800ce88 <dir_find+0x126>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6a1b      	ldr	r3, [r3, #32]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7ff ff51 	bl	800cd20 <sum_sfn>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	461a      	mov	r2, r3
 800ce82:	7d3b      	ldrb	r3, [r7, #20]
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d024      	beq.n	800ced2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce8e:	f003 0301 	and.w	r3, r3, #1
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d10a      	bne.n	800ceac <dir_find+0x14a>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a18      	ldr	r0, [r3, #32]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	3324      	adds	r3, #36	; 0x24
 800ce9e:	220b      	movs	r2, #11
 800cea0:	4619      	mov	r1, r3
 800cea2:	f7fe ff82 	bl	800bdaa <mem_cmp>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d014      	beq.n	800ced6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ceac:	23ff      	movs	r3, #255	; 0xff
 800ceae:	757b      	strb	r3, [r7, #21]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ceb6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ceb8:	2100      	movs	r1, #0
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f7ff fc7c 	bl	800c7b8 <dir_next>
 800cec0:	4603      	mov	r3, r0
 800cec2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cec4:	7dfb      	ldrb	r3, [r7, #23]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f43f af65 	beq.w	800cd96 <dir_find+0x34>
 800cecc:	e004      	b.n	800ced8 <dir_find+0x176>
		if (res != FR_OK) break;
 800cece:	bf00      	nop
 800ced0:	e002      	b.n	800ced8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ced2:	bf00      	nop
 800ced4:	e000      	b.n	800ced8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ced6:	bf00      	nop

	return res;
 800ced8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3718      	adds	r7, #24
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
	...

0800cee4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b08c      	sub	sp, #48	; 0x30
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cef8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d001      	beq.n	800cf04 <dir_register+0x20>
 800cf00:	2306      	movs	r3, #6
 800cf02:	e0e0      	b.n	800d0c6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cf04:	2300      	movs	r3, #0
 800cf06:	627b      	str	r3, [r7, #36]	; 0x24
 800cf08:	e002      	b.n	800cf10 <dir_register+0x2c>
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	627b      	str	r3, [r7, #36]	; 0x24
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	68da      	ldr	r2, [r3, #12]
 800cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	4413      	add	r3, r2
 800cf1a:	881b      	ldrh	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d1f4      	bne.n	800cf0a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cf26:	f107 030c 	add.w	r3, r7, #12
 800cf2a:	220c      	movs	r2, #12
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fe ff01 	bl	800bd34 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cf32:	7dfb      	ldrb	r3, [r7, #23]
 800cf34:	f003 0301 	and.w	r3, r3, #1
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d032      	beq.n	800cfa2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2240      	movs	r2, #64	; 0x40
 800cf40:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cf44:	2301      	movs	r3, #1
 800cf46:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf48:	e016      	b.n	800cf78 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	68da      	ldr	r2, [r3, #12]
 800cf54:	f107 010c 	add.w	r1, r7, #12
 800cf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5a:	f7ff fe51 	bl	800cc00 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7ff feff 	bl	800cd62 <dir_find>
 800cf64:	4603      	mov	r3, r0
 800cf66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cf6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d106      	bne.n	800cf80 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf74:	3301      	adds	r3, #1
 800cf76:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7a:	2b63      	cmp	r3, #99	; 0x63
 800cf7c:	d9e5      	bls.n	800cf4a <dir_register+0x66>
 800cf7e:	e000      	b.n	800cf82 <dir_register+0x9e>
			if (res != FR_OK) break;
 800cf80:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf84:	2b64      	cmp	r3, #100	; 0x64
 800cf86:	d101      	bne.n	800cf8c <dir_register+0xa8>
 800cf88:	2307      	movs	r3, #7
 800cf8a:	e09c      	b.n	800d0c6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cf8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf90:	2b04      	cmp	r3, #4
 800cf92:	d002      	beq.n	800cf9a <dir_register+0xb6>
 800cf94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf98:	e095      	b.n	800d0c6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cf9a:	7dfa      	ldrb	r2, [r7, #23]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cfa2:	7dfb      	ldrb	r3, [r7, #23]
 800cfa4:	f003 0302 	and.w	r3, r3, #2
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d007      	beq.n	800cfbc <dir_register+0xd8>
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	330c      	adds	r3, #12
 800cfb0:	4a47      	ldr	r2, [pc, #284]	; (800d0d0 <dir_register+0x1ec>)
 800cfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfb6:	089b      	lsrs	r3, r3, #2
 800cfb8:	3301      	adds	r3, #1
 800cfba:	e000      	b.n	800cfbe <dir_register+0xda>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cfc0:	6a39      	ldr	r1, [r7, #32]
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7ff fcbd 	bl	800c942 <dir_alloc>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cfce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d148      	bne.n	800d068 <dir_register+0x184>
 800cfd6:	6a3b      	ldr	r3, [r7, #32]
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	623b      	str	r3, [r7, #32]
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d042      	beq.n	800d068 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	695a      	ldr	r2, [r3, #20]
 800cfe6:	6a3b      	ldr	r3, [r7, #32]
 800cfe8:	015b      	lsls	r3, r3, #5
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	4619      	mov	r1, r3
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f7ff fb67 	bl	800c6c2 <dir_sdi>
 800cff4:	4603      	mov	r3, r0
 800cff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cffa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d132      	bne.n	800d068 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	3324      	adds	r3, #36	; 0x24
 800d006:	4618      	mov	r0, r3
 800d008:	f7ff fe8a 	bl	800cd20 <sum_sfn>
 800d00c:	4603      	mov	r3, r0
 800d00e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	69db      	ldr	r3, [r3, #28]
 800d014:	4619      	mov	r1, r3
 800d016:	69f8      	ldr	r0, [r7, #28]
 800d018:	f7ff f87e 	bl	800c118 <move_window>
 800d01c:	4603      	mov	r3, r0
 800d01e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d022:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d026:	2b00      	cmp	r3, #0
 800d028:	d11d      	bne.n	800d066 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	68d8      	ldr	r0, [r3, #12]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6a19      	ldr	r1, [r3, #32]
 800d032:	6a3b      	ldr	r3, [r7, #32]
 800d034:	b2da      	uxtb	r2, r3
 800d036:	7efb      	ldrb	r3, [r7, #27]
 800d038:	f7ff fd7a 	bl	800cb30 <put_lfn>
				fs->wflag = 1;
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	2201      	movs	r2, #1
 800d040:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d042:	2100      	movs	r1, #0
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7ff fbb7 	bl	800c7b8 <dir_next>
 800d04a:	4603      	mov	r3, r0
 800d04c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d054:	2b00      	cmp	r3, #0
 800d056:	d107      	bne.n	800d068 <dir_register+0x184>
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	3b01      	subs	r3, #1
 800d05c:	623b      	str	r3, [r7, #32]
 800d05e:	6a3b      	ldr	r3, [r7, #32]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1d5      	bne.n	800d010 <dir_register+0x12c>
 800d064:	e000      	b.n	800d068 <dir_register+0x184>
				if (res != FR_OK) break;
 800d066:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d128      	bne.n	800d0c2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	69db      	ldr	r3, [r3, #28]
 800d074:	4619      	mov	r1, r3
 800d076:	69f8      	ldr	r0, [r7, #28]
 800d078:	f7ff f84e 	bl	800c118 <move_window>
 800d07c:	4603      	mov	r3, r0
 800d07e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d086:	2b00      	cmp	r3, #0
 800d088:	d11b      	bne.n	800d0c2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a1b      	ldr	r3, [r3, #32]
 800d08e:	2220      	movs	r2, #32
 800d090:	2100      	movs	r1, #0
 800d092:	4618      	mov	r0, r3
 800d094:	f7fe fe6f 	bl	800bd76 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6a18      	ldr	r0, [r3, #32]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	3324      	adds	r3, #36	; 0x24
 800d0a0:	220b      	movs	r2, #11
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	f7fe fe46 	bl	800bd34 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6a1b      	ldr	r3, [r3, #32]
 800d0b2:	330c      	adds	r3, #12
 800d0b4:	f002 0218 	and.w	r2, r2, #24
 800d0b8:	b2d2      	uxtb	r2, r2
 800d0ba:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d0c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3730      	adds	r7, #48	; 0x30
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	4ec4ec4f 	.word	0x4ec4ec4f

0800d0d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b08a      	sub	sp, #40	; 0x28
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	613b      	str	r3, [r7, #16]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	60fb      	str	r3, [r7, #12]
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	617b      	str	r3, [r7, #20]
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	1c5a      	adds	r2, r3, #1
 800d0f8:	61ba      	str	r2, [r7, #24]
 800d0fa:	693a      	ldr	r2, [r7, #16]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d104:	2b1f      	cmp	r3, #31
 800d106:	d940      	bls.n	800d18a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d10a:	2b2f      	cmp	r3, #47	; 0x2f
 800d10c:	d006      	beq.n	800d11c <create_name+0x48>
 800d10e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d110:	2b5c      	cmp	r3, #92	; 0x5c
 800d112:	d110      	bne.n	800d136 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d114:	e002      	b.n	800d11c <create_name+0x48>
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	3301      	adds	r3, #1
 800d11a:	61bb      	str	r3, [r7, #24]
 800d11c:	693a      	ldr	r2, [r7, #16]
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	4413      	add	r3, r2
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	2b2f      	cmp	r3, #47	; 0x2f
 800d126:	d0f6      	beq.n	800d116 <create_name+0x42>
 800d128:	693a      	ldr	r2, [r7, #16]
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	4413      	add	r3, r2
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	2b5c      	cmp	r3, #92	; 0x5c
 800d132:	d0f0      	beq.n	800d116 <create_name+0x42>
			break;
 800d134:	e02a      	b.n	800d18c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	2bfe      	cmp	r3, #254	; 0xfe
 800d13a:	d901      	bls.n	800d140 <create_name+0x6c>
 800d13c:	2306      	movs	r3, #6
 800d13e:	e177      	b.n	800d430 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d142:	b2db      	uxtb	r3, r3
 800d144:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d148:	2101      	movs	r1, #1
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 ff38 	bl	800dfc0 <ff_convert>
 800d150:	4603      	mov	r3, r0
 800d152:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d156:	2b00      	cmp	r3, #0
 800d158:	d101      	bne.n	800d15e <create_name+0x8a>
 800d15a:	2306      	movs	r3, #6
 800d15c:	e168      	b.n	800d430 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d15e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d160:	2b7f      	cmp	r3, #127	; 0x7f
 800d162:	d809      	bhi.n	800d178 <create_name+0xa4>
 800d164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d166:	4619      	mov	r1, r3
 800d168:	48b3      	ldr	r0, [pc, #716]	; (800d438 <create_name+0x364>)
 800d16a:	f7fe fe45 	bl	800bdf8 <chk_chr>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d001      	beq.n	800d178 <create_name+0xa4>
 800d174:	2306      	movs	r3, #6
 800d176:	e15b      	b.n	800d430 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	1c5a      	adds	r2, r3, #1
 800d17c:	617a      	str	r2, [r7, #20]
 800d17e:	005b      	lsls	r3, r3, #1
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	4413      	add	r3, r2
 800d184:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d186:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d188:	e7b4      	b.n	800d0f4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d18a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d18c:	693a      	ldr	r2, [r7, #16]
 800d18e:	69bb      	ldr	r3, [r7, #24]
 800d190:	441a      	add	r2, r3
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d198:	2b1f      	cmp	r3, #31
 800d19a:	d801      	bhi.n	800d1a0 <create_name+0xcc>
 800d19c:	2304      	movs	r3, #4
 800d19e:	e000      	b.n	800d1a2 <create_name+0xce>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d1a6:	e011      	b.n	800d1cc <create_name+0xf8>
		w = lfn[di - 1];
 800d1a8:	697a      	ldr	r2, [r7, #20]
 800d1aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d1ae:	4413      	add	r3, r2
 800d1b0:	005b      	lsls	r3, r3, #1
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	881b      	ldrh	r3, [r3, #0]
 800d1b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d1ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1bc:	2b20      	cmp	r3, #32
 800d1be:	d002      	beq.n	800d1c6 <create_name+0xf2>
 800d1c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1c2:	2b2e      	cmp	r3, #46	; 0x2e
 800d1c4:	d106      	bne.n	800d1d4 <create_name+0x100>
		di--;
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	3b01      	subs	r3, #1
 800d1ca:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1ea      	bne.n	800d1a8 <create_name+0xd4>
 800d1d2:	e000      	b.n	800d1d6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d1d4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	005b      	lsls	r3, r3, #1
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	4413      	add	r3, r2
 800d1de:	2200      	movs	r2, #0
 800d1e0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <create_name+0x118>
 800d1e8:	2306      	movs	r3, #6
 800d1ea:	e121      	b.n	800d430 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	3324      	adds	r3, #36	; 0x24
 800d1f0:	220b      	movs	r2, #11
 800d1f2:	2120      	movs	r1, #32
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7fe fdbe 	bl	800bd76 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	61bb      	str	r3, [r7, #24]
 800d1fe:	e002      	b.n	800d206 <create_name+0x132>
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	3301      	adds	r3, #1
 800d204:	61bb      	str	r3, [r7, #24]
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	005b      	lsls	r3, r3, #1
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	4413      	add	r3, r2
 800d20e:	881b      	ldrh	r3, [r3, #0]
 800d210:	2b20      	cmp	r3, #32
 800d212:	d0f5      	beq.n	800d200 <create_name+0x12c>
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	005b      	lsls	r3, r3, #1
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	4413      	add	r3, r2
 800d21c:	881b      	ldrh	r3, [r3, #0]
 800d21e:	2b2e      	cmp	r3, #46	; 0x2e
 800d220:	d0ee      	beq.n	800d200 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d009      	beq.n	800d23c <create_name+0x168>
 800d228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d22c:	f043 0303 	orr.w	r3, r3, #3
 800d230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d234:	e002      	b.n	800d23c <create_name+0x168>
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	3b01      	subs	r3, #1
 800d23a:	617b      	str	r3, [r7, #20]
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d009      	beq.n	800d256 <create_name+0x182>
 800d242:	697a      	ldr	r2, [r7, #20]
 800d244:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d248:	4413      	add	r3, r2
 800d24a:	005b      	lsls	r3, r3, #1
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	4413      	add	r3, r2
 800d250:	881b      	ldrh	r3, [r3, #0]
 800d252:	2b2e      	cmp	r3, #46	; 0x2e
 800d254:	d1ef      	bne.n	800d236 <create_name+0x162>

	i = b = 0; ni = 8;
 800d256:	2300      	movs	r3, #0
 800d258:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d25c:	2300      	movs	r3, #0
 800d25e:	623b      	str	r3, [r7, #32]
 800d260:	2308      	movs	r3, #8
 800d262:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	1c5a      	adds	r2, r3, #1
 800d268:	61ba      	str	r2, [r7, #24]
 800d26a:	005b      	lsls	r3, r3, #1
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	4413      	add	r3, r2
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d276:	2b00      	cmp	r3, #0
 800d278:	f000 8090 	beq.w	800d39c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d27c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d27e:	2b20      	cmp	r3, #32
 800d280:	d006      	beq.n	800d290 <create_name+0x1bc>
 800d282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d284:	2b2e      	cmp	r3, #46	; 0x2e
 800d286:	d10a      	bne.n	800d29e <create_name+0x1ca>
 800d288:	69ba      	ldr	r2, [r7, #24]
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d006      	beq.n	800d29e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d294:	f043 0303 	orr.w	r3, r3, #3
 800d298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d29c:	e07d      	b.n	800d39a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d29e:	6a3a      	ldr	r2, [r7, #32]
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d203      	bcs.n	800d2ae <create_name+0x1da>
 800d2a6:	69ba      	ldr	r2, [r7, #24]
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d123      	bne.n	800d2f6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	2b0b      	cmp	r3, #11
 800d2b2:	d106      	bne.n	800d2c2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d2b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2b8:	f043 0303 	orr.w	r3, r3, #3
 800d2bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2c0:	e06f      	b.n	800d3a2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d2c2:	69ba      	ldr	r2, [r7, #24]
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d005      	beq.n	800d2d6 <create_name+0x202>
 800d2ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2ce:	f043 0303 	orr.w	r3, r3, #3
 800d2d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d2d6:	69ba      	ldr	r2, [r7, #24]
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d860      	bhi.n	800d3a0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	61bb      	str	r3, [r7, #24]
 800d2e2:	2308      	movs	r3, #8
 800d2e4:	623b      	str	r3, [r7, #32]
 800d2e6:	230b      	movs	r3, #11
 800d2e8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d2ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d2f4:	e051      	b.n	800d39a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d2f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2f8:	2b7f      	cmp	r3, #127	; 0x7f
 800d2fa:	d914      	bls.n	800d326 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d2fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2fe:	2100      	movs	r1, #0
 800d300:	4618      	mov	r0, r3
 800d302:	f000 fe5d 	bl	800dfc0 <ff_convert>
 800d306:	4603      	mov	r3, r0
 800d308:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d30a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d004      	beq.n	800d31a <create_name+0x246>
 800d310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d312:	3b80      	subs	r3, #128	; 0x80
 800d314:	4a49      	ldr	r2, [pc, #292]	; (800d43c <create_name+0x368>)
 800d316:	5cd3      	ldrb	r3, [r2, r3]
 800d318:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d31a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d31e:	f043 0302 	orr.w	r3, r3, #2
 800d322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d007      	beq.n	800d33c <create_name+0x268>
 800d32c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d32e:	4619      	mov	r1, r3
 800d330:	4843      	ldr	r0, [pc, #268]	; (800d440 <create_name+0x36c>)
 800d332:	f7fe fd61 	bl	800bdf8 <chk_chr>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d008      	beq.n	800d34e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d33c:	235f      	movs	r3, #95	; 0x5f
 800d33e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d344:	f043 0303 	orr.w	r3, r3, #3
 800d348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d34c:	e01b      	b.n	800d386 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d34e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d350:	2b40      	cmp	r3, #64	; 0x40
 800d352:	d909      	bls.n	800d368 <create_name+0x294>
 800d354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d356:	2b5a      	cmp	r3, #90	; 0x5a
 800d358:	d806      	bhi.n	800d368 <create_name+0x294>
					b |= 2;
 800d35a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d35e:	f043 0302 	orr.w	r3, r3, #2
 800d362:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d366:	e00e      	b.n	800d386 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d36a:	2b60      	cmp	r3, #96	; 0x60
 800d36c:	d90b      	bls.n	800d386 <create_name+0x2b2>
 800d36e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d370:	2b7a      	cmp	r3, #122	; 0x7a
 800d372:	d808      	bhi.n	800d386 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d374:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d378:	f043 0301 	orr.w	r3, r3, #1
 800d37c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d380:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d382:	3b20      	subs	r3, #32
 800d384:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d386:	6a3b      	ldr	r3, [r7, #32]
 800d388:	1c5a      	adds	r2, r3, #1
 800d38a:	623a      	str	r2, [r7, #32]
 800d38c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d38e:	b2d1      	uxtb	r1, r2
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	4413      	add	r3, r2
 800d394:	460a      	mov	r2, r1
 800d396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d39a:	e763      	b.n	800d264 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d39c:	bf00      	nop
 800d39e:	e000      	b.n	800d3a2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800d3a0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d3a8:	2be5      	cmp	r3, #229	; 0xe5
 800d3aa:	d103      	bne.n	800d3b4 <create_name+0x2e0>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2205      	movs	r2, #5
 800d3b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	2b08      	cmp	r3, #8
 800d3b8:	d104      	bne.n	800d3c4 <create_name+0x2f0>
 800d3ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d3c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3c8:	f003 030c 	and.w	r3, r3, #12
 800d3cc:	2b0c      	cmp	r3, #12
 800d3ce:	d005      	beq.n	800d3dc <create_name+0x308>
 800d3d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3d4:	f003 0303 	and.w	r3, r3, #3
 800d3d8:	2b03      	cmp	r3, #3
 800d3da:	d105      	bne.n	800d3e8 <create_name+0x314>
 800d3dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3e0:	f043 0302 	orr.w	r3, r3, #2
 800d3e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3ec:	f003 0302 	and.w	r3, r3, #2
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d117      	bne.n	800d424 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d3f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3f8:	f003 0303 	and.w	r3, r3, #3
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d105      	bne.n	800d40c <create_name+0x338>
 800d400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d404:	f043 0310 	orr.w	r3, r3, #16
 800d408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d40c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d410:	f003 030c 	and.w	r3, r3, #12
 800d414:	2b04      	cmp	r3, #4
 800d416:	d105      	bne.n	800d424 <create_name+0x350>
 800d418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d41c:	f043 0308 	orr.w	r3, r3, #8
 800d420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d42a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d42e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d430:	4618      	mov	r0, r3
 800d432:	3728      	adds	r7, #40	; 0x28
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	08012308 	.word	0x08012308
 800d43c:	08012358 	.word	0x08012358
 800d440:	08012314 	.word	0x08012314

0800d444 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b086      	sub	sp, #24
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d458:	e002      	b.n	800d460 <follow_path+0x1c>
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	3301      	adds	r3, #1
 800d45e:	603b      	str	r3, [r7, #0]
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b2f      	cmp	r3, #47	; 0x2f
 800d466:	d0f8      	beq.n	800d45a <follow_path+0x16>
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	2b5c      	cmp	r3, #92	; 0x5c
 800d46e:	d0f4      	beq.n	800d45a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	2200      	movs	r2, #0
 800d474:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	2b1f      	cmp	r3, #31
 800d47c:	d80a      	bhi.n	800d494 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2280      	movs	r2, #128	; 0x80
 800d482:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d486:	2100      	movs	r1, #0
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f7ff f91a 	bl	800c6c2 <dir_sdi>
 800d48e:	4603      	mov	r3, r0
 800d490:	75fb      	strb	r3, [r7, #23]
 800d492:	e043      	b.n	800d51c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d494:	463b      	mov	r3, r7
 800d496:	4619      	mov	r1, r3
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7ff fe1b 	bl	800d0d4 <create_name>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d4a2:	7dfb      	ldrb	r3, [r7, #23]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d134      	bne.n	800d512 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7ff fc5a 	bl	800cd62 <dir_find>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4b8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d4ba:	7dfb      	ldrb	r3, [r7, #23]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00a      	beq.n	800d4d6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d4c0:	7dfb      	ldrb	r3, [r7, #23]
 800d4c2:	2b04      	cmp	r3, #4
 800d4c4:	d127      	bne.n	800d516 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d4c6:	7afb      	ldrb	r3, [r7, #11]
 800d4c8:	f003 0304 	and.w	r3, r3, #4
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d122      	bne.n	800d516 <follow_path+0xd2>
 800d4d0:	2305      	movs	r3, #5
 800d4d2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d4d4:	e01f      	b.n	800d516 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d4d6:	7afb      	ldrb	r3, [r7, #11]
 800d4d8:	f003 0304 	and.w	r3, r3, #4
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d11c      	bne.n	800d51a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	799b      	ldrb	r3, [r3, #6]
 800d4e4:	f003 0310 	and.w	r3, r3, #16
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d102      	bne.n	800d4f2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d4ec:	2305      	movs	r3, #5
 800d4ee:	75fb      	strb	r3, [r7, #23]
 800d4f0:	e014      	b.n	800d51c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	695b      	ldr	r3, [r3, #20]
 800d4fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d500:	4413      	add	r3, r2
 800d502:	4619      	mov	r1, r3
 800d504:	68f8      	ldr	r0, [r7, #12]
 800d506:	f7ff fa63 	bl	800c9d0 <ld_clust>
 800d50a:	4602      	mov	r2, r0
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d510:	e7c0      	b.n	800d494 <follow_path+0x50>
			if (res != FR_OK) break;
 800d512:	bf00      	nop
 800d514:	e002      	b.n	800d51c <follow_path+0xd8>
				break;
 800d516:	bf00      	nop
 800d518:	e000      	b.n	800d51c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d51a:	bf00      	nop
			}
		}
	}

	return res;
 800d51c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3718      	adds	r7, #24
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d526:	b480      	push	{r7}
 800d528:	b087      	sub	sp, #28
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d52e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d532:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d031      	beq.n	800d5a0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	617b      	str	r3, [r7, #20]
 800d542:	e002      	b.n	800d54a <get_ldnumber+0x24>
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	3301      	adds	r3, #1
 800d548:	617b      	str	r3, [r7, #20]
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	2b1f      	cmp	r3, #31
 800d550:	d903      	bls.n	800d55a <get_ldnumber+0x34>
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	2b3a      	cmp	r3, #58	; 0x3a
 800d558:	d1f4      	bne.n	800d544 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	2b3a      	cmp	r3, #58	; 0x3a
 800d560:	d11c      	bne.n	800d59c <get_ldnumber+0x76>
			tp = *path;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	1c5a      	adds	r2, r3, #1
 800d56c:	60fa      	str	r2, [r7, #12]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	3b30      	subs	r3, #48	; 0x30
 800d572:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	2b09      	cmp	r3, #9
 800d578:	d80e      	bhi.n	800d598 <get_ldnumber+0x72>
 800d57a:	68fa      	ldr	r2, [r7, #12]
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	429a      	cmp	r2, r3
 800d580:	d10a      	bne.n	800d598 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d107      	bne.n	800d598 <get_ldnumber+0x72>
					vol = (int)i;
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	3301      	adds	r3, #1
 800d590:	617b      	str	r3, [r7, #20]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	697a      	ldr	r2, [r7, #20]
 800d596:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	e002      	b.n	800d5a2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d59c:	2300      	movs	r3, #0
 800d59e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d5a0:	693b      	ldr	r3, [r7, #16]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	371c      	adds	r7, #28
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr
	...

0800d5b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	70da      	strb	r2, [r3, #3]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5c6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d5c8:	6839      	ldr	r1, [r7, #0]
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f7fe fda4 	bl	800c118 <move_window>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d001      	beq.n	800d5da <check_fs+0x2a>
 800d5d6:	2304      	movs	r3, #4
 800d5d8:	e038      	b.n	800d64c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	3334      	adds	r3, #52	; 0x34
 800d5de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7fe fb24 	bl	800bc30 <ld_word>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d001      	beq.n	800d5f8 <check_fs+0x48>
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	e029      	b.n	800d64c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d5fe:	2be9      	cmp	r3, #233	; 0xe9
 800d600:	d009      	beq.n	800d616 <check_fs+0x66>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d608:	2beb      	cmp	r3, #235	; 0xeb
 800d60a:	d11e      	bne.n	800d64a <check_fs+0x9a>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d612:	2b90      	cmp	r3, #144	; 0x90
 800d614:	d119      	bne.n	800d64a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	3334      	adds	r3, #52	; 0x34
 800d61a:	3336      	adds	r3, #54	; 0x36
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fe fb1f 	bl	800bc60 <ld_dword>
 800d622:	4603      	mov	r3, r0
 800d624:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d628:	4a0a      	ldr	r2, [pc, #40]	; (800d654 <check_fs+0xa4>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d101      	bne.n	800d632 <check_fs+0x82>
 800d62e:	2300      	movs	r3, #0
 800d630:	e00c      	b.n	800d64c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	3334      	adds	r3, #52	; 0x34
 800d636:	3352      	adds	r3, #82	; 0x52
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fe fb11 	bl	800bc60 <ld_dword>
 800d63e:	4602      	mov	r2, r0
 800d640:	4b05      	ldr	r3, [pc, #20]	; (800d658 <check_fs+0xa8>)
 800d642:	429a      	cmp	r2, r3
 800d644:	d101      	bne.n	800d64a <check_fs+0x9a>
 800d646:	2300      	movs	r3, #0
 800d648:	e000      	b.n	800d64c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d64a:	2302      	movs	r3, #2
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	00544146 	.word	0x00544146
 800d658:	33544146 	.word	0x33544146

0800d65c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b096      	sub	sp, #88	; 0x58
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	4613      	mov	r3, r2
 800d668:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	2200      	movs	r2, #0
 800d66e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f7ff ff58 	bl	800d526 <get_ldnumber>
 800d676:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	da01      	bge.n	800d682 <find_volume+0x26>
 800d67e:	230b      	movs	r3, #11
 800d680:	e231      	b.n	800dae6 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d682:	4aa8      	ldr	r2, [pc, #672]	; (800d924 <find_volume+0x2c8>)
 800d684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d68a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d101      	bne.n	800d696 <find_volume+0x3a>
 800d692:	230c      	movs	r3, #12
 800d694:	e227      	b.n	800dae6 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d69a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d69c:	79fb      	ldrb	r3, [r7, #7]
 800d69e:	f023 0301 	bic.w	r3, r3, #1
 800d6a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d01a      	beq.n	800d6e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ae:	785b      	ldrb	r3, [r3, #1]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fe fa3d 	bl	800bb30 <disk_status>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d6bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6c0:	f003 0301 	and.w	r3, r3, #1
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10c      	bne.n	800d6e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d6c8:	79fb      	ldrb	r3, [r7, #7]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d007      	beq.n	800d6de <find_volume+0x82>
 800d6ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6d2:	f003 0304 	and.w	r3, r3, #4
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d001      	beq.n	800d6de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d6da:	230a      	movs	r3, #10
 800d6dc:	e203      	b.n	800dae6 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e201      	b.n	800dae6 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ea:	b2da      	uxtb	r2, r3
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f2:	785b      	ldrb	r3, [r3, #1]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fe fa35 	bl	800bb64 <disk_initialize>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d700:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d704:	f003 0301 	and.w	r3, r3, #1
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d70c:	2303      	movs	r3, #3
 800d70e:	e1ea      	b.n	800dae6 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d710:	79fb      	ldrb	r3, [r7, #7]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d007      	beq.n	800d726 <find_volume+0xca>
 800d716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d71a:	f003 0304 	and.w	r3, r3, #4
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d001      	beq.n	800d726 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d722:	230a      	movs	r3, #10
 800d724:	e1df      	b.n	800dae6 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d726:	2300      	movs	r3, #0
 800d728:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d72a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d72c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d72e:	f7ff ff3f 	bl	800d5b0 <check_fs>
 800d732:	4603      	mov	r3, r0
 800d734:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d738:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d73c:	2b02      	cmp	r3, #2
 800d73e:	d14b      	bne.n	800d7d8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d740:	2300      	movs	r3, #0
 800d742:	643b      	str	r3, [r7, #64]	; 0x40
 800d744:	e01f      	b.n	800d786 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d748:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d74e:	011b      	lsls	r3, r3, #4
 800d750:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d754:	4413      	add	r3, r2
 800d756:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75a:	3304      	adds	r3, #4
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d006      	beq.n	800d770 <find_volume+0x114>
 800d762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d764:	3308      	adds	r3, #8
 800d766:	4618      	mov	r0, r3
 800d768:	f7fe fa7a 	bl	800bc60 <ld_dword>
 800d76c:	4602      	mov	r2, r0
 800d76e:	e000      	b.n	800d772 <find_volume+0x116>
 800d770:	2200      	movs	r2, #0
 800d772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d77a:	440b      	add	r3, r1
 800d77c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d782:	3301      	adds	r3, #1
 800d784:	643b      	str	r3, [r7, #64]	; 0x40
 800d786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d788:	2b03      	cmp	r3, #3
 800d78a:	d9dc      	bls.n	800d746 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d78c:	2300      	movs	r3, #0
 800d78e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d792:	2b00      	cmp	r3, #0
 800d794:	d002      	beq.n	800d79c <find_volume+0x140>
 800d796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d798:	3b01      	subs	r3, #1
 800d79a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d79c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d7a4:	4413      	add	r3, r2
 800d7a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d7aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d7ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d005      	beq.n	800d7be <find_volume+0x162>
 800d7b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d7b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7b6:	f7ff fefb 	bl	800d5b0 <check_fs>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	e000      	b.n	800d7c0 <find_volume+0x164>
 800d7be:	2303      	movs	r3, #3
 800d7c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d7c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d905      	bls.n	800d7d8 <find_volume+0x17c>
 800d7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	643b      	str	r3, [r7, #64]	; 0x40
 800d7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7d4:	2b03      	cmp	r3, #3
 800d7d6:	d9e1      	bls.n	800d79c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d7d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7dc:	2b04      	cmp	r3, #4
 800d7de:	d101      	bne.n	800d7e4 <find_volume+0x188>
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e180      	b.n	800dae6 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d7e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d901      	bls.n	800d7f0 <find_volume+0x194>
 800d7ec:	230d      	movs	r3, #13
 800d7ee:	e17a      	b.n	800dae6 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f2:	3334      	adds	r3, #52	; 0x34
 800d7f4:	330b      	adds	r3, #11
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7fe fa1a 	bl	800bc30 <ld_word>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d802:	d001      	beq.n	800d808 <find_volume+0x1ac>
 800d804:	230d      	movs	r3, #13
 800d806:	e16e      	b.n	800dae6 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80a:	3334      	adds	r3, #52	; 0x34
 800d80c:	3316      	adds	r3, #22
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fe fa0e 	bl	800bc30 <ld_word>
 800d814:	4603      	mov	r3, r0
 800d816:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d106      	bne.n	800d82c <find_volume+0x1d0>
 800d81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d820:	3334      	adds	r3, #52	; 0x34
 800d822:	3324      	adds	r3, #36	; 0x24
 800d824:	4618      	mov	r0, r3
 800d826:	f7fe fa1b 	bl	800bc60 <ld_dword>
 800d82a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d830:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d834:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83e:	789b      	ldrb	r3, [r3, #2]
 800d840:	2b01      	cmp	r3, #1
 800d842:	d005      	beq.n	800d850 <find_volume+0x1f4>
 800d844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d846:	789b      	ldrb	r3, [r3, #2]
 800d848:	2b02      	cmp	r3, #2
 800d84a:	d001      	beq.n	800d850 <find_volume+0x1f4>
 800d84c:	230d      	movs	r3, #13
 800d84e:	e14a      	b.n	800dae6 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d852:	789b      	ldrb	r3, [r3, #2]
 800d854:	461a      	mov	r2, r3
 800d856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d858:	fb02 f303 	mul.w	r3, r2, r3
 800d85c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d864:	b29a      	uxth	r2, r3
 800d866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d868:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86c:	895b      	ldrh	r3, [r3, #10]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d008      	beq.n	800d884 <find_volume+0x228>
 800d872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d874:	895b      	ldrh	r3, [r3, #10]
 800d876:	461a      	mov	r2, r3
 800d878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87a:	895b      	ldrh	r3, [r3, #10]
 800d87c:	3b01      	subs	r3, #1
 800d87e:	4013      	ands	r3, r2
 800d880:	2b00      	cmp	r3, #0
 800d882:	d001      	beq.n	800d888 <find_volume+0x22c>
 800d884:	230d      	movs	r3, #13
 800d886:	e12e      	b.n	800dae6 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88a:	3334      	adds	r3, #52	; 0x34
 800d88c:	3311      	adds	r3, #17
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fe f9ce 	bl	800bc30 <ld_word>
 800d894:	4603      	mov	r3, r0
 800d896:	461a      	mov	r2, r3
 800d898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89e:	891b      	ldrh	r3, [r3, #8]
 800d8a0:	f003 030f 	and.w	r3, r3, #15
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d001      	beq.n	800d8ae <find_volume+0x252>
 800d8aa:	230d      	movs	r3, #13
 800d8ac:	e11b      	b.n	800dae6 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b0:	3334      	adds	r3, #52	; 0x34
 800d8b2:	3313      	adds	r3, #19
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7fe f9bb 	bl	800bc30 <ld_word>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d8be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d106      	bne.n	800d8d2 <find_volume+0x276>
 800d8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c6:	3334      	adds	r3, #52	; 0x34
 800d8c8:	3320      	adds	r3, #32
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fe f9c8 	bl	800bc60 <ld_dword>
 800d8d0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d4:	3334      	adds	r3, #52	; 0x34
 800d8d6:	330e      	adds	r3, #14
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7fe f9a9 	bl	800bc30 <ld_word>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d8e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d101      	bne.n	800d8ec <find_volume+0x290>
 800d8e8:	230d      	movs	r3, #13
 800d8ea:	e0fc      	b.n	800dae6 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d8ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8f0:	4413      	add	r3, r2
 800d8f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8f4:	8912      	ldrh	r2, [r2, #8]
 800d8f6:	0912      	lsrs	r2, r2, #4
 800d8f8:	b292      	uxth	r2, r2
 800d8fa:	4413      	add	r3, r2
 800d8fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d8fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d902:	429a      	cmp	r2, r3
 800d904:	d201      	bcs.n	800d90a <find_volume+0x2ae>
 800d906:	230d      	movs	r3, #13
 800d908:	e0ed      	b.n	800dae6 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d90a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	1ad3      	subs	r3, r2, r3
 800d910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d912:	8952      	ldrh	r2, [r2, #10]
 800d914:	fbb3 f3f2 	udiv	r3, r3, r2
 800d918:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d103      	bne.n	800d928 <find_volume+0x2cc>
 800d920:	230d      	movs	r3, #13
 800d922:	e0e0      	b.n	800dae6 <find_volume+0x48a>
 800d924:	2000009c 	.word	0x2000009c
		fmt = FS_FAT32;
 800d928:	2303      	movs	r3, #3
 800d92a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d930:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d934:	4293      	cmp	r3, r2
 800d936:	d802      	bhi.n	800d93e <find_volume+0x2e2>
 800d938:	2302      	movs	r3, #2
 800d93a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d940:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d944:	4293      	cmp	r3, r2
 800d946:	d802      	bhi.n	800d94e <find_volume+0x2f2>
 800d948:	2301      	movs	r3, #1
 800d94a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d950:	1c9a      	adds	r2, r3, #2
 800d952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d954:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d958:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d95a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d95c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d960:	441a      	add	r2, r3
 800d962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d964:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d966:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96a:	441a      	add	r2, r3
 800d96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d970:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d974:	2b03      	cmp	r3, #3
 800d976:	d11e      	bne.n	800d9b6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97a:	3334      	adds	r3, #52	; 0x34
 800d97c:	332a      	adds	r3, #42	; 0x2a
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fe f956 	bl	800bc30 <ld_word>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d001      	beq.n	800d98e <find_volume+0x332>
 800d98a:	230d      	movs	r3, #13
 800d98c:	e0ab      	b.n	800dae6 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d990:	891b      	ldrh	r3, [r3, #8]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d001      	beq.n	800d99a <find_volume+0x33e>
 800d996:	230d      	movs	r3, #13
 800d998:	e0a5      	b.n	800dae6 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99c:	3334      	adds	r3, #52	; 0x34
 800d99e:	332c      	adds	r3, #44	; 0x2c
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fe f95d 	bl	800bc60 <ld_dword>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9aa:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ae:	699b      	ldr	r3, [r3, #24]
 800d9b0:	009b      	lsls	r3, r3, #2
 800d9b2:	647b      	str	r3, [r7, #68]	; 0x44
 800d9b4:	e01f      	b.n	800d9f6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b8:	891b      	ldrh	r3, [r3, #8]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d101      	bne.n	800d9c2 <find_volume+0x366>
 800d9be:	230d      	movs	r3, #13
 800d9c0:	e091      	b.n	800dae6 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9c8:	441a      	add	r2, r3
 800d9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9cc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d9ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9d2:	2b02      	cmp	r3, #2
 800d9d4:	d103      	bne.n	800d9de <find_volume+0x382>
 800d9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d8:	699b      	ldr	r3, [r3, #24]
 800d9da:	005b      	lsls	r3, r3, #1
 800d9dc:	e00a      	b.n	800d9f4 <find_volume+0x398>
 800d9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e0:	699a      	ldr	r2, [r3, #24]
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	005b      	lsls	r3, r3, #1
 800d9e6:	4413      	add	r3, r2
 800d9e8:	085a      	lsrs	r2, r3, #1
 800d9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ec:	699b      	ldr	r3, [r3, #24]
 800d9ee:	f003 0301 	and.w	r3, r3, #1
 800d9f2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d9f4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f8:	69da      	ldr	r2, [r3, #28]
 800d9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800da00:	0a5b      	lsrs	r3, r3, #9
 800da02:	429a      	cmp	r2, r3
 800da04:	d201      	bcs.n	800da0a <find_volume+0x3ae>
 800da06:	230d      	movs	r3, #13
 800da08:	e06d      	b.n	800dae6 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800da0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da10:	615a      	str	r2, [r3, #20]
 800da12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da14:	695a      	ldr	r2, [r3, #20]
 800da16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da18:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800da1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1c:	2280      	movs	r2, #128	; 0x80
 800da1e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800da20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da24:	2b03      	cmp	r3, #3
 800da26:	d149      	bne.n	800dabc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800da28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2a:	3334      	adds	r3, #52	; 0x34
 800da2c:	3330      	adds	r3, #48	; 0x30
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fe f8fe 	bl	800bc30 <ld_word>
 800da34:	4603      	mov	r3, r0
 800da36:	2b01      	cmp	r3, #1
 800da38:	d140      	bne.n	800dabc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800da3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da3c:	3301      	adds	r3, #1
 800da3e:	4619      	mov	r1, r3
 800da40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da42:	f7fe fb69 	bl	800c118 <move_window>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d137      	bne.n	800dabc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	2200      	movs	r2, #0
 800da50:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800da52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da54:	3334      	adds	r3, #52	; 0x34
 800da56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fe f8e8 	bl	800bc30 <ld_word>
 800da60:	4603      	mov	r3, r0
 800da62:	461a      	mov	r2, r3
 800da64:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800da68:	429a      	cmp	r2, r3
 800da6a:	d127      	bne.n	800dabc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800da6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6e:	3334      	adds	r3, #52	; 0x34
 800da70:	4618      	mov	r0, r3
 800da72:	f7fe f8f5 	bl	800bc60 <ld_dword>
 800da76:	4602      	mov	r2, r0
 800da78:	4b1d      	ldr	r3, [pc, #116]	; (800daf0 <find_volume+0x494>)
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d11e      	bne.n	800dabc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800da7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da80:	3334      	adds	r3, #52	; 0x34
 800da82:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800da86:	4618      	mov	r0, r3
 800da88:	f7fe f8ea 	bl	800bc60 <ld_dword>
 800da8c:	4602      	mov	r2, r0
 800da8e:	4b19      	ldr	r3, [pc, #100]	; (800daf4 <find_volume+0x498>)
 800da90:	429a      	cmp	r2, r3
 800da92:	d113      	bne.n	800dabc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800da94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da96:	3334      	adds	r3, #52	; 0x34
 800da98:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fe f8df 	bl	800bc60 <ld_dword>
 800daa2:	4602      	mov	r2, r0
 800daa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800daa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daaa:	3334      	adds	r3, #52	; 0x34
 800daac:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7fe f8d5 	bl	800bc60 <ld_dword>
 800dab6:	4602      	mov	r2, r0
 800dab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daba:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dabe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dac2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dac4:	4b0c      	ldr	r3, [pc, #48]	; (800daf8 <find_volume+0x49c>)
 800dac6:	881b      	ldrh	r3, [r3, #0]
 800dac8:	3301      	adds	r3, #1
 800daca:	b29a      	uxth	r2, r3
 800dacc:	4b0a      	ldr	r3, [pc, #40]	; (800daf8 <find_volume+0x49c>)
 800dace:	801a      	strh	r2, [r3, #0]
 800dad0:	4b09      	ldr	r3, [pc, #36]	; (800daf8 <find_volume+0x49c>)
 800dad2:	881a      	ldrh	r2, [r3, #0]
 800dad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800dad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dada:	4a08      	ldr	r2, [pc, #32]	; (800dafc <find_volume+0x4a0>)
 800dadc:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dade:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dae0:	f7fe fab2 	bl	800c048 <clear_lock>
#endif
	return FR_OK;
 800dae4:	2300      	movs	r3, #0
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3758      	adds	r7, #88	; 0x58
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	41615252 	.word	0x41615252
 800daf4:	61417272 	.word	0x61417272
 800daf8:	200000a0 	.word	0x200000a0
 800dafc:	200000c4 	.word	0x200000c4

0800db00 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b088      	sub	sp, #32
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	4613      	mov	r3, r2
 800db0c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800db12:	f107 0310 	add.w	r3, r7, #16
 800db16:	4618      	mov	r0, r3
 800db18:	f7ff fd05 	bl	800d526 <get_ldnumber>
 800db1c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	2b00      	cmp	r3, #0
 800db22:	da01      	bge.n	800db28 <f_mount+0x28>
 800db24:	230b      	movs	r3, #11
 800db26:	e02b      	b.n	800db80 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800db28:	4a17      	ldr	r2, [pc, #92]	; (800db88 <f_mount+0x88>)
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db30:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d005      	beq.n	800db44 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800db38:	69b8      	ldr	r0, [r7, #24]
 800db3a:	f7fe fa85 	bl	800c048 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	2200      	movs	r2, #0
 800db42:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d002      	beq.n	800db50 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2200      	movs	r2, #0
 800db4e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	490d      	ldr	r1, [pc, #52]	; (800db88 <f_mount+0x88>)
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <f_mount+0x66>
 800db60:	79fb      	ldrb	r3, [r7, #7]
 800db62:	2b01      	cmp	r3, #1
 800db64:	d001      	beq.n	800db6a <f_mount+0x6a>
 800db66:	2300      	movs	r3, #0
 800db68:	e00a      	b.n	800db80 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800db6a:	f107 010c 	add.w	r1, r7, #12
 800db6e:	f107 0308 	add.w	r3, r7, #8
 800db72:	2200      	movs	r2, #0
 800db74:	4618      	mov	r0, r3
 800db76:	f7ff fd71 	bl	800d65c <find_volume>
 800db7a:	4603      	mov	r3, r0
 800db7c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800db7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db80:	4618      	mov	r0, r3
 800db82:	3720      	adds	r7, #32
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}
 800db88:	2000009c 	.word	0x2000009c

0800db8c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b09a      	sub	sp, #104	; 0x68
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	60b9      	str	r1, [r7, #8]
 800db96:	4613      	mov	r3, r2
 800db98:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d101      	bne.n	800dba4 <f_open+0x18>
 800dba0:	2309      	movs	r3, #9
 800dba2:	e1ad      	b.n	800df00 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dba4:	79fb      	ldrb	r3, [r7, #7]
 800dba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbaa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dbac:	79fa      	ldrb	r2, [r7, #7]
 800dbae:	f107 0114 	add.w	r1, r7, #20
 800dbb2:	f107 0308 	add.w	r3, r7, #8
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7ff fd50 	bl	800d65c <find_volume>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800dbc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	f040 8191 	bne.w	800deee <f_open+0x362>
		dj.obj.fs = fs;
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dbd0:	68ba      	ldr	r2, [r7, #8]
 800dbd2:	f107 0318 	add.w	r3, r7, #24
 800dbd6:	4611      	mov	r1, r2
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7ff fc33 	bl	800d444 <follow_path>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dbe4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d11a      	bne.n	800dc22 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dbec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dbf0:	b25b      	sxtb	r3, r3
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	da03      	bge.n	800dbfe <f_open+0x72>
				res = FR_INVALID_NAME;
 800dbf6:	2306      	movs	r3, #6
 800dbf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dbfc:	e011      	b.n	800dc22 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbfe:	79fb      	ldrb	r3, [r7, #7]
 800dc00:	f023 0301 	bic.w	r3, r3, #1
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	bf14      	ite	ne
 800dc08:	2301      	movne	r3, #1
 800dc0a:	2300      	moveq	r3, #0
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	461a      	mov	r2, r3
 800dc10:	f107 0318 	add.w	r3, r7, #24
 800dc14:	4611      	mov	r1, r2
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7fe f90a 	bl	800be30 <chk_lock>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dc22:	79fb      	ldrb	r3, [r7, #7]
 800dc24:	f003 031c 	and.w	r3, r3, #28
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d07f      	beq.n	800dd2c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dc2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d017      	beq.n	800dc64 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dc34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc38:	2b04      	cmp	r3, #4
 800dc3a:	d10e      	bne.n	800dc5a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dc3c:	f7fe f954 	bl	800bee8 <enq_lock>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d006      	beq.n	800dc54 <f_open+0xc8>
 800dc46:	f107 0318 	add.w	r3, r7, #24
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7ff f94a 	bl	800cee4 <dir_register>
 800dc50:	4603      	mov	r3, r0
 800dc52:	e000      	b.n	800dc56 <f_open+0xca>
 800dc54:	2312      	movs	r3, #18
 800dc56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dc5a:	79fb      	ldrb	r3, [r7, #7]
 800dc5c:	f043 0308 	orr.w	r3, r3, #8
 800dc60:	71fb      	strb	r3, [r7, #7]
 800dc62:	e010      	b.n	800dc86 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dc64:	7fbb      	ldrb	r3, [r7, #30]
 800dc66:	f003 0311 	and.w	r3, r3, #17
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d003      	beq.n	800dc76 <f_open+0xea>
					res = FR_DENIED;
 800dc6e:	2307      	movs	r3, #7
 800dc70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dc74:	e007      	b.n	800dc86 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dc76:	79fb      	ldrb	r3, [r7, #7]
 800dc78:	f003 0304 	and.w	r3, r3, #4
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <f_open+0xfa>
 800dc80:	2308      	movs	r3, #8
 800dc82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dc86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d168      	bne.n	800dd60 <f_open+0x1d4>
 800dc8e:	79fb      	ldrb	r3, [r7, #7]
 800dc90:	f003 0308 	and.w	r3, r3, #8
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d063      	beq.n	800dd60 <f_open+0x1d4>
				dw = GET_FATTIME();
 800dc98:	f000 fd26 	bl	800e6e8 <get_fattime>
 800dc9c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca0:	330e      	adds	r3, #14
 800dca2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7fe f819 	bl	800bcdc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcac:	3316      	adds	r3, #22
 800dcae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7fe f813 	bl	800bcdc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb8:	330b      	adds	r3, #11
 800dcba:	2220      	movs	r2, #32
 800dcbc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fe fe83 	bl	800c9d0 <ld_clust>
 800dcca:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fe fe9b 	bl	800ca0e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcda:	331c      	adds	r3, #28
 800dcdc:	2100      	movs	r1, #0
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fd fffc 	bl	800bcdc <st_dword>
					fs->wflag = 1;
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	2201      	movs	r2, #1
 800dce8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dcea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d037      	beq.n	800dd60 <f_open+0x1d4>
						dw = fs->winsect;
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcf4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800dcf6:	f107 0318 	add.w	r3, r7, #24
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fe fbe2 	bl	800c4c8 <remove_chain>
 800dd04:	4603      	mov	r3, r0
 800dd06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800dd0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d126      	bne.n	800dd60 <f_open+0x1d4>
							res = move_window(fs, dw);
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fe f9fe 	bl	800c118 <move_window>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd26:	3a01      	subs	r2, #1
 800dd28:	611a      	str	r2, [r3, #16]
 800dd2a:	e019      	b.n	800dd60 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dd2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d115      	bne.n	800dd60 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dd34:	7fbb      	ldrb	r3, [r7, #30]
 800dd36:	f003 0310 	and.w	r3, r3, #16
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d003      	beq.n	800dd46 <f_open+0x1ba>
					res = FR_NO_FILE;
 800dd3e:	2304      	movs	r3, #4
 800dd40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dd44:	e00c      	b.n	800dd60 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dd46:	79fb      	ldrb	r3, [r7, #7]
 800dd48:	f003 0302 	and.w	r3, r3, #2
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d007      	beq.n	800dd60 <f_open+0x1d4>
 800dd50:	7fbb      	ldrb	r3, [r7, #30]
 800dd52:	f003 0301 	and.w	r3, r3, #1
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d002      	beq.n	800dd60 <f_open+0x1d4>
						res = FR_DENIED;
 800dd5a:	2307      	movs	r3, #7
 800dd5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800dd60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d128      	bne.n	800ddba <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dd68:	79fb      	ldrb	r3, [r7, #7]
 800dd6a:	f003 0308 	and.w	r3, r3, #8
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d003      	beq.n	800dd7a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dd72:	79fb      	ldrb	r3, [r7, #7]
 800dd74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd78:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dd82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dd88:	79fb      	ldrb	r3, [r7, #7]
 800dd8a:	f023 0301 	bic.w	r3, r3, #1
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	bf14      	ite	ne
 800dd92:	2301      	movne	r3, #1
 800dd94:	2300      	moveq	r3, #0
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	461a      	mov	r2, r3
 800dd9a:	f107 0318 	add.w	r3, r7, #24
 800dd9e:	4611      	mov	r1, r2
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fe f8c3 	bl	800bf2c <inc_lock>
 800dda6:	4602      	mov	r2, r0
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d102      	bne.n	800ddba <f_open+0x22e>
 800ddb4:	2302      	movs	r3, #2
 800ddb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ddba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f040 8095 	bne.w	800deee <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddc8:	4611      	mov	r1, r2
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7fe fe00 	bl	800c9d0 <ld_clust>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ddd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd8:	331c      	adds	r3, #28
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fd ff40 	bl	800bc60 <ld_dword>
 800dde0:	4602      	mov	r2, r0
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ddec:	697a      	ldr	r2, [r7, #20]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	88da      	ldrh	r2, [r3, #6]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	79fa      	ldrb	r2, [r7, #7]
 800ddfe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2200      	movs	r2, #0
 800de04:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2200      	movs	r2, #0
 800de0a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2200      	movs	r2, #0
 800de10:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	3330      	adds	r3, #48	; 0x30
 800de16:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de1a:	2100      	movs	r1, #0
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fd ffaa 	bl	800bd76 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800de22:	79fb      	ldrb	r3, [r7, #7]
 800de24:	f003 0320 	and.w	r3, r3, #32
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d060      	beq.n	800deee <f_open+0x362>
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d05c      	beq.n	800deee <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	68da      	ldr	r2, [r3, #12]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	895b      	ldrh	r3, [r3, #10]
 800de40:	025b      	lsls	r3, r3, #9
 800de42:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	68db      	ldr	r3, [r3, #12]
 800de4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de50:	e016      	b.n	800de80 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800de56:	4618      	mov	r0, r3
 800de58:	f7fe f9aa 	bl	800c1b0 <get_fat>
 800de5c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800de5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de60:	2b01      	cmp	r3, #1
 800de62:	d802      	bhi.n	800de6a <f_open+0x2de>
 800de64:	2302      	movs	r3, #2
 800de66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800de6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de70:	d102      	bne.n	800de78 <f_open+0x2ec>
 800de72:	2301      	movs	r3, #1
 800de74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800de7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de84:	2b00      	cmp	r3, #0
 800de86:	d103      	bne.n	800de90 <f_open+0x304>
 800de88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800de8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d8e0      	bhi.n	800de52 <f_open+0x2c6>
				}
				fp->clust = clst;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de94:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800de96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d127      	bne.n	800deee <f_open+0x362>
 800de9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d022      	beq.n	800deee <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800deac:	4618      	mov	r0, r3
 800deae:	f7fe f960 	bl	800c172 <clust2sect>
 800deb2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800deb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d103      	bne.n	800dec2 <f_open+0x336>
						res = FR_INT_ERR;
 800deba:	2302      	movs	r3, #2
 800debc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dec0:	e015      	b.n	800deee <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dec4:	0a5a      	lsrs	r2, r3, #9
 800dec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dec8:	441a      	add	r2, r3
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	7858      	ldrb	r0, [r3, #1]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	6a1a      	ldr	r2, [r3, #32]
 800dedc:	2301      	movs	r3, #1
 800dede:	f7fd fe67 	bl	800bbb0 <disk_read>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d002      	beq.n	800deee <f_open+0x362>
 800dee8:	2301      	movs	r3, #1
 800deea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800deee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800def2:	2b00      	cmp	r3, #0
 800def4:	d002      	beq.n	800defc <f_open+0x370>
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2200      	movs	r2, #0
 800defa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800defc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800df00:	4618      	mov	r0, r3
 800df02:	3768      	adds	r7, #104	; 0x68
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800df08:	b480      	push	{r7}
 800df0a:	b087      	sub	sp, #28
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	4613      	mov	r3, r2
 800df14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800df16:	2301      	movs	r3, #1
 800df18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800df1a:	2300      	movs	r3, #0
 800df1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800df1e:	4b1f      	ldr	r3, [pc, #124]	; (800df9c <FATFS_LinkDriverEx+0x94>)
 800df20:	7a5b      	ldrb	r3, [r3, #9]
 800df22:	b2db      	uxtb	r3, r3
 800df24:	2b00      	cmp	r3, #0
 800df26:	d131      	bne.n	800df8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df28:	4b1c      	ldr	r3, [pc, #112]	; (800df9c <FATFS_LinkDriverEx+0x94>)
 800df2a:	7a5b      	ldrb	r3, [r3, #9]
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	461a      	mov	r2, r3
 800df30:	4b1a      	ldr	r3, [pc, #104]	; (800df9c <FATFS_LinkDriverEx+0x94>)
 800df32:	2100      	movs	r1, #0
 800df34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df36:	4b19      	ldr	r3, [pc, #100]	; (800df9c <FATFS_LinkDriverEx+0x94>)
 800df38:	7a5b      	ldrb	r3, [r3, #9]
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	4a17      	ldr	r2, [pc, #92]	; (800df9c <FATFS_LinkDriverEx+0x94>)
 800df3e:	009b      	lsls	r3, r3, #2
 800df40:	4413      	add	r3, r2
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df46:	4b15      	ldr	r3, [pc, #84]	; (800df9c <FATFS_LinkDriverEx+0x94>)
 800df48:	7a5b      	ldrb	r3, [r3, #9]
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	461a      	mov	r2, r3
 800df4e:	4b13      	ldr	r3, [pc, #76]	; (800df9c <FATFS_LinkDriverEx+0x94>)
 800df50:	4413      	add	r3, r2
 800df52:	79fa      	ldrb	r2, [r7, #7]
 800df54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df56:	4b11      	ldr	r3, [pc, #68]	; (800df9c <FATFS_LinkDriverEx+0x94>)
 800df58:	7a5b      	ldrb	r3, [r3, #9]
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	1c5a      	adds	r2, r3, #1
 800df5e:	b2d1      	uxtb	r1, r2
 800df60:	4a0e      	ldr	r2, [pc, #56]	; (800df9c <FATFS_LinkDriverEx+0x94>)
 800df62:	7251      	strb	r1, [r2, #9]
 800df64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df66:	7dbb      	ldrb	r3, [r7, #22]
 800df68:	3330      	adds	r3, #48	; 0x30
 800df6a:	b2da      	uxtb	r2, r3
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	3301      	adds	r3, #1
 800df74:	223a      	movs	r2, #58	; 0x3a
 800df76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	3302      	adds	r3, #2
 800df7c:	222f      	movs	r2, #47	; 0x2f
 800df7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	3303      	adds	r3, #3
 800df84:	2200      	movs	r2, #0
 800df86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800df88:	2300      	movs	r3, #0
 800df8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800df8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	371c      	adds	r7, #28
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop
 800df9c:	200002c4 	.word	0x200002c4

0800dfa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dfaa:	2200      	movs	r2, #0
 800dfac:	6839      	ldr	r1, [r7, #0]
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7ff ffaa 	bl	800df08 <FATFS_LinkDriverEx>
 800dfb4:	4603      	mov	r3, r0
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3708      	adds	r7, #8
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
	...

0800dfc0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b085      	sub	sp, #20
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	6039      	str	r1, [r7, #0]
 800dfca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dfcc:	88fb      	ldrh	r3, [r7, #6]
 800dfce:	2b7f      	cmp	r3, #127	; 0x7f
 800dfd0:	d802      	bhi.n	800dfd8 <ff_convert+0x18>
		c = chr;
 800dfd2:	88fb      	ldrh	r3, [r7, #6]
 800dfd4:	81fb      	strh	r3, [r7, #14]
 800dfd6:	e025      	b.n	800e024 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00b      	beq.n	800dff6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dfde:	88fb      	ldrh	r3, [r7, #6]
 800dfe0:	2bff      	cmp	r3, #255	; 0xff
 800dfe2:	d805      	bhi.n	800dff0 <ff_convert+0x30>
 800dfe4:	88fb      	ldrh	r3, [r7, #6]
 800dfe6:	3b80      	subs	r3, #128	; 0x80
 800dfe8:	4a12      	ldr	r2, [pc, #72]	; (800e034 <ff_convert+0x74>)
 800dfea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfee:	e000      	b.n	800dff2 <ff_convert+0x32>
 800dff0:	2300      	movs	r3, #0
 800dff2:	81fb      	strh	r3, [r7, #14]
 800dff4:	e016      	b.n	800e024 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800dff6:	2300      	movs	r3, #0
 800dff8:	81fb      	strh	r3, [r7, #14]
 800dffa:	e009      	b.n	800e010 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800dffc:	89fb      	ldrh	r3, [r7, #14]
 800dffe:	4a0d      	ldr	r2, [pc, #52]	; (800e034 <ff_convert+0x74>)
 800e000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e004:	88fa      	ldrh	r2, [r7, #6]
 800e006:	429a      	cmp	r2, r3
 800e008:	d006      	beq.n	800e018 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e00a:	89fb      	ldrh	r3, [r7, #14]
 800e00c:	3301      	adds	r3, #1
 800e00e:	81fb      	strh	r3, [r7, #14]
 800e010:	89fb      	ldrh	r3, [r7, #14]
 800e012:	2b7f      	cmp	r3, #127	; 0x7f
 800e014:	d9f2      	bls.n	800dffc <ff_convert+0x3c>
 800e016:	e000      	b.n	800e01a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e018:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e01a:	89fb      	ldrh	r3, [r7, #14]
 800e01c:	3380      	adds	r3, #128	; 0x80
 800e01e:	b29b      	uxth	r3, r3
 800e020:	b2db      	uxtb	r3, r3
 800e022:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e024:	89fb      	ldrh	r3, [r7, #14]
}
 800e026:	4618      	mov	r0, r3
 800e028:	3714      	adds	r7, #20
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	080123e8 	.word	0x080123e8

0800e038 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e038:	b480      	push	{r7}
 800e03a:	b087      	sub	sp, #28
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	4603      	mov	r3, r0
 800e040:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e042:	88fb      	ldrh	r3, [r7, #6]
 800e044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e048:	d201      	bcs.n	800e04e <ff_wtoupper+0x16>
 800e04a:	4b3e      	ldr	r3, [pc, #248]	; (800e144 <ff_wtoupper+0x10c>)
 800e04c:	e000      	b.n	800e050 <ff_wtoupper+0x18>
 800e04e:	4b3e      	ldr	r3, [pc, #248]	; (800e148 <ff_wtoupper+0x110>)
 800e050:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	1c9a      	adds	r2, r3, #2
 800e056:	617a      	str	r2, [r7, #20]
 800e058:	881b      	ldrh	r3, [r3, #0]
 800e05a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e05c:	8a7b      	ldrh	r3, [r7, #18]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d068      	beq.n	800e134 <ff_wtoupper+0xfc>
 800e062:	88fa      	ldrh	r2, [r7, #6]
 800e064:	8a7b      	ldrh	r3, [r7, #18]
 800e066:	429a      	cmp	r2, r3
 800e068:	d364      	bcc.n	800e134 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	1c9a      	adds	r2, r3, #2
 800e06e:	617a      	str	r2, [r7, #20]
 800e070:	881b      	ldrh	r3, [r3, #0]
 800e072:	823b      	strh	r3, [r7, #16]
 800e074:	8a3b      	ldrh	r3, [r7, #16]
 800e076:	0a1b      	lsrs	r3, r3, #8
 800e078:	81fb      	strh	r3, [r7, #14]
 800e07a:	8a3b      	ldrh	r3, [r7, #16]
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e080:	88fa      	ldrh	r2, [r7, #6]
 800e082:	8a79      	ldrh	r1, [r7, #18]
 800e084:	8a3b      	ldrh	r3, [r7, #16]
 800e086:	440b      	add	r3, r1
 800e088:	429a      	cmp	r2, r3
 800e08a:	da49      	bge.n	800e120 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e08c:	89fb      	ldrh	r3, [r7, #14]
 800e08e:	2b08      	cmp	r3, #8
 800e090:	d84f      	bhi.n	800e132 <ff_wtoupper+0xfa>
 800e092:	a201      	add	r2, pc, #4	; (adr r2, 800e098 <ff_wtoupper+0x60>)
 800e094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e098:	0800e0bd 	.word	0x0800e0bd
 800e09c:	0800e0cf 	.word	0x0800e0cf
 800e0a0:	0800e0e5 	.word	0x0800e0e5
 800e0a4:	0800e0ed 	.word	0x0800e0ed
 800e0a8:	0800e0f5 	.word	0x0800e0f5
 800e0ac:	0800e0fd 	.word	0x0800e0fd
 800e0b0:	0800e105 	.word	0x0800e105
 800e0b4:	0800e10d 	.word	0x0800e10d
 800e0b8:	0800e115 	.word	0x0800e115
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e0bc:	88fa      	ldrh	r2, [r7, #6]
 800e0be:	8a7b      	ldrh	r3, [r7, #18]
 800e0c0:	1ad3      	subs	r3, r2, r3
 800e0c2:	005b      	lsls	r3, r3, #1
 800e0c4:	697a      	ldr	r2, [r7, #20]
 800e0c6:	4413      	add	r3, r2
 800e0c8:	881b      	ldrh	r3, [r3, #0]
 800e0ca:	80fb      	strh	r3, [r7, #6]
 800e0cc:	e027      	b.n	800e11e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e0ce:	88fa      	ldrh	r2, [r7, #6]
 800e0d0:	8a7b      	ldrh	r3, [r7, #18]
 800e0d2:	1ad3      	subs	r3, r2, r3
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	f003 0301 	and.w	r3, r3, #1
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	88fa      	ldrh	r2, [r7, #6]
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	80fb      	strh	r3, [r7, #6]
 800e0e2:	e01c      	b.n	800e11e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e0e4:	88fb      	ldrh	r3, [r7, #6]
 800e0e6:	3b10      	subs	r3, #16
 800e0e8:	80fb      	strh	r3, [r7, #6]
 800e0ea:	e018      	b.n	800e11e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e0ec:	88fb      	ldrh	r3, [r7, #6]
 800e0ee:	3b20      	subs	r3, #32
 800e0f0:	80fb      	strh	r3, [r7, #6]
 800e0f2:	e014      	b.n	800e11e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e0f4:	88fb      	ldrh	r3, [r7, #6]
 800e0f6:	3b30      	subs	r3, #48	; 0x30
 800e0f8:	80fb      	strh	r3, [r7, #6]
 800e0fa:	e010      	b.n	800e11e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e0fc:	88fb      	ldrh	r3, [r7, #6]
 800e0fe:	3b1a      	subs	r3, #26
 800e100:	80fb      	strh	r3, [r7, #6]
 800e102:	e00c      	b.n	800e11e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e104:	88fb      	ldrh	r3, [r7, #6]
 800e106:	3308      	adds	r3, #8
 800e108:	80fb      	strh	r3, [r7, #6]
 800e10a:	e008      	b.n	800e11e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e10c:	88fb      	ldrh	r3, [r7, #6]
 800e10e:	3b50      	subs	r3, #80	; 0x50
 800e110:	80fb      	strh	r3, [r7, #6]
 800e112:	e004      	b.n	800e11e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e114:	88fb      	ldrh	r3, [r7, #6]
 800e116:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e11a:	80fb      	strh	r3, [r7, #6]
 800e11c:	bf00      	nop
			}
			break;
 800e11e:	e008      	b.n	800e132 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e120:	89fb      	ldrh	r3, [r7, #14]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d195      	bne.n	800e052 <ff_wtoupper+0x1a>
 800e126:	8a3b      	ldrh	r3, [r7, #16]
 800e128:	005b      	lsls	r3, r3, #1
 800e12a:	697a      	ldr	r2, [r7, #20]
 800e12c:	4413      	add	r3, r2
 800e12e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e130:	e78f      	b.n	800e052 <ff_wtoupper+0x1a>
			break;
 800e132:	bf00      	nop
	}

	return chr;
 800e134:	88fb      	ldrh	r3, [r7, #6]
}
 800e136:	4618      	mov	r0, r3
 800e138:	371c      	adds	r7, #28
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr
 800e142:	bf00      	nop
 800e144:	080124e8 	.word	0x080124e8
 800e148:	080126dc 	.word	0x080126dc

0800e14c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b08a      	sub	sp, #40	; 0x28
 800e150:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800e152:	f107 031c 	add.w	r3, r7, #28
 800e156:	2200      	movs	r2, #0
 800e158:	601a      	str	r2, [r3, #0]
 800e15a:	605a      	str	r2, [r3, #4]
 800e15c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800e15e:	463b      	mov	r3, r7
 800e160:	2200      	movs	r2, #0
 800e162:	601a      	str	r2, [r3, #0]
 800e164:	605a      	str	r2, [r3, #4]
 800e166:	609a      	str	r2, [r3, #8]
 800e168:	60da      	str	r2, [r3, #12]
 800e16a:	611a      	str	r2, [r3, #16]
 800e16c:	615a      	str	r2, [r3, #20]
 800e16e:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800e170:	4b7a      	ldr	r3, [pc, #488]	; (800e35c <MX_ADC1_Init+0x210>)
 800e172:	4a7b      	ldr	r2, [pc, #492]	; (800e360 <MX_ADC1_Init+0x214>)
 800e174:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800e176:	4b79      	ldr	r3, [pc, #484]	; (800e35c <MX_ADC1_Init+0x210>)
 800e178:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e17c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800e17e:	4b77      	ldr	r3, [pc, #476]	; (800e35c <MX_ADC1_Init+0x210>)
 800e180:	2200      	movs	r2, #0
 800e182:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800e184:	4b75      	ldr	r3, [pc, #468]	; (800e35c <MX_ADC1_Init+0x210>)
 800e186:	2201      	movs	r2, #1
 800e188:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800e18a:	4b74      	ldr	r3, [pc, #464]	; (800e35c <MX_ADC1_Init+0x210>)
 800e18c:	2208      	movs	r2, #8
 800e18e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800e190:	4b72      	ldr	r3, [pc, #456]	; (800e35c <MX_ADC1_Init+0x210>)
 800e192:	2200      	movs	r2, #0
 800e194:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e196:	4b71      	ldr	r3, [pc, #452]	; (800e35c <MX_ADC1_Init+0x210>)
 800e198:	2200      	movs	r2, #0
 800e19a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 10;
 800e19c:	4b6f      	ldr	r3, [pc, #444]	; (800e35c <MX_ADC1_Init+0x210>)
 800e19e:	220a      	movs	r2, #10
 800e1a0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e1a2:	4b6e      	ldr	r3, [pc, #440]	; (800e35c <MX_ADC1_Init+0x210>)
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800e1a8:	4b6c      	ldr	r3, [pc, #432]	; (800e35c <MX_ADC1_Init+0x210>)
 800e1aa:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e1ae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e1b0:	4b6a      	ldr	r3, [pc, #424]	; (800e35c <MX_ADC1_Init+0x210>)
 800e1b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e1b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800e1b8:	4b68      	ldr	r3, [pc, #416]	; (800e35c <MX_ADC1_Init+0x210>)
 800e1ba:	2203      	movs	r2, #3
 800e1bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800e1be:	4b67      	ldr	r3, [pc, #412]	; (800e35c <MX_ADC1_Init+0x210>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800e1c4:	4b65      	ldr	r3, [pc, #404]	; (800e35c <MX_ADC1_Init+0x210>)
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800e1ca:	4b64      	ldr	r3, [pc, #400]	; (800e35c <MX_ADC1_Init+0x210>)
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 800e1d2:	4b62      	ldr	r3, [pc, #392]	; (800e35c <MX_ADC1_Init+0x210>)
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800e1d8:	4b60      	ldr	r3, [pc, #384]	; (800e35c <MX_ADC1_Init+0x210>)
 800e1da:	2200      	movs	r2, #0
 800e1dc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800e1de:	4b5f      	ldr	r3, [pc, #380]	; (800e35c <MX_ADC1_Init+0x210>)
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 800e1e4:	4b5d      	ldr	r3, [pc, #372]	; (800e35c <MX_ADC1_Init+0x210>)
 800e1e6:	f240 4201 	movw	r2, #1025	; 0x401
 800e1ea:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e1ec:	485b      	ldr	r0, [pc, #364]	; (800e35c <MX_ADC1_Init+0x210>)
 800e1ee:	f7f2 fb23 	bl	8000838 <HAL_ADC_Init>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d001      	beq.n	800e1fc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800e1f8:	f001 f8ca 	bl	800f390 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800e200:	f107 031c 	add.w	r3, r7, #28
 800e204:	4619      	mov	r1, r3
 800e206:	4855      	ldr	r0, [pc, #340]	; (800e35c <MX_ADC1_Init+0x210>)
 800e208:	f7f3 face 	bl	80017a8 <HAL_ADCEx_MultiModeConfigChannel>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800e212:	f001 f8bd 	bl	800f390 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800e216:	4b53      	ldr	r3, [pc, #332]	; (800e364 <MX_ADC1_Init+0x218>)
 800e218:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800e21a:	2306      	movs	r3, #6
 800e21c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 800e21e:	2302      	movs	r3, #2
 800e220:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e222:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e226:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e228:	2304      	movs	r3, #4
 800e22a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 32768;
 800e22c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e230:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e232:	463b      	mov	r3, r7
 800e234:	4619      	mov	r1, r3
 800e236:	4849      	ldr	r0, [pc, #292]	; (800e35c <MX_ADC1_Init+0x210>)
 800e238:	f7f2 fd6c 	bl	8000d14 <HAL_ADC_ConfigChannel>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d001      	beq.n	800e246 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800e242:	f001 f8a5 	bl	800f390 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800e246:	4b48      	ldr	r3, [pc, #288]	; (800e368 <MX_ADC1_Init+0x21c>)
 800e248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800e24a:	230c      	movs	r3, #12
 800e24c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e24e:	463b      	mov	r3, r7
 800e250:	4619      	mov	r1, r3
 800e252:	4842      	ldr	r0, [pc, #264]	; (800e35c <MX_ADC1_Init+0x210>)
 800e254:	f7f2 fd5e 	bl	8000d14 <HAL_ADC_ConfigChannel>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d001      	beq.n	800e262 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800e25e:	f001 f897 	bl	800f390 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800e262:	4b42      	ldr	r3, [pc, #264]	; (800e36c <MX_ADC1_Init+0x220>)
 800e264:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800e266:	2312      	movs	r3, #18
 800e268:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e26a:	463b      	mov	r3, r7
 800e26c:	4619      	mov	r1, r3
 800e26e:	483b      	ldr	r0, [pc, #236]	; (800e35c <MX_ADC1_Init+0x210>)
 800e270:	f7f2 fd50 	bl	8000d14 <HAL_ADC_ConfigChannel>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800e27a:	f001 f889 	bl	800f390 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800e27e:	4b3c      	ldr	r3, [pc, #240]	; (800e370 <MX_ADC1_Init+0x224>)
 800e280:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800e282:	2318      	movs	r3, #24
 800e284:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e286:	463b      	mov	r3, r7
 800e288:	4619      	mov	r1, r3
 800e28a:	4834      	ldr	r0, [pc, #208]	; (800e35c <MX_ADC1_Init+0x210>)
 800e28c:	f7f2 fd42 	bl	8000d14 <HAL_ADC_ConfigChannel>
 800e290:	4603      	mov	r3, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 800e296:	f001 f87b 	bl	800f390 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800e29a:	4b36      	ldr	r3, [pc, #216]	; (800e374 <MX_ADC1_Init+0x228>)
 800e29c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800e29e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2a2:	607b      	str	r3, [r7, #4]
  sConfig.Offset = 0;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e2a8:	463b      	mov	r3, r7
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	482b      	ldr	r0, [pc, #172]	; (800e35c <MX_ADC1_Init+0x210>)
 800e2ae:	f7f2 fd31 	bl	8000d14 <HAL_ADC_ConfigChannel>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800e2b8:	f001 f86a 	bl	800f390 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_19;
 800e2bc:	4b2e      	ldr	r3, [pc, #184]	; (800e378 <MX_ADC1_Init+0x22c>)
 800e2be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800e2c0:	f44f 7383 	mov.w	r3, #262	; 0x106
 800e2c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e2c6:	463b      	mov	r3, r7
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	4824      	ldr	r0, [pc, #144]	; (800e35c <MX_ADC1_Init+0x210>)
 800e2cc:	f7f2 fd22 	bl	8000d14 <HAL_ADC_ConfigChannel>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d001      	beq.n	800e2da <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800e2d6:	f001 f85b 	bl	800f390 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800e2da:	4b28      	ldr	r3, [pc, #160]	; (800e37c <MX_ADC1_Init+0x230>)
 800e2dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800e2de:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800e2e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e2e4:	463b      	mov	r3, r7
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	481c      	ldr	r0, [pc, #112]	; (800e35c <MX_ADC1_Init+0x210>)
 800e2ea:	f7f2 fd13 	bl	8000d14 <HAL_ADC_ConfigChannel>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800e2f4:	f001 f84c 	bl	800f390 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800e2f8:	4b21      	ldr	r3, [pc, #132]	; (800e380 <MX_ADC1_Init+0x234>)
 800e2fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800e2fc:	f44f 7389 	mov.w	r3, #274	; 0x112
 800e300:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e302:	463b      	mov	r3, r7
 800e304:	4619      	mov	r1, r3
 800e306:	4815      	ldr	r0, [pc, #84]	; (800e35c <MX_ADC1_Init+0x210>)
 800e308:	f7f2 fd04 	bl	8000d14 <HAL_ADC_ConfigChannel>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800e312:	f001 f83d 	bl	800f390 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800e316:	4b1b      	ldr	r3, [pc, #108]	; (800e384 <MX_ADC1_Init+0x238>)
 800e318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800e31a:	f44f 738c 	mov.w	r3, #280	; 0x118
 800e31e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e320:	463b      	mov	r3, r7
 800e322:	4619      	mov	r1, r3
 800e324:	480d      	ldr	r0, [pc, #52]	; (800e35c <MX_ADC1_Init+0x210>)
 800e326:	f7f2 fcf5 	bl	8000d14 <HAL_ADC_ConfigChannel>
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d001      	beq.n	800e334 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 800e330:	f001 f82e 	bl	800f390 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800e334:	4b14      	ldr	r3, [pc, #80]	; (800e388 <MX_ADC1_Init+0x23c>)
 800e336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800e338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e33c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e33e:	463b      	mov	r3, r7
 800e340:	4619      	mov	r1, r3
 800e342:	4806      	ldr	r0, [pc, #24]	; (800e35c <MX_ADC1_Init+0x210>)
 800e344:	f7f2 fce6 	bl	8000d14 <HAL_ADC_ConfigChannel>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d001      	beq.n	800e352 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800e34e:	f001 f81f 	bl	800f390 <Error_Handler>
  }

}
 800e352:	bf00      	nop
 800e354:	3728      	adds	r7, #40	; 0x28
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	200002e0 	.word	0x200002e0
 800e360:	40022000 	.word	0x40022000
 800e364:	43210000 	.word	0x43210000
 800e368:	47520000 	.word	0x47520000
 800e36c:	3ac04000 	.word	0x3ac04000
 800e370:	3ef08000 	.word	0x3ef08000
 800e374:	4b840000 	.word	0x4b840000
 800e378:	4fb80000 	.word	0x4fb80000
 800e37c:	0c900008 	.word	0x0c900008
 800e380:	1d500080 	.word	0x1d500080
 800e384:	10c00010 	.word	0x10c00010
 800e388:	21800100 	.word	0x21800100

0800e38c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b08a      	sub	sp, #40	; 0x28
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e394:	f107 0314 	add.w	r3, r7, #20
 800e398:	2200      	movs	r2, #0
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	605a      	str	r2, [r3, #4]
 800e39e:	609a      	str	r2, [r3, #8]
 800e3a0:	60da      	str	r2, [r3, #12]
 800e3a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a42      	ldr	r2, [pc, #264]	; (800e4b4 <HAL_ADC_MspInit+0x128>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d17e      	bne.n	800e4ac <HAL_ADC_MspInit+0x120>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800e3ae:	4b42      	ldr	r3, [pc, #264]	; (800e4b8 <HAL_ADC_MspInit+0x12c>)
 800e3b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e3b4:	4a40      	ldr	r2, [pc, #256]	; (800e4b8 <HAL_ADC_MspInit+0x12c>)
 800e3b6:	f043 0320 	orr.w	r3, r3, #32
 800e3ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e3be:	4b3e      	ldr	r3, [pc, #248]	; (800e4b8 <HAL_ADC_MspInit+0x12c>)
 800e3c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e3c4:	f003 0320 	and.w	r3, r3, #32
 800e3c8:	613b      	str	r3, [r7, #16]
 800e3ca:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3cc:	4b3a      	ldr	r3, [pc, #232]	; (800e4b8 <HAL_ADC_MspInit+0x12c>)
 800e3ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e3d2:	4a39      	ldr	r2, [pc, #228]	; (800e4b8 <HAL_ADC_MspInit+0x12c>)
 800e3d4:	f043 0301 	orr.w	r3, r3, #1
 800e3d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e3dc:	4b36      	ldr	r3, [pc, #216]	; (800e4b8 <HAL_ADC_MspInit+0x12c>)
 800e3de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e3e2:	f003 0301 	and.w	r3, r3, #1
 800e3e6:	60fb      	str	r3, [r7, #12]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e3ea:	4b33      	ldr	r3, [pc, #204]	; (800e4b8 <HAL_ADC_MspInit+0x12c>)
 800e3ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e3f0:	4a31      	ldr	r2, [pc, #196]	; (800e4b8 <HAL_ADC_MspInit+0x12c>)
 800e3f2:	f043 0304 	orr.w	r3, r3, #4
 800e3f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e3fa:	4b2f      	ldr	r3, [pc, #188]	; (800e4b8 <HAL_ADC_MspInit+0x12c>)
 800e3fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e400:	f003 0304 	and.w	r3, r3, #4
 800e404:	60bb      	str	r3, [r7, #8]
 800e406:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800e408:	23ff      	movs	r3, #255	; 0xff
 800e40a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e40c:	2303      	movs	r3, #3
 800e40e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e410:	2300      	movs	r3, #0
 800e412:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e414:	f107 0314 	add.w	r3, r7, #20
 800e418:	4619      	mov	r1, r3
 800e41a:	4828      	ldr	r0, [pc, #160]	; (800e4bc <HAL_ADC_MspInit+0x130>)
 800e41c:	f7f5 ff4e 	bl	80042bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800e420:	2330      	movs	r3, #48	; 0x30
 800e422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e424:	2303      	movs	r3, #3
 800e426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e428:	2300      	movs	r3, #0
 800e42a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e42c:	f107 0314 	add.w	r3, r7, #20
 800e430:	4619      	mov	r1, r3
 800e432:	4823      	ldr	r0, [pc, #140]	; (800e4c0 <HAL_ADC_MspInit+0x134>)
 800e434:	f7f5 ff42 	bl	80042bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800e438:	4b22      	ldr	r3, [pc, #136]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e43a:	4a23      	ldr	r2, [pc, #140]	; (800e4c8 <HAL_ADC_MspInit+0x13c>)
 800e43c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800e43e:	4b21      	ldr	r3, [pc, #132]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e440:	2209      	movs	r2, #9
 800e442:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e444:	4b1f      	ldr	r3, [pc, #124]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e446:	2200      	movs	r2, #0
 800e448:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e44a:	4b1e      	ldr	r3, [pc, #120]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e44c:	2200      	movs	r2, #0
 800e44e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e450:	4b1c      	ldr	r3, [pc, #112]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e456:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e458:	4b1a      	ldr	r3, [pc, #104]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e45a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e45e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e460:	4b18      	ldr	r3, [pc, #96]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e466:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800e468:	4b16      	ldr	r3, [pc, #88]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e46a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e46e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800e470:	4b14      	ldr	r3, [pc, #80]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e476:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e478:	4b12      	ldr	r3, [pc, #72]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e47a:	2204      	movs	r2, #4
 800e47c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800e47e:	4b11      	ldr	r3, [pc, #68]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e480:	2201      	movs	r2, #1
 800e482:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800e484:	4b0f      	ldr	r3, [pc, #60]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e486:	2200      	movs	r2, #0
 800e488:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800e48a:	4b0e      	ldr	r3, [pc, #56]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e48c:	2200      	movs	r2, #0
 800e48e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800e490:	480c      	ldr	r0, [pc, #48]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e492:	f7f3 fbeb 	bl	8001c6c <HAL_DMA_Init>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d001      	beq.n	800e4a0 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 800e49c:	f000 ff78 	bl	800f390 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a08      	ldr	r2, [pc, #32]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e4a4:	64da      	str	r2, [r3, #76]	; 0x4c
 800e4a6:	4a07      	ldr	r2, [pc, #28]	; (800e4c4 <HAL_ADC_MspInit+0x138>)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800e4ac:	bf00      	nop
 800e4ae:	3728      	adds	r7, #40	; 0x28
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	40022000 	.word	0x40022000
 800e4b8:	58024400 	.word	0x58024400
 800e4bc:	58020000 	.word	0x58020000
 800e4c0:	58020800 	.word	0x58020800
 800e4c4:	20000344 	.word	0x20000344
 800e4c8:	40020010 	.word	0x40020010

0800e4cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e4d6:	f000 f89b 	bl	800e610 <BSP_SD_IsDetected>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d001      	beq.n	800e4e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e4e0:	2302      	movs	r3, #2
 800e4e2:	e012      	b.n	800e50a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e4e4:	480b      	ldr	r0, [pc, #44]	; (800e514 <BSP_SD_Init+0x48>)
 800e4e6:	f7f9 ff40 	bl	800836a <HAL_SD_Init>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e4ee:	79fb      	ldrb	r3, [r7, #7]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d109      	bne.n	800e508 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e4f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e4f8:	4806      	ldr	r0, [pc, #24]	; (800e514 <BSP_SD_Init+0x48>)
 800e4fa:	f7fa ffbf 	bl	800947c <HAL_SD_ConfigWideBusOperation>
 800e4fe:	4603      	mov	r3, r0
 800e500:	2b00      	cmp	r3, #0
 800e502:	d001      	beq.n	800e508 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e504:	2301      	movs	r3, #1
 800e506:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e508:	79fb      	ldrb	r3, [r7, #7]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3708      	adds	r7, #8
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	2000fd24 	.word	0x2000fd24

0800e518 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b088      	sub	sp, #32
 800e51c:	af02      	add	r7, sp, #8
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	607a      	str	r2, [r7, #4]
 800e524:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e526:	2300      	movs	r3, #0
 800e528:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	9300      	str	r3, [sp, #0]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	68ba      	ldr	r2, [r7, #8]
 800e532:	68f9      	ldr	r1, [r7, #12]
 800e534:	4806      	ldr	r0, [pc, #24]	; (800e550 <BSP_SD_ReadBlocks+0x38>)
 800e536:	f7fa f837 	bl	80085a8 <HAL_SD_ReadBlocks>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d001      	beq.n	800e544 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e540:	2301      	movs	r3, #1
 800e542:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800e544:	7dfb      	ldrb	r3, [r7, #23]
}
 800e546:	4618      	mov	r0, r3
 800e548:	3718      	adds	r7, #24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	2000fd24 	.word	0x2000fd24

0800e554 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b088      	sub	sp, #32
 800e558:	af02      	add	r7, sp, #8
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	607a      	str	r2, [r7, #4]
 800e560:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e562:	2300      	movs	r3, #0
 800e564:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	68ba      	ldr	r2, [r7, #8]
 800e56e:	68f9      	ldr	r1, [r7, #12]
 800e570:	4806      	ldr	r0, [pc, #24]	; (800e58c <BSP_SD_WriteBlocks+0x38>)
 800e572:	f7fa f9a3 	bl	80088bc <HAL_SD_WriteBlocks>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d001      	beq.n	800e580 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e57c:	2301      	movs	r3, #1
 800e57e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800e580:	7dfb      	ldrb	r3, [r7, #23]
}
 800e582:	4618      	mov	r0, r3
 800e584:	3718      	adds	r7, #24
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	2000fd24 	.word	0x2000fd24

0800e590 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e594:	4805      	ldr	r0, [pc, #20]	; (800e5ac <BSP_SD_GetCardState+0x1c>)
 800e596:	f7fb f81b 	bl	80095d0 <HAL_SD_GetCardState>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b04      	cmp	r3, #4
 800e59e:	bf14      	ite	ne
 800e5a0:	2301      	movne	r3, #1
 800e5a2:	2300      	moveq	r3, #0
 800e5a4:	b2db      	uxtb	r3, r3
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	bd80      	pop	{r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	2000fd24 	.word	0x2000fd24

0800e5b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e5b8:	6879      	ldr	r1, [r7, #4]
 800e5ba:	4803      	ldr	r0, [pc, #12]	; (800e5c8 <BSP_SD_GetCardInfo+0x18>)
 800e5bc:	f7fa ff32 	bl	8009424 <HAL_SD_GetCardInfo>
}
 800e5c0:	bf00      	nop
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	2000fd24 	.word	0x2000fd24

0800e5cc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e5d4:	f000 f80e 	bl	800e5f4 <BSP_SD_WriteCpltCallback>
}
 800e5d8:	bf00      	nop
 800e5da:	3708      	adds	r7, #8
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e5e8:	f000 f80b 	bl	800e602 <BSP_SD_ReadCpltCallback>
}
 800e5ec:	bf00      	nop
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	af00      	add	r7, sp, #0

}
 800e5f8:	bf00      	nop
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr

0800e602 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800e602:	b480      	push	{r7}
 800e604:	af00      	add	r7, sp, #0

}
 800e606:	bf00      	nop
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e616:	2301      	movs	r3, #1
 800e618:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800e61a:	f000 f86d 	bl	800e6f8 <BSP_PlatformIsDetected>
 800e61e:	4603      	mov	r3, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	d101      	bne.n	800e628 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e624:	2300      	movs	r3, #0
 800e626:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e628:	79fb      	ldrb	r3, [r7, #7]
 800e62a:	b2db      	uxtb	r3, r3
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800e63a:	4b21      	ldr	r3, [pc, #132]	; (800e6c0 <MX_DMA_Init+0x8c>)
 800e63c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e640:	4a1f      	ldr	r2, [pc, #124]	; (800e6c0 <MX_DMA_Init+0x8c>)
 800e642:	f043 0301 	orr.w	r3, r3, #1
 800e646:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e64a:	4b1d      	ldr	r3, [pc, #116]	; (800e6c0 <MX_DMA_Init+0x8c>)
 800e64c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e650:	f003 0301 	and.w	r3, r3, #1
 800e654:	607b      	str	r3, [r7, #4]
 800e656:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800e658:	2200      	movs	r2, #0
 800e65a:	2101      	movs	r1, #1
 800e65c:	200b      	movs	r0, #11
 800e65e:	f7f3 fa58 	bl	8001b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800e662:	200b      	movs	r0, #11
 800e664:	f7f3 fa6f 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 800e668:	2200      	movs	r2, #0
 800e66a:	2102      	movs	r1, #2
 800e66c:	200c      	movs	r0, #12
 800e66e:	f7f3 fa50 	bl	8001b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800e672:	200c      	movs	r0, #12
 800e674:	f7f3 fa67 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
 800e678:	2200      	movs	r2, #0
 800e67a:	2103      	movs	r1, #3
 800e67c:	200d      	movs	r0, #13
 800e67e:	f7f3 fa48 	bl	8001b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800e682:	200d      	movs	r0, #13
 800e684:	f7f3 fa5f 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
 800e688:	2200      	movs	r2, #0
 800e68a:	2104      	movs	r1, #4
 800e68c:	200e      	movs	r0, #14
 800e68e:	f7f3 fa40 	bl	8001b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800e692:	200e      	movs	r0, #14
 800e694:	f7f3 fa57 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800e698:	2200      	movs	r2, #0
 800e69a:	2105      	movs	r1, #5
 800e69c:	200f      	movs	r0, #15
 800e69e:	f7f3 fa38 	bl	8001b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800e6a2:	200f      	movs	r0, #15
 800e6a4:	f7f3 fa4f 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	2010      	movs	r0, #16
 800e6ae:	f7f3 fa30 	bl	8001b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800e6b2:	2010      	movs	r0, #16
 800e6b4:	f7f3 fa47 	bl	8001b46 <HAL_NVIC_EnableIRQ>

}
 800e6b8:	bf00      	nop
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	58024400 	.word	0x58024400

0800e6c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e6c8:	4904      	ldr	r1, [pc, #16]	; (800e6dc <MX_FATFS_Init+0x18>)
 800e6ca:	4805      	ldr	r0, [pc, #20]	; (800e6e0 <MX_FATFS_Init+0x1c>)
 800e6cc:	f7ff fc68 	bl	800dfa0 <FATFS_LinkDriver>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	4b03      	ldr	r3, [pc, #12]	; (800e6e4 <MX_FATFS_Init+0x20>)
 800e6d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800e6d8:	bf00      	nop
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	200003c0 	.word	0x200003c0
 800e6e0:	08012798 	.word	0x08012798
 800e6e4:	200003bc 	.word	0x200003bc

0800e6e8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e6ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f6:	4770      	bx	lr

0800e6f8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e6fe:	2301      	movs	r3, #1
 800e700:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e702:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e706:	480c      	ldr	r0, [pc, #48]	; (800e738 <BSP_PlatformIsDetected+0x40>)
 800e708:	f7f5 ff88 	bl	800461c <HAL_GPIO_ReadPin>
 800e70c:	4603      	mov	r3, r0
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d001      	beq.n	800e716 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e712:	2300      	movs	r3, #0
 800e714:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    status = SD_PRESENT;
 800e716:	2301      	movs	r3, #1
 800e718:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800e71a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e71e:	4806      	ldr	r0, [pc, #24]	; (800e738 <BSP_PlatformIsDetected+0x40>)
 800e720:	f7f5 ff7c 	bl	800461c <HAL_GPIO_ReadPin>
 800e724:	4603      	mov	r3, r0
 800e726:	2b01      	cmp	r3, #1
 800e728:	d001      	beq.n	800e72e <BSP_PlatformIsDetected+0x36>
    {
        status = SD_NOT_PRESENT;
 800e72a:	2300      	movs	r3, #0
 800e72c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE END 1 */ 
    return status;
 800e72e:	79fb      	ldrb	r3, [r7, #7]
}  
 800e730:	4618      	mov	r0, r3
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	58020800 	.word	0x58020800

0800e73c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b088      	sub	sp, #32
 800e740:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800e742:	1d3b      	adds	r3, r7, #4
 800e744:	2200      	movs	r2, #0
 800e746:	601a      	str	r2, [r3, #0]
 800e748:	605a      	str	r2, [r3, #4]
 800e74a:	609a      	str	r2, [r3, #8]
 800e74c:	60da      	str	r2, [r3, #12]
 800e74e:	611a      	str	r2, [r3, #16]
 800e750:	615a      	str	r2, [r3, #20]
 800e752:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800e754:	4b21      	ldr	r3, [pc, #132]	; (800e7dc <MX_FMC_Init+0xa0>)
 800e756:	4a22      	ldr	r2, [pc, #136]	; (800e7e0 <MX_FMC_Init+0xa4>)
 800e758:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800e75a:	4b20      	ldr	r3, [pc, #128]	; (800e7dc <MX_FMC_Init+0xa0>)
 800e75c:	2200      	movs	r2, #0
 800e75e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800e760:	4b1e      	ldr	r3, [pc, #120]	; (800e7dc <MX_FMC_Init+0xa0>)
 800e762:	2201      	movs	r2, #1
 800e764:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800e766:	4b1d      	ldr	r3, [pc, #116]	; (800e7dc <MX_FMC_Init+0xa0>)
 800e768:	2208      	movs	r2, #8
 800e76a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800e76c:	4b1b      	ldr	r3, [pc, #108]	; (800e7dc <MX_FMC_Init+0xa0>)
 800e76e:	2210      	movs	r2, #16
 800e770:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800e772:	4b1a      	ldr	r3, [pc, #104]	; (800e7dc <MX_FMC_Init+0xa0>)
 800e774:	2240      	movs	r2, #64	; 0x40
 800e776:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800e778:	4b18      	ldr	r3, [pc, #96]	; (800e7dc <MX_FMC_Init+0xa0>)
 800e77a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e77e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800e780:	4b16      	ldr	r3, [pc, #88]	; (800e7dc <MX_FMC_Init+0xa0>)
 800e782:	2200      	movs	r2, #0
 800e784:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800e786:	4b15      	ldr	r3, [pc, #84]	; (800e7dc <MX_FMC_Init+0xa0>)
 800e788:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800e78c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800e78e:	4b13      	ldr	r3, [pc, #76]	; (800e7dc <MX_FMC_Init+0xa0>)
 800e790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e794:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800e796:	4b11      	ldr	r3, [pc, #68]	; (800e7dc <MX_FMC_Init+0xa0>)
 800e798:	2200      	movs	r2, #0
 800e79a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800e79c:	2302      	movs	r3, #2
 800e79e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 800e7a0:	2306      	movs	r3, #6
 800e7a2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800e7a4:	2304      	movs	r3, #4
 800e7a6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 800e7a8:	2306      	movs	r3, #6
 800e7aa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800e7ac:	2302      	movs	r3, #2
 800e7ae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800e7b0:	2302      	movs	r3, #2
 800e7b2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800e7b4:	2302      	movs	r3, #2
 800e7b6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800e7b8:	1d3b      	adds	r3, r7, #4
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	4807      	ldr	r0, [pc, #28]	; (800e7dc <MX_FMC_Init+0xa0>)
 800e7be:	f7fb fc03 	bl	8009fc8 <HAL_SDRAM_Init>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d001      	beq.n	800e7cc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800e7c8:	f000 fde2 	bl	800f390 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800e7cc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800e7d0:	f7f1 fe42 	bl	8000458 <HAL_SetFMCMemorySwappingConfig>

}
 800e7d4:	bf00      	nop
 800e7d6:	3720      	adds	r7, #32
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	20000828 	.word	0x20000828
 800e7e0:	52004140 	.word	0x52004140

0800e7e4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b086      	sub	sp, #24
 800e7e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7ea:	1d3b      	adds	r3, r7, #4
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	601a      	str	r2, [r3, #0]
 800e7f0:	605a      	str	r2, [r3, #4]
 800e7f2:	609a      	str	r2, [r3, #8]
 800e7f4:	60da      	str	r2, [r3, #12]
 800e7f6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800e7f8:	4b34      	ldr	r3, [pc, #208]	; (800e8cc <HAL_FMC_MspInit+0xe8>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d161      	bne.n	800e8c4 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 800e800:	4b32      	ldr	r3, [pc, #200]	; (800e8cc <HAL_FMC_MspInit+0xe8>)
 800e802:	2201      	movs	r2, #1
 800e804:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800e806:	4b32      	ldr	r3, [pc, #200]	; (800e8d0 <HAL_FMC_MspInit+0xec>)
 800e808:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e80c:	4a30      	ldr	r2, [pc, #192]	; (800e8d0 <HAL_FMC_MspInit+0xec>)
 800e80e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e812:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800e816:	4b2e      	ldr	r3, [pc, #184]	; (800e8d0 <HAL_FMC_MspInit+0xec>)
 800e818:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e81c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e820:	603b      	str	r3, [r7, #0]
 800e822:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800e824:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800e828:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e82a:	2302      	movs	r3, #2
 800e82c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e82e:	2300      	movs	r3, #0
 800e830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e832:	2303      	movs	r3, #3
 800e834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e836:	230c      	movs	r3, #12
 800e838:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800e83a:	1d3b      	adds	r3, r7, #4
 800e83c:	4619      	mov	r1, r3
 800e83e:	4825      	ldr	r0, [pc, #148]	; (800e8d4 <HAL_FMC_MspInit+0xf0>)
 800e840:	f7f5 fd3c 	bl	80042bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800e844:	230d      	movs	r3, #13
 800e846:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e848:	2302      	movs	r3, #2
 800e84a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e84c:	2300      	movs	r3, #0
 800e84e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e850:	2303      	movs	r3, #3
 800e852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e854:	230c      	movs	r3, #12
 800e856:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e858:	1d3b      	adds	r3, r7, #4
 800e85a:	4619      	mov	r1, r3
 800e85c:	481e      	ldr	r0, [pc, #120]	; (800e8d8 <HAL_FMC_MspInit+0xf4>)
 800e85e:	f7f5 fd2d 	bl	80042bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800e862:	f248 1337 	movw	r3, #33079	; 0x8137
 800e866:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e868:	2302      	movs	r3, #2
 800e86a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e86c:	2300      	movs	r3, #0
 800e86e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e870:	2303      	movs	r3, #3
 800e872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e874:	230c      	movs	r3, #12
 800e876:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e878:	1d3b      	adds	r3, r7, #4
 800e87a:	4619      	mov	r1, r3
 800e87c:	4817      	ldr	r0, [pc, #92]	; (800e8dc <HAL_FMC_MspInit+0xf8>)
 800e87e:	f7f5 fd1d 	bl	80042bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800e882:	f64f 7383 	movw	r3, #65411	; 0xff83
 800e886:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e888:	2302      	movs	r3, #2
 800e88a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e88c:	2300      	movs	r3, #0
 800e88e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e890:	2303      	movs	r3, #3
 800e892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e894:	230c      	movs	r3, #12
 800e896:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e898:	1d3b      	adds	r3, r7, #4
 800e89a:	4619      	mov	r1, r3
 800e89c:	4810      	ldr	r0, [pc, #64]	; (800e8e0 <HAL_FMC_MspInit+0xfc>)
 800e89e:	f7f5 fd0d 	bl	80042bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800e8a2:	f24c 7303 	movw	r3, #50947	; 0xc703
 800e8a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8a8:	2302      	movs	r3, #2
 800e8aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8b0:	2303      	movs	r3, #3
 800e8b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e8b4:	230c      	movs	r3, #12
 800e8b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e8b8:	1d3b      	adds	r3, r7, #4
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	4809      	ldr	r0, [pc, #36]	; (800e8e4 <HAL_FMC_MspInit+0x100>)
 800e8be:	f7f5 fcfd 	bl	80042bc <HAL_GPIO_Init>
 800e8c2:	e000      	b.n	800e8c6 <HAL_FMC_MspInit+0xe2>
    return;
 800e8c4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800e8c6:	3718      	adds	r7, #24
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	200002d0 	.word	0x200002d0
 800e8d0:	58024400 	.word	0x58024400
 800e8d4:	58021400 	.word	0x58021400
 800e8d8:	58020800 	.word	0x58020800
 800e8dc:	58021800 	.word	0x58021800
 800e8e0:	58021000 	.word	0x58021000
 800e8e4:	58020c00 	.word	0x58020c00

0800e8e8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800e8f0:	f7ff ff78 	bl	800e7e4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800e8f4:	bf00      	nop
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b08e      	sub	sp, #56	; 0x38
 800e900:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e906:	2200      	movs	r2, #0
 800e908:	601a      	str	r2, [r3, #0]
 800e90a:	605a      	str	r2, [r3, #4]
 800e90c:	609a      	str	r2, [r3, #8]
 800e90e:	60da      	str	r2, [r3, #12]
 800e910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800e912:	4b8f      	ldr	r3, [pc, #572]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e918:	4a8d      	ldr	r2, [pc, #564]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e91a:	f043 0310 	orr.w	r3, r3, #16
 800e91e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e922:	4b8b      	ldr	r3, [pc, #556]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e928:	f003 0310 	and.w	r3, r3, #16
 800e92c:	623b      	str	r3, [r7, #32]
 800e92e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e930:	4b87      	ldr	r3, [pc, #540]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e936:	4a86      	ldr	r2, [pc, #536]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e938:	f043 0304 	orr.w	r3, r3, #4
 800e93c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e940:	4b83      	ldr	r3, [pc, #524]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e946:	f003 0304 	and.w	r3, r3, #4
 800e94a:	61fb      	str	r3, [r7, #28]
 800e94c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800e94e:	4b80      	ldr	r3, [pc, #512]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e954:	4a7e      	ldr	r2, [pc, #504]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e956:	f043 0320 	orr.w	r3, r3, #32
 800e95a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e95e:	4b7c      	ldr	r3, [pc, #496]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e964:	f003 0320 	and.w	r3, r3, #32
 800e968:	61bb      	str	r3, [r7, #24]
 800e96a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e96c:	4b78      	ldr	r3, [pc, #480]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e96e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e972:	4a77      	ldr	r2, [pc, #476]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e97c:	4b74      	ldr	r3, [pc, #464]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e97e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e986:	617b      	str	r3, [r7, #20]
 800e988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e98a:	4b71      	ldr	r3, [pc, #452]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e98c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e990:	4a6f      	ldr	r2, [pc, #444]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e992:	f043 0301 	orr.w	r3, r3, #1
 800e996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e99a:	4b6d      	ldr	r3, [pc, #436]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e99c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e9a0:	f003 0301 	and.w	r3, r3, #1
 800e9a4:	613b      	str	r3, [r7, #16]
 800e9a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e9a8:	4b69      	ldr	r3, [pc, #420]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e9aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e9ae:	4a68      	ldr	r2, [pc, #416]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e9b0:	f043 0302 	orr.w	r3, r3, #2
 800e9b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e9b8:	4b65      	ldr	r3, [pc, #404]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e9ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e9be:	f003 0302 	and.w	r3, r3, #2
 800e9c2:	60fb      	str	r3, [r7, #12]
 800e9c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800e9c6:	4b62      	ldr	r3, [pc, #392]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e9c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e9cc:	4a60      	ldr	r2, [pc, #384]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e9ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e9d6:	4b5e      	ldr	r3, [pc, #376]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e9d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e9dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9e0:	60bb      	str	r3, [r7, #8]
 800e9e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e9e4:	4b5a      	ldr	r3, [pc, #360]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e9e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e9ea:	4a59      	ldr	r2, [pc, #356]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e9ec:	f043 0308 	orr.w	r3, r3, #8
 800e9f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e9f4:	4b56      	ldr	r3, [pc, #344]	; (800eb50 <MX_GPIO_Init+0x254>)
 800e9f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e9fa:	f003 0308 	and.w	r3, r3, #8
 800e9fe:	607b      	str	r3, [r7, #4]
 800ea00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800ea02:	2200      	movs	r2, #0
 800ea04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ea08:	4852      	ldr	r0, [pc, #328]	; (800eb54 <MX_GPIO_Init+0x258>)
 800ea0a:	f7f5 fe1f 	bl	800464c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800ea0e:	2200      	movs	r2, #0
 800ea10:	2180      	movs	r1, #128	; 0x80
 800ea12:	4851      	ldr	r0, [pc, #324]	; (800eb58 <MX_GPIO_Init+0x25c>)
 800ea14:	f7f5 fe1a 	bl	800464c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2110      	movs	r1, #16
 800ea1c:	484f      	ldr	r0, [pc, #316]	; (800eb5c <MX_GPIO_Init+0x260>)
 800ea1e:	f7f5 fe15 	bl	800464c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800ea22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ea2c:	2302      	movs	r3, #2
 800ea2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ea30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea34:	4619      	mov	r1, r3
 800ea36:	4847      	ldr	r0, [pc, #284]	; (800eb54 <MX_GPIO_Init+0x258>)
 800ea38:	f7f5 fc40 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800ea3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ea40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ea42:	2301      	movs	r3, #1
 800ea44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ea46:	2302      	movs	r3, #2
 800ea48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ea4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea52:	4619      	mov	r1, r3
 800ea54:	483f      	ldr	r0, [pc, #252]	; (800eb54 <MX_GPIO_Init+0x258>)
 800ea56:	f7f5 fc31 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800ea5a:	f248 03c2 	movw	r3, #32962	; 0x80c2
 800ea5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ea60:	2303      	movs	r3, #3
 800ea62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea64:	2300      	movs	r3, #0
 800ea66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ea68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	4839      	ldr	r0, [pc, #228]	; (800eb54 <MX_GPIO_Init+0x258>)
 800ea70:	f7f5 fc24 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800ea74:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800ea78:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ea7a:	2303      	movs	r3, #3
 800ea7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ea82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea86:	4619      	mov	r1, r3
 800ea88:	4835      	ldr	r0, [pc, #212]	; (800eb60 <MX_GPIO_Init+0x264>)
 800ea8a:	f7f5 fc17 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
 800ea8e:	f240 33e7 	movw	r3, #999	; 0x3e7
 800ea92:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ea94:	2303      	movs	r3, #3
 800ea96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ea9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	482e      	ldr	r0, [pc, #184]	; (800eb5c <MX_GPIO_Init+0x260>)
 800eaa4:	f7f5 fc0a 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800eaa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eaac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800eaae:	4b2d      	ldr	r3, [pc, #180]	; (800eb64 <MX_GPIO_Init+0x268>)
 800eab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eab2:	2300      	movs	r3, #0
 800eab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800eab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eaba:	4619      	mov	r1, r3
 800eabc:	482a      	ldr	r0, [pc, #168]	; (800eb68 <MX_GPIO_Init+0x26c>)
 800eabe:	f7f5 fbfd 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 PD4 
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 800eac2:	f243 0378 	movw	r3, #12408	; 0x3078
 800eac6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800eac8:	2303      	movs	r3, #3
 800eaca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eacc:	2300      	movs	r3, #0
 800eace:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ead0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ead4:	4619      	mov	r1, r3
 800ead6:	4824      	ldr	r0, [pc, #144]	; (800eb68 <MX_GPIO_Init+0x26c>)
 800ead8:	f7f5 fbf0 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG12 PG13 
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13 
 800eadc:	f247 0348 	movw	r3, #28744	; 0x7048
 800eae0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800eae2:	2303      	movs	r3, #3
 800eae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eae6:	2300      	movs	r3, #0
 800eae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800eaea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eaee:	4619      	mov	r1, r3
 800eaf0:	4819      	ldr	r0, [pc, #100]	; (800eb58 <MX_GPIO_Init+0x25c>)
 800eaf2:	f7f5 fbe3 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800eaf6:	2380      	movs	r3, #128	; 0x80
 800eaf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eafa:	2301      	movs	r3, #1
 800eafc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eafe:	2300      	movs	r3, #0
 800eb00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb02:	2300      	movs	r3, #0
 800eb04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800eb06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	4812      	ldr	r0, [pc, #72]	; (800eb58 <MX_GPIO_Init+0x25c>)
 800eb0e:	f7f5 fbd5 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800eb12:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 800eb16:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800eb18:	2303      	movs	r3, #3
 800eb1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb24:	4619      	mov	r1, r3
 800eb26:	4811      	ldr	r0, [pc, #68]	; (800eb6c <MX_GPIO_Init+0x270>)
 800eb28:	f7f5 fbc8 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800eb2c:	2310      	movs	r3, #16
 800eb2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eb30:	2301      	movs	r3, #1
 800eb32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb34:	2300      	movs	r3, #0
 800eb36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb40:	4619      	mov	r1, r3
 800eb42:	4806      	ldr	r0, [pc, #24]	; (800eb5c <MX_GPIO_Init+0x260>)
 800eb44:	f7f5 fbba 	bl	80042bc <HAL_GPIO_Init>

}
 800eb48:	bf00      	nop
 800eb4a:	3738      	adds	r7, #56	; 0x38
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	58024400 	.word	0x58024400
 800eb54:	58020800 	.word	0x58020800
 800eb58:	58021800 	.word	0x58021800
 800eb5c:	58020400 	.word	0x58020400
 800eb60:	58021400 	.word	0x58021400
 800eb64:	11110000 	.word	0x11110000
 800eb68:	58020c00 	.word	0x58020c00
 800eb6c:	58020000 	.word	0x58020000

0800eb70 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800eb74:	4b1b      	ldr	r3, [pc, #108]	; (800ebe4 <MX_I2C2_Init+0x74>)
 800eb76:	4a1c      	ldr	r2, [pc, #112]	; (800ebe8 <MX_I2C2_Init+0x78>)
 800eb78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800eb7a:	4b1a      	ldr	r3, [pc, #104]	; (800ebe4 <MX_I2C2_Init+0x74>)
 800eb7c:	4a1b      	ldr	r2, [pc, #108]	; (800ebec <MX_I2C2_Init+0x7c>)
 800eb7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800eb80:	4b18      	ldr	r3, [pc, #96]	; (800ebe4 <MX_I2C2_Init+0x74>)
 800eb82:	2200      	movs	r2, #0
 800eb84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800eb86:	4b17      	ldr	r3, [pc, #92]	; (800ebe4 <MX_I2C2_Init+0x74>)
 800eb88:	2201      	movs	r2, #1
 800eb8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800eb8c:	4b15      	ldr	r3, [pc, #84]	; (800ebe4 <MX_I2C2_Init+0x74>)
 800eb8e:	2200      	movs	r2, #0
 800eb90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800eb92:	4b14      	ldr	r3, [pc, #80]	; (800ebe4 <MX_I2C2_Init+0x74>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800eb98:	4b12      	ldr	r3, [pc, #72]	; (800ebe4 <MX_I2C2_Init+0x74>)
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800eb9e:	4b11      	ldr	r3, [pc, #68]	; (800ebe4 <MX_I2C2_Init+0x74>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800eba4:	4b0f      	ldr	r3, [pc, #60]	; (800ebe4 <MX_I2C2_Init+0x74>)
 800eba6:	2200      	movs	r2, #0
 800eba8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800ebaa:	480e      	ldr	r0, [pc, #56]	; (800ebe4 <MX_I2C2_Init+0x74>)
 800ebac:	f7f5 fd68 	bl	8004680 <HAL_I2C_Init>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d001      	beq.n	800ebba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800ebb6:	f000 fbeb 	bl	800f390 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ebba:	2100      	movs	r1, #0
 800ebbc:	4809      	ldr	r0, [pc, #36]	; (800ebe4 <MX_I2C2_Init+0x74>)
 800ebbe:	f7f5 fdef 	bl	80047a0 <HAL_I2CEx_ConfigAnalogFilter>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d001      	beq.n	800ebcc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800ebc8:	f000 fbe2 	bl	800f390 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800ebcc:	2100      	movs	r1, #0
 800ebce:	4805      	ldr	r0, [pc, #20]	; (800ebe4 <MX_I2C2_Init+0x74>)
 800ebd0:	f7f5 fe31 	bl	8004836 <HAL_I2CEx_ConfigDigitalFilter>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d001      	beq.n	800ebde <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800ebda:	f000 fbd9 	bl	800f390 <Error_Handler>
  }

}
 800ebde:	bf00      	nop
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	2000085c 	.word	0x2000085c
 800ebe8:	40005800 	.word	0x40005800
 800ebec:	00b03fdb 	.word	0x00b03fdb

0800ebf0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b08a      	sub	sp, #40	; 0x28
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ebf8:	f107 0314 	add.w	r3, r7, #20
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	601a      	str	r2, [r3, #0]
 800ec00:	605a      	str	r2, [r3, #4]
 800ec02:	609a      	str	r2, [r3, #8]
 800ec04:	60da      	str	r2, [r3, #12]
 800ec06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a1a      	ldr	r2, [pc, #104]	; (800ec78 <HAL_I2C_MspInit+0x88>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d12e      	bne.n	800ec70 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ec12:	4b1a      	ldr	r3, [pc, #104]	; (800ec7c <HAL_I2C_MspInit+0x8c>)
 800ec14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec18:	4a18      	ldr	r2, [pc, #96]	; (800ec7c <HAL_I2C_MspInit+0x8c>)
 800ec1a:	f043 0302 	orr.w	r3, r3, #2
 800ec1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ec22:	4b16      	ldr	r3, [pc, #88]	; (800ec7c <HAL_I2C_MspInit+0x8c>)
 800ec24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec28:	f003 0302 	and.w	r3, r3, #2
 800ec2c:	613b      	str	r3, [r7, #16]
 800ec2e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ec30:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ec34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ec36:	2312      	movs	r3, #18
 800ec38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec3e:	2303      	movs	r3, #3
 800ec40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800ec42:	2304      	movs	r3, #4
 800ec44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ec46:	f107 0314 	add.w	r3, r7, #20
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	480c      	ldr	r0, [pc, #48]	; (800ec80 <HAL_I2C_MspInit+0x90>)
 800ec4e:	f7f5 fb35 	bl	80042bc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800ec52:	4b0a      	ldr	r3, [pc, #40]	; (800ec7c <HAL_I2C_MspInit+0x8c>)
 800ec54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ec58:	4a08      	ldr	r2, [pc, #32]	; (800ec7c <HAL_I2C_MspInit+0x8c>)
 800ec5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ec5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ec62:	4b06      	ldr	r3, [pc, #24]	; (800ec7c <HAL_I2C_MspInit+0x8c>)
 800ec64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ec68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec6c:	60fb      	str	r3, [r7, #12]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800ec70:	bf00      	nop
 800ec72:	3728      	adds	r7, #40	; 0x28
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	40005800 	.word	0x40005800
 800ec7c:	58024400 	.word	0x58024400
 800ec80:	58020400 	.word	0x58020400

0800ec84 <SCB_EnableICache>:
{
 800ec84:	b480      	push	{r7}
 800ec86:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ec88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ec8c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800ec90:	4b0b      	ldr	r3, [pc, #44]	; (800ecc0 <SCB_EnableICache+0x3c>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800ec98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ec9c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800eca0:	4b07      	ldr	r3, [pc, #28]	; (800ecc0 <SCB_EnableICache+0x3c>)
 800eca2:	695b      	ldr	r3, [r3, #20]
 800eca4:	4a06      	ldr	r2, [pc, #24]	; (800ecc0 <SCB_EnableICache+0x3c>)
 800eca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ecaa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800ecac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ecb0:	f3bf 8f6f 	isb	sy
}
 800ecb4:	bf00      	nop
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbc:	4770      	bx	lr
 800ecbe:	bf00      	nop
 800ecc0:	e000ed00 	.word	0xe000ed00

0800ecc4 <SCB_EnableDCache>:
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800ecca:	4b1d      	ldr	r3, [pc, #116]	; (800ed40 <SCB_EnableDCache+0x7c>)
 800eccc:	2200      	movs	r2, #0
 800ecce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800ecd2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800ecd6:	4b1a      	ldr	r3, [pc, #104]	; (800ed40 <SCB_EnableDCache+0x7c>)
 800ecd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ecdc:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	0b5b      	lsrs	r3, r3, #13
 800ece2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ece6:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	08db      	lsrs	r3, r3, #3
 800ecec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ecf0:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	015a      	lsls	r2, r3, #5
 800ecf6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800ecfa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800ecfc:	68ba      	ldr	r2, [r7, #8]
 800ecfe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ed00:	490f      	ldr	r1, [pc, #60]	; (800ed40 <SCB_EnableDCache+0x7c>)
 800ed02:	4313      	orrs	r3, r2
 800ed04:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	1e5a      	subs	r2, r3, #1
 800ed0c:	60ba      	str	r2, [r7, #8]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d1ef      	bne.n	800ecf2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	1e5a      	subs	r2, r3, #1
 800ed16:	60fa      	str	r2, [r7, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d1e5      	bne.n	800ece8 <SCB_EnableDCache+0x24>
 800ed1c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800ed20:	4b07      	ldr	r3, [pc, #28]	; (800ed40 <SCB_EnableDCache+0x7c>)
 800ed22:	695b      	ldr	r3, [r3, #20]
 800ed24:	4a06      	ldr	r2, [pc, #24]	; (800ed40 <SCB_EnableDCache+0x7c>)
 800ed26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ed2a:	6153      	str	r3, [r2, #20]
 800ed2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ed30:	f3bf 8f6f 	isb	sy
}
 800ed34:	bf00      	nop
 800ed36:	3714      	adds	r7, #20
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr
 800ed40:	e000ed00 	.word	0xe000ed00

0800ed44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b088      	sub	sp, #32
 800ed48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  MPU_Conf();
 800ed4a:	f000 fa89 	bl	800f260 <MPU_Conf>
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800ed4e:	f7ff ff99 	bl	800ec84 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800ed52:	f7ff ffb7 	bl	800ecc4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ed56:	f7f1 fabf 	bl	80002d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ed5a:	f000 f8a7 	bl	800eeac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ed5e:	f7ff fdcd 	bl	800e8fc <MX_GPIO_Init>
  MX_DMA_Init();
 800ed62:	f7ff fc67 	bl	800e634 <MX_DMA_Init>
  MX_FMC_Init();
 800ed66:	f7ff fce9 	bl	800e73c <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 800ed6a:	f001 fb4b 	bl	8010404 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800ed6e:	f7ff fca9 	bl	800e6c4 <MX_FATFS_Init>
  MX_SAI1_Init();
 800ed72:	f001 f90b 	bl	800ff8c <MX_SAI1_Init>
  MX_RNG_Init();
 800ed76:	f001 f8d1 	bl	800ff1c <MX_RNG_Init>
  MX_SPI2_Init();
 800ed7a:	f001 fc31 	bl	80105e0 <MX_SPI2_Init>
  MX_I2C2_Init();
 800ed7e:	f7ff fef7 	bl	800eb70 <MX_I2C2_Init>
  MX_ADC1_Init();
 800ed82:	f7ff f9e3 	bl	800e14c <MX_ADC1_Init>
  MX_SPI1_Init();
 800ed86:	f001 fbd3 	bl	8010530 <MX_SPI1_Init>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800ed8a:	eef1 3a10 	vmrs	r3, fpscr
 800ed8e:	603b      	str	r3, [r7, #0]
  return(result);
 800ed90:	683b      	ldr	r3, [r7, #0]
  /* USER CODE BEGIN 2 */
  uint32_t tempFPURegisterVal = __get_FPSCR();
 800ed92:	617b      	str	r3, [r7, #20]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ed9a:	617b      	str	r3, [r7, #20]
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	eee1 3a10 	vmsr	fpscr, r3
  __set_FPSCR(tempFPURegisterVal);

  for (int i = 0; i < 16; i++)
 800eda6:	2300      	movs	r3, #0
 800eda8:	61fb      	str	r3, [r7, #28]
 800edaa:	e00c      	b.n	800edc6 <main+0x82>
  {
	  SPI_TX[i] = counter++;
 800edac:	4b2f      	ldr	r3, [pc, #188]	; (800ee6c <main+0x128>)
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	1c5a      	adds	r2, r3, #1
 800edb2:	b2d1      	uxtb	r1, r2
 800edb4:	4a2d      	ldr	r2, [pc, #180]	; (800ee6c <main+0x128>)
 800edb6:	7011      	strb	r1, [r2, #0]
 800edb8:	492d      	ldr	r1, [pc, #180]	; (800ee70 <main+0x12c>)
 800edba:	69fa      	ldr	r2, [r7, #28]
 800edbc:	440a      	add	r2, r1
 800edbe:	7013      	strb	r3, [r2, #0]
  for (int i = 0; i < 16; i++)
 800edc0:	69fb      	ldr	r3, [r7, #28]
 800edc2:	3301      	adds	r3, #1
 800edc4:	61fb      	str	r3, [r7, #28]
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	2b0f      	cmp	r3, #15
 800edca:	ddef      	ble.n	800edac <main+0x68>
  }

  HAL_SPI_TransmitReceive_DMA(&hspi2, SPI_TX, SPI_RX, 16);
 800edcc:	2310      	movs	r3, #16
 800edce:	4a29      	ldr	r2, [pc, #164]	; (800ee74 <main+0x130>)
 800edd0:	4927      	ldr	r1, [pc, #156]	; (800ee70 <main+0x12c>)
 800edd2:	4829      	ldr	r0, [pc, #164]	; (800ee78 <main+0x134>)
 800edd4:	f7fb fa8a 	bl	800a2ec <HAL_SPI_TransmitReceive_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800edd8:	2201      	movs	r2, #1
 800edda:	2140      	movs	r1, #64	; 0x40
 800eddc:	4827      	ldr	r0, [pc, #156]	; (800ee7c <main+0x138>)
 800edde:	f7f5 fc35 	bl	800464c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800ede2:	200a      	movs	r0, #10
 800ede4:	f7f1 fb0a 	bl	80003fc <HAL_Delay>

  SDRAM_Initialization_sequence();
 800ede8:	f000 f986 	bl	800f0f8 <SDRAM_Initialization_sequence>
  HAL_Delay(10);
 800edec:	200a      	movs	r0, #10
 800edee:	f7f1 fb05 	bl	80003fc <HAL_Delay>


  int transmit_status = HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800edf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800edf6:	4922      	ldr	r1, [pc, #136]	; (800ee80 <main+0x13c>)
 800edf8:	4822      	ldr	r0, [pc, #136]	; (800ee84 <main+0x140>)
 800edfa:	f7f8 feef 	bl	8007bdc <HAL_SAI_Transmit_DMA>
 800edfe:	4603      	mov	r3, r0
 800ee00:	613b      	str	r3, [r7, #16]
  int receive_status = HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 800ee02:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee06:	4920      	ldr	r1, [pc, #128]	; (800ee88 <main+0x144>)
 800ee08:	4820      	ldr	r0, [pc, #128]	; (800ee8c <main+0x148>)
 800ee0a:	f7f8 ff9d 	bl	8007d48 <HAL_SAI_Receive_DMA>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	60fb      	str	r3, [r7, #12]

 if(BSP_SD_IsDetected())
 800ee12:	f7ff fbfd 	bl	800e610 <BSP_SD_IsDetected>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d001      	beq.n	800ee20 <main+0xdc>
 {
   FS_FileOperations();
 800ee1c:	f000 f9d0 	bl	800f1c0 <FS_FileOperations>
 }
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 800ee20:	4b1b      	ldr	r3, [pc, #108]	; (800ee90 <main+0x14c>)
 800ee22:	4a1c      	ldr	r2, [pc, #112]	; (800ee94 <main+0x150>)
 800ee24:	491c      	ldr	r1, [pc, #112]	; (800ee98 <main+0x154>)
 800ee26:	2080      	movs	r0, #128	; 0x80
 800ee28:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800ee9c <main+0x158>
 800ee2c:	f002 f95e 	bl	80110ec <LEAF_init>

	//tMempool_init (&mediumPool, mediumMemory, MEDIUM_MEM_SIZE);
 for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 800ee30:	2300      	movs	r3, #0
 800ee32:	61bb      	str	r3, [r7, #24]
 800ee34:	e009      	b.n	800ee4a <main+0x106>
 {
	 tPluckDetectorInt_init(&myPluck[j]);
 800ee36:	69bb      	ldr	r3, [r7, #24]
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	4a19      	ldr	r2, [pc, #100]	; (800eea0 <main+0x15c>)
 800ee3c:	4413      	add	r3, r2
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f000 fac2 	bl	800f3c8 <tPluckDetectorInt_init>
 for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	3301      	adds	r3, #1
 800ee48:	61bb      	str	r3, [r7, #24]
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	2b09      	cmp	r3, #9
 800ee4e:	ddf2      	ble.n	800ee36 <main+0xf2>
 }

 HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 800ee50:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ee54:	4913      	ldr	r1, [pc, #76]	; (800eea4 <main+0x160>)
 800ee56:	4814      	ldr	r0, [pc, #80]	; (800eea8 <main+0x164>)
 800ee58:	f7f1 fe8e 	bl	8000b78 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  int tempIntGP = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800ee5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ee60:	4806      	ldr	r0, [pc, #24]	; (800ee7c <main+0x138>)
 800ee62:	f7f5 fbdb 	bl	800461c <HAL_GPIO_ReadPin>
 800ee66:	4603      	mov	r3, r0
 800ee68:	60bb      	str	r3, [r7, #8]
  {
 800ee6a:	e7f7      	b.n	800ee5c <main+0x118>
 800ee6c:	2000cd41 	.word	0x2000cd41
 800ee70:	30000000 	.word	0x30000000
 800ee74:	30000020 	.word	0x30000020
 800ee78:	2000fda4 	.word	0x2000fda4
 800ee7c:	58020800 	.word	0x58020800
 800ee80:	30000040 	.word	0x30000040
 800ee84:	2000fc8c 	.word	0x2000fc8c
 800ee88:	30000840 	.word	0x30000840
 800ee8c:	2000fb04 	.word	0x2000fb04
 800ee90:	0800f0b9 	.word	0x0800f0b9
 800ee94:	00061a80 	.word	0x00061a80
 800ee98:	24000000 	.word	0x24000000
 800ee9c:	473b8000 	.word	0x473b8000
 800eea0:	2000c8ac 	.word	0x2000c8ac
 800eea4:	30001040 	.word	0x30001040
 800eea8:	200002e0 	.word	0x200002e0

0800eeac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b0cc      	sub	sp, #304	; 0x130
 800eeb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800eeb2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800eeb6:	224c      	movs	r2, #76	; 0x4c
 800eeb8:	2100      	movs	r1, #0
 800eeba:	4618      	mov	r0, r3
 800eebc:	f002 f9c8 	bl	8011250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800eec0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800eec4:	2220      	movs	r2, #32
 800eec6:	2100      	movs	r1, #0
 800eec8:	4618      	mov	r0, r3
 800eeca:	f002 f9c1 	bl	8011250 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800eece:	f107 0308 	add.w	r3, r7, #8
 800eed2:	4618      	mov	r0, r3
 800eed4:	23bc      	movs	r3, #188	; 0xbc
 800eed6:	461a      	mov	r2, r3
 800eed8:	2100      	movs	r1, #0
 800eeda:	f002 f9b9 	bl	8011250 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800eede:	2002      	movs	r0, #2
 800eee0:	f7f5 fcf6 	bl	80048d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800eee4:	1d3b      	adds	r3, r7, #4
 800eee6:	2200      	movs	r2, #0
 800eee8:	601a      	str	r2, [r3, #0]
 800eeea:	4b6f      	ldr	r3, [pc, #444]	; (800f0a8 <SystemClock_Config+0x1fc>)
 800eeec:	699b      	ldr	r3, [r3, #24]
 800eeee:	4a6e      	ldr	r2, [pc, #440]	; (800f0a8 <SystemClock_Config+0x1fc>)
 800eef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eef4:	6193      	str	r3, [r2, #24]
 800eef6:	4b6c      	ldr	r3, [pc, #432]	; (800f0a8 <SystemClock_Config+0x1fc>)
 800eef8:	699b      	ldr	r3, [r3, #24]
 800eefa:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800eefe:	1d3b      	adds	r3, r7, #4
 800ef00:	601a      	str	r2, [r3, #0]
 800ef02:	4b6a      	ldr	r3, [pc, #424]	; (800f0ac <SystemClock_Config+0x200>)
 800ef04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef06:	4a69      	ldr	r2, [pc, #420]	; (800f0ac <SystemClock_Config+0x200>)
 800ef08:	f043 0301 	orr.w	r3, r3, #1
 800ef0c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ef0e:	4b67      	ldr	r3, [pc, #412]	; (800f0ac <SystemClock_Config+0x200>)
 800ef10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef12:	f003 0201 	and.w	r2, r3, #1
 800ef16:	1d3b      	adds	r3, r7, #4
 800ef18:	601a      	str	r2, [r3, #0]
 800ef1a:	1d3b      	adds	r3, r7, #4
 800ef1c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800ef1e:	bf00      	nop
 800ef20:	4b61      	ldr	r3, [pc, #388]	; (800f0a8 <SystemClock_Config+0x1fc>)
 800ef22:	699b      	ldr	r3, [r3, #24]
 800ef24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ef28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef2c:	d1f8      	bne.n	800ef20 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800ef2e:	4b60      	ldr	r3, [pc, #384]	; (800f0b0 <SystemClock_Config+0x204>)
 800ef30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef32:	f023 0303 	bic.w	r3, r3, #3
 800ef36:	4a5e      	ldr	r2, [pc, #376]	; (800f0b0 <SystemClock_Config+0x204>)
 800ef38:	f043 0302 	orr.w	r3, r3, #2
 800ef3c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800ef3e:	2323      	movs	r3, #35	; 0x23
 800ef40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ef44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ef48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ef52:	2340      	movs	r3, #64	; 0x40
 800ef54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ef5e:	2302      	movs	r3, #2
 800ef60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ef64:	2302      	movs	r3, #2
 800ef66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800ef6a:	2305      	movs	r3, #5
 800ef6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 800ef70:	23c0      	movs	r3, #192	; 0xc0
 800ef72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800ef76:	2302      	movs	r3, #2
 800ef78:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800ef7c:	2302      	movs	r3, #2
 800ef7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800ef82:	2302      	movs	r3, #2
 800ef84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800ef88:	2308      	movs	r3, #8
 800ef8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800ef94:	2300      	movs	r3, #0
 800ef96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ef9a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7f5 fcd0 	bl	8004944 <HAL_RCC_OscConfig>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d001      	beq.n	800efae <SystemClock_Config+0x102>
  {
    Error_Handler();
 800efaa:	f000 f9f1 	bl	800f390 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800efae:	233f      	movs	r3, #63	; 0x3f
 800efb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800efb4:	2303      	movs	r3, #3
 800efb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800efba:	2300      	movs	r3, #0
 800efbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800efc0:	2308      	movs	r3, #8
 800efc2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800efc6:	2340      	movs	r3, #64	; 0x40
 800efc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800efcc:	2340      	movs	r3, #64	; 0x40
 800efce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800efd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800efda:	2340      	movs	r3, #64	; 0x40
 800efdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800efe0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800efe4:	2104      	movs	r1, #4
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7f6 f884 	bl	80050f4 <HAL_RCC_ClockConfig>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d001      	beq.n	800eff6 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800eff2:	f000 f9cd 	bl	800f390 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SPI1
 800eff6:	f107 0308 	add.w	r3, r7, #8
 800effa:	4a2e      	ldr	r2, [pc, #184]	; (800f0b4 <SystemClock_Config+0x208>)
 800effc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FMC
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800effe:	f107 0308 	add.w	r3, r7, #8
 800f002:	2219      	movs	r2, #25
 800f004:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800f006:	f107 0308 	add.w	r3, r7, #8
 800f00a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800f00e:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800f010:	f107 0308 	add.w	r3, r7, #8
 800f014:	2207      	movs	r2, #7
 800f016:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800f018:	f107 0308 	add.w	r3, r7, #8
 800f01c:	2202      	movs	r2, #2
 800f01e:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800f020:	f107 0308 	add.w	r3, r7, #8
 800f024:	2202      	movs	r2, #2
 800f026:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800f028:	f107 0308 	add.w	r3, r7, #8
 800f02c:	2200      	movs	r2, #0
 800f02e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800f030:	f107 0308 	add.w	r3, r7, #8
 800f034:	2200      	movs	r2, #0
 800f036:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800f038:	f107 0308 	add.w	r3, r7, #8
 800f03c:	2200      	movs	r2, #0
 800f03e:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800f040:	f107 0308 	add.w	r3, r7, #8
 800f044:	2200      	movs	r2, #0
 800f046:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800f048:	f107 0308 	add.w	r3, r7, #8
 800f04c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f050:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800f052:	f107 0308 	add.w	r3, r7, #8
 800f056:	2200      	movs	r2, #0
 800f058:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800f05a:	f107 0308 	add.w	r3, r7, #8
 800f05e:	2201      	movs	r2, #1
 800f060:	655a      	str	r2, [r3, #84]	; 0x54
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800f062:	f107 0308 	add.w	r3, r7, #8
 800f066:	2200      	movs	r2, #0
 800f068:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800f06a:	f107 0308 	add.w	r3, r7, #8
 800f06e:	2200      	movs	r2, #0
 800f070:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800f072:	f107 0308 	add.w	r3, r7, #8
 800f076:	2200      	movs	r2, #0
 800f078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800f07c:	f107 0308 	add.w	r3, r7, #8
 800f080:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f084:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f088:	f107 0308 	add.w	r3, r7, #8
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7f6 fb89 	bl	80057a4 <HAL_RCCEx_PeriphCLKConfig>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	d001      	beq.n	800f09c <SystemClock_Config+0x1f0>
  {
    Error_Handler();
 800f098:	f000 f97a 	bl	800f390 <Error_Handler>
  }
}
 800f09c:	bf00      	nop
 800f09e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	58024800 	.word	0x58024800
 800f0ac:	58000400 	.word	0x58000400
 800f0b0:	58024400 	.word	0x58024400
 800f0b4:	810b1108 	.word	0x810b1108

0800f0b8 <randomNumber>:

/* USER CODE BEGIN 4 */


float randomNumber(void) {
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800f0be:	463b      	mov	r3, r7
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	480b      	ldr	r0, [pc, #44]	; (800f0f0 <randomNumber+0x38>)
 800f0c4:	f7f8 fa7d 	bl	80075c2 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	ee07 3a90 	vmov	s15, r3
 800f0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0d2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800f0f4 <randomNumber+0x3c>
 800f0d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0da:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	ee07 3a90 	vmov	s15, r3
}
 800f0e4:	eeb0 0a67 	vmov.f32	s0, s15
 800f0e8:	3708      	adds	r7, #8
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	2000faf0 	.word	0x2000faf0
 800f0f4:	2f80000d 	.word	0x2f80000d

0800f0f8 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b086      	sub	sp, #24
 800f0fc:	af00      	add	r7, sp, #0
    __IO uint32_t tmpmrd = 0;
 800f0fe:	2300      	movs	r3, #0
 800f100:	617b      	str	r3, [r7, #20]
    FMC_SDRAM_CommandTypeDef Command;
    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800f102:	2301      	movs	r3, #1
 800f104:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800f106:	2310      	movs	r3, #16
 800f108:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 800f10a:	2301      	movs	r3, #1
 800f10c:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800f112:	1d3b      	adds	r3, r7, #4
 800f114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f118:	4619      	mov	r1, r3
 800f11a:	4828      	ldr	r0, [pc, #160]	; (800f1bc <SDRAM_Initialization_sequence+0xc4>)
 800f11c:	f7fa ff90 	bl	800a040 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800f120:	2001      	movs	r0, #1
 800f122:	f7f1 f96b 	bl	80003fc <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800f126:	2302      	movs	r3, #2
 800f128:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800f12a:	2310      	movs	r3, #16
 800f12c:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 800f12e:	2301      	movs	r3, #1
 800f130:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800f132:	2300      	movs	r3, #0
 800f134:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800f136:	1d3b      	adds	r3, r7, #4
 800f138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f13c:	4619      	mov	r1, r3
 800f13e:	481f      	ldr	r0, [pc, #124]	; (800f1bc <SDRAM_Initialization_sequence+0xc4>)
 800f140:	f7fa ff7e 	bl	800a040 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800f144:	f240 2322 	movw	r3, #546	; 0x222
 800f148:	617b      	str	r3, [r7, #20]
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800f14a:	2304      	movs	r3, #4
 800f14c:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800f14e:	2310      	movs	r3, #16
 800f150:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 800f152:	2301      	movs	r3, #1
 800f154:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800f15a:	1d3b      	adds	r3, r7, #4
 800f15c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f160:	4619      	mov	r1, r3
 800f162:	4816      	ldr	r0, [pc, #88]	; (800f1bc <SDRAM_Initialization_sequence+0xc4>)
 800f164:	f7fa ff6c 	bl	800a040 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800f168:	2303      	movs	r3, #3
 800f16a:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800f16c:	2310      	movs	r3, #16
 800f16e:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 800f170:	2308      	movs	r3, #8
 800f172:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800f174:	2300      	movs	r3, #0
 800f176:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800f178:	1d3b      	adds	r3, r7, #4
 800f17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f17e:	4619      	mov	r1, r3
 800f180:	480e      	ldr	r0, [pc, #56]	; (800f1bc <SDRAM_Initialization_sequence+0xc4>)
 800f182:	f7fa ff5d 	bl	800a040 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800f186:	2001      	movs	r0, #1
 800f188:	f7f1 f938 	bl	80003fc <HAL_Delay>

    /* Step 5: Configure the 2nd Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800f18c:	2303      	movs	r3, #3
 800f18e:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800f190:	2310      	movs	r3, #16
 800f192:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 800f194:	2308      	movs	r3, #8
 800f196:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800f198:	2300      	movs	r3, #0
 800f19a:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800f19c:	1d3b      	adds	r3, r7, #4
 800f19e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	4805      	ldr	r0, [pc, #20]	; (800f1bc <SDRAM_Initialization_sequence+0xc4>)
 800f1a6:	f7fa ff4b 	bl	800a040 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 800f1aa:	f240 5169 	movw	r1, #1385	; 0x569
 800f1ae:	4803      	ldr	r0, [pc, #12]	; (800f1bc <SDRAM_Initialization_sequence+0xc4>)
 800f1b0:	f7fa ff7b 	bl	800a0aa <HAL_SDRAM_ProgramRefreshRate>
}
 800f1b4:	bf00      	nop
 800f1b6:	3718      	adds	r7, #24
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}
 800f1bc:	20000828 	.word	0x20000828

0800f1c0 <FS_FileOperations>:
uint8_t tempText[30];
int testNumber = 55559;
int8_t filename[30];
uint8_t fileExt[] = ".txt";
static void FS_FileOperations(void)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
  int theNumber = randomNumber() * 65535;
 800f1c6:	f7ff ff77 	bl	800f0b8 <randomNumber>
 800f1ca:	eeb0 7a40 	vmov.f32	s14, s0
 800f1ce:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800f23c <FS_FileOperations+0x7c>
 800f1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f1da:	ee17 3a90 	vmov	r3, s15
 800f1de:	607b      	str	r3, [r7, #4]
  itoa(theNumber,tempText, 10);
 800f1e0:	220a      	movs	r2, #10
 800f1e2:	4917      	ldr	r1, [pc, #92]	; (800f240 <FS_FileOperations+0x80>)
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f002 f831 	bl	801124c <itoa>
  strncat(filename, tempText, sizeof(tempText));
 800f1ea:	221e      	movs	r2, #30
 800f1ec:	4914      	ldr	r1, [pc, #80]	; (800f240 <FS_FileOperations+0x80>)
 800f1ee:	4815      	ldr	r0, [pc, #84]	; (800f244 <FS_FileOperations+0x84>)
 800f1f0:	f002 f836 	bl	8011260 <strncat>
  strncat(filename, fileExt, sizeof(fileExt));
 800f1f4:	2205      	movs	r2, #5
 800f1f6:	4914      	ldr	r1, [pc, #80]	; (800f248 <FS_FileOperations+0x88>)
 800f1f8:	4812      	ldr	r0, [pc, #72]	; (800f244 <FS_FileOperations+0x84>)
 800f1fa:	f002 f831 	bl	8011260 <strncat>
  statusH = disk_initialize(0);
 800f1fe:	2000      	movs	r0, #0
 800f200:	f7fc fcb0 	bl	800bb64 <disk_initialize>
 800f204:	4603      	mov	r3, r0
 800f206:	461a      	mov	r2, r3
 800f208:	4b10      	ldr	r3, [pc, #64]	; (800f24c <FS_FileOperations+0x8c>)
 800f20a:	701a      	strb	r2, [r3, #0]
  /* Register the file system object to the FatFs module */
  if(f_mount(&MMCFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 800f20c:	2200      	movs	r2, #0
 800f20e:	4910      	ldr	r1, [pc, #64]	; (800f250 <FS_FileOperations+0x90>)
 800f210:	4810      	ldr	r0, [pc, #64]	; (800f254 <FS_FileOperations+0x94>)
 800f212:	f7fe fc75 	bl	800db00 <f_mount>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d10a      	bne.n	800f232 <FS_FileOperations+0x72>
  {
	  {
		  if(f_open(&myFile, filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800f21c:	220a      	movs	r2, #10
 800f21e:	4909      	ldr	r1, [pc, #36]	; (800f244 <FS_FileOperations+0x84>)
 800f220:	480d      	ldr	r0, [pc, #52]	; (800f258 <FS_FileOperations+0x98>)
 800f222:	f7fe fcb3 	bl	800db8c <f_open>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d102      	bne.n	800f232 <FS_FileOperations+0x72>
		  {
			SDReady = 1;
 800f22c:	4b0b      	ldr	r3, [pc, #44]	; (800f25c <FS_FileOperations+0x9c>)
 800f22e:	2201      	movs	r2, #1
 800f230:	601a      	str	r2, [r3, #0]
		  }
	  }
  }
}
 800f232:	bf00      	nop
 800f234:	3708      	adds	r7, #8
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	477fff00 	.word	0x477fff00
 800f240:	2000cd1c 	.word	0x2000cd1c
 800f244:	2000c8d4 	.word	0x2000c8d4
 800f248:	20000008 	.word	0x20000008
 800f24c:	2000cd40 	.word	0x2000cd40
 800f250:	200003c0 	.word	0x200003c0
 800f254:	2000cd44 	.word	0x2000cd44
 800f258:	200008bc 	.word	0x200008bc
 800f25c:	200002d4 	.word	0x200002d4

0800f260 <MPU_Conf>:

		SDWriteIndex++;
	}
}
void MPU_Conf(void)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 800f266:	f7f2 fc89 	bl	8001b7c <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800f26a:	2301      	movs	r3, #1
 800f26c:	703b      	strb	r3, [r7, #0]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800f26e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800f272:	607b      	str	r3, [r7, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800f274:	2311      	movs	r3, #17
 800f276:	723b      	strb	r3, [r7, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800f278:	2303      	movs	r3, #3
 800f27a:	72fb      	strb	r3, [r7, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800f27c:	2301      	movs	r3, #1
 800f27e:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800f280:	2300      	movs	r3, #0
 800f282:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800f284:	2300      	movs	r3, #0
 800f286:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800f288:	2300      	movs	r3, #0
 800f28a:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800f28c:	2300      	movs	r3, #0
 800f28e:	707b      	strb	r3, [r7, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 800f290:	2300      	movs	r3, #0
 800f292:	727b      	strb	r3, [r7, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800f294:	2301      	movs	r3, #1
 800f296:	733b      	strb	r3, [r7, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800f298:	463b      	mov	r3, r7
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7f2 fca2 	bl	8001be4 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	703b      	strb	r3, [r7, #0]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 800f2a4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800f2a8:	607b      	str	r3, [r7, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800f2aa:	230f      	movs	r3, #15
 800f2ac:	723b      	strb	r3, [r7, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800f2ae:	2303      	movs	r3, #3
 800f2b0:	72fb      	strb	r3, [r7, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	72bb      	strb	r3, [r7, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	73bb      	strb	r3, [r7, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	73fb      	strb	r3, [r7, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	737b      	strb	r3, [r7, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	707b      	strb	r3, [r7, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	727b      	strb	r3, [r7, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	733b      	strb	r3, [r7, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800f2ce:	463b      	mov	r3, r7
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7f2 fc87 	bl	8001be4 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800f2d6:	2004      	movs	r0, #4
 800f2d8:	f7f2 fc66 	bl	8001ba8 <HAL_MPU_Enable>
}
 800f2dc:	bf00      	nop
 800f2de:	3710      	adds	r7, #16
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <ADC_Frame>:

uint16_t stringPositions[10];
volatile int didPlucked[NUM_ADC_CHANNELS];

void ADC_Frame(int offset)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b086      	sub	sp, #24
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);

	//sampRecords[currentSamp] = frameCount;
	//currentSamp++;
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	617b      	str	r3, [r7, #20]
 800f2f0:	e028      	b.n	800f344 <ADC_Frame+0x60>
	{
		for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	613b      	str	r3, [r7, #16]
 800f2f6:	e01f      	b.n	800f338 <ADC_Frame+0x54>
		{
			int tempInt = ADC_values[(i*NUM_ADC_CHANNELS) + j];
 800f2f8:	697a      	ldr	r2, [r7, #20]
 800f2fa:	4613      	mov	r3, r2
 800f2fc:	009b      	lsls	r3, r3, #2
 800f2fe:	4413      	add	r3, r2
 800f300:	005b      	lsls	r3, r3, #1
 800f302:	461a      	mov	r2, r3
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	4413      	add	r3, r2
 800f308:	4a13      	ldr	r2, [pc, #76]	; (800f358 <ADC_Frame+0x74>)
 800f30a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f30e:	60fb      	str	r3, [r7, #12]

			didPlucked[j] = tPluckDetectorInt_tick(&myPluck[j], tempInt);
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	009b      	lsls	r3, r3, #2
 800f314:	4a11      	ldr	r2, [pc, #68]	; (800f35c <ADC_Frame+0x78>)
 800f316:	4413      	add	r3, r2
 800f318:	68f9      	ldr	r1, [r7, #12]
 800f31a:	4618      	mov	r0, r3
 800f31c:	f000 f944 	bl	800f5a8 <tPluckDetectorInt_tick>
 800f320:	4601      	mov	r1, r0
 800f322:	4a0f      	ldr	r2, [pc, #60]	; (800f360 <ADC_Frame+0x7c>)
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (didPlucked[j] > 0)
 800f32a:	4a0d      	ldr	r2, [pc, #52]	; (800f360 <ADC_Frame+0x7c>)
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	3301      	adds	r3, #1
 800f336:	613b      	str	r3, [r7, #16]
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	2b09      	cmp	r3, #9
 800f33c:	dddc      	ble.n	800f2f8 <ADC_Frame+0x14>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	3301      	adds	r3, #1
 800f342:	617b      	str	r3, [r7, #20]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	3380      	adds	r3, #128	; 0x80
 800f348:	697a      	ldr	r2, [r7, #20]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	dbd1      	blt.n	800f2f2 <ADC_Frame+0xe>
	//{
	//	waitTimeOver = 1;
	//}
	//ADC_Ready = 1;

}
 800f34e:	bf00      	nop
 800f350:	3718      	adds	r7, #24
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
 800f356:	bf00      	nop
 800f358:	30001040 	.word	0x30001040
 800f35c:	2000c8ac 	.word	0x2000c8ac
 800f360:	2000ccf4 	.word	0x2000ccf4

0800f364 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]


	ADC_Frame(ADC_FRAME_SIZE);
 800f36c:	2080      	movs	r0, #128	; 0x80
 800f36e:	f7ff ffb9 	bl	800f2e4 <ADC_Frame>


}
 800f372:	bf00      	nop
 800f374:	3708      	adds	r7, #8
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}

0800f37a <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800f37a:	b580      	push	{r7, lr}
 800f37c:	b082      	sub	sp, #8
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
	ADC_Frame(0);
 800f382:	2000      	movs	r0, #0
 800f384:	f7ff ffae 	bl	800f2e4 <ADC_Frame>
}
 800f388:	bf00      	nop
 800f38a:	3708      	adds	r7, #8
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f390:	b480      	push	{r7}
 800f392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800f394:	bf00      	nop
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr

0800f39e <LEAF_sign>:
#include "pluck_detect.h"


int LEAF_sign(int x) {
 800f39e:	b480      	push	{r7}
 800f3a0:	b083      	sub	sp, #12
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
    return (x > 0) - (x < 0);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	bfcc      	ite	gt
 800f3ac:	2301      	movgt	r3, #1
 800f3ae:	2300      	movle	r3, #0
 800f3b0:	b2db      	uxtb	r3, r3
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	0fdb      	lsrs	r3, r3, #31
 800f3b8:	b2db      	uxtb	r3, r3
 800f3ba:	1ad3      	subs	r3, r2, r3
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <tPluckDetectorInt_init>:

void    tPluckDetectorInt_init          (tPluckDetectorInt* const pd)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
    tPluckDetectorInt_initToPool(pd, &leaf.mempool);
 800f3d0:	4903      	ldr	r1, [pc, #12]	; (800f3e0 <tPluckDetectorInt_init+0x18>)
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 f806 	bl	800f3e4 <tPluckDetectorInt_initToPool>
}
 800f3d8:	bf00      	nop
 800f3da:	3708      	adds	r7, #8
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	20010034 	.word	0x20010034

0800f3e4 <tPluckDetectorInt_initToPool>:
void    tPluckDetectorInt_initToPool    (tPluckDetectorInt* const pd, tMempool* const mp)
{
 800f3e4:	b590      	push	{r4, r7, lr}
 800f3e6:	b087      	sub	sp, #28
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	60fb      	str	r3, [r7, #12]
    _tPluckDetectorInt* p = *pd = (_tPluckDetectorInt*) mpool_alloc(sizeof(_tPluckDetectorInt), m);
 800f3f4:	68f9      	ldr	r1, [r7, #12]
 800f3f6:	20d8      	movs	r0, #216	; 0xd8
 800f3f8:	f001 fcde 	bl	8010db8 <mpool_alloc>
 800f3fc:	4602      	mov	r2, r0
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	601a      	str	r2, [r3, #0]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	60bb      	str	r3, [r7, #8]
    p->mempool = m;
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	68fa      	ldr	r2, [r7, #12]
 800f40c:	601a      	str	r2, [r3, #0]

	//INITIALIZE VARIABLES
	p->current_dir = 1;
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	2201      	movs	r2, #1
 800f412:	611a      	str	r2, [r3, #16]
	p->envelope_min = 65535;//maybe could be 32 bit?
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f41a:	615a      	str	r2, [r3, #20]
	p->envelope_max = 0;//maybe could be 32 bit?
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	2200      	movs	r2, #0
 800f420:	619a      	str	r2, [r3, #24]
	p->prior_smoothed = 0;
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	2200      	movs	r2, #0
 800f426:	61da      	str	r2, [r3, #28]
	p->prior_super_smoothed = 0;
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	2200      	movs	r2, #0
 800f42c:	621a      	str	r2, [r3, #32]
	p->prior_super_smoothed_dir = 1;
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	2201      	movs	r2, #1
 800f432:	625a      	str	r2, [r3, #36]	; 0x24
	for (int i = 0; i < 3; i++)
 800f434:	2300      	movs	r3, #0
 800f436:	617b      	str	r3, [r7, #20]
 800f438:	e008      	b.n	800f44c <tPluckDetectorInt_initToPool+0x68>
	{
		p->prior_dirs[i] = 1;
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	697a      	ldr	r2, [r7, #20]
 800f43e:	320a      	adds	r2, #10
 800f440:	2101      	movs	r1, #1
 800f442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 3; i++)
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	3301      	adds	r3, #1
 800f44a:	617b      	str	r3, [r7, #20]
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	2b02      	cmp	r3, #2
 800f450:	ddf3      	ble.n	800f43a <tPluckDetectorInt_initToPool+0x56>
	}
	for (int i = 0; i < 5; i++)
 800f452:	2300      	movs	r3, #0
 800f454:	613b      	str	r3, [r7, #16]
 800f456:	e00f      	b.n	800f478 <tPluckDetectorInt_initToPool+0x94>
	{
		p->prior_changepoints_index[i] = 0;//
 800f458:	68ba      	ldr	r2, [r7, #8]
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	330c      	adds	r3, #12
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	4413      	add	r3, r2
 800f462:	2200      	movs	r2, #0
 800f464:	605a      	str	r2, [r3, #4]
		p->prior_changepoints_value[i] = 0;//
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	693a      	ldr	r2, [r7, #16]
 800f46a:	3212      	adds	r2, #18
 800f46c:	2100      	movs	r1, #0
 800f46e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 5; i++)
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	3301      	adds	r3, #1
 800f476:	613b      	str	r3, [r7, #16]
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	2b04      	cmp	r3, #4
 800f47c:	ddec      	ble.n	800f458 <tPluckDetectorInt_initToPool+0x74>
	}

	p->prior_detect_1_index = 0;
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	2200      	movs	r2, #0
 800f482:	65da      	str	r2, [r3, #92]	; 0x5c
	p->prior_detect_1_value = 0;
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	2200      	movs	r2, #0
 800f488:	661a      	str	r2, [r3, #96]	; 0x60
	p->prior_detect_2_index = 0;
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	2200      	movs	r2, #0
 800f48e:	665a      	str	r2, [r3, #100]	; 0x64
	p->prior_detect_2_value = 0;
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	2200      	movs	r2, #0
 800f494:	669a      	str	r2, [r3, #104]	; 0x68
	p->prior_detect_3_index = 0;
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	2200      	movs	r2, #0
 800f49a:	66da      	str	r2, [r3, #108]	; 0x6c
	p->prior_detect_3_value = 0;
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	671a      	str	r2, [r3, #112]	; 0x70
	p->midpoint_estimate = 48552;
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	f64b 52a8 	movw	r2, #48552	; 0xbda8
 800f4a8:	675a      	str	r2, [r3, #116]	; 0x74
	p->delay_since_last_detect = 0;
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	679a      	str	r2, [r3, #120]	; 0x78
	p->dir_count = 0;
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	67da      	str	r2, [r3, #124]	; 0x7c
	p->ready_for_pluck = 1;
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	p->Pindex = 1;
 800f4be:	68ba      	ldr	r2, [r7, #8]
 800f4c0:	f04f 0301 	mov.w	r3, #1
 800f4c4:	f04f 0400 	mov.w	r4, #0
 800f4c8:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	p->totalNumChangepoints = 0;
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	p->smoothed = 0;//Mean of the last [SMOOTHING_WINDOW] samples
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	p->smoothedAccum = 0;
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	p->super_smoothed = 0;//Mean of the last [SUPER_SMOOTHING_WINDOW] smoothed values
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	p->super_smoothedAccum = 0;
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	p->pluck_strength = 0;
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	p->smoothing_window = 16;
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	2210      	movs	r2, #16
 800f500:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p->super_smoothing_window = 128;
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	2280      	movs	r2, #128	; 0x80
 800f508:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    p->envelope_window = 512;
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f512:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    tRingBufferInt_initToPool(&p->smoothed_array, p->smoothing_window, mp);
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	1d18      	adds	r0, r3, #4
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f520:	683a      	ldr	r2, [r7, #0]
 800f522:	4619      	mov	r1, r3
 800f524:	f001 fb54 	bl	8010bd0 <tRingBufferInt_initToPool>

	tRingBufferInt_initToPool(&p->super_smoothed_array, p->super_smoothing_window, mp);
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	f103 0008 	add.w	r0, r3, #8
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800f534:	683a      	ldr	r2, [r7, #0]
 800f536:	4619      	mov	r1, r3
 800f538:	f001 fb4a 	bl	8010bd0 <tRingBufferInt_initToPool>

	tRingBufferInt_initToPool(&p->last400_smoothed, p->envelope_window, mp); // making this 512 for now to use ringbuffer object
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	f103 000c 	add.w	r0, r3, #12
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f548:	683a      	ldr	r2, [r7, #0]
 800f54a:	4619      	mov	r1, r3
 800f54c:	f001 fb40 	bl	8010bd0 <tRingBufferInt_initToPool>

    p->max_samples_still_same_pluck = 400;
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800f556:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    p->max_var_diff_width = 10000;
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	f242 7210 	movw	r2, #10000	; 0x2710
 800f560:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    p->max_width_is_resonating = 1000;
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f56a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    p->max_ratio_value_diffs = 0.2f;
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	4a0c      	ldr	r2, [pc, #48]	; (800f5a4 <tPluckDetectorInt_initToPool+0x1c0>)
 800f572:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    p->min_value_spread = 500;
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f57c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    p->min_same_direction_steps = 150;
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	2296      	movs	r2, #150	; 0x96
 800f584:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

    p->myMin = 65535;
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f58e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    p->myMax = 0;
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	2200      	movs	r2, #0
 800f596:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    //AVL_memory_offset = (int)&AVL_array;
}
 800f59a:	bf00      	nop
 800f59c:	371c      	adds	r7, #28
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd90      	pop	{r4, r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	3e4ccccd 	.word	0x3e4ccccd

0800f5a8 <tPluckDetectorInt_tick>:

    mpool_free((char*)p, p->mempool);
}

int   tPluckDetectorInt_tick          (tPluckDetectorInt* const pd, int input)
{
 800f5a8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f5ac:	b0ac      	sub	sp, #176	; 0xb0
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
 800f5b2:	6039      	str	r1, [r7, #0]
	 _tPluckDetectorInt* p = *pd;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	int pluckHappened = -1;
 800f5bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	//update smoothed for current sample
	tRingBufferInt_push(&p->smoothed_array, input);
 800f5c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5c8:	3304      	adds	r3, #4
 800f5ca:	6839      	ldr	r1, [r7, #0]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f001 fb5b 	bl	8010c88 <tRingBufferInt_push>

	//get the smoothed mean of that array
	int oldSmoothed = tRingBufferInt_getOldest(&p->smoothed_array);
 800f5d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5d6:	3304      	adds	r3, #4
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f001 fb77 	bl	8010ccc <tRingBufferInt_getOldest>
 800f5de:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	p->smoothedAccum -= oldSmoothed;
 800f5e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5e6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800f5ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f5ee:	1ad2      	subs	r2, r2, r3
 800f5f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	p->smoothedAccum += input;
 800f5f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	441a      	add	r2, r3
 800f604:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f608:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	p->smoothed = p->smoothedAccum >> 4; // divide by 16
 800f60c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f610:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f614:	091a      	lsrs	r2, r3, #4
 800f616:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f61a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	//update super_smoothed for current sample
	tRingBufferInt_push(&p->super_smoothed_array, p->smoothed); //is this right? should be smoothed and not input, correct?
 800f61e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f622:	f103 0208 	add.w	r2, r3, #8
 800f626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f62a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f62e:	4619      	mov	r1, r3
 800f630:	4610      	mov	r0, r2
 800f632:	f001 fb29 	bl	8010c88 <tRingBufferInt_push>

	//get the smoothed mean of that array
	int oldSuperSmoothed = tRingBufferInt_getOldest(&p->super_smoothed_array);
 800f636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f63a:	3308      	adds	r3, #8
 800f63c:	4618      	mov	r0, r3
 800f63e:	f001 fb45 	bl	8010ccc <tRingBufferInt_getOldest>
 800f642:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	p->super_smoothedAccum -= oldSuperSmoothed;
 800f646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f64a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f64e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f652:	1ad2      	subs	r2, r2, r3
 800f654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f658:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	p->super_smoothedAccum += p->smoothed;
 800f65c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f660:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f664:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f66c:	441a      	add	r2, r3
 800f66e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f672:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	p->super_smoothed = p->super_smoothedAccum >> 7; // divide by 128
 800f676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f67a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f67e:	09da      	lsrs	r2, r3, #7
 800f680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f684:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c


	//update last400_smoothed
	int oldValue = tRingBufferInt_getOldest(&p->last400_smoothed);
 800f688:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f68c:	330c      	adds	r3, #12
 800f68e:	4618      	mov	r0, r3
 800f690:	f001 fb1c 	bl	8010ccc <tRingBufferInt_getOldest>
 800f694:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	///here's where we do the AVL tree implementation:
	//1. create a tree
	//3. delete and insert to move window
	//2. get maximum and minimum from BST
	tRingBufferInt_push(&p->last400_smoothed, p->smoothed);
 800f698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f69c:	f103 020c 	add.w	r2, r3, #12
 800f6a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	4610      	mov	r0, r2
 800f6ac:	f001 faec 	bl	8010c88 <tRingBufferInt_push>
	myMin = minValueKey(root);
	myMax = maxValueKey(root);
*/


	if ((oldValue >= p->myMax) || (oldValue <= p->myMin))
 800f6b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6b4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800f6b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d907      	bls.n	800f6d0 <tPluckDetectorInt_tick+0x128>
 800f6c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6c4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800f6c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d346      	bcc.n	800f75e <tPluckDetectorInt_tick+0x1b6>
	{
		tRingBufferInt_push(&p->last400_smoothed, p->smoothed);
 800f6d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6d4:	f103 020c 	add.w	r2, r3, #12
 800f6d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	4610      	mov	r0, r2
 800f6e4:	f001 fad0 	bl	8010c88 <tRingBufferInt_push>
		p->myMax = 0;
 800f6e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		p->myMin = 65535;
 800f6f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6fa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		for (int i = 0; i < 512; i++)
 800f6fe:	2300      	movs	r3, #0
 800f700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f704:	e025      	b.n	800f752 <tPluckDetectorInt_tick+0x1aa>
		{

			int tempVal = tRingBufferInt_get(&p->last400_smoothed, i);
 800f706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f70a:	330c      	adds	r3, #12
 800f70c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800f710:	4618      	mov	r0, r3
 800f712:	f001 faf6 	bl	8010d02 <tRingBufferInt_get>
 800f716:	67f8      	str	r0, [r7, #124]	; 0x7c
			if (tempVal < p->myMin)
 800f718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f71c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800f720:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f722:	429a      	cmp	r2, r3
 800f724:	d904      	bls.n	800f730 <tPluckDetectorInt_tick+0x188>
			{
				p->myMin = tempVal;
 800f726:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f72c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			}
			if (tempVal > p->myMax)
 800f730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f734:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800f738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d204      	bcs.n	800f748 <tPluckDetectorInt_tick+0x1a0>
			{
				p->myMax = tempVal;
 800f73e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f744:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		for (int i = 0; i < 512; i++)
 800f748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f74c:	3301      	adds	r3, #1
 800f74e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f752:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f75a:	dbd4      	blt.n	800f706 <tPluckDetectorInt_tick+0x15e>
 800f75c:	e02f      	b.n	800f7be <tPluckDetectorInt_tick+0x216>
		}

	}
	else
	{
		tRingBufferInt_push(&p->last400_smoothed, p->smoothed);
 800f75e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f762:	f103 020c 	add.w	r2, r3, #12
 800f766:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f76a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f76e:	4619      	mov	r1, r3
 800f770:	4610      	mov	r0, r2
 800f772:	f001 fa89 	bl	8010c88 <tRingBufferInt_push>
		if (p->smoothed > p->myMax)
 800f776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f77a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800f77e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f782:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800f786:	429a      	cmp	r2, r3
 800f788:	d907      	bls.n	800f79a <tPluckDetectorInt_tick+0x1f2>
		{
			p->myMax = p->smoothed;
 800f78a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f78e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800f792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f796:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}
		if (p->smoothed < p->myMin)
 800f79a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f79e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800f7a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d207      	bcs.n	800f7be <tPluckDetectorInt_tick+0x216>
		{
			p->myMin = p->smoothed;
 800f7ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7b2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800f7b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7ba:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		{
			myMax = tempVal;
		}
	}
*/
	int outside_envelope = ((p->myMin < p->envelope_min) || (p->myMax > p->envelope_max));
 800f7be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f7c6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f7ca:	6952      	ldr	r2, [r2, #20]
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d308      	bcc.n	800f7e2 <tPluckDetectorInt_tick+0x23a>
 800f7d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7d4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800f7d8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f7dc:	6992      	ldr	r2, [r2, #24]
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d901      	bls.n	800f7e6 <tPluckDetectorInt_tick+0x23e>
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e000      	b.n	800f7e8 <tPluckDetectorInt_tick+0x240>
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	67bb      	str	r3, [r7, #120]	; 0x78
	//COLLECT THE DIRECTION OF MOVEMENT FOR SUPER-SMOOTHED SEQUENCE (FOR DETECTING IF READY FOR NEXT PLUCK)
	//Here we're basically counting how many times we've taken consecutive steps in the same direction
	//If we move in a different direction (up or down) then it resets
	//This is helpful for detecting that movement up or down right at the start of a pluck signal

	int super_smoothed_dir = LEAF_sign(p->super_smoothed - p->prior_super_smoothed);
 800f7ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f7f2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f7f6:	6a12      	ldr	r2, [r2, #32]
 800f7f8:	1a9b      	subs	r3, r3, r2
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7ff fdcf 	bl	800f39e <LEAF_sign>
 800f800:	6778      	str	r0, [r7, #116]	; 0x74
	if (super_smoothed_dir != p->prior_super_smoothed_dir)
 800f802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f808:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d004      	beq.n	800f818 <tPluckDetectorInt_tick+0x270>
	{
		p->dir_count = 0;
 800f80e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f812:	2200      	movs	r2, #0
 800f814:	67da      	str	r2, [r3, #124]	; 0x7c
 800f816:	e006      	b.n	800f826 <tPluckDetectorInt_tick+0x27e>
	}
	else
	{
		p->dir_count = p->dir_count + 1;
 800f818:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f81c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f81e:	1c5a      	adds	r2, r3, #1
 800f820:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f824:	67da      	str	r2, [r3, #124]	; 0x7c
	//CHECK IF WE SEE THE SIGNS THAT WE ARE READY FOR NEXT PLUCK
	//We are ready for a new pluck if we've both:
	//(1) seen enough steps in same direction, and
	//(2) moved outside our current envelope

	if (p->ready_for_pluck==0)
 800f826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d110      	bne.n	800f854 <tPluckDetectorInt_tick+0x2ac>
	{
		if ((p->dir_count > p->min_same_direction_steps) && (outside_envelope==1))
 800f832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f836:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f838:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f83c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f840:	429a      	cmp	r2, r3
 800f842:	dd07      	ble.n	800f854 <tPluckDetectorInt_tick+0x2ac>
 800f844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f846:	2b01      	cmp	r3, #1
 800f848:	d104      	bne.n	800f854 <tPluckDetectorInt_tick+0x2ac>
		{
			p->ready_for_pluck = 1;
 800f84a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f84e:	2201      	movs	r2, #1
 800f850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		}
	}

	//COLLECT THE DIRECTION OF MOVEMENT FOR SMOOTHED SEQUENCE (FOR CHANGEPOINT DETECTION)
	int direction = LEAF_sign(p->smoothed-p->prior_smoothed);
 800f854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f85c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f860:	69d2      	ldr	r2, [r2, #28]
 800f862:	1a9b      	subs	r3, r3, r2
 800f864:	4618      	mov	r0, r3
 800f866:	f7ff fd9a 	bl	800f39e <LEAF_sign>
 800f86a:	6738      	str	r0, [r7, #112]	; 0x70
	//prior_dirs = c(prior_dirs[-1],direction); //Update by removing first element and adding new value to end
	p->prior_dirs[0] = p->prior_dirs[1];
 800f86c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f876:	629a      	str	r2, [r3, #40]	; 0x28
	p->prior_dirs[1] = p->prior_dirs[2];
 800f878:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f87c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f87e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f882:	62da      	str	r2, [r3, #44]	; 0x2c
	p->prior_dirs[2] = direction;
 800f884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f888:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f88a:	631a      	str	r2, [r3, #48]	; 0x30
	//BEGIN TO CHECK IF WE ARE AT A "CHANGEPOINT"
	//A changepoint is when both of the following are true:
	// 		(1) Several consistent steps all up (or all down) in sequence, and then suddenly a change
	// 		(2) There is enough overall vertical movement in the recent samples

	int tempMin = 1;
 800f88c:	2301      	movs	r3, #1
 800f88e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int tempMax = -1;
 800f892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	for (int i = 0; i < 3; i++)
 800f89a:	2300      	movs	r3, #0
 800f89c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f8a0:	e02c      	b.n	800f8fc <tPluckDetectorInt_tick+0x354>
	{
		if (p->prior_dirs[i] < tempMin)
 800f8a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f8a6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f8aa:	320a      	adds	r2, #10
 800f8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8b0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	dd08      	ble.n	800f8ca <tPluckDetectorInt_tick+0x322>
		{
			tempMin = p->prior_dirs[i];
 800f8b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f8bc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f8c0:	320a      	adds	r2, #10
 800f8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}
		if (p->prior_dirs[i] > tempMax)
 800f8ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f8ce:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f8d2:	320a      	adds	r2, #10
 800f8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8d8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	da08      	bge.n	800f8f2 <tPluckDetectorInt_tick+0x34a>
		{
			tempMax = p->prior_dirs[i];
 800f8e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f8e4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f8e8:	320a      	adds	r2, #10
 800f8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	for (int i = 0; i < 3; i++)
 800f8f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f8f6:	3301      	adds	r3, #1
 800f8f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f8fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f900:	2b02      	cmp	r3, #2
 800f902:	ddce      	ble.n	800f8a2 <tPluckDetectorInt_tick+0x2fa>
		}
	}
	if (((p->current_dir == 1) && (tempMax == -1)) ||((p->current_dir == -1) && (tempMin == 1)))
 800f904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f908:	691b      	ldr	r3, [r3, #16]
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d104      	bne.n	800f918 <tPluckDetectorInt_tick+0x370>
 800f90e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f916:	d00b      	beq.n	800f930 <tPluckDetectorInt_tick+0x388>
 800f918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f91c:	691b      	ldr	r3, [r3, #16]
 800f91e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f922:	f040 82c1 	bne.w	800fea8 <tPluckDetectorInt_tick+0x900>
 800f926:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	f040 82bc 	bne.w	800fea8 <tPluckDetectorInt_tick+0x900>
	{
		//UPDATE THE DIRECTION THAT WE'll BE COMPARING AGAINST NEXT TIME
		p->current_dir = -p->current_dir;
 800f930:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f934:	691b      	ldr	r3, [r3, #16]
 800f936:	425a      	negs	r2, r3
 800f938:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f93c:	611a      	str	r2, [r3, #16]

		if (p->totalNumChangepoints < 5)
 800f93e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f946:	2b04      	cmp	r3, #4
 800f948:	dc08      	bgt.n	800f95c <tPluckDetectorInt_tick+0x3b4>
		{
			p->totalNumChangepoints++;
 800f94a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f94e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f952:	1c5a      	adds	r2, r3, #1
 800f954:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f958:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		}

		//UPDATE VECTORS THAT STORE THE LAST 5 CHANGEPOINTS

		p->prior_changepoints_index[0] = p->prior_changepoints_index[1];
 800f95c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f966:	635a      	str	r2, [r3, #52]	; 0x34
		p->prior_changepoints_index[1] = p->prior_changepoints_index[2];
 800f968:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f96c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f96e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f972:	639a      	str	r2, [r3, #56]	; 0x38
		p->prior_changepoints_index[2] = p->prior_changepoints_index[3];
 800f974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f97a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f97e:	63da      	str	r2, [r3, #60]	; 0x3c
		p->prior_changepoints_index[3] = p->prior_changepoints_index[4];
 800f980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f98a:	641a      	str	r2, [r3, #64]	; 0x40
		p->prior_changepoints_index[4] = p->Pindex;
 800f98c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f990:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 800f994:	461a      	mov	r2, r3
 800f996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f99a:	645a      	str	r2, [r3, #68]	; 0x44


		p->prior_changepoints_value[0] = p->prior_changepoints_value[1];
 800f99c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f9a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9a6:	649a      	str	r2, [r3, #72]	; 0x48
		p->prior_changepoints_value[1] = p->prior_changepoints_value[2];
 800f9a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f9ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9b2:	64da      	str	r2, [r3, #76]	; 0x4c
		p->prior_changepoints_value[2] = p->prior_changepoints_value[3];
 800f9b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9be:	651a      	str	r2, [r3, #80]	; 0x50
		p->prior_changepoints_value[3] = p->prior_changepoints_value[4];
 800f9c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9ca:	655a      	str	r2, [r3, #84]	; 0x54
		p->prior_changepoints_value[4] = p->smoothed;
 800f9cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9da:	659a      	str	r2, [r3, #88]	; 0x58


		//ONCE THERE HAVE BEEN AT LEAST THREE CHANGEPOINTS
		//I'm doing this as 5 so I don't need to check any NULL values
	    if (p->totalNumChangepoints >= 5)
 800f9dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9e4:	2b04      	cmp	r3, #4
 800f9e6:	f340 825f 	ble.w	800fea8 <tPluckDetectorInt_tick+0x900>

	    	//COMPUTE NUMBER OF SAMPLES BETWEEN EACH CHANGEPOINT
			//### 	Eg. if prior_changepoints_index = [NULL,NULL,40,60,90] then
			//###		width_differences = [NULL,NULL,20,30]
	    	int width_differences[4];
	    	width_differences[0] = p->prior_changepoints_index[1] - p->prior_changepoints_index[0];
 800f9ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9f6:	1ad3      	subs	r3, r2, r3
 800f9f8:	623b      	str	r3, [r7, #32]
	    	width_differences[1] = p->prior_changepoints_index[2] - p->prior_changepoints_index[1];
 800f9fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fa00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa06:	1ad3      	subs	r3, r2, r3
 800fa08:	627b      	str	r3, [r7, #36]	; 0x24
	    	width_differences[2] = p->prior_changepoints_index[3] - p->prior_changepoints_index[2];
 800fa0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fa10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa16:	1ad3      	subs	r3, r2, r3
 800fa18:	62bb      	str	r3, [r7, #40]	; 0x28
	    	width_differences[3] = p->prior_changepoints_index[4] - p->prior_changepoints_index[3];
 800fa1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa26:	1ad3      	subs	r3, r2, r3
 800fa28:	62fb      	str	r3, [r7, #44]	; 0x2c

			//### COMPUTE THE VALUE DEVIATIONS FROM THE MIDPOINT (ONLY IF THE MIDPOINT IS NON-NULL)
			//### 	Eg. if prior_changepoints_value = [NULL,NULL,100,200,300] and midpoint_estimate = 150
			//###     	then dirs_from_midpoint = [NULL,NULL,-1,1,1]
	    	int dirs_from_midpoint[5];
	    	for (int i = 0; i < 5; i++)
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fa30:	e01c      	b.n	800fa6c <tPluckDetectorInt_tick+0x4c4>
	    	{
	    		dirs_from_midpoint[i] = LEAF_sign(p->prior_changepoints_value[i] - p->midpoint_estimate);
 800fa32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa36:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fa3a:	3212      	adds	r2, #18
 800fa3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa40:	461a      	mov	r2, r3
 800fa42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7ff fca7 	bl	800f39e <LEAF_sign>
 800fa50:	4602      	mov	r2, r0
 800fa52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fa56:	009b      	lsls	r3, r3, #2
 800fa58:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800fa5c:	440b      	add	r3, r1
 800fa5e:	f843 2ca4 	str.w	r2, [r3, #-164]
	    	for (int i = 0; i < 5; i++)
 800fa62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fa66:	3301      	adds	r3, #1
 800fa68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fa6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fa70:	2b04      	cmp	r3, #4
 800fa72:	ddde      	ble.n	800fa32 <tPluckDetectorInt_tick+0x48a>
	    	}

			//### ASSEMBLE STATISTICS RELATED TO A 3-POINT PATTERN (UP/DOWN/UP or vice versa)
	    	int tempZeroCheck = abs(p->prior_changepoints_value[4] - p->prior_changepoints_value[3]);
 800fa74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fa7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa80:	1ad3      	subs	r3, r2, r3
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	bfb8      	it	lt
 800fa86:	425b      	neglt	r3, r3
 800fa88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	    	if (tempZeroCheck == 0)
 800fa8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d102      	bne.n	800fa9a <tPluckDetectorInt_tick+0x4f2>
	    	{
	    		tempZeroCheck = 1; //prevent divide by zero
 800fa94:	2301      	movs	r3, #1
 800fa96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	    	}
			float ratio_value_diffs_1 = ((float)abs(p->prior_changepoints_value[4] - p->prior_changepoints_value[2])) / (float)tempZeroCheck;
 800fa9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800faa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800faa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faa6:	1ad3      	subs	r3, r2, r3
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	bfb8      	it	lt
 800faac:	425b      	neglt	r3, r3
 800faae:	ee07 3a90 	vmov	s15, r3
 800fab2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fab6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800faba:	ee07 3a90 	vmov	s15, r3
 800fabe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fac6:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
			int spread_value_1 = abs(p->prior_changepoints_value[4] - p->prior_changepoints_value[3]);
 800faca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800face:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fad6:	1ad3      	subs	r3, r2, r3
 800fad8:	2b00      	cmp	r3, #0
 800fada:	bfb8      	it	lt
 800fadc:	425b      	neglt	r3, r3
 800fade:	66bb      	str	r3, [r7, #104]	; 0x68
			int falls_about_midpoint_1 = ((dirs_from_midpoint[2] == dirs_from_midpoint[4]) && (dirs_from_midpoint[3] != dirs_from_midpoint[4]));
 800fae0:	697a      	ldr	r2, [r7, #20]
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d105      	bne.n	800faf4 <tPluckDetectorInt_tick+0x54c>
 800fae8:	69ba      	ldr	r2, [r7, #24]
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	429a      	cmp	r2, r3
 800faee:	d001      	beq.n	800faf4 <tPluckDetectorInt_tick+0x54c>
 800faf0:	2301      	movs	r3, #1
 800faf2:	e000      	b.n	800faf6 <tPluckDetectorInt_tick+0x54e>
 800faf4:	2300      	movs	r3, #0
 800faf6:	667b      	str	r3, [r7, #100]	; 0x64


	    	tempZeroCheck = abs(p->prior_changepoints_value[4] - p->prior_changepoints_value[3]);
 800faf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fafc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fafe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fb02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb04:	1ad3      	subs	r3, r2, r3
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	bfb8      	it	lt
 800fb0a:	425b      	neglt	r3, r3
 800fb0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	    	if (tempZeroCheck == 0)
 800fb10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d102      	bne.n	800fb1e <tPluckDetectorInt_tick+0x576>
	    	{
	    		tempZeroCheck = 1; //prevent divide by zero
 800fb18:	2301      	movs	r3, #1
 800fb1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	    	}

			float ratio_value_diffs_2 = ((float)abs(p->prior_changepoints_value[4] - p->prior_changepoints_value[0])) / (float)tempZeroCheck;
 800fb1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fb22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fb24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fb28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb2a:	1ad3      	subs	r3, r2, r3
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	bfb8      	it	lt
 800fb30:	425b      	neglt	r3, r3
 800fb32:	ee07 3a90 	vmov	s15, r3
 800fb36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fb3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fb3e:	ee07 3a90 	vmov	s15, r3
 800fb42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fb46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb4a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			int spread_value_2 = abs(p->prior_changepoints_value[0] - p->prior_changepoints_value[1]);
 800fb4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fb52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fb54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fb58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb5a:	1ad3      	subs	r3, r2, r3
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	bfb8      	it	lt
 800fb60:	425b      	neglt	r3, r3
 800fb62:	65fb      	str	r3, [r7, #92]	; 0x5c
			int falls_about_midpoint_2 = ( (dirs_from_midpoint[0] == dirs_from_midpoint[4]) && (dirs_from_midpoint[0] != dirs_from_midpoint[1]) && (dirs_from_midpoint[0] != dirs_from_midpoint[3]));
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d109      	bne.n	800fb80 <tPluckDetectorInt_tick+0x5d8>
 800fb6c:	68fa      	ldr	r2, [r7, #12]
 800fb6e:	693b      	ldr	r3, [r7, #16]
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d005      	beq.n	800fb80 <tPluckDetectorInt_tick+0x5d8>
 800fb74:	68fa      	ldr	r2, [r7, #12]
 800fb76:	69bb      	ldr	r3, [r7, #24]
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d001      	beq.n	800fb80 <tPluckDetectorInt_tick+0x5d8>
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	e000      	b.n	800fb82 <tPluckDetectorInt_tick+0x5da>
 800fb80:	2300      	movs	r3, #0
 800fb82:	65bb      	str	r3, [r7, #88]	; 0x58
			//### NOTE: var() here means the "sample variance". Tell me if you need help with it.
			//### See link: https://www.mathsisfun.com/data/standard-deviation.html

			//compute var of width differences using just elements [2] and [3]
			//first take the mean
			int tempMean = (width_differences[2] + width_differences[3]) / 2; //divide by 2
 800fb84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb88:	4413      	add	r3, r2
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	da00      	bge.n	800fb90 <tPluckDetectorInt_tick+0x5e8>
 800fb8e:	3301      	adds	r3, #1
 800fb90:	105b      	asrs	r3, r3, #1
 800fb92:	657b      	str	r3, [r7, #84]	; 0x54
			int tempVar1 = width_differences[2] - tempMean;
 800fb94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb98:	1ad3      	subs	r3, r2, r3
 800fb9a:	653b      	str	r3, [r7, #80]	; 0x50
			int tempVar2 = width_differences[3] - tempMean;
 800fb9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fba0:	1ad3      	subs	r3, r2, r3
 800fba2:	64fb      	str	r3, [r7, #76]	; 0x4c
			int tempVariance = ((tempVar1 * tempVar1) + (tempVar2 * tempVar2)) / 2; // divide by 2;
 800fba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fba6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fba8:	fb02 f203 	mul.w	r2, r2, r3
 800fbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fbb0:	fb01 f303 	mul.w	r3, r1, r3
 800fbb4:	4413      	add	r3, r2
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	da00      	bge.n	800fbbc <tPluckDetectorInt_tick+0x614>
 800fbba:	3301      	adds	r3, #1
 800fbbc:	105b      	asrs	r3, r3, #1
 800fbbe:	64bb      	str	r3, [r7, #72]	; 0x48

			tempMax = width_differences[2];
 800fbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			if (width_differences[3] > tempMax)
 800fbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	da02      	bge.n	800fbd6 <tPluckDetectorInt_tick+0x62e>
			{
				tempMax = width_differences[3];
 800fbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			int firstTest = (ratio_value_diffs_1 < p->max_ratio_value_diffs) && (spread_value_1 > p->min_value_spread) && (tempVariance < p->max_var_diff_width) && (tempMax < p->max_width_is_resonating);// && (falls_about_midpoint_1==1);
 800fbd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fbda:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800fbde:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800fbe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbea:	d517      	bpl.n	800fc1c <tPluckDetectorInt_tick+0x674>
 800fbec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fbf0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fbf4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	dd10      	ble.n	800fc1c <tPluckDetectorInt_tick+0x674>
 800fbfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fbfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fc02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc04:	429a      	cmp	r2, r3
 800fc06:	da09      	bge.n	800fc1c <tPluckDetectorInt_tick+0x674>
 800fc08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fc0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fc10:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800fc14:	429a      	cmp	r2, r3
 800fc16:	da01      	bge.n	800fc1c <tPluckDetectorInt_tick+0x674>
 800fc18:	2301      	movs	r3, #1
 800fc1a:	e000      	b.n	800fc1e <tPluckDetectorInt_tick+0x676>
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	647b      	str	r3, [r7, #68]	; 0x44

			//### 5-POINT PATTERN

			//compute var of width differences using all elements
			//first take the mean
			tempMean = (width_differences[0] + width_differences[1] + width_differences[2] + width_differences[3] + width_differences[4]) / 5;
 800fc20:	6a3a      	ldr	r2, [r7, #32]
 800fc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc24:	441a      	add	r2, r3
 800fc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc28:	441a      	add	r2, r3
 800fc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2c:	441a      	add	r2, r3
 800fc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc30:	4413      	add	r3, r2
 800fc32:	4ab9      	ldr	r2, [pc, #740]	; (800ff18 <tPluckDetectorInt_tick+0x970>)
 800fc34:	fb82 1203 	smull	r1, r2, r2, r3
 800fc38:	1052      	asrs	r2, r2, #1
 800fc3a:	17db      	asrs	r3, r3, #31
 800fc3c:	1ad3      	subs	r3, r2, r3
 800fc3e:	657b      	str	r3, [r7, #84]	; 0x54
			tempVar1 = width_differences[0] - tempMean;
 800fc40:	6a3a      	ldr	r2, [r7, #32]
 800fc42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc44:	1ad3      	subs	r3, r2, r3
 800fc46:	653b      	str	r3, [r7, #80]	; 0x50
			tempVar2 = width_differences[1] - tempMean;
 800fc48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc4c:	1ad3      	subs	r3, r2, r3
 800fc4e:	64fb      	str	r3, [r7, #76]	; 0x4c
			int tempVar3 = width_differences[2] - tempMean;
 800fc50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc54:	1ad3      	subs	r3, r2, r3
 800fc56:	643b      	str	r3, [r7, #64]	; 0x40
			int tempVar4 = width_differences[3] - tempMean;
 800fc58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc5c:	1ad3      	subs	r3, r2, r3
 800fc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
			int tempVar5 = width_differences[4] - tempMean;
 800fc60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc64:	1ad3      	subs	r3, r2, r3
 800fc66:	63bb      	str	r3, [r7, #56]	; 0x38
			tempVariance = ((tempVar1 * tempVar1) + (tempVar2 * tempVar2) + (tempVar3 * tempVar3) + (tempVar4 * tempVar4) + (tempVar5 * tempVar5)) / 5; // divide by 5;
 800fc68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc6c:	fb02 f203 	mul.w	r2, r2, r3
 800fc70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fc74:	fb01 f303 	mul.w	r3, r1, r3
 800fc78:	441a      	add	r2, r3
 800fc7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fc7e:	fb01 f303 	mul.w	r3, r1, r3
 800fc82:	441a      	add	r2, r3
 800fc84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fc88:	fb01 f303 	mul.w	r3, r1, r3
 800fc8c:	441a      	add	r2, r3
 800fc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc92:	fb01 f303 	mul.w	r3, r1, r3
 800fc96:	4413      	add	r3, r2
 800fc98:	4a9f      	ldr	r2, [pc, #636]	; (800ff18 <tPluckDetectorInt_tick+0x970>)
 800fc9a:	fb82 1203 	smull	r1, r2, r2, r3
 800fc9e:	1052      	asrs	r2, r2, #1
 800fca0:	17db      	asrs	r3, r3, #31
 800fca2:	1ad3      	subs	r3, r2, r3
 800fca4:	64bb      	str	r3, [r7, #72]	; 0x48

			tempMax = width_differences[0];
 800fca6:	6a3b      	ldr	r3, [r7, #32]
 800fca8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			for (int i = 1; i < 5; +i++)
 800fcac:	2301      	movs	r3, #1
 800fcae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fcb2:	e01a      	b.n	800fcea <tPluckDetectorInt_tick+0x742>
			if (width_differences[i] > tempMax)
 800fcb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800fcbe:	4413      	add	r3, r2
 800fcc0:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800fcc4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	da09      	bge.n	800fce0 <tPluckDetectorInt_tick+0x738>
			{
				tempMax = width_differences[i];
 800fccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800fcd6:	4413      	add	r3, r2
 800fcd8:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800fcdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			for (int i = 1; i < 5; +i++)
 800fce0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fce4:	3301      	adds	r3, #1
 800fce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fcea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fcee:	2b04      	cmp	r3, #4
 800fcf0:	dde0      	ble.n	800fcb4 <tPluckDetectorInt_tick+0x70c>
			}

			int secondTest = (ratio_value_diffs_2 < p->max_ratio_value_diffs) && (spread_value_2 > p->min_value_spread) && (tempVariance < p->max_var_diff_width) && (tempMax < p->max_width_is_resonating);// && (falls_about_midpoint_2==1);
 800fcf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fcf6:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800fcfa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800fcfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd06:	d517      	bpl.n	800fd38 <tPluckDetectorInt_tick+0x790>
 800fd08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fd10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd12:	429a      	cmp	r2, r3
 800fd14:	dd10      	ble.n	800fd38 <tPluckDetectorInt_tick+0x790>
 800fd16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fd1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd20:	429a      	cmp	r2, r3
 800fd22:	da09      	bge.n	800fd38 <tPluckDetectorInt_tick+0x790>
 800fd24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fd2c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800fd30:	429a      	cmp	r2, r3
 800fd32:	da01      	bge.n	800fd38 <tPluckDetectorInt_tick+0x790>
 800fd34:	2301      	movs	r3, #1
 800fd36:	e000      	b.n	800fd3a <tPluckDetectorInt_tick+0x792>
 800fd38:	2300      	movs	r3, #0
 800fd3a:	637b      	str	r3, [r7, #52]	; 0x34

			if (firstTest || secondTest)
 800fd3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d103      	bne.n	800fd4a <tPluckDetectorInt_tick+0x7a2>
 800fd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f000 80af 	beq.w	800fea8 <tPluckDetectorInt_tick+0x900>
			{
				//### UPDATE THE ENVELOPE
				p->envelope_min = p->myMin;
 800fd4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd4e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800fd52:	461a      	mov	r2, r3
 800fd54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd58:	615a      	str	r2, [r3, #20]
				p->envelope_max = p->myMax;
 800fd5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd5e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800fd62:	461a      	mov	r2, r3
 800fd64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd68:	619a      	str	r2, [r3, #24]
				int is_pluck;

				//### CHECK IF THIS IS A NEW PLUCK (NOT JUST FURTHER DETECTION OF RESONANCE ON EXISTING PLUCK)
				//### 	If it is an actual pluck, then also collect its strength
				if (p->ready_for_pluck==1)
 800fd6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd72:	2b01      	cmp	r3, #1
 800fd74:	d126      	bne.n	800fdc4 <tPluckDetectorInt_tick+0x81c>
				{
					is_pluck = (p->delay_since_last_detect > p->max_samples_still_same_pluck);
 800fd76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd7a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800fd7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fd84:	429a      	cmp	r2, r3
 800fd86:	bfcc      	ite	gt
 800fd88:	2301      	movgt	r3, #1
 800fd8a:	2300      	movle	r3, #0
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	633b      	str	r3, [r7, #48]	; 0x30
					if (is_pluck==1)
 800fd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	d118      	bne.n	800fdc8 <tPluckDetectorInt_tick+0x820>
					{
						p->pluck_strength = p->envelope_max - p->envelope_min;
 800fd96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd9a:	699a      	ldr	r2, [r3, #24]
 800fd9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fda0:	695b      	ldr	r3, [r3, #20]
 800fda2:	1ad2      	subs	r2, r2, r3
 800fda4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fda8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
						pluckHappened = p->pluck_strength;
 800fdac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fdb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
						//adding this - not sure if it's what Angie meant:
						p->ready_for_pluck = 0;
 800fdb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800fdc2:	e001      	b.n	800fdc8 <tPluckDetectorInt_tick+0x820>
					}
				}
				else
				{
					is_pluck = 0;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	633b      	str	r3, [r7, #48]	; 0x30
				}

				//### IF WE HAVE HAD AT LEAST THREE DETECTIONS OF RESONANCE WITHIN THE SAME PLUCK'S SIGNAL
				//### THEN WE CAN COMPUTE OR UPDATE THE MIDPOINT ESTIMATE
				if (p->prior_detect_3_index > 0)
 800fdc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	dd3e      	ble.n	800fe50 <tPluckDetectorInt_tick+0x8a8>
				{
					if ((p->Pindex - p->prior_detect_1_index < p->max_samples_still_same_pluck) && (p->prior_detect_1_index - p->prior_detect_2_index < p->max_samples_still_same_pluck) && (p->prior_detect_2_index - p->prior_detect_3_index < p->max_samples_still_same_pluck))
 800fdd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdd6:	e9d3 bc22 	ldrd	fp, ip, [r3, #136]	; 0x88
 800fdda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fde0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800fde4:	4659      	mov	r1, fp
 800fde6:	4662      	mov	r2, ip
 800fde8:	1ac9      	subs	r1, r1, r3
 800fdea:	eb62 0204 	sbc.w	r2, r2, r4
 800fdee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fdf6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800fdfa:	42a2      	cmp	r2, r4
 800fdfc:	bf08      	it	eq
 800fdfe:	4299      	cmpeq	r1, r3
 800fe00:	d226      	bcs.n	800fe50 <tPluckDetectorInt_tick+0x8a8>
 800fe02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe0e:	1ad2      	subs	r2, r2, r3
 800fe10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	da19      	bge.n	800fe50 <tPluckDetectorInt_tick+0x8a8>
 800fe1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800fe22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe28:	1ad2      	subs	r2, r2, r3
 800fe2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fe32:	429a      	cmp	r2, r3
 800fe34:	da0c      	bge.n	800fe50 <tPluckDetectorInt_tick+0x8a8>
					{
						//### Note: This can be rounded to the nearest int, but doesn't need to be
						p->midpoint_estimate = (p->myMax + p->myMin) >> 1;
 800fe36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe3a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800fe3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe42:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800fe46:	4413      	add	r3, r2
 800fe48:	085a      	lsrs	r2, r3, #1
 800fe4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe4e:	675a      	str	r2, [r3, #116]	; 0x74
					}
				}

				//### RESET THE DELAY SINCE LAST DETECTION
				p->delay_since_last_detect = 0;
 800fe50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe54:	2200      	movs	r2, #0
 800fe56:	679a      	str	r2, [r3, #120]	; 0x78

				//### UPDATE THE INFORMATION FOR THE PRIOR THREE DETECT EVENTS
				p->prior_detect_3_index = p->prior_detect_2_index;
 800fe58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800fe5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe62:	66da      	str	r2, [r3, #108]	; 0x6c
				p->prior_detect_3_value = p->prior_detect_2_value;
 800fe64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800fe6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe6e:	671a      	str	r2, [r3, #112]	; 0x70
				p->prior_detect_2_index = p->prior_detect_1_index;
 800fe70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe7a:	665a      	str	r2, [r3, #100]	; 0x64
				p->prior_detect_2_value = p->prior_detect_1_value;
 800fe7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fe82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe86:	669a      	str	r2, [r3, #104]	; 0x68
				p->prior_detect_1_index = p->Pindex;
 800fe88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe8c:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 800fe90:	461a      	mov	r2, r3
 800fe92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe96:	65da      	str	r2, [r3, #92]	; 0x5c
				p->prior_detect_1_value = p->smoothed;
 800fe98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fea0:	461a      	mov	r2, r3
 800fea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fea6:	661a      	str	r2, [r3, #96]	; 0x60
	    }

	}

	//### INCREMENT THE TIME DELAY SINCE THE LAST PLUCK
	p->delay_since_last_detect = p->delay_since_last_detect + 1;
 800fea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800feac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800feae:	1c5a      	adds	r2, r3, #1
 800feb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800feb4:	679a      	str	r2, [r3, #120]	; 0x78

	//### INCREMENT INDEX COUNTER THAT TRACKS HOW MANY SAMPLES WE'VE SEEN SO FAR
	p->Pindex = p->Pindex + 1;
 800feb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800feba:	e9d3 1222 	ldrd	r1, r2, [r3, #136]	; 0x88
 800febe:	1c4b      	adds	r3, r1, #1
 800fec0:	f142 0400 	adc.w	r4, r2, #0
 800fec4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fec8:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	if (p->Pindex == 0)
 800fecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fed0:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 800fed4:	4323      	orrs	r3, r4
 800fed6:	d107      	bne.n	800fee8 <tPluckDetectorInt_tick+0x940>
	{
		p->Pindex = 1;
 800fed8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fedc:	f04f 0301 	mov.w	r3, #1
 800fee0:	f04f 0400 	mov.w	r4, #0
 800fee4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	}

	//### STORE CURRENT VALUES TO COMPARE AGAINST IN NEXT ITERATION
	p->prior_super_smoothed = p->super_smoothed;
 800fee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800feec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fef0:	461a      	mov	r2, r3
 800fef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fef6:	621a      	str	r2, [r3, #32]
	p->prior_smoothed = p->smoothed;
 800fef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fefc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff00:	461a      	mov	r2, r3
 800ff02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff06:	61da      	str	r2, [r3, #28]
	return pluckHappened;
 800ff08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	37b0      	adds	r7, #176	; 0xb0
 800ff10:	46bd      	mov	sp, r7
 800ff12:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800ff16:	bf00      	nop
 800ff18:	66666667 	.word	0x66666667

0800ff1c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 800ff20:	4b07      	ldr	r3, [pc, #28]	; (800ff40 <MX_RNG_Init+0x24>)
 800ff22:	4a08      	ldr	r2, [pc, #32]	; (800ff44 <MX_RNG_Init+0x28>)
 800ff24:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800ff26:	4b06      	ldr	r3, [pc, #24]	; (800ff40 <MX_RNG_Init+0x24>)
 800ff28:	2200      	movs	r2, #0
 800ff2a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800ff2c:	4804      	ldr	r0, [pc, #16]	; (800ff40 <MX_RNG_Init+0x24>)
 800ff2e:	f7f7 faed 	bl	800750c <HAL_RNG_Init>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800ff38:	f7ff fa2a 	bl	800f390 <Error_Handler>
  }

}
 800ff3c:	bf00      	nop
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	2000faf0 	.word	0x2000faf0
 800ff44:	48021800 	.word	0x48021800

0800ff48 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b085      	sub	sp, #20
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4a0b      	ldr	r2, [pc, #44]	; (800ff84 <HAL_RNG_MspInit+0x3c>)
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d10e      	bne.n	800ff78 <HAL_RNG_MspInit+0x30>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800ff5a:	4b0b      	ldr	r3, [pc, #44]	; (800ff88 <HAL_RNG_MspInit+0x40>)
 800ff5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ff60:	4a09      	ldr	r2, [pc, #36]	; (800ff88 <HAL_RNG_MspInit+0x40>)
 800ff62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff66:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800ff6a:	4b07      	ldr	r3, [pc, #28]	; (800ff88 <HAL_RNG_MspInit+0x40>)
 800ff6c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ff70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff74:	60fb      	str	r3, [r7, #12]
 800ff76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800ff78:	bf00      	nop
 800ff7a:	3714      	adds	r7, #20
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr
 800ff84:	48021800 	.word	0x48021800
 800ff88:	58024400 	.word	0x58024400

0800ff8c <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 800ff90:	4b2a      	ldr	r3, [pc, #168]	; (801003c <MX_SAI1_Init+0xb0>)
 800ff92:	4a2b      	ldr	r2, [pc, #172]	; (8010040 <MX_SAI1_Init+0xb4>)
 800ff94:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800ff96:	4b29      	ldr	r3, [pc, #164]	; (801003c <MX_SAI1_Init+0xb0>)
 800ff98:	2200      	movs	r2, #0
 800ff9a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800ff9c:	4b27      	ldr	r3, [pc, #156]	; (801003c <MX_SAI1_Init+0xb0>)
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800ffa2:	4b26      	ldr	r3, [pc, #152]	; (801003c <MX_SAI1_Init+0xb0>)
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800ffa8:	4b24      	ldr	r3, [pc, #144]	; (801003c <MX_SAI1_Init+0xb0>)
 800ffaa:	2200      	movs	r2, #0
 800ffac:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800ffae:	4b23      	ldr	r3, [pc, #140]	; (801003c <MX_SAI1_Init+0xb0>)
 800ffb0:	2201      	movs	r2, #1
 800ffb2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800ffb4:	4b21      	ldr	r3, [pc, #132]	; (801003c <MX_SAI1_Init+0xb0>)
 800ffb6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800ffba:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800ffbc:	4b1f      	ldr	r3, [pc, #124]	; (801003c <MX_SAI1_Init+0xb0>)
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800ffc2:	4b1e      	ldr	r3, [pc, #120]	; (801003c <MX_SAI1_Init+0xb0>)
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800ffc8:	4b1c      	ldr	r3, [pc, #112]	; (801003c <MX_SAI1_Init+0xb0>)
 800ffca:	2200      	movs	r2, #0
 800ffcc:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800ffce:	4b1b      	ldr	r3, [pc, #108]	; (801003c <MX_SAI1_Init+0xb0>)
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800ffd4:	2302      	movs	r3, #2
 800ffd6:	2202      	movs	r2, #2
 800ffd8:	2100      	movs	r1, #0
 800ffda:	4818      	ldr	r0, [pc, #96]	; (801003c <MX_SAI1_Init+0xb0>)
 800ffdc:	f7f7 fb40 	bl	8007660 <HAL_SAI_InitProtocol>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d001      	beq.n	800ffea <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 800ffe6:	f7ff f9d3 	bl	800f390 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800ffea:	4b16      	ldr	r3, [pc, #88]	; (8010044 <MX_SAI1_Init+0xb8>)
 800ffec:	4a16      	ldr	r2, [pc, #88]	; (8010048 <MX_SAI1_Init+0xbc>)
 800ffee:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800fff0:	4b14      	ldr	r3, [pc, #80]	; (8010044 <MX_SAI1_Init+0xb8>)
 800fff2:	2203      	movs	r2, #3
 800fff4:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800fff6:	4b13      	ldr	r3, [pc, #76]	; (8010044 <MX_SAI1_Init+0xb8>)
 800fff8:	2201      	movs	r2, #1
 800fffa:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800fffc:	4b11      	ldr	r3, [pc, #68]	; (8010044 <MX_SAI1_Init+0xb8>)
 800fffe:	2200      	movs	r2, #0
 8010000:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8010002:	4b10      	ldr	r3, [pc, #64]	; (8010044 <MX_SAI1_Init+0xb8>)
 8010004:	2201      	movs	r2, #1
 8010006:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8010008:	4b0e      	ldr	r3, [pc, #56]	; (8010044 <MX_SAI1_Init+0xb8>)
 801000a:	2200      	movs	r2, #0
 801000c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 801000e:	4b0d      	ldr	r3, [pc, #52]	; (8010044 <MX_SAI1_Init+0xb8>)
 8010010:	2200      	movs	r2, #0
 8010012:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8010014:	4b0b      	ldr	r3, [pc, #44]	; (8010044 <MX_SAI1_Init+0xb8>)
 8010016:	2200      	movs	r2, #0
 8010018:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 801001a:	4b0a      	ldr	r3, [pc, #40]	; (8010044 <MX_SAI1_Init+0xb8>)
 801001c:	2200      	movs	r2, #0
 801001e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8010020:	2302      	movs	r3, #2
 8010022:	2202      	movs	r2, #2
 8010024:	2100      	movs	r1, #0
 8010026:	4807      	ldr	r0, [pc, #28]	; (8010044 <MX_SAI1_Init+0xb8>)
 8010028:	f7f7 fb1a 	bl	8007660 <HAL_SAI_InitProtocol>
 801002c:	4603      	mov	r3, r0
 801002e:	2b00      	cmp	r3, #0
 8010030:	d001      	beq.n	8010036 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8010032:	f7ff f9ad 	bl	800f390 <Error_Handler>
  }

}
 8010036:	bf00      	nop
 8010038:	bd80      	pop	{r7, pc}
 801003a:	bf00      	nop
 801003c:	2000fc8c 	.word	0x2000fc8c
 8010040:	40015804 	.word	0x40015804
 8010044:	2000fb04 	.word	0x2000fb04
 8010048:	40015824 	.word	0x40015824

0801004c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b08a      	sub	sp, #40	; 0x28
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a6f      	ldr	r2, [pc, #444]	; (8010218 <HAL_SAI_MspInit+0x1cc>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d169      	bne.n	8010132 <HAL_SAI_MspInit+0xe6>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 801005e:	4b6f      	ldr	r3, [pc, #444]	; (801021c <HAL_SAI_MspInit+0x1d0>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d10e      	bne.n	8010084 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8010066:	4b6e      	ldr	r3, [pc, #440]	; (8010220 <HAL_SAI_MspInit+0x1d4>)
 8010068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801006c:	4a6c      	ldr	r2, [pc, #432]	; (8010220 <HAL_SAI_MspInit+0x1d4>)
 801006e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010072:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8010076:	4b6a      	ldr	r3, [pc, #424]	; (8010220 <HAL_SAI_MspInit+0x1d4>)
 8010078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801007c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010080:	613b      	str	r3, [r7, #16]
 8010082:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8010084:	4b65      	ldr	r3, [pc, #404]	; (801021c <HAL_SAI_MspInit+0x1d0>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	3301      	adds	r3, #1
 801008a:	4a64      	ldr	r2, [pc, #400]	; (801021c <HAL_SAI_MspInit+0x1d0>)
 801008c:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 801008e:	2374      	movs	r3, #116	; 0x74
 8010090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010092:	2302      	movs	r3, #2
 8010094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010096:	2300      	movs	r3, #0
 8010098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801009a:	2303      	movs	r3, #3
 801009c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 801009e:	2306      	movs	r3, #6
 80100a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80100a2:	f107 0314 	add.w	r3, r7, #20
 80100a6:	4619      	mov	r1, r3
 80100a8:	485e      	ldr	r0, [pc, #376]	; (8010224 <HAL_SAI_MspInit+0x1d8>)
 80100aa:	f7f4 f907 	bl	80042bc <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai1_a.Instance = DMA1_Stream1;
 80100ae:	4b5e      	ldr	r3, [pc, #376]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 80100b0:	4a5e      	ldr	r2, [pc, #376]	; (801022c <HAL_SAI_MspInit+0x1e0>)
 80100b2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80100b4:	4b5c      	ldr	r3, [pc, #368]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 80100b6:	2257      	movs	r2, #87	; 0x57
 80100b8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80100ba:	4b5b      	ldr	r3, [pc, #364]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 80100bc:	2240      	movs	r2, #64	; 0x40
 80100be:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80100c0:	4b59      	ldr	r3, [pc, #356]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 80100c2:	2200      	movs	r2, #0
 80100c4:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80100c6:	4b58      	ldr	r3, [pc, #352]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 80100c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80100cc:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80100ce:	4b56      	ldr	r3, [pc, #344]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 80100d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80100d4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80100d6:	4b54      	ldr	r3, [pc, #336]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 80100d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80100dc:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80100de:	4b52      	ldr	r3, [pc, #328]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 80100e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80100e4:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80100e6:	4b50      	ldr	r3, [pc, #320]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 80100e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80100ec:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80100ee:	4b4e      	ldr	r3, [pc, #312]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 80100f0:	2204      	movs	r2, #4
 80100f2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80100f4:	4b4c      	ldr	r3, [pc, #304]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 80100f6:	2200      	movs	r2, #0
 80100f8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80100fa:	4b4b      	ldr	r3, [pc, #300]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 80100fc:	2200      	movs	r2, #0
 80100fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8010100:	4b49      	ldr	r3, [pc, #292]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 8010102:	2200      	movs	r2, #0
 8010104:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8010106:	4848      	ldr	r0, [pc, #288]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 8010108:	f7f1 fdb0 	bl	8001c6c <HAL_DMA_Init>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d001      	beq.n	8010116 <HAL_SAI_MspInit+0xca>
    {
      Error_Handler();
 8010112:	f7ff f93d 	bl	800f390 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	4a43      	ldr	r2, [pc, #268]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 801011a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801011e:	4a42      	ldr	r2, [pc, #264]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	4a40      	ldr	r2, [pc, #256]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 8010128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 801012c:	4a3e      	ldr	r2, [pc, #248]	; (8010228 <HAL_SAI_MspInit+0x1dc>)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(hsai->Instance==SAI1_Block_B)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4a3e      	ldr	r2, [pc, #248]	; (8010230 <HAL_SAI_MspInit+0x1e4>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d169      	bne.n	8010210 <HAL_SAI_MspInit+0x1c4>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 801013c:	4b37      	ldr	r3, [pc, #220]	; (801021c <HAL_SAI_MspInit+0x1d0>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d10e      	bne.n	8010162 <HAL_SAI_MspInit+0x116>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8010144:	4b36      	ldr	r3, [pc, #216]	; (8010220 <HAL_SAI_MspInit+0x1d4>)
 8010146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801014a:	4a35      	ldr	r2, [pc, #212]	; (8010220 <HAL_SAI_MspInit+0x1d4>)
 801014c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010150:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8010154:	4b32      	ldr	r3, [pc, #200]	; (8010220 <HAL_SAI_MspInit+0x1d4>)
 8010156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801015a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801015e:	60fb      	str	r3, [r7, #12]
 8010160:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8010162:	4b2e      	ldr	r3, [pc, #184]	; (801021c <HAL_SAI_MspInit+0x1d0>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	3301      	adds	r3, #1
 8010168:	4a2c      	ldr	r2, [pc, #176]	; (801021c <HAL_SAI_MspInit+0x1d0>)
 801016a:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 801016c:	2308      	movs	r3, #8
 801016e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010170:	2302      	movs	r3, #2
 8010172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010174:	2300      	movs	r3, #0
 8010176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010178:	2303      	movs	r3, #3
 801017a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 801017c:	2306      	movs	r3, #6
 801017e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010180:	f107 0314 	add.w	r3, r7, #20
 8010184:	4619      	mov	r1, r3
 8010186:	4827      	ldr	r0, [pc, #156]	; (8010224 <HAL_SAI_MspInit+0x1d8>)
 8010188:	f7f4 f898 	bl	80042bc <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai1_b.Instance = DMA1_Stream2;
 801018c:	4b29      	ldr	r3, [pc, #164]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 801018e:	4a2a      	ldr	r2, [pc, #168]	; (8010238 <HAL_SAI_MspInit+0x1ec>)
 8010190:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8010192:	4b28      	ldr	r3, [pc, #160]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 8010194:	2258      	movs	r2, #88	; 0x58
 8010196:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010198:	4b26      	ldr	r3, [pc, #152]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 801019a:	2200      	movs	r2, #0
 801019c:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 801019e:	4b25      	ldr	r3, [pc, #148]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 80101a0:	2200      	movs	r2, #0
 80101a2:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80101a4:	4b23      	ldr	r3, [pc, #140]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 80101a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80101aa:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80101ac:	4b21      	ldr	r3, [pc, #132]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 80101ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80101b2:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80101b4:	4b1f      	ldr	r3, [pc, #124]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 80101b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80101ba:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80101bc:	4b1d      	ldr	r3, [pc, #116]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 80101be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80101c2:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80101c4:	4b1b      	ldr	r3, [pc, #108]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 80101c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80101ca:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80101cc:	4b19      	ldr	r3, [pc, #100]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 80101ce:	2204      	movs	r2, #4
 80101d0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80101d2:	4b18      	ldr	r3, [pc, #96]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 80101d4:	2200      	movs	r2, #0
 80101d6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 80101d8:	4b16      	ldr	r3, [pc, #88]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 80101da:	2200      	movs	r2, #0
 80101dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80101de:	4b15      	ldr	r3, [pc, #84]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 80101e0:	2200      	movs	r2, #0
 80101e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80101e4:	4813      	ldr	r0, [pc, #76]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 80101e6:	f7f1 fd41 	bl	8001c6c <HAL_DMA_Init>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d001      	beq.n	80101f4 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 80101f0:	f7ff f8ce 	bl	800f390 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	4a0f      	ldr	r2, [pc, #60]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 80101f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80101fc:	4a0d      	ldr	r2, [pc, #52]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	4a0b      	ldr	r2, [pc, #44]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 8010206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 801020a:	4a0a      	ldr	r2, [pc, #40]	; (8010234 <HAL_SAI_MspInit+0x1e8>)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8010210:	bf00      	nop
 8010212:	3728      	adds	r7, #40	; 0x28
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	40015804 	.word	0x40015804
 801021c:	200002d8 	.word	0x200002d8
 8010220:	58024400 	.word	0x58024400
 8010224:	58021000 	.word	0x58021000
 8010228:	2000fb9c 	.word	0x2000fb9c
 801022c:	40020028 	.word	0x40020028
 8010230:	40015824 	.word	0x40015824
 8010234:	2000fc14 	.word	0x2000fc14
 8010238:	40020040 	.word	0x40020040

0801023c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	4603      	mov	r3, r0
 8010244:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010246:	4b0b      	ldr	r3, [pc, #44]	; (8010274 <SD_CheckStatus+0x38>)
 8010248:	2201      	movs	r2, #1
 801024a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801024c:	f7fe f9a0 	bl	800e590 <BSP_SD_GetCardState>
 8010250:	4603      	mov	r3, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	d107      	bne.n	8010266 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010256:	4b07      	ldr	r3, [pc, #28]	; (8010274 <SD_CheckStatus+0x38>)
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	b2db      	uxtb	r3, r3
 801025c:	f023 0301 	bic.w	r3, r3, #1
 8010260:	b2da      	uxtb	r2, r3
 8010262:	4b04      	ldr	r3, [pc, #16]	; (8010274 <SD_CheckStatus+0x38>)
 8010264:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010266:	4b03      	ldr	r3, [pc, #12]	; (8010274 <SD_CheckStatus+0x38>)
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	b2db      	uxtb	r3, r3
}
 801026c:	4618      	mov	r0, r3
 801026e:	3708      	adds	r7, #8
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}
 8010274:	2000000d 	.word	0x2000000d

08010278 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	4603      	mov	r3, r0
 8010280:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8010282:	4b0b      	ldr	r3, [pc, #44]	; (80102b0 <SD_initialize+0x38>)
 8010284:	2201      	movs	r2, #1
 8010286:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010288:	f7fe f920 	bl	800e4cc <BSP_SD_Init>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d107      	bne.n	80102a2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8010292:	79fb      	ldrb	r3, [r7, #7]
 8010294:	4618      	mov	r0, r3
 8010296:	f7ff ffd1 	bl	801023c <SD_CheckStatus>
 801029a:	4603      	mov	r3, r0
 801029c:	461a      	mov	r2, r3
 801029e:	4b04      	ldr	r3, [pc, #16]	; (80102b0 <SD_initialize+0x38>)
 80102a0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80102a2:	4b03      	ldr	r3, [pc, #12]	; (80102b0 <SD_initialize+0x38>)
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	b2db      	uxtb	r3, r3
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3708      	adds	r7, #8
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}
 80102b0:	2000000d 	.word	0x2000000d

080102b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	4603      	mov	r3, r0
 80102bc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80102be:	79fb      	ldrb	r3, [r7, #7]
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7ff ffbb 	bl	801023c <SD_CheckStatus>
 80102c6:	4603      	mov	r3, r0
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3708      	adds	r7, #8
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b086      	sub	sp, #24
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	60b9      	str	r1, [r7, #8]
 80102d8:	607a      	str	r2, [r7, #4]
 80102da:	603b      	str	r3, [r7, #0]
 80102dc:	4603      	mov	r3, r0
 80102de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80102e0:	2301      	movs	r3, #1
 80102e2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80102e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102e8:	683a      	ldr	r2, [r7, #0]
 80102ea:	6879      	ldr	r1, [r7, #4]
 80102ec:	68b8      	ldr	r0, [r7, #8]
 80102ee:	f7fe f913 	bl	800e518 <BSP_SD_ReadBlocks>
 80102f2:	4603      	mov	r3, r0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d107      	bne.n	8010308 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80102f8:	bf00      	nop
 80102fa:	f7fe f949 	bl	800e590 <BSP_SD_GetCardState>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d1fa      	bne.n	80102fa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8010304:	2300      	movs	r3, #0
 8010306:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010308:	7dfb      	ldrb	r3, [r7, #23]
}
 801030a:	4618      	mov	r0, r3
 801030c:	3718      	adds	r7, #24
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}

08010312 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010312:	b580      	push	{r7, lr}
 8010314:	b086      	sub	sp, #24
 8010316:	af00      	add	r7, sp, #0
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	607a      	str	r2, [r7, #4]
 801031c:	603b      	str	r3, [r7, #0]
 801031e:	4603      	mov	r3, r0
 8010320:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010322:	2301      	movs	r3, #1
 8010324:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8010326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801032a:	683a      	ldr	r2, [r7, #0]
 801032c:	6879      	ldr	r1, [r7, #4]
 801032e:	68b8      	ldr	r0, [r7, #8]
 8010330:	f7fe f910 	bl	800e554 <BSP_SD_WriteBlocks>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d107      	bne.n	801034a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 801033a:	bf00      	nop
 801033c:	f7fe f928 	bl	800e590 <BSP_SD_GetCardState>
 8010340:	4603      	mov	r3, r0
 8010342:	2b00      	cmp	r3, #0
 8010344:	d1fa      	bne.n	801033c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8010346:	2300      	movs	r3, #0
 8010348:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 801034a:	7dfb      	ldrb	r3, [r7, #23]
}
 801034c:	4618      	mov	r0, r3
 801034e:	3718      	adds	r7, #24
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b08c      	sub	sp, #48	; 0x30
 8010358:	af00      	add	r7, sp, #0
 801035a:	4603      	mov	r3, r0
 801035c:	603a      	str	r2, [r7, #0]
 801035e:	71fb      	strb	r3, [r7, #7]
 8010360:	460b      	mov	r3, r1
 8010362:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010364:	2301      	movs	r3, #1
 8010366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801036a:	4b25      	ldr	r3, [pc, #148]	; (8010400 <SD_ioctl+0xac>)
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	b2db      	uxtb	r3, r3
 8010370:	f003 0301 	and.w	r3, r3, #1
 8010374:	2b00      	cmp	r3, #0
 8010376:	d001      	beq.n	801037c <SD_ioctl+0x28>
 8010378:	2303      	movs	r3, #3
 801037a:	e03c      	b.n	80103f6 <SD_ioctl+0xa2>

  switch (cmd)
 801037c:	79bb      	ldrb	r3, [r7, #6]
 801037e:	2b03      	cmp	r3, #3
 8010380:	d834      	bhi.n	80103ec <SD_ioctl+0x98>
 8010382:	a201      	add	r2, pc, #4	; (adr r2, 8010388 <SD_ioctl+0x34>)
 8010384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010388:	08010399 	.word	0x08010399
 801038c:	080103a1 	.word	0x080103a1
 8010390:	080103b9 	.word	0x080103b9
 8010394:	080103d3 	.word	0x080103d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010398:	2300      	movs	r3, #0
 801039a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801039e:	e028      	b.n	80103f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80103a0:	f107 0308 	add.w	r3, r7, #8
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fe f903 	bl	800e5b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80103aa:	6a3a      	ldr	r2, [r7, #32]
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80103b0:	2300      	movs	r3, #0
 80103b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103b6:	e01c      	b.n	80103f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80103b8:	f107 0308 	add.w	r3, r7, #8
 80103bc:	4618      	mov	r0, r3
 80103be:	f7fe f8f7 	bl	800e5b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80103c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c4:	b29a      	uxth	r2, r3
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80103ca:	2300      	movs	r3, #0
 80103cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103d0:	e00f      	b.n	80103f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80103d2:	f107 0308 	add.w	r3, r7, #8
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fe f8ea 	bl	800e5b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80103dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103de:	0a5a      	lsrs	r2, r3, #9
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80103e4:	2300      	movs	r3, #0
 80103e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103ea:	e002      	b.n	80103f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80103ec:	2304      	movs	r3, #4
 80103ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80103f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3730      	adds	r7, #48	; 0x30
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	2000000d 	.word	0x2000000d

08010404 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8010404:	b480      	push	{r7}
 8010406:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8010408:	4b0d      	ldr	r3, [pc, #52]	; (8010440 <MX_SDMMC1_SD_Init+0x3c>)
 801040a:	4a0e      	ldr	r2, [pc, #56]	; (8010444 <MX_SDMMC1_SD_Init+0x40>)
 801040c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801040e:	4b0c      	ldr	r3, [pc, #48]	; (8010440 <MX_SDMMC1_SD_Init+0x3c>)
 8010410:	2200      	movs	r2, #0
 8010412:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8010414:	4b0a      	ldr	r3, [pc, #40]	; (8010440 <MX_SDMMC1_SD_Init+0x3c>)
 8010416:	2200      	movs	r2, #0
 8010418:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801041a:	4b09      	ldr	r3, [pc, #36]	; (8010440 <MX_SDMMC1_SD_Init+0x3c>)
 801041c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010420:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8010422:	4b07      	ldr	r3, [pc, #28]	; (8010440 <MX_SDMMC1_SD_Init+0x3c>)
 8010424:	2200      	movs	r2, #0
 8010426:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 16;
 8010428:	4b05      	ldr	r3, [pc, #20]	; (8010440 <MX_SDMMC1_SD_Init+0x3c>)
 801042a:	2210      	movs	r2, #16
 801042c:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 801042e:	4b04      	ldr	r3, [pc, #16]	; (8010440 <MX_SDMMC1_SD_Init+0x3c>)
 8010430:	2201      	movs	r2, #1
 8010432:	619a      	str	r2, [r3, #24]

}
 8010434:	bf00      	nop
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr
 801043e:	bf00      	nop
 8010440:	2000fd24 	.word	0x2000fd24
 8010444:	52007000 	.word	0x52007000

08010448 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b08a      	sub	sp, #40	; 0x28
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010450:	f107 0314 	add.w	r3, r7, #20
 8010454:	2200      	movs	r2, #0
 8010456:	601a      	str	r2, [r3, #0]
 8010458:	605a      	str	r2, [r3, #4]
 801045a:	609a      	str	r2, [r3, #8]
 801045c:	60da      	str	r2, [r3, #12]
 801045e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4a2e      	ldr	r2, [pc, #184]	; (8010520 <HAL_SD_MspInit+0xd8>)
 8010466:	4293      	cmp	r3, r2
 8010468:	d155      	bne.n	8010516 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801046a:	4b2e      	ldr	r3, [pc, #184]	; (8010524 <HAL_SD_MspInit+0xdc>)
 801046c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010470:	4a2c      	ldr	r2, [pc, #176]	; (8010524 <HAL_SD_MspInit+0xdc>)
 8010472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010476:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 801047a:	4b2a      	ldr	r3, [pc, #168]	; (8010524 <HAL_SD_MspInit+0xdc>)
 801047c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010484:	613b      	str	r3, [r7, #16]
 8010486:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010488:	4b26      	ldr	r3, [pc, #152]	; (8010524 <HAL_SD_MspInit+0xdc>)
 801048a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801048e:	4a25      	ldr	r2, [pc, #148]	; (8010524 <HAL_SD_MspInit+0xdc>)
 8010490:	f043 0304 	orr.w	r3, r3, #4
 8010494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010498:	4b22      	ldr	r3, [pc, #136]	; (8010524 <HAL_SD_MspInit+0xdc>)
 801049a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801049e:	f003 0304 	and.w	r3, r3, #4
 80104a2:	60fb      	str	r3, [r7, #12]
 80104a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80104a6:	4b1f      	ldr	r3, [pc, #124]	; (8010524 <HAL_SD_MspInit+0xdc>)
 80104a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80104ac:	4a1d      	ldr	r2, [pc, #116]	; (8010524 <HAL_SD_MspInit+0xdc>)
 80104ae:	f043 0308 	orr.w	r3, r3, #8
 80104b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80104b6:	4b1b      	ldr	r3, [pc, #108]	; (8010524 <HAL_SD_MspInit+0xdc>)
 80104b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80104bc:	f003 0308 	and.w	r3, r3, #8
 80104c0:	60bb      	str	r3, [r7, #8]
 80104c2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80104c4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80104c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104ca:	2302      	movs	r3, #2
 80104cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80104ce:	2301      	movs	r3, #1
 80104d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80104d2:	2301      	movs	r3, #1
 80104d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80104d6:	230c      	movs	r3, #12
 80104d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80104da:	f107 0314 	add.w	r3, r7, #20
 80104de:	4619      	mov	r1, r3
 80104e0:	4811      	ldr	r0, [pc, #68]	; (8010528 <HAL_SD_MspInit+0xe0>)
 80104e2:	f7f3 feeb 	bl	80042bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80104e6:	2304      	movs	r3, #4
 80104e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104ea:	2302      	movs	r3, #2
 80104ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80104ee:	2301      	movs	r3, #1
 80104f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80104f2:	2301      	movs	r3, #1
 80104f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80104f6:	230c      	movs	r3, #12
 80104f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80104fa:	f107 0314 	add.w	r3, r7, #20
 80104fe:	4619      	mov	r1, r3
 8010500:	480a      	ldr	r0, [pc, #40]	; (801052c <HAL_SD_MspInit+0xe4>)
 8010502:	f7f3 fedb 	bl	80042bc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 8010506:	2200      	movs	r2, #0
 8010508:	2107      	movs	r1, #7
 801050a:	2031      	movs	r0, #49	; 0x31
 801050c:	f7f1 fb01 	bl	8001b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8010510:	2031      	movs	r0, #49	; 0x31
 8010512:	f7f1 fb18 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8010516:	bf00      	nop
 8010518:	3728      	adds	r7, #40	; 0x28
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	52007000 	.word	0x52007000
 8010524:	58024400 	.word	0x58024400
 8010528:	58020800 	.word	0x58020800
 801052c:	58020c00 	.word	0x58020c00

08010530 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8010534:	4b28      	ldr	r3, [pc, #160]	; (80105d8 <MX_SPI1_Init+0xa8>)
 8010536:	4a29      	ldr	r2, [pc, #164]	; (80105dc <MX_SPI1_Init+0xac>)
 8010538:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801053a:	4b27      	ldr	r3, [pc, #156]	; (80105d8 <MX_SPI1_Init+0xa8>)
 801053c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8010540:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8010542:	4b25      	ldr	r3, [pc, #148]	; (80105d8 <MX_SPI1_Init+0xa8>)
 8010544:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8010548:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801054a:	4b23      	ldr	r3, [pc, #140]	; (80105d8 <MX_SPI1_Init+0xa8>)
 801054c:	2207      	movs	r2, #7
 801054e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010550:	4b21      	ldr	r3, [pc, #132]	; (80105d8 <MX_SPI1_Init+0xa8>)
 8010552:	2200      	movs	r2, #0
 8010554:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010556:	4b20      	ldr	r3, [pc, #128]	; (80105d8 <MX_SPI1_Init+0xa8>)
 8010558:	2200      	movs	r2, #0
 801055a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 801055c:	4b1e      	ldr	r3, [pc, #120]	; (80105d8 <MX_SPI1_Init+0xa8>)
 801055e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8010562:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8010564:	4b1c      	ldr	r3, [pc, #112]	; (80105d8 <MX_SPI1_Init+0xa8>)
 8010566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801056a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801056c:	4b1a      	ldr	r3, [pc, #104]	; (80105d8 <MX_SPI1_Init+0xa8>)
 801056e:	2200      	movs	r2, #0
 8010570:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8010572:	4b19      	ldr	r3, [pc, #100]	; (80105d8 <MX_SPI1_Init+0xa8>)
 8010574:	2200      	movs	r2, #0
 8010576:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010578:	4b17      	ldr	r3, [pc, #92]	; (80105d8 <MX_SPI1_Init+0xa8>)
 801057a:	2200      	movs	r2, #0
 801057c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 801057e:	4b16      	ldr	r3, [pc, #88]	; (80105d8 <MX_SPI1_Init+0xa8>)
 8010580:	2200      	movs	r2, #0
 8010582:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8010584:	4b14      	ldr	r3, [pc, #80]	; (80105d8 <MX_SPI1_Init+0xa8>)
 8010586:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801058a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 801058c:	4b12      	ldr	r3, [pc, #72]	; (80105d8 <MX_SPI1_Init+0xa8>)
 801058e:	2200      	movs	r2, #0
 8010590:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8010592:	4b11      	ldr	r3, [pc, #68]	; (80105d8 <MX_SPI1_Init+0xa8>)
 8010594:	2200      	movs	r2, #0
 8010596:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8010598:	4b0f      	ldr	r3, [pc, #60]	; (80105d8 <MX_SPI1_Init+0xa8>)
 801059a:	2200      	movs	r2, #0
 801059c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 801059e:	4b0e      	ldr	r3, [pc, #56]	; (80105d8 <MX_SPI1_Init+0xa8>)
 80105a0:	2200      	movs	r2, #0
 80105a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80105a4:	4b0c      	ldr	r3, [pc, #48]	; (80105d8 <MX_SPI1_Init+0xa8>)
 80105a6:	2200      	movs	r2, #0
 80105a8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80105aa:	4b0b      	ldr	r3, [pc, #44]	; (80105d8 <MX_SPI1_Init+0xa8>)
 80105ac:	2200      	movs	r2, #0
 80105ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80105b0:	4b09      	ldr	r3, [pc, #36]	; (80105d8 <MX_SPI1_Init+0xa8>)
 80105b2:	2200      	movs	r2, #0
 80105b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80105b6:	4b08      	ldr	r3, [pc, #32]	; (80105d8 <MX_SPI1_Init+0xa8>)
 80105b8:	2200      	movs	r2, #0
 80105ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80105bc:	4b06      	ldr	r3, [pc, #24]	; (80105d8 <MX_SPI1_Init+0xa8>)
 80105be:	2200      	movs	r2, #0
 80105c0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80105c2:	4805      	ldr	r0, [pc, #20]	; (80105d8 <MX_SPI1_Init+0xa8>)
 80105c4:	f7f9 fd9a 	bl	800a0fc <HAL_SPI_Init>
 80105c8:	4603      	mov	r3, r0
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d001      	beq.n	80105d2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80105ce:	f7fe fedf 	bl	800f390 <Error_Handler>
  }

}
 80105d2:	bf00      	nop
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	2000fea4 	.word	0x2000fea4
 80105dc:	40013000 	.word	0x40013000

080105e0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80105e4:	4b24      	ldr	r3, [pc, #144]	; (8010678 <MX_SPI2_Init+0x98>)
 80105e6:	4a25      	ldr	r2, [pc, #148]	; (801067c <MX_SPI2_Init+0x9c>)
 80105e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80105ea:	4b23      	ldr	r3, [pc, #140]	; (8010678 <MX_SPI2_Init+0x98>)
 80105ec:	2200      	movs	r2, #0
 80105ee:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80105f0:	4b21      	ldr	r3, [pc, #132]	; (8010678 <MX_SPI2_Init+0x98>)
 80105f2:	2200      	movs	r2, #0
 80105f4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80105f6:	4b20      	ldr	r3, [pc, #128]	; (8010678 <MX_SPI2_Init+0x98>)
 80105f8:	2207      	movs	r2, #7
 80105fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80105fc:	4b1e      	ldr	r3, [pc, #120]	; (8010678 <MX_SPI2_Init+0x98>)
 80105fe:	2200      	movs	r2, #0
 8010600:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010602:	4b1d      	ldr	r3, [pc, #116]	; (8010678 <MX_SPI2_Init+0x98>)
 8010604:	2200      	movs	r2, #0
 8010606:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8010608:	4b1b      	ldr	r3, [pc, #108]	; (8010678 <MX_SPI2_Init+0x98>)
 801060a:	2200      	movs	r2, #0
 801060c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801060e:	4b1a      	ldr	r3, [pc, #104]	; (8010678 <MX_SPI2_Init+0x98>)
 8010610:	2200      	movs	r2, #0
 8010612:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8010614:	4b18      	ldr	r3, [pc, #96]	; (8010678 <MX_SPI2_Init+0x98>)
 8010616:	2200      	movs	r2, #0
 8010618:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801061a:	4b17      	ldr	r3, [pc, #92]	; (8010678 <MX_SPI2_Init+0x98>)
 801061c:	2200      	movs	r2, #0
 801061e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8010620:	4b15      	ldr	r3, [pc, #84]	; (8010678 <MX_SPI2_Init+0x98>)
 8010622:	2200      	movs	r2, #0
 8010624:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8010626:	4b14      	ldr	r3, [pc, #80]	; (8010678 <MX_SPI2_Init+0x98>)
 8010628:	2200      	movs	r2, #0
 801062a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 801062c:	4b12      	ldr	r3, [pc, #72]	; (8010678 <MX_SPI2_Init+0x98>)
 801062e:	2200      	movs	r2, #0
 8010630:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8010632:	4b11      	ldr	r3, [pc, #68]	; (8010678 <MX_SPI2_Init+0x98>)
 8010634:	2200      	movs	r2, #0
 8010636:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8010638:	4b0f      	ldr	r3, [pc, #60]	; (8010678 <MX_SPI2_Init+0x98>)
 801063a:	2200      	movs	r2, #0
 801063c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 801063e:	4b0e      	ldr	r3, [pc, #56]	; (8010678 <MX_SPI2_Init+0x98>)
 8010640:	2200      	movs	r2, #0
 8010642:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8010644:	4b0c      	ldr	r3, [pc, #48]	; (8010678 <MX_SPI2_Init+0x98>)
 8010646:	2200      	movs	r2, #0
 8010648:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 801064a:	4b0b      	ldr	r3, [pc, #44]	; (8010678 <MX_SPI2_Init+0x98>)
 801064c:	2200      	movs	r2, #0
 801064e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8010650:	4b09      	ldr	r3, [pc, #36]	; (8010678 <MX_SPI2_Init+0x98>)
 8010652:	2200      	movs	r2, #0
 8010654:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8010656:	4b08      	ldr	r3, [pc, #32]	; (8010678 <MX_SPI2_Init+0x98>)
 8010658:	2200      	movs	r2, #0
 801065a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 801065c:	4b06      	ldr	r3, [pc, #24]	; (8010678 <MX_SPI2_Init+0x98>)
 801065e:	2200      	movs	r2, #0
 8010660:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8010662:	4805      	ldr	r0, [pc, #20]	; (8010678 <MX_SPI2_Init+0x98>)
 8010664:	f7f9 fd4a 	bl	800a0fc <HAL_SPI_Init>
 8010668:	4603      	mov	r3, r0
 801066a:	2b00      	cmp	r3, #0
 801066c:	d001      	beq.n	8010672 <MX_SPI2_Init+0x92>
  {
    Error_Handler();
 801066e:	f7fe fe8f 	bl	800f390 <Error_Handler>
  }

}
 8010672:	bf00      	nop
 8010674:	bd80      	pop	{r7, pc}
 8010676:	bf00      	nop
 8010678:	2000fda4 	.word	0x2000fda4
 801067c:	40003800 	.word	0x40003800

08010680 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b08c      	sub	sp, #48	; 0x30
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010688:	f107 031c 	add.w	r3, r7, #28
 801068c:	2200      	movs	r2, #0
 801068e:	601a      	str	r2, [r3, #0]
 8010690:	605a      	str	r2, [r3, #4]
 8010692:	609a      	str	r2, [r3, #8]
 8010694:	60da      	str	r2, [r3, #12]
 8010696:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4aa9      	ldr	r2, [pc, #676]	; (8010944 <HAL_SPI_MspInit+0x2c4>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	f040 809f 	bne.w	80107e2 <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80106a4:	4ba8      	ldr	r3, [pc, #672]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 80106a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80106aa:	4aa7      	ldr	r2, [pc, #668]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 80106ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80106b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80106b4:	4ba4      	ldr	r3, [pc, #656]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 80106b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80106ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80106be:	61bb      	str	r3, [r7, #24]
 80106c0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80106c2:	4ba1      	ldr	r3, [pc, #644]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 80106c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80106c8:	4a9f      	ldr	r2, [pc, #636]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 80106ca:	f043 0308 	orr.w	r3, r3, #8
 80106ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80106d2:	4b9d      	ldr	r3, [pc, #628]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 80106d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80106d8:	f003 0308 	and.w	r3, r3, #8
 80106dc:	617b      	str	r3, [r7, #20]
 80106de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80106e0:	4b99      	ldr	r3, [pc, #612]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 80106e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80106e6:	4a98      	ldr	r2, [pc, #608]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 80106e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80106f0:	4b95      	ldr	r3, [pc, #596]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 80106f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80106f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106fa:	613b      	str	r3, [r7, #16]
 80106fc:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80106fe:	2380      	movs	r3, #128	; 0x80
 8010700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010702:	2302      	movs	r3, #2
 8010704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010706:	2300      	movs	r3, #0
 8010708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801070a:	2302      	movs	r3, #2
 801070c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801070e:	2305      	movs	r3, #5
 8010710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010712:	f107 031c 	add.w	r3, r7, #28
 8010716:	4619      	mov	r1, r3
 8010718:	488c      	ldr	r0, [pc, #560]	; (801094c <HAL_SPI_MspInit+0x2cc>)
 801071a:	f7f3 fdcf 	bl	80042bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801071e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010724:	2302      	movs	r3, #2
 8010726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010728:	2300      	movs	r3, #0
 801072a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801072c:	2300      	movs	r3, #0
 801072e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8010730:	2305      	movs	r3, #5
 8010732:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010734:	f107 031c 	add.w	r3, r7, #28
 8010738:	4619      	mov	r1, r3
 801073a:	4885      	ldr	r0, [pc, #532]	; (8010950 <HAL_SPI_MspInit+0x2d0>)
 801073c:	f7f3 fdbe 	bl	80042bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8010740:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010746:	2302      	movs	r3, #2
 8010748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801074a:	2300      	movs	r3, #0
 801074c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801074e:	2302      	movs	r3, #2
 8010750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8010752:	2305      	movs	r3, #5
 8010754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010756:	f107 031c 	add.w	r3, r7, #28
 801075a:	4619      	mov	r1, r3
 801075c:	487c      	ldr	r0, [pc, #496]	; (8010950 <HAL_SPI_MspInit+0x2d0>)
 801075e:	f7f3 fdad 	bl	80042bc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8010762:	4b7c      	ldr	r3, [pc, #496]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 8010764:	4a7c      	ldr	r2, [pc, #496]	; (8010958 <HAL_SPI_MspInit+0x2d8>)
 8010766:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8010768:	4b7a      	ldr	r3, [pc, #488]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 801076a:	2226      	movs	r2, #38	; 0x26
 801076c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801076e:	4b79      	ldr	r3, [pc, #484]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 8010770:	2240      	movs	r2, #64	; 0x40
 8010772:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010774:	4b77      	ldr	r3, [pc, #476]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 8010776:	2200      	movs	r2, #0
 8010778:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 801077a:	4b76      	ldr	r3, [pc, #472]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 801077c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010780:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010782:	4b74      	ldr	r3, [pc, #464]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 8010784:	2200      	movs	r2, #0
 8010786:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010788:	4b72      	ldr	r3, [pc, #456]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 801078a:	2200      	movs	r2, #0
 801078c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 801078e:	4b71      	ldr	r3, [pc, #452]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 8010790:	2200      	movs	r2, #0
 8010792:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8010794:	4b6f      	ldr	r3, [pc, #444]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 8010796:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801079a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 801079c:	4b6d      	ldr	r3, [pc, #436]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 801079e:	2204      	movs	r2, #4
 80107a0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80107a2:	4b6c      	ldr	r3, [pc, #432]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 80107a4:	2201      	movs	r2, #1
 80107a6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80107a8:	4b6a      	ldr	r3, [pc, #424]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 80107aa:	2200      	movs	r2, #0
 80107ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80107ae:	4b69      	ldr	r3, [pc, #420]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 80107b0:	2200      	movs	r2, #0
 80107b2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80107b4:	4867      	ldr	r0, [pc, #412]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 80107b6:	f7f1 fa59 	bl	8001c6c <HAL_DMA_Init>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d001      	beq.n	80107c4 <HAL_SPI_MspInit+0x144>
    {
      Error_Handler();
 80107c0:	f7fe fde6 	bl	800f390 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	4a63      	ldr	r2, [pc, #396]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 80107c8:	679a      	str	r2, [r3, #120]	; 0x78
 80107ca:	4a62      	ldr	r2, [pc, #392]	; (8010954 <HAL_SPI_MspInit+0x2d4>)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80107d0:	2200      	movs	r2, #0
 80107d2:	2100      	movs	r1, #0
 80107d4:	2023      	movs	r0, #35	; 0x23
 80107d6:	f7f1 f99c 	bl	8001b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80107da:	2023      	movs	r0, #35	; 0x23
 80107dc:	f7f1 f9b3 	bl	8001b46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80107e0:	e0ac      	b.n	801093c <HAL_SPI_MspInit+0x2bc>
  else if(spiHandle->Instance==SPI2)
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	4a5d      	ldr	r2, [pc, #372]	; (801095c <HAL_SPI_MspInit+0x2dc>)
 80107e8:	4293      	cmp	r3, r2
 80107ea:	f040 80a7 	bne.w	801093c <HAL_SPI_MspInit+0x2bc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80107ee:	4b56      	ldr	r3, [pc, #344]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 80107f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80107f4:	4a54      	ldr	r2, [pc, #336]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 80107f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80107fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80107fe:	4b52      	ldr	r3, [pc, #328]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 8010800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8010804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010808:	60fb      	str	r3, [r7, #12]
 801080a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801080c:	4b4e      	ldr	r3, [pc, #312]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 801080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010812:	4a4d      	ldr	r2, [pc, #308]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 8010814:	f043 0302 	orr.w	r3, r3, #2
 8010818:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801081c:	4b4a      	ldr	r3, [pc, #296]	; (8010948 <HAL_SPI_MspInit+0x2c8>)
 801081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010822:	f003 0302 	and.w	r3, r3, #2
 8010826:	60bb      	str	r3, [r7, #8]
 8010828:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 801082a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 801082e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010830:	2302      	movs	r3, #2
 8010832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010834:	2300      	movs	r3, #0
 8010836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010838:	2303      	movs	r3, #3
 801083a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801083c:	2305      	movs	r3, #5
 801083e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010840:	f107 031c 	add.w	r3, r7, #28
 8010844:	4619      	mov	r1, r3
 8010846:	4846      	ldr	r0, [pc, #280]	; (8010960 <HAL_SPI_MspInit+0x2e0>)
 8010848:	f7f3 fd38 	bl	80042bc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 801084c:	4b45      	ldr	r3, [pc, #276]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 801084e:	4a46      	ldr	r2, [pc, #280]	; (8010968 <HAL_SPI_MspInit+0x2e8>)
 8010850:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8010852:	4b44      	ldr	r3, [pc, #272]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 8010854:	2227      	movs	r2, #39	; 0x27
 8010856:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010858:	4b42      	ldr	r3, [pc, #264]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 801085a:	2200      	movs	r2, #0
 801085c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 801085e:	4b41      	ldr	r3, [pc, #260]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 8010860:	2200      	movs	r2, #0
 8010862:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8010864:	4b3f      	ldr	r3, [pc, #252]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 8010866:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801086a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801086c:	4b3d      	ldr	r3, [pc, #244]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 801086e:	2200      	movs	r2, #0
 8010870:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010872:	4b3c      	ldr	r3, [pc, #240]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 8010874:	2200      	movs	r2, #0
 8010876:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8010878:	4b3a      	ldr	r3, [pc, #232]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 801087a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801087e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8010880:	4b38      	ldr	r3, [pc, #224]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 8010882:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010886:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8010888:	4b36      	ldr	r3, [pc, #216]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 801088a:	2204      	movs	r2, #4
 801088c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 801088e:	4b35      	ldr	r3, [pc, #212]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 8010890:	2201      	movs	r2, #1
 8010892:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8010894:	4b33      	ldr	r3, [pc, #204]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 8010896:	2200      	movs	r2, #0
 8010898:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 801089a:	4b32      	ldr	r3, [pc, #200]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 801089c:	2200      	movs	r2, #0
 801089e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80108a0:	4830      	ldr	r0, [pc, #192]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 80108a2:	f7f1 f9e3 	bl	8001c6c <HAL_DMA_Init>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d001      	beq.n	80108b0 <HAL_SPI_MspInit+0x230>
      Error_Handler();
 80108ac:	f7fe fd70 	bl	800f390 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	4a2c      	ldr	r2, [pc, #176]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 80108b4:	67da      	str	r2, [r3, #124]	; 0x7c
 80108b6:	4a2b      	ldr	r2, [pc, #172]	; (8010964 <HAL_SPI_MspInit+0x2e4>)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80108bc:	4b2b      	ldr	r3, [pc, #172]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 80108be:	4a2c      	ldr	r2, [pc, #176]	; (8010970 <HAL_SPI_MspInit+0x2f0>)
 80108c0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80108c2:	4b2a      	ldr	r3, [pc, #168]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 80108c4:	2228      	movs	r2, #40	; 0x28
 80108c6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80108c8:	4b28      	ldr	r3, [pc, #160]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 80108ca:	2240      	movs	r2, #64	; 0x40
 80108cc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80108ce:	4b27      	ldr	r3, [pc, #156]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 80108d0:	2200      	movs	r2, #0
 80108d2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80108d4:	4b25      	ldr	r3, [pc, #148]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 80108d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80108da:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80108dc:	4b23      	ldr	r3, [pc, #140]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 80108de:	2200      	movs	r2, #0
 80108e0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80108e2:	4b22      	ldr	r3, [pc, #136]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 80108e4:	2200      	movs	r2, #0
 80108e6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80108e8:	4b20      	ldr	r3, [pc, #128]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 80108ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80108ee:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80108f0:	4b1e      	ldr	r3, [pc, #120]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 80108f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80108f6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80108f8:	4b1c      	ldr	r3, [pc, #112]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 80108fa:	2204      	movs	r2, #4
 80108fc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80108fe:	4b1b      	ldr	r3, [pc, #108]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 8010900:	2201      	movs	r2, #1
 8010902:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8010904:	4b19      	ldr	r3, [pc, #100]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 8010906:	2200      	movs	r2, #0
 8010908:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 801090a:	4b18      	ldr	r3, [pc, #96]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 801090c:	2200      	movs	r2, #0
 801090e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8010910:	4816      	ldr	r0, [pc, #88]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 8010912:	f7f1 f9ab 	bl	8001c6c <HAL_DMA_Init>
 8010916:	4603      	mov	r3, r0
 8010918:	2b00      	cmp	r3, #0
 801091a:	d001      	beq.n	8010920 <HAL_SPI_MspInit+0x2a0>
      Error_Handler();
 801091c:	f7fe fd38 	bl	800f390 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	4a12      	ldr	r2, [pc, #72]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 8010924:	679a      	str	r2, [r3, #120]	; 0x78
 8010926:	4a11      	ldr	r2, [pc, #68]	; (801096c <HAL_SPI_MspInit+0x2ec>)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 801092c:	2200      	movs	r2, #0
 801092e:	2100      	movs	r1, #0
 8010930:	2024      	movs	r0, #36	; 0x24
 8010932:	f7f1 f8ee 	bl	8001b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8010936:	2024      	movs	r0, #36	; 0x24
 8010938:	f7f1 f905 	bl	8001b46 <HAL_NVIC_EnableIRQ>
}
 801093c:	bf00      	nop
 801093e:	3730      	adds	r7, #48	; 0x30
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	40013000 	.word	0x40013000
 8010948:	58024400 	.word	0x58024400
 801094c:	58020c00 	.word	0x58020c00
 8010950:	58021800 	.word	0x58021800
 8010954:	2000ffa4 	.word	0x2000ffa4
 8010958:	40020088 	.word	0x40020088
 801095c:	40003800 	.word	0x40003800
 8010960:	58020400 	.word	0x58020400
 8010964:	2000fe2c 	.word	0x2000fe2c
 8010968:	40020058 	.word	0x40020058
 801096c:	2000ff2c 	.word	0x2000ff2c
 8010970:	40020070 	.word	0x40020070

08010974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010974:	b480      	push	{r7}
 8010976:	b083      	sub	sp, #12
 8010978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801097a:	4b0a      	ldr	r3, [pc, #40]	; (80109a4 <HAL_MspInit+0x30>)
 801097c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010980:	4a08      	ldr	r2, [pc, #32]	; (80109a4 <HAL_MspInit+0x30>)
 8010982:	f043 0302 	orr.w	r3, r3, #2
 8010986:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801098a:	4b06      	ldr	r3, [pc, #24]	; (80109a4 <HAL_MspInit+0x30>)
 801098c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010990:	f003 0302 	and.w	r3, r3, #2
 8010994:	607b      	str	r3, [r7, #4]
 8010996:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010998:	bf00      	nop
 801099a:	370c      	adds	r7, #12
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr
 80109a4:	58024400 	.word	0x58024400

080109a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80109a8:	b480      	push	{r7}
 80109aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80109ac:	bf00      	nop
 80109ae:	46bd      	mov	sp, r7
 80109b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b4:	4770      	bx	lr

080109b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80109b6:	b480      	push	{r7}
 80109b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80109ba:	e7fe      	b.n	80109ba <HardFault_Handler+0x4>

080109bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80109bc:	b480      	push	{r7}
 80109be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80109c0:	e7fe      	b.n	80109c0 <MemManage_Handler+0x4>

080109c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80109c2:	b480      	push	{r7}
 80109c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80109c6:	e7fe      	b.n	80109c6 <BusFault_Handler+0x4>

080109c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80109c8:	b480      	push	{r7}
 80109ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80109cc:	e7fe      	b.n	80109cc <UsageFault_Handler+0x4>

080109ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80109ce:	b480      	push	{r7}
 80109d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80109d2:	bf00      	nop
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr

080109dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80109dc:	b480      	push	{r7}
 80109de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80109e0:	bf00      	nop
 80109e2:	46bd      	mov	sp, r7
 80109e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e8:	4770      	bx	lr

080109ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80109ea:	b480      	push	{r7}
 80109ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80109ee:	bf00      	nop
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr

080109f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80109fc:	f7ef fcde 	bl	80003bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010a00:	bf00      	nop
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8010a08:	4802      	ldr	r0, [pc, #8]	; (8010a14 <DMA1_Stream0_IRQHandler+0x10>)
 8010a0a:	f7f2 f939 	bl	8002c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8010a0e:	bf00      	nop
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop
 8010a14:	20000344 	.word	0x20000344

08010a18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8010a1c:	4802      	ldr	r0, [pc, #8]	; (8010a28 <DMA1_Stream1_IRQHandler+0x10>)
 8010a1e:	f7f2 f92f 	bl	8002c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8010a22:	bf00      	nop
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop
 8010a28:	2000fb9c 	.word	0x2000fb9c

08010a2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8010a30:	4802      	ldr	r0, [pc, #8]	; (8010a3c <DMA1_Stream2_IRQHandler+0x10>)
 8010a32:	f7f2 f925 	bl	8002c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8010a36:	bf00      	nop
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	2000fc14 	.word	0x2000fc14

08010a40 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8010a44:	4802      	ldr	r0, [pc, #8]	; (8010a50 <DMA1_Stream3_IRQHandler+0x10>)
 8010a46:	f7f2 f91b 	bl	8002c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8010a4a:	bf00      	nop
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	2000fe2c 	.word	0x2000fe2c

08010a54 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8010a58:	4802      	ldr	r0, [pc, #8]	; (8010a64 <DMA1_Stream4_IRQHandler+0x10>)
 8010a5a:	f7f2 f911 	bl	8002c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8010a5e:	bf00      	nop
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	2000ff2c 	.word	0x2000ff2c

08010a68 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8010a6c:	4802      	ldr	r0, [pc, #8]	; (8010a78 <DMA1_Stream5_IRQHandler+0x10>)
 8010a6e:	f7f2 f907 	bl	8002c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8010a72:	bf00      	nop
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	2000ffa4 	.word	0x2000ffa4

08010a7c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8010a80:	4802      	ldr	r0, [pc, #8]	; (8010a8c <SPI1_IRQHandler+0x10>)
 8010a82:	f7f9 fe01 	bl	800a688 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8010a86:	bf00      	nop
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	bf00      	nop
 8010a8c:	2000fea4 	.word	0x2000fea4

08010a90 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8010a94:	4802      	ldr	r0, [pc, #8]	; (8010aa0 <SPI2_IRQHandler+0x10>)
 8010a96:	f7f9 fdf7 	bl	800a688 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8010a9a:	bf00      	nop
 8010a9c:	bd80      	pop	{r7, pc}
 8010a9e:	bf00      	nop
 8010aa0:	2000fda4 	.word	0x2000fda4

08010aa4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8010aa8:	4802      	ldr	r0, [pc, #8]	; (8010ab4 <SDMMC1_IRQHandler+0x10>)
 8010aaa:	f7f8 f895 	bl	8008bd8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8010aae:	bf00      	nop
 8010ab0:	bd80      	pop	{r7, pc}
 8010ab2:	bf00      	nop
 8010ab4:	2000fd24 	.word	0x2000fd24

08010ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8010abc:	4b29      	ldr	r3, [pc, #164]	; (8010b64 <SystemInit+0xac>)
 8010abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ac2:	4a28      	ldr	r2, [pc, #160]	; (8010b64 <SystemInit+0xac>)
 8010ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8010acc:	4b26      	ldr	r3, [pc, #152]	; (8010b68 <SystemInit+0xb0>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4a25      	ldr	r2, [pc, #148]	; (8010b68 <SystemInit+0xb0>)
 8010ad2:	f043 0301 	orr.w	r3, r3, #1
 8010ad6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010ad8:	4b23      	ldr	r3, [pc, #140]	; (8010b68 <SystemInit+0xb0>)
 8010ada:	2200      	movs	r2, #0
 8010adc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8010ade:	4b22      	ldr	r3, [pc, #136]	; (8010b68 <SystemInit+0xb0>)
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	4921      	ldr	r1, [pc, #132]	; (8010b68 <SystemInit+0xb0>)
 8010ae4:	4b21      	ldr	r3, [pc, #132]	; (8010b6c <SystemInit+0xb4>)
 8010ae6:	4013      	ands	r3, r2
 8010ae8:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8010aea:	4b1f      	ldr	r3, [pc, #124]	; (8010b68 <SystemInit+0xb0>)
 8010aec:	2200      	movs	r2, #0
 8010aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8010af0:	4b1d      	ldr	r3, [pc, #116]	; (8010b68 <SystemInit+0xb0>)
 8010af2:	2200      	movs	r2, #0
 8010af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8010af6:	4b1c      	ldr	r3, [pc, #112]	; (8010b68 <SystemInit+0xb0>)
 8010af8:	2200      	movs	r2, #0
 8010afa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8010afc:	4b1a      	ldr	r3, [pc, #104]	; (8010b68 <SystemInit+0xb0>)
 8010afe:	2200      	movs	r2, #0
 8010b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8010b02:	4b19      	ldr	r3, [pc, #100]	; (8010b68 <SystemInit+0xb0>)
 8010b04:	2200      	movs	r2, #0
 8010b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8010b08:	4b17      	ldr	r3, [pc, #92]	; (8010b68 <SystemInit+0xb0>)
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8010b0e:	4b16      	ldr	r3, [pc, #88]	; (8010b68 <SystemInit+0xb0>)
 8010b10:	2200      	movs	r2, #0
 8010b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8010b14:	4b14      	ldr	r3, [pc, #80]	; (8010b68 <SystemInit+0xb0>)
 8010b16:	2200      	movs	r2, #0
 8010b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8010b1a:	4b13      	ldr	r3, [pc, #76]	; (8010b68 <SystemInit+0xb0>)
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8010b20:	4b11      	ldr	r3, [pc, #68]	; (8010b68 <SystemInit+0xb0>)
 8010b22:	2200      	movs	r2, #0
 8010b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8010b26:	4b10      	ldr	r3, [pc, #64]	; (8010b68 <SystemInit+0xb0>)
 8010b28:	2200      	movs	r2, #0
 8010b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8010b2c:	4b0e      	ldr	r3, [pc, #56]	; (8010b68 <SystemInit+0xb0>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4a0d      	ldr	r2, [pc, #52]	; (8010b68 <SystemInit+0xb0>)
 8010b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8010b38:	4b0b      	ldr	r3, [pc, #44]	; (8010b68 <SystemInit+0xb0>)
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8010b3e:	4b0c      	ldr	r3, [pc, #48]	; (8010b70 <SystemInit+0xb8>)
 8010b40:	681a      	ldr	r2, [r3, #0]
 8010b42:	4b0c      	ldr	r3, [pc, #48]	; (8010b74 <SystemInit+0xbc>)
 8010b44:	4013      	ands	r3, r2
 8010b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010b4a:	d202      	bcs.n	8010b52 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8010b4c:	4b0a      	ldr	r3, [pc, #40]	; (8010b78 <SystemInit+0xc0>)
 8010b4e:	2201      	movs	r2, #1
 8010b50:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010b52:	4b04      	ldr	r3, [pc, #16]	; (8010b64 <SystemInit+0xac>)
 8010b54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010b58:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8010b5a:	bf00      	nop
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b62:	4770      	bx	lr
 8010b64:	e000ed00 	.word	0xe000ed00
 8010b68:	58024400 	.word	0x58024400
 8010b6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8010b70:	5c001000 	.word	0x5c001000
 8010b74:	ffff0000 	.word	0xffff0000
 8010b78:	51008108 	.word	0x51008108

08010b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8010b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010bb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010b80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010b82:	e003      	b.n	8010b8c <LoopCopyDataInit>

08010b84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010b84:	4b0c      	ldr	r3, [pc, #48]	; (8010bb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010b86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010b88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010b8a:	3104      	adds	r1, #4

08010b8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010b8c:	480b      	ldr	r0, [pc, #44]	; (8010bbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010b8e:	4b0c      	ldr	r3, [pc, #48]	; (8010bc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010b90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010b92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010b94:	d3f6      	bcc.n	8010b84 <CopyDataInit>
  ldr  r2, =_sbss
 8010b96:	4a0b      	ldr	r2, [pc, #44]	; (8010bc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010b98:	e002      	b.n	8010ba0 <LoopFillZerobss>

08010b9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010b9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010b9c:	f842 3b04 	str.w	r3, [r2], #4

08010ba0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010ba0:	4b09      	ldr	r3, [pc, #36]	; (8010bc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010ba2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010ba4:	d3f9      	bcc.n	8010b9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010ba6:	f7ff ff87 	bl	8010ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010baa:	f000 fb13 	bl	80111d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010bae:	f7fe f8c9 	bl	800ed44 <main>
  bx  lr    
 8010bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010bb4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010bb8:	08012898 	.word	0x08012898
  ldr  r0, =_sdata
 8010bbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010bc0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8010bc4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8010bc8:	2001005c 	.word	0x2001005c

08010bcc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010bcc:	e7fe      	b.n	8010bcc <ADC3_IRQHandler>
	...

08010bd0 <tRingBufferInt_initToPool>:
{
    tRingBufferInt_initToPool(ring, size, &leaf.mempool);
}

void    tRingBufferInt_initToPool   (tRingBufferInt* const ring, int size, tMempool* const mempool)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b086      	sub	sp, #24
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	60f8      	str	r0, [r7, #12]
 8010bd8:	60b9      	str	r1, [r7, #8]
 8010bda:	607a      	str	r2, [r7, #4]
    _tMempool* m = *mempool;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	617b      	str	r3, [r7, #20]
    _tRingBufferInt* r = *ring = (_tRingBufferInt*) mpool_alloc(sizeof(_tRingBufferInt), m);
 8010be2:	6979      	ldr	r1, [r7, #20]
 8010be4:	2014      	movs	r0, #20
 8010be6:	f000 f8e7 	bl	8010db8 <mpool_alloc>
 8010bea:	4602      	mov	r2, r0
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	601a      	str	r2, [r3, #0]
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	613b      	str	r3, [r7, #16]
    r->mempool = m;
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	697a      	ldr	r2, [r7, #20]
 8010bfa:	601a      	str	r2, [r3, #0]

    // Ensure size is a power of 2
    if (size <= 0) r->size = 1;
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	dc03      	bgt.n	8010c0a <tRingBufferInt_initToPool+0x3a>
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	2201      	movs	r2, #1
 8010c06:	609a      	str	r2, [r3, #8]
 8010c08:	e022      	b.n	8010c50 <tRingBufferInt_initToPool+0x80>
    else r->size = pow(2, ceil(log2(size)));
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	ee07 3a90 	vmov	s15, r3
 8010c10:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c14:	eeb0 0b47 	vmov.f64	d0, d7
 8010c18:	f000 fbee 	bl	80113f8 <log>
 8010c1c:	eeb0 5b40 	vmov.f64	d5, d0
 8010c20:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8010c80 <tRingBufferInt_initToPool+0xb0>
 8010c24:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8010c28:	eeb0 0b46 	vmov.f64	d0, d6
 8010c2c:	f000 fb6c 	bl	8011308 <ceil>
 8010c30:	eeb0 7b40 	vmov.f64	d7, d0
 8010c34:	eeb0 1b47 	vmov.f64	d1, d7
 8010c38:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8010c3c:	f000 fc4c 	bl	80114d8 <pow>
 8010c40:	eeb0 7b40 	vmov.f64	d7, d0
 8010c44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8010c48:	ee17 2a90 	vmov	r2, s15
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	609a      	str	r2, [r3, #8]
    r->mask = r->size - 1;
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	689b      	ldr	r3, [r3, #8]
 8010c54:	1e5a      	subs	r2, r3, #1
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	611a      	str	r2, [r3, #16]

    r->buffer = (int*) mpool_calloc(sizeof(int) * r->size, m);
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	689b      	ldr	r3, [r3, #8]
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	6979      	ldr	r1, [r7, #20]
 8010c62:	4618      	mov	r0, r3
 8010c64:	f000 f94e 	bl	8010f04 <mpool_calloc>
 8010c68:	4602      	mov	r2, r0
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	605a      	str	r2, [r3, #4]
    r->pos = 0;
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	2200      	movs	r2, #0
 8010c72:	60da      	str	r2, [r3, #12]
}
 8010c74:	bf00      	nop
 8010c76:	3718      	adds	r7, #24
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}
 8010c7c:	f3af 8000 	nop.w
 8010c80:	fefa39ef 	.word	0xfefa39ef
 8010c84:	3fe62e42 	.word	0x3fe62e42

08010c88 <tRingBufferInt_push>:
    mpool_free((char*) r->buffer, r->mempool);
    mpool_free((char*) r, r->mempool);
}

void   tRingBufferInt_push     (tRingBufferInt* const ring, int val)
{
 8010c88:	b480      	push	{r7}
 8010c8a:	b085      	sub	sp, #20
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
    _tRingBufferInt* r = *ring;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	60fb      	str	r3, [r7, #12]

    --r->pos;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	1e5a      	subs	r2, r3, #1
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	60da      	str	r2, [r3, #12]
    r->pos &= r->mask;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	68da      	ldr	r2, [r3, #12]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	691b      	ldr	r3, [r3, #16]
 8010caa:	401a      	ands	r2, r3
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	60da      	str	r2, [r3, #12]
    r->buffer[r->pos] = val;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	685a      	ldr	r2, [r3, #4]
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	009b      	lsls	r3, r3, #2
 8010cba:	4413      	add	r3, r2
 8010cbc:	683a      	ldr	r2, [r7, #0]
 8010cbe:	601a      	str	r2, [r3, #0]
}
 8010cc0:	bf00      	nop
 8010cc2:	3714      	adds	r7, #20
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr

08010ccc <tRingBufferInt_getOldest>:

    return r->buffer[r->pos];
}

int   tRingBufferInt_getOldest    (tRingBufferInt* const ring)
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b085      	sub	sp, #20
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
    _tRingBufferInt* r = *ring;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	60fb      	str	r3, [r7, #12]

    return r->buffer[(r->pos + r->size - 1) & r->mask];
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	685a      	ldr	r2, [r3, #4]
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	68d9      	ldr	r1, [r3, #12]
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	689b      	ldr	r3, [r3, #8]
 8010ce6:	440b      	add	r3, r1
 8010ce8:	1e59      	subs	r1, r3, #1
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	691b      	ldr	r3, [r3, #16]
 8010cee:	400b      	ands	r3, r1
 8010cf0:	009b      	lsls	r3, r3, #2
 8010cf2:	4413      	add	r3, r2
 8010cf4:	681b      	ldr	r3, [r3, #0]
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3714      	adds	r7, #20
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d00:	4770      	bx	lr

08010d02 <tRingBufferInt_get>:

int   tRingBufferInt_get      (tRingBufferInt* const ring, int index)
{
 8010d02:	b480      	push	{r7}
 8010d04:	b085      	sub	sp, #20
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	6078      	str	r0, [r7, #4]
 8010d0a:	6039      	str	r1, [r7, #0]
    _tRingBufferInt* r = *ring;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	60fb      	str	r3, [r7, #12]

    return r->buffer[(r->pos + index) & r->mask];
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	685a      	ldr	r2, [r3, #4]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	68d9      	ldr	r1, [r3, #12]
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	4419      	add	r1, r3
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	691b      	ldr	r3, [r3, #16]
 8010d22:	400b      	ands	r3, r1
 8010d24:	009b      	lsls	r3, r3, #2
 8010d26:	4413      	add	r3, r2
 8010d28:	681b      	ldr	r3, [r3, #0]
}
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3714      	adds	r7, #20
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d34:	4770      	bx	lr
	...

08010d38 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b084      	sub	sp, #16
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	60b9      	str	r1, [r7, #8]
 8010d42:	607a      	str	r2, [r7, #4]
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 8010d44:	2010      	movs	r0, #16
 8010d46:	f000 f97f 	bl	8011048 <mpool_align>
 8010d4a:	4602      	mov	r2, r0
 8010d4c:	4b0e      	ldr	r3, [pc, #56]	; (8010d88 <mpool_create+0x50>)
 8010d4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    pool->mpool = (char*)memory;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	68fa      	ldr	r2, [r7, #12]
 8010d54:	601a      	str	r2, [r3, #0]
    pool->usize  = 0;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	605a      	str	r2, [r3, #4]
    pool->msize  = size;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	68ba      	ldr	r2, [r7, #8]
 8010d60:	609a      	str	r2, [r3, #8]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6818      	ldr	r0, [r3, #0]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	689a      	ldr	r2, [r3, #8]
 8010d6a:	4b07      	ldr	r3, [pc, #28]	; (8010d88 <mpool_create+0x50>)
 8010d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d6e:	1ad3      	subs	r3, r2, r3
 8010d70:	2200      	movs	r2, #0
 8010d72:	2100      	movs	r1, #0
 8010d74:	f000 f976 	bl	8011064 <create_node>
 8010d78:	4602      	mov	r2, r0
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	60da      	str	r2, [r3, #12]
    {
        memory[i+leaf.header_size]=0;
    }
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}
 8010d7e:	bf00      	nop
 8010d80:	3710      	adds	r7, #16
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	2001001c 	.word	0x2001001c

08010d8c <leaf_pool_init>:

void leaf_pool_init(char* memory, size_t size)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6039      	str	r1, [r7, #0]
    mpool_create(memory, size, &leaf._internal_mempool);
 8010d96:	4a06      	ldr	r2, [pc, #24]	; (8010db0 <leaf_pool_init+0x24>)
 8010d98:	6839      	ldr	r1, [r7, #0]
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f7ff ffcc 	bl	8010d38 <mpool_create>
    
    leaf.mempool = &leaf._internal_mempool;
 8010da0:	4b04      	ldr	r3, [pc, #16]	; (8010db4 <leaf_pool_init+0x28>)
 8010da2:	4a03      	ldr	r2, [pc, #12]	; (8010db0 <leaf_pool_init+0x24>)
 8010da4:	619a      	str	r2, [r3, #24]
}
 8010da6:	bf00      	nop
 8010da8:	3708      	adds	r7, #8
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	20010038 	.word	0x20010038
 8010db4:	2001001c 	.word	0x2001001c

08010db8 <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 8010db8:	b590      	push	{r4, r7, lr}
 8010dba:	b08b      	sub	sp, #44	; 0x2c
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	6039      	str	r1, [r7, #0]
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d110      	bne.n	8010dec <mpool_alloc+0x34>
    {
        if ((pool->msize - pool->usize) > asize)
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	689a      	ldr	r2, [r3, #8]
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	1ad3      	subs	r3, r2, r3
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d203      	bcs.n	8010de2 <mpool_alloc+0x2a>
        {
            LEAF_internalErrorCallback(LEAFMempoolFragmentation);
 8010dda:	2001      	movs	r0, #1
 8010ddc:	f000 f9dc 	bl	8011198 <LEAF_internalErrorCallback>
 8010de0:	e002      	b.n	8010de8 <mpool_alloc+0x30>
        }
        else
        {
            LEAF_internalErrorCallback(LEAFMempoolOverrun);
 8010de2:	2000      	movs	r0, #0
 8010de4:	f000 f9d8 	bl	8011198 <LEAF_internalErrorCallback>
        }
        return NULL;
 8010de8:	2300      	movs	r3, #0
 8010dea:	e085      	b.n	8010ef8 <mpool_alloc+0x140>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f000 f92b 	bl	8011048 <mpool_align>
 8010df2:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	68db      	ldr	r3, [r3, #12]
 8010df8:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 8010dfa:	e016      	b.n	8010e2a <mpool_alloc+0x72>
    {
        node_to_alloc = node_to_alloc->next;
 8010dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 8010e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d110      	bne.n	8010e2a <mpool_alloc+0x72>
        {
            if ((pool->msize - pool->usize) > asize)
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	689a      	ldr	r2, [r3, #8]
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	1ad3      	subs	r3, r2, r3
 8010e12:	687a      	ldr	r2, [r7, #4]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d203      	bcs.n	8010e20 <mpool_alloc+0x68>
            {
                LEAF_internalErrorCallback(LEAFMempoolFragmentation);
 8010e18:	2001      	movs	r0, #1
 8010e1a:	f000 f9bd 	bl	8011198 <LEAF_internalErrorCallback>
 8010e1e:	e002      	b.n	8010e26 <mpool_alloc+0x6e>
            }
            else
            {
                LEAF_internalErrorCallback(LEAFMempoolOverrun);
 8010e20:	2000      	movs	r0, #0
 8010e22:	f000 f9b9 	bl	8011198 <LEAF_internalErrorCallback>
            }
            return NULL;
 8010e26:	2300      	movs	r3, #0
 8010e28:	e066      	b.n	8010ef8 <mpool_alloc+0x140>
    while (node_to_alloc->size < size_to_alloc)
 8010e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e2c:	68db      	ldr	r3, [r3, #12]
 8010e2e:	69ba      	ldr	r2, [r7, #24]
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d8e3      	bhi.n	8010dfc <mpool_alloc+0x44>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8010e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e36:	68da      	ldr	r2, [r3, #12]
 8010e38:	69bb      	ldr	r3, [r7, #24]
 8010e3a:	1ad3      	subs	r3, r2, r3
 8010e3c:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 8010e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e40:	69ba      	ldr	r2, [r7, #24]
 8010e42:	60da      	str	r2, [r3, #12]
    if (leftover > leaf.header_size)
 8010e44:	4b2e      	ldr	r3, [pc, #184]	; (8010f00 <mpool_alloc+0x148>)
 8010e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e48:	697a      	ldr	r2, [r7, #20]
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d91d      	bls.n	8010e8a <mpool_alloc+0xd2>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8010e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e50:	683a      	ldr	r2, [r7, #0]
 8010e52:	6812      	ldr	r2, [r2, #0]
 8010e54:	1a9b      	subs	r3, r3, r2
 8010e56:	613b      	str	r3, [r7, #16]
        offset += leaf.header_size + node_to_alloc->size;
 8010e58:	4b29      	ldr	r3, [pc, #164]	; (8010f00 <mpool_alloc+0x148>)
 8010e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	441a      	add	r2, r3
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	4413      	add	r3, r2
 8010e66:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	681a      	ldr	r2, [r3, #0]
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 8010e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e72:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 8010e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e76:	689c      	ldr	r4, [r3, #8]
                               leftover - leaf.header_size);
 8010e78:	4b21      	ldr	r3, [pc, #132]	; (8010f00 <mpool_alloc+0x148>)
 8010e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        new_node = create_node(&pool->mpool[offset],
 8010e7c:	697a      	ldr	r2, [r7, #20]
 8010e7e:	1ad3      	subs	r3, r2, r3
 8010e80:	4622      	mov	r2, r4
 8010e82:	f000 f8ef 	bl	8011064 <create_node>
 8010e86:	6238      	str	r0, [r7, #32]
 8010e88:	e008      	b.n	8010e9c <mpool_alloc+0xe4>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 8010e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8c:	68da      	ldr	r2, [r3, #12]
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	441a      	add	r2, r3
 8010e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e94:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 8010e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	68db      	ldr	r3, [r3, #12]
 8010ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d102      	bne.n	8010eac <mpool_alloc+0xf4>
    {
        pool->head = new_node;
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	6a3a      	ldr	r2, [r7, #32]
 8010eaa:	60da      	str	r2, [r3, #12]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 8010eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010eae:	f000 f8fb 	bl	80110a8 <delink_node>
    
    pool->usize += leaf.header_size + node_to_alloc->size;
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	685a      	ldr	r2, [r3, #4]
 8010eb6:	4b12      	ldr	r3, [pc, #72]	; (8010f00 <mpool_alloc+0x148>)
 8010eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	440b      	add	r3, r1
 8010ec0:	441a      	add	r2, r3
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	605a      	str	r2, [r3, #4]
    
    if (leaf.clearOnAllocation > 0)
 8010ec6:	4b0e      	ldr	r3, [pc, #56]	; (8010f00 <mpool_alloc+0x148>)
 8010ec8:	695b      	ldr	r3, [r3, #20]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	dd12      	ble.n	8010ef4 <mpool_alloc+0x13c>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 8010ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	61fb      	str	r3, [r7, #28]
 8010ed8:	e007      	b.n	8010eea <mpool_alloc+0x132>
 8010eda:	69fb      	ldr	r3, [r7, #28]
 8010edc:	68fa      	ldr	r2, [r7, #12]
 8010ede:	4413      	add	r3, r2
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	701a      	strb	r2, [r3, #0]
 8010ee4:	69fb      	ldr	r3, [r7, #28]
 8010ee6:	3301      	adds	r3, #1
 8010ee8:	61fb      	str	r3, [r7, #28]
 8010eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eec:	68da      	ldr	r2, [r3, #12]
 8010eee:	69fb      	ldr	r3, [r7, #28]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d8f2      	bhi.n	8010eda <mpool_alloc+0x122>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 8010ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef6:	681b      	ldr	r3, [r3, #0]
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	372c      	adds	r7, #44	; 0x2c
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd90      	pop	{r4, r7, pc}
 8010f00:	2001001c 	.word	0x2001001c

08010f04 <mpool_calloc>:

/**
 * allocate memory from memory pool and also clear that memory to be blank
 */
char* mpool_calloc(size_t asize, _tMempool* pool)
{
 8010f04:	b590      	push	{r4, r7, lr}
 8010f06:	b08b      	sub	sp, #44	; 0x2c
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	68db      	ldr	r3, [r3, #12]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d110      	bne.n	8010f38 <mpool_calloc+0x34>
    {
        if ((pool->msize - pool->usize) > asize)
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	689a      	ldr	r2, [r3, #8]
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	1ad3      	subs	r3, r2, r3
 8010f20:	687a      	ldr	r2, [r7, #4]
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d203      	bcs.n	8010f2e <mpool_calloc+0x2a>
        {
            LEAF_internalErrorCallback(LEAFMempoolFragmentation);
 8010f26:	2001      	movs	r0, #1
 8010f28:	f000 f936 	bl	8011198 <LEAF_internalErrorCallback>
 8010f2c:	e002      	b.n	8010f34 <mpool_calloc+0x30>
        }
        else
        {
            LEAF_internalErrorCallback(LEAFMempoolOverrun);
 8010f2e:	2000      	movs	r0, #0
 8010f30:	f000 f932 	bl	8011198 <LEAF_internalErrorCallback>
        }
        return NULL;
 8010f34:	2300      	movs	r3, #0
 8010f36:	e081      	b.n	801103c <mpool_calloc+0x138>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f000 f885 	bl	8011048 <mpool_align>
 8010f3e:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	68db      	ldr	r3, [r3, #12]
 8010f44:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 8010f46:	e016      	b.n	8010f76 <mpool_calloc+0x72>
    {
        node_to_alloc = node_to_alloc->next;
 8010f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 8010f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d110      	bne.n	8010f76 <mpool_calloc+0x72>
        {
            if ((pool->msize - pool->usize) > asize)
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	689a      	ldr	r2, [r3, #8]
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	1ad3      	subs	r3, r2, r3
 8010f5e:	687a      	ldr	r2, [r7, #4]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d203      	bcs.n	8010f6c <mpool_calloc+0x68>
            {
                LEAF_internalErrorCallback(LEAFMempoolFragmentation);
 8010f64:	2001      	movs	r0, #1
 8010f66:	f000 f917 	bl	8011198 <LEAF_internalErrorCallback>
 8010f6a:	e002      	b.n	8010f72 <mpool_calloc+0x6e>
            }
            else
            {
                LEAF_internalErrorCallback(LEAFMempoolOverrun);
 8010f6c:	2000      	movs	r0, #0
 8010f6e:	f000 f913 	bl	8011198 <LEAF_internalErrorCallback>
            }
            return NULL;
 8010f72:	2300      	movs	r3, #0
 8010f74:	e062      	b.n	801103c <mpool_calloc+0x138>
    while (node_to_alloc->size < size_to_alloc)
 8010f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f78:	68db      	ldr	r3, [r3, #12]
 8010f7a:	69ba      	ldr	r2, [r7, #24]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d8e3      	bhi.n	8010f48 <mpool_calloc+0x44>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8010f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f82:	68da      	ldr	r2, [r3, #12]
 8010f84:	69bb      	ldr	r3, [r7, #24]
 8010f86:	1ad3      	subs	r3, r2, r3
 8010f88:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 8010f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8c:	69ba      	ldr	r2, [r7, #24]
 8010f8e:	60da      	str	r2, [r3, #12]
    if (leftover > leaf.header_size)
 8010f90:	4b2c      	ldr	r3, [pc, #176]	; (8011044 <mpool_calloc+0x140>)
 8010f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f94:	697a      	ldr	r2, [r7, #20]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d91d      	bls.n	8010fd6 <mpool_calloc+0xd2>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8010f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9c:	683a      	ldr	r2, [r7, #0]
 8010f9e:	6812      	ldr	r2, [r2, #0]
 8010fa0:	1a9b      	subs	r3, r3, r2
 8010fa2:	613b      	str	r3, [r7, #16]
        offset += leaf.header_size + node_to_alloc->size;
 8010fa4:	4b27      	ldr	r3, [pc, #156]	; (8011044 <mpool_calloc+0x140>)
 8010fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	441a      	add	r2, r3
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	4413      	add	r3, r2
 8010fb2:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	681a      	ldr	r2, [r3, #0]
 8010fb8:	693b      	ldr	r3, [r7, #16]
 8010fba:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 8010fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fbe:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 8010fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc2:	689c      	ldr	r4, [r3, #8]
                               leftover - leaf.header_size);
 8010fc4:	4b1f      	ldr	r3, [pc, #124]	; (8011044 <mpool_calloc+0x140>)
 8010fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        new_node = create_node(&pool->mpool[offset],
 8010fc8:	697a      	ldr	r2, [r7, #20]
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	4622      	mov	r2, r4
 8010fce:	f000 f849 	bl	8011064 <create_node>
 8010fd2:	6238      	str	r0, [r7, #32]
 8010fd4:	e008      	b.n	8010fe8 <mpool_calloc+0xe4>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 8010fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd8:	68da      	ldr	r2, [r3, #12]
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	441a      	add	r2, r3
 8010fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe0:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 8010fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d102      	bne.n	8010ff8 <mpool_calloc+0xf4>
    {
        pool->head = new_node;
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	6a3a      	ldr	r2, [r7, #32]
 8010ff6:	60da      	str	r2, [r3, #12]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 8010ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ffa:	f000 f855 	bl	80110a8 <delink_node>
    
    pool->usize += leaf.header_size + node_to_alloc->size;
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	685a      	ldr	r2, [r3, #4]
 8011002:	4b10      	ldr	r3, [pc, #64]	; (8011044 <mpool_calloc+0x140>)
 8011004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011008:	68db      	ldr	r3, [r3, #12]
 801100a:	440b      	add	r3, r1
 801100c:	441a      	add	r2, r3
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	605a      	str	r2, [r3, #4]
    // Format the new pool
    char* new_pool = (char*)node_to_alloc->pool;
 8011012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8011018:	2300      	movs	r3, #0
 801101a:	61fb      	str	r3, [r7, #28]
 801101c:	e007      	b.n	801102e <mpool_calloc+0x12a>
 801101e:	69fb      	ldr	r3, [r7, #28]
 8011020:	68fa      	ldr	r2, [r7, #12]
 8011022:	4413      	add	r3, r2
 8011024:	2200      	movs	r2, #0
 8011026:	701a      	strb	r2, [r3, #0]
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	3301      	adds	r3, #1
 801102c:	61fb      	str	r3, [r7, #28]
 801102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011030:	68da      	ldr	r2, [r3, #12]
 8011032:	69fb      	ldr	r3, [r7, #28]
 8011034:	429a      	cmp	r2, r3
 8011036:	d8f2      	bhi.n	801101e <mpool_calloc+0x11a>
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 8011038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103a:	681b      	ldr	r3, [r3, #0]
}
 801103c:	4618      	mov	r0, r3
 801103e:	372c      	adds	r7, #44	; 0x2c
 8011040:	46bd      	mov	sp, r7
 8011042:	bd90      	pop	{r4, r7, pc}
 8011044:	2001001c 	.word	0x2001001c

08011048 <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 8011048:	b480      	push	{r7}
 801104a:	b083      	sub	sp, #12
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	3307      	adds	r3, #7
 8011054:	f023 0307 	bic.w	r3, r3, #7
}
 8011058:	4618      	mov	r0, r3
 801105a:	370c      	adds	r7, #12
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr

08011064 <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size)
{
 8011064:	b480      	push	{r7}
 8011066:	b087      	sub	sp, #28
 8011068:	af00      	add	r7, sp, #0
 801106a:	60f8      	str	r0, [r7, #12]
 801106c:	60b9      	str	r1, [r7, #8]
 801106e:	607a      	str	r2, [r7, #4]
 8011070:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	617b      	str	r3, [r7, #20]
    node->pool = block_location + leaf.header_size;
 8011076:	4b0b      	ldr	r3, [pc, #44]	; (80110a4 <create_node+0x40>)
 8011078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801107a:	68fa      	ldr	r2, [r7, #12]
 801107c:	441a      	add	r2, r3
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	601a      	str	r2, [r3, #0]
    node->next = next;
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	68ba      	ldr	r2, [r7, #8]
 8011086:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	609a      	str	r2, [r3, #8]
    node->size = size;
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	683a      	ldr	r2, [r7, #0]
 8011092:	60da      	str	r2, [r3, #12]
    
    return node;
 8011094:	697b      	ldr	r3, [r7, #20]
}
 8011096:	4618      	mov	r0, r3
 8011098:	371c      	adds	r7, #28
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr
 80110a2:	bf00      	nop
 80110a4:	2001001c 	.word	0x2001001c

080110a8 <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b083      	sub	sp, #12
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d004      	beq.n	80110c2 <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	687a      	ldr	r2, [r7, #4]
 80110be:	6892      	ldr	r2, [r2, #8]
 80110c0:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	689b      	ldr	r3, [r3, #8]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d004      	beq.n	80110d4 <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	689b      	ldr	r3, [r3, #8]
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	6852      	ldr	r2, [r2, #4]
 80110d2:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2200      	movs	r2, #0
 80110d8:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2200      	movs	r2, #0
 80110de:	609a      	str	r2, [r3, #8]
}
 80110e0:	bf00      	nop
 80110e2:	370c      	adds	r7, #12
 80110e4:	46bd      	mov	sp, r7
 80110e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ea:	4770      	bx	lr

080110ec <LEAF_init>:

LEAF leaf;

void LEAF_init(float sr, int blocksize, char* memory, size_t memorysize, float(*random)(void))

{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b088      	sub	sp, #32
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	ed87 0a05 	vstr	s0, [r7, #20]
 80110f6:	6138      	str	r0, [r7, #16]
 80110f8:	60f9      	str	r1, [r7, #12]
 80110fa:	60ba      	str	r2, [r7, #8]
 80110fc:	607b      	str	r3, [r7, #4]
    leaf_pool_init(memory, memorysize);
 80110fe:	68b9      	ldr	r1, [r7, #8]
 8011100:	68f8      	ldr	r0, [r7, #12]
 8011102:	f7ff fe43 	bl	8010d8c <leaf_pool_init>
    
    leaf.sampleRate = sr;
 8011106:	4a1b      	ldr	r2, [pc, #108]	; (8011174 <LEAF_init+0x88>)
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	6013      	str	r3, [r2, #0]

    leaf.blockSize = blocksize;
 801110c:	4a19      	ldr	r2, [pc, #100]	; (8011174 <LEAF_init+0x88>)
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	6093      	str	r3, [r2, #8]
    
    leaf.invSampleRate = 1.0f/sr;
 8011112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011116:	ed97 7a05 	vldr	s14, [r7, #20]
 801111a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801111e:	4b15      	ldr	r3, [pc, #84]	; (8011174 <LEAF_init+0x88>)
 8011120:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 8011124:	4b13      	ldr	r3, [pc, #76]	; (8011174 <LEAF_init+0x88>)
 8011126:	edd3 7a01 	vldr	s15, [r3, #4]
 801112a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8011178 <LEAF_init+0x8c>
 801112e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011132:	4b10      	ldr	r3, [pc, #64]	; (8011174 <LEAF_init+0x88>)
 8011134:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf.random = random;
 8011138:	4a0e      	ldr	r2, [pc, #56]	; (8011174 <LEAF_init+0x88>)
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6113      	str	r3, [r2, #16]
    
    leaf.clearOnAllocation = 0;
 801113e:	4b0d      	ldr	r3, [pc, #52]	; (8011174 <LEAF_init+0x88>)
 8011140:	2200      	movs	r2, #0
 8011142:	615a      	str	r2, [r3, #20]
    
    leaf.errorCallback = &LEAF_defaultErrorCallback;
 8011144:	4b0b      	ldr	r3, [pc, #44]	; (8011174 <LEAF_init+0x88>)
 8011146:	4a0d      	ldr	r2, [pc, #52]	; (801117c <LEAF_init+0x90>)
 8011148:	631a      	str	r2, [r3, #48]	; 0x30
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 801114a:	2300      	movs	r3, #0
 801114c:	61fb      	str	r3, [r7, #28]
 801114e:	e009      	b.n	8011164 <LEAF_init+0x78>
        leaf.errorState[i] = 0;
 8011150:	4a08      	ldr	r2, [pc, #32]	; (8011174 <LEAF_init+0x88>)
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	330c      	adds	r3, #12
 8011156:	009b      	lsls	r3, r3, #2
 8011158:	4413      	add	r3, r2
 801115a:	2200      	movs	r2, #0
 801115c:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	3301      	adds	r3, #1
 8011162:	61fb      	str	r3, [r7, #28]
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	2b02      	cmp	r3, #2
 8011168:	ddf2      	ble.n	8011150 <LEAF_init+0x64>
}
 801116a:	bf00      	nop
 801116c:	3720      	adds	r7, #32
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
 8011172:	bf00      	nop
 8011174:	2001001c 	.word	0x2001001c
 8011178:	40c90fdb 	.word	0x40c90fdb
 801117c:	08011181 	.word	0x08011181

08011180 <LEAF_defaultErrorCallback>:
{
    return leaf.sampleRate;
}

void LEAF_defaultErrorCallback(LEAFErrorType whichone)
{
 8011180:	b480      	push	{r7}
 8011182:	b083      	sub	sp, #12
 8011184:	af00      	add	r7, sp, #0
 8011186:	4603      	mov	r3, r0
 8011188:	71fb      	strb	r3, [r7, #7]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 801118a:	bf00      	nop
 801118c:	370c      	adds	r7, #12
 801118e:	46bd      	mov	sp, r7
 8011190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011194:	4770      	bx	lr
	...

08011198 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAFErrorType whichone)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	4603      	mov	r3, r0
 80111a0:	71fb      	strb	r3, [r7, #7]
    leaf.errorState[whichone] = 1;
 80111a2:	79fb      	ldrb	r3, [r7, #7]
 80111a4:	4a07      	ldr	r2, [pc, #28]	; (80111c4 <LEAF_internalErrorCallback+0x2c>)
 80111a6:	330c      	adds	r3, #12
 80111a8:	009b      	lsls	r3, r3, #2
 80111aa:	4413      	add	r3, r2
 80111ac:	2201      	movs	r2, #1
 80111ae:	605a      	str	r2, [r3, #4]
    leaf.errorCallback(whichone);
 80111b0:	4b04      	ldr	r3, [pc, #16]	; (80111c4 <LEAF_internalErrorCallback+0x2c>)
 80111b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111b4:	79fa      	ldrb	r2, [r7, #7]
 80111b6:	4610      	mov	r0, r2
 80111b8:	4798      	blx	r3
}
 80111ba:	bf00      	nop
 80111bc:	3708      	adds	r7, #8
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}
 80111c2:	bf00      	nop
 80111c4:	2001001c 	.word	0x2001001c

080111c8 <__errno>:
 80111c8:	4b01      	ldr	r3, [pc, #4]	; (80111d0 <__errno+0x8>)
 80111ca:	6818      	ldr	r0, [r3, #0]
 80111cc:	4770      	bx	lr
 80111ce:	bf00      	nop
 80111d0:	20000018 	.word	0x20000018

080111d4 <__libc_init_array>:
 80111d4:	b570      	push	{r4, r5, r6, lr}
 80111d6:	4e0d      	ldr	r6, [pc, #52]	; (801120c <__libc_init_array+0x38>)
 80111d8:	4c0d      	ldr	r4, [pc, #52]	; (8011210 <__libc_init_array+0x3c>)
 80111da:	1ba4      	subs	r4, r4, r6
 80111dc:	10a4      	asrs	r4, r4, #2
 80111de:	2500      	movs	r5, #0
 80111e0:	42a5      	cmp	r5, r4
 80111e2:	d109      	bne.n	80111f8 <__libc_init_array+0x24>
 80111e4:	4e0b      	ldr	r6, [pc, #44]	; (8011214 <__libc_init_array+0x40>)
 80111e6:	4c0c      	ldr	r4, [pc, #48]	; (8011218 <__libc_init_array+0x44>)
 80111e8:	f001 f880 	bl	80122ec <_init>
 80111ec:	1ba4      	subs	r4, r4, r6
 80111ee:	10a4      	asrs	r4, r4, #2
 80111f0:	2500      	movs	r5, #0
 80111f2:	42a5      	cmp	r5, r4
 80111f4:	d105      	bne.n	8011202 <__libc_init_array+0x2e>
 80111f6:	bd70      	pop	{r4, r5, r6, pc}
 80111f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80111fc:	4798      	blx	r3
 80111fe:	3501      	adds	r5, #1
 8011200:	e7ee      	b.n	80111e0 <__libc_init_array+0xc>
 8011202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011206:	4798      	blx	r3
 8011208:	3501      	adds	r5, #1
 801120a:	e7f2      	b.n	80111f2 <__libc_init_array+0x1e>
 801120c:	08012890 	.word	0x08012890
 8011210:	08012890 	.word	0x08012890
 8011214:	08012890 	.word	0x08012890
 8011218:	08012894 	.word	0x08012894

0801121c <__itoa>:
 801121c:	1e93      	subs	r3, r2, #2
 801121e:	2b22      	cmp	r3, #34	; 0x22
 8011220:	b510      	push	{r4, lr}
 8011222:	460c      	mov	r4, r1
 8011224:	d904      	bls.n	8011230 <__itoa+0x14>
 8011226:	2300      	movs	r3, #0
 8011228:	700b      	strb	r3, [r1, #0]
 801122a:	461c      	mov	r4, r3
 801122c:	4620      	mov	r0, r4
 801122e:	bd10      	pop	{r4, pc}
 8011230:	2a0a      	cmp	r2, #10
 8011232:	d109      	bne.n	8011248 <__itoa+0x2c>
 8011234:	2800      	cmp	r0, #0
 8011236:	da07      	bge.n	8011248 <__itoa+0x2c>
 8011238:	232d      	movs	r3, #45	; 0x2d
 801123a:	700b      	strb	r3, [r1, #0]
 801123c:	4240      	negs	r0, r0
 801123e:	2101      	movs	r1, #1
 8011240:	4421      	add	r1, r4
 8011242:	f000 f821 	bl	8011288 <__utoa>
 8011246:	e7f1      	b.n	801122c <__itoa+0x10>
 8011248:	2100      	movs	r1, #0
 801124a:	e7f9      	b.n	8011240 <__itoa+0x24>

0801124c <itoa>:
 801124c:	f7ff bfe6 	b.w	801121c <__itoa>

08011250 <memset>:
 8011250:	4402      	add	r2, r0
 8011252:	4603      	mov	r3, r0
 8011254:	4293      	cmp	r3, r2
 8011256:	d100      	bne.n	801125a <memset+0xa>
 8011258:	4770      	bx	lr
 801125a:	f803 1b01 	strb.w	r1, [r3], #1
 801125e:	e7f9      	b.n	8011254 <memset+0x4>

08011260 <strncat>:
 8011260:	b530      	push	{r4, r5, lr}
 8011262:	4603      	mov	r3, r0
 8011264:	781c      	ldrb	r4, [r3, #0]
 8011266:	1c5d      	adds	r5, r3, #1
 8011268:	b944      	cbnz	r4, 801127c <strncat+0x1c>
 801126a:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 801126e:	d304      	bcc.n	801127a <strncat+0x1a>
 8011270:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011274:	f803 4b01 	strb.w	r4, [r3], #1
 8011278:	b914      	cbnz	r4, 8011280 <strncat+0x20>
 801127a:	bd30      	pop	{r4, r5, pc}
 801127c:	462b      	mov	r3, r5
 801127e:	e7f1      	b.n	8011264 <strncat+0x4>
 8011280:	2a00      	cmp	r2, #0
 8011282:	d1f2      	bne.n	801126a <strncat+0xa>
 8011284:	701a      	strb	r2, [r3, #0]
 8011286:	e7f0      	b.n	801126a <strncat+0xa>

08011288 <__utoa>:
 8011288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801128a:	4b1d      	ldr	r3, [pc, #116]	; (8011300 <__utoa+0x78>)
 801128c:	b08b      	sub	sp, #44	; 0x2c
 801128e:	4605      	mov	r5, r0
 8011290:	460c      	mov	r4, r1
 8011292:	466e      	mov	r6, sp
 8011294:	f103 0c20 	add.w	ip, r3, #32
 8011298:	6818      	ldr	r0, [r3, #0]
 801129a:	6859      	ldr	r1, [r3, #4]
 801129c:	4637      	mov	r7, r6
 801129e:	c703      	stmia	r7!, {r0, r1}
 80112a0:	3308      	adds	r3, #8
 80112a2:	4563      	cmp	r3, ip
 80112a4:	463e      	mov	r6, r7
 80112a6:	d1f7      	bne.n	8011298 <__utoa+0x10>
 80112a8:	6818      	ldr	r0, [r3, #0]
 80112aa:	791b      	ldrb	r3, [r3, #4]
 80112ac:	713b      	strb	r3, [r7, #4]
 80112ae:	1e93      	subs	r3, r2, #2
 80112b0:	2b22      	cmp	r3, #34	; 0x22
 80112b2:	6038      	str	r0, [r7, #0]
 80112b4:	f04f 0300 	mov.w	r3, #0
 80112b8:	d904      	bls.n	80112c4 <__utoa+0x3c>
 80112ba:	7023      	strb	r3, [r4, #0]
 80112bc:	461c      	mov	r4, r3
 80112be:	4620      	mov	r0, r4
 80112c0:	b00b      	add	sp, #44	; 0x2c
 80112c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112c4:	1e66      	subs	r6, r4, #1
 80112c6:	fbb5 f0f2 	udiv	r0, r5, r2
 80112ca:	af0a      	add	r7, sp, #40	; 0x28
 80112cc:	fb02 5510 	mls	r5, r2, r0, r5
 80112d0:	443d      	add	r5, r7
 80112d2:	1c59      	adds	r1, r3, #1
 80112d4:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80112d8:	f806 5f01 	strb.w	r5, [r6, #1]!
 80112dc:	4605      	mov	r5, r0
 80112de:	b968      	cbnz	r0, 80112fc <__utoa+0x74>
 80112e0:	5460      	strb	r0, [r4, r1]
 80112e2:	4423      	add	r3, r4
 80112e4:	4622      	mov	r2, r4
 80112e6:	1b19      	subs	r1, r3, r4
 80112e8:	1b10      	subs	r0, r2, r4
 80112ea:	4281      	cmp	r1, r0
 80112ec:	dde7      	ble.n	80112be <__utoa+0x36>
 80112ee:	7811      	ldrb	r1, [r2, #0]
 80112f0:	7818      	ldrb	r0, [r3, #0]
 80112f2:	f802 0b01 	strb.w	r0, [r2], #1
 80112f6:	f803 1901 	strb.w	r1, [r3], #-1
 80112fa:	e7f4      	b.n	80112e6 <__utoa+0x5e>
 80112fc:	460b      	mov	r3, r1
 80112fe:	e7e2      	b.n	80112c6 <__utoa+0x3e>
 8011300:	080127bc 	.word	0x080127bc
 8011304:	00000000 	.word	0x00000000

08011308 <ceil>:
 8011308:	ee10 1a90 	vmov	r1, s1
 801130c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011310:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011314:	2b13      	cmp	r3, #19
 8011316:	b530      	push	{r4, r5, lr}
 8011318:	ee10 0a10 	vmov	r0, s0
 801131c:	ee10 5a10 	vmov	r5, s0
 8011320:	dc2f      	bgt.n	8011382 <ceil+0x7a>
 8011322:	2b00      	cmp	r3, #0
 8011324:	da13      	bge.n	801134e <ceil+0x46>
 8011326:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80113e8 <ceil+0xe0>
 801132a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801132e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011336:	dd05      	ble.n	8011344 <ceil+0x3c>
 8011338:	2900      	cmp	r1, #0
 801133a:	db4c      	blt.n	80113d6 <ceil+0xce>
 801133c:	4301      	orrs	r1, r0
 801133e:	d04e      	beq.n	80113de <ceil+0xd6>
 8011340:	492b      	ldr	r1, [pc, #172]	; (80113f0 <ceil+0xe8>)
 8011342:	2000      	movs	r0, #0
 8011344:	460b      	mov	r3, r1
 8011346:	4602      	mov	r2, r0
 8011348:	ec43 2b10 	vmov	d0, r2, r3
 801134c:	e020      	b.n	8011390 <ceil+0x88>
 801134e:	4a29      	ldr	r2, [pc, #164]	; (80113f4 <ceil+0xec>)
 8011350:	411a      	asrs	r2, r3
 8011352:	ea01 0402 	and.w	r4, r1, r2
 8011356:	4304      	orrs	r4, r0
 8011358:	d01a      	beq.n	8011390 <ceil+0x88>
 801135a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 80113e8 <ceil+0xe0>
 801135e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011362:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801136a:	ddeb      	ble.n	8011344 <ceil+0x3c>
 801136c:	2900      	cmp	r1, #0
 801136e:	bfc2      	ittt	gt
 8011370:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8011374:	fa40 f303 	asrgt.w	r3, r0, r3
 8011378:	18c9      	addgt	r1, r1, r3
 801137a:	ea21 0102 	bic.w	r1, r1, r2
 801137e:	2000      	movs	r0, #0
 8011380:	e7e0      	b.n	8011344 <ceil+0x3c>
 8011382:	2b33      	cmp	r3, #51	; 0x33
 8011384:	dd05      	ble.n	8011392 <ceil+0x8a>
 8011386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801138a:	d101      	bne.n	8011390 <ceil+0x88>
 801138c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011390:	bd30      	pop	{r4, r5, pc}
 8011392:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801139a:	40e2      	lsrs	r2, r4
 801139c:	4202      	tst	r2, r0
 801139e:	d0f7      	beq.n	8011390 <ceil+0x88>
 80113a0:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80113e8 <ceil+0xe0>
 80113a4:	ee30 0b07 	vadd.f64	d0, d0, d7
 80113a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80113ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b0:	ddc8      	ble.n	8011344 <ceil+0x3c>
 80113b2:	2900      	cmp	r1, #0
 80113b4:	dd02      	ble.n	80113bc <ceil+0xb4>
 80113b6:	2b14      	cmp	r3, #20
 80113b8:	d103      	bne.n	80113c2 <ceil+0xba>
 80113ba:	3101      	adds	r1, #1
 80113bc:	ea20 0002 	bic.w	r0, r0, r2
 80113c0:	e7c0      	b.n	8011344 <ceil+0x3c>
 80113c2:	2401      	movs	r4, #1
 80113c4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80113c8:	fa04 f303 	lsl.w	r3, r4, r3
 80113cc:	4418      	add	r0, r3
 80113ce:	42a8      	cmp	r0, r5
 80113d0:	bf38      	it	cc
 80113d2:	1909      	addcc	r1, r1, r4
 80113d4:	e7f2      	b.n	80113bc <ceil+0xb4>
 80113d6:	2000      	movs	r0, #0
 80113d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80113dc:	e7b2      	b.n	8011344 <ceil+0x3c>
 80113de:	4608      	mov	r0, r1
 80113e0:	e7b0      	b.n	8011344 <ceil+0x3c>
 80113e2:	bf00      	nop
 80113e4:	f3af 8000 	nop.w
 80113e8:	8800759c 	.word	0x8800759c
 80113ec:	7e37e43c 	.word	0x7e37e43c
 80113f0:	3ff00000 	.word	0x3ff00000
 80113f4:	000fffff 	.word	0x000fffff

080113f8 <log>:
 80113f8:	b500      	push	{lr}
 80113fa:	ed2d 8b02 	vpush	{d8}
 80113fe:	eeb0 8b40 	vmov.f64	d8, d0
 8011402:	b08b      	sub	sp, #44	; 0x2c
 8011404:	f000 f998 	bl	8011738 <__ieee754_log>
 8011408:	4b2d      	ldr	r3, [pc, #180]	; (80114c0 <log+0xc8>)
 801140a:	f993 3000 	ldrsb.w	r3, [r3]
 801140e:	1c5a      	adds	r2, r3, #1
 8011410:	d051      	beq.n	80114b6 <log+0xbe>
 8011412:	eeb4 8b48 	vcmp.f64	d8, d8
 8011416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801141a:	d64c      	bvs.n	80114b6 <log+0xbe>
 801141c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8011420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011424:	dc47      	bgt.n	80114b6 <log+0xbe>
 8011426:	4a27      	ldr	r2, [pc, #156]	; (80114c4 <log+0xcc>)
 8011428:	9201      	str	r2, [sp, #4]
 801142a:	2200      	movs	r2, #0
 801142c:	9208      	str	r2, [sp, #32]
 801142e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011432:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011436:	b993      	cbnz	r3, 801145e <log+0x66>
 8011438:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801143c:	4922      	ldr	r1, [pc, #136]	; (80114c8 <log+0xd0>)
 801143e:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 8011442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011446:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801144a:	d025      	beq.n	8011498 <log+0xa0>
 801144c:	2201      	movs	r2, #1
 801144e:	2b02      	cmp	r3, #2
 8011450:	9200      	str	r2, [sp, #0]
 8011452:	d116      	bne.n	8011482 <log+0x8a>
 8011454:	f7ff feb8 	bl	80111c8 <__errno>
 8011458:	2321      	movs	r3, #33	; 0x21
 801145a:	6003      	str	r3, [r0, #0]
 801145c:	e016      	b.n	801148c <log+0x94>
 801145e:	491b      	ldr	r1, [pc, #108]	; (80114cc <log+0xd4>)
 8011460:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011464:	2000      	movs	r0, #0
 8011466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801146a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801146e:	d1ed      	bne.n	801144c <log+0x54>
 8011470:	2202      	movs	r2, #2
 8011472:	4293      	cmp	r3, r2
 8011474:	9200      	str	r2, [sp, #0]
 8011476:	d111      	bne.n	801149c <log+0xa4>
 8011478:	f7ff fea6 	bl	80111c8 <__errno>
 801147c:	2322      	movs	r3, #34	; 0x22
 801147e:	6003      	str	r3, [r0, #0]
 8011480:	e011      	b.n	80114a6 <log+0xae>
 8011482:	4668      	mov	r0, sp
 8011484:	f000 fe0e 	bl	80120a4 <matherr>
 8011488:	2800      	cmp	r0, #0
 801148a:	d0e3      	beq.n	8011454 <log+0x5c>
 801148c:	4810      	ldr	r0, [pc, #64]	; (80114d0 <log+0xd8>)
 801148e:	f000 fe0b 	bl	80120a8 <nan>
 8011492:	ed8d 0b06 	vstr	d0, [sp, #24]
 8011496:	e006      	b.n	80114a6 <log+0xae>
 8011498:	2302      	movs	r3, #2
 801149a:	9300      	str	r3, [sp, #0]
 801149c:	4668      	mov	r0, sp
 801149e:	f000 fe01 	bl	80120a4 <matherr>
 80114a2:	2800      	cmp	r0, #0
 80114a4:	d0e8      	beq.n	8011478 <log+0x80>
 80114a6:	9b08      	ldr	r3, [sp, #32]
 80114a8:	b11b      	cbz	r3, 80114b2 <log+0xba>
 80114aa:	f7ff fe8d 	bl	80111c8 <__errno>
 80114ae:	9b08      	ldr	r3, [sp, #32]
 80114b0:	6003      	str	r3, [r0, #0]
 80114b2:	ed9d 0b06 	vldr	d0, [sp, #24]
 80114b6:	b00b      	add	sp, #44	; 0x2c
 80114b8:	ecbd 8b02 	vpop	{d8}
 80114bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80114c0:	2000007c 	.word	0x2000007c
 80114c4:	08012844 	.word	0x08012844
 80114c8:	c7efffff 	.word	0xc7efffff
 80114cc:	fff00000 	.word	0xfff00000
 80114d0:	08012847 	.word	0x08012847
 80114d4:	00000000 	.word	0x00000000

080114d8 <pow>:
 80114d8:	b570      	push	{r4, r5, r6, lr}
 80114da:	ed2d 8b0a 	vpush	{d8-d12}
 80114de:	eeb0 9b40 	vmov.f64	d9, d0
 80114e2:	eeb0 8b41 	vmov.f64	d8, d1
 80114e6:	4c8c      	ldr	r4, [pc, #560]	; (8011718 <pow+0x240>)
 80114e8:	b08a      	sub	sp, #40	; 0x28
 80114ea:	f000 fa41 	bl	8011970 <__ieee754_pow>
 80114ee:	f994 3000 	ldrsb.w	r3, [r4]
 80114f2:	eeb0 ab40 	vmov.f64	d10, d0
 80114f6:	1c5a      	adds	r2, r3, #1
 80114f8:	4626      	mov	r6, r4
 80114fa:	d04b      	beq.n	8011594 <pow+0xbc>
 80114fc:	eeb4 8b48 	vcmp.f64	d8, d8
 8011500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011504:	d646      	bvs.n	8011594 <pow+0xbc>
 8011506:	eeb4 9b49 	vcmp.f64	d9, d9
 801150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801150e:	d719      	bvc.n	8011544 <pow+0x6c>
 8011510:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011518:	d13c      	bne.n	8011594 <pow+0xbc>
 801151a:	2201      	movs	r2, #1
 801151c:	9200      	str	r2, [sp, #0]
 801151e:	497f      	ldr	r1, [pc, #508]	; (801171c <pow+0x244>)
 8011520:	4a7f      	ldr	r2, [pc, #508]	; (8011720 <pow+0x248>)
 8011522:	9201      	str	r2, [sp, #4]
 8011524:	2000      	movs	r0, #0
 8011526:	2200      	movs	r2, #0
 8011528:	2b02      	cmp	r3, #2
 801152a:	9208      	str	r2, [sp, #32]
 801152c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8011530:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011534:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011538:	d02a      	beq.n	8011590 <pow+0xb8>
 801153a:	4668      	mov	r0, sp
 801153c:	f000 fdb2 	bl	80120a4 <matherr>
 8011540:	bb00      	cbnz	r0, 8011584 <pow+0xac>
 8011542:	e04e      	b.n	80115e2 <pow+0x10a>
 8011544:	ed9f bb72 	vldr	d11, [pc, #456]	; 8011710 <pow+0x238>
 8011548:	eeb4 9b4b 	vcmp.f64	d9, d11
 801154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011550:	eeb0 cb4b 	vmov.f64	d12, d11
 8011554:	d14a      	bne.n	80115ec <pow+0x114>
 8011556:	eeb4 8b4b 	vcmp.f64	d8, d11
 801155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801155e:	d11f      	bne.n	80115a0 <pow+0xc8>
 8011560:	2201      	movs	r2, #1
 8011562:	9200      	str	r2, [sp, #0]
 8011564:	4a6e      	ldr	r2, [pc, #440]	; (8011720 <pow+0x248>)
 8011566:	9201      	str	r2, [sp, #4]
 8011568:	2200      	movs	r2, #0
 801156a:	9208      	str	r2, [sp, #32]
 801156c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8011570:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011574:	ed8d bb06 	vstr	d11, [sp, #24]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d0de      	beq.n	801153a <pow+0x62>
 801157c:	4b67      	ldr	r3, [pc, #412]	; (801171c <pow+0x244>)
 801157e:	2200      	movs	r2, #0
 8011580:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011584:	9b08      	ldr	r3, [sp, #32]
 8011586:	b11b      	cbz	r3, 8011590 <pow+0xb8>
 8011588:	f7ff fe1e 	bl	80111c8 <__errno>
 801158c:	9b08      	ldr	r3, [sp, #32]
 801158e:	6003      	str	r3, [r0, #0]
 8011590:	ed9d ab06 	vldr	d10, [sp, #24]
 8011594:	eeb0 0b4a 	vmov.f64	d0, d10
 8011598:	b00a      	add	sp, #40	; 0x28
 801159a:	ecbd 8b0a 	vpop	{d8-d12}
 801159e:	bd70      	pop	{r4, r5, r6, pc}
 80115a0:	eeb0 0b48 	vmov.f64	d0, d8
 80115a4:	f000 fd76 	bl	8012094 <finite>
 80115a8:	2800      	cmp	r0, #0
 80115aa:	d0f3      	beq.n	8011594 <pow+0xbc>
 80115ac:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80115b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b4:	d5ee      	bpl.n	8011594 <pow+0xbc>
 80115b6:	2301      	movs	r3, #1
 80115b8:	9300      	str	r3, [sp, #0]
 80115ba:	4b59      	ldr	r3, [pc, #356]	; (8011720 <pow+0x248>)
 80115bc:	9301      	str	r3, [sp, #4]
 80115be:	2300      	movs	r3, #0
 80115c0:	9308      	str	r3, [sp, #32]
 80115c2:	f994 3000 	ldrsb.w	r3, [r4]
 80115c6:	ed8d 9b02 	vstr	d9, [sp, #8]
 80115ca:	ed8d 8b04 	vstr	d8, [sp, #16]
 80115ce:	b913      	cbnz	r3, 80115d6 <pow+0xfe>
 80115d0:	ed8d bb06 	vstr	d11, [sp, #24]
 80115d4:	e7b1      	b.n	801153a <pow+0x62>
 80115d6:	4953      	ldr	r1, [pc, #332]	; (8011724 <pow+0x24c>)
 80115d8:	2000      	movs	r0, #0
 80115da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80115de:	2b02      	cmp	r3, #2
 80115e0:	d1ab      	bne.n	801153a <pow+0x62>
 80115e2:	f7ff fdf1 	bl	80111c8 <__errno>
 80115e6:	2321      	movs	r3, #33	; 0x21
 80115e8:	6003      	str	r3, [r0, #0]
 80115ea:	e7cb      	b.n	8011584 <pow+0xac>
 80115ec:	f000 fd52 	bl	8012094 <finite>
 80115f0:	4605      	mov	r5, r0
 80115f2:	2800      	cmp	r0, #0
 80115f4:	d164      	bne.n	80116c0 <pow+0x1e8>
 80115f6:	eeb0 0b49 	vmov.f64	d0, d9
 80115fa:	f000 fd4b 	bl	8012094 <finite>
 80115fe:	2800      	cmp	r0, #0
 8011600:	d05e      	beq.n	80116c0 <pow+0x1e8>
 8011602:	eeb0 0b48 	vmov.f64	d0, d8
 8011606:	f000 fd45 	bl	8012094 <finite>
 801160a:	2800      	cmp	r0, #0
 801160c:	d058      	beq.n	80116c0 <pow+0x1e8>
 801160e:	eeb4 ab4a 	vcmp.f64	d10, d10
 8011612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011616:	f994 3000 	ldrsb.w	r3, [r4]
 801161a:	4a41      	ldr	r2, [pc, #260]	; (8011720 <pow+0x248>)
 801161c:	d70e      	bvc.n	801163c <pow+0x164>
 801161e:	2101      	movs	r1, #1
 8011620:	e9cd 1200 	strd	r1, r2, [sp]
 8011624:	9508      	str	r5, [sp, #32]
 8011626:	ed8d 9b02 	vstr	d9, [sp, #8]
 801162a:	ed8d 8b04 	vstr	d8, [sp, #16]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d0ce      	beq.n	80115d0 <pow+0xf8>
 8011632:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8011636:	ed8d 7b06 	vstr	d7, [sp, #24]
 801163a:	e7d0      	b.n	80115de <pow+0x106>
 801163c:	2103      	movs	r1, #3
 801163e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011642:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011646:	ee28 8b07 	vmul.f64	d8, d8, d7
 801164a:	e9cd 1200 	strd	r1, r2, [sp]
 801164e:	9508      	str	r5, [sp, #32]
 8011650:	ed8d 9b02 	vstr	d9, [sp, #8]
 8011654:	b9fb      	cbnz	r3, 8011696 <pow+0x1be>
 8011656:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801165a:	4b33      	ldr	r3, [pc, #204]	; (8011728 <pow+0x250>)
 801165c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011664:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011668:	d54b      	bpl.n	8011702 <pow+0x22a>
 801166a:	eeb0 0b48 	vmov.f64	d0, d8
 801166e:	f000 fd23 	bl	80120b8 <rint>
 8011672:	eeb4 0b48 	vcmp.f64	d0, d8
 8011676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801167a:	d004      	beq.n	8011686 <pow+0x1ae>
 801167c:	4b2b      	ldr	r3, [pc, #172]	; (801172c <pow+0x254>)
 801167e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011682:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011686:	f996 3000 	ldrsb.w	r3, [r6]
 801168a:	2b02      	cmp	r3, #2
 801168c:	d139      	bne.n	8011702 <pow+0x22a>
 801168e:	f7ff fd9b 	bl	80111c8 <__errno>
 8011692:	2322      	movs	r3, #34	; 0x22
 8011694:	e7a8      	b.n	80115e8 <pow+0x110>
 8011696:	4b26      	ldr	r3, [pc, #152]	; (8011730 <pow+0x258>)
 8011698:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801169c:	2200      	movs	r2, #0
 801169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80116a6:	d5ee      	bpl.n	8011686 <pow+0x1ae>
 80116a8:	eeb0 0b48 	vmov.f64	d0, d8
 80116ac:	f000 fd04 	bl	80120b8 <rint>
 80116b0:	eeb4 0b48 	vcmp.f64	d0, d8
 80116b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b8:	d0e5      	beq.n	8011686 <pow+0x1ae>
 80116ba:	2200      	movs	r2, #0
 80116bc:	4b19      	ldr	r3, [pc, #100]	; (8011724 <pow+0x24c>)
 80116be:	e7e0      	b.n	8011682 <pow+0x1aa>
 80116c0:	eeb5 ab40 	vcmp.f64	d10, #0.0
 80116c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c8:	f47f af64 	bne.w	8011594 <pow+0xbc>
 80116cc:	eeb0 0b49 	vmov.f64	d0, d9
 80116d0:	f000 fce0 	bl	8012094 <finite>
 80116d4:	2800      	cmp	r0, #0
 80116d6:	f43f af5d 	beq.w	8011594 <pow+0xbc>
 80116da:	eeb0 0b48 	vmov.f64	d0, d8
 80116de:	f000 fcd9 	bl	8012094 <finite>
 80116e2:	2800      	cmp	r0, #0
 80116e4:	f43f af56 	beq.w	8011594 <pow+0xbc>
 80116e8:	2304      	movs	r3, #4
 80116ea:	9300      	str	r3, [sp, #0]
 80116ec:	4b0c      	ldr	r3, [pc, #48]	; (8011720 <pow+0x248>)
 80116ee:	9301      	str	r3, [sp, #4]
 80116f0:	2300      	movs	r3, #0
 80116f2:	9308      	str	r3, [sp, #32]
 80116f4:	ed8d 9b02 	vstr	d9, [sp, #8]
 80116f8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80116fc:	ed8d cb06 	vstr	d12, [sp, #24]
 8011700:	e7c1      	b.n	8011686 <pow+0x1ae>
 8011702:	4668      	mov	r0, sp
 8011704:	f000 fcce 	bl	80120a4 <matherr>
 8011708:	2800      	cmp	r0, #0
 801170a:	f47f af3b 	bne.w	8011584 <pow+0xac>
 801170e:	e7be      	b.n	801168e <pow+0x1b6>
	...
 8011718:	2000007c 	.word	0x2000007c
 801171c:	3ff00000 	.word	0x3ff00000
 8011720:	08012848 	.word	0x08012848
 8011724:	fff00000 	.word	0xfff00000
 8011728:	47efffff 	.word	0x47efffff
 801172c:	c7efffff 	.word	0xc7efffff
 8011730:	7ff00000 	.word	0x7ff00000
 8011734:	00000000 	.word	0x00000000

08011738 <__ieee754_log>:
 8011738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801173a:	ed8d 0b00 	vstr	d0, [sp]
 801173e:	9a01      	ldr	r2, [sp, #4]
 8011740:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8011744:	da26      	bge.n	8011794 <__ieee754_log+0x5c>
 8011746:	9900      	ldr	r1, [sp, #0]
 8011748:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801174c:	430b      	orrs	r3, r1
 801174e:	d107      	bne.n	8011760 <__ieee754_log+0x28>
 8011750:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8011900 <__ieee754_log+0x1c8>
 8011754:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 8011908 <__ieee754_log+0x1d0>
 8011758:	ee86 0b07 	vdiv.f64	d0, d6, d7
 801175c:	b003      	add	sp, #12
 801175e:	bd30      	pop	{r4, r5, pc}
 8011760:	2a00      	cmp	r2, #0
 8011762:	da04      	bge.n	801176e <__ieee754_log+0x36>
 8011764:	ed9d 7b00 	vldr	d7, [sp]
 8011768:	ee37 6b47 	vsub.f64	d6, d7, d7
 801176c:	e7f2      	b.n	8011754 <__ieee754_log+0x1c>
 801176e:	ed9d 6b00 	vldr	d6, [sp]
 8011772:	ed9f 7b67 	vldr	d7, [pc, #412]	; 8011910 <__ieee754_log+0x1d8>
 8011776:	ee26 7b07 	vmul.f64	d7, d6, d7
 801177a:	ed8d 7b00 	vstr	d7, [sp]
 801177e:	9a01      	ldr	r2, [sp, #4]
 8011780:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8011784:	4b78      	ldr	r3, [pc, #480]	; (8011968 <__ieee754_log+0x230>)
 8011786:	429a      	cmp	r2, r3
 8011788:	dd06      	ble.n	8011798 <__ieee754_log+0x60>
 801178a:	ed9d 7b00 	vldr	d7, [sp]
 801178e:	ee37 0b07 	vadd.f64	d0, d7, d7
 8011792:	e7e3      	b.n	801175c <__ieee754_log+0x24>
 8011794:	2100      	movs	r1, #0
 8011796:	e7f5      	b.n	8011784 <__ieee754_log+0x4c>
 8011798:	1513      	asrs	r3, r2, #20
 801179a:	f3c2 0013 	ubfx	r0, r2, #0, #20
 801179e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80117a2:	4419      	add	r1, r3
 80117a4:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 80117a8:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80117ac:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 80117b0:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 80117b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117b8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80117bc:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 80117c0:	ea45 0300 	orr.w	r3, r5, r0
 80117c4:	ec43 2b10 	vmov	d0, r2, r3
 80117c8:	1c82      	adds	r2, r0, #2
 80117ca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80117ce:	2a02      	cmp	r2, #2
 80117d0:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 80117d4:	ee30 0b47 	vsub.f64	d0, d0, d7
 80117d8:	dc31      	bgt.n	801183e <__ieee754_log+0x106>
 80117da:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80117de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e2:	d10f      	bne.n	8011804 <__ieee754_log+0xcc>
 80117e4:	2c00      	cmp	r4, #0
 80117e6:	f000 8086 	beq.w	80118f6 <__ieee754_log+0x1be>
 80117ea:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8011918 <__ieee754_log+0x1e0>
 80117ee:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8011920 <__ieee754_log+0x1e8>
 80117f2:	ee07 4a90 	vmov	s15, r4
 80117f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80117fa:	ee27 0b00 	vmul.f64	d0, d7, d0
 80117fe:	eea7 0b06 	vfma.f64	d0, d7, d6
 8011802:	e7ab      	b.n	801175c <__ieee754_log+0x24>
 8011804:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8011928 <__ieee754_log+0x1f0>
 8011808:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801180c:	eea0 6b47 	vfms.f64	d6, d0, d7
 8011810:	ee20 7b00 	vmul.f64	d7, d0, d0
 8011814:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011818:	b914      	cbnz	r4, 8011820 <__ieee754_log+0xe8>
 801181a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801181e:	e79d      	b.n	801175c <__ieee754_log+0x24>
 8011820:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8011918 <__ieee754_log+0x1e0>
 8011824:	ee07 4a90 	vmov	s15, r4
 8011828:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801182c:	eea7 6b45 	vfms.f64	d6, d7, d5
 8011830:	ee36 0b40 	vsub.f64	d0, d6, d0
 8011834:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8011920 <__ieee754_log+0x1e8>
 8011838:	ee97 0b06 	vfnms.f64	d0, d7, d6
 801183c:	e78e      	b.n	801175c <__ieee754_log+0x24>
 801183e:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011842:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011846:	ee80 4b07 	vdiv.f64	d4, d0, d7
 801184a:	ee07 4a90 	vmov	s15, r4
 801184e:	ee24 2b04 	vmul.f64	d2, d4, d4
 8011852:	ed9f 3b37 	vldr	d3, [pc, #220]	; 8011930 <__ieee754_log+0x1f8>
 8011856:	ee22 5b02 	vmul.f64	d5, d2, d2
 801185a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801185e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8011938 <__ieee754_log+0x200>
 8011862:	eea5 7b03 	vfma.f64	d7, d5, d3
 8011866:	ed9f 3b36 	vldr	d3, [pc, #216]	; 8011940 <__ieee754_log+0x208>
 801186a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8011948 <__ieee754_log+0x210>
 801186e:	eea7 3b05 	vfma.f64	d3, d7, d5
 8011872:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8011950 <__ieee754_log+0x218>
 8011876:	eea5 7b01 	vfma.f64	d7, d5, d1
 801187a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8011958 <__ieee754_log+0x220>
 801187e:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 8011882:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 8011886:	eea7 1b05 	vfma.f64	d1, d7, d5
 801188a:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 801188e:	ed9f 7b34 	vldr	d7, [pc, #208]	; 8011960 <__ieee754_log+0x228>
 8011892:	3251      	adds	r2, #81	; 0x51
 8011894:	430a      	orrs	r2, r1
 8011896:	2a00      	cmp	r2, #0
 8011898:	eea1 7b05 	vfma.f64	d7, d1, d5
 801189c:	ee27 7b02 	vmul.f64	d7, d7, d2
 80118a0:	eea3 7b05 	vfma.f64	d7, d3, d5
 80118a4:	dd1c      	ble.n	80118e0 <__ieee754_log+0x1a8>
 80118a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80118aa:	ee20 5b05 	vmul.f64	d5, d0, d5
 80118ae:	ee25 5b00 	vmul.f64	d5, d5, d0
 80118b2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80118b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80118ba:	b924      	cbnz	r4, 80118c6 <__ieee754_log+0x18e>
 80118bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80118c0:	ee30 0b47 	vsub.f64	d0, d0, d7
 80118c4:	e74a      	b.n	801175c <__ieee754_log+0x24>
 80118c6:	ed9f 4b14 	vldr	d4, [pc, #80]	; 8011918 <__ieee754_log+0x1e0>
 80118ca:	eea6 7b04 	vfma.f64	d7, d6, d4
 80118ce:	ee35 7b47 	vsub.f64	d7, d5, d7
 80118d2:	ee37 0b40 	vsub.f64	d0, d7, d0
 80118d6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8011920 <__ieee754_log+0x1e8>
 80118da:	ee96 0b07 	vfnms.f64	d0, d6, d7
 80118de:	e73d      	b.n	801175c <__ieee754_log+0x24>
 80118e0:	ee30 7b47 	vsub.f64	d7, d0, d7
 80118e4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80118e8:	2c00      	cmp	r4, #0
 80118ea:	d0e9      	beq.n	80118c0 <__ieee754_log+0x188>
 80118ec:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8011918 <__ieee754_log+0x1e0>
 80118f0:	eea6 7b45 	vfms.f64	d7, d6, d5
 80118f4:	e7ed      	b.n	80118d2 <__ieee754_log+0x19a>
 80118f6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8011908 <__ieee754_log+0x1d0>
 80118fa:	e72f      	b.n	801175c <__ieee754_log+0x24>
 80118fc:	f3af 8000 	nop.w
 8011900:	00000000 	.word	0x00000000
 8011904:	c3500000 	.word	0xc3500000
	...
 8011914:	43500000 	.word	0x43500000
 8011918:	35793c76 	.word	0x35793c76
 801191c:	3dea39ef 	.word	0x3dea39ef
 8011920:	fee00000 	.word	0xfee00000
 8011924:	3fe62e42 	.word	0x3fe62e42
 8011928:	55555555 	.word	0x55555555
 801192c:	3fd55555 	.word	0x3fd55555
 8011930:	d078c69f 	.word	0xd078c69f
 8011934:	3fc39a09 	.word	0x3fc39a09
 8011938:	1d8e78af 	.word	0x1d8e78af
 801193c:	3fcc71c5 	.word	0x3fcc71c5
 8011940:	9997fa04 	.word	0x9997fa04
 8011944:	3fd99999 	.word	0x3fd99999
 8011948:	df3e5244 	.word	0xdf3e5244
 801194c:	3fc2f112 	.word	0x3fc2f112
 8011950:	96cb03de 	.word	0x96cb03de
 8011954:	3fc74664 	.word	0x3fc74664
 8011958:	94229359 	.word	0x94229359
 801195c:	3fd24924 	.word	0x3fd24924
 8011960:	55555593 	.word	0x55555593
 8011964:	3fe55555 	.word	0x3fe55555
 8011968:	7fefffff 	.word	0x7fefffff
 801196c:	00000000 	.word	0x00000000

08011970 <__ieee754_pow>:
 8011970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011974:	ec57 6b11 	vmov	r6, r7, d1
 8011978:	ed2d 8b02 	vpush	{d8}
 801197c:	eeb0 8b40 	vmov.f64	d8, d0
 8011980:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011984:	ea58 0306 	orrs.w	r3, r8, r6
 8011988:	b085      	sub	sp, #20
 801198a:	46b9      	mov	r9, r7
 801198c:	ee11 2a10 	vmov	r2, s2
 8011990:	f000 8306 	beq.w	8011fa0 <__ieee754_pow+0x630>
 8011994:	ee18 aa90 	vmov	sl, s17
 8011998:	4bb9      	ldr	r3, [pc, #740]	; (8011c80 <__ieee754_pow+0x310>)
 801199a:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 801199e:	429c      	cmp	r4, r3
 80119a0:	ee10 ba10 	vmov	fp, s0
 80119a4:	dc0b      	bgt.n	80119be <__ieee754_pow+0x4e>
 80119a6:	d105      	bne.n	80119b4 <__ieee754_pow+0x44>
 80119a8:	f1bb 0f00 	cmp.w	fp, #0
 80119ac:	d107      	bne.n	80119be <__ieee754_pow+0x4e>
 80119ae:	45a0      	cmp	r8, r4
 80119b0:	dc0d      	bgt.n	80119ce <__ieee754_pow+0x5e>
 80119b2:	e001      	b.n	80119b8 <__ieee754_pow+0x48>
 80119b4:	4598      	cmp	r8, r3
 80119b6:	dc02      	bgt.n	80119be <__ieee754_pow+0x4e>
 80119b8:	4598      	cmp	r8, r3
 80119ba:	d110      	bne.n	80119de <__ieee754_pow+0x6e>
 80119bc:	b17a      	cbz	r2, 80119de <__ieee754_pow+0x6e>
 80119be:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80119c2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80119c6:	ea54 030b 	orrs.w	r3, r4, fp
 80119ca:	f000 82e9 	beq.w	8011fa0 <__ieee754_pow+0x630>
 80119ce:	48ad      	ldr	r0, [pc, #692]	; (8011c84 <__ieee754_pow+0x314>)
 80119d0:	b005      	add	sp, #20
 80119d2:	ecbd 8b02 	vpop	{d8}
 80119d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119da:	f000 bb65 	b.w	80120a8 <nan>
 80119de:	f1ba 0f00 	cmp.w	sl, #0
 80119e2:	da4e      	bge.n	8011a82 <__ieee754_pow+0x112>
 80119e4:	4ba8      	ldr	r3, [pc, #672]	; (8011c88 <__ieee754_pow+0x318>)
 80119e6:	4598      	cmp	r8, r3
 80119e8:	dc49      	bgt.n	8011a7e <__ieee754_pow+0x10e>
 80119ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80119ee:	4598      	cmp	r8, r3
 80119f0:	dd47      	ble.n	8011a82 <__ieee754_pow+0x112>
 80119f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80119f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80119fa:	2b14      	cmp	r3, #20
 80119fc:	dd24      	ble.n	8011a48 <__ieee754_pow+0xd8>
 80119fe:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011a02:	fa22 f503 	lsr.w	r5, r2, r3
 8011a06:	fa05 f303 	lsl.w	r3, r5, r3
 8011a0a:	4293      	cmp	r3, r2
 8011a0c:	d139      	bne.n	8011a82 <__ieee754_pow+0x112>
 8011a0e:	f005 0501 	and.w	r5, r5, #1
 8011a12:	f1c5 0502 	rsb	r5, r5, #2
 8011a16:	2a00      	cmp	r2, #0
 8011a18:	d15a      	bne.n	8011ad0 <__ieee754_pow+0x160>
 8011a1a:	4b99      	ldr	r3, [pc, #612]	; (8011c80 <__ieee754_pow+0x310>)
 8011a1c:	4598      	cmp	r8, r3
 8011a1e:	d122      	bne.n	8011a66 <__ieee754_pow+0xf6>
 8011a20:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011a24:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011a28:	ea53 030b 	orrs.w	r3, r3, fp
 8011a2c:	f000 82b8 	beq.w	8011fa0 <__ieee754_pow+0x630>
 8011a30:	4b96      	ldr	r3, [pc, #600]	; (8011c8c <__ieee754_pow+0x31c>)
 8011a32:	429c      	cmp	r4, r3
 8011a34:	dd27      	ble.n	8011a86 <__ieee754_pow+0x116>
 8011a36:	f1b9 0f00 	cmp.w	r9, #0
 8011a3a:	f280 82b4 	bge.w	8011fa6 <__ieee754_pow+0x636>
 8011a3e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8011c50 <__ieee754_pow+0x2e0>
 8011a42:	ed8d 7b00 	vstr	d7, [sp]
 8011a46:	e026      	b.n	8011a96 <__ieee754_pow+0x126>
 8011a48:	2a00      	cmp	r2, #0
 8011a4a:	d140      	bne.n	8011ace <__ieee754_pow+0x15e>
 8011a4c:	f1c3 0314 	rsb	r3, r3, #20
 8011a50:	fa48 f503 	asr.w	r5, r8, r3
 8011a54:	fa05 f303 	lsl.w	r3, r5, r3
 8011a58:	4543      	cmp	r3, r8
 8011a5a:	f040 82aa 	bne.w	8011fb2 <__ieee754_pow+0x642>
 8011a5e:	f005 0501 	and.w	r5, r5, #1
 8011a62:	f1c5 0502 	rsb	r5, r5, #2
 8011a66:	4b8a      	ldr	r3, [pc, #552]	; (8011c90 <__ieee754_pow+0x320>)
 8011a68:	4598      	cmp	r8, r3
 8011a6a:	d11b      	bne.n	8011aa4 <__ieee754_pow+0x134>
 8011a6c:	f1b9 0f00 	cmp.w	r9, #0
 8011a70:	f280 829c 	bge.w	8011fac <__ieee754_pow+0x63c>
 8011a74:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011a78:	ee87 7b08 	vdiv.f64	d7, d7, d8
 8011a7c:	e7e1      	b.n	8011a42 <__ieee754_pow+0xd2>
 8011a7e:	2502      	movs	r5, #2
 8011a80:	e7c9      	b.n	8011a16 <__ieee754_pow+0xa6>
 8011a82:	2500      	movs	r5, #0
 8011a84:	e7c7      	b.n	8011a16 <__ieee754_pow+0xa6>
 8011a86:	f1b9 0f00 	cmp.w	r9, #0
 8011a8a:	dad8      	bge.n	8011a3e <__ieee754_pow+0xce>
 8011a8c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8011a90:	4633      	mov	r3, r6
 8011a92:	e9cd 3400 	strd	r3, r4, [sp]
 8011a96:	ed9d 0b00 	vldr	d0, [sp]
 8011a9a:	b005      	add	sp, #20
 8011a9c:	ecbd 8b02 	vpop	{d8}
 8011aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aa4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011aa8:	d102      	bne.n	8011ab0 <__ieee754_pow+0x140>
 8011aaa:	ee28 7b08 	vmul.f64	d7, d8, d8
 8011aae:	e7c8      	b.n	8011a42 <__ieee754_pow+0xd2>
 8011ab0:	4b78      	ldr	r3, [pc, #480]	; (8011c94 <__ieee754_pow+0x324>)
 8011ab2:	4599      	cmp	r9, r3
 8011ab4:	d10c      	bne.n	8011ad0 <__ieee754_pow+0x160>
 8011ab6:	f1ba 0f00 	cmp.w	sl, #0
 8011aba:	db09      	blt.n	8011ad0 <__ieee754_pow+0x160>
 8011abc:	eeb0 0b48 	vmov.f64	d0, d8
 8011ac0:	b005      	add	sp, #20
 8011ac2:	ecbd 8b02 	vpop	{d8}
 8011ac6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aca:	f000 bad7 	b.w	801207c <__ieee754_sqrt>
 8011ace:	2500      	movs	r5, #0
 8011ad0:	eeb0 0b48 	vmov.f64	d0, d8
 8011ad4:	f000 fad5 	bl	8012082 <fabs>
 8011ad8:	ed8d 0b00 	vstr	d0, [sp]
 8011adc:	f1bb 0f00 	cmp.w	fp, #0
 8011ae0:	d128      	bne.n	8011b34 <__ieee754_pow+0x1c4>
 8011ae2:	b124      	cbz	r4, 8011aee <__ieee754_pow+0x17e>
 8011ae4:	4b6a      	ldr	r3, [pc, #424]	; (8011c90 <__ieee754_pow+0x320>)
 8011ae6:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d122      	bne.n	8011b34 <__ieee754_pow+0x1c4>
 8011aee:	f1b9 0f00 	cmp.w	r9, #0
 8011af2:	da07      	bge.n	8011b04 <__ieee754_pow+0x194>
 8011af4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011af8:	ed9d 6b00 	vldr	d6, [sp]
 8011afc:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8011b00:	ed8d 7b00 	vstr	d7, [sp]
 8011b04:	f1ba 0f00 	cmp.w	sl, #0
 8011b08:	dac5      	bge.n	8011a96 <__ieee754_pow+0x126>
 8011b0a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011b0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011b12:	ea54 0305 	orrs.w	r3, r4, r5
 8011b16:	d106      	bne.n	8011b26 <__ieee754_pow+0x1b6>
 8011b18:	ed9d 7b00 	vldr	d7, [sp]
 8011b1c:	ee37 7b47 	vsub.f64	d7, d7, d7
 8011b20:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8011b24:	e78d      	b.n	8011a42 <__ieee754_pow+0xd2>
 8011b26:	2d01      	cmp	r5, #1
 8011b28:	d1b5      	bne.n	8011a96 <__ieee754_pow+0x126>
 8011b2a:	ed9d 7b00 	vldr	d7, [sp]
 8011b2e:	eeb1 7b47 	vneg.f64	d7, d7
 8011b32:	e786      	b.n	8011a42 <__ieee754_pow+0xd2>
 8011b34:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8011b38:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011b3c:	ea55 030a 	orrs.w	r3, r5, sl
 8011b40:	d104      	bne.n	8011b4c <__ieee754_pow+0x1dc>
 8011b42:	ee38 8b48 	vsub.f64	d8, d8, d8
 8011b46:	ee88 7b08 	vdiv.f64	d7, d8, d8
 8011b4a:	e77a      	b.n	8011a42 <__ieee754_pow+0xd2>
 8011b4c:	4b52      	ldr	r3, [pc, #328]	; (8011c98 <__ieee754_pow+0x328>)
 8011b4e:	4598      	cmp	r8, r3
 8011b50:	f340 80a8 	ble.w	8011ca4 <__ieee754_pow+0x334>
 8011b54:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011b58:	4598      	cmp	r8, r3
 8011b5a:	dd0b      	ble.n	8011b74 <__ieee754_pow+0x204>
 8011b5c:	4b4b      	ldr	r3, [pc, #300]	; (8011c8c <__ieee754_pow+0x31c>)
 8011b5e:	429c      	cmp	r4, r3
 8011b60:	dc0e      	bgt.n	8011b80 <__ieee754_pow+0x210>
 8011b62:	f1b9 0f00 	cmp.w	r9, #0
 8011b66:	f6bf af6a 	bge.w	8011a3e <__ieee754_pow+0xce>
 8011b6a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8011c58 <__ieee754_pow+0x2e8>
 8011b6e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8011b72:	e766      	b.n	8011a42 <__ieee754_pow+0xd2>
 8011b74:	4b49      	ldr	r3, [pc, #292]	; (8011c9c <__ieee754_pow+0x32c>)
 8011b76:	429c      	cmp	r4, r3
 8011b78:	ddf3      	ble.n	8011b62 <__ieee754_pow+0x1f2>
 8011b7a:	4b45      	ldr	r3, [pc, #276]	; (8011c90 <__ieee754_pow+0x320>)
 8011b7c:	429c      	cmp	r4, r3
 8011b7e:	dd03      	ble.n	8011b88 <__ieee754_pow+0x218>
 8011b80:	f1b9 0f00 	cmp.w	r9, #0
 8011b84:	dcf1      	bgt.n	8011b6a <__ieee754_pow+0x1fa>
 8011b86:	e75a      	b.n	8011a3e <__ieee754_pow+0xce>
 8011b88:	ed9d 7b00 	vldr	d7, [sp]
 8011b8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011b90:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8011c60 <__ieee754_pow+0x2f0>
 8011b94:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011b98:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 8011b9c:	eeb1 3b46 	vneg.f64	d3, d6
 8011ba0:	eea3 5b07 	vfma.f64	d5, d3, d7
 8011ba4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011ba8:	eea5 7b46 	vfms.f64	d7, d5, d6
 8011bac:	ee26 5b06 	vmul.f64	d5, d6, d6
 8011bb0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011bb4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8011c68 <__ieee754_pow+0x2f8>
 8011bb8:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011bbc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011c70 <__ieee754_pow+0x300>
 8011bc0:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011bc4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011c78 <__ieee754_pow+0x308>
 8011bc8:	eeb0 4b47 	vmov.f64	d4, d7
 8011bcc:	eea6 4b05 	vfma.f64	d4, d6, d5
 8011bd0:	ec53 2b14 	vmov	r2, r3, d4
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	ec43 2b14 	vmov	d4, r2, r3
 8011bda:	eeb0 6b44 	vmov.f64	d6, d4
 8011bde:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011be2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011be6:	3d01      	subs	r5, #1
 8011be8:	ea55 030a 	orrs.w	r3, r5, sl
 8011bec:	f04f 0200 	mov.w	r2, #0
 8011bf0:	463b      	mov	r3, r7
 8011bf2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011bf6:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8011bfa:	ec47 6b15 	vmov	d5, r6, r7
 8011bfe:	fe06 8b08 	vseleq.f64	d8, d6, d8
 8011c02:	ec47 6b13 	vmov	d3, r6, r7
 8011c06:	ec43 2b16 	vmov	d6, r2, r3
 8011c0a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011c0e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8011c12:	4b23      	ldr	r3, [pc, #140]	; (8011ca0 <__ieee754_pow+0x330>)
 8011c14:	eea5 7b04 	vfma.f64	d7, d5, d4
 8011c18:	ee24 6b06 	vmul.f64	d6, d4, d6
 8011c1c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011c20:	ee15 1a90 	vmov	r1, s11
 8011c24:	4299      	cmp	r1, r3
 8011c26:	ee15 2a10 	vmov	r2, s10
 8011c2a:	f340 819b 	ble.w	8011f64 <__ieee754_pow+0x5f4>
 8011c2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011c32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011c36:	4313      	orrs	r3, r2
 8011c38:	f000 810a 	beq.w	8011e50 <__ieee754_pow+0x4e0>
 8011c3c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8011c58 <__ieee754_pow+0x2e8>
 8011c40:	ee28 8b07 	vmul.f64	d8, d8, d7
 8011c44:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011c48:	e6fb      	b.n	8011a42 <__ieee754_pow+0xd2>
 8011c4a:	bf00      	nop
 8011c4c:	f3af 8000 	nop.w
	...
 8011c58:	8800759c 	.word	0x8800759c
 8011c5c:	7e37e43c 	.word	0x7e37e43c
 8011c60:	55555555 	.word	0x55555555
 8011c64:	3fd55555 	.word	0x3fd55555
 8011c68:	652b82fe 	.word	0x652b82fe
 8011c6c:	3ff71547 	.word	0x3ff71547
 8011c70:	f85ddf44 	.word	0xf85ddf44
 8011c74:	3e54ae0b 	.word	0x3e54ae0b
 8011c78:	60000000 	.word	0x60000000
 8011c7c:	3ff71547 	.word	0x3ff71547
 8011c80:	7ff00000 	.word	0x7ff00000
 8011c84:	08012847 	.word	0x08012847
 8011c88:	433fffff 	.word	0x433fffff
 8011c8c:	3fefffff 	.word	0x3fefffff
 8011c90:	3ff00000 	.word	0x3ff00000
 8011c94:	3fe00000 	.word	0x3fe00000
 8011c98:	41e00000 	.word	0x41e00000
 8011c9c:	3feffffe 	.word	0x3feffffe
 8011ca0:	408fffff 	.word	0x408fffff
 8011ca4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011ca8:	f280 80ce 	bge.w	8011e48 <__ieee754_pow+0x4d8>
 8011cac:	ed9d 6b00 	vldr	d6, [sp]
 8011cb0:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8011fb8 <__ieee754_pow+0x648>
 8011cb4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011cb8:	ed8d 7b00 	vstr	d7, [sp]
 8011cbc:	9c01      	ldr	r4, [sp, #4]
 8011cbe:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8011cc2:	1521      	asrs	r1, r4, #20
 8011cc4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011cc8:	4419      	add	r1, r3
 8011cca:	4be3      	ldr	r3, [pc, #908]	; (8012058 <__ieee754_pow+0x6e8>)
 8011ccc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011cd0:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8011cd4:	429c      	cmp	r4, r3
 8011cd6:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 8011cda:	dd06      	ble.n	8011cea <__ieee754_pow+0x37a>
 8011cdc:	4bdf      	ldr	r3, [pc, #892]	; (801205c <__ieee754_pow+0x6ec>)
 8011cde:	429c      	cmp	r4, r3
 8011ce0:	f340 80b4 	ble.w	8011e4c <__ieee754_pow+0x4dc>
 8011ce4:	3101      	adds	r1, #1
 8011ce6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8011cea:	2400      	movs	r4, #0
 8011cec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cf0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	ec43 2b17 	vmov	d7, r2, r3
 8011cfa:	4bd9      	ldr	r3, [pc, #868]	; (8012060 <__ieee754_pow+0x6f0>)
 8011cfc:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8011d00:	4463      	add	r3, ip
 8011d02:	ed93 5b00 	vldr	d5, [r3]
 8011d06:	1040      	asrs	r0, r0, #1
 8011d08:	ee37 2b45 	vsub.f64	d2, d7, d5
 8011d0c:	ee35 6b07 	vadd.f64	d6, d5, d7
 8011d10:	ee84 1b06 	vdiv.f64	d1, d4, d6
 8011d14:	ee22 6b01 	vmul.f64	d6, d2, d1
 8011d18:	ed8d 6b00 	vstr	d6, [sp]
 8011d1c:	e9dd 8900 	ldrd	r8, r9, [sp]
 8011d20:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8011d24:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8011d28:	f04f 0800 	mov.w	r8, #0
 8011d2c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8011d30:	2200      	movs	r2, #0
 8011d32:	ec49 8b14 	vmov	d4, r8, r9
 8011d36:	ec43 2b16 	vmov	d6, r2, r3
 8011d3a:	eeb1 3b44 	vneg.f64	d3, d4
 8011d3e:	eea3 2b06 	vfma.f64	d2, d3, d6
 8011d42:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011d46:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d4a:	eea3 2b07 	vfma.f64	d2, d3, d7
 8011d4e:	ed9d 7b00 	vldr	d7, [sp]
 8011d52:	ee22 2b01 	vmul.f64	d2, d2, d1
 8011d56:	ee27 5b07 	vmul.f64	d5, d7, d7
 8011d5a:	ee37 6b04 	vadd.f64	d6, d7, d4
 8011d5e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8011fc0 <__ieee754_pow+0x650>
 8011d62:	ee25 0b05 	vmul.f64	d0, d5, d5
 8011d66:	ee26 6b02 	vmul.f64	d6, d6, d2
 8011d6a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8011fc8 <__ieee754_pow+0x658>
 8011d6e:	eea5 7b01 	vfma.f64	d7, d5, d1
 8011d72:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8011fd0 <__ieee754_pow+0x660>
 8011d76:	eea7 1b05 	vfma.f64	d1, d7, d5
 8011d7a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8011fd8 <__ieee754_pow+0x668>
 8011d7e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8011d82:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8011fe0 <__ieee754_pow+0x670>
 8011d86:	eea7 1b05 	vfma.f64	d1, d7, d5
 8011d8a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8011fe8 <__ieee754_pow+0x678>
 8011d8e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8011d92:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011d96:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 8011d9a:	eeb0 5b47 	vmov.f64	d5, d7
 8011d9e:	eea4 5b04 	vfma.f64	d5, d4, d4
 8011da2:	ee35 5b06 	vadd.f64	d5, d5, d6
 8011da6:	ed8d 5b02 	vstr	d5, [sp, #8]
 8011daa:	f8cd 8008 	str.w	r8, [sp, #8]
 8011dae:	ed9d 5b02 	vldr	d5, [sp, #8]
 8011db2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011db6:	eea3 7b04 	vfma.f64	d7, d3, d4
 8011dba:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011dbe:	ed9d 6b00 	vldr	d6, [sp]
 8011dc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011dc6:	eea2 7b05 	vfma.f64	d7, d2, d5
 8011dca:	eeb0 6b47 	vmov.f64	d6, d7
 8011dce:	eea4 6b05 	vfma.f64	d6, d4, d5
 8011dd2:	ed8d 6b00 	vstr	d6, [sp]
 8011dd6:	f8cd 8000 	str.w	r8, [sp]
 8011dda:	ed9d 2b00 	vldr	d2, [sp]
 8011dde:	eeb0 6b42 	vmov.f64	d6, d2
 8011de2:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011de6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011dea:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8011ff0 <__ieee754_pow+0x680>
 8011dee:	4b9d      	ldr	r3, [pc, #628]	; (8012064 <__ieee754_pow+0x6f4>)
 8011df0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011df4:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8011ff8 <__ieee754_pow+0x688>
 8011df8:	4463      	add	r3, ip
 8011dfa:	eea2 7b06 	vfma.f64	d7, d2, d6
 8011dfe:	ed93 6b00 	vldr	d6, [r3]
 8011e02:	4b99      	ldr	r3, [pc, #612]	; (8012068 <__ieee754_pow+0x6f8>)
 8011e04:	ee37 6b06 	vadd.f64	d6, d7, d6
 8011e08:	449c      	add	ip, r3
 8011e0a:	ed9c 1b00 	vldr	d1, [ip]
 8011e0e:	eeb0 4b46 	vmov.f64	d4, d6
 8011e12:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8012000 <__ieee754_pow+0x690>
 8011e16:	ee07 1a90 	vmov	s15, r1
 8011e1a:	eea2 4b03 	vfma.f64	d4, d2, d3
 8011e1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011e22:	ee34 4b01 	vadd.f64	d4, d4, d1
 8011e26:	ee34 5b07 	vadd.f64	d5, d4, d7
 8011e2a:	ed8d 5b00 	vstr	d5, [sp]
 8011e2e:	f8cd 8000 	str.w	r8, [sp]
 8011e32:	ed9d 4b00 	vldr	d4, [sp]
 8011e36:	ee34 7b47 	vsub.f64	d7, d4, d7
 8011e3a:	ee37 7b41 	vsub.f64	d7, d7, d1
 8011e3e:	eea2 7b43 	vfms.f64	d7, d2, d3
 8011e42:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011e46:	e6ce      	b.n	8011be6 <__ieee754_pow+0x276>
 8011e48:	2300      	movs	r3, #0
 8011e4a:	e73a      	b.n	8011cc2 <__ieee754_pow+0x352>
 8011e4c:	2401      	movs	r4, #1
 8011e4e:	e74d      	b.n	8011cec <__ieee754_pow+0x37c>
 8011e50:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8012008 <__ieee754_pow+0x698>
 8011e54:	ee35 5b46 	vsub.f64	d5, d5, d6
 8011e58:	ee37 4b04 	vadd.f64	d4, d7, d4
 8011e5c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8011e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e64:	f73f aeea 	bgt.w	8011c3c <__ieee754_pow+0x2cc>
 8011e68:	4a80      	ldr	r2, [pc, #512]	; (801206c <__ieee754_pow+0x6fc>)
 8011e6a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011e6e:	4293      	cmp	r3, r2
 8011e70:	f340 808e 	ble.w	8011f90 <__ieee754_pow+0x620>
 8011e74:	151b      	asrs	r3, r3, #20
 8011e76:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 8011e7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011e7e:	4103      	asrs	r3, r0
 8011e80:	440b      	add	r3, r1
 8011e82:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011e86:	487a      	ldr	r0, [pc, #488]	; (8012070 <__ieee754_pow+0x700>)
 8011e88:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011e8c:	4110      	asrs	r0, r2
 8011e8e:	ea23 0500 	bic.w	r5, r3, r0
 8011e92:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8011e96:	2400      	movs	r4, #0
 8011e98:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8011e9c:	f1c2 0214 	rsb	r2, r2, #20
 8011ea0:	ec45 4b15 	vmov	d5, r4, r5
 8011ea4:	4110      	asrs	r0, r2
 8011ea6:	2900      	cmp	r1, #0
 8011ea8:	bfb8      	it	lt
 8011eaa:	4240      	neglt	r0, r0
 8011eac:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011eb0:	ee36 5b07 	vadd.f64	d5, d6, d7
 8011eb4:	ec53 2b15 	vmov	r2, r3, d5
 8011eb8:	2200      	movs	r2, #0
 8011eba:	ec43 2b15 	vmov	d5, r2, r3
 8011ebe:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8012010 <__ieee754_pow+0x6a0>
 8011ec2:	ee35 6b46 	vsub.f64	d6, d5, d6
 8011ec6:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011eca:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8012018 <__ieee754_pow+0x6a8>
 8011ece:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011ed2:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011ed6:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8012020 <__ieee754_pow+0x6b0>
 8011eda:	eeb0 4b47 	vmov.f64	d4, d7
 8011ede:	eea5 4b06 	vfma.f64	d4, d5, d6
 8011ee2:	eeb0 3b44 	vmov.f64	d3, d4
 8011ee6:	eea5 3b46 	vfms.f64	d3, d5, d6
 8011eea:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8012028 <__ieee754_pow+0x6b8>
 8011eee:	ee37 7b43 	vsub.f64	d7, d7, d3
 8011ef2:	ee24 6b04 	vmul.f64	d6, d4, d4
 8011ef6:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8012030 <__ieee754_pow+0x6c0>
 8011efa:	eea4 7b07 	vfma.f64	d7, d4, d7
 8011efe:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011f02:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8012038 <__ieee754_pow+0x6c8>
 8011f06:	eea3 5b06 	vfma.f64	d5, d3, d6
 8011f0a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8012040 <__ieee754_pow+0x6d0>
 8011f0e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8011f12:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8012048 <__ieee754_pow+0x6d8>
 8011f16:	eea3 5b06 	vfma.f64	d5, d3, d6
 8011f1a:	eeb0 3b44 	vmov.f64	d3, d4
 8011f1e:	eea5 3b46 	vfms.f64	d3, d5, d6
 8011f22:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011f26:	eeb0 6b43 	vmov.f64	d6, d3
 8011f2a:	ee24 3b03 	vmul.f64	d3, d4, d3
 8011f2e:	ee36 5b45 	vsub.f64	d5, d6, d5
 8011f32:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8011f36:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011f3a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011f3e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011f42:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011f46:	ed8d 7b00 	vstr	d7, [sp]
 8011f4a:	9901      	ldr	r1, [sp, #4]
 8011f4c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8011f50:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8011f54:	da1e      	bge.n	8011f94 <__ieee754_pow+0x624>
 8011f56:	eeb0 0b47 	vmov.f64	d0, d7
 8011f5a:	f000 f939 	bl	80121d0 <scalbn>
 8011f5e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8011f62:	e56e      	b.n	8011a42 <__ieee754_pow+0xd2>
 8011f64:	4b43      	ldr	r3, [pc, #268]	; (8012074 <__ieee754_pow+0x704>)
 8011f66:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8011f6a:	4298      	cmp	r0, r3
 8011f6c:	f77f af7c 	ble.w	8011e68 <__ieee754_pow+0x4f8>
 8011f70:	4b41      	ldr	r3, [pc, #260]	; (8012078 <__ieee754_pow+0x708>)
 8011f72:	440b      	add	r3, r1
 8011f74:	4313      	orrs	r3, r2
 8011f76:	d002      	beq.n	8011f7e <__ieee754_pow+0x60e>
 8011f78:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8012050 <__ieee754_pow+0x6e0>
 8011f7c:	e660      	b.n	8011c40 <__ieee754_pow+0x2d0>
 8011f7e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8011f82:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f8a:	f6ff af6d 	blt.w	8011e68 <__ieee754_pow+0x4f8>
 8011f8e:	e7f3      	b.n	8011f78 <__ieee754_pow+0x608>
 8011f90:	2000      	movs	r0, #0
 8011f92:	e78d      	b.n	8011eb0 <__ieee754_pow+0x540>
 8011f94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f98:	460b      	mov	r3, r1
 8011f9a:	ec43 2b10 	vmov	d0, r2, r3
 8011f9e:	e7de      	b.n	8011f5e <__ieee754_pow+0x5ee>
 8011fa0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011fa4:	e54d      	b.n	8011a42 <__ieee754_pow+0xd2>
 8011fa6:	e9cd 6700 	strd	r6, r7, [sp]
 8011faa:	e574      	b.n	8011a96 <__ieee754_pow+0x126>
 8011fac:	ed8d 8b00 	vstr	d8, [sp]
 8011fb0:	e571      	b.n	8011a96 <__ieee754_pow+0x126>
 8011fb2:	4615      	mov	r5, r2
 8011fb4:	e557      	b.n	8011a66 <__ieee754_pow+0xf6>
 8011fb6:	bf00      	nop
 8011fb8:	00000000 	.word	0x00000000
 8011fbc:	43400000 	.word	0x43400000
 8011fc0:	4a454eef 	.word	0x4a454eef
 8011fc4:	3fca7e28 	.word	0x3fca7e28
 8011fc8:	93c9db65 	.word	0x93c9db65
 8011fcc:	3fcd864a 	.word	0x3fcd864a
 8011fd0:	a91d4101 	.word	0xa91d4101
 8011fd4:	3fd17460 	.word	0x3fd17460
 8011fd8:	518f264d 	.word	0x518f264d
 8011fdc:	3fd55555 	.word	0x3fd55555
 8011fe0:	db6fabff 	.word	0xdb6fabff
 8011fe4:	3fdb6db6 	.word	0x3fdb6db6
 8011fe8:	33333303 	.word	0x33333303
 8011fec:	3fe33333 	.word	0x3fe33333
 8011ff0:	dc3a03fd 	.word	0xdc3a03fd
 8011ff4:	3feec709 	.word	0x3feec709
 8011ff8:	145b01f5 	.word	0x145b01f5
 8011ffc:	be3e2fe0 	.word	0xbe3e2fe0
 8012000:	e0000000 	.word	0xe0000000
 8012004:	3feec709 	.word	0x3feec709
 8012008:	652b82fe 	.word	0x652b82fe
 801200c:	3c971547 	.word	0x3c971547
 8012010:	fefa39ef 	.word	0xfefa39ef
 8012014:	3fe62e42 	.word	0x3fe62e42
 8012018:	0ca86c39 	.word	0x0ca86c39
 801201c:	be205c61 	.word	0xbe205c61
 8012020:	00000000 	.word	0x00000000
 8012024:	3fe62e43 	.word	0x3fe62e43
 8012028:	72bea4d0 	.word	0x72bea4d0
 801202c:	3e663769 	.word	0x3e663769
 8012030:	c5d26bf1 	.word	0xc5d26bf1
 8012034:	bebbbd41 	.word	0xbebbbd41
 8012038:	af25de2c 	.word	0xaf25de2c
 801203c:	3f11566a 	.word	0x3f11566a
 8012040:	16bebd93 	.word	0x16bebd93
 8012044:	bf66c16c 	.word	0xbf66c16c
 8012048:	5555553e 	.word	0x5555553e
 801204c:	3fc55555 	.word	0x3fc55555
 8012050:	c2f8f359 	.word	0xc2f8f359
 8012054:	01a56e1f 	.word	0x01a56e1f
 8012058:	0003988e 	.word	0x0003988e
 801205c:	000bb679 	.word	0x000bb679
 8012060:	08012850 	.word	0x08012850
 8012064:	08012870 	.word	0x08012870
 8012068:	08012860 	.word	0x08012860
 801206c:	3fe00000 	.word	0x3fe00000
 8012070:	000fffff 	.word	0x000fffff
 8012074:	4090cbff 	.word	0x4090cbff
 8012078:	3f6f3400 	.word	0x3f6f3400

0801207c <__ieee754_sqrt>:
 801207c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012080:	4770      	bx	lr

08012082 <fabs>:
 8012082:	ec51 0b10 	vmov	r0, r1, d0
 8012086:	ee10 2a10 	vmov	r2, s0
 801208a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801208e:	ec43 2b10 	vmov	d0, r2, r3
 8012092:	4770      	bx	lr

08012094 <finite>:
 8012094:	ee10 3a90 	vmov	r3, s1
 8012098:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801209c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80120a0:	0fc0      	lsrs	r0, r0, #31
 80120a2:	4770      	bx	lr

080120a4 <matherr>:
 80120a4:	2000      	movs	r0, #0
 80120a6:	4770      	bx	lr

080120a8 <nan>:
 80120a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80120b0 <nan+0x8>
 80120ac:	4770      	bx	lr
 80120ae:	bf00      	nop
 80120b0:	00000000 	.word	0x00000000
 80120b4:	7ff80000 	.word	0x7ff80000

080120b8 <rint>:
 80120b8:	b530      	push	{r4, r5, lr}
 80120ba:	b085      	sub	sp, #20
 80120bc:	ed8d 0b00 	vstr	d0, [sp]
 80120c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120c4:	f3c3 510a 	ubfx	r1, r3, #20, #11
 80120c8:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 80120cc:	2813      	cmp	r0, #19
 80120ce:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 80120d2:	dc5a      	bgt.n	801218a <rint+0xd2>
 80120d4:	2800      	cmp	r0, #0
 80120d6:	da2f      	bge.n	8012138 <rint+0x80>
 80120d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80120dc:	4311      	orrs	r1, r2
 80120de:	d027      	beq.n	8012130 <rint+0x78>
 80120e0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80120e4:	4315      	orrs	r5, r2
 80120e6:	426a      	negs	r2, r5
 80120e8:	432a      	orrs	r2, r5
 80120ea:	0b12      	lsrs	r2, r2, #12
 80120ec:	0c5b      	lsrs	r3, r3, #17
 80120ee:	045b      	lsls	r3, r3, #17
 80120f0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80120f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120f8:	ea42 0103 	orr.w	r1, r2, r3
 80120fc:	4b31      	ldr	r3, [pc, #196]	; (80121c4 <rint+0x10c>)
 80120fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012102:	ed93 6b00 	vldr	d6, [r3]
 8012106:	ec41 0b17 	vmov	d7, r0, r1
 801210a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801210e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012112:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012116:	ee37 7b46 	vsub.f64	d7, d7, d6
 801211a:	ed8d 7b00 	vstr	d7, [sp]
 801211e:	9b01      	ldr	r3, [sp, #4]
 8012120:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012128:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 801212c:	e9cd 0100 	strd	r0, r1, [sp]
 8012130:	ed9d 0b00 	vldr	d0, [sp]
 8012134:	b005      	add	sp, #20
 8012136:	bd30      	pop	{r4, r5, pc}
 8012138:	4923      	ldr	r1, [pc, #140]	; (80121c8 <rint+0x110>)
 801213a:	4101      	asrs	r1, r0
 801213c:	ea03 0501 	and.w	r5, r3, r1
 8012140:	4315      	orrs	r5, r2
 8012142:	d0f5      	beq.n	8012130 <rint+0x78>
 8012144:	0849      	lsrs	r1, r1, #1
 8012146:	ea03 0501 	and.w	r5, r3, r1
 801214a:	432a      	orrs	r2, r5
 801214c:	d00b      	beq.n	8012166 <rint+0xae>
 801214e:	ea23 0101 	bic.w	r1, r3, r1
 8012152:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012156:	2813      	cmp	r0, #19
 8012158:	fa43 f300 	asr.w	r3, r3, r0
 801215c:	bf0c      	ite	eq
 801215e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8012162:	2200      	movne	r2, #0
 8012164:	430b      	orrs	r3, r1
 8012166:	4619      	mov	r1, r3
 8012168:	4b16      	ldr	r3, [pc, #88]	; (80121c4 <rint+0x10c>)
 801216a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801216e:	ed94 6b00 	vldr	d6, [r4]
 8012172:	4610      	mov	r0, r2
 8012174:	ec41 0b17 	vmov	d7, r0, r1
 8012178:	ee36 7b07 	vadd.f64	d7, d6, d7
 801217c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012180:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012184:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012188:	e008      	b.n	801219c <rint+0xe4>
 801218a:	2833      	cmp	r0, #51	; 0x33
 801218c:	dd09      	ble.n	80121a2 <rint+0xea>
 801218e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012192:	d1cd      	bne.n	8012130 <rint+0x78>
 8012194:	ed9d 7b00 	vldr	d7, [sp]
 8012198:	ee37 7b07 	vadd.f64	d7, d7, d7
 801219c:	ed8d 7b00 	vstr	d7, [sp]
 80121a0:	e7c6      	b.n	8012130 <rint+0x78>
 80121a2:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 80121a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80121aa:	40c1      	lsrs	r1, r0
 80121ac:	420a      	tst	r2, r1
 80121ae:	d0bf      	beq.n	8012130 <rint+0x78>
 80121b0:	0849      	lsrs	r1, r1, #1
 80121b2:	420a      	tst	r2, r1
 80121b4:	bf1f      	itttt	ne
 80121b6:	ea22 0101 	bicne.w	r1, r2, r1
 80121ba:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80121be:	4102      	asrne	r2, r0
 80121c0:	430a      	orrne	r2, r1
 80121c2:	e7d0      	b.n	8012166 <rint+0xae>
 80121c4:	08012880 	.word	0x08012880
 80121c8:	000fffff 	.word	0x000fffff
 80121cc:	00000000 	.word	0x00000000

080121d0 <scalbn>:
 80121d0:	b500      	push	{lr}
 80121d2:	ed2d 8b02 	vpush	{d8}
 80121d6:	b083      	sub	sp, #12
 80121d8:	ed8d 0b00 	vstr	d0, [sp]
 80121dc:	9b01      	ldr	r3, [sp, #4]
 80121de:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80121e2:	b9a2      	cbnz	r2, 801220e <scalbn+0x3e>
 80121e4:	9a00      	ldr	r2, [sp, #0]
 80121e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80121ea:	4313      	orrs	r3, r2
 80121ec:	d03a      	beq.n	8012264 <scalbn+0x94>
 80121ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80122a8 <scalbn+0xd8>
 80121f2:	4b35      	ldr	r3, [pc, #212]	; (80122c8 <scalbn+0xf8>)
 80121f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80121f8:	4298      	cmp	r0, r3
 80121fa:	ed8d 7b00 	vstr	d7, [sp]
 80121fe:	da11      	bge.n	8012224 <scalbn+0x54>
 8012200:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80122b0 <scalbn+0xe0>
 8012204:	ed9d 6b00 	vldr	d6, [sp]
 8012208:	ee27 7b06 	vmul.f64	d7, d7, d6
 801220c:	e007      	b.n	801221e <scalbn+0x4e>
 801220e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012212:	428a      	cmp	r2, r1
 8012214:	d10a      	bne.n	801222c <scalbn+0x5c>
 8012216:	ed9d 7b00 	vldr	d7, [sp]
 801221a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801221e:	ed8d 7b00 	vstr	d7, [sp]
 8012222:	e01f      	b.n	8012264 <scalbn+0x94>
 8012224:	9b01      	ldr	r3, [sp, #4]
 8012226:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801222a:	3a36      	subs	r2, #54	; 0x36
 801222c:	4402      	add	r2, r0
 801222e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012232:	428a      	cmp	r2, r1
 8012234:	dd0a      	ble.n	801224c <scalbn+0x7c>
 8012236:	ed9f 8b20 	vldr	d8, [pc, #128]	; 80122b8 <scalbn+0xe8>
 801223a:	eeb0 0b48 	vmov.f64	d0, d8
 801223e:	ed9d 1b00 	vldr	d1, [sp]
 8012242:	f000 f843 	bl	80122cc <copysign>
 8012246:	ee20 7b08 	vmul.f64	d7, d0, d8
 801224a:	e7e8      	b.n	801221e <scalbn+0x4e>
 801224c:	2a00      	cmp	r2, #0
 801224e:	dd10      	ble.n	8012272 <scalbn+0xa2>
 8012250:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012254:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012258:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801225c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012260:	e9cd 0100 	strd	r0, r1, [sp]
 8012264:	ed9d 0b00 	vldr	d0, [sp]
 8012268:	b003      	add	sp, #12
 801226a:	ecbd 8b02 	vpop	{d8}
 801226e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012272:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012276:	da06      	bge.n	8012286 <scalbn+0xb6>
 8012278:	f24c 3350 	movw	r3, #50000	; 0xc350
 801227c:	4298      	cmp	r0, r3
 801227e:	dcda      	bgt.n	8012236 <scalbn+0x66>
 8012280:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 80122b0 <scalbn+0xe0>
 8012284:	e7d9      	b.n	801223a <scalbn+0x6a>
 8012286:	e9dd 0100 	ldrd	r0, r1, [sp]
 801228a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801228e:	3236      	adds	r2, #54	; 0x36
 8012290:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012294:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012298:	ec41 0b17 	vmov	d7, r0, r1
 801229c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80122c0 <scalbn+0xf0>
 80122a0:	e7b2      	b.n	8012208 <scalbn+0x38>
 80122a2:	bf00      	nop
 80122a4:	f3af 8000 	nop.w
 80122a8:	00000000 	.word	0x00000000
 80122ac:	43500000 	.word	0x43500000
 80122b0:	c2f8f359 	.word	0xc2f8f359
 80122b4:	01a56e1f 	.word	0x01a56e1f
 80122b8:	8800759c 	.word	0x8800759c
 80122bc:	7e37e43c 	.word	0x7e37e43c
 80122c0:	00000000 	.word	0x00000000
 80122c4:	3c900000 	.word	0x3c900000
 80122c8:	ffff3cb0 	.word	0xffff3cb0

080122cc <copysign>:
 80122cc:	ec51 0b10 	vmov	r0, r1, d0
 80122d0:	ee11 0a90 	vmov	r0, s3
 80122d4:	ee10 2a10 	vmov	r2, s0
 80122d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80122dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80122e0:	ea41 0300 	orr.w	r3, r1, r0
 80122e4:	ec43 2b10 	vmov	d0, r2, r3
 80122e8:	4770      	bx	lr
	...

080122ec <_init>:
 80122ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ee:	bf00      	nop
 80122f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122f2:	bc08      	pop	{r3}
 80122f4:	469e      	mov	lr, r3
 80122f6:	4770      	bx	lr

080122f8 <_fini>:
 80122f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122fa:	bf00      	nop
 80122fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122fe:	bc08      	pop	{r3}
 8012300:	469e      	mov	lr, r3
 8012302:	4770      	bx	lr
